// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiTooltip" : "Supported types:\n  this: Bt2World\n  bodyA: Bt2RigidBody\n  bodyB: Bt2RigidBody\n  frameA: Xfo\n  frameB: Xfo\n  lowerLinLimit: Float32\n  upperLinLimit: Float32\n  lowerAngLimit: Float32\n  upperAngLimit: Float32\n  softness: Float32\n  damping: Float32\n  linMotorForce: Float32\n  linMotorVelocity: Float32\n  angMotorVelocity: Float32\n  angMotorForce: Float32\n  useReferenceFrame: Boolean\n  result: Bt2Constraint\n"
    },
  "title" : "AddSliderConstraint",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "name" : "this",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Bt2World"
      },
    {
      "objectType" : "ExecPort",
      "name" : "bodyA",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Bt2RigidBody"
      },
    {
      "objectType" : "ExecPort",
      "name" : "bodyB",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Bt2RigidBody"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 249,\n  \"g\" : 157,\n  \"b\" : 28\n  }"
        },
      "name" : "frameA",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Xfo"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 249,\n  \"g\" : 157,\n  \"b\" : 28\n  }"
        },
      "name" : "frameB",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Xfo"
      },
    {
      "objectType" : "ExecPort",
      "name" : "lowerLinLimit",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "upperLinLimit",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "lowerAngLimit",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "upperAngLimit",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(0, 1)"
        },
      "name" : "softness",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Float32" : 0.5
        },
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "damping",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "linMotorForce",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "linMotorVelocity",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "angMotorVelocity",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "angMotorForce",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Float32"
      },
    {
      "objectType" : "ExecPort",
      "name" : "useReferenceFrame",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Boolean" : false
        },
      "execPortType" : "In",
      "typeSpec" : "Boolean"
      },
    {
      "objectType" : "ExecPort",
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "Bt2Constraint"
      }
    ],
  "extDeps" : {
    "Bullet2Wrapper" : "*"
    },
  "presetGUID" : "AA7DE14976E71178907F26A89E9625F5",
  "code" : "require Bullet2Wrapper;

dfgEntry {
  result = this.addSliderConstraint(bodyA, bodyB, frameA, frameB, lowerLinLimit, upperLinLimit, lowerAngLimit, upperAngLimit, softness, damping, linMotorForce, linMotorVelocity, angMotorVelocity, angMotorForce, useReferenceFrame);
}
"
  }