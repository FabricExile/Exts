/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;
require Util;
/**
The OBJDataHandle is used to expose a C++ library for opening and loading obj files. 

\example

  require FabricOBJ;
  require FileIO;
  require Geometry;

  function parseObjPolygonMesh(
    io OBJDataHandle objHandle,
    ImporterIdentifier identifier,
    io PolygonMesh mesh
  ) {
    UInt32 i, j, k, src;

    Size polySizes[];
    Size packedPolyPoints[];
    Size packedPolyAttrIndices[];

    objHandle.getEntityFaceTopologyIndices( identifier.index, packedPolyPoints );
    objHandle.getEntityFaceIndices( identifier.index, packedPolyAttrIndices );
    objHandle.getEntityFaceSizes( identifier.index, polySizes );

    UInt32 nbPoly = polySizes.size();
    UInt32 nbPoints = 0;
    for( i = 0; i < packedPolyPoints.size(); ++i ) {
      if( UInt32(packedPolyPoints[i]) >= nbPoints )
        nbPoints = packedPolyPoints[i]+1;
    }
    mesh.createPoints( nbPoints );
    mesh.addPolygons( polySizes, packedPolyPoints );

    Vec3 vec3Data[];
    Ref<Vec3Attribute> normals = mesh.getOrCreateNormals();

    objHandle.getEntityPoints( identifier.index, vec3Data );
    BitVector initPos;
    initPos.resize(nbPoints);
    src = 0;
    for( i = 0; i < nbPoly; ++i ) {
      UInt32 polSize = UInt32(polySizes[i]);
      for( j = 0; j < polSize; ++j ) {
        UInt32 point = mesh.getPolygonPoint( i, j );
        if( !initPos.get(point) ) {
          initPos.set(point);
          UInt32 srcIndex = packedPolyAttrIndices[src];
          mesh.setPointPosition( point, vec3Data[srcIndex] );
        }
        src++;
      }
    }
    objHandle.getEntityNormals( identifier.index, vec3Data );

    mesh.setAttributeFromPolygonPackedData( "normals", vec3Data, packedPolyAttrIndices );

    Boolean hasTextureCoords = false;
    objHandle.hasTextureCoords( hasTextureCoords );

    if( hasTextureCoords ) {
      Vec2 vec2Data[];
      objHandle.getEntityTextureCoords( identifier.index, vec2Data );
      mesh.setAttributeFromPolygonPackedData( "uvs0", vec2Data, packedPolyAttrIndices );
    }
  }


  operator entry(){
    // Load an Fbx file to provide the clip data. 

    FilePath path = FilePath("${FABRIC_SCENE_GRAPH_DIR}/Python/Apps/Resources/Obj/cow.obj").expandEnvVars();
    OBJDataHandle objHandle();
    ImporterOptions options;
    objHandle.openFileHandle(path.string(), options);

    ImporterIdentifier identifiers[];
    objHandle.getIdentifiers(identifiers);

    Size nbPts, nbTris;
    objHandle.getNbEntityPoints(-1, nbPts);
    objHandle.getNbEntityFaces(-1, nbTris);
    report("OBJ : " + identifiers.size() + " identifiers: " + nbPts + " vertices, " + nbTris + " triangles");
    
    String materialNames[];
    objHandle.getMaterialNames( materialNames );
    report("materialNames:" + materialNames);

    for( Size i = 0; i < identifiers.size(); ++i ) {
      objHandle.getNbEntityPoints(i, nbPts);
      objHandle.getNbEntityFaces(i, nbTris);
      String name = (identifiers[i].name != "" ? identifiers[i].name : "(none)");
      String groupName = (identifiers[i].getStringData("groupName") != "" ? identifiers[i].getStringData("groupName") : "(none)");
      String matName = (identifiers[i].getStringData("materialName") != "" ? identifiers[i].getStringData("materialName") : "(none)");
      report("  Entity #" + i + ": objName: " + name + ", groupName: " + groupName  + ", matName: " + matName + ", " + nbPts + " vertices, " + nbTris + " triangles");
    }

    PolygonMesh meshes[];
    meshes.resize(identifiers.size());
    for( Size i = 0; i < identifiers.size(); ++i ) {
      meshes[i] = PolygonMesh();
      parseObjPolygonMesh(objHandle, identifiers[i], meshes[i]);
      meshes[i]._validate();
    }
  }


\endexample
\seealso FbxHandle
*/
object OBJDataHandle {
  Data handle;
};

/// Opens the obj file specified by the given path.
/// \param filePath The location of the file to open.
/// \param options The set of optoins used to configure the obj handle. 
function OBJDataHandle.openFileHandle!( String filePath, ImporterOptions options ) = "FabricOBJOpenFileHandle";
function OBJDataHandle.isValid!( out Boolean valid ) = "FabricOBJIsHandleValid";
function OBJDataHandle.clear!() = "FabricOBJFreeParsedData";
function OBJDataHandle.hasTextureCoords!( out Boolean hasTextureCoords ) = "FabricOBJHasTextureCoords";
function OBJDataHandle.getIdentifiers!( io ImporterIdentifier identifiers[] ) = "FabricOBJGetIdentifiers";
function OBJDataHandle.getNbEntityPoints!( Integer entity /* -1: all */, out Size nbPoints ) = "FabricOBJGetNbEntityPoints";
function OBJDataHandle.getEntityPoints!( Integer entity /* -1: all */, out Vec3 points[] ) = "FabricOBJGetEntityPoints";
function OBJDataHandle.getEntityPointsSliced!( Integer entity /* -1: all */, out Vec3 points<> ) = "FabricOBJGetEntityPointsSliced";
function OBJDataHandle.getEntityNormals!( Integer entity /* -1: all */, out Vec3 normals[] ) = "FabricOBJGetEntityNormals";
function OBJDataHandle.getEntityNormalsSliced!( Integer entity /* -1: all */, out Vec3 normals<> ) = "FabricOBJGetEntityNormalsSliced";
function OBJDataHandle.getEntityTextureCoords!( Integer entity /* -1: all */, out Vec2 texCoords[] ) = "FabricOBJGetEntityTextureCoords";
function OBJDataHandle.getEntityTextureCoordsSliced!( Integer entity /* -1: all */, out Vec2 texCoords<> ) = "FabricOBJGetEntityTextureCoordsSliced";
function OBJDataHandle.getNbEntityFaces!( Integer entity /* -1: all */, out Size nbTriangles ) = "FabricOBJGetNbEntityFaces";
function OBJDataHandle.getEntityFaceIndices!( Integer entity /* -1: all */, out Size faceIndices[] ) = "FabricOBJGetEntityFaceIndices";
function OBJDataHandle.getEntityFaceTopologyIndices!( Integer entity /* -1: all */, out Size faceIndices[] ) = "FabricOBJGetEntityFaceTopologyIndices";
function OBJDataHandle.getEntityFaceSizes!( Integer entity /* -1: all */, out Size faceSizes[] ) = "FabricOBJGetEntityFaceSizes";
function OBJDataHandle.getEntityFaceMaterialIndices!( Integer entity /* -1: all */, out Size triangleIndices[] ) = "FabricOBJGetEntityFaceMaterialIndices";
function OBJDataHandle.getMaterialNames!( out String materialNames[] ) = "FabricOBJGetMaterialNames";

function ~OBJDataHandle() = "FabricOBJFreeParsedData";
