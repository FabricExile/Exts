{
  "objectType" : "Func",
  "metadata" : {
    "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.7.0/HTML/KLExtensionsGuide/Geometry/PolygonMesh.html",
    "uiTooltip" : "Returns points's next `neighborPolygonIndex` in the wing. This follows polygon adjacency around the point:\n- closed wings will be treated as a circular array (next of wing's end index is wing's start index)\n- at open wing's end (border), returned value will be InvalidIndex\nThe returned `neighborPolygonIndex` is in the [0 .. :kl-ref:`PolygonMesh.getPointPolygonCount` -1] range,\nor `InvalidIndex` if `neighborPolygonIndex` is before a border.\nSee :ref:`borderAndWings` for definitions and an example of usage.\n\n Supported by PolygonMesh"
    },
  "title" : "GetPointNextNeighborPolygonIndexInWing[]",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 51,\n  \"g\" : 1,\n  \"b\" : 106\n  }"
        },
      "name" : "this",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "PolygonMesh[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "point",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Size[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Size[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "neighborPolygonIndex",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Size[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Size[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "Size[]"
      }
    ],
  "extDeps" : {
    "Geometry" : "*"
    },
  "presetGUID" : "33C6760A9C577B3036495D7F0EFAB188",
  "code" : "require Geometry;

operator Geometry_PolygonMesh_getPointNextNeighborPolygonIndexInWing_task<<<index>>>(
  io Size[] result
, in PolygonMesh[] this
, in Size[] point
, in Size[] neighborPolygonIndex
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].getPointNextNeighborPolygonIndexInWing(point[index < point.size() ? index : point.size() - 1], neighborPolygonIndex[index < neighborPolygonIndex.size() ? index : neighborPolygonIndex.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( point.size() == 0) return;
  if( neighborPolygonIndex.size() == 0) return;
  Size task_size = this.size();
  if(task_size < point.size()) task_size = point.size();
  if(task_size < neighborPolygonIndex.size()) task_size = neighborPolygonIndex.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Geometry_PolygonMesh_getPointNextNeighborPolygonIndexInWing_task(index, result, this, point, neighborPolygonIndex);
    }
  } else {
    Geometry_PolygonMesh_getPointNextNeighborPolygonIndexInWing_task<<<task_size>>>(result, this, point, neighborPolygonIndex);
  }
}
"
  }