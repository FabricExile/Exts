// Created by kl2dfg (processFunction)
{
  "objectType" : "Func",
  "metadata" : {
    "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.7.0/HTML/KLExtensionsGuide/Geometry/PolygonMeshSpatialQuery.html",
    "uiTooltip" : "Returns a mesh GeometryLocation such that its value for uvAttribute equals uv.\nIf none exist, an invalid GeometryLocation is returned (see :kl-ref:`GeometryLocation.isValid`).\nNote that there could be many such GeometryLocation. To get them all, use method :kl-ref:`PolygonMeshSpatialQuery.uvToLocations`.\n\nSupported types:\n  this: PolygonMeshSpatialQuery\n  uvAttribute: Ref<Vec2Attribute>\n  uv: Vec2\n  wrapUVs: Boolean\n  result: GeometryLocation\n"
    },
  "title" : "UvToLocation",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "name" : "this",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "PolygonMeshSpatialQuery"
      },
    {
      "objectType" : "ExecPort",
      "name" : "uvAttribute",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Vec2Attribute"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 242,\n  \"b\" : 0\n  }"
        },
      "name" : "uv",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Vec2"
      },
    {
      "objectType" : "ExecPort",
      "name" : "wrapUVs",
      "nodePortType" : "Out",
      "execPortType" : "In",
      "typeSpec" : "Boolean"
      },
    {
      "objectType" : "ExecPort",
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "GeometryLocation"
      }
    ],
  "extDeps" : {
    "Geometry" : "*"
    },
  "presetGUID" : "9D513C7AAC3CE235AA62D2264F020AE2",
  "code" : "require Geometry;

dfgEntry {
  Ref<Vec2Attribute> uvAttribute_ref = uvAttribute;
  result = this.uvToLocation(uvAttribute_ref, uv, wrapUVs);
}
"
  }