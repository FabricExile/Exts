

///////////////////////////////////////////////
/// \note Added to support GPU compute while objects are not supported on the GPU.

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Scalar attributeValues[], Scalar value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Scalar attributeValues[], LocalL16ScalarArray value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) ){
    for(Size i = 0; i < value.size(); ++i)
      attributeValues[attributeIndex*value.size()+i] = value.get(i);
  }
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Integer attributeValues[], Integer value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io UInt32 attributeValues[], UInt32 value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io UInt16 attributeValues[], LocalL16UInt16Array value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) ){
    for(Size i = 0; i < value.size(); ++i)
      attributeValues[attributeIndex*value.size()+i] = UInt16(value.get(i));
  }
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io RGB attributeValues[], RGB value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io RGBA attributeValues[], RGBA value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Vec2 attributeValues[], Vec2 value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Vec3 attributeValues[], Vec3 value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Vec3_d attributeValues[], Vec3_d value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Vec4 attributeValues[], Vec4 value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Quat attributeValues[], Quat value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Color attributeValues[], Color value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Mat33 attributeValues[], Mat33 value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io Mat44 attributeValues[], Mat44 value ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeValues[ attributeIndex ] = value;
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io ArrayAttributeData attributeData, LocalL16UInt32Array values ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext( iter, attributeIndex ) )
    attributeData.set( attributeIndex, values );
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io ArrayAttributeData attributeData, LocalL16SInt32Array values ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext( iter, attributeIndex ) )
    attributeData.set( attributeIndex, values );
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io ArrayAttributeData attributeData, LocalL16ScalarArray values ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext( iter, attributeIndex ) )
    attributeData.set( attributeIndex, values );
}

/// \internal
inline PolygonMeshTopology.setPointIterAttribute( DataIter pointIter, io SkinningAttributeData attributeData, LocalL16UInt32Array indices, LocalL16ScalarArray weights ) {
  PolygonMesh_UnsharedAttributeIndexIter iter = this.getPointIterUnsharedAttributeIndexIter( pointIter );
  UInt32 attributeIndex;
  while( this.PolygonMesh_UnsharedAttributeIndexIterGetNext(iter, attributeIndex) )
    attributeData.setPairs(attributeIndex, indices, weights);
}

///////////////////////////////////////////////


/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Scalar attributeValues[], Scalar value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}


/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Scalar attributeValues[], LocalL16ScalarArray value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else{
    for(Size i = 0; i < value.size(); ++i)
      attributeValues[point*value.size()+i] = value.get(i);
  }
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Integer attributeValues[], Integer value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io UInt32 attributeValues[], UInt32 value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io UInt16 attributeValues[], LocalL16UInt16Array value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else{
    for(Size i = 0; i < value.size(); ++i)
      attributeValues[point*value.size()+i] = value.get(i);
  }
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io RGB attributeValues[], RGB value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io RGBA attributeValues[], RGBA value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Vec2 attributeValues[], Vec2 value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Vec3 attributeValues[], Vec3 value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Vec3_d attributeValues[], Vec3_d value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Vec4 attributeValues[], Vec4 value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Quat attributeValues[], Quat value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Color attributeValues[], Color value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Mat33 attributeValues[], Mat33 value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io Mat44 attributeValues[], Mat44 value ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attributeValues, value );
  else
    attributeValues[point] = value;
}

/**
Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
\note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
\note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
\seealso :ref:`polygonmeshattributes`
\category attributes
\dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io ArrayAttributeData attribute, LocalL16UInt32Array values ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attribute, values );
  else
    attribute.set( point, values );
}

/**
Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
\note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
\note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
\seealso :ref:`polygonmeshattributes`
\category attributes
\dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io ArrayAttributeData attribute, LocalL16SInt32Array values ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attribute, values );
  else
    attribute.set( point, values );
}

/**
Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
\note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
\note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
\seealso :ref:`polygonmeshattributes`
\category attributes
\dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io ArrayAttributeData attribute, LocalL16ScalarArray values ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attribute, values );
  else
    attribute.set( point, values );
}

/**
  Sets an attribute's value for all neighbors around the point (uniform / shared value). The attribute must be one of this mesh's attributes.
  \note Once values have been set for that attribute, call :kl-ref:`GeometryAttribute.incrementVersion` (see :ref:`attributeversioning`)
  \note This function won't change the attribute sharing layout. This function is threadsafe if the mesh structure and attribute sharing layout is not modified by another thread.
  \seealso :ref:`polygonmeshattributes`
  \category attributes
  \dfgPresetCreate
*/
inline PolygonMeshTopology.setPointAttribute( Size point, io SkinningAttributeData attribute, LocalL16UInt32Array indices, LocalL16ScalarArray weights ) {
  DataIter pointIter = this.getPointIter( point );
  if( pointIter )
    this.setPointIterAttribute( pointIter, attribute, indices, weights );
  else
    attribute.setPairs(point, indices, weights);
}

