/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/**
  Specialized GeometryAttribute containing one Vec3 per element.
  Values can be accessed with the Vec3Attribute.values array member, but its usage might be restricted by the owner Geometry.
*/
object Vec3Attribute : BaseAttribute {
  /// Values array container
  Vec3 values[];

  /// If true, IntegerAttribute.linearCombine and IntegerAttribute.getLinearCombination
  /// will normalize the resulting value.
  Boolean normalize;
};

function StatisticRecord[] Vec3Attribute.getStatistics() {
  StatisticRecord stats[] = this.parent.getStatistics();
  stats.push( StatisticRecord( Statistic_MemoryUsage, this.values.size()*4*3 ) );
  return stats;
}

/// \dfgPresetOmit
Vec3Attribute.cloneMembersTo( io Vec3Attribute that ) {
  //The difference with default clone() is that new.parent.autoStat will point to 'new' (from constructor)
  this.parent.cloneMembersTo(that);//Copies all but the values
  that.copyFrom(this);
  that.normalize = this.normalize;
}

inline Vec3Attribute.resize!(Size count) {
  this.parent.resize(count);
  this.values.resize(count);
}

inline Boolean Vec3Attribute.checkConsistency() {
  if( this.size() != this.values.size() )
    return false;
  return this.parent.checkConsistency();
}

inline Data Vec3Attribute.data() {
  return this.values.data();
}

inline UInt32 Vec3Attribute.getElementsMemType( ) {
  return this.values.getElementsMemType();
}

inline Vec3Attribute.convertToGPU!( ) {
  this.values.convertToGPU();
  this.incrementVersion();
}

inline Vec3Attribute.convertToCPU!( ) {
  this.values.convertToCPU();
  this.incrementVersion();
}

inline Vec3Attribute.copyValue!( Size sourceIndex, Size targetIndex ) {
  this.values[targetIndex] = this.values[sourceIndex];
}

inline Vec3Attribute.copyValue!( Ref<Object> sourceAttr, Size sourceIndex, Size targetIndex ) {
  Ref<Vec3Attribute> source = sourceAttr;
  this.values[targetIndex] = source.values[sourceIndex];
}

inline Vec3Attribute.copyFrom!( Ref<Object> otherAttr ) {
  this.parent.copyFrom( otherAttr );
  Ref<Vec3Attribute> other = otherAttr;
  other.values.copyTo(this.values);
}

/** Returns a linear combination of source values. If QuatAttribute.normalize, the resulting value will be normalized.
    \param sourceIndices The array of source indices
    \param sourceWeights The array of source weights, which need to correspond to each sourceIndices. Normally the sum of the weights should be 1.0
*/
inline Vec3 Vec3Attribute.getLinearCombination( LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights ) {
  Vec3 result;
  for( Size i = 0; i < sourceIndices.size(); ++i )
    result += this.values[sourceIndices.get(i)]*sourceWeights.get(i);
  if(this.normalize)
    result = result.unit_safe();
  return result;
}

inline Vec3Attribute.linearCombine!( Ref<Object> sourceAttr, LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights, Size targetIndex ) {
  Ref<Vec3Attribute> source = sourceAttr;
  this.values[targetIndex] = source.getLinearCombination( sourceIndices, sourceWeights );
}

inline Vec3Attribute.setFromScalar!( Size index, LocalL16ScalarArray value ) {
  this.values[index].x = value.get(0);
  this.values[index].y = value.get(1);
  this.values[index].z = value.get(2);
}

inline Size Vec3Attribute.getScalarValueSize() {
  return 3;
}

inline Boolean Vec3Attribute.equalValues( Size index1, Size index2 ) {
  return this.values[index1].equal( this.values[index2] );
}

function String Vec3Attribute.valueDesc( Size index ) {
  return String(this.values[index]);
}

require Util;
function String Vec3Attribute.unitTestPrint( Size index ) {
  return unitTestPrint(this.values[index]);
}

function String Vec3Attribute.truncateDecimalsPrint( Size index, UInt32 n ) {
  return truncateDecimalsPrint(this.values[index], n);
}

/// If it exists, returns the attribute of that name, else creates it.
function Ref<Vec3Attribute> GeometryAttributes.getOrCreateVec3Attribute!( String name ) {
  return this.getOrCreateAttribute( name, Vec3Attribute );
}
