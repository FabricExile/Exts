/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/**
  Specialized GeometryAttribute containing one RGB per element.
  Values can be accessed with the RGBAttribute.values array member, but its usage might be restricted by the owner Geometry.
*/
object RGBAttribute : BaseAttribute {
  /// Values array container
  RGB values[];
};

function StatisticRecord[] RGBAttribute.getStatistics() {
  StatisticRecord stats[] = this.parent.getStatistics();
  stats.push( StatisticRecord( Statistic_MemoryUsage, this.values.size()*3 ) );
  return stats;
}

/// \dfgPresetOmit
RGBAttribute.cloneMembersTo( io RGBAttribute that ) {
  //The difference with default clone() is that new.parent.autoStat will point to 'new' (from constructor)
  this.parent.cloneMembersTo(that);//Copies all but the values
  that.copyFrom(this);
}

inline RGBAttribute.resize!(Size count) {
  this.parent.resize(count);
  this.values.resize(count);
}

inline Boolean RGBAttribute.checkConsistency() {
  if( this.size() != this.values.size() )
    return false;
  return this.parent.checkConsistency();
}

inline Data RGBAttribute.data() {
  return this.values.data();
}

inline UInt32 RGBAttribute.getElementsMemType( ) {
  return this.values.getElementsMemType();
}

inline RGBAttribute.convertToGPU!( ) {
  this.values.convertToGPU();
  this.incrementVersion();
}

inline RGBAttribute.convertToCPU!( ) {
  this.values.convertToCPU();
  this.incrementVersion();
}


inline RGBAttribute.copyValue!( Size sourceIndex, Size targetIndex ) {
  this.values[targetIndex] = this.values[sourceIndex];
}

inline RGBAttribute.copyValue!( Ref<Object> sourceAttr, Size sourceIndex, Size targetIndex ) {
  Ref<RGBAttribute> source = sourceAttr;
  this.values[targetIndex] = source.values[sourceIndex];
}

/** Returns a linear combination of source values.
    \param sourceIndices The array of source indices
    \param sourceWeights The array of source weights, which need to correspond to each sourceIndices. Normally the sum of the weights should be 1.0
*/
inline RGB RGBAttribute.getLinearCombination( LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights ) {
  Vec3 result;
  for( Size i = 0; i < sourceIndices.size(); ++i ) {
    RGB sourceData = this.values[sourceIndices.get(i)];
    Vec3 source = Vec3(sourceData.r, sourceData.g, sourceData.b);
    result += source*sourceWeights.get(i);
  }
  result = result*255.0 + Vec3(0.5,0.5,0.5);//rounding
  return RGB(Byte(result.x), Byte(result.y), Byte(result.z));
}

inline RGBAttribute.linearCombine!( Ref<Object> sourceAttr, LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights, Size targetIndex ) {
  Ref<RGBAttribute> source = sourceAttr;
  this.values[targetIndex] = source.getLinearCombination(sourceIndices, sourceWeights);
}

inline RGBAttribute.copyFrom!( Ref<Object> otherAttr ) {
  this.parent.copyFrom( otherAttr );
  Ref<RGBAttribute> other = otherAttr;
  other.values.copyTo(this.values);
}

inline RGBAttribute.setFromScalar!( Size index, LocalL16ScalarArray value ) {
  this.values[index].r = Byte(value.get(0)*255.0 + 0.5);//rounding
  this.values[index].g = Byte(value.get(1)*255.0 + 0.5);//rounding
  this.values[index].b = Byte(value.get(2)*255.0 + 0.5);//rounding
}

inline Size RGBAttribute.getScalarValueSize() {
  return 3;
}

inline Boolean RGBAttribute.equalValues( Size index1, Size index2 ) {
  return this.values[index1].equal( this.values[index2] );
}

function String RGBAttribute.valueDesc( Size index ) {
  return String(this.values[index]);
}

require Util;
function String RGBAttribute.unitTestPrint( Size index ) {
  return this.valueDesc(index);
}

function String RGBAttribute.truncateDecimalsPrint( Size index, UInt32 n ) {
  return this.valueDesc(index);
}

/// If it exists, returns the attribute of that name, else creates it.
function Ref<RGBAttribute> GeometryAttributes.getOrCreateRGBAttribute!( String name ) {
  return this.getOrCreateAttribute( name, RGBAttribute );
}
