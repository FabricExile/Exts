/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/**
  Specialized GeometryAttribute containing one Vec2 per element.
  Values can be accessed with the Vec2Attribute.values array member, but its usage might be restricted by the owner Geometry.
*/
object Vec2Attribute : BaseAttribute {
  /// Values array container
  Vec2 values[];
};

function StatisticRecord[] Vec2Attribute.getStatistics() {
  StatisticRecord stats[] = this.parent.getStatistics();
  stats.push( StatisticRecord( Statistic_MemoryUsage, this.values.size()*4*2 ) );
  return stats;
}

/// \dfgPresetOmit
Vec2Attribute.cloneMembersTo( io Vec2Attribute that ) {
  this.parent.cloneMembersTo(that);//Copies all but the values
  that.copyFrom(this);
}

inline Vec2Attribute.resize!(Size count) {
  this.parent.resize(count);
  this.values.resize(count);
}

inline Boolean Vec2Attribute.checkConsistency() {
  if( this.size() != this.values.size() )
    return false;
  return this.parent.checkConsistency();
}

inline Data Vec2Attribute.data() {
  return this.values.data();
}

inline UInt32 Vec2Attribute.getElementsMemType( ) {
  return this.values.getElementsMemType();
}

inline Vec2Attribute.convertToGPU!( ) {
  this.values.convertToGPU();
  this.incrementVersion();
}

inline Vec2Attribute.convertToCPU!( ) {
  this.values.convertToCPU();
  this.incrementVersion();
}

inline Vec2Attribute.copyValue!( Size sourceIndex, Size targetIndex ) {
  this.values[targetIndex] = this.values[sourceIndex];
}

inline Vec2Attribute.copyValue!( Ref<Object> sourceAttr, Size sourceIndex, Size targetIndex ) {
  Ref<Vec2Attribute> source = sourceAttr;
  this.values[targetIndex] = source.values[sourceIndex];
}

inline Vec2Attribute.copyFrom!( Ref<Object> otherAttr ) {
  this.parent.copyFrom( otherAttr );
  Ref<Vec2Attribute> other = otherAttr;
  other.values.copyTo(this.values);
}

/** Returns a linear combination of source values.
    \param sourceIndices The array of source indices
    \param sourceWeights The array of source weights, which need to correspond to each sourceIndices. Normally the sum of the weights should be 1.0
*/
inline Vec2 Vec2Attribute.getLinearCombination( LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights ) {
  Vec2 result;
  for( Size i = 0; i < sourceIndices.size(); ++i )
    result += this.values[sourceIndices.get(i)]*sourceWeights.get(i);
  return result;
}

inline Vec2Attribute.linearCombine!( Ref<Object> sourceAttr, LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights, Size targetIndex ) {
  Ref<Vec2Attribute> source = sourceAttr;
  this.values[targetIndex] = source.getLinearCombination( sourceIndices, sourceWeights );
}

inline Vec2Attribute.setFromScalar!( Size index, LocalL16ScalarArray value ) {
  this.values[index].x = value.get(0);
  this.values[index].y = value.get(1);
}

inline Size Vec2Attribute.getScalarValueSize() {
  return 2;
}

inline Boolean Vec2Attribute.equalValues( Size index1, Size index2 ) {
  return this.values[index1].equal( this.values[index2] );
}


function String Vec2Attribute.valueDesc( Size index ) {
  return String(this.values[index]);
}

require Util;
function String Vec2Attribute.unitTestPrint( Size index ) {
  return unitTestPrint(this.values[index]);
}

function String Vec2Attribute.truncateDecimalsPrint( Size index, UInt32 n ) {
  return truncateDecimalsPrint(this.values[index], n);
}

/// If it exists, returns the attribute of that name, else creates it.
function Ref<Vec2Attribute> GeometryAttributes.getOrCreateVec2Attribute!( String name ) {
  return this.getOrCreateAttribute( name, Vec2Attribute );
}
