/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/**
  Specialized GeometryAttribute containing one Integer per element.
  Values can be accessed with the IntegerAttribute.values array member, but its usage might be restricted by the owner Geometry.
*/
object IntegerAttribute : BaseAttribute {
  /// Values array container
  Integer values[];

  /// If true, IntegerAttribute.linearCombine and IntegerAttribute.getLinearCombination
  /// will average the values. Else, an arbitrary source value will be used.
  Boolean canInterpolate;
};

function StatisticRecord[] IntegerAttribute.getStatistics() {
  StatisticRecord stats[] = this.parent.getStatistics();
  stats.push( StatisticRecord( Statistic_MemoryUsage, this.values.size()*4 ) );
  return stats;
}

/// \dfgPresetOmit
IntegerAttribute.cloneMembersTo( io IntegerAttribute that ) {
  //The difference with default clone() is that new.parent.autoStat will point to 'new' (from constructor)
  this.parent.cloneMembersTo(that);//Copies all but the values
  that.copyFrom(this);
  that.canInterpolate = this.canInterpolate;
}

inline IntegerAttribute.resize!(Size count) {
  this.parent.resize(count);
  this.values.resize(count);
}

inline Boolean IntegerAttribute.checkConsistency() {
  if( this.size() != this.values.size() )
    return false;
  return this.parent.checkConsistency();
}

inline Data IntegerAttribute.data() {
  return this.values.data();
}

inline UInt32 IntegerAttribute.getElementsMemType( ) {
  return this.values.getElementsMemType();
}

inline IntegerAttribute.convertToGPU!( ) {
  this.values.convertToGPU();
  this.incrementVersion();
}

inline IntegerAttribute.convertToCPU!( ) {
  this.values.convertToCPU();
  this.incrementVersion();
}

inline IntegerAttribute.copyValue!( Size sourceIndex, Size targetIndex ) {
  this.values[targetIndex] = this.values[sourceIndex];
}

inline IntegerAttribute.copyValue!( Ref<Object> sourceAttr, Size sourceIndex, Size targetIndex ) {
  Ref<IntegerAttribute> source = sourceAttr;
  this.values[targetIndex] = source.values[sourceIndex];
}

inline IntegerAttribute.copyFrom!( Ref<Object> otherAttr ) {
  this.parent.copyFrom( otherAttr );
  Ref<IntegerAttribute> other = otherAttr;
  other.values.copyTo(this.values);
}

/** Returns a linear combination of source values. If IntegerAttribute.canInterpolate is false, an arbitrary source value will be returned.
    \param sourceIndices The array of source indices
    \param sourceWeights The array of source weights, which need to correspond to each sourceIndices. Normally the sum of the weights should be 1.0
*/
inline Integer IntegerAttribute.getLinearCombination( LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights ) {
  if( this.canInterpolate ) {
    Float64 result;//Minimize rounding errors
    for( Size i = 0; i < sourceIndices.size(); ++i )
      result += this.values[sourceIndices.get(i)]*sourceWeights.get(i);
    return Integer(result+0.5);//rounding
  } else if(sourceIndices.size())
    return this.values[sourceIndices.get(0)];
  return 0;
}

inline IntegerAttribute.linearCombine!( Ref<Object> sourceAttr, LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights, Size targetIndex ) {
  Ref<IntegerAttribute> source = sourceAttr;
  this.values[targetIndex] = source.getLinearCombination( sourceIndices, sourceWeights );
}

inline IntegerAttribute.setFromScalar!( Size index, LocalL16ScalarArray value ) {
  this.values[index] = Integer(value.get(0));
}

inline Size IntegerAttribute.getScalarValueSize() {
  return 1;
}

inline Boolean IntegerAttribute.equalValues( Size index1, Size index2 ) {
  return this.values[index1] == this.values[index2];
}

function String IntegerAttribute.valueDesc( Size index ) {
  return String(this.values[index]);
}

require Util;
function String IntegerAttribute.unitTestPrint( Size index ) {
  return this.valueDesc(index);
}

function String IntegerAttribute.truncateDecimalsPrint( Size index , UInt32 n) {
  return this.valueDesc(index);
}

/// If it exists, returns the attribute of that name, else creates it.
function Ref<IntegerAttribute> GeometryAttributes.getOrCreateIntegerAttribute!( String name ) {
  return this.getOrCreateAttribute( name, IntegerAttribute );
}
