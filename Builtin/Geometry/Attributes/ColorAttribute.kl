/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/**
  Specialized GeometryAttribute containing one Color per element.
  Values can be accessed with the ColorAttribute.values array member, but its usage might be restricted by the owner Geometry.
*/
object ColorAttribute : BaseAttribute {
  /// Values array container
  Color values[];
};

function StatisticRecord[] ColorAttribute.getStatistics() {
  StatisticRecord stats[] = this.parent.getStatistics();
  stats.push( StatisticRecord( Statistic_MemoryUsage, this.values.size()*4*4 ) );
  return stats;
}

/// \dfgPresetOmit
ColorAttribute.cloneMembersTo( io ColorAttribute that ) {
  //The difference with default clone() is that new.parent.autoStat will point to 'new' (from constructor)
  this.parent.cloneMembersTo(that);//Copies all but the values
  that.copyFrom(this);
}

inline ColorAttribute.resize!(Size count) {
  this.parent.resize(count);
  this.values.resize(count);
}

inline Boolean ColorAttribute.checkConsistency() {
  if( this.size() != this.values.size() )
    return false;
  return this.parent.checkConsistency();
}

inline Data ColorAttribute.data() {
  return this.values.data();
}

inline UInt32 ColorAttribute.getElementsMemType( ) {
  return this.values.getElementsMemType();
}

inline ColorAttribute.convertToGPU!( ) {
  this.values.convertToGPU();
  this.incrementVersion();
}

inline ColorAttribute.convertToCPU!( ) {
  this.values.convertToCPU();
  this.incrementVersion();
}


inline ColorAttribute.copyValue!( Size sourceIndex, Size targetIndex ) {
  this.values[targetIndex] = this.values[sourceIndex];
}

inline ColorAttribute.copyValue!( Ref<Object> sourceAttr, Size sourceIndex, Size targetIndex ) {
  Ref<ColorAttribute> source = sourceAttr;
  this.values[targetIndex] = source.values[sourceIndex];
}

/** Returns a linear combination of source values.
    \param sourceIndices The array of source indices
    \param sourceWeights The array of source weights, which need to correspond to each sourceIndices. Normally the sum of the weights should be 1.0
*/
inline Color ColorAttribute.getLinearCombination( LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights ) {
  Color result;
  for( Size i = 0; i < sourceIndices.size(); ++i )
    result += this.values[sourceIndices.get(i)]*sourceWeights.get(i);
  return result;
}

inline ColorAttribute.linearCombine!( Ref<Object> sourceAttr, LocalL16UInt32Array sourceIndices, LocalL16ScalarArray sourceWeights, Size targetIndex ) {
  Ref<ColorAttribute> source = sourceAttr;
  this.values[targetIndex] = source.getLinearCombination( sourceIndices, sourceWeights );
}

inline ColorAttribute.copyFrom!( Ref<Object> otherAttr ) {
  this.parent.copyFrom( otherAttr );
  Ref<ColorAttribute> other = otherAttr;
  other.values.copyTo(this.values);
}

inline ColorAttribute.setFromScalar!( Size index, LocalL16ScalarArray value ) {
  this.values[index].r = value.get(0);
  this.values[index].g = value.get(1);
  this.values[index].b = value.get(2);
  this.values[index].a = value.get(3);
}

inline Size ColorAttribute.getScalarValueSize() {
  return 4;
}

inline Boolean ColorAttribute.equalValues( Size index1, Size index2 ) {
  return this.values[index1].equal( this.values[index2] );
}

function String ColorAttribute.valueDesc( Size index ) {
  return String(this.values[index]);
}

require Util;
function String ColorAttribute.unitTestPrint( Size index ) {
  return unitTestPrint(this.values[index]);
}


function String ColorAttribute.truncateDecimalsPrint( Size index , UInt32 n) {
  return truncateDecimalsPrint(this.values[index], n);
}

/// If it exists, returns the attribute of that name, else creates it.
function Ref<ColorAttribute> GeometryAttributes.getOrCreateColorAttribute!( String name ) {
  return this.getOrCreateAttribute( name, ColorAttribute );
}
