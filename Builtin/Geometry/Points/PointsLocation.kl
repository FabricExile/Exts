/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */


/// Returns the point index corresponding to the location.
/// \category SpatialQueryable
/// \dfgCreateArrayPreset
inline Size Points.getLocationPointIndex( GeometryLocation location ) {
  return location.index;
}

/// Returns 'true' if the point location is defined at point's center.
/// See :kl-ref:`Points.getLocationBoundingSphereCoordinate` for more details relatively to sized points' GeometryLocation positions.
/// \category SpatialQueryable
/// \dfgCreateArrayPreset
inline Boolean Points.isLocationAtPointCenter( GeometryLocation location ) {
  return location.barycentric == Vec3();
}

/**
  Sized points' GeometryLocation can encode a spherical coordinate relative to their bounding sphere.
  For a sized point, returns a vector corresponding to point sphere's local coordinate, otherwise, returns Vec3(0,0,0).
  It returns a vector of unit length corresponding to the surface a sphere of radius 1, such that the actual position can be computed as:
\rst

::

  Size pointIndex = points.getPointIndex( location );
  Vec3 position = points.getPosition( pointIndex ) + points.getBoundingSphereCoordinate( location ) * points.getSize( pointIndex );

\endrst
  \seealso Points.isLocationAtPointCenter
  \category SpatialQueryable
*/
inline Vec3 Points.getLocationBoundingSphereCoordinate( GeometryLocation location ) {
  return location.barycentric;
}

inline Points.getLocationAttributeIndicesAndWeights?( GeometryLocation location, io LocalL16UInt32Array attributeIndices, io LocalL16ScalarArray weights ) {
  attributeIndices.push(location.index);
  weights.push(1.0);
}

/// Evaluates the position attribute at a specific location.
///
/// For a sized particle, the returned position might be a position on its bounding sphere surface when applicable
/// (eg: resulting from a :kl-ref:`Points.raycast` or :kl-ref:`Points.getClosest` call).
/// See :kl-ref:`Points.getLocationBoundingSphereCoordinate` for more information.
/// \category SpatialQueryable
/// \dfgCreateArrayPreset
inline Vec3 Points.getPositionAtLocation( GeometryLocation location ) {
  if(!location.isValid())
    return Vec3();
  Vec3 position = this.getAttributes().getPosition(location.index);
  if( location.barycentric == Vec3() )
    return position;

  //The spherical point's coordinate was encoded with barycentrics
  return position + location.barycentric * (this.getSize(location.index) * 0.5);
}

/// \internal
object PointsSpatialQueryCache {
  Ref<Points> points; //Don't keep a hard ref, since this cache can be stored as a Points shared user data

  Scalar defaultPointSize;

  Size sizesVersion;
  Ref<ScalarAttribute> sizeAttr;

  Size prevCount;
  Size positionsVersion;
  Ref<Vec3Attribute> posAttr;
  Boolean dirtyPositions;

  SpatialAccelerationChooser acceleration;
  SimpleLock updateLock;

  FewObjectsRecyclingAllocator queryAllocator;//PointsSpatialQuery objects
};

/// \internal
object PointsRaycastResult : RaycastResult {
  Vec3 start;
  Vec3 unitDir;
  Vec3 dirPoint;

  Scalar coneThreshold;
  GeometryLocation location;
  Ref<PointsSpatialQueryCache> queryCache;
};

function PointsRaycastResult(Ref<PointsSpatialQueryCache> queryCache) {
  this.queryCache = queryCache;
}

function PointsRaycastResult.reset!( Vec3 start, Vec3 unitDir, Boolean doubleSided, Scalar coneThreshold ) {
  this.start = start;
  this.unitDir = unitDir;
  this.dirPoint = start+unitDir;
  this.coneThreshold = coneThreshold;
  this.location = GeometryLocation();//Invalidate
}

function Boolean PointsRaycastResult.compareAndUpdate!( Size objectIndex, out Scalar maxDistance ) {
  Vec3 point = this.queryCache.posAttr.values[objectIndex];
  Scalar pointRadius = 0.5 * (this.queryCache.sizeAttr ? this.queryCache.sizeAttr.values[objectIndex] : this.queryCache.defaultPointSize);

  Scalar ratio = closestPointToLineRatio( point, this.start, this.dirPoint );
  Vec3 rayPoint = this.start + ratio * this.unitDir;
  Scalar raySquaredDist = (rayPoint - point).lengthSquared();
  Scalar allowedDist = pointRadius + ratio * this.coneThreshold;

  if( raySquaredDist > allowedDist*allowedDist )
    return false;

  Scalar squaredRadius = pointRadius*pointRadius;
  if( raySquaredDist < squaredRadius && abs(ratio) < pointRadius ) {
    // We might cast from 'inside' the particle, in which case distance is 0
    Vec3 centerToStart = this.start - point;
    Scalar rayStartSquaredDist = centerToStart.lengthSquared();
    if( rayStartSquaredDist <= squaredRadius ) {
      maxDistance = 0;
      this.location.index = objectIndex;

      if( pointRadius > 1e-4 )//Encode bounding sphere relative coordinate
        this.location.barycentric = centerToStart / pointRadius;

      return true;
    }
  }

  Scalar distance = ratio;
  Boolean encodeSurfaceCoordinate;
  if( raySquaredDist < squaredRadius && pointRadius > 1e-4 ) {
    //Consider the point as a sphere for the 'distance'
    Scalar squaredHeight = squaredRadius - raySquaredDist;
    distance = ratio - sqrt(squaredHeight);
    encodeSurfaceCoordinate = true;
  }

  if( distance < maxDistance ) {
    this.location.index = objectIndex;
    maxDistance = distance;

    if( encodeSurfaceCoordinate ) {
      //We hit a sized particle: encode the surface location of the sphere we hit.
      Vec3 hitPosition = this.start + distance * this.unitDir;
      Vec3 normal = (hitPosition - point).unit_safe();
      this.location.barycentric.x = normal.x;
      this.location.barycentric.y = normal.y;
      this.location.barycentric.z = normal.z;
    } else
      this.location.barycentric = Vec3();

    return true;
  }
  return false;
}

function PointsRaycastResult.copyResultFrom!( Ref<RaycastResult> other ) {
  Ref<PointsRaycastResult> otherResult = other;
  this.location = otherResult.location;
}

/// \internal
object PointsClosestResult : ClosestResult {
  Vec3 position;
  Vec3 scaling;
  Boolean hasScaling;
  GeometryLocation location;
  Ref<PointsSpatialQueryCache> queryCache;
};

function PointsClosestResult(Ref<PointsSpatialQueryCache> queryCache) {
  this.queryCache = queryCache;
}

function PointsClosestResult.reset!( Vec3 position, Vec3 scaling, Boolean hasScaling ) {
  this.position = position;
  this.scaling = scaling;
  this.hasScaling = hasScaling;
  this.location = GeometryLocation();//Invalidate
}

function Boolean PointsClosestResult.compareAndUpdate!( Size objectIndex, out Scalar maxScaledSquaredDistance ) {
  //Compute distance vector in local space, consider scaling afterward (if any)
  Vec3 point = this.queryCache.posAttr.values[objectIndex];
  Scalar pointRadius = 0.5 * (this.queryCache.sizeAttr ? this.queryCache.sizeAttr.values[objectIndex] : this.queryCache.defaultPointSize);

  Vec3 vector = point - this.position;
  Scalar squaredDistance = vector.lengthSquared();
  Scalar squaredRadius = pointRadius*pointRadius;

  if( squaredDistance <= squaredRadius ) {
    //inside the point
    maxScaledSquaredDistance = 0;
    this.location.index = objectIndex;

    if( pointRadius > 1e-4 )//Encode bounding sphere relative coordinate
      this.location.barycentric = vector / -pointRadius;

    return true;
  }

  //Take radius + scaling into account
  Boolean encodeSurfaceCoordinate;
  Scalar distanceForEncode;

  if( pointRadius <= 1e-4 ) {
    if( this.hasScaling )
      squaredDistance = (vector * this.scaling).lengthSquared();
  } else {
    Scalar distance = sqrt(squaredDistance);

    encodeSurfaceCoordinate = true;
    distanceForEncode = distance;

    if( !this.hasScaling ) {
      distance -= pointRadius;
      squaredDistance = distance * distance;
    } else {
      //More complex; we need to remove the radius from the distance vector in local space
      //and then scale the resulting vector
      Vec3 vectorToSphere = vector * ( (distance - pointRadius)/distance );
      squaredDistance = ( vectorToSphere * this.scaling ).lengthSquared();
    }
  }
  if( squaredDistance < maxScaledSquaredDistance ) {
    this.location.index = objectIndex;
    maxScaledSquaredDistance = squaredDistance;

    if( encodeSurfaceCoordinate && distanceForEncode >= pointRadius ) {
      //We hit a sized particle: encode the surface location of the sphere we hit.
      Vec3 normal = vector / -distanceForEncode;
      this.location.barycentric.x = normal.x;
      this.location.barycentric.y = normal.y;
      this.location.subIndex = normal.z < 0 ? 1 : 2;
    } else
      this.location.subIndex = 0;

    return true;
  }
  return false;
}

function PointsClosestResult.copyResultFrom!( Ref<ClosestResult> other ) {
  Ref<PointsClosestResult> otherResult = other;
  this.location = otherResult.location;
}

/// \internal
object PointsSpatialQuery : SpatialQuery {
  SpatialQueryData data;
  GeometryLocationAccumulator locationAccumulator;//For query like intersectLines
  PointsRaycastResult raycastResult;
  PointsClosestResult closestResult;
  Ref<PointsSpatialQueryCache> queryCache;
};

function PointsSpatialQuery( Ref<PointsSpatialQueryCache> queryCache ) {
  this.queryCache = queryCache;
  this.raycastResult = PointsRaycastResult(queryCache);
  this.closestResult = PointsClosestResult(queryCache);
}

function PointsSpatialQueryCache( Points points ) {
  this.points = points;
  this.acceleration = SpatialAccelerationChooser( points.autoStats );
  this.updateLock = SimpleLock();
  this.queryAllocator = FewObjectsRecyclingAllocator( PointsSpatialQuery(this), 1000, "Warning: Points.beginSpatialQuery: called more than 1000 times, intentional or missing a matching 'endSpatialQuery'?" );
  this.dirtyPositions = true;
}

/// \internal
function Ref<PointsSpatialQueryCache> Points.getQueryCache( Scalar defaultPointSize ) {
  //Note: this is complex to avoid unrequired locking
  Ref<PointsSpatialQueryCache> queryCache = null;
  if( this.spatialAccelerationCache ) {
    queryCache = this.spatialAccelerationCache;
  } else {
    Ref<ThreadsafeMetaDataContainer> mutableMetaData = this.metaData;//Make non-const
    AutoLock AL(mutableMetaData.simpleLock);
    //Another thread might have created it
    queryCache = mutableMetaData.lockedGet("spatialAccel");
    if( !queryCache ) {
      PointsSpatialQueryCache newQueryCache = PointsSpatialQueryCache(this);
      mutableMetaData.lockedSet("spatialAccel", newQueryCache);
      newQueryCache.defaultPointSize = defaultPointSize;
      queryCache = newQueryCache;
    }
  }
  //Check if it is synchronized. Note: another thread might be synchronizing it at the same time.
  Ref<GeometryAttributes> attributes = this.getAttributes();
  Ref<Vec3Attribute> positions = attributes.getPositions();

  if( queryCache.posAttr !== positions || positions.getVersion() != queryCache.positionsVersion ||
      queryCache.sizeAttr !== this.sizesAttribute || 
      (Boolean(this.sizesAttribute) && this.sizesAttribute.getVersion() != queryCache.sizesVersion) ||
      (!this.sizesAttribute && defaultPointSize != queryCache.defaultPointSize ) ) {
    //We assume no lines changes during spatial queries. TODO: use a readers-writers lock here.
    AutoLock AL(queryCache.updateLock);

    //NOTE: conditions need to be checked again since another thread might have updated it
    if( synchronizeVersion( positions.getVersion(), queryCache.positionsVersion ) || positions !== queryCache.posAttr ) {
      queryCache.posAttr = positions;
      queryCache.dirtyPositions = true;
    }

    if( synchronizeVersion( positions.size(), queryCache.prevCount ) ) {
      queryCache.acceleration.setObjectCount( positions.size(), false );
      queryCache.dirtyPositions = true;
    }

    if( this.sizesAttribute ) {
      if( synchronizeVersion( this.sizesAttribute.getVersion(), queryCache.sizesVersion ) || this.sizesAttribute !== queryCache.sizeAttr ) {
        queryCache.sizeAttr = this.sizesAttribute;
        queryCache.dirtyPositions = true;
      }
      queryCache.defaultPointSize = -1;//reset
    } else if( defaultPointSize != queryCache.defaultPointSize ) {
      queryCache.dirtyPositions = true;
      queryCache.defaultPointSize = defaultPointSize;

      queryCache.sizeAttr = this.sizesAttribute;//null
      queryCache.sizesVersion = 0;//reset
    }
  }
  return queryCache;
}

function Points.prepareForSpatialQueries( Size approximateNumberOfQueries, GenericValueContainer options ) {
  Ref<PointsSpatialQueryCache> queryCache = this.getQueryCache(this.defaultPointSize);
  if( queryCache.queryAllocator.allocatedCount() )
    throw("Points.prepareForSpatialQueries: preparing before all endSpatialQuery() were called");
  {
    AutoLock AL(queryCache.updateLock);//TODO: use readers-writers lock
    Boolean accelerationChanged = queryCache.acceleration.synchronizeOptions( options );

    if( accelerationChanged || queryCache.dirtyPositions ) {
      queryCache.acceleration.setObjectCount( queryCache.posAttr.size(), true );
      for( Size i = 0; i < queryCache.posAttr.size(); ++i ) {
        Vec3 center = queryCache.posAttr.values[i];
        Scalar radius;
        if( queryCache.sizeAttr )
          radius = queryCache.sizeAttr.values[i]*0.5; //Assuming "size" is the diameter..??
        else
          radius = queryCache.defaultPointSize*0.5;

        queryCache.acceleration.updateObjectVolume( i, center, radius );
      }
      queryCache.dirtyPositions = false;
    }
    queryCache.acceleration.prepare( approximateNumberOfQueries );
  }
}

inline Points.removeSpatialQueryAcceleration!() {
  this.metaData.remove("spatialAccel");
  this.spatialAccelerationCache = null;
}

inline Ref<SpatialQuery> Points.beginSpatialQuery() {
  return this.getQueryCache(this.defaultPointSize).queryAllocator.allocate();
}

inline Points.endSpatialQuery( Ref<SpatialQuery> query ) {
  Ref<PointsSpatialQuery> pointsQuery = query;
  if( pointsQuery.queryCache.points !== this )
    throw("Points.endSpatialQuery: invalid query object for this");
  this.getQueryCache(this.defaultPointSize).queryAllocator.free(query);
}

inline GeometryLocation PointsSpatialQuery.raycast!( Ray ray, Boolean doubleSided, Scalar coneThreshold, Scalar maxDistance ) {
  Ref<RaycastResult> result = this.raycastResult;
  this.queryCache.acceleration.raycast( !this.queryCache.dirtyPositions, ray, doubleSided, abs(coneThreshold), maxDistance, this.data, result );
  return this.raycastResult.location;
}

/// Raycasts the Points geometry, taking into account the point sizes if applicable (see :ref:`pointsizes`).
/// See :kl-ref:`SpatialQueryable.raycast` for more details about this function and parameters.
/// \note For a sized particle, the returned location can include point's bounding sphere's position, and :kl-ref:`Points.getPositionAtLocation` will return a position on point's bounding sphere, if applicable.
/// \seealso Points.getLocationBoundingSphereCoordinate
/// \category SpatialQueryable
inline GeometryLocation Points.raycast( Ray ray, Boolean doubleSided, Scalar coneThreshold, Scalar maxDistance ) {
  Ref<PointsSpatialQuery> query = this.beginSpatialQuery();
  GeometryLocation location = query.raycast( ray, doubleSided, coneThreshold, maxDistance );
  this.endSpatialQuery(query);
  return location;
}

inline GeometryLocation PointsSpatialQuery.getClosest!( Vec3 position, Vec3 scaling, Scalar maxUnscaledDistance ) {
  Ref<ClosestResult> result = this.closestResult;
  this.queryCache.acceleration.getClosest( !this.queryCache.dirtyPositions, position, scaling, maxUnscaledDistance, this.data, result );
  return this.closestResult.location;
}

/// Gets the closest location of the Points geometry, taking into account the point sizes if applicable (see :ref:`pointsizes`).
/// See :kl-ref:`SpatialQueryable.getClosest` for more details about this function and parameters.
/// \note For a sized particle, the returned location can include point's bounding sphere's position, and :kl-ref:`Points.getPositionAtLocation` will return a position on point's bounding sphere, if applicable.
/// \seealso Points.getLocationBoundingSphereCoordinate
/// \category SpatialQueryable
inline GeometryLocation Points.getClosest( Vec3 position, Vec3 scaling, Scalar maxUnscaledDistance ) {
  Ref<PointsSpatialQuery> query = this.beginSpatialQuery();
  GeometryLocation location = query.getClosest( position, scaling, maxUnscaledDistance );
  this.endSpatialQuery(query);
  return location;
}

function Size PointsSpatialQuery.getElementsInBBox!( Vec3 min, Vec3 max ) {
  return this.queryCache.acceleration.getElementsInBBox( this.queryCache.points, !this.queryCache.dirtyPositions, min, max, this.data );
}

function Size PointsSpatialQuery.getElementsInBSphere!( Vec3 center, Scalar radius ) {
  return this.queryCache.acceleration.getElementsInBSphere( this.queryCache.points, !this.queryCache.dirtyPositions, center, radius, this.data );
}

function Size PointsSpatialQuery.getQueriedElement( Size index ) {
  return this.data.getQueriedElement(index);
}

function Boolean Points.areGeometryLocationsEquivalent( GeometryLocation location0, GeometryLocation location1 ) {
  //Should we take into account the 'normals' thing?
  return location0.index == location1.index;
}

function Size PointsSpatialQuery.getLineIntersections!( Vec3 start, Vec3 end, UInt8 lineIntersectionType ) {
  this.locationAccumulator.reset();
  Size count = this.queryCache.acceleration.getLineIntersectedElements( this.queryCache.points, !this.queryCache.dirtyPositions, start, end, lineIntersectionType, this.data );
  if( !count )
    return 0;

  //Push intersections
  for( Size i = 0; i < count; ++i ) {
    Size objectIndex = this.data.visitedItems.indices[i];
    Vec3 point = this.queryCache.posAttr.values[objectIndex];
    Scalar pointRadius = 0.5 * (this.queryCache.sizeAttr ? this.queryCache.sizeAttr.values[objectIndex] : this.queryCache.defaultPointSize);
    Scalar squaredRadius = pointRadius;

    Scalar ratio = closestPointToLineRatio( point, start, end );

    if( lineIntersectionType != SpatialQuery_lineIntersection && ratio < 0 )
      ratio = 0;
    else if( lineIntersectionType == SpatialQuery_segmentIntersection && ratio > 1.0 )
      ratio = 1.0;

    Vec3 linePoint = start + ratio * (end - start);
    Scalar squaredDist = (linePoint - point).lengthSquared();
    if( squaredDist > squaredRadius )
      continue;

    GeometryLocation location;
    location.index = objectIndex;
    this.locationAccumulator.push( location, squaredDist );
  }

  count = this.locationAccumulator.size();
  if( count > 1 )
    this.locationAccumulator.sort();
  return count;
}

function GeometryLocation PointsSpatialQuery.getQueriedLocation( Size index ) {
  return this.locationAccumulator.getSortedLocation( index );
}
