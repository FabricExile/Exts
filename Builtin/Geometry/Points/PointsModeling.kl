/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/// Adds a point at position `pos`
function Points.addPoint!(Vec3 pos) {
  Integer voff = this.size();
  this.resize(this.size() + 1);
  this.setPosition( voff, pos );
  this.incrementPositionsVersion();
}


/// Adds a point for each position in the `positions` array
function Points.addPoints!(Vec3 positions[]) {
  Integer voff = this.size();
  this.resize(this.size() + positions.size());

  for (Integer i = 0; i < positions.size(); i++) {
    this.setPosition( voff, positions[i] );
    voff++;
  }
  this.incrementPositionsVersion();
}

/// Adds a transformed plane (grid) of points
function Points.addPlane!(Xfo xfo, Scalar length, Scalar width, Integer lengthRows, Integer widthRows) {
  Integer voff = this.size();
  this.resize( voff + Size(lengthRows * widthRows) );

  for (Integer j = 0; j < widthRows; j++) {
    Scalar x = ((j / Scalar(widthRows-1))-0.5) * width;
    for (Integer i = 0; i < lengthRows; i++) {
      Scalar z = ((i / Scalar(lengthRows-1))-0.5) * length;
      this.setPosition( voff, xfo.transformVector(Vec3( x, 0.0, z )) );
      voff++;
    }
  }
  this.incrementPositionsVersion();
}


