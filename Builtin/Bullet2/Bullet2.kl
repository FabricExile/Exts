//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// KL definitions for Bullet2 extension
// Automatically generated by KLUDGE
// *** DO NOT EDIT ***
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Requires
//
// To require another KL extension, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_require('Math')  # -> require Math;
//
//////////////////////////////////////////////////////////////////////////////

require Kludge;
require Math;

//////////////////////////////////////////////////////////////////////////////
//
// Prologs
//
// To add prolog code, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_prolog("""
//   MyGlobalFunc() {
//     report("MyGlobalFunc");
//   }
//
//////////////////////////////////////////////////////////////////////////////


const SInt32 bt_ACTIVE_TAG = 1;
const SInt32 bt_ISLAND_SLEEPING = 2;
const SInt32 bt_WANTS_DEACTIVATION = 3;
const SInt32 bt_DISABLE_DEACTIVATION = 4;
const SInt32 bt_DISABLE_SIMULATION = 5;


//////////////////////////////////////////////////////////////////////////////
//
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32Ref;






//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btVector3;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btVector4;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btMatrix3x3;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btVectorXf;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btMatrixXf;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btVectorXd;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btMatrixXd;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btQuaternion;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btTransform;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btTransformUtil;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btConvexSeparatingDistanceUtil;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_Float32;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_SInt32;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_UInt32;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_UInt16;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_Vec3;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_btCollisionObject;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMotionState;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDefaultMotionState;




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt32Ref;






//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct HullResult;



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct HullDesc;



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btPlane] EDK[Fabric_EDK_KL_btPlane] LIB[btPlane]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btPlane;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[ConvexH] EDK[Fabric_EDK_KL_ConvexH] LIB[ConvexH]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct ConvexH;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[ConvexH_HalfEdge] EDK[Fabric_EDK_KL_ConvexH_HalfEdge] LIB[ConvexH::HalfEdge]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct ConvexH_HalfEdge;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct int4;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[PHullResult] EDK[Fabric_EDK_KL_PHullResult] LIB[PHullResult]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct PHullResult;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct HullLibrary;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btPolarDecomposition;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvhNode;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNode] EDK[Fabric_EDK_KL_btOptimizedBvhNode] LIB[btOptimizedBvhNode *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btOptimizedBvhNode;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBvhSubtreeInfo;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btNodeOverlapCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvh;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhSubtreeInfoData] EDK[Fabric_EDK_KL_btBvhSubtreeInfoData] LIB[btBvhSubtreeInfoData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBvhSubtreeInfoData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNodeFloatData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeFloatData] LIB[btOptimizedBvhNodeFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btOptimizedBvhNodeFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNodeDoubleData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeDoubleData] LIB[btOptimizedBvhNodeDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btOptimizedBvhNodeDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhNodeData] EDK[Fabric_EDK_KL_btQuantizedBvhNodeData] LIB[btQuantizedBvhNodeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvhNodeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhFloatData] EDK[Fabric_EDK_KL_btQuantizedBvhFloatData] LIB[btQuantizedBvhFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvhFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhDoubleData] EDK[Fabric_EDK_KL_btQuantizedBvhDoubleData] LIB[btQuantizedBvhDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvhDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btOptimizedBvh;



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btFace] EDK[Fabric_EDK_KL_btFace] LIB[btFace]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btFace;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btConvexPolyhedron;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionShapeData] EDK[Fabric_EDK_KL_btCollisionShapeData] LIB[btCollisionShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexShape;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConcaveShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexInternalShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalShapeData] EDK[Fabric_EDK_KL_btConvexInternalShapeData] LIB[btConvexInternalShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexInternalShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexInternalAabbCachingShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPolyhedralConvexShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPolyhedralConvexAabbCachingShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBoxShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBox2dShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCapsuleShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCapsuleShapeX;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCapsuleShapeZ;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeData] EDK[Fabric_EDK_KL_btCapsuleShapeData] LIB[btCapsuleShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCapsuleShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConeShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConeShapeX;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConeShapeZ;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeData] EDK[Fabric_EDK_KL_btConeShapeData] LIB[btConeShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConeShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btEmptyShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCylinderShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCylinderShapeX;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCylinderShapeZ;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeData] EDK[Fabric_EDK_KL_btCylinderShapeData] LIB[btCylinderShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCylinderShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btStaticPlaneShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStaticPlaneShapeData] EDK[Fabric_EDK_KL_btStaticPlaneShapeData] LIB[btStaticPlaneShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btStaticPlaneShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBU_Simplex1to4;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexHullShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexHullShapeData] EDK[Fabric_EDK_KL_btConvexHullShapeData] LIB[btConvexHullShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexHullShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvex2dShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btStridingMeshInterface;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btIntIndexData] EDK[Fabric_EDK_KL_btIntIndexData] LIB[btIntIndexData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btIntIndexData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShortIntIndexData] EDK[Fabric_EDK_KL_btShortIntIndexData] LIB[btShortIntIndexData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btShortIntIndexData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShortIntIndexTripletData] EDK[Fabric_EDK_KL_btShortIntIndexTripletData] LIB[btShortIntIndexTripletData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btShortIntIndexTripletData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCharIndexTripletData] EDK[Fabric_EDK_KL_btCharIndexTripletData] LIB[btCharIndexTripletData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCharIndexTripletData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMeshPartData] EDK[Fabric_EDK_KL_btMeshPartData] LIB[btMeshPartData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMeshPartData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStridingMeshInterfaceData] EDK[Fabric_EDK_KL_btStridingMeshInterfaceData] LIB[btStridingMeshInterfaceData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btStridingMeshInterfaceData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btIndexedMesh] EDK[Fabric_EDK_KL_btIndexedMesh] LIB[btIndexedMesh *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btIndexedMesh;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTriangleIndexVertexArray;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMaterialProperties] EDK[Fabric_EDK_KL_btMaterialProperties] LIB[btMaterialProperties *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMaterialProperties;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTriangleIndexVertexMaterialArray;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTriangleMeshShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBvhTriangleMeshShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleMeshShapeData] EDK[Fabric_EDK_KL_btTriangleMeshShapeData] LIB[btTriangleMeshShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTriangleMeshShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTriangleShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btUniformScalingShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeChild] EDK[Fabric_EDK_KL_btCompoundShapeChild] LIB[btCompoundShapeChild *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundShapeChild;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeChildData] EDK[Fabric_EDK_KL_btCompoundShapeChildData] LIB[btCompoundShapeChildData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundShapeChildData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeData] EDK[Fabric_EDK_KL_btCompoundShapeData] LIB[btCompoundShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexPointCloudShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexTriangleMeshShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btHeightfieldTerrainShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMinkowskiSumShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMaterial] EDK[Fabric_EDK_KL_btMaterial] LIB[btMaterial *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMaterial;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultimaterialTriangleMeshShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiSphereShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPositionAndRadius] EDK[Fabric_EDK_KL_btPositionAndRadius] LIB[btPositionAndRadius *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPositionAndRadius;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiSphereShapeData] EDK[Fabric_EDK_KL_btMultiSphereShapeData] LIB[btMultiSphereShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiSphereShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btScaledBvhTriangleMeshShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btScaledTriangleMeshShapeData] EDK[Fabric_EDK_KL_btScaledTriangleMeshShapeData] LIB[btScaledTriangleMeshShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btScaledTriangleMeshShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btShapeHull;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphaseAabbCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseRayCallback] EDK[Fabric_EDK_KL_btBroadphaseRayCallback] LIB[btBroadphaseRayCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphaseRayCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphaseInterface;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphaseProxy;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphasePair] EDK[Fabric_EDK_KL_btBroadphasePair] LIB[btBroadphasePair *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphasePair;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphasePairSortPredicate;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btAxisSweep3] EDK[Fabric_EDK_KL_btAxisSweep3] LIB[btAxisSweep3 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btAxisSweep3;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[bt32BitAxisSweep3] EDK[Fabric_EDK_KL_bt32BitAxisSweep3] LIB[bt32BitAxisSweep3 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct bt32BitAxisSweep3;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithmConstructionInfo] EDK[Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo] LIB[btCollisionAlgorithmConstructionInfo *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionAlgorithmConstructionInfo;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDbvtProxy] EDK[Fabric_EDK_KL_btDbvtProxy] LIB[btDbvtProxy *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDbvtProxy;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDbvtBroadphase;




//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btDispatcherInfo;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDispatcher;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSimpleBroadphaseProxy;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSimpleBroadphase;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btActivatingCollisionAlgorithm] EDK[Fabric_EDK_KL_btActivatingCollisionAlgorithm] LIB[btActivatingCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btActivatingCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBox2dBox2dCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dBox2dCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc] LIB[btBox2dBox2dCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBox2dBox2dCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBoxBoxCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc] LIB[btBoxBoxCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBoxBoxCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxDetector] EDK[Fabric_EDK_KL_btBoxBoxDetector] LIB[btBoxBoxDetector *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBoxBoxDetector;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionConfiguration;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithmCreateFunc] EDK[Fabric_EDK_KL_btCollisionAlgorithmCreateFunc] LIB[btCollisionAlgorithmCreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionAlgorithmCreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionDispatcher;





//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_btCollisionObjectConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_btCollisionObjectPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_btCollisionObjectConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_btCollisionObjectRef;






//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionObject;






//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObjectDoubleData] EDK[Fabric_EDK_KL_btCollisionObjectDoubleData] LIB[btCollisionObjectDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionObjectDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObjectFloatData] EDK[Fabric_EDK_KL_btCollisionObjectFloatData] LIB[btCollisionObjectFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionObjectFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalShapeInfo] EDK[Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo] LIB[btCollisionWorld::LocalShapeInfo *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_LocalShapeInfo;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalRayResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalRayResult] LIB[btCollisionWorld::LocalRayResult *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_LocalRayResult;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_RayResultCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_ClosestRayResultCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_AllHitsRayResultCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalConvexResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalConvexResult] LIB[btCollisionWorld::LocalConvexResult *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_LocalConvexResult;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_ConvexResultCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_ClosestConvexResultCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_ContactResultCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorldImporter;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCollisionAlgorithm_SwappedCreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCompoundCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCompoundCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvex2dConvex2dAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dConvex2dAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc] LIB[btConvex2dConvex2dAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvex2dConvex2dAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexTriangleCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexConcaveCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc] LIB[btConvexConcaveCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexConcaveCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexConcaveCollisionAlgorithm_SwappedCreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexConvexAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConvexAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc] LIB[btConvexConvexAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexConvexAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexPlaneCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPlaneCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc] LIB[btConvexPlaneCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexPlaneCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultCollisionConstructionInfo] EDK[Fabric_EDK_KL_btDefaultCollisionConstructionInfo] LIB[btDefaultCollisionConstructionInfo *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDefaultCollisionConstructionInfo;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDefaultCollisionConfiguration;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btEmptyAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc] LIB[btEmptyAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btEmptyAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGhostObject;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPairCachingGhostObject;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimplePair] EDK[Fabric_EDK_KL_btSimplePair] LIB[btSimplePair *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSimplePair;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btHashedSimplePairCache;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btManifoldResult;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSimulationIslandManager;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimulationIslandManager_IslandCallback] EDK[Fabric_EDK_KL_btSimulationIslandManager_IslandCallback] LIB[btSimulationIslandManager::IslandCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSimulationIslandManager_IslandCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereBoxCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc] LIB[btSphereBoxCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereBoxCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereSphereCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereSphereCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc] LIB[btSphereSphereCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereSphereCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereTriangleCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereTriangleCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc] LIB[btSphereTriangleCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereTriangleCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct SphereTriangleDetector;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct BT_BOX_BOX_TRANSFORM_CACHE;



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btAABB;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct MyCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct MyInternalTriangleIndexCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_CONTACT;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btContactArray;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGenericMemoryPool;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGenericPoolAllocator;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_PAIR] EDK[Fabric_EDK_KL_GIM_PAIR] LIB[GIM_PAIR *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_PAIR;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPairSet;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_DATA] EDK[Fabric_EDK_KL_GIM_BVH_DATA] LIB[GIM_BVH_DATA *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_BVH_DATA;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_BVH_TREE_NODE;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_DATA_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_DATA_ARRAY] LIB[GIM_BVH_DATA_ARRAY *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_BVH_DATA_ARRAY;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_TREE_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY] LIB[GIM_BVH_TREE_NODE_ARRAY *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_BVH_TREE_NODE_ARRAY;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btBvhTree;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPrimitiveManagerBase;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactBvh;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc] LIB[btGImpactCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct BT_QUANTIZED_BVH_NODE;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_QUANTIZED_BVH_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY] LIB[GIM_QUANTIZED_BVH_NODE_ARRAY *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_QUANTIZED_BVH_NODE_ARRAY;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvhTree;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactQuantizedBvh;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTetrahedronShapeEx;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactShapeInterface;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactCompoundShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactCompoundShape_CompoundPrimitiveManager;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactMeshShapePart;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactMeshShapePart_TrimeshPrimitiveManager;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactMeshShape;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapeData] EDK[Fabric_EDK_KL_btGImpactMeshShapeData] LIB[btGImpactMeshShapeData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactMeshShapeData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_TRIANGLE_CONTACT;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPrimitiveTriangle;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTriangleShapeEx;



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMinkowskiPenetrationDepthSolver] EDK[Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver] LIB[btMinkowskiPenetrationDepthSolver]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btMinkowskiPenetrationDepthSolver;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btUsageBitfield;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSubSimplexClosestResult;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btVoronoiSimplexSolver;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btCharacterControllerInterface;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btKinematicCharacterController;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConstraintSolver;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btActionInterface;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDynamicsWorld;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorldDoubleData] EDK[Fabric_EDK_KL_btDynamicsWorldDoubleData] LIB[btDynamicsWorldDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDynamicsWorldDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorldFloatData] EDK[Fabric_EDK_KL_btDynamicsWorldFloatData] LIB[btDynamicsWorldFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDynamicsWorldFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDiscreteDynamicsWorld;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSimpleDynamicsWorld;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btRigidBody;



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btRigidBody_btRigidBodyConstructionInfo;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBodyFloatData] EDK[Fabric_EDK_KL_btRigidBodyFloatData] LIB[btRigidBodyFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btRigidBodyFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBodyDoubleData] EDK[Fabric_EDK_KL_btRigidBodyDoubleData] LIB[btRigidBodyDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btRigidBodyDoubleData;





//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btJointFeedback] EDK[Fabric_EDK_KL_btJointFeedback] LIB[btJointFeedback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btJointFeedback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint_btConstraintInfo1] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1] LIB[btTypedConstraint::btConstraintInfo1 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraint_btConstraintInfo1;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint_btConstraintInfo2] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2] LIB[btTypedConstraint::btConstraintInfo2 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraint_btConstraintInfo2;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintFloatData] EDK[Fabric_EDK_KL_btTypedConstraintFloatData] LIB[btTypedConstraintFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraintFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintData] EDK[Fabric_EDK_KL_btTypedConstraintData] LIB[btTypedConstraintData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraintData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintDoubleData] EDK[Fabric_EDK_KL_btTypedConstraintDoubleData] LIB[btTypedConstraintDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraintDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btAngularLimit;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btRotationalLimitMotor;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTranslationalLimitMotor;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofConstraintData] LIB[btGeneric6DofConstraintData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofConstraintData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2] LIB[btGeneric6DofConstraintDoubleData2 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofConstraintDoubleData2;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btRotationalLimitMotor2;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTranslationalLimitMotor2;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpring2Constraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2ConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData] LIB[btGeneric6DofSpring2ConstraintData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpring2ConstraintData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2ConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2] LIB[btGeneric6DofSpring2ConstraintDoubleData2 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpring2ConstraintDoubleData2;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpringConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintData] LIB[btGeneric6DofSpringConstraintData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpringConstraintData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2] LIB[btGeneric6DofSpringConstraintDoubleData2 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpringConstraintDoubleData2;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolverConstraint] EDK[Fabric_EDK_KL_btSolverConstraint] LIB[btSolverConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSolverConstraint;





//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConeTwistConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraintDoubleData] EDK[Fabric_EDK_KL_btConeTwistConstraintDoubleData] LIB[btConeTwistConstraintDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConeTwistConstraintDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraintData] EDK[Fabric_EDK_KL_btConeTwistConstraintData] LIB[btConeTwistConstraintData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConeTwistConstraintData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btContactConstraint;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoData] EDK[Fabric_EDK_KL_btContactSolverInfoData] LIB[btContactSolverInfoData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btContactSolverInfoData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfo] EDK[Fabric_EDK_KL_btContactSolverInfo] LIB[btContactSolverInfo *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btContactSolverInfo;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoDoubleData] EDK[Fabric_EDK_KL_btContactSolverInfoDoubleData] LIB[btContactSolverInfoDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btContactSolverInfoDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoFloatData] EDK[Fabric_EDK_KL_btContactSolverInfoFloatData] LIB[btContactSolverInfoFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btContactSolverInfoFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGearConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraintFloatData] EDK[Fabric_EDK_KL_btGearConstraintFloatData] LIB[btGearConstraintFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGearConstraintFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraintDoubleData] EDK[Fabric_EDK_KL_btGearConstraintDoubleData] LIB[btGearConstraintDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btGearConstraintDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btFixedConstraint] EDK[Fabric_EDK_KL_btFixedConstraint] LIB[btFixedConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btFixedConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btHinge2Constraint;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btHingeConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintDoubleData] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData] LIB[btHingeConstraintDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btHingeConstraintDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btHingeAccumulatedAngleConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintFloatData] EDK[Fabric_EDK_KL_btHingeConstraintFloatData] LIB[btHingeConstraintFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btHingeConstraintFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintDoubleData2] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData2] LIB[btHingeConstraintDoubleData2 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btHingeConstraintDoubleData2;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btJacobianEntry;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConstraintSetting] EDK[Fabric_EDK_KL_btConstraintSetting] LIB[btConstraintSetting *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btConstraintSetting;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPoint2PointConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintFloatData] EDK[Fabric_EDK_KL_btPoint2PointConstraintFloatData] LIB[btPoint2PointConstraintFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPoint2PointConstraintFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintDoubleData2] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData2] LIB[btPoint2PointConstraintDoubleData2 *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPoint2PointConstraintDoubleData2;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintDoubleData] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData] LIB[btPoint2PointConstraintDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btPoint2PointConstraintDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSequentialImpulseConstraintSolver;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btNNCGConstraintSolver;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSliderConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraintData] EDK[Fabric_EDK_KL_btSliderConstraintData] LIB[btSliderConstraintData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSliderConstraintData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraintDoubleData] EDK[Fabric_EDK_KL_btSliderConstraintDoubleData] LIB[btSliderConstraintDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSliderConstraintDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolve2LinearConstraint] EDK[Fabric_EDK_KL_btSolve2LinearConstraint] LIB[btSolve2LinearConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSolve2LinearConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSolverBody;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btUniversalConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btRaycastVehicle;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRaycastVehicle_btVehicleTuning] EDK[Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning] LIB[btRaycastVehicle::btVehicleTuning *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btRaycastVehicle_btVehicleTuning;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDefaultVehicleRaycaster;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btVehicleRaycaster;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVehicleRaycaster_btVehicleRaycasterResult] EDK[Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult] LIB[btVehicleRaycaster::btVehicleRaycasterResult *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btVehicleRaycaster_btVehicleRaycasterResult;



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btWheelInfoConstructionInfo;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btWheelInfo;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct btWheelInfo_RaycastInfo;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodySolver;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodySolverOutput] EDK[Fabric_EDK_KL_btSoftBodySolverOutput] LIB[btSoftBodySolverOutput *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodySolverOutput;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDefaultSoftBodySolver;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyWorldInfo] EDK[Fabric_EDK_KL_btSoftBodyWorldInfo] LIB[btSoftBodyWorldInfo *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyWorldInfo;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eAeroModel] EDK[Fabric_EDK_KL_btSoftBody_eAeroModel] LIB[btSoftBody::eAeroModel *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_eAeroModel;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eVSolver] EDK[Fabric_EDK_KL_btSoftBody_eVSolver] LIB[btSoftBody::eVSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_eVSolver;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_ePSolver] EDK[Fabric_EDK_KL_btSoftBody_ePSolver] LIB[btSoftBody::ePSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_ePSolver;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eSolverPresets] EDK[Fabric_EDK_KL_btSoftBody_eSolverPresets] LIB[btSoftBody::eSolverPresets *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_eSolverPresets;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eFeature] EDK[Fabric_EDK_KL_btSoftBody_eFeature] LIB[btSoftBody::eFeature *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_eFeature;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_fCollision] EDK[Fabric_EDK_KL_btSoftBody_fCollision] LIB[btSoftBody::fCollision *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_fCollision;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_fMaterial] EDK[Fabric_EDK_KL_btSoftBody_fMaterial] LIB[btSoftBody::fMaterial *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_fMaterial;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sRayCast] EDK[Fabric_EDK_KL_btSoftBody_sRayCast] LIB[btSoftBody::sRayCast *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_sRayCast;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_ImplicitFn;




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Float32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Float32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Float32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Float32Ref;







//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Vec3ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Vec3Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Vec3ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Vec3Ref;






//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sCti] EDK[Fabric_EDK_KL_btSoftBody_sCti] LIB[btSoftBody::sCti *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_sCti;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sMedium] EDK[Fabric_EDK_KL_btSoftBody_sMedium] LIB[btSoftBody::sMedium *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_sMedium;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Element] EDK[Fabric_EDK_KL_btSoftBody_Element] LIB[btSoftBody::Element *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Element;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Material] EDK[Fabric_EDK_KL_btSoftBody_Material] LIB[btSoftBody::Material *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Material;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Feature] EDK[Fabric_EDK_KL_btSoftBody_Feature] LIB[btSoftBody::Feature *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Feature;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Node] EDK[Fabric_EDK_KL_btSoftBody_Node] LIB[btSoftBody::Node *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Node;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Link] EDK[Fabric_EDK_KL_btSoftBody_Link] LIB[btSoftBody::Link *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Link;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Face] EDK[Fabric_EDK_KL_btSoftBody_Face] LIB[btSoftBody::Face *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Face;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Tetra] EDK[Fabric_EDK_KL_btSoftBody_Tetra] LIB[btSoftBody::Tetra *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Tetra;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_RContact] EDK[Fabric_EDK_KL_btSoftBody_RContact] LIB[btSoftBody::RContact *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_RContact;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_SContact] EDK[Fabric_EDK_KL_btSoftBody_SContact] LIB[btSoftBody::SContact *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_SContact;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Anchor] EDK[Fabric_EDK_KL_btSoftBody_Anchor] LIB[btSoftBody::Anchor *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Anchor;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Note] EDK[Fabric_EDK_KL_btSoftBody_Note] LIB[btSoftBody::Note *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Note;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Pose] EDK[Fabric_EDK_KL_btSoftBody_Pose] LIB[btSoftBody::Pose *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Pose;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Cluster] EDK[Fabric_EDK_KL_btSoftBody_Cluster] LIB[btSoftBody::Cluster *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Cluster;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Impulse] EDK[Fabric_EDK_KL_btSoftBody_Impulse] LIB[btSoftBody::Impulse *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Impulse;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Body;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Joint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint_eType] EDK[Fabric_EDK_KL_btSoftBody_Joint_eType] LIB[btSoftBody::Joint::eType *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Joint_eType;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint_Specs] EDK[Fabric_EDK_KL_btSoftBody_Joint_Specs] LIB[btSoftBody::Joint::Specs *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Joint_Specs;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_LJoint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_LJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_LJoint_Specs] LIB[btSoftBody::LJoint::Specs *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_LJoint_Specs;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_AJoint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_AJoint_IControl;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_AJoint_Specs] LIB[btSoftBody::AJoint::Specs *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_AJoint_Specs;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_CJoint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Config] EDK[Fabric_EDK_KL_btSoftBody_Config] LIB[btSoftBody::Config *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Config;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_SolverState] EDK[Fabric_EDK_KL_btSoftBody_SolverState] LIB[btSoftBody::SolverState *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_SolverState;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_RayFromToCaster] EDK[Fabric_EDK_KL_btSoftBody_RayFromToCaster] LIB[btSoftBody::RayFromToCaster *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_RayFromToCaster;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftRigidCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc] LIB[btSoftRigidCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftRigidCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftSoftCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftSoftCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc] LIB[btSoftSoftCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftSoftCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btTriIndex;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyTriangleCallback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyConcaveCollisionAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::CreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyConcaveCollisionAlgorithm_CreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyRigidBodyCollisionConfiguration;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftRigidDynamicsWorld;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBody;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkDoubleData] EDK[Fabric_EDK_KL_btMultiBodyLinkDoubleData] LIB[btMultiBodyLinkDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyLinkDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkFloatData] EDK[Fabric_EDK_KL_btMultiBodyLinkFloatData] LIB[btMultiBodyLinkFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyLinkFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyDoubleData] EDK[Fabric_EDK_KL_btMultiBodyDoubleData] LIB[btMultiBodyDoubleData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyDoubleData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyFloatData] EDK[Fabric_EDK_KL_btMultiBodyFloatData] LIB[btMultiBodyFloatData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyFloatData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJacobianData] EDK[Fabric_EDK_KL_btMultiBodyJacobianData] LIB[btMultiBodyJacobianData *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyJacobianData;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyConstraintSolver;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyDynamicsWorld;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyFixedConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointFeedback] EDK[Fabric_EDK_KL_btMultiBodyJointFeedback] LIB[btMultiBodyJointFeedback *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyJointFeedback;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyJointLimitConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyJointMotor;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultibodyLink;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyLinkCollider;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyPoint2Point;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodySliderConstraint;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodySolverConstraint] EDK[Fabric_EDK_KL_btMultiBodySolverConstraint] LIB[btMultiBodySolverConstraint *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodySolverConstraint;




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftMultiBodyDynamicsWorld;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMLCPSolverInterface] EDK[Fabric_EDK_KL_btMLCPSolverInterface] LIB[btMLCPSolverInterface *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMLCPSolverInterface;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDantzigSolver] EDK[Fabric_EDK_KL_btDantzigSolver] LIB[btDantzigSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btDantzigSolver;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btLemkeAlgorithm;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btLemkeSolver] EDK[Fabric_EDK_KL_btLemkeSolver] LIB[btLemkeSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btLemkeSolver;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btMLCPSolver;



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolveProjectedGaussSeidel] EDK[Fabric_EDK_KL_btSolveProjectedGaussSeidel] LIB[btSolveProjectedGaussSeidel *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////
struct btSolveProjectedGaussSeidel;



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtQuaternionConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtQuaternionPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtQuaternionConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtQuaternionRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtVector3ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtVector3Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtVector3ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtVector3Ref;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[size_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
alias SInt8 CxxChar;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtMatrix3x3ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtMatrix3x3Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtMatrix3x3ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtMatrix3x3Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtTransformConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtTransformPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtTransformConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtTransformRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Boolean] EDK[Fabric::EDK::KL::Boolean] LIB[bool]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None





//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_SInt32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_SInt32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_SInt32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_SInt32Ref;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32Ref;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt16ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt16Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt16ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt16Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtCollisionObjectConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtCollisionObjectPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtCollisionObjectConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtCollisionObjectRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt16] EDK[Fabric::EDK::KL::SInt16] LIB[int16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxHullDescConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxHullDescPtr;

/// \dfgPresetOmit
/// \internal
struct CxxHullDescConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxHullDescRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxHullResultConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxHullResultPtr;

/// \dfgPresetOmit
/// \internal
struct CxxHullResultConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxHullResultRef;



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtConvexPolyhedronConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtConvexPolyhedronPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtConvexPolyhedronConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtConvexPolyhedronRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtVector4ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtVector4Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtVector4ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtVector4Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8Ptr] EDK[CxxUInt8MutablePtr] LIB[uint8_t *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[PHY_ScalarType] EDK[_Kludge_EDK_PHY_ScalarType] LIB[PHY_ScalarType]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxPHY_ScalarTypeConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxPHY_ScalarTypePtr;

/// \dfgPresetOmit
/// \internal
struct CxxPHY_ScalarTypeConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxPHY_ScalarTypeRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8ConstPtr] EDK[CxxUInt8ConstPtr] LIB[uint8_t const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrRef;




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtDispatcherInfoConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtDispatcherInfoPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtDispatcherInfoConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtDispatcherInfoRef;



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAABBConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAABBPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtAABBConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtAABBRef;





















//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtRigidBody_btRigidBodyConstructionInfoPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtRigidBody_btRigidBodyConstructionInfoConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtRigidBody_btRigidBodyConstructionInfoRef;





//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[unsigned long]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstructionInfoConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstructionInfoPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstructionInfoConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstructionInfoRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfo_RaycastInfoConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfo_RaycastInfoPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfo_RaycastInfoConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfo_RaycastInfoRef;









//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBodyConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBodyPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBodyConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBodyRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btSoftBody_eFeature__] EDK[_Kludge_EDK_btSoftBody_eFeature__] LIB[btSoftBody::eFeature::_]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBody_eFeature__ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBody_eFeature__Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBody_eFeature__ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBody_eFeature__Ref;









//////////////////////////////////////////////////////////////////////////////
//
// Declarations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[btScalar] -> KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias Float32 btScalar;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtScalarConstPtr] -> KL[CxxFloat32ConstPtr] EDK[CxxFloat32ConstPtr] LIB[float const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxFloat32ConstPtr CxxbtScalarConstPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtScalarPtr] -> KL[CxxFloat32Ptr] EDK[CxxFloat32MutablePtr] LIB[float *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxFloat32Ptr CxxbtScalarPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtScalarConstRef] -> KL[CxxFloat32ConstRef] EDK[CxxFloat32ConstRef] LIB[float const &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxFloat32ConstRef CxxbtScalarConstRef;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtScalarRef] -> KL[CxxFloat32Ref] EDK[CxxFloat32MutableRef] LIB[float &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxFloat32Ref CxxbtScalarRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/**@brief btVector3 can be used to represent 3D points and vectors.

 * It has an un-used w component to suit 16-byte alignment when btVector3 is stored in containers. This extra component can be used by derived classes (Quaternion?) or by user

 * Ideally, this class should be replaced by a platform optimized SIMD version that keeps the data in registers

 */
struct btVector3
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btVector3.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btVector3()
  = "__CxxSize_Fabric_EDK_KL_btVector3";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btVector4
  : btVector3
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btVector4()
  = "__CxxSize_Fabric_EDK_KL_btVector4";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/**@brief The btMatrix3x3 class implements a 3x3 rotation matrix, to perform linear algebra in combination with btQuaternion, btTransform and btVector3.

* Make sure to only include a pure orthogonal matrix without scaling. */
struct btMatrix3x3
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btMatrix3x3.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMatrix3x3()
  = "__CxxSize_Fabric_EDK_KL_btMatrix3x3";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btVectorXf
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btVectorXf.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btVectorXf()
  = "__CxxSize_Fabric_EDK_KL_btVectorXf";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btMatrixXf
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btMatrixXf.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMatrixXf()
  = "__CxxSize_Fabric_EDK_KL_btMatrixXf";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btVectorXd
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btVectorXd.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btVectorXd()
  = "__CxxSize_Fabric_EDK_KL_btVectorXd";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btMatrixXd
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btMatrixXd.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMatrixXd()
  = "__CxxSize_Fabric_EDK_KL_btMatrixXd";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/**@brief The btQuaternion implements quaternion to perform linear algebra rotations in combination with btMatrix3x3, btVector3 and btTransform. */
struct btQuaternion
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btQuaternion.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btQuaternion()
  = "__CxxSize_Fabric_EDK_KL_btQuaternion";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/**@brief The btTransform class supports rigid transforms with only translation and rotation and no scaling/shear.

#  *It can be used in combination with btVector3, btQuaternion and btMatrix3x3 linear algebra classes. */
struct btTransform
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btTransform.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTransform()
  = "__CxxSize_Fabric_EDK_KL_btTransform";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// Utils related to temporal transforms
struct btTransformUtil
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btTransformUtil.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTransformUtil()
  = "__CxxSize_Fabric_EDK_KL_btTransformUtil";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

///The btConvexSeparatingDistanceUtil can help speed up convex collision detection
///by conservatively updating a cached separating distance/vector instead of re-calculating the closest distance
struct btConvexSeparatingDistanceUtil
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btConvexSeparatingDistanceUtil.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexSeparatingDistanceUtil()
  = "__CxxSize_Fabric_EDK_KL_btConvexSeparatingDistanceUtil";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_Float32
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btAlignedObjectArray_Float32.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Float32()
  = "__CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Float32";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_SInt32
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btAlignedObjectArray_SInt32.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_SInt32()
  = "__CxxSize_Fabric_EDK_KL_btAlignedObjectArray_SInt32";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_UInt32
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btAlignedObjectArray_UInt32.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt32()
  = "__CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt32";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_UInt16
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btAlignedObjectArray_UInt16.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt16()
  = "__CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt16";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_Vec3
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btAlignedObjectArray_Vec3.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Vec3()
  = "__CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Vec3";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btAlignedObjectArray_btCollisionObject
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btAlignedObjectArray_btCollisionObject.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject()
  = "__CxxSize_Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject";


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btMotionState interface class allows the dynamics world to synchronize and interpolate the updated world transforms with graphics
///For optimizations, potentially only moving objects get synchronized (using setWorldPosition/setWorldOrientation)
struct btMotionState
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMotionState.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMotionState() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btDefaultMotionState provides a common implementation to synchronize world transforms with offsets.
struct btDefaultMotionState
  : btMotionState
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDefaultMotionState() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[TUIntArray] -> KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias btAlignedObjectArray_UInt32 TUIntArray;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt32ConstPtr permits CxxbtAlignedObjectArray_UInt32ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_UInt32Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_UInt32ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt32Ptr : CxxbtAlignedObjectArray_UInt32ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_UInt32MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt32ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_UInt32Ptr
  protected btAlignedObjectArray_UInt32 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_UInt32ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt32Ref : CxxbtAlignedObjectArray_UInt32ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_UInt32MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxTUIntArrayConstPtr] -> KL[CxxbtAlignedObjectArray_UInt32ConstPtr] EDK[CxxbtAlignedObjectArray_UInt32ConstPtr] LIB[btAlignedObjectArray< unsigned int > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_UInt32ConstPtr CxxTUIntArrayConstPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxTUIntArrayPtr] -> KL[CxxbtAlignedObjectArray_UInt32Ptr] EDK[CxxbtAlignedObjectArray_UInt32MutablePtr] LIB[btAlignedObjectArray< unsigned int > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_UInt32Ptr CxxTUIntArrayPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxTUIntArrayConstRef] -> KL[CxxbtAlignedObjectArray_UInt32ConstRef] EDK[CxxbtAlignedObjectArray_UInt32ConstRef] LIB[btAlignedObjectArray< unsigned int > const &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_UInt32ConstRef CxxTUIntArrayConstRef;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxTUIntArrayRef] -> KL[CxxbtAlignedObjectArray_UInt32Ref] EDK[CxxbtAlignedObjectArray_UInt32MutableRef] LIB[btAlignedObjectArray< unsigned int > &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_UInt32Ref CxxTUIntArrayRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct HullResult
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data HullResult.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_HullResult()
  = "__CxxSize_Fabric_EDK_KL_HullResult";


//////////////////////////////////////////////////////////////////////////////
//
// Enum[QF_TRIANGLES=1, QF_REVERSE_ORDER=2, QF_DEFAULT=1]: KL[HullFlag] EDK[_Kludge_EDK_HullFlag] LIB[HullFlag]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer HullFlag;
const HullFlag QF_TRIANGLES = 1;
const HullFlag QF_REVERSE_ORDER = 2;
const HullFlag QF_DEFAULT = 1;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_HullFlag() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct HullDesc
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data HullDesc.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_HullDesc()
  = "__CxxSize_Fabric_EDK_KL_HullDesc";


//////////////////////////////////////////////////////////////////////////////
//
// Enum[QE_OK=0, QE_FAIL=1]: KL[HullError] EDK[_Kludge_EDK_HullError] LIB[HullError]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer HullError;
const HullError QE_OK = 0;
const HullError QE_FAIL = 1;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_HullError() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btPlane] EDK[Fabric_EDK_KL_btPlane] LIB[btPlane]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btPlane
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btPlane.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPlane()
  = "__CxxSize_Fabric_EDK_KL_btPlane";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[ConvexH] EDK[Fabric_EDK_KL_ConvexH] LIB[ConvexH]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct ConvexH
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data ConvexH.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_ConvexH()
  = "__CxxSize_Fabric_EDK_KL_ConvexH";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[ConvexH_HalfEdge] EDK[Fabric_EDK_KL_ConvexH_HalfEdge] LIB[ConvexH::HalfEdge]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct ConvexH_HalfEdge
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data ConvexH_HalfEdge.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_ConvexH_HalfEdge()
  = "__CxxSize_Fabric_EDK_KL_ConvexH_HalfEdge";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct int4
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data int4.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_int4()
  = "__CxxSize_Fabric_EDK_KL_int4";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[PHullResult] EDK[Fabric_EDK_KL_PHullResult] LIB[PHullResult]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct PHullResult
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data PHullResult.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_PHullResult()
  = "__CxxSize_Fabric_EDK_KL_PHullResult";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

///The HullLibrary class can create a convex hull from a collection of vertices, using the ComputeHull method.
///The btShapeHull class uses this HullLibrary to create a approximate convex mesh given a general (non-polyhedral) convex shape.
struct HullLibrary
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data HullLibrary.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_HullLibrary()
  = "__CxxSize_Fabric_EDK_KL_HullLibrary";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/**
 * This class is used to compute the polar decomposition of a matrix. In
 * general, the polar decomposition factorizes a matrix, A, into two parts: a
 * unitary matrix (U) and a positive, semi-definite Hermitian matrix (H).
 * However, in this particular implementation the original matrix, A, is
 * required to be a square 3x3 matrix with real elements. This means that U will
 * be an orthogonal matrix and H with be a positive-definite, symmetric matrix.
 */
struct btPolarDecomposition
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btPolarDecomposition.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPolarDecomposition()
  = "__CxxSize_Fabric_EDK_KL_btPolarDecomposition";


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btQuantizedBvhNode is a compressed aabb node, 16 bytes.
///Node can be used for leafnode or internal node. Leafnodes can point to 32-bit triangle index (non-negative range).
struct btQuantizedBvhNode
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btQuantizedBvhNode.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btQuantizedBvhNode() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNode] EDK[Fabric_EDK_KL_btOptimizedBvhNode] LIB[btOptimizedBvhNode *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btOptimizedBvhNode contains both internal and leaf node information.
/// Total node size is 44 bytes / node. You can use the compressed version of 16 bytes.
struct btOptimizedBvhNode
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btOptimizedBvhNode.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btOptimizedBvhNode() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btBvhSubtreeInfo provides info to gather a subtree of limited size
struct btBvhSubtreeInfo
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBvhSubtreeInfo.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBvhSubtreeInfo() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btNodeOverlapCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btNodeOverlapCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btNodeOverlapCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btQuantizedBvh class stores an AABB tree that can be quickly traversed on CPU and Cell SPU.
///It is used by the btBvhTriangleMeshShape as midphase.
///It is recommended to use quantization for better performance and lower memory requirements.
struct btQuantizedBvh
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btQuantizedBvh.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btQuantizedBvh() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[TRAVERSAL_STACKLESS=0, TRAVERSAL_STACKLESS_CACHE_FRIENDLY=1, TRAVERSAL_RECURSIVE=2]: KL[btQuantizedBvh_btTraversalMode] EDK[_Kludge_EDK_btQuantizedBvh_btTraversalMode] LIB[btQuantizedBvh::btTraversalMode]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btQuantizedBvh_btTraversalMode;
const btQuantizedBvh_btTraversalMode btQuantizedBvh_TRAVERSAL_STACKLESS = 0;
const btQuantizedBvh_btTraversalMode btQuantizedBvh_TRAVERSAL_STACKLESS_CACHE_FRIENDLY = 1;
const btQuantizedBvh_btTraversalMode btQuantizedBvh_TRAVERSAL_RECURSIVE = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btQuantizedBvh_btTraversalMode() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhSubtreeInfoData] EDK[Fabric_EDK_KL_btBvhSubtreeInfoData] LIB[btBvhSubtreeInfoData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btBvhSubtreeInfoData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBvhSubtreeInfoData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBvhSubtreeInfoData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNodeFloatData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeFloatData] LIB[btOptimizedBvhNodeFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btOptimizedBvhNodeFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btOptimizedBvhNodeFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btOptimizedBvhNodeFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNodeDoubleData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeDoubleData] LIB[btOptimizedBvhNodeDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btOptimizedBvhNodeDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btOptimizedBvhNodeDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btOptimizedBvhNodeDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhNodeData] EDK[Fabric_EDK_KL_btQuantizedBvhNodeData] LIB[btQuantizedBvhNodeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvhNodeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btQuantizedBvhNodeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btQuantizedBvhNodeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhFloatData] EDK[Fabric_EDK_KL_btQuantizedBvhFloatData] LIB[btQuantizedBvhFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvhFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btQuantizedBvhFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btQuantizedBvhFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhDoubleData] EDK[Fabric_EDK_KL_btQuantizedBvhDoubleData] LIB[btQuantizedBvhDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btQuantizedBvhDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btQuantizedBvhDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btQuantizedBvhDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btOptimizedBvh extends the btQuantizedBvh to create AABB tree for triangle meshes, through the btStridingMeshInterface.
struct btOptimizedBvh
  : btQuantizedBvh
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btOptimizedBvh() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btFace] EDK[Fabric_EDK_KL_btFace] LIB[btFace]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btFace
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btFace.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btFace()
  = "__CxxSize_Fabric_EDK_KL_btFace";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btConvexPolyhedron
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btConvexPolyhedron.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexPolyhedron()
  = "__CxxSize_Fabric_EDK_KL_btConvexPolyhedron";


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btCollisionShape class provides an interface for collision shapes that can be shared among btCollisionObjects.
struct btCollisionShape
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionShape.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionShapeData] EDK[Fabric_EDK_KL_btCollisionShapeData] LIB[btCollisionShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btCollisionShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// The btConvexShape is an abstract shape interface, implemented by all convex shapes such as btBoxShape, btConvexHullShape etc.
/// It describes general convex shapes using the localGetSupportingVertex interface, used by collision detectors such as btGjkPairDetector.
struct btConvexShape
  : btCollisionShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[PHY_FLOAT=0, PHY_DOUBLE=1, PHY_INTEGER=2, PHY_SHORT=3, PHY_FIXEDPOINT88=4, PHY_UCHAR=5]: KL[PHY_ScalarType] EDK[_Kludge_EDK_PHY_ScalarType] LIB[PHY_ScalarType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// PHY_ScalarType enumerates possible scalar types.
/// See the btStridingMeshInterface or btHeightfieldTerrainShape for its use
alias Integer PHY_ScalarType;
const PHY_ScalarType PHY_FLOAT = 0;
const PHY_ScalarType PHY_DOUBLE = 1;
const PHY_ScalarType PHY_INTEGER = 2;
const PHY_ScalarType PHY_SHORT = 3;
const PHY_ScalarType PHY_FIXEDPOINT88 = 4;
const PHY_ScalarType PHY_UCHAR = 5;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_PHY_ScalarType() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btConcaveShape class provides an interface for non-moving (static) concave shapes.
///It has been implemented by the btStaticPlaneShape, btBvhTriangleMeshShape and btHeightfieldTerrainShape.
struct btConcaveShape
  : btCollisionShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConcaveShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btConvexInternalShape is an internal base class, shared by most convex shape implementations.
///The btConvexInternalShape uses a default collision margin set to CONVEX_DISTANCE_MARGIN.
///This collision margin used by Gjk and some other algorithms, see also btCollisionMargin.h
///Note that when creating small shapes (derived from btConvexInternalShape),
///you need to make sure to set a smaller collision margin, using the 'setMargin' API
///There is a automatic mechanism 'setSafeMargin' used by btBoxShape and btCylinderShape
struct btConvexInternalShape
  : btConvexShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexInternalShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalShapeData] EDK[Fabric_EDK_KL_btConvexInternalShapeData] LIB[btConvexInternalShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btConvexInternalShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btConvexInternalShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexInternalShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btConvexInternalAabbCachingShape adds local aabb caching for convex shapes, to avoid expensive bounding box calculations
struct btConvexInternalAabbCachingShape
  : btConvexInternalShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexInternalAabbCachingShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btPolyhedralConvexShape is an internal interface class for polyhedral convex shapes.
struct btPolyhedralConvexShape
  : btConvexInternalShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPolyhedralConvexShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btPolyhedralConvexAabbCachingShape adds aabb caching to the btPolyhedralConvexShape
struct btPolyhedralConvexAabbCachingShape
  : btPolyhedralConvexShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btBoxShape is a box primitive around the origin, its sides axis aligned with length specified by half extents, in local shape coordinates. When used as part of a btCollisionObject or btRigidBody it will be an oriented box in world space.
struct btBoxShape
  : btPolyhedralConvexShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBoxShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btBox2dShape is a box primitive around the origin, its sides axis aligned with length specified by half extents, in local shape coordinates. When used as part of a btCollisionObject or btRigidBody it will be an oriented box in world space.
struct btBox2dShape
  : btPolyhedralConvexShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBox2dShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btCapsuleShape represents a capsule around the Y axis, there is also the btCapsuleShapeX aligned around the X axis and btCapsuleShapeZ around the Z axis.
///The total height is height+2*radius, so the height is just the height between the center of each 'sphere' of the capsule caps.
///The btCapsuleShape is a convex hull of two spheres. The btMultiSphereShape is a more general collision shape that takes the convex hull of multiple sphere, so it can also represent a capsule when just using two spheres.
struct btCapsuleShape
  : btConvexInternalShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCapsuleShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btCapsuleShapeX represents a capsule around the Z axis
///the total height is height+2*radius, so the height is just the height between the center of each 'sphere' of the capsule caps.
struct btCapsuleShapeX
  : btCapsuleShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCapsuleShapeX() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btCapsuleShapeZ represents a capsule around the Z axis
///the total height is height+2*radius, so the height is just the height between the center of each 'sphere' of the capsule caps.
struct btCapsuleShapeZ
  : btCapsuleShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCapsuleShapeZ() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeData] EDK[Fabric_EDK_KL_btCapsuleShapeData] LIB[btCapsuleShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btCapsuleShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCapsuleShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCapsuleShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btConeShape implements a cone shape primitive, centered around the origin and aligned with the Y axis. The btConeShapeX is aligned around the X axis and btConeShapeZ around the Z axis.
struct btConeShape
  : btConvexInternalShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConeShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btConeShape implements a Cone shape, around the X axis
struct btConeShapeX
  : btConeShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConeShapeX() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btConeShapeZ implements a Cone shape, around the Z axis
struct btConeShapeZ
  : btConeShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConeShapeZ() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeData] EDK[Fabric_EDK_KL_btConeShapeData] LIB[btConeShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btConeShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btConeShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConeShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// The btEmptyShape is a collision shape without actual collision detection shape, so most users should ignore this class.
/// It can be replaced by another shape during runtime, but the inertia tensor should be recomputed.
struct btEmptyShape
  : btConcaveShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btEmptyShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btSphereShape implements an implicit sphere, centered around a local origin with radius.
struct btSphereShape
  : btConvexInternalShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSphereShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// The btCylinderShape class implements a cylinder shape primitive, centered around the origin. Its central axis aligned with the Y axis. btCylinderShapeX is aligned with the X axis and btCylinderShapeZ around the Z axis.
struct btCylinderShape
  : btConvexInternalShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCylinderShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCylinderShapeX
  : btCylinderShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCylinderShapeX() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCylinderShapeZ
  : btCylinderShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCylinderShapeZ() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeData] EDK[Fabric_EDK_KL_btCylinderShapeData] LIB[btCylinderShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btCylinderShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCylinderShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCylinderShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btStaticPlaneShape simulates an infinite non-moving (static) collision plane.
struct btStaticPlaneShape
  : btConcaveShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btStaticPlaneShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStaticPlaneShapeData] EDK[Fabric_EDK_KL_btStaticPlaneShapeData] LIB[btStaticPlaneShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btStaticPlaneShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btStaticPlaneShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btStaticPlaneShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btBU_Simplex1to4 implements tetrahedron, triangle, line, vertex collision shapes. In most cases it is better to use btConvexHullShape instead.
struct btBU_Simplex1to4
  : btPolyhedralConvexAabbCachingShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBU_Simplex1to4() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btConvexHullShape implements an implicit convex hull of an array of vertices.
///Bullet provides a general and fast collision detector for convex shapes based on GJK and EPA using localGetSupportingVertex.
struct btConvexHullShape
  : btPolyhedralConvexAabbCachingShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexHullShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexHullShapeData] EDK[Fabric_EDK_KL_btConvexHullShapeData] LIB[btConvexHullShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btConvexHullShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btConvexHullShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexHullShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btConvex2dShape allows to use arbitrary convex shapes as 2d convex shapes, with the Z component assumed to be 0.
///For 2d boxes, the btBox2dShape is recommended.
struct btConvex2dShape
  : btConvexShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvex2dShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///	The btStridingMeshInterface is the interface class for high performance generic access to triangle meshes, used in combination with btBvhTriangleMeshShape and some other collision shapes.
/// Using index striding of 3*sizeof(integer) it can use triangle arrays, using index striding of 1*sizeof(integer) it can handle triangle strips.
/// It allows for sharing graphics and collision meshes. Also it provides locking/unlocking of graphics meshes that are in gpu memory.
struct btStridingMeshInterface
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btStridingMeshInterface.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btStridingMeshInterface() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btIntIndexData] EDK[Fabric_EDK_KL_btIntIndexData] LIB[btIntIndexData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btIntIndexData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btIntIndexData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btIntIndexData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShortIntIndexData] EDK[Fabric_EDK_KL_btShortIntIndexData] LIB[btShortIntIndexData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btShortIntIndexData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btShortIntIndexData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btShortIntIndexData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShortIntIndexTripletData] EDK[Fabric_EDK_KL_btShortIntIndexTripletData] LIB[btShortIntIndexTripletData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btShortIntIndexTripletData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btShortIntIndexTripletData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btShortIntIndexTripletData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCharIndexTripletData] EDK[Fabric_EDK_KL_btCharIndexTripletData] LIB[btCharIndexTripletData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCharIndexTripletData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCharIndexTripletData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCharIndexTripletData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMeshPartData] EDK[Fabric_EDK_KL_btMeshPartData] LIB[btMeshPartData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btMeshPartData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMeshPartData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMeshPartData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStridingMeshInterfaceData] EDK[Fabric_EDK_KL_btStridingMeshInterfaceData] LIB[btStridingMeshInterfaceData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btStridingMeshInterfaceData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btStridingMeshInterfaceData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btStridingMeshInterfaceData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btIndexedMesh] EDK[Fabric_EDK_KL_btIndexedMesh] LIB[btIndexedMesh *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btIndexedMesh indexes a single vertex and index array. Multiple btIndexedMesh objects can be passed into a btTriangleIndexVertexArray using addIndexedMesh.
///Instead of the number of indices, we pass the number of triangles.
struct btIndexedMesh
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btIndexedMesh.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btIndexedMesh() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btTriangleIndexVertexArray allows to access multiple triangle meshes, by indexing into existing triangle/index arrays.
///Additional meshes can be added using addIndexedMesh
///No duplcate is made of the vertex/index data, it only indexes into external vertex/index arrays.
///So keep those arrays around during the lifetime of this btTriangleIndexVertexArray.
struct btTriangleIndexVertexArray
  : btStridingMeshInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTriangleIndexVertexArray() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMaterialProperties] EDK[Fabric_EDK_KL_btMaterialProperties] LIB[btMaterialProperties *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMaterialProperties
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMaterialProperties.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMaterialProperties() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///Teh btTriangleIndexVertexMaterialArray is built on TriangleIndexVertexArray
///The addition of a material array allows for the utilization of the partID and
///triangleIndex that are returned in the ContactAddedCallback.  As with
///TriangleIndexVertexArray, no duplicate is made of the material data, so it
///is the users responsibility to maintain the array during the lifetime of the
///TriangleIndexVertexMaterialArray.
struct btTriangleIndexVertexMaterialArray
  : btTriangleIndexVertexArray
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTriangleIndexVertexMaterialArray() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btTriangleMeshShape is an internal concave triangle mesh interface. Don't use this class directly, use btBvhTriangleMeshShape instead.
struct btTriangleMeshShape
  : btConcaveShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTriangleMeshShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btBvhTriangleMeshShape is a static-triangle mesh shape, it can only be used for fixed/non-moving objects.
///If you required moving concave triangle meshes, it is recommended to perform convex decomposition
///using HACD, see Bullet/Demos/ConvexDecompositionDemo.
///Alternatively, you can use btGimpactMeshShape for moving concave triangle meshes.
///btBvhTriangleMeshShape has several optimizations, such as bounding volume hierarchy and
///cache friendly traversal for PlayStation 3 Cell SPU.
///It is recommended to enable useQuantizedAabbCompression for better memory usage.
///It takes a triangle mesh as input, for example a btTriangleMesh or btTriangleIndexVertexArray. The btBvhTriangleMeshShape class allows for triangle mesh deformations by a refit or partialRefit method.
///Instead of building the bounding volume hierarchy acceleration structure, it is also possible to serialize (save) and deserialize (load) the structure from disk.
///See Demos\ConcaveDemo\ConcavePhysicsDemo.cpp for an example.
struct btBvhTriangleMeshShape
  : btTriangleMeshShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBvhTriangleMeshShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleMeshShapeData] EDK[Fabric_EDK_KL_btTriangleMeshShapeData] LIB[btTriangleMeshShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btTriangleMeshShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTriangleMeshShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTriangleMeshShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btTriangleShape
  : btPolyhedralConvexShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTriangleShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btUniformScalingShape allows to re-use uniform scaled instances of btConvexShape in a memory efficient way.
///Istead of using btUniformScalingShape, it is better to use the non-uniform setLocalScaling method on convex shapes that implement it.
struct btUniformScalingShape
  : btConvexShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btUniformScalingShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeChild] EDK[Fabric_EDK_KL_btCompoundShapeChild] LIB[btCompoundShapeChild *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundShapeChild
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCompoundShapeChild.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundShapeChild() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// The btCompoundShape allows to store multiple other btCollisionShapes
/// This allows for moving concave collision objects. This is more general then the static concave btBvhTriangleMeshShape.
/// It has an (optional) dynamic aabb tree to accelerate early rejection tests.
/// @todo: This aabb tree can also be use to speed up ray tests on btCompoundShape, see http://code.google.com/p/bullet/issues/detail?id=25
/// Currently, removal of child shapes is only supported when disabling the aabb tree (pass 'false' in the constructor of btCompoundShape)
struct btCompoundShape
  : btCollisionShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeChildData] EDK[Fabric_EDK_KL_btCompoundShapeChildData] LIB[btCompoundShapeChildData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btCompoundShapeChildData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCompoundShapeChildData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundShapeChildData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeData] EDK[Fabric_EDK_KL_btCompoundShapeData] LIB[btCompoundShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btCompoundShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCompoundShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btConvexPointCloudShape implements an implicit convex hull of an array of vertices.
struct btConvexPointCloudShape
  : btPolyhedralConvexAabbCachingShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexPointCloudShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// The btConvexTriangleMeshShape is a convex hull of a triangle mesh, but the performance is not as good as btConvexHullShape.
/// A small benefit of this class is that it uses the btStridingMeshInterface, so you can avoid the duplication of the triangle mesh data. Nevertheless, most users should use the much better performing btConvexHullShape instead.
struct btConvexTriangleMeshShape
  : btPolyhedralConvexAabbCachingShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexTriangleMeshShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btHeightfieldTerrainShape simulates a 2D heightfield terrain
// /**
// The caller is responsible for maintaining the heightfield array; this
// class does not make a copy.
// 
// The heightfield can be dynamic so long as the min/max height values
// capture the extremes (heights must always be in that range).
// 
// The local origin of the heightfield is assumed to be the exact
// center (as determined by width and length and height, with each
// axis multiplied by the localScaling).
// 
// \b NOTE: be careful with coordinates.  If you have a heightfield with a local
// min height of -100m, and a max height of +500m, you may be tempted to place it
// at the origin (0,0) and expect the heights in world coordinates to be
// -100 to +500 meters.
// Actually, the heights will be -300 to +300m, because bullet will re-center
// the heightfield based on its AABB (which is determined by the min/max
// heights).  So keep in mind that once you create a btHeightfieldTerrainShape
// object, the heights will be adjusted relative to the center of the AABB.  This
// is different to the behavior of many rendering engines, but is useful for
// physics engines.
// 
// Most (but not all) rendering and heightfield libraries assume upAxis = 1
// (that is, the y-axis is "up").  This class allows any of the 3 coordinates
// to be "up".  Make sure your choice of axis is consistent with your rendering
// system.
// 
// The heightfield heights are determined from the data type used for the
// heightfieldData array.
// 
// - PHY_UCHAR: height at a point is the uchar value at the
// grid point, multipled by heightScale.  uchar isn't recommended
// because of its inability to deal with negative values, and
// low resolution (8-bit).
// 
// - PHY_SHORT: height at a point is the short int value at that grid
// point, multipled by heightScale.
// 
// - PHY_FLOAT: height at a point is the float value at that grid
// point.  heightScale is ignored when using the float heightfield
// data type.
// 
// Whatever the caller specifies as minHeight and maxHeight will be honored.
// The class will not inspect the heightfield to discover the actual minimum
// or maximum heights.  These values are used to determine the heightfield's
// axis-aligned bounding box, multiplied by localScaling.
// 
// For usage and testing see the TerrainDemo.
// */
struct btHeightfieldTerrainShape
  : btConcaveShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btHeightfieldTerrainShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// The btMinkowskiSumShape is only for advanced users. This shape represents implicit based minkowski sum of two convex implicit shapes.
struct btMinkowskiSumShape
  : btConvexInternalShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMinkowskiSumShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMaterial] EDK[Fabric_EDK_KL_btMaterial] LIB[btMaterial *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMaterial
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMaterial.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMaterial() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The BvhTriangleMaterialMeshShape extends the btBvhTriangleMeshShape. Its main contribution is the interface into a material array, which allows per-triangle friction and restitution.
struct btMultimaterialTriangleMeshShape
  : btBvhTriangleMeshShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultimaterialTriangleMeshShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btMultiSphereShape represents the convex hull of a collection of spheres. You can create special capsules or other smooth volumes.
///It is possible to animate the spheres for deformation, but call 'recalcLocalAabb' after changing any sphere position/radius
struct btMultiSphereShape
  : btConvexInternalAabbCachingShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiSphereShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPositionAndRadius] EDK[Fabric_EDK_KL_btPositionAndRadius] LIB[btPositionAndRadius *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btPositionAndRadius
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btPositionAndRadius.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPositionAndRadius() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiSphereShapeData] EDK[Fabric_EDK_KL_btMultiSphereShapeData] LIB[btMultiSphereShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiSphereShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiSphereShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiSphereShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btScaledBvhTriangleMeshShape allows to instance a scaled version of an existing btBvhTriangleMeshShape.
///Note that each btBvhTriangleMeshShape still can have its own local scaling, independent from this btScaledBvhTriangleMeshShape 'localScaling'
struct btScaledBvhTriangleMeshShape
  : btConcaveShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btScaledBvhTriangleMeshShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btScaledTriangleMeshShapeData] EDK[Fabric_EDK_KL_btScaledTriangleMeshShapeData] LIB[btScaledTriangleMeshShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btScaledTriangleMeshShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btScaledTriangleMeshShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btScaledTriangleMeshShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btShapeHull class takes a btConvexShape, builds a simplified convex hull using btConvexHull and provides triangle indices and vertices.
///It can be useful for to simplify a complex convex object and for visualization of a non-polyhedral convex object.
///It approximates the convex hull using the supporting vertex of 42 directions.
struct btShapeHull
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btShapeHull.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btShapeHull() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphaseAabbCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBroadphaseAabbCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBroadphaseAabbCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseRayCallback] EDK[Fabric_EDK_KL_btBroadphaseRayCallback] LIB[btBroadphaseRayCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphaseRayCallback
  : btBroadphaseAabbCallback
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBroadphaseRayCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btBroadphaseInterface class provides an interface to detect aabb-overlapping object pairs.
///Some implementations for this broadphase interface include btAxisSweep3, bt32BitAxisSweep3 and btDbvtBroadphase.
///The actual overlapping pair management, storage, adding and removing of pairs is dealt by the btOverlappingPairCache class.
struct btBroadphaseInterface
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBroadphaseInterface.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBroadphaseInterface() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BOX_SHAPE_PROXYTYPE=0, TRIANGLE_SHAPE_PROXYTYPE=1, TETRAHEDRAL_SHAPE_PROXYTYPE=2, CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE=3, CONVEX_HULL_SHAPE_PROXYTYPE=4, CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE=5, CUSTOM_POLYHEDRAL_SHAPE_TYPE=6, IMPLICIT_CONVEX_SHAPES_START_HERE=7, SPHERE_SHAPE_PROXYTYPE=8, MULTI_SPHERE_SHAPE_PROXYTYPE=9, CAPSULE_SHAPE_PROXYTYPE=10, CONE_SHAPE_PROXYTYPE=11, CONVEX_SHAPE_PROXYTYPE=12, CYLINDER_SHAPE_PROXYTYPE=13, UNIFORM_SCALING_SHAPE_PROXYTYPE=14, MINKOWSKI_SUM_SHAPE_PROXYTYPE=15, MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE=16, BOX_2D_SHAPE_PROXYTYPE=17, CONVEX_2D_SHAPE_PROXYTYPE=18, CUSTOM_CONVEX_SHAPE_TYPE=19, CONCAVE_SHAPES_START_HERE=20, TRIANGLE_MESH_SHAPE_PROXYTYPE=21, SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE=22, FAST_CONCAVE_MESH_PROXYTYPE=23, TERRAIN_SHAPE_PROXYTYPE=24, GIMPACT_SHAPE_PROXYTYPE=25, MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE=26, EMPTY_SHAPE_PROXYTYPE=27, STATIC_PLANE_PROXYTYPE=28, CUSTOM_CONCAVE_SHAPE_TYPE=29, CONCAVE_SHAPES_END_HERE=30, COMPOUND_SHAPE_PROXYTYPE=31, SOFTBODY_SHAPE_PROXYTYPE=32, HFFLUID_SHAPE_PROXYTYPE=33, HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE=34, INVALID_SHAPE_PROXYTYPE=35, MAX_BROADPHASE_COLLISION_TYPES=36]: KL[BroadphaseNativeTypes] EDK[_Kludge_EDK_BroadphaseNativeTypes] LIB[BroadphaseNativeTypes]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btDispatcher uses these types
/// IMPORTANT NOTE:The types are ordered polyhedral, implicit convex and concave
/// to facilitate type checking
/// CUSTOM_POLYHEDRAL_SHAPE_TYPE,CUSTOM_CONVEX_SHAPE_TYPE and CUSTOM_CONCAVE_SHAPE_TYPE can be used to extend Bullet without modifying source code
alias Integer BroadphaseNativeTypes;
const BroadphaseNativeTypes BOX_SHAPE_PROXYTYPE = 0;
const BroadphaseNativeTypes TRIANGLE_SHAPE_PROXYTYPE = 1;
const BroadphaseNativeTypes TETRAHEDRAL_SHAPE_PROXYTYPE = 2;
const BroadphaseNativeTypes CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE = 3;
const BroadphaseNativeTypes CONVEX_HULL_SHAPE_PROXYTYPE = 4;
const BroadphaseNativeTypes CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE = 5;
const BroadphaseNativeTypes CUSTOM_POLYHEDRAL_SHAPE_TYPE = 6;
const BroadphaseNativeTypes IMPLICIT_CONVEX_SHAPES_START_HERE = 7;
const BroadphaseNativeTypes SPHERE_SHAPE_PROXYTYPE = 8;
const BroadphaseNativeTypes MULTI_SPHERE_SHAPE_PROXYTYPE = 9;
const BroadphaseNativeTypes CAPSULE_SHAPE_PROXYTYPE = 10;
const BroadphaseNativeTypes CONE_SHAPE_PROXYTYPE = 11;
const BroadphaseNativeTypes CONVEX_SHAPE_PROXYTYPE = 12;
const BroadphaseNativeTypes CYLINDER_SHAPE_PROXYTYPE = 13;
const BroadphaseNativeTypes UNIFORM_SCALING_SHAPE_PROXYTYPE = 14;
const BroadphaseNativeTypes MINKOWSKI_SUM_SHAPE_PROXYTYPE = 15;
const BroadphaseNativeTypes MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE = 16;
const BroadphaseNativeTypes BOX_2D_SHAPE_PROXYTYPE = 17;
const BroadphaseNativeTypes CONVEX_2D_SHAPE_PROXYTYPE = 18;
const BroadphaseNativeTypes CUSTOM_CONVEX_SHAPE_TYPE = 19;
const BroadphaseNativeTypes CONCAVE_SHAPES_START_HERE = 20;
const BroadphaseNativeTypes TRIANGLE_MESH_SHAPE_PROXYTYPE = 21;
const BroadphaseNativeTypes SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE = 22;
const BroadphaseNativeTypes FAST_CONCAVE_MESH_PROXYTYPE = 23;
const BroadphaseNativeTypes TERRAIN_SHAPE_PROXYTYPE = 24;
const BroadphaseNativeTypes GIMPACT_SHAPE_PROXYTYPE = 25;
const BroadphaseNativeTypes MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE = 26;
const BroadphaseNativeTypes EMPTY_SHAPE_PROXYTYPE = 27;
const BroadphaseNativeTypes STATIC_PLANE_PROXYTYPE = 28;
const BroadphaseNativeTypes CUSTOM_CONCAVE_SHAPE_TYPE = 29;
const BroadphaseNativeTypes CONCAVE_SHAPES_END_HERE = 30;
const BroadphaseNativeTypes COMPOUND_SHAPE_PROXYTYPE = 31;
const BroadphaseNativeTypes SOFTBODY_SHAPE_PROXYTYPE = 32;
const BroadphaseNativeTypes HFFLUID_SHAPE_PROXYTYPE = 33;
const BroadphaseNativeTypes HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE = 34;
const BroadphaseNativeTypes INVALID_SHAPE_PROXYTYPE = 35;
const BroadphaseNativeTypes MAX_BROADPHASE_COLLISION_TYPES = 36;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_BroadphaseNativeTypes() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btBroadphaseProxy is the main class that can be used with the Bullet broadphases.
///It stores collision shape type information, collision filter information and a client object, typically a btCollisionObject or btRigidBody.
struct btBroadphaseProxy
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBroadphaseProxy.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBroadphaseProxy() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[DefaultFilter=1, StaticFilter=2, KinematicFilter=4, DebrisFilter=8, SensorTrigger=16, CharacterFilter=32, AllFilter=-1]: KL[btBroadphaseProxy_CollisionFilterGroups] EDK[_Kludge_EDK_btBroadphaseProxy_CollisionFilterGroups] LIB[btBroadphaseProxy::CollisionFilterGroups]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///optional filtering to cull potential collisions
alias Integer btBroadphaseProxy_CollisionFilterGroups;
const btBroadphaseProxy_CollisionFilterGroups btBroadphaseProxy_DefaultFilter = 1;
const btBroadphaseProxy_CollisionFilterGroups btBroadphaseProxy_StaticFilter = 2;
const btBroadphaseProxy_CollisionFilterGroups btBroadphaseProxy_KinematicFilter = 4;
const btBroadphaseProxy_CollisionFilterGroups btBroadphaseProxy_DebrisFilter = 8;
const btBroadphaseProxy_CollisionFilterGroups btBroadphaseProxy_SensorTrigger = 16;
const btBroadphaseProxy_CollisionFilterGroups btBroadphaseProxy_CharacterFilter = 32;
const btBroadphaseProxy_CollisionFilterGroups btBroadphaseProxy_AllFilter = -1;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btBroadphaseProxy_CollisionFilterGroups() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphasePair] EDK[Fabric_EDK_KL_btBroadphasePair] LIB[btBroadphasePair *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btBroadphasePair class contains a pair of aabb-overlapping objects.
///A btDispatcher can search a btCollisionAlgorithm that performs exact/narrowphase collision detection on the actual collision shapes.
struct btBroadphasePair
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBroadphasePair.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBroadphasePair() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btBroadphasePairSortPredicate
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBroadphasePairSortPredicate.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBroadphasePairSortPredicate() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btAxisSweep3] EDK[Fabric_EDK_KL_btAxisSweep3] LIB[btAxisSweep3 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// The btAxisSweep3 is an efficient implementation of the 3d axis sweep and prune broadphase.
// 
/// It uses arrays rather then lists for storage of the 3 axis. Also it operates using 16 bit integer coordinates instead of floats.
// 
/// For large worlds and many objects, use bt32BitAxisSweep3 or btDbvtBroadphase instead. bt32BitAxisSweep3 has higher precision and allows more then 16384 objects at the cost of more memory and bit of performance.
struct btAxisSweep3
  : btBroadphaseInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAxisSweep3() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[bt32BitAxisSweep3] EDK[Fabric_EDK_KL_bt32BitAxisSweep3] LIB[bt32BitAxisSweep3 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// The bt32BitAxisSweep3 allows higher precision quantization and more objects compared to the btAxisSweep3 sweep and prune.
// 
/// This comes at the cost of more memory per handle, and a bit slower performance.
// 
/// It uses arrays rather then lists for storage of the 3 axis.
struct bt32BitAxisSweep3
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean bt32BitAxisSweep3.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_bt32BitAxisSweep3() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithmConstructionInfo] EDK[Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo] LIB[btCollisionAlgorithmConstructionInfo *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionAlgorithmConstructionInfo
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionAlgorithmConstructionInfo.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btCollisionAlgorithm is an collision interface that is compatible with the Broadphase and btDispatcher.
///It is persistent over frames
struct btCollisionAlgorithm
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionAlgorithm.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDbvtProxy] EDK[Fabric_EDK_KL_btDbvtProxy] LIB[btDbvtProxy *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btDbvtProxy
  : btBroadphaseProxy
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDbvtProxy() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btDbvtBroadphase implements a broadphase using two dynamic AABB bounding volume hierarchies/trees (see btDbvt).
///One tree is used for static/non-moving objects, and another tree is used for dynamic objects. Objects can move from one tree to the other.
///This is a very fast broadphase, especially for very dynamic worlds where many objects are moving. Its insert/add and remove of objects is generally faster than the sweep and prune broadphases btAxisSweep3 and bt32BitAxisSweep3.
struct btDbvtBroadphase
  : btBroadphaseInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDbvtBroadphase() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[DYNAMIC_SET=0, FIXED_SET=1, STAGECOUNT=2]: (anonymous)
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
const Integer btDbvtBroadphase_DYNAMIC_SET = 0;
const Integer btDbvtBroadphase_FIXED_SET = 1;
const Integer btDbvtBroadphase_STAGECOUNT = 2;



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btDispatcherInfo
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btDispatcherInfo.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDispatcherInfo()
  = "__CxxSize_Fabric_EDK_KL_btDispatcherInfo";


//////////////////////////////////////////////////////////////////////////////
//
// Enum[DISPATCH_DISCRETE=1, DISPATCH_CONTINUOUS=2]: KL[btDispatcherInfo_DispatchFunc] EDK[_Kludge_EDK_btDispatcherInfo_DispatchFunc] LIB[btDispatcherInfo::DispatchFunc]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btDispatcherInfo_DispatchFunc;
const btDispatcherInfo_DispatchFunc btDispatcherInfo_DISPATCH_DISCRETE = 1;
const btDispatcherInfo_DispatchFunc btDispatcherInfo_DISPATCH_CONTINUOUS = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btDispatcherInfo_DispatchFunc() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_CONTACT_POINT_ALGORITHMS=1, BT_CLOSEST_POINT_ALGORITHMS=2]: KL[ebtDispatcherQueryType] EDK[_Kludge_EDK_ebtDispatcherQueryType] LIB[ebtDispatcherQueryType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer ebtDispatcherQueryType;
const ebtDispatcherQueryType BT_CONTACT_POINT_ALGORITHMS = 1;
const ebtDispatcherQueryType BT_CLOSEST_POINT_ALGORITHMS = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_ebtDispatcherQueryType() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btDispatcher interface class can be used in combination with broadphase to dispatch calculations for overlapping pairs.
// 
///For example for pairwise collision detection, calculating contact points stored in btPersistentManifold or user callbacks (game logic).
struct btDispatcher
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btDispatcher.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDispatcher() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSimpleBroadphaseProxy
  : btBroadphaseProxy
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSimpleBroadphaseProxy() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The SimpleBroadphase is just a unit-test for btAxisSweep3, bt32BitAxisSweep3, or btDbvtBroadphase, so use those classes instead.
///It is a brute force aabb culling broadphase based on O(n^2) aabb checks
struct btSimpleBroadphase
  : btBroadphaseInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSimpleBroadphase() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btActivatingCollisionAlgorithm] EDK[Fabric_EDK_KL_btActivatingCollisionAlgorithm] LIB[btActivatingCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///This class is not enabled yet (work-in-progress) to more aggressively activate objects.
struct btActivatingCollisionAlgorithm
  : btCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btActivatingCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///box-box collision detection
struct btBox2dBox2dCollisionAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dBox2dCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc] LIB[btBox2dBox2dCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btBox2dBox2dCollisionAlgorithm_CreateFunc
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBox2dBox2dCollisionAlgorithm_CreateFunc.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///box-box collision detection
struct btBoxBoxCollisionAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBoxBoxCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc] LIB[btBoxBoxCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btBoxBoxCollisionAlgorithm_CreateFunc
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBoxBoxCollisionAlgorithm_CreateFunc.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxDetector] EDK[Fabric_EDK_KL_btBoxBoxDetector] LIB[btBoxBoxDetector *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btBoxBoxDetector wraps the ODE box-box collision detector
/// re-distributed under the Zlib license with permission from Russell L. Smith
struct btBoxBoxDetector
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBoxBoxDetector.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBoxBoxDetector() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btCollisionConfiguration allows to configure Bullet collision detection
///stack allocator size, default collision algorithms and persistent manifold pool size
///@todo: describe the meaning
struct btCollisionConfiguration
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionConfiguration.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionConfiguration() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithmCreateFunc] EDK[Fabric_EDK_KL_btCollisionAlgorithmCreateFunc] LIB[btCollisionAlgorithmCreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///Used by the btCollisionDispatcher to register and create instances for btCollisionAlgorithm
struct btCollisionAlgorithmCreateFunc
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionAlgorithmCreateFunc.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionAlgorithmCreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btCollisionDispatcher supports algorithms that handle ConvexConvex and ConvexConcave collision pairs.
///Time of Impact, Closest Points and Penetration Depth.
struct btCollisionDispatcher
  : btDispatcher
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionDispatcher() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[CD_STATIC_STATIC_REPORTED=1, CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD=2, CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION=4]: KL[btCollisionDispatcher_DispatcherFlags] EDK[_Kludge_EDK_btCollisionDispatcher_DispatcherFlags] LIB[btCollisionDispatcher::DispatcherFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btCollisionDispatcher_DispatcherFlags;
const btCollisionDispatcher_DispatcherFlags btCollisionDispatcher_CD_STATIC_STATIC_REPORTED = 1;
const btCollisionDispatcher_DispatcherFlags btCollisionDispatcher_CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD = 2;
const btCollisionDispatcher_DispatcherFlags btCollisionDispatcher_CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION = 4;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btCollisionDispatcher_DispatcherFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[btCollisionObjectArray] -> KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias btAlignedObjectArray_btCollisionObject btCollisionObjectArray;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_btCollisionObjectConstPtr permits CxxbtAlignedObjectArray_btCollisionObjectConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_btCollisionObjectPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_btCollisionObjectConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_btCollisionObjectPtr : CxxbtAlignedObjectArray_btCollisionObjectConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_btCollisionObjectMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_btCollisionObjectConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_btCollisionObjectPtr
  protected btAlignedObjectArray_btCollisionObject values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_btCollisionObjectConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_btCollisionObjectRef : CxxbtAlignedObjectArray_btCollisionObjectConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_btCollisionObjectMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtCollisionObjectArrayConstPtr] -> KL[CxxbtAlignedObjectArray_btCollisionObjectConstPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstPtr] LIB[btAlignedObjectArray< btCollisionObject * > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_btCollisionObjectConstPtr CxxbtCollisionObjectArrayConstPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtCollisionObjectArrayPtr] -> KL[CxxbtAlignedObjectArray_btCollisionObjectPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutablePtr] LIB[btAlignedObjectArray< btCollisionObject * > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_btCollisionObjectPtr CxxbtCollisionObjectArrayPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtCollisionObjectArrayConstRef] -> KL[CxxbtAlignedObjectArray_btCollisionObjectConstRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstRef] LIB[btAlignedObjectArray< btCollisionObject * > const &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_btCollisionObjectConstRef CxxbtCollisionObjectArrayConstRef;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtCollisionObjectArrayRef] -> KL[CxxbtAlignedObjectArray_btCollisionObjectRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutableRef] LIB[btAlignedObjectArray< btCollisionObject * > &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_btCollisionObjectRef CxxbtCollisionObjectArrayRef;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btCollisionObject can be used to manage collision detection objects.
/// btCollisionObject maintains all information that is needed for a collision detection: Shape, Transform and AABB proxy.
/// They can be added to the btCollisionWorld.
struct btCollisionObject
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionObject.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionObject() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[CF_STATIC_OBJECT=1, CF_KINEMATIC_OBJECT=2, CF_NO_CONTACT_RESPONSE=4, CF_CUSTOM_MATERIAL_CALLBACK=8, CF_CHARACTER_OBJECT=16, CF_DISABLE_VISUALIZE_OBJECT=32, CF_DISABLE_SPU_COLLISION_PROCESSING=64, CF_HAS_CONTACT_STIFFNESS_DAMPING=128, CF_HAS_CUSTOM_DEBUG_RENDERING_COLOR=256]: KL[btCollisionObject_CollisionFlags] EDK[_Kludge_EDK_btCollisionObject_CollisionFlags] LIB[btCollisionObject::CollisionFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btCollisionObject_CollisionFlags;
const btCollisionObject_CollisionFlags btCollisionObject_CF_STATIC_OBJECT = 1;
const btCollisionObject_CollisionFlags btCollisionObject_CF_KINEMATIC_OBJECT = 2;
const btCollisionObject_CollisionFlags btCollisionObject_CF_NO_CONTACT_RESPONSE = 4;
const btCollisionObject_CollisionFlags btCollisionObject_CF_CUSTOM_MATERIAL_CALLBACK = 8;
const btCollisionObject_CollisionFlags btCollisionObject_CF_CHARACTER_OBJECT = 16;
const btCollisionObject_CollisionFlags btCollisionObject_CF_DISABLE_VISUALIZE_OBJECT = 32;
const btCollisionObject_CollisionFlags btCollisionObject_CF_DISABLE_SPU_COLLISION_PROCESSING = 64;
const btCollisionObject_CollisionFlags btCollisionObject_CF_HAS_CONTACT_STIFFNESS_DAMPING = 128;
const btCollisionObject_CollisionFlags btCollisionObject_CF_HAS_CUSTOM_DEBUG_RENDERING_COLOR = 256;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btCollisionObject_CollisionFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Enum[CO_COLLISION_OBJECT=1, CO_RIGID_BODY=2, CO_GHOST_OBJECT=4, CO_SOFT_BODY=8, CO_HF_FLUID=16, CO_USER_TYPE=32, CO_FEATHERSTONE_LINK=64]: KL[btCollisionObject_CollisionObjectTypes] EDK[_Kludge_EDK_btCollisionObject_CollisionObjectTypes] LIB[btCollisionObject::CollisionObjectTypes]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btCollisionObject_CollisionObjectTypes;
const btCollisionObject_CollisionObjectTypes btCollisionObject_CO_COLLISION_OBJECT = 1;
const btCollisionObject_CollisionObjectTypes btCollisionObject_CO_RIGID_BODY = 2;
const btCollisionObject_CollisionObjectTypes btCollisionObject_CO_GHOST_OBJECT = 4;
const btCollisionObject_CollisionObjectTypes btCollisionObject_CO_SOFT_BODY = 8;
const btCollisionObject_CollisionObjectTypes btCollisionObject_CO_HF_FLUID = 16;
const btCollisionObject_CollisionObjectTypes btCollisionObject_CO_USER_TYPE = 32;
const btCollisionObject_CollisionObjectTypes btCollisionObject_CO_FEATHERSTONE_LINK = 64;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btCollisionObject_CollisionObjectTypes() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Enum[CF_ANISOTROPIC_FRICTION_DISABLED=0, CF_ANISOTROPIC_FRICTION=1, CF_ANISOTROPIC_ROLLING_FRICTION=2]: KL[btCollisionObject_AnisotropicFrictionFlags] EDK[_Kludge_EDK_btCollisionObject_AnisotropicFrictionFlags] LIB[btCollisionObject::AnisotropicFrictionFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btCollisionObject_AnisotropicFrictionFlags;
const btCollisionObject_AnisotropicFrictionFlags btCollisionObject_CF_ANISOTROPIC_FRICTION_DISABLED = 0;
const btCollisionObject_AnisotropicFrictionFlags btCollisionObject_CF_ANISOTROPIC_FRICTION = 1;
const btCollisionObject_AnisotropicFrictionFlags btCollisionObject_CF_ANISOTROPIC_ROLLING_FRICTION = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btCollisionObject_AnisotropicFrictionFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObjectDoubleData] EDK[Fabric_EDK_KL_btCollisionObjectDoubleData] LIB[btCollisionObjectDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btCollisionObjectDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionObjectDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionObjectDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObjectFloatData] EDK[Fabric_EDK_KL_btCollisionObjectFloatData] LIB[btCollisionObjectFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btCollisionObjectFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionObjectFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionObjectFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///CollisionWorld is interface and container for the collision detection
struct btCollisionWorld
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionWorld.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalShapeInfo] EDK[Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo] LIB[btCollisionWorld::LocalShapeInfo *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///LocalShapeInfo gives extra information for complex shapes
///Currently, only btTriangleMeshShape is available, so it just contains triangleIndex and subpart
struct btCollisionWorld_LocalShapeInfo
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionWorld_LocalShapeInfo.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalRayResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalRayResult] LIB[btCollisionWorld::LocalRayResult *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_LocalRayResult
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionWorld_LocalRayResult.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_LocalRayResult() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///RayResultCallback is used to report new raycast results
struct btCollisionWorld_RayResultCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionWorld_RayResultCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_RayResultCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_ClosestRayResultCallback
  : btCollisionWorld_RayResultCallback
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_AllHitsRayResultCallback
  : btCollisionWorld_RayResultCallback
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalConvexResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalConvexResult] LIB[btCollisionWorld::LocalConvexResult *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_LocalConvexResult
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionWorld_LocalConvexResult.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_LocalConvexResult() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///RayResultCallback is used to report new raycast results
struct btCollisionWorld_ConvexResultCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionWorld_ConvexResultCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorld_ClosestConvexResultCallback
  : btCollisionWorld_ConvexResultCallback
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///ContactResultCallback is used to report contact points
struct btCollisionWorld_ContactResultCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionWorld_ContactResultCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorld_ContactResultCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCollisionWorldImporter
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCollisionWorldImporter.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCollisionWorldImporter() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btCompoundCollisionAlgorithm  supports collision between CompoundCollisionShapes and other collision shapes
struct btCompoundCollisionAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCollisionAlgorithm_SwappedCreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btCompoundCompoundCollisionAlgorithm  supports collision between two btCompoundCollisionShape shapes
struct btCompoundCompoundCollisionAlgorithm
  : btCompoundCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCompoundCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The convex2dConvex2dAlgorithm collision algorithm support 2d collision detection for btConvex2dShape
///Currently it requires the btMinkowskiPenetrationDepthSolver, it has support for 2d penetration depth computation
struct btConvex2dConvex2dAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvex2dConvex2dAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dConvex2dAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc] LIB[btConvex2dConvex2dAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btConvex2dConvex2dAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///For each triangle in the concave mesh that overlaps with the AABB of a convex (m_convexProxy), processTriangle is called.
struct btConvexTriangleCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btConvexTriangleCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexTriangleCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btConvexConcaveCollisionAlgorithm  supports collision between convex shapes and (concave) trianges meshes.
struct btConvexConcaveCollisionAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc] LIB[btConvexConcaveCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexConcaveCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexConcaveCollisionAlgorithm_SwappedCreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The convexConvexAlgorithm collision algorithm implements time of impact, convex closest points and penetration depth calculations between two convex objects.
///Multiple contact points are calculated by perturbing the orientation of the smallest object orthogonal to the separating normal.
///This idea was described by Gino van den Bergen in this forum topic http://www.bulletphysics.com/Bullet/phpBB3/viewtopic.php?f=4&t=288&p=888#p888
struct btConvexConvexAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexConvexAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConvexAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc] LIB[btConvexConvexAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexConvexAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btSphereBoxCollisionAlgorithm  provides sphere-box collision detection.
/// Other features are frame-coherency (persistent data) and collision response.
struct btConvexPlaneCollisionAlgorithm
  : btCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPlaneCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc] LIB[btConvexPlaneCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btConvexPlaneCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultCollisionConstructionInfo] EDK[Fabric_EDK_KL_btDefaultCollisionConstructionInfo] LIB[btDefaultCollisionConstructionInfo *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btDefaultCollisionConstructionInfo
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btDefaultCollisionConstructionInfo.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDefaultCollisionConstructionInfo() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btCollisionConfiguration allows to configure Bullet collision detection
///stack allocator, pool memory allocators
///@todo: describe the meaning
struct btDefaultCollisionConfiguration
  : btCollisionConfiguration
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDefaultCollisionConfiguration() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///EmptyAlgorithm is a stub for unsupported collision pairs.
///The dispatcher can dispatch a persistent btEmptyAlgorithm to avoid a search every frame.
struct btEmptyAlgorithm
  : btCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btEmptyAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc] LIB[btEmptyAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btEmptyAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btGhostObject can keep track of all objects that are overlapping
// 
///By default, this overlap is based on the AABB
// 
///This is useful for creating a character controller, collision sensors/triggers, explosions etc.
// 
///We plan on adding rayTest and other queries for the btGhostObject
struct btGhostObject
  : btCollisionObject
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGhostObject() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btPairCachingGhostObject
  : btGhostObject
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPairCachingGhostObject() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimplePair] EDK[Fabric_EDK_KL_btSimplePair] LIB[btSimplePair *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSimplePair
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSimplePair.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSimplePair() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btHashedSimplePairCache
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btHashedSimplePairCache.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btHashedSimplePairCache() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_TRIANGLE_CONVEX_BACKFACE_MODE=1, BT_TRIANGLE_CONCAVE_DOUBLE_SIDED=2, BT_TRIANGLE_CONVEX_DOUBLE_SIDED=4]: KL[btInternalEdgeAdjustFlags] EDK[_Kludge_EDK_btInternalEdgeAdjustFlags] LIB[btInternalEdgeAdjustFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btInternalEdgeAdjustFlags;
const btInternalEdgeAdjustFlags BT_TRIANGLE_CONVEX_BACKFACE_MODE = 1;
const btInternalEdgeAdjustFlags BT_TRIANGLE_CONCAVE_DOUBLE_SIDED = 2;
const btInternalEdgeAdjustFlags BT_TRIANGLE_CONVEX_DOUBLE_SIDED = 4;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btInternalEdgeAdjustFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btManifoldResult is a helper class to manage  contact results.
struct btManifoldResult
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btManifoldResult.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btManifoldResult() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///SimulationIslandManager creates and handles simulation islands, using btUnionFind
struct btSimulationIslandManager
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSimulationIslandManager.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSimulationIslandManager() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimulationIslandManager_IslandCallback] EDK[Fabric_EDK_KL_btSimulationIslandManager_IslandCallback] LIB[btSimulationIslandManager::IslandCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSimulationIslandManager_IslandCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSimulationIslandManager_IslandCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSimulationIslandManager_IslandCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btSphereBoxCollisionAlgorithm  provides sphere-box collision detection.
/// Other features are frame-coherency (persistent data) and collision response.
struct btSphereBoxCollisionAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSphereBoxCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc] LIB[btSphereBoxCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereBoxCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btSphereSphereCollisionAlgorithm  provides sphere-sphere collision detection.
/// Other features are frame-coherency (persistent data) and collision response.
/// Also provides the most basic sample for custom/user btCollisionAlgorithm
struct btSphereSphereCollisionAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSphereSphereCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereSphereCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc] LIB[btSphereSphereCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereSphereCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btSphereSphereCollisionAlgorithm  provides sphere-sphere collision detection.
/// Other features are frame-coherency (persistent data) and collision response.
/// Also provides the most basic sample for custom/user btCollisionAlgorithm
struct btSphereTriangleCollisionAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereTriangleCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc] LIB[btSphereTriangleCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSphereTriangleCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// sphere-triangle to match the btDiscreteCollisionDetectorInterface
struct SphereTriangleDetector
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean SphereTriangleDetector.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_SphereTriangleDetector() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_CONST_BACK_PLANE=0, BT_CONST_COLLIDE_PLANE=1, BT_CONST_FRONT_PLANE=2]: KL[eBT_PLANE_INTERSECTION_TYPE] EDK[_Kludge_EDK_eBT_PLANE_INTERSECTION_TYPE] LIB[eBT_PLANE_INTERSECTION_TYPE]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer eBT_PLANE_INTERSECTION_TYPE;
const eBT_PLANE_INTERSECTION_TYPE BT_CONST_BACK_PLANE = 0;
const eBT_PLANE_INTERSECTION_TYPE BT_CONST_COLLIDE_PLANE = 1;
const eBT_PLANE_INTERSECTION_TYPE BT_CONST_FRONT_PLANE = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_eBT_PLANE_INTERSECTION_TYPE() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//!  Class for transforming a model1 to the space of model0
struct BT_BOX_BOX_TRANSFORM_CACHE
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean BT_BOX_BOX_TRANSFORM_CACHE.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

//! Axis aligned box
struct btAABB
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btAABB.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAABB()
  = "__CxxSize_Fabric_EDK_KL_btAABB";


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct MyCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean MyCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_MyCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct MyInternalTriangleIndexCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean MyInternalTriangleIndexCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_MyInternalTriangleIndexCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The GIM_CONTACT is an internal GIMPACT structure, similar to btManifoldPoint.
///@todo: remove and replace GIM_CONTACT by btManifoldPoint.
struct GIM_CONTACT
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean GIM_CONTACT.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_GIM_CONTACT() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btContactArray
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btContactArray.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btContactArray() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Generic Pool class
struct btGenericMemoryPool
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGenericMemoryPool.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGenericMemoryPool() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Generic Allocator with pools
// /*!
// General purpose Allocator which can create Memory Pools dynamiacally as needed.
// */
struct btGenericPoolAllocator
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGenericPoolAllocator.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGenericPoolAllocator() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_PAIR] EDK[Fabric_EDK_KL_GIM_PAIR] LIB[GIM_PAIR *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Overlapping pair
struct GIM_PAIR
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean GIM_PAIR.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_GIM_PAIR() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! A pairset array
struct btPairSet
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btPairSet.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPairSet() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_DATA] EDK[Fabric_EDK_KL_GIM_BVH_DATA] LIB[GIM_BVH_DATA *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///GIM_BVH_DATA is an internal GIMPACT collision structure to contain axis aligned bounding box
struct GIM_BVH_DATA
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean GIM_BVH_DATA.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_GIM_BVH_DATA() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Node Structure for trees
struct GIM_BVH_TREE_NODE
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean GIM_BVH_TREE_NODE.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_GIM_BVH_TREE_NODE() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_DATA_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_DATA_ARRAY] LIB[GIM_BVH_DATA_ARRAY *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_BVH_DATA_ARRAY
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean GIM_BVH_DATA_ARRAY.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_GIM_BVH_DATA_ARRAY() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_TREE_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY] LIB[GIM_BVH_TREE_NODE_ARRAY *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_BVH_TREE_NODE_ARRAY
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean GIM_BVH_TREE_NODE_ARRAY.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Basic Box tree structure
struct btBvhTree
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btBvhTree.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btBvhTree() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Prototype Base class for primitive classification
// /*!
// This class is a wrapper for primitive collections.
// This tells relevant info for the Bounding Box set classes, which take care of space classification.
// This class can manage Compound shapes and trimeshes, and if it is managing trimesh then the  Hierarchy Bounding Box classes will take advantage of primitive Vs Box overlapping tests for getting optimal results and less Per Box compairisons.
// */
struct btPrimitiveManagerBase
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btPrimitiveManagerBase.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPrimitiveManagerBase() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Structure for containing Boxes
// /*!
// This class offers an structure for managing a box tree of primitives.
// Requires a Primitive prototype (like btPrimitiveManagerBase )
// */
struct btGImpactBvh
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGImpactBvh.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactBvh() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Collision Algorithm for GImpact Shapes
// /*!
// For register this algorithm in Bullet, proceed as following:
// \code
// btCollisionDispatcher * dispatcher = static_cast<btCollisionDispatcher *>(m_dynamicsWorld ->getDispatcher());
// btGImpactCollisionAlgorithm::registerAlgorithm(dispatcher);
// \endcode
// */
struct btGImpactCollisionAlgorithm
  : btActivatingCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc] LIB[btGImpactCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGImpactCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btQuantizedBvhNode is a compressed aabb node, 16 bytes.
///Node can be used for leafnode or internal node. Leafnodes can point to 32-bit triangle index (non-negative range).
struct BT_QUANTIZED_BVH_NODE
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean BT_QUANTIZED_BVH_NODE.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_QUANTIZED_BVH_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY] LIB[GIM_QUANTIZED_BVH_NODE_ARRAY *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct GIM_QUANTIZED_BVH_NODE_ARRAY
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean GIM_QUANTIZED_BVH_NODE_ARRAY.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Basic Box tree structure
struct btQuantizedBvhTree
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btQuantizedBvhTree.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btQuantizedBvhTree() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Structure for containing Boxes
// /*!
// This class offers an structure for managing a box tree of primitives.
// Requires a Primitive prototype (like btPrimitiveManagerBase )
// */
struct btGImpactQuantizedBvh
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGImpactQuantizedBvh.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactQuantizedBvh() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[CONST_GIMPACT_COMPOUND_SHAPE=0, CONST_GIMPACT_TRIMESH_SHAPE_PART=1, CONST_GIMPACT_TRIMESH_SHAPE=2]: KL[eGIMPACT_SHAPE_TYPE] EDK[_Kludge_EDK_eGIMPACT_SHAPE_TYPE] LIB[eGIMPACT_SHAPE_TYPE]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer eGIMPACT_SHAPE_TYPE;
const eGIMPACT_SHAPE_TYPE CONST_GIMPACT_COMPOUND_SHAPE = 0;
const eGIMPACT_SHAPE_TYPE CONST_GIMPACT_TRIMESH_SHAPE_PART = 1;
const eGIMPACT_SHAPE_TYPE CONST_GIMPACT_TRIMESH_SHAPE = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_eGIMPACT_SHAPE_TYPE() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Helper class for tetrahedrons
struct btTetrahedronShapeEx
  : btBU_Simplex1to4
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTetrahedronShapeEx() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Base class for gimpact shapes
struct btGImpactShapeInterface
  : btConcaveShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactShapeInterface() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! btGImpactCompoundShape allows to handle multiple btCollisionShape objects at once
// /*!
// This class only can manage Convex subshapes
// */
struct btGImpactCompoundShape
  : btGImpactShapeInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactCompoundShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! compound primitive manager
struct btGImpactCompoundShape_CompoundPrimitiveManager
  : btPrimitiveManagerBase
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! This class manages a sub part of a mesh supplied by the btStridingMeshInterface interface.
// /*!
// - Simply create this shape by passing the btStridingMeshInterface to the constructor btGImpactMeshShapePart, then you must call updateBound() after creating the mesh
// - When making operations with this shape, you must call <b>lock</b> before accessing to the trimesh primitives, and then call <b>unlock</b>
// - You can handle deformable meshes with this shape, by calling postUpdate() every time when changing the mesh vertices.
// 
// */
struct btGImpactMeshShapePart
  : btGImpactShapeInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactMeshShapePart() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Trimesh primitive manager
// /*!
// Manages the info from btStridingMeshInterface object and controls the Lock/Unlock mechanism
// */
struct btGImpactMeshShapePart_TrimeshPrimitiveManager
  : btPrimitiveManagerBase
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! This class manages a mesh supplied by the btStridingMeshInterface interface.
// /*!
// Set of btGImpactMeshShapePart parts
// - Simply create this shape by passing the btStridingMeshInterface to the constructor btGImpactMeshShape, then you must call updateBound() after creating the mesh
// 
// - You can handle deformable meshes with this shape, by calling postUpdate() every time when changing the mesh vertices.
// 
// */
struct btGImpactMeshShape
  : btGImpactShapeInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactMeshShape() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapeData] EDK[Fabric_EDK_KL_btGImpactMeshShapeData] LIB[btGImpactMeshShapeData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btGImpactMeshShapeData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGImpactMeshShapeData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGImpactMeshShapeData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Structure for collision
struct GIM_TRIANGLE_CONTACT
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean GIM_TRIANGLE_CONTACT.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_GIM_TRIANGLE_CONTACT() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btPrimitiveTriangle
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btPrimitiveTriangle.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPrimitiveTriangle() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Helper class for colliding Bullet Triangle Shapes
// /*!
// This class implements a better getAabb method than the previous btTriangleShape class
// */
struct btTriangleShapeEx
  : btTriangleShape
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTriangleShapeEx() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMinkowskiPenetrationDepthSolver] EDK[Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver] LIB[btMinkowskiPenetrationDepthSolver]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

///MinkowskiPenetrationDepthSolver implements bruteforce penetration depth estimation.
///Implementation is based on sampling the depth using support mapping, and using GJK step to get the witness points.
struct btMinkowskiPenetrationDepthSolver
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btMinkowskiPenetrationDepthSolver.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver()
  = "__CxxSize_Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver";


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btUsageBitfield
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btUsageBitfield.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btUsageBitfield() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSubSimplexClosestResult
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSubSimplexClosestResult.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSubSimplexClosestResult() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btVoronoiSimplexSolver
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btVoronoiSimplexSolver.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btVoronoiSimplexSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btCharacterControllerInterface
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btCharacterControllerInterface.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btCharacterControllerInterface() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btKinematicCharacterController is an object that supports a sliding motion in a world.
///It uses a ghost object and convex sweep test to test for upcoming collisions. This is combined with discrete collision detection to recover from penetrations.
///Interaction between btKinematicCharacterController and dynamic rigid bodies needs to be explicity implemented by the user.
struct btKinematicCharacterController
  : btCharacterControllerInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btKinematicCharacterController() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_SEQUENTIAL_IMPULSE_SOLVER=1, BT_MLCP_SOLVER=2, BT_NNCG_SOLVER=4]: KL[btConstraintSolverType] EDK[_Kludge_EDK_btConstraintSolverType] LIB[btConstraintSolverType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btConstraintSolver provides solver interface
alias Integer btConstraintSolverType;
const btConstraintSolverType BT_SEQUENTIAL_IMPULSE_SOLVER = 1;
const btConstraintSolverType BT_MLCP_SOLVER = 2;
const btConstraintSolverType BT_NNCG_SOLVER = 4;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btConstraintSolverType() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btConstraintSolver
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btConstraintSolver.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConstraintSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///Basic interface to allow actions such as vehicles and characters to be updated inside a btDynamicsWorld
struct btActionInterface
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btActionInterface.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btActionInterface() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_SIMPLE_DYNAMICS_WORLD=1, BT_DISCRETE_DYNAMICS_WORLD=2, BT_CONTINUOUS_DYNAMICS_WORLD=3, BT_SOFT_RIGID_DYNAMICS_WORLD=4, BT_GPU_DYNAMICS_WORLD=5, BT_SOFT_MULTIBODY_DYNAMICS_WORLD=6]: KL[btDynamicsWorldType] EDK[_Kludge_EDK_btDynamicsWorldType] LIB[btDynamicsWorldType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btDynamicsWorldType;
const btDynamicsWorldType BT_SIMPLE_DYNAMICS_WORLD = 1;
const btDynamicsWorldType BT_DISCRETE_DYNAMICS_WORLD = 2;
const btDynamicsWorldType BT_CONTINUOUS_DYNAMICS_WORLD = 3;
const btDynamicsWorldType BT_SOFT_RIGID_DYNAMICS_WORLD = 4;
const btDynamicsWorldType BT_GPU_DYNAMICS_WORLD = 5;
const btDynamicsWorldType BT_SOFT_MULTIBODY_DYNAMICS_WORLD = 6;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btDynamicsWorldType() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btDynamicsWorld is the interface class for several dynamics implementation, basic, discrete, parallel, and continuous etc.
struct btDynamicsWorld
  : btCollisionWorld
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDynamicsWorld() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorldDoubleData] EDK[Fabric_EDK_KL_btDynamicsWorldDoubleData] LIB[btDynamicsWorldDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btDynamicsWorldDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btDynamicsWorldDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDynamicsWorldDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorldFloatData] EDK[Fabric_EDK_KL_btDynamicsWorldFloatData] LIB[btDynamicsWorldFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btDynamicsWorldFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btDynamicsWorldFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDynamicsWorldFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btDiscreteDynamicsWorld provides discrete rigid body simulation
///those classes replace the obsolete CcdPhysicsEnvironment/CcdPhysicsController
struct btDiscreteDynamicsWorld
  : btDynamicsWorld
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDiscreteDynamicsWorld() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btSimpleDynamicsWorld serves as unit-test and to verify more complicated and optimized dynamics worlds.
///Please use btDiscreteDynamicsWorld instead
struct btSimpleDynamicsWorld
  : btDynamicsWorld
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSimpleDynamicsWorld() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_DISABLE_WORLD_GRAVITY=1, BT_ENABLE_GYROSCOPIC_FORCE_EXPLICIT=2, BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_WORLD=4, BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY=8, BT_ENABLE_GYROPSCOPIC_FORCE=8]: KL[btRigidBodyFlags] EDK[_Kludge_EDK_btRigidBodyFlags] LIB[btRigidBodyFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btRigidBodyFlags;
const btRigidBodyFlags BT_DISABLE_WORLD_GRAVITY = 1;
const btRigidBodyFlags BT_ENABLE_GYROSCOPIC_FORCE_EXPLICIT = 2;
const btRigidBodyFlags BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_WORLD = 4;
const btRigidBodyFlags BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY = 8;
const btRigidBodyFlags BT_ENABLE_GYROPSCOPIC_FORCE = 8;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btRigidBodyFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btRigidBody is the main class for rigid body objects. It is derived from btCollisionObject, so it keeps a pointer to a btCollisionShape.
// 
///It is recommended for performance and memory use to share btCollisionShape objects whenever possible.
// 
///There are 3 types of rigid bodies:
// 
///- A) Dynamic rigid bodies, with positive mass. Motion is controlled by rigid body dynamics.
// 
///- B) Fixed objects with zero mass. They are not moving (basically collision objects)
// 
///- C) Kinematic objects, which are objects without mass, but the user can move them. There is on-way interaction, and Bullet calculates a velocity based on the timestep and previous and current world transform.
// 
///Bullet automatically deactivates dynamic rigid bodies, when the velocity is below a threshold for a given time.
// 
///Deactivated (sleeping) rigid bodies don't take any processing time, except a minor broadphase collision detection impact (to allow active objects to activate/wake up sleeping objects)
struct btRigidBody
  : btCollisionObject
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btRigidBody() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

///The btRigidBodyConstructionInfo structure provides information to create a rigid body. Setting mass to zero creates a fixed (non-dynamic) rigid body.
// 
///For dynamic objects, you can use the collision shape to approximate the local inertia tensor, otherwise use the zero vector (default argument)
// 
///You can use the motion state to synchronize the world transform between physics and graphics objects.
// 
///And if the motion state is provided, the rigid body will initialize its initial world transform from the motion state,
// 
///m_startWorldTransform is only used when you don't provide a motion state.
struct btRigidBody_btRigidBodyConstructionInfo
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btRigidBody_btRigidBodyConstructionInfo.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo()
  = "__CxxSize_Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo";


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBodyFloatData] EDK[Fabric_EDK_KL_btRigidBodyFloatData] LIB[btRigidBodyFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btRigidBodyFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btRigidBodyFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btRigidBodyFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBodyDoubleData] EDK[Fabric_EDK_KL_btRigidBodyDoubleData] LIB[btRigidBodyDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btRigidBodyDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btRigidBodyDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btRigidBodyDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[POINT2POINT_CONSTRAINT_TYPE=3, HINGE_CONSTRAINT_TYPE=4, CONETWIST_CONSTRAINT_TYPE=5, D6_CONSTRAINT_TYPE=6, SLIDER_CONSTRAINT_TYPE=7, CONTACT_CONSTRAINT_TYPE=8, D6_SPRING_CONSTRAINT_TYPE=9, GEAR_CONSTRAINT_TYPE=10, FIXED_CONSTRAINT_TYPE=11, D6_SPRING_2_CONSTRAINT_TYPE=12, MAX_CONSTRAINT_TYPE=13]: KL[btTypedConstraintType] EDK[_Kludge_EDK_btTypedConstraintType] LIB[btTypedConstraintType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btTypedConstraintType;
const btTypedConstraintType POINT2POINT_CONSTRAINT_TYPE = 3;
const btTypedConstraintType HINGE_CONSTRAINT_TYPE = 4;
const btTypedConstraintType CONETWIST_CONSTRAINT_TYPE = 5;
const btTypedConstraintType D6_CONSTRAINT_TYPE = 6;
const btTypedConstraintType SLIDER_CONSTRAINT_TYPE = 7;
const btTypedConstraintType CONTACT_CONSTRAINT_TYPE = 8;
const btTypedConstraintType D6_SPRING_CONSTRAINT_TYPE = 9;
const btTypedConstraintType GEAR_CONSTRAINT_TYPE = 10;
const btTypedConstraintType FIXED_CONSTRAINT_TYPE = 11;
const btTypedConstraintType D6_SPRING_2_CONSTRAINT_TYPE = 12;
const btTypedConstraintType MAX_CONSTRAINT_TYPE = 13;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btTypedConstraintType() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_CONSTRAINT_ERP=1, BT_CONSTRAINT_STOP_ERP=2, BT_CONSTRAINT_CFM=3, BT_CONSTRAINT_STOP_CFM=4]: KL[btConstraintParams] EDK[_Kludge_EDK_btConstraintParams] LIB[btConstraintParams]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btConstraintParams;
const btConstraintParams BT_CONSTRAINT_ERP = 1;
const btConstraintParams BT_CONSTRAINT_STOP_ERP = 2;
const btConstraintParams BT_CONSTRAINT_CFM = 3;
const btConstraintParams BT_CONSTRAINT_STOP_CFM = 4;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btConstraintParams() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btJointFeedback] EDK[Fabric_EDK_KL_btJointFeedback] LIB[btJointFeedback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btJointFeedback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btJointFeedback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btJointFeedback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///TypedConstraint is the baseclass for Bullet constraints and vehicles
struct btTypedConstraint
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTypedConstraint.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTypedConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint_btConstraintInfo1] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1] LIB[btTypedConstraint::btConstraintInfo1 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraint_btConstraintInfo1
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTypedConstraint_btConstraintInfo1.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint_btConstraintInfo2] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2] LIB[btTypedConstraint::btConstraintInfo2 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraint_btConstraintInfo2
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTypedConstraint_btConstraintInfo2.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintFloatData] EDK[Fabric_EDK_KL_btTypedConstraintFloatData] LIB[btTypedConstraintFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btTypedConstraintFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTypedConstraintFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTypedConstraintFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintData] EDK[Fabric_EDK_KL_btTypedConstraintData] LIB[btTypedConstraintData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///this structure is not used, except for loading pre-2.82 .bullet files
struct btTypedConstraintData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTypedConstraintData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTypedConstraintData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintDoubleData] EDK[Fabric_EDK_KL_btTypedConstraintDoubleData] LIB[btTypedConstraintDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btTypedConstraintDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTypedConstraintDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTypedConstraintDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btAngularLimit
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btAngularLimit.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btAngularLimit() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
//! Rotation Limit structure for generic joints
struct btRotationalLimitMotor
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btRotationalLimitMotor.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btRotationalLimitMotor() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btTranslationalLimitMotor
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTranslationalLimitMotor.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTranslationalLimitMotor() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_6DOF_FLAGS_CFM_NORM=1, BT_6DOF_FLAGS_CFM_STOP=2, BT_6DOF_FLAGS_ERP_STOP=4]: KL[bt6DofFlags] EDK[_Kludge_EDK_bt6DofFlags] LIB[bt6DofFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer bt6DofFlags;
const bt6DofFlags BT_6DOF_FLAGS_CFM_NORM = 1;
const bt6DofFlags BT_6DOF_FLAGS_CFM_STOP = 2;
const bt6DofFlags BT_6DOF_FLAGS_ERP_STOP = 4;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_bt6DofFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btGeneric6DofConstraint between two rigidbodies each with a pivotpoint that descibes the axis location in local space
// /*!
// btGeneric6DofConstraint can leave any of the 6 degree of freedom 'free' or 'locked'.
// currently this limit supports rotational motors<br>
// <ul>
// <li> For Linear limits, use btGeneric6DofConstraint.setLinearUpperLimit, btGeneric6DofConstraint.setLinearLowerLimit. You can set the parameters with the btTranslationalLimitMotor structure accsesible through the btGeneric6DofConstraint.getTranslationalLimitMotor method.
// At this moment translational motors are not supported. May be in the future. </li>
// 
// <li> For Angular limits, use the btRotationalLimitMotor structure for configuring the limit.
// This is accessible through btGeneric6DofConstraint.getLimitMotor method,
// This brings support for limit parameters and motors. </li>
// 
// <li> Angulars limits have these possible ranges:
// <table border=1 >
// <tr>
// <td><b>AXIS</b></td>
// <td><b>MIN ANGLE</b></td>
// <td><b>MAX ANGLE</b></td>
// </tr><tr>
// <td>X</td>
// <td>-PI</td>
// <td>PI</td>
// </tr><tr>
// <td>Y</td>
// <td>-PI/2</td>
// <td>PI/2</td>
// </tr><tr>
// <td>Z</td>
// <td>-PI</td>
// <td>PI</td>
// </tr>
// </table>
// </li>
// </ul>
// 
// */
struct btGeneric6DofConstraint
  : btTypedConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofConstraintData] LIB[btGeneric6DofConstraintData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofConstraintData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGeneric6DofConstraintData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofConstraintData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2] LIB[btGeneric6DofConstraintDoubleData2 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofConstraintDoubleData2
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGeneric6DofConstraintDoubleData2.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[RO_XYZ=0, RO_XZY=1, RO_YXZ=2, RO_YZX=3, RO_ZXY=4, RO_ZYX=5]: KL[RotateOrder] EDK[_Kludge_EDK_RotateOrder] LIB[RotateOrder]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer RotateOrder;
const RotateOrder RO_XYZ = 0;
const RotateOrder RO_XZY = 1;
const RotateOrder RO_YXZ = 2;
const RotateOrder RO_YZX = 3;
const RotateOrder RO_ZXY = 4;
const RotateOrder RO_ZYX = 5;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_RotateOrder() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btRotationalLimitMotor2
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btRotationalLimitMotor2.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btRotationalLimitMotor2() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btTranslationalLimitMotor2
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTranslationalLimitMotor2.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTranslationalLimitMotor2() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_6DOF_FLAGS_CFM_STOP2=1, BT_6DOF_FLAGS_ERP_STOP2=2, BT_6DOF_FLAGS_CFM_MOTO2=4, BT_6DOF_FLAGS_ERP_MOTO2=8]: KL[bt6DofFlags2] EDK[_Kludge_EDK_bt6DofFlags2] LIB[bt6DofFlags2]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer bt6DofFlags2;
const bt6DofFlags2 BT_6DOF_FLAGS_CFM_STOP2 = 1;
const bt6DofFlags2 BT_6DOF_FLAGS_ERP_STOP2 = 2;
const bt6DofFlags2 BT_6DOF_FLAGS_CFM_MOTO2 = 4;
const bt6DofFlags2 BT_6DOF_FLAGS_ERP_MOTO2 = 8;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_bt6DofFlags2() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpring2Constraint
  : btTypedConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofSpring2Constraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2ConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData] LIB[btGeneric6DofSpring2ConstraintData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpring2ConstraintData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGeneric6DofSpring2ConstraintData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2ConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2] LIB[btGeneric6DofSpring2ConstraintDoubleData2 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpring2ConstraintDoubleData2
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGeneric6DofSpring2ConstraintDoubleData2.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// DOF index used in enableSpring() and setStiffness() means:
/// 0 : translation X
/// 1 : translation Y
/// 2 : translation Z
/// 3 : rotation X (3rd Euler rotational around new position of X axis, range [-PI+epsilon, PI-epsilon] )
/// 4 : rotation Y (2nd Euler rotational around new position of Y axis, range [-PI/2+epsilon, PI/2-epsilon] )
/// 5 : rotation Z (1st Euler rotational around Z axis, range [-PI+epsilon, PI-epsilon] )
struct btGeneric6DofSpringConstraint
  : btGeneric6DofConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofSpringConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintData] LIB[btGeneric6DofSpringConstraintData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpringConstraintData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGeneric6DofSpringConstraintData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofSpringConstraintData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2] LIB[btGeneric6DofSpringConstraintDoubleData2 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGeneric6DofSpringConstraintDoubleData2
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGeneric6DofSpringConstraintDoubleData2.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolverConstraint] EDK[Fabric_EDK_KL_btSolverConstraint] LIB[btSolverConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///1D constraint along a normal axis between bodyA and bodyB. It can be combined to solve contact and friction constraints.
struct btSolverConstraint
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSolverConstraint.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSolverConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_SOLVER_CONTACT_1D=0, BT_SOLVER_FRICTION_1D=1]: KL[btSolverConstraint_btSolverConstraintType] EDK[_Kludge_EDK_btSolverConstraint_btSolverConstraintType] LIB[btSolverConstraint::btSolverConstraintType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSolverConstraint_btSolverConstraintType;
const btSolverConstraint_btSolverConstraintType btSolverConstraint_BT_SOLVER_CONTACT_1D = 0;
const btSolverConstraint_btSolverConstraintType btSolverConstraint_BT_SOLVER_FRICTION_1D = 1;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSolverConstraint_btSolverConstraintType() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_CONETWIST_FLAGS_LIN_CFM=1, BT_CONETWIST_FLAGS_LIN_ERP=2, BT_CONETWIST_FLAGS_ANG_CFM=4]: KL[btConeTwistFlags] EDK[_Kludge_EDK_btConeTwistFlags] LIB[btConeTwistFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btConeTwistFlags;
const btConeTwistFlags BT_CONETWIST_FLAGS_LIN_CFM = 1;
const btConeTwistFlags BT_CONETWIST_FLAGS_LIN_ERP = 2;
const btConeTwistFlags BT_CONETWIST_FLAGS_ANG_CFM = 4;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btConeTwistFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btConeTwistConstraint can be used to simulate ragdoll joints (upper arm, leg etc)
struct btConeTwistConstraint
  : btTypedConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConeTwistConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraintDoubleData] EDK[Fabric_EDK_KL_btConeTwistConstraintDoubleData] LIB[btConeTwistConstraintDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btConeTwistConstraintDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btConeTwistConstraintDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConeTwistConstraintDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraintData] EDK[Fabric_EDK_KL_btConeTwistConstraintData] LIB[btConeTwistConstraintData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///this structure is not used, except for loading pre-2.82 .bullet files
struct btConeTwistConstraintData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btConeTwistConstraintData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConeTwistConstraintData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btContactConstraint can be automatically created to solve contact constraints using the unified btTypedConstraint interface
struct btContactConstraint
  : btTypedConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btContactConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[SOLVER_RANDMIZE_ORDER=1, SOLVER_FRICTION_SEPARATE=2, SOLVER_USE_WARMSTARTING=4, SOLVER_USE_2_FRICTION_DIRECTIONS=16, SOLVER_ENABLE_FRICTION_DIRECTION_CACHING=32, SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION=64, SOLVER_CACHE_FRIENDLY=128, SOLVER_SIMD=256, SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS=512, SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS=1024]: KL[btSolverMode] EDK[_Kludge_EDK_btSolverMode] LIB[btSolverMode]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSolverMode;
const btSolverMode SOLVER_RANDMIZE_ORDER = 1;
const btSolverMode SOLVER_FRICTION_SEPARATE = 2;
const btSolverMode SOLVER_USE_WARMSTARTING = 4;
const btSolverMode SOLVER_USE_2_FRICTION_DIRECTIONS = 16;
const btSolverMode SOLVER_ENABLE_FRICTION_DIRECTION_CACHING = 32;
const btSolverMode SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64;
const btSolverMode SOLVER_CACHE_FRIENDLY = 128;
const btSolverMode SOLVER_SIMD = 256;
const btSolverMode SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512;
const btSolverMode SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSolverMode() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoData] EDK[Fabric_EDK_KL_btContactSolverInfoData] LIB[btContactSolverInfoData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btContactSolverInfoData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btContactSolverInfoData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btContactSolverInfoData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfo] EDK[Fabric_EDK_KL_btContactSolverInfo] LIB[btContactSolverInfo *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btContactSolverInfo
  : btContactSolverInfoData
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btContactSolverInfo() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoDoubleData] EDK[Fabric_EDK_KL_btContactSolverInfoDoubleData] LIB[btContactSolverInfoDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btContactSolverInfoDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btContactSolverInfoDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btContactSolverInfoDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoFloatData] EDK[Fabric_EDK_KL_btContactSolverInfoFloatData] LIB[btContactSolverInfoFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btContactSolverInfoFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btContactSolverInfoFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btContactSolverInfoFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btGeatConstraint will couple the angular velocity for two bodies around given local axis and ratio.
///See Bullet/Demos/ConstraintDemo for an example use.
struct btGearConstraint
  : btTypedConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGearConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraintFloatData] EDK[Fabric_EDK_KL_btGearConstraintFloatData] LIB[btGearConstraintFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btGearConstraintFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGearConstraintFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGearConstraintFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraintDoubleData] EDK[Fabric_EDK_KL_btGearConstraintDoubleData] LIB[btGearConstraintDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btGearConstraintDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btGearConstraintDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btGearConstraintDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btFixedConstraint] EDK[Fabric_EDK_KL_btFixedConstraint] LIB[btFixedConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btFixedConstraint
  : btGeneric6DofSpring2Constraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btFixedConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btHinge2Constraint
  : btGeneric6DofSpring2Constraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btHinge2Constraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_HINGE_FLAGS_CFM_STOP=1, BT_HINGE_FLAGS_ERP_STOP=2, BT_HINGE_FLAGS_CFM_NORM=4, BT_HINGE_FLAGS_ERP_NORM=8]: KL[btHingeFlags] EDK[_Kludge_EDK_btHingeFlags] LIB[btHingeFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btHingeFlags;
const btHingeFlags BT_HINGE_FLAGS_CFM_STOP = 1;
const btHingeFlags BT_HINGE_FLAGS_ERP_STOP = 2;
const btHingeFlags BT_HINGE_FLAGS_CFM_NORM = 4;
const btHingeFlags BT_HINGE_FLAGS_ERP_NORM = 8;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btHingeFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// hinge constraint between two rigidbodies each with a pivotpoint that descibes the axis location in local space
/// axis defines the orientation of the hinge axis
struct btHingeConstraint
  : btTypedConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btHingeConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintDoubleData] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData] LIB[btHingeConstraintDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///this structure is not used, except for loading pre-2.82 .bullet files
struct btHingeConstraintDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btHingeConstraintDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btHingeConstraintDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The getAccumulatedHingeAngle returns the accumulated hinge angle, taking rotation across the -PI/PI boundary into account
struct btHingeAccumulatedAngleConstraint
  : btHingeConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btHingeAccumulatedAngleConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintFloatData] EDK[Fabric_EDK_KL_btHingeConstraintFloatData] LIB[btHingeConstraintFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btHingeConstraintFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btHingeConstraintFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btHingeConstraintFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintDoubleData2] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData2] LIB[btHingeConstraintDoubleData2 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btHingeConstraintDoubleData2
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btHingeConstraintDoubleData2.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btHingeConstraintDoubleData2() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// Jacobian entry is an abstraction that allows to describe constraints
/// it can be used in combination with a constraint solver
/// Can be used to relate the effect of an impulse to the constraint error
struct btJacobianEntry
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btJacobianEntry.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btJacobianEntry() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConstraintSetting] EDK[Fabric_EDK_KL_btConstraintSetting] LIB[btConstraintSetting *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btConstraintSetting
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btConstraintSetting.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btConstraintSetting() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_P2P_FLAGS_ERP=1, BT_P2P_FLAGS_CFM=2]: KL[btPoint2PointFlags] EDK[_Kludge_EDK_btPoint2PointFlags] LIB[btPoint2PointFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btPoint2PointFlags;
const btPoint2PointFlags BT_P2P_FLAGS_ERP = 1;
const btPoint2PointFlags BT_P2P_FLAGS_CFM = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btPoint2PointFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// point to point constraint between two rigidbodies each with a pivotpoint that descibes the 'ballsocket' location in local space
struct btPoint2PointConstraint
  : btTypedConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPoint2PointConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintFloatData] EDK[Fabric_EDK_KL_btPoint2PointConstraintFloatData] LIB[btPoint2PointConstraintFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btPoint2PointConstraintFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btPoint2PointConstraintFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPoint2PointConstraintFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintDoubleData2] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData2] LIB[btPoint2PointConstraintDoubleData2 *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btPoint2PointConstraintDoubleData2
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btPoint2PointConstraintDoubleData2.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPoint2PointConstraintDoubleData2() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintDoubleData] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData] LIB[btPoint2PointConstraintDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
///this structure is not used, except for loading pre-2.82 .bullet files
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btPoint2PointConstraintDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btPoint2PointConstraintDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btPoint2PointConstraintDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btSequentialImpulseConstraintSolver is a fast SIMD implementation of the Projected Gauss Seidel (iterative LCP) method.
struct btSequentialImpulseConstraintSolver
  : btConstraintSolver
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSequentialImpulseConstraintSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btNNCGConstraintSolver
  : btSequentialImpulseConstraintSolver
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btNNCGConstraintSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_SLIDER_FLAGS_CFM_DIRLIN=1, BT_SLIDER_FLAGS_ERP_DIRLIN=2, BT_SLIDER_FLAGS_CFM_DIRANG=4, BT_SLIDER_FLAGS_ERP_DIRANG=8, BT_SLIDER_FLAGS_CFM_ORTLIN=16, BT_SLIDER_FLAGS_ERP_ORTLIN=32, BT_SLIDER_FLAGS_CFM_ORTANG=64, BT_SLIDER_FLAGS_ERP_ORTANG=128, BT_SLIDER_FLAGS_CFM_LIMLIN=256, BT_SLIDER_FLAGS_ERP_LIMLIN=512, BT_SLIDER_FLAGS_CFM_LIMANG=1024, BT_SLIDER_FLAGS_ERP_LIMANG=2048]: KL[btSliderFlags] EDK[_Kludge_EDK_btSliderFlags] LIB[btSliderFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSliderFlags;
const btSliderFlags BT_SLIDER_FLAGS_CFM_DIRLIN = 1;
const btSliderFlags BT_SLIDER_FLAGS_ERP_DIRLIN = 2;
const btSliderFlags BT_SLIDER_FLAGS_CFM_DIRANG = 4;
const btSliderFlags BT_SLIDER_FLAGS_ERP_DIRANG = 8;
const btSliderFlags BT_SLIDER_FLAGS_CFM_ORTLIN = 16;
const btSliderFlags BT_SLIDER_FLAGS_ERP_ORTLIN = 32;
const btSliderFlags BT_SLIDER_FLAGS_CFM_ORTANG = 64;
const btSliderFlags BT_SLIDER_FLAGS_ERP_ORTANG = 128;
const btSliderFlags BT_SLIDER_FLAGS_CFM_LIMLIN = 256;
const btSliderFlags BT_SLIDER_FLAGS_ERP_LIMLIN = 512;
const btSliderFlags BT_SLIDER_FLAGS_CFM_LIMANG = 1024;
const btSliderFlags BT_SLIDER_FLAGS_ERP_LIMANG = 2048;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSliderFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSliderConstraint
  : btTypedConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSliderConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraintData] EDK[Fabric_EDK_KL_btSliderConstraintData] LIB[btSliderConstraintData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btSliderConstraintData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSliderConstraintData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSliderConstraintData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraintDoubleData] EDK[Fabric_EDK_KL_btSliderConstraintDoubleData] LIB[btSliderConstraintDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSliderConstraintDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSliderConstraintDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSliderConstraintDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolve2LinearConstraint] EDK[Fabric_EDK_KL_btSolve2LinearConstraint] LIB[btSolve2LinearConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// constraint class used for lateral tyre friction.
struct btSolve2LinearConstraint
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSolve2LinearConstraint.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSolve2LinearConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btSolverBody is an internal datastructure for the constraint solver. Only necessary data is packed to increase cache coherence/performance.
struct btSolverBody
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSolverBody.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSolverBody() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// Constraint similar to ODE Universal Joint
/// has 2 rotatioonal degrees of freedom, similar to Euler rotations around Z (axis 1)
/// and Y (axis 2)
/// Description from ODE manual :
/// "Given axis 1 on body 1, and axis 2 on body 2 that is perpendicular to axis 1, it keeps them perpendicular.
/// In other words, rotation of the two bodies about the direction perpendicular to the two axes will be equal."
struct btUniversalConstraint
  : btGeneric6DofConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btUniversalConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///rayCast vehicle, very special constraint that turn a rigidbody into a vehicle.
struct btRaycastVehicle
  : btActionInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btRaycastVehicle() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRaycastVehicle_btVehicleTuning] EDK[Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning] LIB[btRaycastVehicle::btVehicleTuning *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btRaycastVehicle_btVehicleTuning
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btRaycastVehicle_btVehicleTuning.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btDefaultVehicleRaycaster
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btDefaultVehicleRaycaster.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDefaultVehicleRaycaster() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btVehicleRaycaster is provides interface for between vehicle simulation and raycasting
struct btVehicleRaycaster
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btVehicleRaycaster.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btVehicleRaycaster() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVehicleRaycaster_btVehicleRaycasterResult] EDK[Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult] LIB[btVehicleRaycaster::btVehicleRaycasterResult *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btVehicleRaycaster_btVehicleRaycasterResult
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btVehicleRaycaster_btVehicleRaycasterResult.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btWheelInfoConstructionInfo
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btWheelInfoConstructionInfo.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btWheelInfoConstructionInfo()
  = "__CxxSize_Fabric_EDK_KL_btWheelInfoConstructionInfo";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// btWheelInfo contains information per wheel about friction and suspension.
struct btWheelInfo
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btWheelInfo.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btWheelInfo()
  = "__CxxSize_Fabric_EDK_KL_btWheelInfo";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct btWheelInfo_RaycastInfo
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data btWheelInfo_RaycastInfo.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btWheelInfo_RaycastInfo()
  = "__CxxSize_Fabric_EDK_KL_btWheelInfo_RaycastInfo";


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodySolver
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBodySolver.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBodySolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[DEFAULT_SOLVER=0, CPU_SOLVER=1, CL_SOLVER=2, CL_SIMD_SOLVER=3, DX_SOLVER=4, DX_SIMD_SOLVER=5]: KL[btSoftBodySolver_SolverTypes] EDK[_Kludge_EDK_btSoftBodySolver_SolverTypes] LIB[btSoftBodySolver::SolverTypes]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBodySolver_SolverTypes;
const btSoftBodySolver_SolverTypes btSoftBodySolver_DEFAULT_SOLVER = 0;
const btSoftBodySolver_SolverTypes btSoftBodySolver_CPU_SOLVER = 1;
const btSoftBodySolver_SolverTypes btSoftBodySolver_CL_SOLVER = 2;
const btSoftBodySolver_SolverTypes btSoftBodySolver_CL_SIMD_SOLVER = 3;
const btSoftBodySolver_SolverTypes btSoftBodySolver_DX_SOLVER = 4;
const btSoftBodySolver_SolverTypes btSoftBodySolver_DX_SIMD_SOLVER = 5;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBodySolver_SolverTypes() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodySolverOutput] EDK[Fabric_EDK_KL_btSoftBodySolverOutput] LIB[btSoftBodySolverOutput *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/** 
 * Class to manage movement of data from a solver to a given target.
 * This version is abstract. Subclasses will have custom pairings for different combinations.
 */
struct btSoftBodySolverOutput
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBodySolverOutput.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBodySolverOutput() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btDefaultSoftBodySolver
  : btSoftBodySolver
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDefaultSoftBodySolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyWorldInfo] EDK[Fabric_EDK_KL_btSoftBodyWorldInfo] LIB[btSoftBodyWorldInfo *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyWorldInfo
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBodyWorldInfo.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBodyWorldInfo() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btSoftBody is an class to simulate cloth and volumetric soft bodies.
// 
///There is two-way interaction between btSoftBody and btRigidBody/btCollisionObject.
struct btSoftBody
  : btCollisionObject
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eAeroModel] EDK[Fabric_EDK_KL_btSoftBody_eAeroModel] LIB[btSoftBody::eAeroModel *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///eAeroModel
struct btSoftBody_eAeroModel
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_eAeroModel.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_eAeroModel() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[V_Point=0, V_TwoSided=1, V_TwoSidedLiftDrag=2, V_OneSided=3, F_TwoSided=4, F_TwoSidedLiftDrag=5, F_OneSided=6, END=7]: KL[btSoftBody_eAeroModel__] EDK[_Kludge_EDK_btSoftBody_eAeroModel__] LIB[btSoftBody::eAeroModel::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBody_eAeroModel__;
const btSoftBody_eAeroModel__ btSoftBody_eAeroModel_V_Point = 0;
const btSoftBody_eAeroModel__ btSoftBody_eAeroModel_V_TwoSided = 1;
const btSoftBody_eAeroModel__ btSoftBody_eAeroModel_V_TwoSidedLiftDrag = 2;
const btSoftBody_eAeroModel__ btSoftBody_eAeroModel_V_OneSided = 3;
const btSoftBody_eAeroModel__ btSoftBody_eAeroModel_F_TwoSided = 4;
const btSoftBody_eAeroModel__ btSoftBody_eAeroModel_F_TwoSidedLiftDrag = 5;
const btSoftBody_eAeroModel__ btSoftBody_eAeroModel_F_OneSided = 6;
const btSoftBody_eAeroModel__ btSoftBody_eAeroModel_END = 7;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBody_eAeroModel__() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eVSolver] EDK[Fabric_EDK_KL_btSoftBody_eVSolver] LIB[btSoftBody::eVSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///eVSolver : velocities solvers
struct btSoftBody_eVSolver
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_eVSolver.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_eVSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[Linear=0, END=1]: KL[btSoftBody_eVSolver__] EDK[_Kludge_EDK_btSoftBody_eVSolver__] LIB[btSoftBody::eVSolver::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBody_eVSolver__;
const btSoftBody_eVSolver__ btSoftBody_eVSolver_Linear = 0;
const btSoftBody_eVSolver__ btSoftBody_eVSolver_END = 1;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBody_eVSolver__() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_ePSolver] EDK[Fabric_EDK_KL_btSoftBody_ePSolver] LIB[btSoftBody::ePSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///ePSolver : positions solvers
struct btSoftBody_ePSolver
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_ePSolver.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_ePSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[Linear=0, Anchors=1, RContacts=2, SContacts=3, END=4]: KL[btSoftBody_ePSolver__] EDK[_Kludge_EDK_btSoftBody_ePSolver__] LIB[btSoftBody::ePSolver::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBody_ePSolver__;
const btSoftBody_ePSolver__ btSoftBody_ePSolver_Linear = 0;
const btSoftBody_ePSolver__ btSoftBody_ePSolver_Anchors = 1;
const btSoftBody_ePSolver__ btSoftBody_ePSolver_RContacts = 2;
const btSoftBody_ePSolver__ btSoftBody_ePSolver_SContacts = 3;
const btSoftBody_ePSolver__ btSoftBody_ePSolver_END = 4;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBody_ePSolver__() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eSolverPresets] EDK[Fabric_EDK_KL_btSoftBody_eSolverPresets] LIB[btSoftBody::eSolverPresets *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///eSolverPresets
struct btSoftBody_eSolverPresets
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_eSolverPresets.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_eSolverPresets() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[Positions=0, Velocities=1, Default=0, END=1]: KL[btSoftBody_eSolverPresets__] EDK[_Kludge_EDK_btSoftBody_eSolverPresets__] LIB[btSoftBody::eSolverPresets::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBody_eSolverPresets__;
const btSoftBody_eSolverPresets__ btSoftBody_eSolverPresets_Positions = 0;
const btSoftBody_eSolverPresets__ btSoftBody_eSolverPresets_Velocities = 1;
const btSoftBody_eSolverPresets__ btSoftBody_eSolverPresets_Default = 0;
const btSoftBody_eSolverPresets__ btSoftBody_eSolverPresets_END = 1;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBody_eSolverPresets__() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eFeature] EDK[Fabric_EDK_KL_btSoftBody_eFeature] LIB[btSoftBody::eFeature *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///eFeature
struct btSoftBody_eFeature
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_eFeature.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_eFeature() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[None=0, Node=1, Link=2, Face=3, Tetra=4, END=5]: KL[btSoftBody_eFeature__] EDK[_Kludge_EDK_btSoftBody_eFeature__] LIB[btSoftBody::eFeature::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBody_eFeature__;
const btSoftBody_eFeature__ btSoftBody_eFeature_None = 0;
const btSoftBody_eFeature__ btSoftBody_eFeature_Node = 1;
const btSoftBody_eFeature__ btSoftBody_eFeature_Link = 2;
const btSoftBody_eFeature__ btSoftBody_eFeature_Face = 3;
const btSoftBody_eFeature__ btSoftBody_eFeature_Tetra = 4;
const btSoftBody_eFeature__ btSoftBody_eFeature_END = 5;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBody_eFeature__() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_fCollision] EDK[Fabric_EDK_KL_btSoftBody_fCollision] LIB[btSoftBody::fCollision *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///fCollision
struct btSoftBody_fCollision
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_fCollision.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_fCollision() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[RVSmask=15, SDF_RS=1, CL_RS=2, SVSmask=48, VF_SS=16, CL_SS=32, CL_SELF=64, Default=1, END=2]: KL[btSoftBody_fCollision__] EDK[_Kludge_EDK_btSoftBody_fCollision__] LIB[btSoftBody::fCollision::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBody_fCollision__;
const btSoftBody_fCollision__ btSoftBody_fCollision_RVSmask = 15;
const btSoftBody_fCollision__ btSoftBody_fCollision_SDF_RS = 1;
const btSoftBody_fCollision__ btSoftBody_fCollision_CL_RS = 2;
const btSoftBody_fCollision__ btSoftBody_fCollision_SVSmask = 48;
const btSoftBody_fCollision__ btSoftBody_fCollision_VF_SS = 16;
const btSoftBody_fCollision__ btSoftBody_fCollision_CL_SS = 32;
const btSoftBody_fCollision__ btSoftBody_fCollision_CL_SELF = 64;
const btSoftBody_fCollision__ btSoftBody_fCollision_Default = 1;
const btSoftBody_fCollision__ btSoftBody_fCollision_END = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBody_fCollision__() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_fMaterial] EDK[Fabric_EDK_KL_btSoftBody_fMaterial] LIB[btSoftBody::fMaterial *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///fMaterial
struct btSoftBody_fMaterial
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_fMaterial.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_fMaterial() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[DebugDraw=1, Default=1, END=2]: KL[btSoftBody_fMaterial__] EDK[_Kludge_EDK_btSoftBody_fMaterial__] LIB[btSoftBody::fMaterial::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBody_fMaterial__;
const btSoftBody_fMaterial__ btSoftBody_fMaterial_DebugDraw = 1;
const btSoftBody_fMaterial__ btSoftBody_fMaterial_Default = 1;
const btSoftBody_fMaterial__ btSoftBody_fMaterial_END = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBody_fMaterial__() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sRayCast] EDK[Fabric_EDK_KL_btSoftBody_sRayCast] LIB[btSoftBody::sRayCast *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_sRayCast
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_sRayCast.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_sRayCast() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_ImplicitFn
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_ImplicitFn.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_ImplicitFn() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[btSoftBody_tScalarArray] -> KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias btAlignedObjectArray_Float32 btSoftBody_tScalarArray;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Float32ConstPtr permits CxxbtAlignedObjectArray_Float32ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_Float32Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_Float32ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Float32Ptr : CxxbtAlignedObjectArray_Float32ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_Float32MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Float32ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_Float32Ptr
  protected btAlignedObjectArray_Float32 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_Float32ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Float32Ref : CxxbtAlignedObjectArray_Float32ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_Float32MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtSoftBody_tScalarArrayConstPtr] -> KL[CxxbtAlignedObjectArray_Float32ConstPtr] EDK[CxxbtAlignedObjectArray_Float32ConstPtr] LIB[btAlignedObjectArray< btScalar > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_Float32ConstPtr CxxbtSoftBody_tScalarArrayConstPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtSoftBody_tScalarArrayPtr] -> KL[CxxbtAlignedObjectArray_Float32Ptr] EDK[CxxbtAlignedObjectArray_Float32MutablePtr] LIB[btAlignedObjectArray< btScalar > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_Float32Ptr CxxbtSoftBody_tScalarArrayPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtSoftBody_tScalarArrayConstRef] -> KL[CxxbtAlignedObjectArray_Float32ConstRef] EDK[CxxbtAlignedObjectArray_Float32ConstRef] LIB[btAlignedObjectArray< btScalar > const &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_Float32ConstRef CxxbtSoftBody_tScalarArrayConstRef;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtSoftBody_tScalarArrayRef] -> KL[CxxbtAlignedObjectArray_Float32Ref] EDK[CxxbtAlignedObjectArray_Float32MutableRef] LIB[btAlignedObjectArray< btScalar > &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_Float32Ref CxxbtSoftBody_tScalarArrayRef;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[btSoftBody_tVector3Array] -> KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias btAlignedObjectArray_Vec3 btSoftBody_tVector3Array;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Vec3ConstPtr permits CxxbtAlignedObjectArray_Vec3ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_Vec3Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_Vec3ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Vec3Ptr : CxxbtAlignedObjectArray_Vec3ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_Vec3MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Vec3ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_Vec3Ptr
  protected btAlignedObjectArray_Vec3 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_Vec3ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_Vec3Ref : CxxbtAlignedObjectArray_Vec3ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_Vec3MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtSoftBody_tVector3ArrayConstPtr] -> KL[CxxbtAlignedObjectArray_Vec3ConstPtr] EDK[CxxbtAlignedObjectArray_Vec3ConstPtr] LIB[btAlignedObjectArray< btVector3 > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_Vec3ConstPtr CxxbtSoftBody_tVector3ArrayConstPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtSoftBody_tVector3ArrayPtr] -> KL[CxxbtAlignedObjectArray_Vec3Ptr] EDK[CxxbtAlignedObjectArray_Vec3MutablePtr] LIB[btAlignedObjectArray< btVector3 > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_Vec3Ptr CxxbtSoftBody_tVector3ArrayPtr;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtSoftBody_tVector3ArrayConstRef] -> KL[CxxbtAlignedObjectArray_Vec3ConstRef] EDK[CxxbtAlignedObjectArray_Vec3ConstRef] LIB[btAlignedObjectArray< btVector3 > const &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_Vec3ConstRef CxxbtSoftBody_tVector3ArrayConstRef;


//////////////////////////////////////////////////////////////////////////////
//
// Alias KL[CxxbtSoftBody_tVector3ArrayRef] -> KL[CxxbtAlignedObjectArray_Vec3Ref] EDK[CxxbtAlignedObjectArray_Vec3MutableRef] LIB[btAlignedObjectArray< btVector3 > &]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

alias CxxbtAlignedObjectArray_Vec3Ref CxxbtSoftBody_tVector3ArrayRef;


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sCti] EDK[Fabric_EDK_KL_btSoftBody_sCti] LIB[btSoftBody::sCti *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_sCti
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_sCti.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_sCti() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sMedium] EDK[Fabric_EDK_KL_btSoftBody_sMedium] LIB[btSoftBody::sMedium *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_sMedium
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_sMedium.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_sMedium() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Element] EDK[Fabric_EDK_KL_btSoftBody_Element] LIB[btSoftBody::Element *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Element
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Element.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Element() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Material] EDK[Fabric_EDK_KL_btSoftBody_Material] LIB[btSoftBody::Material *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Material
  : btSoftBody_Element
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Material() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Feature] EDK[Fabric_EDK_KL_btSoftBody_Feature] LIB[btSoftBody::Feature *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Feature
  : btSoftBody_Element
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Feature() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Node] EDK[Fabric_EDK_KL_btSoftBody_Node] LIB[btSoftBody::Node *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Node
  : btSoftBody_Feature
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Node() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Link] EDK[Fabric_EDK_KL_btSoftBody_Link] LIB[btSoftBody::Link *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Link
  : btSoftBody_Feature
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Link() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Face] EDK[Fabric_EDK_KL_btSoftBody_Face] LIB[btSoftBody::Face *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Face
  : btSoftBody_Feature
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Face() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Tetra] EDK[Fabric_EDK_KL_btSoftBody_Tetra] LIB[btSoftBody::Tetra *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Tetra
  : btSoftBody_Feature
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Tetra() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_RContact] EDK[Fabric_EDK_KL_btSoftBody_RContact] LIB[btSoftBody::RContact *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_RContact
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_RContact.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_RContact() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_SContact] EDK[Fabric_EDK_KL_btSoftBody_SContact] LIB[btSoftBody::SContact *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_SContact
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_SContact.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_SContact() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Anchor] EDK[Fabric_EDK_KL_btSoftBody_Anchor] LIB[btSoftBody::Anchor *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Anchor
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Anchor.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Anchor() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Note] EDK[Fabric_EDK_KL_btSoftBody_Note] LIB[btSoftBody::Note *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Note
  : btSoftBody_Element
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Note() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Pose] EDK[Fabric_EDK_KL_btSoftBody_Pose] LIB[btSoftBody::Pose *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Pose
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Pose.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Pose() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Cluster] EDK[Fabric_EDK_KL_btSoftBody_Cluster] LIB[btSoftBody::Cluster *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Cluster
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Cluster.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Cluster() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Impulse] EDK[Fabric_EDK_KL_btSoftBody_Impulse] LIB[btSoftBody::Impulse *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Impulse
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Impulse.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Impulse() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Body
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Body.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Body() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Joint
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Joint.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Joint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint_eType] EDK[Fabric_EDK_KL_btSoftBody_Joint_eType] LIB[btSoftBody::Joint::eType *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Joint_eType
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Joint_eType.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Joint_eType() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[Linear=0, Angular=1, Contact=2]: KL[btSoftBody_Joint_eType__] EDK[_Kludge_EDK_btSoftBody_Joint_eType__] LIB[btSoftBody::Joint::eType::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btSoftBody_Joint_eType__;
const btSoftBody_Joint_eType__ btSoftBody_Joint_eType_Linear = 0;
const btSoftBody_Joint_eType__ btSoftBody_Joint_eType_Angular = 1;
const btSoftBody_Joint_eType__ btSoftBody_Joint_eType_Contact = 2;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btSoftBody_Joint_eType__() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint_Specs] EDK[Fabric_EDK_KL_btSoftBody_Joint_Specs] LIB[btSoftBody::Joint::Specs *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Joint_Specs
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Joint_Specs.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Joint_Specs() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_LJoint
  : btSoftBody_Joint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_LJoint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_LJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_LJoint_Specs] LIB[btSoftBody::LJoint::Specs *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_LJoint_Specs
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_LJoint_Specs.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_LJoint_Specs() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_AJoint
  : btSoftBody_Joint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_AJoint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_AJoint_IControl
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_AJoint_IControl.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_AJoint_IControl() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_AJoint_Specs] LIB[btSoftBody::AJoint::Specs *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_AJoint_Specs
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_AJoint_Specs.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_AJoint_Specs() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_CJoint
  : btSoftBody_Joint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_CJoint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Config] EDK[Fabric_EDK_KL_btSoftBody_Config] LIB[btSoftBody::Config *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_Config
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_Config.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_Config() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_SolverState] EDK[Fabric_EDK_KL_btSoftBody_SolverState] LIB[btSoftBody::SolverState *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBody_SolverState
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_SolverState.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_SolverState() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_RayFromToCaster] EDK[Fabric_EDK_KL_btSoftBody_RayFromToCaster] LIB[btSoftBody::RayFromToCaster *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// RayFromToCaster takes a ray from, ray to (instead of direction!)
struct btSoftBody_RayFromToCaster
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBody_RayFromToCaster.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBody_RayFromToCaster() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btSoftRigidCollisionAlgorithm  provides collision detection between btSoftBody and btRigidBody
struct btSoftRigidCollisionAlgorithm
  : btCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftRigidCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc] LIB[btSoftRigidCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftRigidCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///collision detection between two btSoftBody shapes
struct btSoftSoftCollisionAlgorithm
  : btCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftSoftCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftSoftCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc] LIB[btSoftSoftCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftSoftCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btTriIndex
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btTriIndex.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btTriIndex() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///For each triangle in the concave mesh that overlaps with the AABB of a soft body (m_softBody), processTriangle is called.
struct btSoftBodyTriangleCallback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btSoftBodyTriangleCallback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBodyTriangleCallback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
/// btSoftBodyConcaveCollisionAlgorithm  supports collision between soft body shapes and (concave) trianges meshes.
struct btSoftBodyConcaveCollisionAlgorithm
  : btCollisionAlgorithm
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::CreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyConcaveCollisionAlgorithm_CreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc
  : btCollisionAlgorithmCreateFunc
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///btSoftBodyRigidBodyCollisionConfiguration add softbody interaction on top of btDefaultCollisionConfiguration
struct btSoftBodyRigidBodyCollisionConfiguration
  : btDefaultCollisionConfiguration
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftRigidDynamicsWorld
  : btDiscreteDynamicsWorld
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftRigidDynamicsWorld() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBody
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBody.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBody() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkDoubleData] EDK[Fabric_EDK_KL_btMultiBodyLinkDoubleData] LIB[btMultiBodyLinkDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyLinkDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBodyLinkDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyLinkDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkFloatData] EDK[Fabric_EDK_KL_btMultiBodyLinkFloatData] LIB[btMultiBodyLinkFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyLinkFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBodyLinkFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyLinkFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyDoubleData] EDK[Fabric_EDK_KL_btMultiBodyDoubleData] LIB[btMultiBodyDoubleData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btMultiBodyDoubleData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBodyDoubleData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyDoubleData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyFloatData] EDK[Fabric_EDK_KL_btMultiBodyFloatData] LIB[btMultiBodyFloatData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
struct btMultiBodyFloatData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBodyFloatData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyFloatData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJacobianData] EDK[Fabric_EDK_KL_btMultiBodyJacobianData] LIB[btMultiBodyJacobianData *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyJacobianData
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBodyJacobianData.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyJacobianData() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyConstraint
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBodyConstraint.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyConstraintSolver
  : btSequentialImpulseConstraintSolver
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyConstraintSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btMultiBodyDynamicsWorld adds Featherstone multi body dynamics to Bullet
///This implementation is still preliminary/experimental.
struct btMultiBodyDynamicsWorld
  : btDiscreteDynamicsWorld
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyDynamicsWorld() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyFixedConstraint
  : btMultiBodyConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyFixedConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointFeedback] EDK[Fabric_EDK_KL_btMultiBodyJointFeedback] LIB[btMultiBodyJointFeedback *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyJointFeedback
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBodyJointFeedback.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyJointFeedback() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyJointLimitConstraint
  : btMultiBodyConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyJointLimitConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyJointMotor
  : btMultiBodyConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyJointMotor() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_MULTIBODYLINKFLAGS_DISABLE_PARENT_COLLISION=1]: KL[btMultiBodyLinkFlags] EDK[_Kludge_EDK_btMultiBodyLinkFlags] LIB[btMultiBodyLinkFlags]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btMultiBodyLinkFlags;
const btMultiBodyLinkFlags BT_MULTIBODYLINKFLAGS_DISABLE_PARENT_COLLISION = 1;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btMultiBodyLinkFlags() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultibodyLink
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultibodyLink.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultibodyLink() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[eRevolute=0, ePrismatic=1, eSpherical=2, ePlanar=3, eFixed=4, eInvalid=5]: KL[btMultibodyLink_eFeatherstoneJointType] EDK[_Kludge_EDK_btMultibodyLink_eFeatherstoneJointType] LIB[btMultibodyLink::eFeatherstoneJointType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btMultibodyLink_eFeatherstoneJointType;
const btMultibodyLink_eFeatherstoneJointType btMultibodyLink_eRevolute = 0;
const btMultibodyLink_eFeatherstoneJointType btMultibodyLink_ePrismatic = 1;
const btMultibodyLink_eFeatherstoneJointType btMultibodyLink_eSpherical = 2;
const btMultibodyLink_eFeatherstoneJointType btMultibodyLink_ePlanar = 3;
const btMultibodyLink_eFeatherstoneJointType btMultibodyLink_eFixed = 4;
const btMultibodyLink_eFeatherstoneJointType btMultibodyLink_eInvalid = 5;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btMultibodyLink_eFeatherstoneJointType() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyLinkCollider
  : btCollisionObject
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyLinkCollider() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodyPoint2Point
  : btMultiBodyConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodyPoint2Point() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMultiBodySliderConstraint
  : btMultiBodyConstraint
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodySliderConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodySolverConstraint] EDK[Fabric_EDK_KL_btMultiBodySolverConstraint] LIB[btMultiBodySolverConstraint *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///1D constraint along a normal axis between bodyA and bodyB. It can be combined to solve contact and friction constraints.
struct btMultiBodySolverConstraint
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMultiBodySolverConstraint.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMultiBodySolverConstraint() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Enum[BT_SOLVER_CONTACT_1D=0, BT_SOLVER_FRICTION_1D=1]: KL[btMultiBodySolverConstraint_btSolverConstraintType] EDK[_Kludge_EDK_btMultiBodySolverConstraint_btSolverConstraintType] LIB[btMultiBodySolverConstraint::btSolverConstraintType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
alias Integer btMultiBodySolverConstraint_btSolverConstraintType;
const btMultiBodySolverConstraint_btSolverConstraintType btMultiBodySolverConstraint_BT_SOLVER_CONTACT_1D = 0;
const btMultiBodySolverConstraint_btSolverConstraintType btMultiBodySolverConstraint_BT_SOLVER_FRICTION_1D = 1;

/// \internal
inline UInt64 __CxxSize__Kludge_EDK_btMultiBodySolverConstraint_btSolverConstraintType() {
  return Integer().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btSoftMultiBodyDynamicsWorld
  : btMultiBodyDynamicsWorld
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMLCPSolverInterface] EDK[Fabric_EDK_KL_btMLCPSolverInterface] LIB[btMLCPSolverInterface *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMLCPSolverInterface
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btMLCPSolverInterface.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMLCPSolverInterface() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDantzigSolver] EDK[Fabric_EDK_KL_btDantzigSolver] LIB[btDantzigSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btDantzigSolver
  : btMLCPSolverInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btDantzigSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btLemkeAlgorithm
{
  protected Data cpp_ptr;
};

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean btLemkeAlgorithm.cxx_isValid() {
  return !!this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btLemkeAlgorithm() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btLemkeSolver] EDK[Fabric_EDK_KL_btLemkeSolver] LIB[btLemkeSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///The btLemkeSolver is based on "Fast Implementation of Lemkes Algorithm for Rigid Body Contact Simulation (John E. Lloyd) "
// 
///It is a slower but more accurate solver. Increase the m_maxLoops for better convergence, at the cost of more CPU time.
// 
///The original implementation of the btLemkeAlgorithm was done by Kilian Grundl from the MBSim team
struct btLemkeSolver
  : btMLCPSolverInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btLemkeSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
struct btMLCPSolver
  : btSequentialImpulseConstraintSolver
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btMLCPSolver() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolveProjectedGaussSeidel] EDK[Fabric_EDK_KL_btSolveProjectedGaussSeidel] LIB[btSolveProjectedGaussSeidel *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
///This solver is mainly for debug/learning purposes: it is functionally equivalent to the btSequentialImpulseConstraintSolver solver, but much slower (it builds the full LCP matrix)
struct btSolveProjectedGaussSeidel
  : btMLCPSolverInterface
  {};

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_btSolveProjectedGaussSeidel() {
  Data d;
  return d.dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtQuaternionConstPtr permits CxxbtQuaternionConstRef {
  protected Data ptr; // actual CxxbtQuaternionPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtQuaternionConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtQuaternionPtr : CxxbtQuaternionConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtQuaternionMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtQuaternionConstRef {
  protected Data ptr; // actual CxxbtQuaternionPtr
  protected btQuaternion values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtQuaternionConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtQuaternionRef : CxxbtQuaternionConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtQuaternionMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtVector3ConstPtr permits CxxbtVector3ConstRef {
  protected Data ptr; // actual CxxbtVector3Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtVector3ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtVector3Ptr : CxxbtVector3ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtVector3MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtVector3ConstRef {
  protected Data ptr; // actual CxxbtVector3Ptr
  protected btVector3 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtVector3ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtVector3Ref : CxxbtVector3ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtVector3MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtMatrix3x3ConstPtr permits CxxbtMatrix3x3ConstRef {
  protected Data ptr; // actual CxxbtMatrix3x3Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtMatrix3x3ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtMatrix3x3Ptr : CxxbtMatrix3x3ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtMatrix3x3MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtMatrix3x3ConstRef {
  protected Data ptr; // actual CxxbtMatrix3x3Ptr
  protected btMatrix3x3 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtMatrix3x3ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtMatrix3x3Ref : CxxbtMatrix3x3ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtMatrix3x3MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtTransformConstPtr permits CxxbtTransformConstRef {
  protected Data ptr; // actual CxxbtTransformPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtTransformConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtTransformPtr : CxxbtTransformConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtTransformMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtTransformConstRef {
  protected Data ptr; // actual CxxbtTransformPtr
  protected btTransform values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtTransformConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtTransformRef : CxxbtTransformConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtTransformMutableRef() {
  return Data().dataSize();
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_SInt32ConstPtr permits CxxbtAlignedObjectArray_SInt32ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_SInt32Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_SInt32ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_SInt32Ptr : CxxbtAlignedObjectArray_SInt32ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_SInt32MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_SInt32ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_SInt32Ptr
  protected btAlignedObjectArray_SInt32 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_SInt32ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_SInt32Ref : CxxbtAlignedObjectArray_SInt32ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_SInt32MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt16ConstPtr permits CxxbtAlignedObjectArray_UInt16ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_UInt16Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_UInt16ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt16Ptr : CxxbtAlignedObjectArray_UInt16ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_UInt16MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt16ConstRef {
  protected Data ptr; // actual CxxbtAlignedObjectArray_UInt16Ptr
  protected btAlignedObjectArray_UInt16 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_UInt16ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAlignedObjectArray_UInt16Ref : CxxbtAlignedObjectArray_UInt16ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAlignedObjectArray_UInt16MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtCollisionObjectConstPtr permits CxxbtCollisionObjectConstRef {
  protected Data ptr; // actual CxxbtCollisionObjectPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtCollisionObjectConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtCollisionObjectPtr : CxxbtCollisionObjectConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtCollisionObjectMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtCollisionObjectConstRef {
  protected Data ptr; // actual CxxbtCollisionObjectPtr
  protected btCollisionObject values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtCollisionObjectConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtCollisionObjectRef : CxxbtCollisionObjectConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtCollisionObjectMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxHullDescConstPtr permits CxxHullDescConstRef {
  protected Data ptr; // actual CxxHullDescPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxHullDescConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxHullDescPtr : CxxHullDescConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxHullDescMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxHullDescConstRef {
  protected Data ptr; // actual CxxHullDescPtr
  protected HullDesc values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxHullDescConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxHullDescRef : CxxHullDescConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxHullDescMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxHullResultConstPtr permits CxxHullResultConstRef {
  protected Data ptr; // actual CxxHullResultPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxHullResultConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxHullResultPtr : CxxHullResultConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxHullResultMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxHullResultConstRef {
  protected Data ptr; // actual CxxHullResultPtr
  protected HullResult values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxHullResultConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxHullResultRef : CxxHullResultConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxHullResultMutableRef() {
  return Data().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtConvexPolyhedronConstPtr permits CxxbtConvexPolyhedronConstRef {
  protected Data ptr; // actual CxxbtConvexPolyhedronPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtConvexPolyhedronConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtConvexPolyhedronPtr : CxxbtConvexPolyhedronConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtConvexPolyhedronMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtConvexPolyhedronConstRef {
  protected Data ptr; // actual CxxbtConvexPolyhedronPtr
  protected btConvexPolyhedron values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtConvexPolyhedronConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtConvexPolyhedronRef : CxxbtConvexPolyhedronConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtConvexPolyhedronMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtVector4ConstPtr permits CxxbtVector4ConstRef {
  protected Data ptr; // actual CxxbtVector4Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtVector4ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtVector4Ptr : CxxbtVector4ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtVector4MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtVector4ConstRef {
  protected Data ptr; // actual CxxbtVector4Ptr
  protected btVector4 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtVector4ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtVector4Ref : CxxbtVector4ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtVector4MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[PHY_ScalarType] EDK[_Kludge_EDK_PHY_ScalarType] LIB[PHY_ScalarType]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxPHY_ScalarTypeConstPtr permits CxxPHY_ScalarTypeConstRef {
  protected Data ptr; // actual CxxPHY_ScalarTypePtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxPHY_ScalarTypeConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxPHY_ScalarTypePtr : CxxPHY_ScalarTypeConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxPHY_ScalarTypeMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxPHY_ScalarTypeConstRef {
  protected Data ptr; // actual CxxPHY_ScalarTypePtr
  protected PHY_ScalarType values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxPHY_ScalarTypeConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxPHY_ScalarTypeRef : CxxPHY_ScalarTypeConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxPHY_ScalarTypeMutableRef() {
  return Data().dataSize();
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtDispatcherInfoConstPtr permits CxxbtDispatcherInfoConstRef {
  protected Data ptr; // actual CxxbtDispatcherInfoPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtDispatcherInfoConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtDispatcherInfoPtr : CxxbtDispatcherInfoConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtDispatcherInfoMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtDispatcherInfoConstRef {
  protected Data ptr; // actual CxxbtDispatcherInfoPtr
  protected btDispatcherInfo values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtDispatcherInfoConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtDispatcherInfoRef : CxxbtDispatcherInfoConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtDispatcherInfoMutableRef() {
  return Data().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtAABBConstPtr permits CxxbtAABBConstRef {
  protected Data ptr; // actual CxxbtAABBPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAABBConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAABBPtr : CxxbtAABBConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAABBMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAABBConstRef {
  protected Data ptr; // actual CxxbtAABBPtr
  protected btAABB values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAABBConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtAABBRef : CxxbtAABBConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtAABBMutableRef() {
  return Data().dataSize();
}





















//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr permits CxxbtRigidBody_btRigidBodyConstructionInfoConstRef {
  protected Data ptr; // actual CxxbtRigidBody_btRigidBodyConstructionInfoPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtRigidBody_btRigidBodyConstructionInfoPtr : CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtRigidBody_btRigidBodyConstructionInfoMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtRigidBody_btRigidBodyConstructionInfoConstRef {
  protected Data ptr; // actual CxxbtRigidBody_btRigidBodyConstructionInfoPtr
  protected btRigidBody_btRigidBodyConstructionInfo values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtRigidBody_btRigidBodyConstructionInfoConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtRigidBody_btRigidBodyConstructionInfoRef : CxxbtRigidBody_btRigidBodyConstructionInfoConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtRigidBody_btRigidBodyConstructionInfoMutableRef() {
  return Data().dataSize();
}





//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstPtr permits CxxbtWheelInfoConstRef {
  protected Data ptr; // actual CxxbtWheelInfoPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfoConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoPtr : CxxbtWheelInfoConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfoMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstRef {
  protected Data ptr; // actual CxxbtWheelInfoPtr
  protected btWheelInfo values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfoConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoRef : CxxbtWheelInfoConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfoMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstructionInfoConstPtr permits CxxbtWheelInfoConstructionInfoConstRef {
  protected Data ptr; // actual CxxbtWheelInfoConstructionInfoPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfoConstructionInfoConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstructionInfoPtr : CxxbtWheelInfoConstructionInfoConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfoConstructionInfoMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstructionInfoConstRef {
  protected Data ptr; // actual CxxbtWheelInfoConstructionInfoPtr
  protected btWheelInfoConstructionInfo values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfoConstructionInfoConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfoConstructionInfoRef : CxxbtWheelInfoConstructionInfoConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfoConstructionInfoMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfo_RaycastInfoConstPtr permits CxxbtWheelInfo_RaycastInfoConstRef {
  protected Data ptr; // actual CxxbtWheelInfo_RaycastInfoPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfo_RaycastInfoConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfo_RaycastInfoPtr : CxxbtWheelInfo_RaycastInfoConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfo_RaycastInfoMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfo_RaycastInfoConstRef {
  protected Data ptr; // actual CxxbtWheelInfo_RaycastInfoPtr
  protected btWheelInfo_RaycastInfo values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfo_RaycastInfoConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtWheelInfo_RaycastInfoRef : CxxbtWheelInfo_RaycastInfoConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtWheelInfo_RaycastInfoMutableRef() {
  return Data().dataSize();
}









//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBodyConstPtr permits CxxbtSoftBodyConstRef {
  protected Data ptr; // actual CxxbtSoftBodyPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtSoftBodyConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBodyPtr : CxxbtSoftBodyConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtSoftBodyMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBodyConstRef {
  protected Data ptr; // actual CxxbtSoftBodyPtr
  protected btSoftBody values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtSoftBodyConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBodyRef : CxxbtSoftBodyConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtSoftBodyMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btSoftBody_eFeature__] EDK[_Kludge_EDK_btSoftBody_eFeature__] LIB[btSoftBody::eFeature::_]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBody_eFeature__ConstPtr permits CxxbtSoftBody_eFeature__ConstRef {
  protected Data ptr; // actual CxxbtSoftBody_eFeature__Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtSoftBody_eFeature__ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBody_eFeature__Ptr : CxxbtSoftBody_eFeature__ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtSoftBody_eFeature__MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBody_eFeature__ConstRef {
  protected Data ptr; // actual CxxbtSoftBody_eFeature__Ptr
  protected btSoftBody_eFeature__ values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtSoftBody_eFeature__ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxbtSoftBody_eFeature__Ref : CxxbtSoftBody_eFeature__ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxbtSoftBody_eFeature__MutableRef() {
  return Data().dataSize();
}









//////////////////////////////////////////////////////////////////////////////
//
// Implementations
//
//////////////////////////////////////////////////////////////////////////////






//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVector3(
    btVector3 that
    ) = "Bullet2__btVector3__MU__copy_ctor__1a8b1bbd5087d2198c75f225c2e529af";

/// \dfgPresetOmit
/// \internal
btVector3.__ctor(
    ) = "Bullet2__btVector3__MU__ctor__ad8722f1388e4acc14528d24692448c9";

/**@brief No initialization constructor */
/// \dfgPresetOmit
btVector3(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3.__ctor(
    CxxFloat32ConstRef _x,
    CxxFloat32ConstRef _y,
    CxxFloat32ConstRef _z
    ) = "Bullet2__btVector3__MU__ctor__acc13c42c5b8728f78d5ad662025544a";

/**@brief Constructor from scalars 

   * @param x X value

   * @param y Y value 

   * @param z Z value 

   */
/// \dfgPresetOmit
btVector3(
    CxxFloat32ConstRef _x,
    CxxFloat32ConstRef _y,
    CxxFloat32ConstRef _z
    ) {
    this.__ctor(
        _x,
        _y,
        _z
        );
}

/**@brief Constructor from scalars 

   * @param x X value

   * @param y Y value 

   * @param z Z value 

   */
btVector3(
    in
    Float32
    _x
    
    ,
    in
    Float32
    _y
    
    ,
    in
    Float32
    _z
    
    
    ) {
    
    CxxFloat32ConstRef _x__cxx = Make_CxxFloat32ConstRef(_x);
    
    CxxFloat32ConstRef _y__cxx = Make_CxxFloat32ConstRef(_y);
    
    CxxFloat32ConstRef _z__cxx = Make_CxxFloat32ConstRef(_z);
    this.__ctor(
        _x__cxx,
        _y__cxx,
        _z__cxx
        );
    
    
    
}

~btVector3() = "Bullet2__btVector3__MU__dtor__d07ed5b62b7e2a7148eac42a7d680f16";

//////////////////////////////////////////////////////////////////////////////
// KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
btVector3.cxx_getX?(
    )
 = "Bullet2__btVector3__CO__meth_getX__3566d007bdf621063ca56b8c648dacfe";

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
btVector3.cxx_getY?(
    )
 = "Bullet2__btVector3__CO__meth_getY__a8720519353182a11fc2b584690c6f16";

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
btVector3.cxx_getZ?(
    )
 = "Bullet2__btVector3__CO__meth_getZ__9b70bc3bdb4c22d614e64a6ad249a579";

/**@brief Return the y value */
Float32
btVector3.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the x value */
Float32
btVector3.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the z value */
Float32
btVector3.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btVector3.=(
    btVector3 that
    ) = "Bullet2__btVector3__MU__simple_ass_op__b42574722291c35a5442eb56577e1da3";



/// \dfgPresetOmit
/// \internal
btVector3.appendDesc(io String string) {
  string += "btVector3:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVector4(
    btVector4 that
    ) = "Bullet2__btVector4__MU__copy_ctor__9785c6516667b8fdac4a531b0642d1fe";

/// \dfgPresetOmit
/// \internal
btVector4.__ctor(
    ) = "Bullet2__btVector4__MU__ctor__d9ec0f730c3bd8018d4dfd40e219514f";

/// \dfgPresetOmit
btVector4(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btVector4.__ctor(
    CxxFloat32ConstRef _x,
    CxxFloat32ConstRef _y,
    CxxFloat32ConstRef _z,
    CxxFloat32ConstRef _w
    ) = "Bullet2__btVector4__MU__ctor__1e77b0ed7ab9f8e9729a3f931397d07c";

/// \dfgPresetOmit
btVector4(
    CxxFloat32ConstRef _x,
    CxxFloat32ConstRef _y,
    CxxFloat32ConstRef _z,
    CxxFloat32ConstRef _w
    ) {
    this.__ctor(
        _x,
        _y,
        _z,
        _w
        );
}

btVector4(
    in
    Float32
    _x
    
    ,
    in
    Float32
    _y
    
    ,
    in
    Float32
    _z
    
    ,
    in
    Float32
    _w
    
    
    ) {
    
    CxxFloat32ConstRef _x__cxx = Make_CxxFloat32ConstRef(_x);
    
    CxxFloat32ConstRef _y__cxx = Make_CxxFloat32ConstRef(_y);
    
    CxxFloat32ConstRef _z__cxx = Make_CxxFloat32ConstRef(_z);
    
    CxxFloat32ConstRef _w__cxx = Make_CxxFloat32ConstRef(_w);
    this.__ctor(
        _x__cxx,
        _y__cxx,
        _z__cxx,
        _w__cxx
        );
    
    
    
    
}

~btVector4() = "Bullet2__btVector4__MU__dtor__01dd676be59812723f54190bc1b00a18";

//////////////////////////////////////////////////////////////////////////////
// KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btVector4.cxx_getW?(
    )
 = "Bullet2__btVector4__CO__meth_getW__65713f1caed3d51a2bd2536c612b95e3";

Float32
btVector4.getW?(
    )
{   
    Float32 __res = 
    this.cxx_getW(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btVector4.=(
    btVector4 that
    ) = "Bullet2__btVector4__MU__simple_ass_op__fc6065bae770de5d2c115c92f97dd975";



/// \dfgPresetOmit
/// \internal
btVector4.appendDesc(io String string) {
  string += "btVector4:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btMatrix3x3(
    btMatrix3x3 that
    ) = "Bullet2__btMatrix3x3__MU__copy_ctor__84bf8066cb596103cbd46c62af510ff0";

/// \dfgPresetOmit
/// \internal
btMatrix3x3.__ctor(
    ) = "Bullet2__btMatrix3x3__MU__ctor__c3d616f9006edb7a9c04c1befc1135a1";

/** @brief No initializaion constructor */
/// \dfgPresetOmit
btMatrix3x3(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btMatrix3x3.__ctor(
    CxxbtQuaternionConstRef q
    ) = "Bullet2__btMatrix3x3__MU__ctor__cfead38e10dd45a10033821bf3053e00";

/**@brief Constructor from Quaternion */
/// \dfgPresetOmit
btMatrix3x3(
    CxxbtQuaternionConstRef q
    ) {
    this.__ctor(
        q
        );
}

/// \dfgPresetOmit
/// \internal
btMatrix3x3.__ctor(
    CxxFloat32ConstRef xx,
    CxxFloat32ConstRef xy,
    CxxFloat32ConstRef xz,
    CxxFloat32ConstRef yx,
    CxxFloat32ConstRef yy,
    CxxFloat32ConstRef yz,
    CxxFloat32ConstRef zx,
    CxxFloat32ConstRef zy,
    CxxFloat32ConstRef zz
    ) = "Bullet2__btMatrix3x3__MU__ctor__f3db9b1958e2ee2ccc9a386bb4a7473e";

/// \dfgPresetOmit
btMatrix3x3(
    CxxFloat32ConstRef xx,
    CxxFloat32ConstRef xy,
    CxxFloat32ConstRef xz,
    CxxFloat32ConstRef yx,
    CxxFloat32ConstRef yy,
    CxxFloat32ConstRef yz,
    CxxFloat32ConstRef zx,
    CxxFloat32ConstRef zy,
    CxxFloat32ConstRef zz
    ) {
    this.__ctor(
        xx,
        xy,
        xz,
        yx,
        yy,
        yz,
        zx,
        zy,
        zz
        );
}

/**@brief Constructor from Quaternion */
btMatrix3x3(
    in
    btQuaternion
    q
    
    
    ) {
    
    CxxbtQuaternionConstRef q__cxx = Make_CxxbtQuaternionConstRef(q);
    this.__ctor(
        q__cxx
        );
    
}

btMatrix3x3(
    in
    Float32
    xx
    
    ,
    in
    Float32
    xy
    
    ,
    in
    Float32
    xz
    
    ,
    in
    Float32
    yx
    
    ,
    in
    Float32
    yy
    
    ,
    in
    Float32
    yz
    
    ,
    in
    Float32
    zx
    
    ,
    in
    Float32
    zy
    
    ,
    in
    Float32
    zz
    
    
    ) {
    
    CxxFloat32ConstRef xx__cxx = Make_CxxFloat32ConstRef(xx);
    
    CxxFloat32ConstRef xy__cxx = Make_CxxFloat32ConstRef(xy);
    
    CxxFloat32ConstRef xz__cxx = Make_CxxFloat32ConstRef(xz);
    
    CxxFloat32ConstRef yx__cxx = Make_CxxFloat32ConstRef(yx);
    
    CxxFloat32ConstRef yy__cxx = Make_CxxFloat32ConstRef(yy);
    
    CxxFloat32ConstRef yz__cxx = Make_CxxFloat32ConstRef(yz);
    
    CxxFloat32ConstRef zx__cxx = Make_CxxFloat32ConstRef(zx);
    
    CxxFloat32ConstRef zy__cxx = Make_CxxFloat32ConstRef(zy);
    
    CxxFloat32ConstRef zz__cxx = Make_CxxFloat32ConstRef(zz);
    this.__ctor(
        xx__cxx,
        xy__cxx,
        xz__cxx,
        yx__cxx,
        yy__cxx,
        yz__cxx,
        zx__cxx,
        zy__cxx,
        zz__cxx
        );
    
    
    
    
    
    
    
    
    
}

~btMatrix3x3() = "Bullet2__btMatrix3x3__MU__dtor__67593e9bfd6535f802bc202aac6b321e";

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Methods
//////////////////////////////////////////////////////////////////////////////

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMatrix3x3.cxx_getRow?(
    SInt32 i
    )
 = "Bullet2__btMatrix3x3__CO__meth_getRow__1b506ef927cf4a5816e167ef8806b60b";

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
btVector3
btMatrix3x3.getRow?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getRow(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMatrix3x3.=(
    btMatrix3x3 that
    ) = "Bullet2__btMatrix3x3__MU__simple_ass_op__408a8df06f998d92577b7831b0940e01";



/// \dfgPresetOmit
/// \internal
btMatrix3x3.appendDesc(io String string) {
  string += "btMatrix3x3:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVectorXf(
    btVectorXf that
    ) = "Bullet2__btVectorXf__MU__copy_ctor__484b529940a5ab0c5fdf85c570673ed2";

/// \dfgPresetOmit
/// \internal
btVectorXf.__ctor(
    ) = "Bullet2__btVectorXf__MU__ctor__4f2c1d4590b23c1301de7bb8fbea9dac";

/// \dfgPresetOmit
btVectorXf(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btVectorXf.__ctor(
    SInt32 _arg0
    ) = "Bullet2__btVectorXf__MU__ctor__bd86b9b2347a81d410db6b7c92044868";

/// \dfgPresetOmit
btVectorXf(
    SInt32 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

~btVectorXf() = "Bullet2__btVectorXf__MU__dtor__e539d5d975e1b41eb4d680e16ff0519d";

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btVectorXf.cxx_resize!(
    SInt32 _arg0
    )
 = "Bullet2__btVectorXf__MU__meth_resize__40f8c30c72e59deebe2a23b2e153b6e0";

/// \dfgPresetOmit
/// \internal
SInt32
btVectorXf.cxx_cols?(
    )
 = "Bullet2__btVectorXf__CO__meth_cols__950aa2c174b775648ff14c29a4e0157a";

/// \dfgPresetOmit
/// \internal
SInt32
btVectorXf.cxx_rows?(
    )
 = "Bullet2__btVectorXf__CO__meth_rows__6e67dd3ca60a6722e6d5e1e3396bbbd2";

/// \dfgPresetOmit
/// \internal
SInt32
btVectorXf.cxx_size?(
    )
 = "Bullet2__btVectorXf__CO__meth_size__0ff29d84c355b012b326e5d2579be44b";

/// \dfgPresetOmit
/// \internal
Float32
btVectorXf.cxx_nrm2?(
    )
 = "Bullet2__btVectorXf__CO__meth_nrm2__94b0500820916fb5a218c344b30aaf3a";

/// \dfgPresetOmit
/// \internal

btVectorXf.cxx_setZero!(
    )
 = "Bullet2__btVectorXf__MU__meth_setZero__bcbd9de38578ea67690f64080440fc30";

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr
btVectorXf.cxx_getBufferPointerWritable!(
    )
 = "Bullet2__btVectorXf__MU__meth_getBufferPointerWritable__0f9e2b76710a979565baf18e9f79b9cb";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr
btVectorXf.cxx_getBufferPointer?(
    )
 = "Bullet2__btVectorXf__CO__meth_getBufferPointer__31033d545b6ebe17b15590aeff087d93";

SInt32
btVectorXf.cols?(
    )
{   
    SInt32 __res = 
    this.cxx_cols(
        );
    
    return __res;
}


btVectorXf.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

Float32
btVectorXf.getBufferPointerWritable!(
    )
{   
    CxxFloat32Ptr __res_cxx = 
    this.cxx_getBufferPointerWritable(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32Ptr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btVectorXf.setZero!(
    )
{   
    
    this.cxx_setZero(
        );
    
    
}

Float32
btVectorXf.nrm2?(
    )
{   
    Float32 __res = 
    this.cxx_nrm2(
        );
    
    return __res;
}

SInt32
btVectorXf.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

Float32
btVectorXf.getBufferPointer?(
    )
{   
    CxxFloat32ConstPtr __res_cxx = 
    this.cxx_getBufferPointer(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32ConstPtr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

SInt32
btVectorXf.rows?(
    )
{   
    SInt32 __res = 
    this.cxx_rows(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btVectorXf.=(
    btVectorXf that
    ) = "Bullet2__btVectorXf__MU__simple_ass_op__4e433bbe52375fe68859ad32bd9557a0";

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
Float32
btVectorXf.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__btVectorXf__CO__get_ind_op__8a1aa0d39f6db16130ebefbe3b3bd491";

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXf] EDK[Fabric_EDK_KL_btVectorXf] LIB[btVectorX< float >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVectorXf.cxx_setAtIndex!(
    UInt64 index,
    Float32 value
    )
  = "Bullet2__btVectorXf__MU__set_ind_op__e53c6dc89e4f3f0740aea13d40ee0594";



/// \dfgPresetOmit
/// \internal
btVectorXf.appendDesc(io String string) {
  string += "btVectorXf:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btMatrixXf(
    btMatrixXf that
    ) = "Bullet2__btMatrixXf__MU__copy_ctor__73884fcc7ad2b62865b671f14641ac08";

/// \dfgPresetOmit
/// \internal
btMatrixXf.__ctor(
    ) = "Bullet2__btMatrixXf__MU__ctor__2f9c05743eb5e93f9c5c0bf7132b4f40";

/// \dfgPresetOmit
btMatrixXf(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btMatrixXf.__ctor(
    SInt32 _arg0,
    SInt32 _arg1
    ) = "Bullet2__btMatrixXf__MU__ctor__70b8234b041e5e2b097f28ea9564bbf7";

/// \dfgPresetOmit
btMatrixXf(
    SInt32 _arg0,
    SInt32 _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

~btMatrixXf() = "Bullet2__btMatrixXf__MU__dtor__c21695054e554ea0927e103a3df8351d";

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_resize!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btMatrixXf__MU__meth_resize__0883906e739db5e788476db97b80aefc";

/// \dfgPresetOmit
/// \internal
SInt32
btMatrixXf.cxx_cols?(
    )
 = "Bullet2__btMatrixXf__CO__meth_cols__31bfe2532093b8c3e28ac704b24def26";

/// \dfgPresetOmit
/// \internal
SInt32
btMatrixXf.cxx_rows?(
    )
 = "Bullet2__btMatrixXf__CO__meth_rows__10ec35d7d770d8e8457857899b966bbf";

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_addElem!(
    SInt32 _arg0,
    SInt32 _arg1,
    Float32 _arg2
    )
 = "Bullet2__btMatrixXf__MU__meth_addElem__f129b5c11eba491df6ac725913b6bae1";

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_setElem!(
    SInt32 _arg0,
    SInt32 _arg1,
    Float32 _arg2
    )
 = "Bullet2__btMatrixXf__MU__meth_setElem__0fd7fbefe388a974ec91360c59eac01e";

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_mulElem!(
    SInt32 _arg0,
    SInt32 _arg1,
    Float32 _arg2
    )
 = "Bullet2__btMatrixXf__MU__meth_mulElem__8820d0f4e1eac7d12d6331fbbba75b1d";

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_copyLowerToUpperTriangle!(
    )
 = "Bullet2__btMatrixXf__MU__meth_copyLowerToUpperTriangle__7b5601007f20f3827bda1dbce53a2659";

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_setZero!(
    )
 = "Bullet2__btMatrixXf__MU__meth_setZero__21e7fb398895b441338e4292637043cb";

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_setIdentity!(
    )
 = "Bullet2__btMatrixXf__MU__meth_setIdentity__79c814e64e90528fa02c72d69cb7ad37";

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_printMatrix!(
    CxxCharConstPtr _arg0
    )
 = "Bullet2__btMatrixXf__MU__meth_printMatrix__fb25148a0157ed4d5b7c9abfdecdc087";

/// \dfgPresetOmit
/// \internal

btMatrixXf.cxx_rowComputeNonZeroElements?(
    )
 = "Bullet2__btMatrixXf__CO__meth_rowComputeNonZeroElements__12db1488010e71240a3ce3ba7a84d2c2";

/// \dfgPresetOmit
/// \internal
btMatrixXf
btMatrixXf.cxx_transpose?(
    )
 = "Bullet2__btMatrixXf__CO__meth_transpose__a3eb655c731f8eb17a7f398f1035e1d3";

/// \dfgPresetOmit
/// \internal
btMatrixXf
btMatrixXf.cxx_negative!(
    )
 = "Bullet2__btMatrixXf__MU__meth_negative__1af5516969a0b623d35ffa653234b6cf";

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr
btMatrixXf.cxx_getBufferPointerWritable!(
    )
 = "Bullet2__btMatrixXf__MU__meth_getBufferPointerWritable__672184cd0d910e77359cccb71bd827c0";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr
btMatrixXf.cxx_getBufferPointer?(
    )
 = "Bullet2__btMatrixXf__CO__meth_getBufferPointer__ff4f42b9603412c182dd5e441b47d85a";


btMatrixXf.mulElem!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    Float32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_mulElem(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


btMatrixXf.setIdentity!(
    )
{   
    
    this.cxx_setIdentity(
        );
    
    
}

Float32
btMatrixXf.getBufferPointer?(
    )
{   
    CxxFloat32ConstPtr __res_cxx = 
    this.cxx_getBufferPointer(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32ConstPtr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

SInt32
btMatrixXf.cols?(
    )
{   
    SInt32 __res = 
    this.cxx_cols(
        );
    
    return __res;
}


btMatrixXf.copyLowerToUpperTriangle!(
    )
{   
    
    this.cxx_copyLowerToUpperTriangle(
        );
    
    
}

btMatrixXf
btMatrixXf.transpose?(
    )
{   
    btMatrixXf __res = 
    this.cxx_transpose(
        );
    
    return __res;
}


btMatrixXf.printMatrix!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_printMatrix(
        _arg0__cxx
        );
    
    
    
}


btMatrixXf.addElem!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    Float32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_addElem(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

Float32
btMatrixXf.getBufferPointerWritable!(
    )
{   
    CxxFloat32Ptr __res_cxx = 
    this.cxx_getBufferPointerWritable(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32Ptr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btMatrixXf.resize!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_resize(
        _arg0,
        _arg1
        );
    
    
    
    
}

btMatrixXf
btMatrixXf.negative!(
    )
{   
    btMatrixXf __res = 
    this.cxx_negative(
        );
    
    return __res;
}


btMatrixXf.rowComputeNonZeroElements?(
    )
{   
    
    this.cxx_rowComputeNonZeroElements(
        );
    
    
}

SInt32
btMatrixXf.rows?(
    )
{   
    SInt32 __res = 
    this.cxx_rows(
        );
    
    return __res;
}


btMatrixXf.setZero!(
    )
{   
    
    this.cxx_setZero(
        );
    
    
}


btMatrixXf.setElem!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    Float32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_setElem(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXf] EDK[Fabric_EDK_KL_btMatrixXf] LIB[btMatrixX< float >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMatrixXf.=(
    btMatrixXf that
    ) = "Bullet2__btMatrixXf__MU__simple_ass_op__56c96c5eafa03c9e6871c0203a5b5738";



/// \dfgPresetOmit
/// \internal
btMatrixXf.appendDesc(io String string) {
  string += "btMatrixXf:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVectorXd(
    btVectorXd that
    ) = "Bullet2__btVectorXd__MU__copy_ctor__49657e75fd559d244d0eb241e429bee8";

/// \dfgPresetOmit
/// \internal
btVectorXd.__ctor(
    ) = "Bullet2__btVectorXd__MU__ctor__908958c22719795bb62f8ec941417906";

/// \dfgPresetOmit
btVectorXd(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btVectorXd.__ctor(
    SInt32 _arg0
    ) = "Bullet2__btVectorXd__MU__ctor__e3133325c6b7d8b5e3712eece3adc5fe";

/// \dfgPresetOmit
btVectorXd(
    SInt32 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

~btVectorXd() = "Bullet2__btVectorXd__MU__dtor__518082b06f419ad101cf01d5b6527abc";

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btVectorXd.cxx_resize!(
    SInt32 _arg0
    )
 = "Bullet2__btVectorXd__MU__meth_resize__c1ff36bb39e30dcf0b2306dd69c278dd";

/// \dfgPresetOmit
/// \internal
SInt32
btVectorXd.cxx_cols?(
    )
 = "Bullet2__btVectorXd__CO__meth_cols__42c7761619537f6fd2f87ba1a5f973b2";

/// \dfgPresetOmit
/// \internal
SInt32
btVectorXd.cxx_rows?(
    )
 = "Bullet2__btVectorXd__CO__meth_rows__807cafe727e3db36b3674fe09110de16";

/// \dfgPresetOmit
/// \internal
SInt32
btVectorXd.cxx_size?(
    )
 = "Bullet2__btVectorXd__CO__meth_size__8c693d6b37c6106fdb6626bc26dae916";

/// \dfgPresetOmit
/// \internal
Float64
btVectorXd.cxx_nrm2?(
    )
 = "Bullet2__btVectorXd__CO__meth_nrm2__047918ea90f2901872be7c93f0310c2f";

/// \dfgPresetOmit
/// \internal

btVectorXd.cxx_setZero!(
    )
 = "Bullet2__btVectorXd__MU__meth_setZero__12acf47579de6065bcc0af5074e9c447";

/// \dfgPresetOmit
/// \internal
CxxFloat64Ptr
btVectorXd.cxx_getBufferPointerWritable!(
    )
 = "Bullet2__btVectorXd__MU__meth_getBufferPointerWritable__5952aade5b63d91f867c09749af05327";

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtr
btVectorXd.cxx_getBufferPointer?(
    )
 = "Bullet2__btVectorXd__CO__meth_getBufferPointer__1f412735638a22dddbdd3746698dd653";

SInt32
btVectorXd.rows?(
    )
{   
    SInt32 __res = 
    this.cxx_rows(
        );
    
    return __res;
}


btVectorXd.setZero!(
    )
{   
    
    this.cxx_setZero(
        );
    
    
}

Float64
btVectorXd.nrm2?(
    )
{   
    Float64 __res = 
    this.cxx_nrm2(
        );
    
    return __res;
}

SInt32
btVectorXd.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}


btVectorXd.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

Float64
btVectorXd.getBufferPointer?(
    )
{   
    CxxFloat64ConstPtr __res_cxx = 
    this.cxx_getBufferPointer(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat64ConstPtr';
    Float64 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

Float64
btVectorXd.getBufferPointerWritable!(
    )
{   
    CxxFloat64Ptr __res_cxx = 
    this.cxx_getBufferPointerWritable(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat64Ptr';
    Float64 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

SInt32
btVectorXd.cols?(
    )
{   
    SInt32 __res = 
    this.cxx_cols(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btVectorXd.=(
    btVectorXd that
    ) = "Bullet2__btVectorXd__MU__simple_ass_op__bd60c25eb9aaee6a0f666b94ddf84104";

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
Float64
btVectorXd.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__btVectorXd__CO__get_ind_op__9c815e4c32ae21d3109b59888eedcb42";

//////////////////////////////////////////////////////////////////////////////
// KL[btVectorXd] EDK[Fabric_EDK_KL_btVectorXd] LIB[btVectorX< double >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVectorXd.cxx_setAtIndex!(
    UInt64 index,
    Float64 value
    )
  = "Bullet2__btVectorXd__MU__set_ind_op__537341b8d4fb7b49efd1add197ff2778";



/// \dfgPresetOmit
/// \internal
btVectorXd.appendDesc(io String string) {
  string += "btVectorXd:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btMatrixXd(
    btMatrixXd that
    ) = "Bullet2__btMatrixXd__MU__copy_ctor__5cda21eeb30bec81ccce608a2af22b14";

/// \dfgPresetOmit
/// \internal
btMatrixXd.__ctor(
    ) = "Bullet2__btMatrixXd__MU__ctor__e9960df9da9eab72932971a83902e3e1";

/// \dfgPresetOmit
btMatrixXd(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btMatrixXd.__ctor(
    SInt32 _arg0,
    SInt32 _arg1
    ) = "Bullet2__btMatrixXd__MU__ctor__4e8f0318aa6f5ddafed2f4f628ee6219";

/// \dfgPresetOmit
btMatrixXd(
    SInt32 _arg0,
    SInt32 _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

~btMatrixXd() = "Bullet2__btMatrixXd__MU__dtor__1c8de40291d77ddb3e25e9272d3d7db2";

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_resize!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btMatrixXd__MU__meth_resize__b65acd7626e0484503962ec8fa64f3bd";

/// \dfgPresetOmit
/// \internal
SInt32
btMatrixXd.cxx_cols?(
    )
 = "Bullet2__btMatrixXd__CO__meth_cols__aa5a4f9346f674f515f914fb1290ee20";

/// \dfgPresetOmit
/// \internal
SInt32
btMatrixXd.cxx_rows?(
    )
 = "Bullet2__btMatrixXd__CO__meth_rows__4171067d552a751d3a1216d037416de7";

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_addElem!(
    SInt32 _arg0,
    SInt32 _arg1,
    Float64 _arg2
    )
 = "Bullet2__btMatrixXd__MU__meth_addElem__659ef27c7c9c9da64c21171fa9092dfb";

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_setElem!(
    SInt32 _arg0,
    SInt32 _arg1,
    Float64 _arg2
    )
 = "Bullet2__btMatrixXd__MU__meth_setElem__75e3b4888ca4a945669feecb16847986";

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_mulElem!(
    SInt32 _arg0,
    SInt32 _arg1,
    Float64 _arg2
    )
 = "Bullet2__btMatrixXd__MU__meth_mulElem__f375d5651133d000e43c6cb583082768";

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_copyLowerToUpperTriangle!(
    )
 = "Bullet2__btMatrixXd__MU__meth_copyLowerToUpperTriangle__0dd21b78cd93bb3f9d366bcb041290f0";

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_setZero!(
    )
 = "Bullet2__btMatrixXd__MU__meth_setZero__d00497555f6eed7ec29be014bd30ef61";

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_setIdentity!(
    )
 = "Bullet2__btMatrixXd__MU__meth_setIdentity__72a5c18ed7a3fbe25488da8726d57b37";

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_printMatrix!(
    CxxCharConstPtr _arg0
    )
 = "Bullet2__btMatrixXd__MU__meth_printMatrix__498f8f1460b0a73eca3a132ebbef16e1";

/// \dfgPresetOmit
/// \internal

btMatrixXd.cxx_rowComputeNonZeroElements?(
    )
 = "Bullet2__btMatrixXd__CO__meth_rowComputeNonZeroElements__2f9fdbd1c45d8a515e2488b8dc3394c5";

/// \dfgPresetOmit
/// \internal
btMatrixXd
btMatrixXd.cxx_transpose?(
    )
 = "Bullet2__btMatrixXd__CO__meth_transpose__8e08b0d3ad4a6d320875958486777bcc";

/// \dfgPresetOmit
/// \internal
btMatrixXd
btMatrixXd.cxx_negative!(
    )
 = "Bullet2__btMatrixXd__MU__meth_negative__3fdba28720aa69cdf4f5c17f3b81dceb";

/// \dfgPresetOmit
/// \internal
CxxFloat64Ptr
btMatrixXd.cxx_getBufferPointerWritable!(
    )
 = "Bullet2__btMatrixXd__MU__meth_getBufferPointerWritable__6e31eac8f53ca061416f9cf9d5ebf510";

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtr
btMatrixXd.cxx_getBufferPointer?(
    )
 = "Bullet2__btMatrixXd__CO__meth_getBufferPointer__abb2237abcb85e51ad6d337afcaf937c";

SInt32
btMatrixXd.cols?(
    )
{   
    SInt32 __res = 
    this.cxx_cols(
        );
    
    return __res;
}

btMatrixXd
btMatrixXd.negative!(
    )
{   
    btMatrixXd __res = 
    this.cxx_negative(
        );
    
    return __res;
}


btMatrixXd.setElem!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    Float64
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_setElem(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


btMatrixXd.addElem!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    Float64
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_addElem(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

Float64
btMatrixXd.getBufferPointerWritable!(
    )
{   
    CxxFloat64Ptr __res_cxx = 
    this.cxx_getBufferPointerWritable(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat64Ptr';
    Float64 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btMatrixXd.resize!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_resize(
        _arg0,
        _arg1
        );
    
    
    
    
}


btMatrixXd.printMatrix!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_printMatrix(
        _arg0__cxx
        );
    
    
    
}

btMatrixXd
btMatrixXd.transpose?(
    )
{   
    btMatrixXd __res = 
    this.cxx_transpose(
        );
    
    return __res;
}


btMatrixXd.setIdentity!(
    )
{   
    
    this.cxx_setIdentity(
        );
    
    
}


btMatrixXd.setZero!(
    )
{   
    
    this.cxx_setZero(
        );
    
    
}

Float64
btMatrixXd.getBufferPointer?(
    )
{   
    CxxFloat64ConstPtr __res_cxx = 
    this.cxx_getBufferPointer(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat64ConstPtr';
    Float64 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

SInt32
btMatrixXd.rows?(
    )
{   
    SInt32 __res = 
    this.cxx_rows(
        );
    
    return __res;
}


btMatrixXd.mulElem!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    Float64
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_mulElem(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


btMatrixXd.rowComputeNonZeroElements?(
    )
{   
    
    this.cxx_rowComputeNonZeroElements(
        );
    
    
}


btMatrixXd.copyLowerToUpperTriangle!(
    )
{   
    
    this.cxx_copyLowerToUpperTriangle(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMatrixXd] EDK[Fabric_EDK_KL_btMatrixXd] LIB[btMatrixX< double >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMatrixXd.=(
    btMatrixXd that
    ) = "Bullet2__btMatrixXd__MU__simple_ass_op__7f419288b138d8268ffb29be128416d4";



/// \dfgPresetOmit
/// \internal
btMatrixXd.appendDesc(io String string) {
  string += "btMatrixXd:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btQuaternion(
    btQuaternion that
    ) = "Bullet2__btQuaternion__MU__copy_ctor__b3826fcc8042dafac3e96cadf53c0d17";

/// \dfgPresetOmit
/// \internal
btQuaternion.__ctor(
    ) = "Bullet2__btQuaternion__MU__ctor__e2d3fcbd2546b98bd16c90cc2fbaa93a";

/**@brief No initialization constructor */
/// \dfgPresetOmit
btQuaternion(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btQuaternion.__ctor(
    CxxFloat32ConstRef _x,
    CxxFloat32ConstRef _y,
    CxxFloat32ConstRef _z,
    CxxFloat32ConstRef _w
    ) = "Bullet2__btQuaternion__MU__ctor__c97b07abb83d178de5e513c886c4486a";

/**@brief Constructor from scalars */
/// \dfgPresetOmit
btQuaternion(
    CxxFloat32ConstRef _x,
    CxxFloat32ConstRef _y,
    CxxFloat32ConstRef _z,
    CxxFloat32ConstRef _w
    ) {
    this.__ctor(
        _x,
        _y,
        _z,
        _w
        );
}

/**@brief Constructor from scalars */
btQuaternion(
    in
    Float32
    _x
    
    ,
    in
    Float32
    _y
    
    ,
    in
    Float32
    _z
    
    ,
    in
    Float32
    _w
    
    
    ) {
    
    CxxFloat32ConstRef _x__cxx = Make_CxxFloat32ConstRef(_x);
    
    CxxFloat32ConstRef _y__cxx = Make_CxxFloat32ConstRef(_y);
    
    CxxFloat32ConstRef _z__cxx = Make_CxxFloat32ConstRef(_z);
    
    CxxFloat32ConstRef _w__cxx = Make_CxxFloat32ConstRef(_w);
    this.__ctor(
        _x__cxx,
        _y__cxx,
        _z__cxx,
        _w__cxx
        );
    
    
    
    
}

~btQuaternion() = "Bullet2__btQuaternion__MU__dtor__77eb34308215d5749ca0f3caff1abc44";

//////////////////////////////////////////////////////////////////////////////
// KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btQuaternion.cxx_getAxis?(
    )
 = "Bullet2__btQuaternion__CO__meth_getAxis__6a46b95f2ac5acae228d17a7e3f0e497";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
btQuaternion.cxx_getW?(
    )
 = "Bullet2__btQuaternion__CO__meth_getW__a56c5c0b7e3912381e22b75529e972c9";

btVector3
btQuaternion.getAxis?(
    )
{   
    btVector3 __res = 
    this.cxx_getAxis(
        );
    
    return __res;
}

Float32
btQuaternion.getW?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getW(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btQuaternion.=(
    btQuaternion that
    ) = "Bullet2__btQuaternion__MU__simple_ass_op__0d2cd30b0cd94ee94da5eb8741f1b632";



/// \dfgPresetOmit
/// \internal
btQuaternion.appendDesc(io String string) {
  string += "btQuaternion:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btTransform.__ctor(
    ) = "Bullet2__btTransform__MU__ctor__71539c9eb9767351de601f552ebfb2d6";

/**@brief No initialization constructor */
/// \dfgPresetOmit
btTransform(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btTransform.__ctor(
    CxxbtQuaternionConstRef q
    ) = "Bullet2__btTransform__MU__ctor__15228a113995c1d829d7effd80f36d3c";

/**@brief Constructor from btQuaternion (optional btVector3 )

   * @param q Rotation from quaternion 

   * @param c Translation from Vector (default 0,0,0) */
/// \dfgPresetOmit
btTransform(
    CxxbtQuaternionConstRef q
    ) {
    this.__ctor(
        q
        );
}

/// \dfgPresetOmit
/// \internal
btTransform.__ctor(
    CxxbtQuaternionConstRef q,
    CxxbtVector3ConstRef c
    ) = "Bullet2__btTransform__MU__ctor__2e18098bdc863d3260c59722fc71eb01";

/// \dfgPresetOmit
btTransform(
    CxxbtQuaternionConstRef q,
    CxxbtVector3ConstRef c
    ) {
    this.__ctor(
        q,
        c
        );
}

/// \dfgPresetOmit
/// \internal
btTransform.__ctor(
    CxxbtMatrix3x3ConstRef b
    ) = "Bullet2__btTransform__MU__ctor__c86c0450387cd995b7250b7145e9505a";

/**@brief Constructor from btMatrix3x3 (optional btVector3)

   * @param b Rotation from Matrix 

   * @param c Translation from Vector default (0,0,0)*/
/// \dfgPresetOmit
btTransform(
    CxxbtMatrix3x3ConstRef b
    ) {
    this.__ctor(
        b
        );
}

/// \dfgPresetOmit
/// \internal
btTransform.__ctor(
    CxxbtMatrix3x3ConstRef b,
    CxxbtVector3ConstRef c
    ) = "Bullet2__btTransform__MU__ctor__177873734a925119af16410adf643828";

/// \dfgPresetOmit
btTransform(
    CxxbtMatrix3x3ConstRef b,
    CxxbtVector3ConstRef c
    ) {
    this.__ctor(
        b,
        c
        );
}

/// \dfgPresetOmit
/// \internal
btTransform.__ctor(
    CxxbtTransformConstRef other
    ) = "Bullet2__btTransform__MU__ctor__53a5863bb7c0b81ef0d6ef3a9b30d467";

/**@brief Copy constructor */
/// \dfgPresetOmit
btTransform(
    CxxbtTransformConstRef other
    ) {
    this.__ctor(
        other
        );
}

btTransform(
    in
    btMatrix3x3
    b
    
    ,
    in
    btVector3
    c
    
    
    ) {
    
    CxxbtMatrix3x3ConstRef b__cxx = Make_CxxbtMatrix3x3ConstRef(b);
    
    CxxbtVector3ConstRef c__cxx = Make_CxxbtVector3ConstRef(c);
    this.__ctor(
        b__cxx,
        c__cxx
        );
    
    
}

/**@brief Constructor from btMatrix3x3 (optional btVector3)

   * @param b Rotation from Matrix 

   * @param c Translation from Vector default (0,0,0)*/
btTransform(
    in
    btMatrix3x3
    b
    
    
    ) {
    
    CxxbtMatrix3x3ConstRef b__cxx = Make_CxxbtMatrix3x3ConstRef(b);
    this.__ctor(
        b__cxx
        );
    
}

/**@brief Constructor from btQuaternion (optional btVector3 )

   * @param q Rotation from quaternion 

   * @param c Translation from Vector (default 0,0,0) */
btTransform(
    in
    btQuaternion
    q
    
    
    ) {
    
    CxxbtQuaternionConstRef q__cxx = Make_CxxbtQuaternionConstRef(q);
    this.__ctor(
        q__cxx
        );
    
}

/**@brief Copy constructor */
btTransform(
    in
    btTransform
    other
    
    
    ) {
    
    CxxbtTransformConstRef other__cxx = Make_CxxbtTransformConstRef(other);
    this.__ctor(
        other__cxx
        );
    
}

btTransform(
    in
    btQuaternion
    q
    
    ,
    in
    btVector3
    c
    
    
    ) {
    
    CxxbtQuaternionConstRef q__cxx = Make_CxxbtQuaternionConstRef(q);
    
    CxxbtVector3ConstRef c__cxx = Make_CxxbtVector3ConstRef(c);
    this.__ctor(
        q__cxx,
        c__cxx
        );
    
    
}

~btTransform() = "Bullet2__btTransform__MU__dtor__67ba2f3706c1f2dba792c2220d81dd81";

//////////////////////////////////////////////////////////////////////////////
// KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Set the current transform as the value of the product of two transforms

   * @param t1 Transform 1

   * @param t2 Transform 2

   * This = Transform1 * Transform2 */
/// \dfgPresetOmit
/// \internal

btTransform.cxx_mult!(
    CxxbtTransformConstRef t1,
    CxxbtTransformConstRef t2
    )
 = "Bullet2__btTransform__MU__meth_mult__19e957918791daa8f3940fa474851013";

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
btTransform.cxx_getBasis?(
    )
 = "Bullet2__btTransform__CO__meth_getBasis__83555eb8e0f6f5224410758a76232b5d";

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btTransform.cxx_getOrigin?(
    )
 = "Bullet2__btTransform__CO__meth_getOrigin__61deae1fbdbe3194019870a7255bb60c";

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
btTransform.cxx_getRotation?(
    )
 = "Bullet2__btTransform__CO__meth_getRotation__48f38eacf69b1be2bc0f79cdd93cc235";

/**@brief Set from an array 

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

btTransform.cxx_setFromOpenGLMatrix!(
    CxxFloat32ConstPtr m
    )
 = "Bullet2__btTransform__MU__meth_setFromOpenGLMatrix__440835278b80c464f0618deef9fff0bd";

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

btTransform.cxx_getOpenGLMatrix?(
    CxxFloat32Ptr m
    )
 = "Bullet2__btTransform__CO__meth_getOpenGLMatrix__ceb69186b446db4c059a0ed31e5d08ec";

/**@brief Set the translational element

   * @param origin The vector to set the translation to */
/// \dfgPresetOmit
/// \internal

btTransform.cxx_setOrigin!(
    CxxbtVector3ConstRef origin
    )
 = "Bullet2__btTransform__MU__meth_setOrigin__d9975a864a6f9d265afbb999113104f0";

/// \dfgPresetOmit
/// \internal
btVector3
btTransform.cxx_invXform?(
    CxxbtVector3ConstRef inVec
    )
 = "Bullet2__btTransform__CO__meth_invXform__a2eedcf6f65aa70221ddf27b107e1693";

/**@brief Set the rotational element by btMatrix3x3 */
/// \dfgPresetOmit
/// \internal

btTransform.cxx_setBasis!(
    CxxbtMatrix3x3ConstRef basis
    )
 = "Bullet2__btTransform__MU__meth_setBasis__63a80ef14124d4db86afc9adf51b14e8";

/**@brief Set the rotational element by btQuaternion */
/// \dfgPresetOmit
/// \internal

btTransform.cxx_setRotation!(
    CxxbtQuaternionConstRef q
    )
 = "Bullet2__btTransform__MU__meth_setRotation__040a9973313281396a8f1e19d5274878";

/**@brief Set this transformation to the identity */
/// \dfgPresetOmit
/// \internal

btTransform.cxx_setIdentity!(
    )
 = "Bullet2__btTransform__MU__meth_setIdentity__c9c9e6a5e82202d9d3636fa89ab18057";

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
btTransform.cxx_inverse?(
    )
 = "Bullet2__btTransform__CO__meth_inverse__425b0e0231cca4a75304cb8cc45bdb2a";

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
btTransform.cxx_inverseTimes?(
    CxxbtTransformConstRef t
    )
 = "Bullet2__btTransform__CO__meth_inverseTimes__262c191f6b52b57dcf93b98a39ac564b";

/**@brief Return an identity transform */
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btTransform_CxxgetIdentity(
    )
 = "Bullet2__btTransform__ST__meth_getIdentity__1d7d9675e61a8795647b2aefd5f40322";

/**@brief Set the rotational element by btQuaternion */

btTransform.setRotation!(
    in
    btQuaternion
    q
    
    
    )
{   
    
    CxxbtQuaternionConstRef q__cxx = Make_CxxbtQuaternionConstRef(q);
    
    this.cxx_setRotation(
        q__cxx
        );
    
    
    
}

/**@brief Set the current transform as the value of the product of two transforms

   * @param t1 Transform 1

   * @param t2 Transform 2

   * This = Transform1 * Transform2 */

btTransform.mult!(
    in
    btTransform
    t1
    
    ,
    in
    btTransform
    t2
    
    
    )
{   
    
    CxxbtTransformConstRef t1__cxx = Make_CxxbtTransformConstRef(t1);
    
    CxxbtTransformConstRef t2__cxx = Make_CxxbtTransformConstRef(t2);
    
    this.cxx_mult(
        t1__cxx,
        t2__cxx
        );
    
    
    
    
}

/**@brief Return a quaternion representing the rotation */
btQuaternion
btTransform.getRotation?(
    )
{   
    btQuaternion __res = 
    this.cxx_getRotation(
        );
    
    return __res;
}

btVector3
btTransform.invXform?(
    in
    btVector3
    inVec
    
    
    )
{   
    
    CxxbtVector3ConstRef inVec__cxx = Make_CxxbtVector3ConstRef(inVec);
    btVector3 __res = 
    this.cxx_invXform(
        inVec__cxx
        );
    
    
    return __res;
}

/**@brief Set this transformation to the identity */

btTransform.setIdentity!(
    )
{   
    
    this.cxx_setIdentity(
        );
    
    
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */

btTransform.getOpenGLMatrix?(
    io
    Float32
    m
    
    
    )
{   
    
    CxxFloat32Ptr m__cxx = Make_CxxFloat32Ptr(m);
    
    this.cxx_getOpenGLMatrix(
        m__cxx
        );
    
    
    
}

/**@brief Return the inverse of this transform */
btTransform
btTransform.inverse?(
    )
{   
    btTransform __res = 
    this.cxx_inverse(
        );
    
    return __res;
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
btTransform
btTransform.inverseTimes?(
    in
    btTransform
    t
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    btTransform __res = 
    this.cxx_inverseTimes(
        t__cxx
        );
    
    
    return __res;
}

/**@brief Return the origin vector translation */
btVector3
btTransform.getOrigin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getOrigin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Set the translational element

   * @param origin The vector to set the translation to */

btTransform.setOrigin!(
    in
    btVector3
    origin
    
    
    )
{   
    
    CxxbtVector3ConstRef origin__cxx = Make_CxxbtVector3ConstRef(origin);
    
    this.cxx_setOrigin(
        origin__cxx
        );
    
    
    
}

/**@brief Return the basis matrix for the rotation */
btMatrix3x3
btTransform.getBasis?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getBasis(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return an identity transform */
btTransform
btTransform_getIdentity(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    btTransform_CxxgetIdentity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Set from an array 

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */

btTransform.setFromOpenGLMatrix!(
    in
    Float32
    m
    
    
    )
{   
    
    CxxFloat32ConstPtr m__cxx = Make_CxxFloat32ConstPtr(m);
    
    this.cxx_setFromOpenGLMatrix(
        m__cxx
        );
    
    
    
}

/**@brief Set the rotational element by btMatrix3x3 */

btTransform.setBasis!(
    in
    btMatrix3x3
    basis
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef basis__cxx = Make_CxxbtMatrix3x3ConstRef(basis);
    
    this.cxx_setBasis(
        basis__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Call Operators
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the transform of the vector */
/// \dfgPresetOmit
/// \internal
btVector3
btTransform.cxx_call?(
    CxxbtVector3ConstRef x
    )
 = "Bullet2__btTransform__CO__call_op__cbd51580aa0296446336249a5e7ba046";

//////////////////////////////////////////////////////////////////////////////
// KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the transform of the vector */
btVector3
*(
    CxxbtTransformConstRef _arg0,
    CxxbtVector3ConstRef x
    ) = "Bullet2__btTransform__CO__bin_op_MUL__3d5a6747d15c36c05f6771f356ca350c";

/**@brief Return the transform of the btQuaternion */
btQuaternion
*(
    CxxbtTransformConstRef _arg0,
    CxxbtQuaternionConstRef q
    ) = "Bullet2__btTransform__CO__bin_op_MUL__5f4ba89e79d001d5c89588a19b0050c0";

/**@brief Return the product of this transform and the other */
btTransform
*(
    CxxbtTransformConstRef _arg0,
    CxxbtTransformConstRef t
    ) = "Bullet2__btTransform__CO__bin_op_MUL__f43deee9832bdddfb31eae6dd19a4fa8";

//////////////////////////////////////////////////////////////////////////////
// KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

/**@brief Multiply this Transform by another(this = this * another) 

   * @param t The other transform */
btTransform.*=(
    CxxbtTransformConstRef t
    ) = "Bullet2__btTransform__MU__ass_op_MUL__4c4905d75ed9f5ca440a17e1868d8f77";

btTransform.=(
    btTransform that
    ) = "Bullet2__btTransform__MU__simple_ass_op__9149104c4f46fa85403608219cfedc24";



/// \dfgPresetOmit
/// \internal
btTransform.appendDesc(io String string) {
  string += "btTransform:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTransformUtil() = "Bullet2__btTransformUtil__MU__empty_ctor__24a865d482d2edaf7c1889ded23385a7";

/// \dfgPresetOmit
btTransformUtil(
    btTransformUtil that
    ) = "Bullet2__btTransformUtil__MU__copy_ctor__aaf772d201b6af22989f968a43789eec";

~btTransformUtil() = "Bullet2__btTransformUtil__MU__dtor__be5252ca90701c2880ac64f2e93586fe";

//////////////////////////////////////////////////////////////////////////////
// KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btTransformUtil_CxxintegrateTransform(
    CxxbtTransformConstRef curTrans,
    CxxbtVector3ConstRef linvel,
    CxxbtVector3ConstRef angvel,
    Float32 timeStep,
    CxxbtTransformRef predictedTransform
    )
 = "Bullet2__btTransformUtil__ST__meth_integrateTransform__579a3653ce6c472c11c657487b9f7515";

/// \dfgPresetOmit
/// \internal

btTransformUtil_CxxcalculateVelocityQuaternion(
    CxxbtVector3ConstRef pos0,
    CxxbtVector3ConstRef pos1,
    CxxbtQuaternionConstRef orn0,
    CxxbtQuaternionConstRef orn1,
    Float32 timeStep,
    CxxbtVector3Ref linVel,
    CxxbtVector3Ref angVel
    )
 = "Bullet2__btTransformUtil__ST__meth_calculateVelocityQuaternion__aa7439272958e085401edd25ff0ec269";

/// \dfgPresetOmit
/// \internal

btTransformUtil_CxxcalculateDiffAxisAngleQuaternion(
    CxxbtQuaternionConstRef orn0,
    CxxbtQuaternionConstRef orn1a,
    CxxbtVector3Ref axis,
    CxxFloat32Ref angle
    )
 = "Bullet2__btTransformUtil__ST__meth_calculateDiffAxisAngleQuaternion__ac85cc6bbfe20b3374339fc7f1652470";

/// \dfgPresetOmit
/// \internal

btTransformUtil_CxxcalculateVelocity(
    CxxbtTransformConstRef transform0,
    CxxbtTransformConstRef transform1,
    Float32 timeStep,
    CxxbtVector3Ref linVel,
    CxxbtVector3Ref angVel
    )
 = "Bullet2__btTransformUtil__ST__meth_calculateVelocity__f8ee60811ae2fa61d65c71704a958faf";

/// \dfgPresetOmit
/// \internal

btTransformUtil_CxxcalculateDiffAxisAngle(
    CxxbtTransformConstRef transform0,
    CxxbtTransformConstRef transform1,
    CxxbtVector3Ref axis,
    CxxFloat32Ref angle
    )
 = "Bullet2__btTransformUtil__ST__meth_calculateDiffAxisAngle__5b41d27016fd90dcf33e54db3c7d50c6";


btTransformUtil_calculateVelocity(
    in
    btTransform
    transform0
    
    ,
    in
    btTransform
    transform1
    
    ,
    in
    Float32
    timeStep
    
    ,
    io
    btVector3
    linVel
    
    ,
    io
    btVector3
    angVel
    
    
    )
{   
    
    CxxbtTransformConstRef transform0__cxx = Make_CxxbtTransformConstRef(transform0);
    
    CxxbtTransformConstRef transform1__cxx = Make_CxxbtTransformConstRef(transform1);
    
    
    CxxbtVector3Ref linVel__cxx = Make_CxxbtVector3Ref(linVel);
    
    CxxbtVector3Ref angVel__cxx = Make_CxxbtVector3Ref(angVel);
    
    btTransformUtil_CxxcalculateVelocity(
        transform0__cxx,
        transform1__cxx,
        timeStep,
        linVel__cxx,
        angVel__cxx
        );
    
    
    
    
    
    
    
}


btTransformUtil_calculateDiffAxisAngleQuaternion(
    in
    btQuaternion
    orn0
    
    ,
    in
    btQuaternion
    orn1a
    
    ,
    io
    btVector3
    axis
    
    ,
    io
    Float32
    angle
    
    
    )
{   
    
    CxxbtQuaternionConstRef orn0__cxx = Make_CxxbtQuaternionConstRef(orn0);
    
    CxxbtQuaternionConstRef orn1a__cxx = Make_CxxbtQuaternionConstRef(orn1a);
    
    CxxbtVector3Ref axis__cxx = Make_CxxbtVector3Ref(axis);
    
    CxxFloat32Ref angle__cxx = Make_CxxFloat32Ref(angle);
    
    btTransformUtil_CxxcalculateDiffAxisAngleQuaternion(
        orn0__cxx,
        orn1a__cxx,
        axis__cxx,
        angle__cxx
        );
    
    
    
    
    
    
}


btTransformUtil_integrateTransform(
    in
    btTransform
    curTrans
    
    ,
    in
    btVector3
    linvel
    
    ,
    in
    btVector3
    angvel
    
    ,
    in
    Float32
    timeStep
    
    ,
    io
    btTransform
    predictedTransform
    
    
    )
{   
    
    CxxbtTransformConstRef curTrans__cxx = Make_CxxbtTransformConstRef(curTrans);
    
    CxxbtVector3ConstRef linvel__cxx = Make_CxxbtVector3ConstRef(linvel);
    
    CxxbtVector3ConstRef angvel__cxx = Make_CxxbtVector3ConstRef(angvel);
    
    
    CxxbtTransformRef predictedTransform__cxx = Make_CxxbtTransformRef(predictedTransform);
    
    btTransformUtil_CxxintegrateTransform(
        curTrans__cxx,
        linvel__cxx,
        angvel__cxx,
        timeStep,
        predictedTransform__cxx
        );
    
    
    
    
    
    
    
}


btTransformUtil_calculateDiffAxisAngle(
    in
    btTransform
    transform0
    
    ,
    in
    btTransform
    transform1
    
    ,
    io
    btVector3
    axis
    
    ,
    io
    Float32
    angle
    
    
    )
{   
    
    CxxbtTransformConstRef transform0__cxx = Make_CxxbtTransformConstRef(transform0);
    
    CxxbtTransformConstRef transform1__cxx = Make_CxxbtTransformConstRef(transform1);
    
    CxxbtVector3Ref axis__cxx = Make_CxxbtVector3Ref(axis);
    
    CxxFloat32Ref angle__cxx = Make_CxxFloat32Ref(angle);
    
    btTransformUtil_CxxcalculateDiffAxisAngle(
        transform0__cxx,
        transform1__cxx,
        axis__cxx,
        angle__cxx
        );
    
    
    
    
    
    
}


btTransformUtil_calculateVelocityQuaternion(
    in
    btVector3
    pos0
    
    ,
    in
    btVector3
    pos1
    
    ,
    in
    btQuaternion
    orn0
    
    ,
    in
    btQuaternion
    orn1
    
    ,
    in
    Float32
    timeStep
    
    ,
    io
    btVector3
    linVel
    
    ,
    io
    btVector3
    angVel
    
    
    )
{   
    
    CxxbtVector3ConstRef pos0__cxx = Make_CxxbtVector3ConstRef(pos0);
    
    CxxbtVector3ConstRef pos1__cxx = Make_CxxbtVector3ConstRef(pos1);
    
    CxxbtQuaternionConstRef orn0__cxx = Make_CxxbtQuaternionConstRef(orn0);
    
    CxxbtQuaternionConstRef orn1__cxx = Make_CxxbtQuaternionConstRef(orn1);
    
    
    CxxbtVector3Ref linVel__cxx = Make_CxxbtVector3Ref(linVel);
    
    CxxbtVector3Ref angVel__cxx = Make_CxxbtVector3Ref(angVel);
    
    btTransformUtil_CxxcalculateVelocityQuaternion(
        pos0__cxx,
        pos1__cxx,
        orn0__cxx,
        orn1__cxx,
        timeStep,
        linVel__cxx,
        angVel__cxx
        );
    
    
    
    
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTransformUtil] EDK[Fabric_EDK_KL_btTransformUtil] LIB[btTransformUtil]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTransformUtil.=(
    btTransformUtil that
    ) = "Bullet2__btTransformUtil__MU__simple_ass_op__5693d55e4a90782b0538c8b2375cce27";



/// \dfgPresetOmit
/// \internal
btTransformUtil.appendDesc(io String string) {
  string += "btTransformUtil:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexSeparatingDistanceUtil() = "Bullet2__btConvexSeparatingDistanceUtil__MU__empty_ctor__be55d0a83caf643f090773eb2a79d332";

/// \dfgPresetOmit
btConvexSeparatingDistanceUtil(
    btConvexSeparatingDistanceUtil that
    ) = "Bullet2__btConvexSeparatingDistanceUtil__MU__copy_ctor__7832a01a1c577b60edc4821d265a6b82";

/// \dfgPresetOmit
/// \internal
btConvexSeparatingDistanceUtil.__ctor(
    Float32 boundingRadiusA,
    Float32 boundingRadiusB
    ) = "Bullet2__btConvexSeparatingDistanceUtil__MU__ctor__4d47a6017eeb70e7f74f412c1eca5023";

/// \dfgPresetOmit
btConvexSeparatingDistanceUtil(
    Float32 boundingRadiusA,
    Float32 boundingRadiusB
    ) {
    this.__ctor(
        boundingRadiusA,
        boundingRadiusB
        );
}

~btConvexSeparatingDistanceUtil() = "Bullet2__btConvexSeparatingDistanceUtil__MU__dtor__19732924e7082c5d12fd8acbf03d4ee2";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btConvexSeparatingDistanceUtil.cxx_getConservativeSeparatingDistance!(
    )
 = "Bullet2__btConvexSeparatingDistanceUtil__MU__meth_getConservativeSeparatingDistance__9aa510fe044fafbcf05325949b805257";

/// \dfgPresetOmit
/// \internal

btConvexSeparatingDistanceUtil.cxx_updateSeparatingDistance!(
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB
    )
 = "Bullet2__btConvexSeparatingDistanceUtil__MU__meth_updateSeparatingDistance__77bdbac1149652ae3f8ae4093bbb19ff";

/// \dfgPresetOmit
/// \internal

btConvexSeparatingDistanceUtil.cxx_initSeparatingDistance!(
    CxxbtVector3ConstRef separatingVector,
    Float32 separatingDistance,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB
    )
 = "Bullet2__btConvexSeparatingDistanceUtil__MU__meth_initSeparatingDistance__c910e7c132284ec96a5e4566332caf42";


btConvexSeparatingDistanceUtil.initSeparatingDistance!(
    in
    btVector3
    separatingVector
    
    ,
    in
    Float32
    separatingDistance
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    
    )
{   
    
    CxxbtVector3ConstRef separatingVector__cxx = Make_CxxbtVector3ConstRef(separatingVector);
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    this.cxx_initSeparatingDistance(
        separatingVector__cxx,
        separatingDistance,
        transA__cxx,
        transB__cxx
        );
    
    
    
    
    
    
}

Float32
btConvexSeparatingDistanceUtil.getConservativeSeparatingDistance!(
    )
{   
    Float32 __res = 
    this.cxx_getConservativeSeparatingDistance(
        );
    
    return __res;
}


btConvexSeparatingDistanceUtil.updateSeparatingDistance!(
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    
    )
{   
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    this.cxx_updateSeparatingDistance(
        transA__cxx,
        transB__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexSeparatingDistanceUtil] EDK[Fabric_EDK_KL_btConvexSeparatingDistanceUtil] LIB[btConvexSeparatingDistanceUtil]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexSeparatingDistanceUtil.=(
    btConvexSeparatingDistanceUtil that
    ) = "Bullet2__btConvexSeparatingDistanceUtil__MU__simple_ass_op__1167b0f4f46762d4fb5ee9817e739a97";



/// \dfgPresetOmit
/// \internal
btConvexSeparatingDistanceUtil.appendDesc(io String string) {
  string += "btConvexSeparatingDistanceUtil:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_Float32(
    btAlignedObjectArray_Float32 that
    ) = "Bullet2__btAlignedObjectArray_Float32__MU__copy_ctor__219ae728f543b8d95c6bdd17394b4a23";

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Float32.__ctor(
    ) = "Bullet2__btAlignedObjectArray_Float32__MU__ctor__8502a7e22a74e972ff790f32142f67cc";

/// \dfgPresetOmit
btAlignedObjectArray_Float32(
    ) {
    this.__ctor(
        );
}

~btAlignedObjectArray_Float32() = "Bullet2__btAlignedObjectArray_Float32__MU__dtor__b641708536bef9be3ef8ab4de08622d7";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_Float32.cxx_size?(
    )
 = "Bullet2__btAlignedObjectArray_Float32__CO__meth_size__b7b18081e97c2405318fee2c61114e55";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_clear!(
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_clear__c3e928561bd92f561070bb3f3553e628";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_pop_back!(
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_pop_back__fb0779086cd552a2669747c8788f280c";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_resizeNoInitialize__2a8e51e633e301691210404b7895f970";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_resize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_resize__e919b55843df889d27e1f42ea5c53ba8";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_push_back!(
    CxxFloat32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_push_back__96eba0de9baa331c0a7e91de253d9e18";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_Float32.cxx_capacity?(
    )
 = "Bullet2__btAlignedObjectArray_Float32__CO__meth_capacity__f7fc388b06083c2a7eff2a09af2d9345";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_reserve!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_reserve__87aa936cb8c215b8b36ac00b610f083e";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_swap__9ece3ec0e97b8d300451c5b42386303e";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_Float32.cxx_findBinarySearch?(
    CxxFloat32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__CO__meth_findBinarySearch__cd025656a074ead9c84f64dc7d503afb";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_Float32.cxx_findLinearSearch?(
    CxxFloat32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__CO__meth_findLinearSearch__3f232d5eae625a47a8f111593f062290";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_removeAtIndex!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_removeAtIndex__e7608ce2526ed058fbbe7880706b1355";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_remove!(
    CxxFloat32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_remove__bd39372d610e2ca43a9b5af1e2d53b3d";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_initializeFromBuffer__f0409967fc89b2700e7d281432c1d0a5";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Float32.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_Float32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Float32__MU__meth_copyFromArray__b9568c2a9fd4b4a894c57d08c5434def";


btAlignedObjectArray_Float32.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_Float32.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_Float32.remove!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_Float32.copyFromArray!(
    in
    btAlignedObjectArray_Float32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_Float32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_Float32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_Float32.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

SInt32
btAlignedObjectArray_Float32.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

SInt32
btAlignedObjectArray_Float32.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}


btAlignedObjectArray_Float32.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

SInt32
btAlignedObjectArray_Float32.findBinarySearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_Float32.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}


btAlignedObjectArray_Float32.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


btAlignedObjectArray_Float32.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

SInt32
btAlignedObjectArray_Float32.findLinearSearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_Float32.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_Float32.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAlignedObjectArray_Float32.=(
    btAlignedObjectArray_Float32 that
    ) = "Bullet2__btAlignedObjectArray_Float32__MU__simple_ass_op__68467f58285f1bb61032d1585002f8f1";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
Float32
btAlignedObjectArray_Float32.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__btAlignedObjectArray_Float32__CO__get_ind_op__30a42d4b1696aa69f7619a9003674056";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_Float32.cxx_setAtIndex!(
    UInt64 index,
    Float32 value
    )
  = "Bullet2__btAlignedObjectArray_Float32__MU__set_ind_op__8cb0f03a884cd05826945639cb580a78";



/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Float32.appendDesc(io String string) {
  string += "btAlignedObjectArray_Float32:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_SInt32(
    btAlignedObjectArray_SInt32 that
    ) = "Bullet2__btAlignedObjectArray_SInt32__MU__copy_ctor__9d888948168dd91c7c595e4d19894477";

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_SInt32.__ctor(
    ) = "Bullet2__btAlignedObjectArray_SInt32__MU__ctor__d6787b99fff2c4ddac6473762322bdd5";

/// \dfgPresetOmit
btAlignedObjectArray_SInt32(
    ) {
    this.__ctor(
        );
}

~btAlignedObjectArray_SInt32() = "Bullet2__btAlignedObjectArray_SInt32__MU__dtor__743ccb08decb01dae7056af8b6e8048e";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_SInt32.cxx_size?(
    )
 = "Bullet2__btAlignedObjectArray_SInt32__CO__meth_size__88b5149d4da17f0235efac5ea0758665";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_clear!(
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_clear__4ef96661caa71cbb9069b0ec5cc21c46";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_pop_back!(
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_pop_back__5d750c2e8a248b652bc827feeee2f1b6";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_resizeNoInitialize__babf5660a8f5ef85a9a7ce5de15e1ffe";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_resize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_resize__b40e39513b2267aab640b62679b81d11";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_push_back!(
    CxxSInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_push_back__9d8b2b31d9573cba5278dd8d33cbe8fe";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_SInt32.cxx_capacity?(
    )
 = "Bullet2__btAlignedObjectArray_SInt32__CO__meth_capacity__a2061d8f076cf47ebd63c74764d5c9cd";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_reserve!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_reserve__2d6ef4601d374bc04dd83b0a3d91e97e";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_swap__77604d43f64df56a1da8a81c02676a47";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_SInt32.cxx_findBinarySearch?(
    CxxSInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__CO__meth_findBinarySearch__36c53bcb13b5c01132918d31f8c1b6fb";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_SInt32.cxx_findLinearSearch?(
    CxxSInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__CO__meth_findLinearSearch__21bff4f15c7dbdfc3def22b7a78b2350";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_removeAtIndex!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_removeAtIndex__e7108023478c6bec45967901e8c466c7";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_remove!(
    CxxSInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_remove__c8bda808ecfd4c5e3e2c9ae1de3030cf";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_initializeFromBuffer__c86621d328bf2d87b386f053cb941770";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_SInt32.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_SInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_SInt32__MU__meth_copyFromArray__6749dc097f12597867d5a6cd9365a7e9";

SInt32
btAlignedObjectArray_SInt32.findLinearSearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

SInt32
btAlignedObjectArray_SInt32.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

SInt32
btAlignedObjectArray_SInt32.findBinarySearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_SInt32.copyFromArray!(
    in
    btAlignedObjectArray_SInt32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_SInt32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_SInt32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_SInt32.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}


btAlignedObjectArray_SInt32.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_SInt32.remove!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_SInt32.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}


btAlignedObjectArray_SInt32.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_SInt32.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_SInt32.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_SInt32.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}


btAlignedObjectArray_SInt32.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


btAlignedObjectArray_SInt32.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

SInt32
btAlignedObjectArray_SInt32.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAlignedObjectArray_SInt32.=(
    btAlignedObjectArray_SInt32 that
    ) = "Bullet2__btAlignedObjectArray_SInt32__MU__simple_ass_op__84af1803fd51abb689becb76c5cc3a92";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
SInt32
btAlignedObjectArray_SInt32.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__btAlignedObjectArray_SInt32__CO__get_ind_op__39ec20c5b51790e3a8ceb63053b7b199";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_SInt32.cxx_setAtIndex!(
    UInt64 index,
    SInt32 value
    )
  = "Bullet2__btAlignedObjectArray_SInt32__MU__set_ind_op__ea1aefcd3ee14654505fdeb8c8aa8eff";



/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_SInt32.appendDesc(io String string) {
  string += "btAlignedObjectArray_SInt32:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_UInt32(
    btAlignedObjectArray_UInt32 that
    ) = "Bullet2__btAlignedObjectArray_UInt32__MU__copy_ctor__7dea3d7bca89d92a6d77ba8116b068a3";

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32.__ctor(
    ) = "Bullet2__btAlignedObjectArray_UInt32__MU__ctor__b2658ca694cfac47829cd0da32ae74dc";

/// \dfgPresetOmit
btAlignedObjectArray_UInt32(
    ) {
    this.__ctor(
        );
}

~btAlignedObjectArray_UInt32() = "Bullet2__btAlignedObjectArray_UInt32__MU__dtor__fd17b2302935a8add0bdd31c4359700d";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_UInt32.cxx_size?(
    )
 = "Bullet2__btAlignedObjectArray_UInt32__CO__meth_size__6263289d48f3aa55c94c0596ceda92ff";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_clear!(
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_clear__0c6970c34afb8c97a1ba8a29cb1143a2";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_pop_back!(
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_pop_back__8932e46f9e50d3803388a76718043e71";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_resizeNoInitialize__34b2e641aaffb1ec27834e1fccf61647";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_resize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_resize__455720ac2db9cfcf04d0a505fdd4bb9a";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_push_back!(
    CxxUInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_push_back__ae69fffa455585b041060830f74827bd";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_UInt32.cxx_capacity?(
    )
 = "Bullet2__btAlignedObjectArray_UInt32__CO__meth_capacity__94e0740955648932bbdd19070304fe45";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_reserve!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_reserve__3ed8e555e72d4302b82dc90927a14c1b";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_swap__d7426e68866cc9a6a2841535a62de2e7";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_UInt32.cxx_findBinarySearch?(
    CxxUInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__CO__meth_findBinarySearch__9694962dc2ad7c9edf7325ed434896ae";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_UInt32.cxx_findLinearSearch?(
    CxxUInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__CO__meth_findLinearSearch__621ad7fe8f649ec4734d9fd348a435d8";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_removeAtIndex!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_removeAtIndex__42591ece25b425c471abb8b187004302";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_remove!(
    CxxUInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_remove__5654adaa16bdd361e986393e75c05f00";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_initializeFromBuffer__32c95afd64bd7c067c45431450d2655c";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt32.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_UInt32ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt32__MU__meth_copyFromArray__1df3af5ecbbaa4dadfece985d4587a1c";

SInt32
btAlignedObjectArray_UInt32.findBinarySearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

SInt32
btAlignedObjectArray_UInt32.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}


btAlignedObjectArray_UInt32.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_UInt32.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}


btAlignedObjectArray_UInt32.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}


btAlignedObjectArray_UInt32.remove!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_UInt32.copyFromArray!(
    in
    btAlignedObjectArray_UInt32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_UInt32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_UInt32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

SInt32
btAlignedObjectArray_UInt32.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

SInt32
btAlignedObjectArray_UInt32.findLinearSearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_UInt32.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_UInt32.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}


btAlignedObjectArray_UInt32.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_UInt32.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_UInt32.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


btAlignedObjectArray_UInt32.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAlignedObjectArray_UInt32.=(
    btAlignedObjectArray_UInt32 that
    ) = "Bullet2__btAlignedObjectArray_UInt32__MU__simple_ass_op__21035060ca1817d610e89d01e598ec46";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt32
btAlignedObjectArray_UInt32.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__btAlignedObjectArray_UInt32__CO__get_ind_op__728ac9c40392cc73eb416eedee4b0469";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_UInt32.cxx_setAtIndex!(
    UInt64 index,
    UInt32 value
    )
  = "Bullet2__btAlignedObjectArray_UInt32__MU__set_ind_op__5d61aeffcca09650cc12e3a904c3936a";



/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32.appendDesc(io String string) {
  string += "btAlignedObjectArray_UInt32:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_UInt16(
    btAlignedObjectArray_UInt16 that
    ) = "Bullet2__btAlignedObjectArray_UInt16__MU__copy_ctor__10e3bc9eed63c05a760b35a1a6c96770";

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt16.__ctor(
    ) = "Bullet2__btAlignedObjectArray_UInt16__MU__ctor__abc52ca85fd936ab34f41e72496d25dc";

/// \dfgPresetOmit
btAlignedObjectArray_UInt16(
    ) {
    this.__ctor(
        );
}

~btAlignedObjectArray_UInt16() = "Bullet2__btAlignedObjectArray_UInt16__MU__dtor__6dd10fd254709b0a59f03da34766f0fc";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_UInt16.cxx_size?(
    )
 = "Bullet2__btAlignedObjectArray_UInt16__CO__meth_size__f2786a7f9644ea61db2dc8b2c98a21e7";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_clear!(
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_clear__db937bfc3bf89ab275754834fe6c0d23";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_pop_back!(
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_pop_back__e4022f583eb8b62dbdb07cf4b6af1c0a";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_resizeNoInitialize__85739b42f7e7dac98ae482da2c61f87f";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_resize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_resize__e7851fe79dd0c5f8cb7772ee185e881c";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_push_back!(
    CxxUInt16ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_push_back__6e8ac603f639c9658e62865b243425ed";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_UInt16.cxx_capacity?(
    )
 = "Bullet2__btAlignedObjectArray_UInt16__CO__meth_capacity__7d91e26e085314312b44da7f16cdf61a";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_reserve!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_reserve__5bebedd58ae5cb5bae0eb3d05ceceba6";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_swap__82129b0671b596fbc65c1ac2372f1a3a";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_UInt16.cxx_findBinarySearch?(
    CxxUInt16ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__CO__meth_findBinarySearch__43a520b7fdc03e5ba1acb743d6625c9b";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_UInt16.cxx_findLinearSearch?(
    CxxUInt16ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__CO__meth_findLinearSearch__ffcac5195bb2adae5829adfc9c38d57f";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_removeAtIndex!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_removeAtIndex__4538e9f58a66ecad2643f34a95beb77c";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_remove!(
    CxxUInt16ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_remove__d8f04cf5cf7e0029b72e20b8179cb0d7";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_initializeFromBuffer__8cfa85b87e1f83ed98389e9fab434aee";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_UInt16.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_UInt16ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_UInt16__MU__meth_copyFromArray__11ec5d27ee042cfde32747ff53cbf0dc";

SInt32
btAlignedObjectArray_UInt16.findLinearSearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_UInt16.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_UInt16.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

SInt32
btAlignedObjectArray_UInt16.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}


btAlignedObjectArray_UInt16.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_UInt16.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_UInt16.copyFromArray!(
    in
    btAlignedObjectArray_UInt16
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_UInt16ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_UInt16ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_UInt16.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

SInt32
btAlignedObjectArray_UInt16.findBinarySearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_UInt16.remove!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_UInt16.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

SInt32
btAlignedObjectArray_UInt16.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}


btAlignedObjectArray_UInt16.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}


btAlignedObjectArray_UInt16.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}


btAlignedObjectArray_UInt16.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAlignedObjectArray_UInt16.=(
    btAlignedObjectArray_UInt16 that
    ) = "Bullet2__btAlignedObjectArray_UInt16__MU__simple_ass_op__ae3262129b088ad1b138a91e706ebcea";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt16
btAlignedObjectArray_UInt16.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__btAlignedObjectArray_UInt16__CO__get_ind_op__4d81283b67d43f39436c6cb362e84d0e";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_UInt16.cxx_setAtIndex!(
    UInt64 index,
    UInt16 value
    )
  = "Bullet2__btAlignedObjectArray_UInt16__MU__set_ind_op__2518334e9a2e5267f382128034e8cc11";



/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt16.appendDesc(io String string) {
  string += "btAlignedObjectArray_UInt16:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_Vec3(
    btAlignedObjectArray_Vec3 that
    ) = "Bullet2__btAlignedObjectArray_Vec3__MU__copy_ctor__5e011e998c083e29dd2d3e857da6d44b";

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3.__ctor(
    ) = "Bullet2__btAlignedObjectArray_Vec3__MU__ctor__fbbb25594600a868f3828a23a8db3404";

/// \dfgPresetOmit
btAlignedObjectArray_Vec3(
    ) {
    this.__ctor(
        );
}

~btAlignedObjectArray_Vec3() = "Bullet2__btAlignedObjectArray_Vec3__MU__dtor__e95f524bd1e2dd48a5f372f5eab44c53";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_Vec3.cxx_size?(
    )
 = "Bullet2__btAlignedObjectArray_Vec3__CO__meth_size__38ac43f6d60a0c5553c63c21be7926e4";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_clear!(
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_clear__8fa236befad6addf56a82b9f82d9f650";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_pop_back!(
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_pop_back__b8fbf797b324f5e1cdc73aeefbdc76a2";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_resizeNoInitialize__979c8327a03795bd34ee0b6354786ac1";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_resize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_resize__016f3aedfd1fcf3a02cf9711f45e55f1";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_push_back!(
    CxxbtVector3ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_push_back__50973391d967d31ba3a86a97200a6d54";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_Vec3.cxx_capacity?(
    )
 = "Bullet2__btAlignedObjectArray_Vec3__CO__meth_capacity__44d5caf72e59020da6dd430926ccd022";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_reserve!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_reserve__a09feb3338ed205458099b422d1351c1";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_swap__a75c033f3ca32009aaf0beb18bb61156";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_Vec3.cxx_findBinarySearch?(
    CxxbtVector3ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__CO__meth_findBinarySearch__953ded9fe6a7ee826fe434270c7c62cc";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_Vec3.cxx_findLinearSearch?(
    CxxbtVector3ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__CO__meth_findLinearSearch__cfea83a486cf5152471e0fd7bd5eafc8";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_removeAtIndex!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_removeAtIndex__9fa0a77c8c92e68d1bb6c3ba8d00d75f";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_remove!(
    CxxbtVector3ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_remove__2f36e6a40a50755dc6a69b3d4fe63243";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_initializeFromBuffer__a8e692955a7a19dfc4224b23b40ec1b5";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_Vec3.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_Vec3ConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_Vec3__MU__meth_copyFromArray__b17af0adce66c6a3362dd1cde9b26073";

SInt32
btAlignedObjectArray_Vec3.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}


btAlignedObjectArray_Vec3.copyFromArray!(
    in
    btAlignedObjectArray_Vec3
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_Vec3ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_Vec3ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

SInt32
btAlignedObjectArray_Vec3.findLinearSearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_Vec3.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_Vec3.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}


btAlignedObjectArray_Vec3.remove!(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_Vec3.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}


btAlignedObjectArray_Vec3.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_Vec3.push_back!(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_Vec3.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

SInt32
btAlignedObjectArray_Vec3.findBinarySearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_Vec3.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

SInt32
btAlignedObjectArray_Vec3.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}


btAlignedObjectArray_Vec3.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


btAlignedObjectArray_Vec3.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAlignedObjectArray_Vec3.=(
    btAlignedObjectArray_Vec3 that
    ) = "Bullet2__btAlignedObjectArray_Vec3__MU__simple_ass_op__38167b70067ab0d73351bc601a080a1e";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVector3
btAlignedObjectArray_Vec3.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__btAlignedObjectArray_Vec3__CO__get_ind_op__2b54e40f0ee276ff5b7bf1349fd9b811";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_Vec3.cxx_setAtIndex!(
    UInt64 index,
    btVector3 value
    )
  = "Bullet2__btAlignedObjectArray_Vec3__MU__set_ind_op__0d22a97ef32bb7db225d9f874c1d92ef";



/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3.appendDesc(io String string) {
  string += "btAlignedObjectArray_Vec3:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_btCollisionObject(
    btAlignedObjectArray_btCollisionObject that
    ) = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__copy_ctor__a6da715f423177a36475a6ae00c1f590";

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_btCollisionObject.__ctor(
    ) = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__ctor__74d518fb727c5a4ab76063fbaf6d4338";

/// \dfgPresetOmit
btAlignedObjectArray_btCollisionObject(
    ) {
    this.__ctor(
        );
}

~btAlignedObjectArray_btCollisionObject() = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__dtor__809065074182594d9afb9a71e02ddf12";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_btCollisionObject.cxx_size?(
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__CO__meth_size__eeade343ab8b78662f36d97c4cfdc412";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_clear!(
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_clear__5178a5a9ee24de7a8e0f5acc29b48e99";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_pop_back!(
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_pop_back__1daf073e755aa5a1483df9dcdd955134";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_resizeNoInitialize__fd8f58a2984343f841aaf55ed9914943";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_resize!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_resize__be8c7e5a19716d3ca48b228b3aa3c08f";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_push_back!(
    CxxbtCollisionObjectRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_push_back__044a1accbee040355d229171f6667827";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_btCollisionObject.cxx_capacity?(
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__CO__meth_capacity__800e5116f30cabe0a9dde2c96f8152da";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_reserve!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_reserve__c0fb2e2e7b785d517fd046eb0a5d5c26";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_swap__56bbec73ca0d88036c86603cb3cb7a6d";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_btCollisionObject.cxx_findBinarySearch?(
    CxxbtCollisionObjectRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__CO__meth_findBinarySearch__59828283b591b7f7cd855fcc2b4d6960";

/// \dfgPresetOmit
/// \internal
SInt32
btAlignedObjectArray_btCollisionObject.cxx_findLinearSearch?(
    CxxbtCollisionObjectRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__CO__meth_findLinearSearch__aea61fc9476750192b729d5969103cf8";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_removeAtIndex!(
    SInt32 _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_removeAtIndex__db66370dbe745e9535959eb60f510205";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_remove!(
    CxxbtCollisionObjectRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_remove__83387327bad6368738eb04d0e70989a7";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_initializeFromBuffer__e76a9d829ccae055d21f17c2f2c6d35c";

/// \dfgPresetOmit
/// \internal

btAlignedObjectArray_btCollisionObject.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_btCollisionObjectConstRef _arg0
    )
 = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__meth_copyFromArray__ec4228ccb920106855e2716790f1ed03";


btAlignedObjectArray_btCollisionObject.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_btCollisionObject.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

SInt32
btAlignedObjectArray_btCollisionObject.findLinearSearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_btCollisionObject.remove!(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_btCollisionObject.copyFromArray!(
    in
    btAlignedObjectArray_btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_btCollisionObjectConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_btCollisionObjectConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_btCollisionObject.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}


btAlignedObjectArray_btCollisionObject.push_back!(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}


btAlignedObjectArray_btCollisionObject.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

SInt32
btAlignedObjectArray_btCollisionObject.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

SInt32
btAlignedObjectArray_btCollisionObject.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}


btAlignedObjectArray_btCollisionObject.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

SInt32
btAlignedObjectArray_btCollisionObject.findBinarySearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}


btAlignedObjectArray_btCollisionObject.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_btCollisionObject.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}


btAlignedObjectArray_btCollisionObject.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAlignedObjectArray_btCollisionObject.=(
    btAlignedObjectArray_btCollisionObject that
    ) = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__simple_ass_op__659e6c84119ec8be44ca35489ce7160b";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionObject
btAlignedObjectArray_btCollisionObject.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__btAlignedObjectArray_btCollisionObject__CO__get_ind_op__90d88f8de2997fd9fa8fd49e83901c55";

//////////////////////////////////////////////////////////////////////////////
// KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAlignedObjectArray_btCollisionObject.cxx_setAtIndex!(
    UInt64 index,
    btCollisionObject value
    )
  = "Bullet2__btAlignedObjectArray_btCollisionObject__MU__set_ind_op__40c3cdf2882bbfe6db423a6a6d34a8b3";



/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_btCollisionObject.appendDesc(io String string) {
  string += "btAlignedObjectArray_btCollisionObject:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMotionState() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btMotionState(
    btMotionState that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btMotionState.cxx_delete() = "Bullet2__btMotionState__MU__delete__53b775c8f9968e479ebd99e7f0fa713b";

//////////////////////////////////////////////////////////////////////////////
// KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMotionState.cxx_getWorldTransform?(
    CxxbtTransformRef worldTrans
    )
 = "Bullet2__btMotionState__CO__meth_getWorldTransform__749891e6a1865efb14aa7fada5e805a6";

/// \dfgPresetOmit
/// \internal

btMotionState.cxx_setWorldTransform!(
    CxxbtTransformConstRef worldTrans
    )
 = "Bullet2__btMotionState__MU__meth_setWorldTransform__de13da00e9e5cb66e2d78e04dc46f352";


btMotionState.getWorldTransform?(
    io
    btTransform
    worldTrans
    
    
    )
{   
    
    CxxbtTransformRef worldTrans__cxx = Make_CxxbtTransformRef(worldTrans);
    
    this.cxx_getWorldTransform(
        worldTrans__cxx
        );
    
    
    
}


btMotionState.setWorldTransform!(
    in
    btTransform
    worldTrans
    
    
    )
{   
    
    CxxbtTransformConstRef worldTrans__cxx = Make_CxxbtTransformConstRef(worldTrans);
    
    this.cxx_setWorldTransform(
        worldTrans__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMotionState] EDK[Fabric_EDK_KL_btMotionState] LIB[btMotionState *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMotionState.=(
    btMotionState that
    ) = "Bullet2__btMotionState__MU__simple_ass_op__1276ca307cddb4e1c2afbbb0671ec304";


/// \dfgPresetOmit
/// \internal
btMotionState.appendDesc(io String string) {
  string += "btMotionState:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDefaultMotionState() = "Bullet2__btDefaultMotionState__MU__empty_ctor__85f4b6567bb7cbca8e8db347fe2f33e9";

/// \dfgPresetOmit
btDefaultMotionState(
    btDefaultMotionState that
    ) = "Bullet2__btDefaultMotionState__MU__copy_ctor__0ffba6e4ae1ecc9a4aa8d2e0a6fb596f";

/// \dfgPresetOmit
/// \internal
btDefaultMotionState.__ctor(
    ) = "Bullet2__btDefaultMotionState__MU__ctor__ba7be93f5f06c21d6d69dfa6147855ba";

/// \dfgPresetOmit
btDefaultMotionState(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btDefaultMotionState.__ctor(
    CxxbtTransformConstRef startTrans
    ) = "Bullet2__btDefaultMotionState__MU__ctor__5eb9d6d7fba3aa306eeb654b0168e661";

/// \dfgPresetOmit
btDefaultMotionState(
    CxxbtTransformConstRef startTrans
    ) {
    this.__ctor(
        startTrans
        );
}

/// \dfgPresetOmit
/// \internal
btDefaultMotionState.__ctor(
    CxxbtTransformConstRef startTrans,
    CxxbtTransformConstRef centerOfMassOffset
    ) = "Bullet2__btDefaultMotionState__MU__ctor__b8abfe0b84f727560c9b7b7a6e756c3c";

/// \dfgPresetOmit
btDefaultMotionState(
    CxxbtTransformConstRef startTrans,
    CxxbtTransformConstRef centerOfMassOffset
    ) {
    this.__ctor(
        startTrans,
        centerOfMassOffset
        );
}

btDefaultMotionState(
    in
    btTransform
    startTrans
    
    ,
    in
    btTransform
    centerOfMassOffset
    
    
    ) {
    
    CxxbtTransformConstRef startTrans__cxx = Make_CxxbtTransformConstRef(startTrans);
    
    CxxbtTransformConstRef centerOfMassOffset__cxx = Make_CxxbtTransformConstRef(centerOfMassOffset);
    this.__ctor(
        startTrans__cxx,
        centerOfMassOffset__cxx
        );
    
    
}

btDefaultMotionState(
    in
    btTransform
    startTrans
    
    
    ) {
    
    CxxbtTransformConstRef startTrans__cxx = Make_CxxbtTransformConstRef(startTrans);
    this.__ctor(
        startTrans__cxx
        );
    
}

btDefaultMotionState.cxx_delete() = "Bullet2__btDefaultMotionState__MU__delete__d29d9fe81712e16668f920490bed53a7";

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///synchronizes world transform from user to physics
/// \dfgPresetOmit
/// \internal

btDefaultMotionState.cxx_getWorldTransform?(
    CxxbtTransformRef centerOfMassWorldTrans
    )
 = "Bullet2__btDefaultMotionState__CO__meth_getWorldTransform__c13ea6087c7981abaa92c6bb36ed2719";

///synchronizes world transform from physics to user
///Bullet only calls the update of worldtransform for active objects
/// \dfgPresetOmit
/// \internal

btDefaultMotionState.cxx_setWorldTransform!(
    CxxbtTransformConstRef centerOfMassWorldTrans
    )
 = "Bullet2__btDefaultMotionState__MU__meth_setWorldTransform__d9e6e0b40e8886ea2b5deca900dfea7d";

///synchronizes world transform from user to physics

btDefaultMotionState.getWorldTransform?(
    io
    btTransform
    centerOfMassWorldTrans
    
    
    )
{   
    
    CxxbtTransformRef centerOfMassWorldTrans__cxx = Make_CxxbtTransformRef(centerOfMassWorldTrans);
    
    this.cxx_getWorldTransform(
        centerOfMassWorldTrans__cxx
        );
    
    
    
}

///synchronizes world transform from physics to user
///Bullet only calls the update of worldtransform for active objects

btDefaultMotionState.setWorldTransform!(
    in
    btTransform
    centerOfMassWorldTrans
    
    
    )
{   
    
    CxxbtTransformConstRef centerOfMassWorldTrans__cxx = Make_CxxbtTransformConstRef(centerOfMassWorldTrans);
    
    this.cxx_setWorldTransform(
        centerOfMassWorldTrans__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultMotionState] EDK[Fabric_EDK_KL_btDefaultMotionState] LIB[btDefaultMotionState *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDefaultMotionState.=(
    btDefaultMotionState that
    ) = "Bullet2__btDefaultMotionState__MU__simple_ass_op__ba581c50c68a92972b0fe5d164f353ee";


/// \dfgPresetOmit
/// \internal
btDefaultMotionState.appendDesc(io String string) {
  string += "btDefaultMotionState:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_UInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt32] LIB[btAlignedObjectArray< unsigned int >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32ConstPtr] EDK[CxxbtAlignedObjectArray_UInt32ConstPtr] LIB[btAlignedObjectArray< unsigned int > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32ConstPtr] EDK[CxxbtAlignedObjectArray_UInt32ConstPtr] LIB[btAlignedObjectArray< unsigned int > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_size on null CxxbtAlignedObjectArray_UInt32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_capacity on null CxxbtAlignedObjectArray_UInt32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_findBinarySearch?(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_UInt32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_findLinearSearch?(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_UInt32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.findBinarySearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.findLinearSearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32ConstPtr] EDK[CxxbtAlignedObjectArray_UInt32ConstPtr] LIB[btAlignedObjectArray< unsigned int > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt32
CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_getAtIndex on null CxxbtAlignedObjectArray_UInt32ConstPtr";
    return this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32Ptr] EDK[CxxbtAlignedObjectArray_UInt32MutablePtr] LIB[btAlignedObjectArray< unsigned int > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32Ptr] EDK[CxxbtAlignedObjectArray_UInt32MutablePtr] LIB[btAlignedObjectArray< unsigned int > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ptr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_size on null CxxbtAlignedObjectArray_UInt32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_clear on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_pop_back on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_resize on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_push_back!(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_push_back on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ptr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_capacity on null CxxbtAlignedObjectArray_UInt32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_reserve on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_swap on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ptr.cxx_findBinarySearch?(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_UInt32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ptr.cxx_findLinearSearch?(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_UInt32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_removeAtIndex on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_remove!(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_remove on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_UInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_copyFromArray on null CxxbtAlignedObjectArray_UInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.remove!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.copyFromArray!(
    in
    btAlignedObjectArray_UInt32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_UInt32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_UInt32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ptr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ptr.findBinarySearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ptr.findLinearSearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ptr.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ptr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32Ptr] EDK[CxxbtAlignedObjectArray_UInt32MutablePtr] LIB[btAlignedObjectArray< unsigned int > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt32
CxxbtAlignedObjectArray_UInt32Ptr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_getAtIndex on null CxxbtAlignedObjectArray_UInt32Ptr";
    return this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32Ptr] EDK[CxxbtAlignedObjectArray_UInt32MutablePtr] LIB[btAlignedObjectArray< unsigned int > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_UInt32Ptr.cxx_setAtIndex!(
    UInt64 index,
    UInt32 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_setAtIndex on null CxxbtAlignedObjectArray_UInt32Ptr";
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32ConstRef] EDK[CxxbtAlignedObjectArray_UInt32ConstRef] LIB[btAlignedObjectArray< unsigned int > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32ConstRef] EDK[CxxbtAlignedObjectArray_UInt32ConstRef] LIB[btAlignedObjectArray< unsigned int > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32ConstRef] EDK[CxxbtAlignedObjectArray_UInt32ConstRef] LIB[btAlignedObjectArray< unsigned int > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstRef.cxx_size on null CxxbtAlignedObjectArray_UInt32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstRef.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstRef.cxx_capacity on null CxxbtAlignedObjectArray_UInt32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstRef.cxx_findBinarySearch?(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstRef.cxx_findBinarySearch on null CxxbtAlignedObjectArray_UInt32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstRef.cxx_findLinearSearch?(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstRef.cxx_findLinearSearch on null CxxbtAlignedObjectArray_UInt32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstRef.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstRef.findBinarySearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstRef.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32ConstRef.findLinearSearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32ConstRef] EDK[CxxbtAlignedObjectArray_UInt32ConstRef] LIB[btAlignedObjectArray< unsigned int > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt32
CxxbtAlignedObjectArray_UInt32ConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32ConstRef.cxx_getAtIndex on null CxxbtAlignedObjectArray_UInt32ConstRef";
    return this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32Ref] EDK[CxxbtAlignedObjectArray_UInt32MutableRef] LIB[btAlignedObjectArray< unsigned int > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32Ref] EDK[CxxbtAlignedObjectArray_UInt32MutableRef] LIB[btAlignedObjectArray< unsigned int > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ref.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_size on null CxxbtAlignedObjectArray_UInt32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_clear on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_pop_back on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_resize on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_push_back!(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_push_back on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ref.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_capacity on null CxxbtAlignedObjectArray_UInt32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_reserve on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_swap on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ref.cxx_findBinarySearch?(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_findBinarySearch on null CxxbtAlignedObjectArray_UInt32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ref.cxx_findLinearSearch?(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_findLinearSearch on null CxxbtAlignedObjectArray_UInt32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_removeAtIndex on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_remove!(
    CxxUInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_remove on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_UInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_copyFromArray on null CxxbtAlignedObjectArray_UInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ref.findLinearSearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ref.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ref.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.copyFromArray!(
    in
    btAlignedObjectArray_UInt32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_UInt32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_UInt32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.remove!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt32Ref.findBinarySearch?(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    CxxUInt32ConstRef _arg0__cxx = Make_CxxUInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt32Ref.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32Ref] EDK[CxxbtAlignedObjectArray_UInt32MutableRef] LIB[btAlignedObjectArray< unsigned int > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt32
CxxbtAlignedObjectArray_UInt32Ref.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_getAtIndex on null CxxbtAlignedObjectArray_UInt32Ref";
    return this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt32Ref] EDK[CxxbtAlignedObjectArray_UInt32MutableRef] LIB[btAlignedObjectArray< unsigned int > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_UInt32Ref.cxx_setAtIndex!(
    UInt64 index,
    UInt32 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_setAtIndex on null CxxbtAlignedObjectArray_UInt32Ref";
    this.ptr.data()->{ btAlignedObjectArray_UInt32 }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxbtAlignedObjectArray_UInt32ConstPtr
// CxxbtAlignedObjectArray_UInt32Ptr
// CxxbtAlignedObjectArray_UInt32ConstRef
// CxxbtAlignedObjectArray_UInt32Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstPtr(btAlignedObjectArray_UInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstPtr(btAlignedObjectArray_UInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstPtr(btAlignedObjectArray_UInt32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstPtr Make_CxxbtAlignedObjectArray_UInt32ConstPtr(btAlignedObjectArray_UInt32 value) {
  return CxxbtAlignedObjectArray_UInt32ConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ptr(btAlignedObjectArray_UInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ptr(btAlignedObjectArray_UInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ptr(btAlignedObjectArray_UInt32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ptr Make_CxxbtAlignedObjectArray_UInt32Ptr(btAlignedObjectArray_UInt32 value) {
  return CxxbtAlignedObjectArray_UInt32Ptr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef(btAlignedObjectArray_UInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef(btAlignedObjectArray_UInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef(btAlignedObjectArray_UInt32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef Make_CxxbtAlignedObjectArray_UInt32ConstRef(btAlignedObjectArray_UInt32 value) {
  return CxxbtAlignedObjectArray_UInt32ConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref(btAlignedObjectArray_UInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref(btAlignedObjectArray_UInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref(btAlignedObjectArray_UInt32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref Make_CxxbtAlignedObjectArray_UInt32Ref(btAlignedObjectArray_UInt32 value) {
  return CxxbtAlignedObjectArray_UInt32Ref(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtAlignedObjectArray_UInt32ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtAlignedObjectArray_UInt32ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_getAt on null CxxbtAlignedObjectArray_UInt32ConstPtr";
  return CxxbtAlignedObjectArray_UInt32ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt32()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef CxxbtAlignedObjectArray_UInt32ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtAlignedObjectArray_UInt32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref CxxbtAlignedObjectArray_UInt32Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_getAt on null CxxbtAlignedObjectArray_UInt32Ptr";
  return CxxbtAlignedObjectArray_UInt32Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt32()));
}

/// Same as for CxxbtAlignedObjectArray_UInt32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref CxxbtAlignedObjectArray_UInt32Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ptr.cxx_setAt(Index i, btAlignedObjectArray_UInt32 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt32Ptr.cxx_setAt on null CxxbtAlignedObjectArray_UInt32Ptr";
  this.ptr.offset(i)->{ btAlignedObjectArray_UInt32 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef(CxxbtAlignedObjectArray_UInt32ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef.=(CxxbtAlignedObjectArray_UInt32ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btAlignedObjectArray_UInt32 value
/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32 CxxbtAlignedObjectArray_UInt32ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt32ConstRef.cxx_get on null CxxbtAlignedObjectArray_UInt32ConstRef";
  return this.ptr.data()->{ btAlignedObjectArray_UInt32 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref.cxx_set(btAlignedObjectArray_UInt32 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt32Ref.cxx_set on null CxxbtAlignedObjectArray_UInt32Ref";
  this.ptr.data()->{ btAlignedObjectArray_UInt32 } = value;
}

/// Assignment of btAlignedObjectArray_UInt32
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref.=(btAlignedObjectArray_UInt32 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt32Ref.appendDesc(io String s) {
  s += this.cxx_get();
}






//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean HullResult.cxx_get_mPolygons()
  = "Bullet2__HullResult__CO__getter_mPolygons__d2d671167496ae27999158b71e5a7962";

Boolean
HullResult.get_mPolygons()
{
    Boolean __res = 
    this.cxx_get_mPolygons();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullResult.cxx_set_mPolygons!(Boolean value)
  = "Bullet2__HullResult__MU__setter_mPolygons__3a52c1d8e4a47f7f9a64e1b7e44ac4e9";

HullResult.set_mPolygons!(
    Boolean value
   )
{
    
    this.cxx_set_mPolygons(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 HullResult.cxx_get_mNumOutputVertices()
  = "Bullet2__HullResult__CO__getter_mNumOutputVertices__dc9771a29c193659e77adfc2c38f9986";

UInt32
HullResult.get_mNumOutputVertices()
{
    UInt32 __res = 
    this.cxx_get_mNumOutputVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullResult.cxx_set_mNumOutputVertices!(UInt32 value)
  = "Bullet2__HullResult__MU__setter_mNumOutputVertices__a5826c265de8f17c258c48ce73a20208";

HullResult.set_mNumOutputVertices!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumOutputVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3 HullResult.cxx_get_m_OutputVertices()
  = "Bullet2__HullResult__CO__getter_m_OutputVertices__399091dfa6efedc2c809b3c6f14770bb";

btAlignedObjectArray_Vec3
HullResult.get_m_OutputVertices()
{
    btAlignedObjectArray_Vec3 __res = 
    this.cxx_get_m_OutputVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullResult.cxx_set_m_OutputVertices!(btAlignedObjectArray_Vec3 value)
  = "Bullet2__HullResult__MU__setter_m_OutputVertices__5b196b86aa1264e9aac209dffa8c265c";

HullResult.set_m_OutputVertices!(
    btAlignedObjectArray_Vec3 value
   )
{
    
    this.cxx_set_m_OutputVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 HullResult.cxx_get_mNumFaces()
  = "Bullet2__HullResult__CO__getter_mNumFaces__d2b5ef733609e74efd5402be4d34e563";

UInt32
HullResult.get_mNumFaces()
{
    UInt32 __res = 
    this.cxx_get_mNumFaces();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullResult.cxx_set_mNumFaces!(UInt32 value)
  = "Bullet2__HullResult__MU__setter_mNumFaces__38fbfd96a7ed855f2f0276fc489f3c9e";

HullResult.set_mNumFaces!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumFaces(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 HullResult.cxx_get_mNumIndices()
  = "Bullet2__HullResult__CO__getter_mNumIndices__785c11e82b3b2e17b674148713d52d07";

UInt32
HullResult.get_mNumIndices()
{
    UInt32 __res = 
    this.cxx_get_mNumIndices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullResult.cxx_set_mNumIndices!(UInt32 value)
  = "Bullet2__HullResult__MU__setter_mNumIndices__1af9b22b69e91ad02d43a62a5019b26f";

HullResult.set_mNumIndices!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumIndices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32 HullResult.cxx_get_m_Indices()
  = "Bullet2__HullResult__CO__getter_m_Indices__0b35b5ed3b7fb87d0117327523fd042f";

btAlignedObjectArray_UInt32
HullResult.get_m_Indices()
{
    btAlignedObjectArray_UInt32 __res = 
    this.cxx_get_m_Indices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullResult.cxx_set_m_Indices!(btAlignedObjectArray_UInt32 value)
  = "Bullet2__HullResult__MU__setter_m_Indices__4e7ca74331b3d669986b71f8ec848542";

HullResult.set_m_Indices!(
    btAlignedObjectArray_UInt32 value
   )
{
    
    this.cxx_set_m_Indices(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
HullResult(
    HullResult that
    ) = "Bullet2__HullResult__MU__copy_ctor__d236293045af9ad42fd484a310dfdc58";

/// \dfgPresetOmit
/// \internal
HullResult.__ctor(
    ) = "Bullet2__HullResult__MU__ctor__23164ae2411803dc3cbde744d39ca19f";

/// \dfgPresetOmit
HullResult(
    ) {
    this.__ctor(
        );
}

~HullResult() = "Bullet2__HullResult__MU__dtor__1f6413d59dd616f31ba82353d13d9b78";

//////////////////////////////////////////////////////////////////////////////
// KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

HullResult.=(
    HullResult that
    ) = "Bullet2__HullResult__MU__simple_ass_op__4b32526842432864f2aad45ea693be40";



/// \dfgPresetOmit
/// \internal
HullResult.appendDesc(io String string) {
  string += "HullResult:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "mPolygons:";
    string += this.cxx_get_mPolygons();
    string += ",";
    string += "mNumOutputVertices:";
    string += this.cxx_get_mNumOutputVertices();
    string += ",";
    string += "m_OutputVertices:";
    string += this.cxx_get_m_OutputVertices();
    string += ",";
    string += "mNumFaces:";
    string += this.cxx_get_mNumFaces();
    string += ",";
    string += "mNumIndices:";
    string += this.cxx_get_mNumIndices();
    string += ",";
    string += "m_Indices:";
    string += this.cxx_get_m_Indices();
    string += "}";
  }
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt32 HullDesc.cxx_get_mFlags()
  = "Bullet2__HullDesc__CO__getter_mFlags__a096a97f7d30c504f648a60c616aab1f";

UInt32
HullDesc.get_mFlags()
{
    UInt32 __res = 
    this.cxx_get_mFlags();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullDesc.cxx_set_mFlags!(UInt32 value)
  = "Bullet2__HullDesc__MU__setter_mFlags__df91e464f39d8a4a8a3dd909e25213b0";

HullDesc.set_mFlags!(
    UInt32 value
   )
{
    
    this.cxx_set_mFlags(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 HullDesc.cxx_get_mVcount()
  = "Bullet2__HullDesc__CO__getter_mVcount__82857dea3b46b916ef305b9dac4662c8";

UInt32
HullDesc.get_mVcount()
{
    UInt32 __res = 
    this.cxx_get_mVcount();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullDesc.cxx_set_mVcount!(UInt32 value)
  = "Bullet2__HullDesc__MU__setter_mVcount__8860898662304bc6a98995fd671fa5e4";

HullDesc.set_mVcount!(
    UInt32 value
   )
{
    
    this.cxx_set_mVcount(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr HullDesc.cxx_get_mVertices()
  = "Bullet2__HullDesc__CO__getter_mVertices__205e75f4ec287c43d920babac776a09b";

btVector3
HullDesc.get_mVertices()
{
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_get_mVertices();
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullDesc.cxx_set_mVertices!(CxxbtVector3ConstPtr value)
  = "Bullet2__HullDesc__MU__setter_mVertices__a34efdcc8ab5eef58e79f3f36c2d09ff";

HullDesc.set_mVertices!(
    btVector3 value
   )
{
    
    CxxbtVector3ConstPtr value__cxx = Make_CxxbtVector3ConstPtr(value);
    this.cxx_set_mVertices(
        value__cxx
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 HullDesc.cxx_get_mVertexStride()
  = "Bullet2__HullDesc__CO__getter_mVertexStride__39ec40cdbcd8d945bdf39d980dafa572";

UInt32
HullDesc.get_mVertexStride()
{
    UInt32 __res = 
    this.cxx_get_mVertexStride();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullDesc.cxx_set_mVertexStride!(UInt32 value)
  = "Bullet2__HullDesc__MU__setter_mVertexStride__a533d0dc5e49b9d8de5ab08e491f219e";

HullDesc.set_mVertexStride!(
    UInt32 value
   )
{
    
    this.cxx_set_mVertexStride(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 HullDesc.cxx_get_mNormalEpsilon()
  = "Bullet2__HullDesc__CO__getter_mNormalEpsilon__77fbd85b901bc199debec337b3842426";

Float32
HullDesc.get_mNormalEpsilon()
{
    Float32 __res = 
    this.cxx_get_mNormalEpsilon();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullDesc.cxx_set_mNormalEpsilon!(Float32 value)
  = "Bullet2__HullDesc__MU__setter_mNormalEpsilon__0f5f9fdbc540b22766604e70c9da17eb";

HullDesc.set_mNormalEpsilon!(
    Float32 value
   )
{
    
    this.cxx_set_mNormalEpsilon(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 HullDesc.cxx_get_mMaxVertices()
  = "Bullet2__HullDesc__CO__getter_mMaxVertices__9c0647af7f2e0b1925a334e1b9e933e6";

UInt32
HullDesc.get_mMaxVertices()
{
    UInt32 __res = 
    this.cxx_get_mMaxVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullDesc.cxx_set_mMaxVertices!(UInt32 value)
  = "Bullet2__HullDesc__MU__setter_mMaxVertices__a1de27dd21f74174116f2ea94b20cf29";

HullDesc.set_mMaxVertices!(
    UInt32 value
   )
{
    
    this.cxx_set_mMaxVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 HullDesc.cxx_get_mMaxFaces()
  = "Bullet2__HullDesc__CO__getter_mMaxFaces__13391c3b39c104a214c067bdb4d9d7a3";

UInt32
HullDesc.get_mMaxFaces()
{
    UInt32 __res = 
    this.cxx_get_mMaxFaces();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
HullDesc.cxx_set_mMaxFaces!(UInt32 value)
  = "Bullet2__HullDesc__MU__setter_mMaxFaces__86e2ebdb9f04cf907369489a0d3ba1a1";

HullDesc.set_mMaxFaces!(
    UInt32 value
   )
{
    
    this.cxx_set_mMaxFaces(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
HullDesc(
    HullDesc that
    ) = "Bullet2__HullDesc__MU__copy_ctor__0542b5b070009bdef81e51692f7d3cee";

/// \dfgPresetOmit
/// \internal
HullDesc.__ctor(
    ) = "Bullet2__HullDesc__MU__ctor__55141acfda50c3cef9a14649fa7244c4";

/// \dfgPresetOmit
HullDesc(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
HullDesc.__ctor(
    HullFlag flag,
    UInt32 vcount,
    CxxbtVector3ConstPtr vertices
    ) = "Bullet2__HullDesc__MU__ctor__57a33b68016c6450303ba289798e6036";

/// \dfgPresetOmit
HullDesc(
    HullFlag flag,
    UInt32 vcount,
    CxxbtVector3ConstPtr vertices
    ) {
    this.__ctor(
        flag,
        vcount,
        vertices
        );
}

/// \dfgPresetOmit
/// \internal
HullDesc.__ctor(
    HullFlag flag,
    UInt32 vcount,
    CxxbtVector3ConstPtr vertices,
    UInt32 stride
    ) = "Bullet2__HullDesc__MU__ctor__122b6ea5c900e2bd64e76caff105f0f3";

/// \dfgPresetOmit
HullDesc(
    HullFlag flag,
    UInt32 vcount,
    CxxbtVector3ConstPtr vertices,
    UInt32 stride
    ) {
    this.__ctor(
        flag,
        vcount,
        vertices,
        stride
        );
}

HullDesc(
    in
    HullFlag
    flag
    
    ,
    in
    UInt32
    vcount
    
    ,
    in
    btVector3
    vertices
    
    ,
    in
    UInt32
    stride
    
    
    ) {
    
    
    
    CxxbtVector3ConstPtr vertices__cxx = Make_CxxbtVector3ConstPtr(vertices);
    
    this.__ctor(
        flag,
        vcount,
        vertices__cxx,
        stride
        );
    
    
    
    
}

HullDesc(
    in
    HullFlag
    flag
    
    ,
    in
    UInt32
    vcount
    
    ,
    in
    btVector3
    vertices
    
    
    ) {
    
    
    
    CxxbtVector3ConstPtr vertices__cxx = Make_CxxbtVector3ConstPtr(vertices);
    this.__ctor(
        flag,
        vcount,
        vertices__cxx
        );
    
    
    
}

~HullDesc() = "Bullet2__HullDesc__MU__dtor__0b4c0f04f0eccc7efd647d122ee8d9df";

//////////////////////////////////////////////////////////////////////////////
// KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
HullDesc.cxx_HasHullFlag?(
    HullFlag flag
    )
 = "Bullet2__HullDesc__CO__meth_HasHullFlag__dcf8a41ef900283ef53449d9e6b96f99";

/// \dfgPresetOmit
/// \internal

HullDesc.cxx_SetHullFlag!(
    HullFlag flag
    )
 = "Bullet2__HullDesc__MU__meth_SetHullFlag__625ab2c61d977350d5c412d67420a944";

/// \dfgPresetOmit
/// \internal

HullDesc.cxx_ClearHullFlag!(
    HullFlag flag
    )
 = "Bullet2__HullDesc__MU__meth_ClearHullFlag__f7f3dec46429fb38629aef2fa0a989b5";

Boolean
HullDesc.HasHullFlag?(
    in
    HullFlag
    flag
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_HasHullFlag(
        flag
        );
    
    
    return __res;
}


HullDesc.ClearHullFlag!(
    in
    HullFlag
    flag
    
    
    )
{   
    
    
    this.cxx_ClearHullFlag(
        flag
        );
    
    
    
}


HullDesc.SetHullFlag!(
    in
    HullFlag
    flag
    
    
    )
{   
    
    
    this.cxx_SetHullFlag(
        flag
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

HullDesc.=(
    HullDesc that
    ) = "Bullet2__HullDesc__MU__simple_ass_op__dec6c7e911fd401705019aa9be484d59";



/// \dfgPresetOmit
/// \internal
HullDesc.appendDesc(io String string) {
  string += "HullDesc:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "mFlags:";
    string += this.cxx_get_mFlags();
    string += ",";
    string += "mVcount:";
    string += this.cxx_get_mVcount();
    string += ",";
    string += "mVertices:";
    string += this.cxx_get_mVertices();
    string += ",";
    string += "mVertexStride:";
    string += this.cxx_get_mVertexStride();
    string += ",";
    string += "mNormalEpsilon:";
    string += this.cxx_get_mNormalEpsilon();
    string += ",";
    string += "mMaxVertices:";
    string += this.cxx_get_mMaxVertices();
    string += ",";
    string += "mMaxFaces:";
    string += this.cxx_get_mMaxFaces();
    string += "}";
  }
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btPlane] EDK[Fabric_EDK_KL_btPlane] LIB[btPlane]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPlane] EDK[Fabric_EDK_KL_btPlane] LIB[btPlane]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3 btPlane.cxx_get_normal()
  = "Bullet2__btPlane__CO__getter_normal__1ebfabc97bbcaca3d1eb3d5cac5c1fd2";

btVector3
btPlane.get_normal()
{
    btVector3 __res = 
    this.cxx_get_normal();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btPlane.cxx_set_normal!(btVector3 value)
  = "Bullet2__btPlane__MU__setter_normal__3e54e6556f3b89da7b4523591909b19b";

btPlane.set_normal!(
    btVector3 value
   )
{
    
    this.cxx_set_normal(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btPlane.cxx_get_dist()
  = "Bullet2__btPlane__CO__getter_dist__351c865e4fbf863ddff971b3e1cce03f";

Float32
btPlane.get_dist()
{
    Float32 __res = 
    this.cxx_get_dist();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btPlane.cxx_set_dist!(Float32 value)
  = "Bullet2__btPlane__MU__setter_dist__4c9e6841842fcec00317b019eb646d7a";

btPlane.set_dist!(
    Float32 value
   )
{
    
    this.cxx_set_dist(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[btPlane] EDK[Fabric_EDK_KL_btPlane] LIB[btPlane]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btPlane(
    btPlane that
    ) = "Bullet2__btPlane__MU__copy_ctor__e7d825fda115f3ae85b5b9c88c75edbd";

/// \dfgPresetOmit
/// \internal
btPlane.__ctor(
    CxxbtVector3ConstRef n,
    Float32 d
    ) = "Bullet2__btPlane__MU__ctor__5f52b02220ef90d391e234c71a450c51";

/// \dfgPresetOmit
btPlane(
    CxxbtVector3ConstRef n,
    Float32 d
    ) {
    this.__ctor(
        n,
        d
        );
}

/// \dfgPresetOmit
/// \internal
btPlane.__ctor(
    ) = "Bullet2__btPlane__MU__ctor__f7a99f2f45b0e125c43322296362c215";

/// \dfgPresetOmit
btPlane(
    ) {
    this.__ctor(
        );
}

btPlane(
    in
    btVector3
    n
    
    ,
    in
    Float32
    d
    
    
    ) {
    
    CxxbtVector3ConstRef n__cxx = Make_CxxbtVector3ConstRef(n);
    
    this.__ctor(
        n__cxx,
        d
        );
    
    
}

~btPlane() = "Bullet2__btPlane__MU__dtor__d8ca3cb8bad3a430883fa2b9e2477783";

//////////////////////////////////////////////////////////////////////////////
// KL[btPlane] EDK[Fabric_EDK_KL_btPlane] LIB[btPlane]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPlane] EDK[Fabric_EDK_KL_btPlane] LIB[btPlane]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPlane] EDK[Fabric_EDK_KL_btPlane] LIB[btPlane]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPlane.=(
    btPlane that
    ) = "Bullet2__btPlane__MU__simple_ass_op__d430a02b00bc2336834b5ad0a18d2e27";



/// \dfgPresetOmit
/// \internal
btPlane.appendDesc(io String string) {
  string += "btPlane:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "normal:";
    string += this.cxx_get_normal();
    string += ",";
    string += "dist:";
    string += this.cxx_get_dist();
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[ConvexH] EDK[Fabric_EDK_KL_ConvexH] LIB[ConvexH]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH] EDK[Fabric_EDK_KL_ConvexH] LIB[ConvexH]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3 ConvexH.cxx_get_vertices()
  = "Bullet2__ConvexH__CO__getter_vertices__2a94fa75daa37c9a4d74cebf7e3997bc";

btAlignedObjectArray_Vec3
ConvexH.get_vertices()
{
    btAlignedObjectArray_Vec3 __res = 
    this.cxx_get_vertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
ConvexH.cxx_set_vertices!(btAlignedObjectArray_Vec3 value)
  = "Bullet2__ConvexH__MU__setter_vertices__a781c3daa3ff3efbfe30e3b0838d4fa9";

ConvexH.set_vertices!(
    btAlignedObjectArray_Vec3 value
   )
{
    
    this.cxx_set_vertices(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH] EDK[Fabric_EDK_KL_ConvexH] LIB[ConvexH]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
ConvexH(
    ConvexH that
    ) = "Bullet2__ConvexH__MU__copy_ctor__27e1a57321946631d1cece309c2d1728";

/// \dfgPresetOmit
/// \internal
ConvexH.__ctor(
    ) = "Bullet2__ConvexH__MU__ctor__dec92b6b28cc0caa6354a12cef96f7b0";

/// \dfgPresetOmit
ConvexH(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
ConvexH.__ctor(
    SInt32 vertices_size,
    SInt32 edges_size,
    SInt32 facets_size
    ) = "Bullet2__ConvexH__MU__ctor__10ad9e07acbcbec13630d5b336edc444";

/// \dfgPresetOmit
ConvexH(
    SInt32 vertices_size,
    SInt32 edges_size,
    SInt32 facets_size
    ) {
    this.__ctor(
        vertices_size,
        edges_size,
        facets_size
        );
}

~ConvexH() = "Bullet2__ConvexH__MU__dtor__5fd3bcf5cbfd399e0d5185496eea075c";

//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH] EDK[Fabric_EDK_KL_ConvexH] LIB[ConvexH]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH] EDK[Fabric_EDK_KL_ConvexH] LIB[ConvexH]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH] EDK[Fabric_EDK_KL_ConvexH] LIB[ConvexH]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

ConvexH.=(
    ConvexH that
    ) = "Bullet2__ConvexH__MU__simple_ass_op__738eef3854b6a0f413d96e969add4afc";



/// \dfgPresetOmit
/// \internal
ConvexH.appendDesc(io String string) {
  string += "ConvexH:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "vertices:";
    string += this.cxx_get_vertices();
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[ConvexH_HalfEdge] EDK[Fabric_EDK_KL_ConvexH_HalfEdge] LIB[ConvexH::HalfEdge]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH_HalfEdge] EDK[Fabric_EDK_KL_ConvexH_HalfEdge] LIB[ConvexH::HalfEdge]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt16 ConvexH_HalfEdge.cxx_get_ea()
  = "Bullet2__ConvexH_HalfEdge__CO__getter_ea__b1c4cc6ea99bfc04545aa7dd4305db9d";

SInt16
ConvexH_HalfEdge.get_ea()
{
    SInt16 __res = 
    this.cxx_get_ea();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
ConvexH_HalfEdge.cxx_set_ea!(SInt16 value)
  = "Bullet2__ConvexH_HalfEdge__MU__setter_ea__103e4baddae06be338426a74fd96381f";

ConvexH_HalfEdge.set_ea!(
    SInt16 value
   )
{
    
    this.cxx_set_ea(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt8 ConvexH_HalfEdge.cxx_get_v()
  = "Bullet2__ConvexH_HalfEdge__CO__getter_v__1bab364991e74d729e47609dd109b6a8";

UInt8
ConvexH_HalfEdge.get_v()
{
    UInt8 __res = 
    this.cxx_get_v();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
ConvexH_HalfEdge.cxx_set_v!(UInt8 value)
  = "Bullet2__ConvexH_HalfEdge__MU__setter_v__b0ab9c8197ec38daebae24d86d007a2e";

ConvexH_HalfEdge.set_v!(
    UInt8 value
   )
{
    
    this.cxx_set_v(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt8 ConvexH_HalfEdge.cxx_get_p()
  = "Bullet2__ConvexH_HalfEdge__CO__getter_p__d07fcb97287046c0612e1f70cfead49a";

UInt8
ConvexH_HalfEdge.get_p()
{
    UInt8 __res = 
    this.cxx_get_p();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
ConvexH_HalfEdge.cxx_set_p!(UInt8 value)
  = "Bullet2__ConvexH_HalfEdge__MU__setter_p__431e0f6b8eb2d33adf85582abe0c03a1";

ConvexH_HalfEdge.set_p!(
    UInt8 value
   )
{
    
    this.cxx_set_p(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH_HalfEdge] EDK[Fabric_EDK_KL_ConvexH_HalfEdge] LIB[ConvexH::HalfEdge]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
ConvexH_HalfEdge(
    ConvexH_HalfEdge that
    ) = "Bullet2__ConvexH_HalfEdge__MU__copy_ctor__479e988e6e31aebb51d3e282fb18742b";

/// \dfgPresetOmit
/// \internal
ConvexH_HalfEdge.__ctor(
    ) = "Bullet2__ConvexH_HalfEdge__MU__ctor__5febf67837e7860c9154f6c06dec6985";

/// \dfgPresetOmit
ConvexH_HalfEdge(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
ConvexH_HalfEdge.__ctor(
    SInt16 _ea,
    UInt8 _v,
    UInt8 _p
    ) = "Bullet2__ConvexH_HalfEdge__MU__ctor__4e267e2f979c772ddd015d4bde56038b";

/// \dfgPresetOmit
ConvexH_HalfEdge(
    SInt16 _ea,
    UInt8 _v,
    UInt8 _p
    ) {
    this.__ctor(
        _ea,
        _v,
        _p
        );
}

~ConvexH_HalfEdge() = "Bullet2__ConvexH_HalfEdge__MU__dtor__46ab103aae89b5a162d71c925ef9e67f";

//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH_HalfEdge] EDK[Fabric_EDK_KL_ConvexH_HalfEdge] LIB[ConvexH::HalfEdge]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH_HalfEdge] EDK[Fabric_EDK_KL_ConvexH_HalfEdge] LIB[ConvexH::HalfEdge]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[ConvexH_HalfEdge] EDK[Fabric_EDK_KL_ConvexH_HalfEdge] LIB[ConvexH::HalfEdge]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

ConvexH_HalfEdge.=(
    ConvexH_HalfEdge that
    ) = "Bullet2__ConvexH_HalfEdge__MU__simple_ass_op__806b7057fc04f779e86832e1a7678cff";



/// \dfgPresetOmit
/// \internal
ConvexH_HalfEdge.appendDesc(io String string) {
  string += "ConvexH_HalfEdge:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "ea:";
    string += this.cxx_get_ea();
    string += ",";
    string += "v:";
    string += this.cxx_get_v();
    string += ",";
    string += "p:";
    string += this.cxx_get_p();
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32 int4.cxx_get_x()
  = "Bullet2__int4__CO__getter_x__52cac0ce31534da3088355aa5b9b145a";

SInt32
int4.get_x()
{
    SInt32 __res = 
    this.cxx_get_x();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
int4.cxx_set_x!(SInt32 value)
  = "Bullet2__int4__MU__setter_x__9ad25bfbc33929bb65a8d891fddc844f";

int4.set_x!(
    SInt32 value
   )
{
    
    this.cxx_set_x(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 int4.cxx_get_y()
  = "Bullet2__int4__CO__getter_y__56c7e01ed440b25525169ca0ac02ec56";

SInt32
int4.get_y()
{
    SInt32 __res = 
    this.cxx_get_y();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
int4.cxx_set_y!(SInt32 value)
  = "Bullet2__int4__MU__setter_y__b2fa9de7230a45a7ea3027a8d7cd28c4";

int4.set_y!(
    SInt32 value
   )
{
    
    this.cxx_set_y(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 int4.cxx_get_z()
  = "Bullet2__int4__CO__getter_z__91ed261581960681f854fffdeac38d98";

SInt32
int4.get_z()
{
    SInt32 __res = 
    this.cxx_get_z();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
int4.cxx_set_z!(SInt32 value)
  = "Bullet2__int4__MU__setter_z__c40bc3b242bf4f40389333a5bf3645e4";

int4.set_z!(
    SInt32 value
   )
{
    
    this.cxx_set_z(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 int4.cxx_get_w()
  = "Bullet2__int4__CO__getter_w__6fd5556fecd8238aac3af54addfd01fe";

SInt32
int4.get_w()
{
    SInt32 __res = 
    this.cxx_get_w();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
int4.cxx_set_w!(SInt32 value)
  = "Bullet2__int4__MU__setter_w__9a6ba80209a9362679191503ea61c99d";

int4.set_w!(
    SInt32 value
   )
{
    
    this.cxx_set_w(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
int4(
    int4 that
    ) = "Bullet2__int4__MU__copy_ctor__1f6ce8bb4d58ab9d7d9c9f52e244f5fd";

/// \dfgPresetOmit
/// \internal
int4.__ctor(
    ) = "Bullet2__int4__MU__ctor__7cefb6ce8b2e18f36f4e058eeba00adc";

/// \dfgPresetOmit
int4(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
int4.__ctor(
    SInt32 _x,
    SInt32 _y,
    SInt32 _z,
    SInt32 _w
    ) = "Bullet2__int4__MU__ctor__53f470978ccde964d5dfc0a8c300dc85";

/// \dfgPresetOmit
int4(
    SInt32 _x,
    SInt32 _y,
    SInt32 _z,
    SInt32 _w
    ) {
    this.__ctor(
        _x,
        _y,
        _z,
        _w
        );
}

~int4() = "Bullet2__int4__MU__dtor__74c0483fa80395e542f2ce9ee1873c3b";

//////////////////////////////////////////////////////////////////////////////
// KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

int4.=(
    int4 that
    ) = "Bullet2__int4__MU__simple_ass_op__8adc2c59ff388ad3bb654dc94b1f1775";

//////////////////////////////////////////////////////////////////////////////
// KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
int4.cxx_getAtIndex(
    UInt64 index
    )
  = "Bullet2__int4__CO__get_ind_op__6edd7afa708a308b7df03355fd794874";

//////////////////////////////////////////////////////////////////////////////
// KL[int4] EDK[Fabric_EDK_KL_int4] LIB[int4]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
int4.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt32Ref value
    )
  = "Bullet2__int4__MU__set_ind_op__36d108f492691bcb697d1b38557964db";



/// \dfgPresetOmit
/// \internal
int4.appendDesc(io String string) {
  string += "int4:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "x:";
    string += this.cxx_get_x();
    string += ",";
    string += "y:";
    string += this.cxx_get_y();
    string += ",";
    string += "z:";
    string += this.cxx_get_z();
    string += ",";
    string += "w:";
    string += this.cxx_get_w();
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[PHullResult] EDK[Fabric_EDK_KL_PHullResult] LIB[PHullResult]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[PHullResult] EDK[Fabric_EDK_KL_PHullResult] LIB[PHullResult]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt32 PHullResult.cxx_get_mVcount()
  = "Bullet2__PHullResult__CO__getter_mVcount__6dfdbd36d98f5c04d150576a78dd0900";

UInt32
PHullResult.get_mVcount()
{
    UInt32 __res = 
    this.cxx_get_mVcount();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
PHullResult.cxx_set_mVcount!(UInt32 value)
  = "Bullet2__PHullResult__MU__setter_mVcount__273bc8b542f468702aee1366d11eb0e3";

PHullResult.set_mVcount!(
    UInt32 value
   )
{
    
    this.cxx_set_mVcount(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 PHullResult.cxx_get_mIndexCount()
  = "Bullet2__PHullResult__CO__getter_mIndexCount__b5c6cdbb5831b4feef0bc84a373e8107";

UInt32
PHullResult.get_mIndexCount()
{
    UInt32 __res = 
    this.cxx_get_mIndexCount();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
PHullResult.cxx_set_mIndexCount!(UInt32 value)
  = "Bullet2__PHullResult__MU__setter_mIndexCount__2c1958d825b6333e247a4dd39f1894a0";

PHullResult.set_mIndexCount!(
    UInt32 value
   )
{
    
    this.cxx_set_mIndexCount(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 PHullResult.cxx_get_mFaceCount()
  = "Bullet2__PHullResult__CO__getter_mFaceCount__b03df825c3682e3ad108788fb59e274d";

UInt32
PHullResult.get_mFaceCount()
{
    UInt32 __res = 
    this.cxx_get_mFaceCount();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
PHullResult.cxx_set_mFaceCount!(UInt32 value)
  = "Bullet2__PHullResult__MU__setter_mFaceCount__bc597729ccab30e6bc65706cd300a82a";

PHullResult.set_mFaceCount!(
    UInt32 value
   )
{
    
    this.cxx_set_mFaceCount(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr PHullResult.cxx_get_mVertices()
  = "Bullet2__PHullResult__CO__getter_mVertices__81e6cf8c767d0c4cb06a0df68790a69d";

btVector3
PHullResult.get_mVertices()
{
    CxxbtVector3Ptr __res_cxx = 
    this.cxx_get_mVertices();
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3Ptr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
PHullResult.cxx_set_mVertices!(CxxbtVector3Ptr value)
  = "Bullet2__PHullResult__MU__setter_mVertices__58a41f2b2d6dafad9eb14f13815771fc";

PHullResult.set_mVertices!(
    btVector3 value
   )
{
    
    CxxbtVector3Ptr value__cxx = Make_CxxbtVector3Ptr(value);
    this.cxx_set_mVertices(
        value__cxx
        );
    
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32 PHullResult.cxx_get_m_Indices()
  = "Bullet2__PHullResult__CO__getter_m_Indices__e10937815b3541b6085571b4b26a0389";

btAlignedObjectArray_UInt32
PHullResult.get_m_Indices()
{
    btAlignedObjectArray_UInt32 __res = 
    this.cxx_get_m_Indices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
PHullResult.cxx_set_m_Indices!(btAlignedObjectArray_UInt32 value)
  = "Bullet2__PHullResult__MU__setter_m_Indices__28152f0898b2ac2d5110a667935ae3f2";

PHullResult.set_m_Indices!(
    btAlignedObjectArray_UInt32 value
   )
{
    
    this.cxx_set_m_Indices(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[PHullResult] EDK[Fabric_EDK_KL_PHullResult] LIB[PHullResult]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
PHullResult(
    PHullResult that
    ) = "Bullet2__PHullResult__MU__copy_ctor__70748e864711b5b1d8857d88865dbc92";

/// \dfgPresetOmit
/// \internal
PHullResult.__ctor(
    ) = "Bullet2__PHullResult__MU__ctor__ac2fbabeea4aa377d021d9bac3f0011e";

/// \dfgPresetOmit
PHullResult(
    ) {
    this.__ctor(
        );
}

~PHullResult() = "Bullet2__PHullResult__MU__dtor__239d6d4e15da8ba15455e5b9e5e4c1e5";

//////////////////////////////////////////////////////////////////////////////
// KL[PHullResult] EDK[Fabric_EDK_KL_PHullResult] LIB[PHullResult]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[PHullResult] EDK[Fabric_EDK_KL_PHullResult] LIB[PHullResult]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[PHullResult] EDK[Fabric_EDK_KL_PHullResult] LIB[PHullResult]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

PHullResult.=(
    PHullResult that
    ) = "Bullet2__PHullResult__MU__simple_ass_op__7dbb602aca73ee6b31ca115ff1b12147";



/// \dfgPresetOmit
/// \internal
PHullResult.appendDesc(io String string) {
  string += "PHullResult:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "mVcount:";
    string += this.cxx_get_mVcount();
    string += ",";
    string += "mIndexCount:";
    string += this.cxx_get_mIndexCount();
    string += ",";
    string += "mFaceCount:";
    string += this.cxx_get_mFaceCount();
    string += ",";
    string += "mVertices:";
    string += this.cxx_get_mVertices();
    string += ",";
    string += "m_Indices:";
    string += this.cxx_get_m_Indices();
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

HullLibrary() = "Bullet2__HullLibrary__MU__empty_ctor__f4c1bd9423b5310aab04a9ddf3d88962";

/// \dfgPresetOmit
HullLibrary(
    HullLibrary that
    ) = "Bullet2__HullLibrary__MU__copy_ctor__ec255394790a368887584868af9b3386";

~HullLibrary() = "Bullet2__HullLibrary__MU__dtor__91ea95989bed1001909c4a20bda5fdd2";

//////////////////////////////////////////////////////////////////////////////
// KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
HullError
HullLibrary.cxx_CreateConvexHull!(
    CxxHullDescConstRef desc,
    CxxHullResultRef result
    )
 = "Bullet2__HullLibrary__MU__meth_CreateConvexHull__b9dc68692e7a3f7427587d27d06acb6d";

/// \dfgPresetOmit
/// \internal
HullError
HullLibrary.cxx_ReleaseResult!(
    CxxHullResultRef result
    )
 = "Bullet2__HullLibrary__MU__meth_ReleaseResult__3351f51a14020dc85ca3c8a9beba1a72";

HullError
HullLibrary.ReleaseResult!(
    io
    HullResult
    result
    
    
    )
{   
    
    CxxHullResultRef result__cxx = Make_CxxHullResultRef(result);
    HullError __res = 
    this.cxx_ReleaseResult(
        result__cxx
        );
    
    
    return __res;
}

HullError
HullLibrary.CreateConvexHull!(
    in
    HullDesc
    desc
    
    ,
    io
    HullResult
    result
    
    
    )
{   
    
    CxxHullDescConstRef desc__cxx = Make_CxxHullDescConstRef(desc);
    
    CxxHullResultRef result__cxx = Make_CxxHullResultRef(result);
    HullError __res = 
    this.cxx_CreateConvexHull(
        desc__cxx,
        result__cxx
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[HullLibrary] EDK[Fabric_EDK_KL_HullLibrary] LIB[HullLibrary]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

HullLibrary.=(
    HullLibrary that
    ) = "Bullet2__HullLibrary__MU__simple_ass_op__5d67cd797cefb3a90dd5dfe617d41910";



/// \dfgPresetOmit
/// \internal
HullLibrary.appendDesc(io String string) {
  string += "HullLibrary:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btPolarDecomposition() = "Bullet2__btPolarDecomposition__MU__empty_ctor__185f9283073623de2a6fcae2375b5e55";

/// \dfgPresetOmit
btPolarDecomposition(
    btPolarDecomposition that
    ) = "Bullet2__btPolarDecomposition__MU__copy_ctor__43c4774cf4bd11bb8ad4671467335265";

/// \dfgPresetOmit
/// \internal
btPolarDecomposition.__ctor(
    ) = "Bullet2__btPolarDecomposition__MU__ctor__44495967c492d1e536372681aec62e08";

/**
     * Creates an instance with optional parameters.
     *
     * @param tolerance     - the tolerance used to determine convergence of the
     *                        algorithm
     * @param maxIterations - the maximum number of iterations used to achieve
     *                        convergence
     */
/// \dfgPresetOmit
btPolarDecomposition(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btPolarDecomposition.__ctor(
    Float32 tolerance
    ) = "Bullet2__btPolarDecomposition__MU__ctor__4a83c3428dbe91568a438c6638e018ea";

/// \dfgPresetOmit
btPolarDecomposition(
    Float32 tolerance
    ) {
    this.__ctor(
        tolerance
        );
}

/// \dfgPresetOmit
/// \internal
btPolarDecomposition.__ctor(
    Float32 tolerance,
    UInt32 maxIterations
    ) = "Bullet2__btPolarDecomposition__MU__ctor__dcb27e716823bb2ee5b31830082d2c5f";

/// \dfgPresetOmit
btPolarDecomposition(
    Float32 tolerance,
    UInt32 maxIterations
    ) {
    this.__ctor(
        tolerance,
        maxIterations
        );
}

~btPolarDecomposition() = "Bullet2__btPolarDecomposition__MU__dtor__d5d4e0e775c342f1f9122fb77ba967c0";

//////////////////////////////////////////////////////////////////////////////
// KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**
     * Decomposes a matrix into orthogonal and symmetric, positive-definite
     * parts. If the number of iterations returned by this function is equal to
     * the maximum number of iterations, the algorithm has failed to converge.
     *
     * @param a - the original matrix
     * @param u - the resulting orthogonal matrix
     * @param h - the resulting symmetric matrix
     *
     * @return the number of iterations performed by the algorithm.
     */
/// \dfgPresetOmit
/// \internal
UInt32
btPolarDecomposition.cxx_decompose?(
    CxxbtMatrix3x3ConstRef a,
    CxxbtMatrix3x3Ref u,
    CxxbtMatrix3x3Ref h
    )
 = "Bullet2__btPolarDecomposition__CO__meth_decompose__b229d36e982ae3a2d5e5d273b61a1b6a";

/**
     * Returns the maximum number of iterations that this algorithm will perform
     * to achieve convergence.
     *
     * @return maximum number of iterations
     */
/// \dfgPresetOmit
/// \internal
UInt32
btPolarDecomposition.cxx_maxIterations?(
    )
 = "Bullet2__btPolarDecomposition__CO__meth_maxIterations__1b00462fbe1156f42522aef53a12677f";

/**
     * Returns the maximum number of iterations that this algorithm will perform
     * to achieve convergence.
     *
     * @return maximum number of iterations
     */
UInt32
btPolarDecomposition.maxIterations?(
    )
{   
    UInt32 __res = 
    this.cxx_maxIterations(
        );
    
    return __res;
}

/**
     * Decomposes a matrix into orthogonal and symmetric, positive-definite
     * parts. If the number of iterations returned by this function is equal to
     * the maximum number of iterations, the algorithm has failed to converge.
     *
     * @param a - the original matrix
     * @param u - the resulting orthogonal matrix
     * @param h - the resulting symmetric matrix
     *
     * @return the number of iterations performed by the algorithm.
     */
UInt32
btPolarDecomposition.decompose?(
    in
    btMatrix3x3
    a
    
    ,
    io
    btMatrix3x3
    u
    
    ,
    io
    btMatrix3x3
    h
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef a__cxx = Make_CxxbtMatrix3x3ConstRef(a);
    
    CxxbtMatrix3x3Ref u__cxx = Make_CxxbtMatrix3x3Ref(u);
    
    CxxbtMatrix3x3Ref h__cxx = Make_CxxbtMatrix3x3Ref(h);
    UInt32 __res = 
    this.cxx_decompose(
        a__cxx,
        u__cxx,
        h__cxx
        );
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolarDecomposition] EDK[Fabric_EDK_KL_btPolarDecomposition] LIB[btPolarDecomposition]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPolarDecomposition.=(
    btPolarDecomposition that
    ) = "Bullet2__btPolarDecomposition__MU__simple_ass_op__733a4730ab75950008874403eb155d9e";



/// \dfgPresetOmit
/// \internal
btPolarDecomposition.appendDesc(io String string) {
  string += "btPolarDecomposition:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhNode() = "Bullet2__btQuantizedBvhNode__MU__empty_ctor__1f898b62c4cb746b057b26643ea2d7c0";

/// \dfgPresetOmit
btQuantizedBvhNode(
    btQuantizedBvhNode that
    ) = "Bullet2__btQuantizedBvhNode__MU__copy_ctor__2f722c1813b506ef97910d1a1e7e4e4b";

btQuantizedBvhNode.cxx_delete() = "Bullet2__btQuantizedBvhNode__MU__delete__6a16c82825d26dbc6d1e4eb6378a9c4e";

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btQuantizedBvhNode.cxx_isLeafNode?(
    )
 = "Bullet2__btQuantizedBvhNode__CO__meth_isLeafNode__1d95157cabe3feea57bb72f74e89e82e";

/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvhNode.cxx_getEscapeIndex?(
    )
 = "Bullet2__btQuantizedBvhNode__CO__meth_getEscapeIndex__0057f6e2daec05aebafe1514f8b7c697";

/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvhNode.cxx_getTriangleIndex?(
    )
 = "Bullet2__btQuantizedBvhNode__CO__meth_getTriangleIndex__c36529b209b7939d65793eb9dec7042c";

/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvhNode.cxx_getPartId?(
    )
 = "Bullet2__btQuantizedBvhNode__CO__meth_getPartId__e8072c0617c856cabc15dfe321937b38";

Boolean
btQuantizedBvhNode.isLeafNode?(
    )
{   
    Boolean __res = 
    this.cxx_isLeafNode(
        );
    
    return __res;
}

SInt32
btQuantizedBvhNode.getPartId?(
    )
{   
    SInt32 __res = 
    this.cxx_getPartId(
        );
    
    return __res;
}

SInt32
btQuantizedBvhNode.getEscapeIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getEscapeIndex(
        );
    
    return __res;
}

SInt32
btQuantizedBvhNode.getTriangleIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getTriangleIndex(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNode] EDK[Fabric_EDK_KL_btQuantizedBvhNode] LIB[btQuantizedBvhNode *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhNode.=(
    btQuantizedBvhNode that
    ) = "Bullet2__btQuantizedBvhNode__MU__simple_ass_op__516c22a252a5aacc61a2af614f37a141";


/// \dfgPresetOmit
/// \internal
btQuantizedBvhNode.appendDesc(io String string) {
  string += "btQuantizedBvhNode:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNode] EDK[Fabric_EDK_KL_btOptimizedBvhNode] LIB[btOptimizedBvhNode *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNode] EDK[Fabric_EDK_KL_btOptimizedBvhNode] LIB[btOptimizedBvhNode *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNode] EDK[Fabric_EDK_KL_btOptimizedBvhNode] LIB[btOptimizedBvhNode *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btOptimizedBvhNode() = "Bullet2__btOptimizedBvhNode__MU__empty_ctor__d2732e5335776d8768cafcfba0478d6d";

/// \dfgPresetOmit
btOptimizedBvhNode(
    btOptimizedBvhNode that
    ) = "Bullet2__btOptimizedBvhNode__MU__copy_ctor__82f3377327057991d920e7a584492510";

btOptimizedBvhNode.cxx_delete() = "Bullet2__btOptimizedBvhNode__MU__delete__0e956022fac42e2b01dead26c31afd7e";

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNode] EDK[Fabric_EDK_KL_btOptimizedBvhNode] LIB[btOptimizedBvhNode *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNode] EDK[Fabric_EDK_KL_btOptimizedBvhNode] LIB[btOptimizedBvhNode *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNode] EDK[Fabric_EDK_KL_btOptimizedBvhNode] LIB[btOptimizedBvhNode *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btOptimizedBvhNode.=(
    btOptimizedBvhNode that
    ) = "Bullet2__btOptimizedBvhNode__MU__simple_ass_op__351ad6ac4aefb55ff3b97b38bddf2c94";


/// \dfgPresetOmit
/// \internal
btOptimizedBvhNode.appendDesc(io String string) {
  string += "btOptimizedBvhNode:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btBvhSubtreeInfo(
    btBvhSubtreeInfo that
    ) = "Bullet2__btBvhSubtreeInfo__MU__copy_ctor__2e85765b950efdfdb10a7c8becda8c6d";

/// \dfgPresetOmit
/// \internal
btBvhSubtreeInfo.__ctor(
    ) = "Bullet2__btBvhSubtreeInfo__MU__ctor__afa978cafaaf01a06c550251eb307d54";

/// \dfgPresetOmit
btBvhSubtreeInfo(
    ) {
    this.__ctor(
        );
}

btBvhSubtreeInfo.cxx_delete() = "Bullet2__btBvhSubtreeInfo__MU__delete__cfd977074ff3f8d5d1540946064b4011";

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btBvhSubtreeInfo.cxx_setAabbFromQuantizeNode!(
    btQuantizedBvhNode quantizedNode
    )
 = "Bullet2__btBvhSubtreeInfo__MU__meth_setAabbFromQuantizeNode__3b04ca910ab117aff21f64bd3e455e51";


btBvhSubtreeInfo.setAabbFromQuantizeNode!(
    in
    btQuantizedBvhNode
    quantizedNode
    
    
    )
{   
    
    
    this.cxx_setAabbFromQuantizeNode(
        quantizedNode
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfo] EDK[Fabric_EDK_KL_btBvhSubtreeInfo] LIB[btBvhSubtreeInfo *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBvhSubtreeInfo.=(
    btBvhSubtreeInfo that
    ) = "Bullet2__btBvhSubtreeInfo__MU__simple_ass_op__e8be00805587077dda0eaa9013c007dd";


/// \dfgPresetOmit
/// \internal
btBvhSubtreeInfo.appendDesc(io String string) {
  string += "btBvhSubtreeInfo:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btNodeOverlapCallback() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btNodeOverlapCallback(
    btNodeOverlapCallback that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btNodeOverlapCallback.cxx_delete() = "Bullet2__btNodeOverlapCallback__MU__delete__eee917ab40a35b1483bfe972b63eab00";

//////////////////////////////////////////////////////////////////////////////
// KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btNodeOverlapCallback.cxx_processNode!(
    SInt32 subPart,
    SInt32 triangleIndex
    )
 = "Bullet2__btNodeOverlapCallback__MU__meth_processNode__17f6bf5e2fdbbbb0f42f2e94e586d170";


btNodeOverlapCallback.processNode!(
    in
    SInt32
    subPart
    
    ,
    in
    SInt32
    triangleIndex
    
    
    )
{   
    
    
    
    this.cxx_processNode(
        subPart,
        triangleIndex
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btNodeOverlapCallback] EDK[Fabric_EDK_KL_btNodeOverlapCallback] LIB[btNodeOverlapCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btNodeOverlapCallback.=(
    btNodeOverlapCallback that
    ) = "Bullet2__btNodeOverlapCallback__MU__simple_ass_op__9a6eae88e090649142ba7c7195ba6d04";


/// \dfgPresetOmit
/// \internal
btNodeOverlapCallback.appendDesc(io String string) {
  string += "btNodeOverlapCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btQuantizedBvh(
    btQuantizedBvh that
    ) = "Bullet2__btQuantizedBvh__MU__copy_ctor__05d962abcbd01d9dad4094a6087111f3";

/// \dfgPresetOmit
/// \internal
btQuantizedBvh.__ctor(
    ) = "Bullet2__btQuantizedBvh__MU__ctor__0673a535d128d18557b798f7728dff79";

/// \dfgPresetOmit
btQuantizedBvh(
    ) {
    this.__ctor(
        );
}

btQuantizedBvh.cxx_delete() = "Bullet2__btQuantizedBvh__MU__delete__a50aa2ba58157bfe928e9b339ea52dd8";

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///***************************************** expert/internal use only *************************
/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_setQuantizationValues!(
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax
    )
 = "Bullet2__btQuantizedBvh__MU__meth_setQuantizationValues__666e881e8492bcf5a7ebfdfd39b34084";

/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_setQuantizationValues!(
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax,
    Float32 quantizationMargin
    )
 = "Bullet2__btQuantizedBvh__MU__meth_setQuantizationValues__4663b1a8a2fe8592bfec5851d1395cfb";

///buildInternal is expert use only: assumes that setQuantizationValues and LeafNodeArray are initialized
/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_buildInternal!(
    )
 = "Bullet2__btQuantizedBvh__MU__meth_buildInternal__7046ef3e5aa5b27e1d379b8ac102d00e";

///***************************************** expert/internal use only *************************
/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_reportAabbOverlappingNodex?(
    btNodeOverlapCallback nodeCallback,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btQuantizedBvh__CO__meth_reportAabbOverlappingNodex__030298f580a4480a93dd4ace4ea4611e";

/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_reportRayOverlappingNodex?(
    btNodeOverlapCallback nodeCallback,
    CxxbtVector3ConstRef raySource,
    CxxbtVector3ConstRef rayTarget
    )
 = "Bullet2__btQuantizedBvh__CO__meth_reportRayOverlappingNodex__0ee25e371a46c99c8f8077039ce4a34e";

/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_reportBoxCastOverlappingNodex?(
    btNodeOverlapCallback nodeCallback,
    CxxbtVector3ConstRef raySource,
    CxxbtVector3ConstRef rayTarget,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btQuantizedBvh__CO__meth_reportBoxCastOverlappingNodex__9caafe703a309635eb1ad1bd752a6344";

/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_quantize?(
    CxxUInt16Ptr out_,
    CxxbtVector3ConstRef point,
    SInt32 isMax
    )
 = "Bullet2__btQuantizedBvh__CO__meth_quantize__e5cbb5cb6cc81f6030cf2e2264dc534d";

/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_quantizeWithClamp?(
    CxxUInt16Ptr out_,
    CxxbtVector3ConstRef point2,
    SInt32 isMax
    )
 = "Bullet2__btQuantizedBvh__CO__meth_quantizeWithClamp__494391d11f9e5aef6c775a04c38b3cd5";

/// \dfgPresetOmit
/// \internal
btVector3
btQuantizedBvh.cxx_unQuantize?(
    CxxUInt16ConstPtr vecIn
    )
 = "Bullet2__btQuantizedBvh__CO__meth_unQuantize__fa5192e5483a6ee3319ac7ac1a571e6c";

///setTraversalMode let's you choose between stackless, recursive or stackless cache friendly tree traversal. Note this is only implemented for quantized trees.
/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_setTraversalMode!(
    btQuantizedBvh_btTraversalMode traversalMode
    )
 = "Bullet2__btQuantizedBvh__MU__meth_setTraversalMode__4aa2342a163b905d3356b70b825d3430";

/////Calculate space needed to store BVH for serialization
/// \dfgPresetOmit
/// \internal
UInt32
btQuantizedBvh.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btQuantizedBvh__CO__meth_calculateSerializeBufferSize__f39c57c6d772ddbf2455b7dc0b4c69e0";

/// Data buffer MUST be 16 byte aligned
/// \dfgPresetOmit
/// \internal
Boolean
btQuantizedBvh.cxx_serialize?(
    Data o_alignedDataBuffer,
    UInt32 i_dataBufferSize,
    Boolean i_swapEndian
    )
 = "Bullet2__btQuantizedBvh__CO__meth_serialize__f5dceac2fe5864e4e66641db1af8cd69";

///deSerializeInPlace loads and initializes a BVH from a buffer in memory 'in place'
/// \dfgPresetOmit
/// \internal
btQuantizedBvh
btQuantizedBvh_CxxdeSerializeInPlace(
    Data i_alignedDataBuffer,
    UInt32 i_dataBufferSize,
    Boolean i_swapEndian
    )
 = "Bullet2__btQuantizedBvh__ST__meth_deSerializeInPlace__867308593f7f8fa417b7eb27d13aebaa";

/// \dfgPresetOmit
/// \internal
UInt32
btQuantizedBvh_CxxgetAlignmentSerializationPadding(
    )
 = "Bullet2__btQuantizedBvh__ST__meth_getAlignmentSerializationPadding__4e994728c88ba9fe7835b44288181e25";

//////////////////////////////////////////////////////////////////////
/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvh.cxx_calculateSerializeBufferSizeNew?(
    )
 = "Bullet2__btQuantizedBvh__CO__meth_calculateSerializeBufferSizeNew__92447ff921e0f2f7079e2f5054b31f3f";

/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_deSerializeFloat!(
    btQuantizedBvhFloatData quantizedBvhFloatData
    )
 = "Bullet2__btQuantizedBvh__MU__meth_deSerializeFloat__fa4a0e1004e0e24e8b53abda5374f9c3";

/// \dfgPresetOmit
/// \internal

btQuantizedBvh.cxx_deSerializeDouble!(
    btQuantizedBvhDoubleData quantizedBvhDoubleData
    )
 = "Bullet2__btQuantizedBvh__MU__meth_deSerializeDouble__59ebb80d41832ee637c54419cd41de8d";

////////////////////////////////////////////////////////////////////
/// \dfgPresetOmit
/// \internal
Boolean
btQuantizedBvh.cxx_isQuantized!(
    )
 = "Bullet2__btQuantizedBvh__MU__meth_isQuantized__6d1cf90ed1739da540fc981cdc4f5d00";


btQuantizedBvh.reportBoxCastOverlappingNodex?(
    in
    btNodeOverlapCallback
    nodeCallback
    
    ,
    in
    btVector3
    raySource
    
    ,
    in
    btVector3
    rayTarget
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtVector3ConstRef raySource__cxx = Make_CxxbtVector3ConstRef(raySource);
    
    CxxbtVector3ConstRef rayTarget__cxx = Make_CxxbtVector3ConstRef(rayTarget);
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_reportBoxCastOverlappingNodex(
        nodeCallback,
        raySource__cxx,
        rayTarget__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
    
    
}


btQuantizedBvh.setQuantizationValues!(
    in
    btVector3
    bvhAabbMin
    
    ,
    in
    btVector3
    bvhAabbMax
    
    ,
    in
    Float32
    quantizationMargin
    
    
    )
{   
    
    CxxbtVector3ConstRef bvhAabbMin__cxx = Make_CxxbtVector3ConstRef(bvhAabbMin);
    
    CxxbtVector3ConstRef bvhAabbMax__cxx = Make_CxxbtVector3ConstRef(bvhAabbMax);
    
    
    this.cxx_setQuantizationValues(
        bvhAabbMin__cxx,
        bvhAabbMax__cxx,
        quantizationMargin
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////
SInt32
btQuantizedBvh.calculateSerializeBufferSizeNew?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSizeNew(
        );
    
    return __res;
}

///setTraversalMode let's you choose between stackless, recursive or stackless cache friendly tree traversal. Note this is only implemented for quantized trees.

btQuantizedBvh.setTraversalMode!(
    in
    btQuantizedBvh_btTraversalMode
    traversalMode
    
    
    )
{   
    
    
    this.cxx_setTraversalMode(
        traversalMode
        );
    
    
    
}

UInt32
btQuantizedBvh_getAlignmentSerializationPadding(
    )
{   
    UInt32 __res = 
    btQuantizedBvh_CxxgetAlignmentSerializationPadding(
        );
    
    return __res;
}

btVector3
btQuantizedBvh.unQuantize?(
    in
    UInt16
    vecIn
    
    
    )
{   
    
    CxxUInt16ConstPtr vecIn__cxx = Make_CxxUInt16ConstPtr(vecIn);
    btVector3 __res = 
    this.cxx_unQuantize(
        vecIn__cxx
        );
    
    
    return __res;
}

///buildInternal is expert use only: assumes that setQuantizationValues and LeafNodeArray are initialized

btQuantizedBvh.buildInternal!(
    )
{   
    
    this.cxx_buildInternal(
        );
    
    
}

///***************************************** expert/internal use only *************************

btQuantizedBvh.setQuantizationValues!(
    in
    btVector3
    bvhAabbMin
    
    ,
    in
    btVector3
    bvhAabbMax
    
    
    )
{   
    
    CxxbtVector3ConstRef bvhAabbMin__cxx = Make_CxxbtVector3ConstRef(bvhAabbMin);
    
    CxxbtVector3ConstRef bvhAabbMax__cxx = Make_CxxbtVector3ConstRef(bvhAabbMax);
    
    this.cxx_setQuantizationValues(
        bvhAabbMin__cxx,
        bvhAabbMax__cxx
        );
    
    
    
    
}


btQuantizedBvh.reportRayOverlappingNodex?(
    in
    btNodeOverlapCallback
    nodeCallback
    
    ,
    in
    btVector3
    raySource
    
    ,
    in
    btVector3
    rayTarget
    
    
    )
{   
    
    
    CxxbtVector3ConstRef raySource__cxx = Make_CxxbtVector3ConstRef(raySource);
    
    CxxbtVector3ConstRef rayTarget__cxx = Make_CxxbtVector3ConstRef(rayTarget);
    
    this.cxx_reportRayOverlappingNodex(
        nodeCallback,
        raySource__cxx,
        rayTarget__cxx
        );
    
    
    
    
    
}

/// Data buffer MUST be 16 byte aligned
Boolean
btQuantizedBvh.serialize?(
    in
    Data
    o_alignedDataBuffer
    
    ,
    in
    UInt32
    i_dataBufferSize
    
    ,
    in
    Boolean
    i_swapEndian
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_serialize(
        o_alignedDataBuffer,
        i_dataBufferSize,
        i_swapEndian
        );
    
    
    
    
    return __res;
}


btQuantizedBvh.deSerializeFloat!(
    in
    btQuantizedBvhFloatData
    quantizedBvhFloatData
    
    
    )
{   
    
    
    this.cxx_deSerializeFloat(
        quantizedBvhFloatData
        );
    
    
    
}


btQuantizedBvh.quantize?(
    io
    UInt16
    out_
    
    ,
    in
    btVector3
    point
    
    ,
    in
    SInt32
    isMax
    
    
    )
{   
    
    CxxUInt16Ptr out___cxx = Make_CxxUInt16Ptr(out_);
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    
    
    this.cxx_quantize(
        out___cxx,
        point__cxx,
        isMax
        );
    
    
    
    
    
}

///***************************************** expert/internal use only *************************

btQuantizedBvh.reportAabbOverlappingNodex?(
    in
    btNodeOverlapCallback
    nodeCallback
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_reportAabbOverlappingNodex(
        nodeCallback,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

/////Calculate space needed to store BVH for serialization
UInt32
btQuantizedBvh.calculateSerializeBufferSize?(
    )
{   
    UInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

///deSerializeInPlace loads and initializes a BVH from a buffer in memory 'in place'
btQuantizedBvh
btQuantizedBvh_deSerializeInPlace(
    in
    Data
    i_alignedDataBuffer
    
    ,
    in
    UInt32
    i_dataBufferSize
    
    ,
    in
    Boolean
    i_swapEndian
    
    
    )
{   
    
    
    
    btQuantizedBvh __res = 
    btQuantizedBvh_CxxdeSerializeInPlace(
        i_alignedDataBuffer,
        i_dataBufferSize,
        i_swapEndian
        );
    
    
    
    
    return __res;
}


btQuantizedBvh.deSerializeDouble!(
    in
    btQuantizedBvhDoubleData
    quantizedBvhDoubleData
    
    
    )
{   
    
    
    this.cxx_deSerializeDouble(
        quantizedBvhDoubleData
        );
    
    
    
}


btQuantizedBvh.quantizeWithClamp?(
    io
    UInt16
    out_
    
    ,
    in
    btVector3
    point2
    
    ,
    in
    SInt32
    isMax
    
    
    )
{   
    
    CxxUInt16Ptr out___cxx = Make_CxxUInt16Ptr(out_);
    
    CxxbtVector3ConstRef point2__cxx = Make_CxxbtVector3ConstRef(point2);
    
    
    this.cxx_quantizeWithClamp(
        out___cxx,
        point2__cxx,
        isMax
        );
    
    
    
    
    
}

////////////////////////////////////////////////////////////////////
Boolean
btQuantizedBvh.isQuantized!(
    )
{   
    Boolean __res = 
    this.cxx_isQuantized(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvh] EDK[Fabric_EDK_KL_btQuantizedBvh] LIB[btQuantizedBvh *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvh.=(
    btQuantizedBvh that
    ) = "Bullet2__btQuantizedBvh__MU__simple_ass_op__4026e8443af37b5235e6cd6d60ab4937";


/// \dfgPresetOmit
/// \internal
btQuantizedBvh.appendDesc(io String string) {
  string += "btQuantizedBvh:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhSubtreeInfoData] EDK[Fabric_EDK_KL_btBvhSubtreeInfoData] LIB[btBvhSubtreeInfoData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfoData] EDK[Fabric_EDK_KL_btBvhSubtreeInfoData] LIB[btBvhSubtreeInfoData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfoData] EDK[Fabric_EDK_KL_btBvhSubtreeInfoData] LIB[btBvhSubtreeInfoData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBvhSubtreeInfoData() = "Bullet2__btBvhSubtreeInfoData__MU__empty_ctor__ea6f69fca5788b460c74c5e56204ddd4";

/// \dfgPresetOmit
btBvhSubtreeInfoData(
    btBvhSubtreeInfoData that
    ) = "Bullet2__btBvhSubtreeInfoData__MU__copy_ctor__ed593b1d98f4b478d9ffe85541e33658";

btBvhSubtreeInfoData.cxx_delete() = "Bullet2__btBvhSubtreeInfoData__MU__delete__30f1c11445c216b4a4a13c995be59f5d";

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfoData] EDK[Fabric_EDK_KL_btBvhSubtreeInfoData] LIB[btBvhSubtreeInfoData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfoData] EDK[Fabric_EDK_KL_btBvhSubtreeInfoData] LIB[btBvhSubtreeInfoData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhSubtreeInfoData] EDK[Fabric_EDK_KL_btBvhSubtreeInfoData] LIB[btBvhSubtreeInfoData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBvhSubtreeInfoData.=(
    btBvhSubtreeInfoData that
    ) = "Bullet2__btBvhSubtreeInfoData__MU__simple_ass_op__dcf649436f3b922b737c8dfcbcf1e731";


/// \dfgPresetOmit
/// \internal
btBvhSubtreeInfoData.appendDesc(io String string) {
  string += "btBvhSubtreeInfoData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNodeFloatData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeFloatData] LIB[btOptimizedBvhNodeFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeFloatData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeFloatData] LIB[btOptimizedBvhNodeFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeFloatData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeFloatData] LIB[btOptimizedBvhNodeFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btOptimizedBvhNodeFloatData() = "Bullet2__btOptimizedBvhNodeFloatData__MU__empty_ctor__e71d1c4e3cc8d8bbaad8a9d9b0da5187";

/// \dfgPresetOmit
btOptimizedBvhNodeFloatData(
    btOptimizedBvhNodeFloatData that
    ) = "Bullet2__btOptimizedBvhNodeFloatData__MU__copy_ctor__ebab394d8247d53392cb7211354b6926";

btOptimizedBvhNodeFloatData.cxx_delete() = "Bullet2__btOptimizedBvhNodeFloatData__MU__delete__06812e6b37879f529e6ecfd8791f4a55";

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeFloatData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeFloatData] LIB[btOptimizedBvhNodeFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeFloatData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeFloatData] LIB[btOptimizedBvhNodeFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeFloatData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeFloatData] LIB[btOptimizedBvhNodeFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btOptimizedBvhNodeFloatData.=(
    btOptimizedBvhNodeFloatData that
    ) = "Bullet2__btOptimizedBvhNodeFloatData__MU__simple_ass_op__47f9a33d4fdbb63b0dd9702258658ec0";


/// \dfgPresetOmit
/// \internal
btOptimizedBvhNodeFloatData.appendDesc(io String string) {
  string += "btOptimizedBvhNodeFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvhNodeDoubleData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeDoubleData] LIB[btOptimizedBvhNodeDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeDoubleData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeDoubleData] LIB[btOptimizedBvhNodeDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeDoubleData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeDoubleData] LIB[btOptimizedBvhNodeDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btOptimizedBvhNodeDoubleData() = "Bullet2__btOptimizedBvhNodeDoubleData__MU__empty_ctor__53f98c8a2c4d585c89a808cdc2297d83";

/// \dfgPresetOmit
btOptimizedBvhNodeDoubleData(
    btOptimizedBvhNodeDoubleData that
    ) = "Bullet2__btOptimizedBvhNodeDoubleData__MU__copy_ctor__e888e6010eaa27394397444d72e81ea1";

btOptimizedBvhNodeDoubleData.cxx_delete() = "Bullet2__btOptimizedBvhNodeDoubleData__MU__delete__d75ae14acb6139fa7b75d4ea825b78fb";

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeDoubleData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeDoubleData] LIB[btOptimizedBvhNodeDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeDoubleData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeDoubleData] LIB[btOptimizedBvhNodeDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvhNodeDoubleData] EDK[Fabric_EDK_KL_btOptimizedBvhNodeDoubleData] LIB[btOptimizedBvhNodeDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btOptimizedBvhNodeDoubleData.=(
    btOptimizedBvhNodeDoubleData that
    ) = "Bullet2__btOptimizedBvhNodeDoubleData__MU__simple_ass_op__447dbe1fc0e15251b712cc26124c670b";


/// \dfgPresetOmit
/// \internal
btOptimizedBvhNodeDoubleData.appendDesc(io String string) {
  string += "btOptimizedBvhNodeDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhNodeData] EDK[Fabric_EDK_KL_btQuantizedBvhNodeData] LIB[btQuantizedBvhNodeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNodeData] EDK[Fabric_EDK_KL_btQuantizedBvhNodeData] LIB[btQuantizedBvhNodeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNodeData] EDK[Fabric_EDK_KL_btQuantizedBvhNodeData] LIB[btQuantizedBvhNodeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhNodeData() = "Bullet2__btQuantizedBvhNodeData__MU__empty_ctor__7bf0cee969914bfd9220c6e7e950b535";

/// \dfgPresetOmit
btQuantizedBvhNodeData(
    btQuantizedBvhNodeData that
    ) = "Bullet2__btQuantizedBvhNodeData__MU__copy_ctor__90d39b6fe83e43cd163c4ae19764574f";

btQuantizedBvhNodeData.cxx_delete() = "Bullet2__btQuantizedBvhNodeData__MU__delete__3585169f9c392dd85123f0f9915aaa14";

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNodeData] EDK[Fabric_EDK_KL_btQuantizedBvhNodeData] LIB[btQuantizedBvhNodeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNodeData] EDK[Fabric_EDK_KL_btQuantizedBvhNodeData] LIB[btQuantizedBvhNodeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhNodeData] EDK[Fabric_EDK_KL_btQuantizedBvhNodeData] LIB[btQuantizedBvhNodeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhNodeData.=(
    btQuantizedBvhNodeData that
    ) = "Bullet2__btQuantizedBvhNodeData__MU__simple_ass_op__d7af2930825433572060932e9b46f6e4";


/// \dfgPresetOmit
/// \internal
btQuantizedBvhNodeData.appendDesc(io String string) {
  string += "btQuantizedBvhNodeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhFloatData] EDK[Fabric_EDK_KL_btQuantizedBvhFloatData] LIB[btQuantizedBvhFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhFloatData] EDK[Fabric_EDK_KL_btQuantizedBvhFloatData] LIB[btQuantizedBvhFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhFloatData] EDK[Fabric_EDK_KL_btQuantizedBvhFloatData] LIB[btQuantizedBvhFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhFloatData() = "Bullet2__btQuantizedBvhFloatData__MU__empty_ctor__f294f8ff35489b14c1dae0907b08c7ea";

/// \dfgPresetOmit
btQuantizedBvhFloatData(
    btQuantizedBvhFloatData that
    ) = "Bullet2__btQuantizedBvhFloatData__MU__copy_ctor__cd904686692cb148ed698101b822373a";

btQuantizedBvhFloatData.cxx_delete() = "Bullet2__btQuantizedBvhFloatData__MU__delete__95f704cd554fcec52556b36aaed6f76c";

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhFloatData] EDK[Fabric_EDK_KL_btQuantizedBvhFloatData] LIB[btQuantizedBvhFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhFloatData] EDK[Fabric_EDK_KL_btQuantizedBvhFloatData] LIB[btQuantizedBvhFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhFloatData] EDK[Fabric_EDK_KL_btQuantizedBvhFloatData] LIB[btQuantizedBvhFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhFloatData.=(
    btQuantizedBvhFloatData that
    ) = "Bullet2__btQuantizedBvhFloatData__MU__simple_ass_op__029a6378136016b96a90554a8c428f69";


/// \dfgPresetOmit
/// \internal
btQuantizedBvhFloatData.appendDesc(io String string) {
  string += "btQuantizedBvhFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhDoubleData] EDK[Fabric_EDK_KL_btQuantizedBvhDoubleData] LIB[btQuantizedBvhDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhDoubleData] EDK[Fabric_EDK_KL_btQuantizedBvhDoubleData] LIB[btQuantizedBvhDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhDoubleData] EDK[Fabric_EDK_KL_btQuantizedBvhDoubleData] LIB[btQuantizedBvhDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhDoubleData() = "Bullet2__btQuantizedBvhDoubleData__MU__empty_ctor__7e6d44b0362c99347d81837ae42b93ee";

/// \dfgPresetOmit
btQuantizedBvhDoubleData(
    btQuantizedBvhDoubleData that
    ) = "Bullet2__btQuantizedBvhDoubleData__MU__copy_ctor__8a66a1124e59dd74548a3ff24b09fb22";

btQuantizedBvhDoubleData.cxx_delete() = "Bullet2__btQuantizedBvhDoubleData__MU__delete__f07e479883e640a58b842b5d2a3e1321";

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhDoubleData] EDK[Fabric_EDK_KL_btQuantizedBvhDoubleData] LIB[btQuantizedBvhDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhDoubleData] EDK[Fabric_EDK_KL_btQuantizedBvhDoubleData] LIB[btQuantizedBvhDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhDoubleData] EDK[Fabric_EDK_KL_btQuantizedBvhDoubleData] LIB[btQuantizedBvhDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhDoubleData.=(
    btQuantizedBvhDoubleData that
    ) = "Bullet2__btQuantizedBvhDoubleData__MU__simple_ass_op__3ccf05e723c1fcacadce1fc1256e6064";


/// \dfgPresetOmit
/// \internal
btQuantizedBvhDoubleData.appendDesc(io String string) {
  string += "btQuantizedBvhDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btOptimizedBvh(
    btOptimizedBvh that
    ) = "Bullet2__btOptimizedBvh__MU__copy_ctor__93d901b25744bf4de5357985d24fcdef";

/// \dfgPresetOmit
/// \internal
btOptimizedBvh.__ctor(
    ) = "Bullet2__btOptimizedBvh__MU__ctor__e2720c536812981f17437249faa63ef1";

/// \dfgPresetOmit
btOptimizedBvh(
    ) {
    this.__ctor(
        );
}

btOptimizedBvh.cxx_delete() = "Bullet2__btOptimizedBvh__MU__delete__9a83d1f087d69cc920423a1ea4a1490c";

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btOptimizedBvh.cxx_build!(
    btStridingMeshInterface triangles,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax
    )
 = "Bullet2__btOptimizedBvh__MU__meth_build__8e8c6449db4aaf822c4d7d6db05ba0eb";

/// \dfgPresetOmit
/// \internal

btOptimizedBvh.cxx_refit!(
    btStridingMeshInterface triangles,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btOptimizedBvh__MU__meth_refit__1542f22bffdb90eb3cd26238010d91ad";

/// \dfgPresetOmit
/// \internal

btOptimizedBvh.cxx_refitPartial!(
    btStridingMeshInterface triangles,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btOptimizedBvh__MU__meth_refitPartial__9952f43383e4a2bae45360aa1b0d7c92";

/// \dfgPresetOmit
/// \internal

btOptimizedBvh.cxx_updateBvhNodes!(
    btStridingMeshInterface meshInterface,
    SInt32 firstNode,
    SInt32 endNode,
    SInt32 index
    )
 = "Bullet2__btOptimizedBvh__MU__meth_updateBvhNodes__bbfd9fd9056d0b806c2b0121880cf3dc";

/// Data buffer MUST be 16 byte aligned
/// \dfgPresetOmit
/// \internal
Boolean
btOptimizedBvh.cxx_serializeInPlace?(
    Data o_alignedDataBuffer,
    UInt32 i_dataBufferSize,
    Boolean i_swapEndian
    )
 = "Bullet2__btOptimizedBvh__CO__meth_serializeInPlace__595da5f536ab3fcd7e2ba35b24a57fc7";

///deSerializeInPlace loads and initializes a BVH from a buffer in memory 'in place'
/// \dfgPresetOmit
/// \internal
btOptimizedBvh
btOptimizedBvh_CxxdeSerializeInPlace(
    Data i_alignedDataBuffer,
    UInt32 i_dataBufferSize,
    Boolean i_swapEndian
    )
 = "Bullet2__btOptimizedBvh__ST__meth_deSerializeInPlace__c2ea977ed421870f9fcf6ddc2af91edb";


btOptimizedBvh.build!(
    in
    btStridingMeshInterface
    triangles
    
    ,
    in
    Boolean
    useQuantizedAabbCompression
    
    ,
    in
    btVector3
    bvhAabbMin
    
    ,
    in
    btVector3
    bvhAabbMax
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef bvhAabbMin__cxx = Make_CxxbtVector3ConstRef(bvhAabbMin);
    
    CxxbtVector3ConstRef bvhAabbMax__cxx = Make_CxxbtVector3ConstRef(bvhAabbMax);
    
    this.cxx_build(
        triangles,
        useQuantizedAabbCompression,
        bvhAabbMin__cxx,
        bvhAabbMax__cxx
        );
    
    
    
    
    
    
}


btOptimizedBvh.refitPartial!(
    in
    btStridingMeshInterface
    triangles
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_refitPartial(
        triangles,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

/// Data buffer MUST be 16 byte aligned
Boolean
btOptimizedBvh.serializeInPlace?(
    in
    Data
    o_alignedDataBuffer
    
    ,
    in
    UInt32
    i_dataBufferSize
    
    ,
    in
    Boolean
    i_swapEndian
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_serializeInPlace(
        o_alignedDataBuffer,
        i_dataBufferSize,
        i_swapEndian
        );
    
    
    
    
    return __res;
}


btOptimizedBvh.refit!(
    in
    btStridingMeshInterface
    triangles
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_refit(
        triangles,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

///deSerializeInPlace loads and initializes a BVH from a buffer in memory 'in place'
btOptimizedBvh
btOptimizedBvh_deSerializeInPlace(
    in
    Data
    i_alignedDataBuffer
    
    ,
    in
    UInt32
    i_dataBufferSize
    
    ,
    in
    Boolean
    i_swapEndian
    
    
    )
{   
    
    
    
    btOptimizedBvh __res = 
    btOptimizedBvh_CxxdeSerializeInPlace(
        i_alignedDataBuffer,
        i_dataBufferSize,
        i_swapEndian
        );
    
    
    
    
    return __res;
}


btOptimizedBvh.updateBvhNodes!(
    in
    btStridingMeshInterface
    meshInterface
    
    ,
    in
    SInt32
    firstNode
    
    ,
    in
    SInt32
    endNode
    
    ,
    in
    SInt32
    index
    
    
    )
{   
    
    
    
    
    
    this.cxx_updateBvhNodes(
        meshInterface,
        firstNode,
        endNode,
        index
        );
    
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btOptimizedBvh] EDK[Fabric_EDK_KL_btOptimizedBvh] LIB[btOptimizedBvh *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btOptimizedBvh.=(
    btOptimizedBvh that
    ) = "Bullet2__btOptimizedBvh__MU__simple_ass_op__0403aeddfe7be62b5f397c36f9720b93";


/// \dfgPresetOmit
/// \internal
btOptimizedBvh.appendDesc(io String string) {
  string += "btOptimizedBvh:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btFace] EDK[Fabric_EDK_KL_btFace] LIB[btFace]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btFace] EDK[Fabric_EDK_KL_btFace] LIB[btFace]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btFace] EDK[Fabric_EDK_KL_btFace] LIB[btFace]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btFace() = "Bullet2__btFace__MU__empty_ctor__5db61853573eb1707c193724eff1c511";

/// \dfgPresetOmit
btFace(
    btFace that
    ) = "Bullet2__btFace__MU__copy_ctor__e30c47acbfbe8073b17ee501fbf6ed95";

~btFace() = "Bullet2__btFace__MU__dtor__16358af89c3ad7c2885f02b0293f9dd0";

//////////////////////////////////////////////////////////////////////////////
// KL[btFace] EDK[Fabric_EDK_KL_btFace] LIB[btFace]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btFace] EDK[Fabric_EDK_KL_btFace] LIB[btFace]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btFace] EDK[Fabric_EDK_KL_btFace] LIB[btFace]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btFace.=(
    btFace that
    ) = "Bullet2__btFace__MU__simple_ass_op__02327a0e26777c194da9f6a5e6330741";



/// \dfgPresetOmit
/// \internal
btFace.appendDesc(io String string) {
  string += "btFace:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btConvexPolyhedron(
    btConvexPolyhedron that
    ) = "Bullet2__btConvexPolyhedron__MU__copy_ctor__9408df4598fc5f09e45cfb3b5d6d1d1e";

/// \dfgPresetOmit
/// \internal
btConvexPolyhedron.__ctor(
    ) = "Bullet2__btConvexPolyhedron__MU__ctor__07396b6e34b1e920af5d51b31a777fab";

/// \dfgPresetOmit
btConvexPolyhedron(
    ) {
    this.__ctor(
        );
}

~btConvexPolyhedron() = "Bullet2__btConvexPolyhedron__MU__dtor__a2019c8dbf3f48e4ec05a8ead18b2a16";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btConvexPolyhedron.cxx_initialize!(
    )
 = "Bullet2__btConvexPolyhedron__MU__meth_initialize__57e7ab300d3457f2a53d8e3f8b7bd076";

/// \dfgPresetOmit
/// \internal
Boolean
btConvexPolyhedron.cxx_testContainment?(
    )
 = "Bullet2__btConvexPolyhedron__CO__meth_testContainment__8361889ecb9fc7cbd1eccfbec872c012";

/// \dfgPresetOmit
/// \internal

btConvexPolyhedron.cxx_project?(
    CxxbtTransformConstRef trans,
    CxxbtVector3ConstRef dir,
    CxxFloat32Ref minProj,
    CxxFloat32Ref maxProj,
    CxxbtVector3Ref witnesPtMin,
    CxxbtVector3Ref witnesPtMax
    )
 = "Bullet2__btConvexPolyhedron__CO__meth_project__3f26f633b39ab4331707c7f5613740ff";


btConvexPolyhedron.project?(
    in
    btTransform
    trans
    
    ,
    in
    btVector3
    dir
    
    ,
    io
    Float32
    minProj
    
    ,
    io
    Float32
    maxProj
    
    ,
    io
    btVector3
    witnesPtMin
    
    ,
    io
    btVector3
    witnesPtMax
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    
    CxxFloat32Ref minProj__cxx = Make_CxxFloat32Ref(minProj);
    
    CxxFloat32Ref maxProj__cxx = Make_CxxFloat32Ref(maxProj);
    
    CxxbtVector3Ref witnesPtMin__cxx = Make_CxxbtVector3Ref(witnesPtMin);
    
    CxxbtVector3Ref witnesPtMax__cxx = Make_CxxbtVector3Ref(witnesPtMax);
    
    this.cxx_project(
        trans__cxx,
        dir__cxx,
        minProj__cxx,
        maxProj__cxx,
        witnesPtMin__cxx,
        witnesPtMax__cxx
        );
    
    
    
    
    
    
    
    
}


btConvexPolyhedron.initialize!(
    )
{   
    
    this.cxx_initialize(
        );
    
    
}

Boolean
btConvexPolyhedron.testContainment?(
    )
{   
    Boolean __res = 
    this.cxx_testContainment(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexPolyhedron.=(
    btConvexPolyhedron that
    ) = "Bullet2__btConvexPolyhedron__MU__simple_ass_op__3d9def97aaa358e56fb72f3cb91b50f1";



/// \dfgPresetOmit
/// \internal
btConvexPolyhedron.appendDesc(io String string) {
  string += "btConvexPolyhedron:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionShape(
    btCollisionShape that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btCollisionShape.cxx_delete() = "Bullet2__btCollisionShape__MU__delete__3705779c459203bc3b296fc34888165a";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///getAabb returns the axis aligned bounding box in the coordinate frame of the given transform t.
/// \dfgPresetOmit
/// \internal

btCollisionShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btCollisionShape__CO__meth_getAabb__2bc2cf4fb24b068cff227173f640f9cf";

/// \dfgPresetOmit
/// \internal

btCollisionShape.cxx_getBoundingSphere?(
    CxxbtVector3Ref center,
    CxxFloat32Ref radius
    )
 = "Bullet2__btCollisionShape__CO__meth_getBoundingSphere__3cf9e4b3075ce4a4d54a119130ab000a";

///getAngularMotionDisc returns the maximum radius needed for Conservative Advancement to handle time-of-impact with rotations.
/// \dfgPresetOmit
/// \internal
Float32
btCollisionShape.cxx_getAngularMotionDisc?(
    )
 = "Bullet2__btCollisionShape__CO__meth_getAngularMotionDisc__d7b64be7817cdb4006130596c47787ad";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionShape.cxx_getContactBreakingThreshold?(
    Float32 defaultContactThresholdFactor
    )
 = "Bullet2__btCollisionShape__CO__meth_getContactBreakingThreshold__a69e6870c69ce971416d108f320545ca";

///calculateTemporalAabb calculates the enclosing aabb for the moving object over interval [0..timeStep)
///result is conservative
/// \dfgPresetOmit
/// \internal

btCollisionShape.cxx_calculateTemporalAabb?(
    CxxbtTransformConstRef curTrans,
    CxxbtVector3ConstRef linvel,
    CxxbtVector3ConstRef angvel,
    Float32 timeStep,
    CxxbtVector3Ref temporalAabbMin,
    CxxbtVector3Ref temporalAabbMax
    )
 = "Bullet2__btCollisionShape__CO__meth_calculateTemporalAabb__e6e4bf3aceca8cb1689f0a16b2edc058";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionShape.cxx_isPolyhedral?(
    )
 = "Bullet2__btCollisionShape__CO__meth_isPolyhedral__840f816ed1dc62149ff2ca0709065681";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionShape.cxx_isConvex2d?(
    )
 = "Bullet2__btCollisionShape__CO__meth_isConvex2d__35587a213c4b2ad814a033419fea3b0d";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionShape.cxx_isConvex?(
    )
 = "Bullet2__btCollisionShape__CO__meth_isConvex__ecc0ba2b00d9dd5c1cb3fe1fd78797e7";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionShape.cxx_isNonMoving?(
    )
 = "Bullet2__btCollisionShape__CO__meth_isNonMoving__6e304dec9896dc3dd3e6cf224e281653";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionShape.cxx_isConcave?(
    )
 = "Bullet2__btCollisionShape__CO__meth_isConcave__11b51301655597830118af6ef2b0f6b1";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionShape.cxx_isCompound?(
    )
 = "Bullet2__btCollisionShape__CO__meth_isCompound__9800462ec60f2252a84cc4fd14a2645c";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionShape.cxx_isSoftBody?(
    )
 = "Bullet2__btCollisionShape__CO__meth_isSoftBody__f9add29393cf99e88f2a5064fc414c62";

///isInfinite is used to catch simulation error (aabb check)
/// \dfgPresetOmit
/// \internal
Boolean
btCollisionShape.cxx_isInfinite?(
    )
 = "Bullet2__btCollisionShape__CO__meth_isInfinite__fe685f65d6e8cd636dd04b313b628274";

/// \dfgPresetOmit
/// \internal

btCollisionShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btCollisionShape__MU__meth_setLocalScaling__87f74f693efe9c81b715f9e54aaee49a";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btCollisionShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btCollisionShape__CO__meth_getLocalScaling__20dd07835e73b4fa010704ba01babda1";

/// \dfgPresetOmit
/// \internal

btCollisionShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btCollisionShape__CO__meth_calculateLocalInertia__06b32753a0581cd79a42f07d3b54ce73";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCollisionShape.cxx_getName?(
    )
 = "Bullet2__btCollisionShape__CO__meth_getName__c2c4ee7ebad468293bea497dbf81793d";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionShape.cxx_getShapeType?(
    )
 = "Bullet2__btCollisionShape__CO__meth_getShapeType__9507eb8b85b586f1afeb6ff8338d8d02";

///the getAnisotropicRollingFrictionDirection can be used in combination with setAnisotropicFriction
///See Bullet/Demos/RollingFrictionDemo for an example
/// \dfgPresetOmit
/// \internal
btVector3
btCollisionShape.cxx_getAnisotropicRollingFrictionDirection?(
    )
 = "Bullet2__btCollisionShape__CO__meth_getAnisotropicRollingFrictionDirection__a74ffdc2ce0f14709eca4859f8512ada";

/// \dfgPresetOmit
/// \internal

btCollisionShape.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btCollisionShape__MU__meth_setMargin__373a81a53bf577bb0a4a48865a307dd9";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionShape.cxx_getMargin?(
    )
 = "Bullet2__btCollisionShape__CO__meth_getMargin__cf78bf88ff6f63284f76913290b41140";

///optional user data pointer
/// \dfgPresetOmit
/// \internal

btCollisionShape.cxx_setUserPointer!(
    Data userPtr
    )
 = "Bullet2__btCollisionShape__MU__meth_setUserPointer__e252cf83824c43be4d83d092dfecf61b";

/// \dfgPresetOmit
/// \internal
Data
btCollisionShape.cxx_getUserPointer?(
    )
 = "Bullet2__btCollisionShape__CO__meth_getUserPointer__c81fb7a7e27d51305f8b2e3b8ef10fad";

/// \dfgPresetOmit
/// \internal

btCollisionShape.cxx_setUserIndex!(
    SInt32 index
    )
 = "Bullet2__btCollisionShape__MU__meth_setUserIndex__6c9355d242f802c16b84191cb6f03048";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionShape.cxx_getUserIndex?(
    )
 = "Bullet2__btCollisionShape__CO__meth_getUserIndex__6aa20ba98a8c204bca6b0ece392bf7d5";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btCollisionShape__CO__meth_calculateSerializeBufferSize__5423976c322562a89d82b53b2d8b01b0";

Float32
btCollisionShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}

///isInfinite is used to catch simulation error (aabb check)
Boolean
btCollisionShape.isInfinite?(
    )
{   
    Boolean __res = 
    this.cxx_isInfinite(
        );
    
    return __res;
}

Float32
btCollisionShape.getContactBreakingThreshold?(
    in
    Float32
    defaultContactThresholdFactor
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getContactBreakingThreshold(
        defaultContactThresholdFactor
        );
    
    
    return __res;
}

Boolean
btCollisionShape.isConvex?(
    )
{   
    Boolean __res = 
    this.cxx_isConvex(
        );
    
    return __res;
}


btCollisionShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

btVector3
btCollisionShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btCollisionShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

SInt32
btCollisionShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

Boolean
btCollisionShape.isPolyhedral?(
    )
{   
    Boolean __res = 
    this.cxx_isPolyhedral(
        );
    
    return __res;
}

String
btCollisionShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

SInt32
btCollisionShape.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}


btCollisionShape.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}

///calculateTemporalAabb calculates the enclosing aabb for the moving object over interval [0..timeStep)
///result is conservative

btCollisionShape.calculateTemporalAabb?(
    in
    btTransform
    curTrans
    
    ,
    in
    btVector3
    linvel
    
    ,
    in
    btVector3
    angvel
    
    ,
    in
    Float32
    timeStep
    
    ,
    io
    btVector3
    temporalAabbMin
    
    ,
    io
    btVector3
    temporalAabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef curTrans__cxx = Make_CxxbtTransformConstRef(curTrans);
    
    CxxbtVector3ConstRef linvel__cxx = Make_CxxbtVector3ConstRef(linvel);
    
    CxxbtVector3ConstRef angvel__cxx = Make_CxxbtVector3ConstRef(angvel);
    
    
    CxxbtVector3Ref temporalAabbMin__cxx = Make_CxxbtVector3Ref(temporalAabbMin);
    
    CxxbtVector3Ref temporalAabbMax__cxx = Make_CxxbtVector3Ref(temporalAabbMax);
    
    this.cxx_calculateTemporalAabb(
        curTrans__cxx,
        linvel__cxx,
        angvel__cxx,
        timeStep,
        temporalAabbMin__cxx,
        temporalAabbMax__cxx
        );
    
    
    
    
    
    
    
    
}

Boolean
btCollisionShape.isSoftBody?(
    )
{   
    Boolean __res = 
    this.cxx_isSoftBody(
        );
    
    return __res;
}

///optional user data pointer

btCollisionShape.setUserPointer!(
    in
    Data
    userPtr
    
    
    )
{   
    
    
    this.cxx_setUserPointer(
        userPtr
        );
    
    
    
}


btCollisionShape.setUserIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex(
        index
        );
    
    
    
}

Boolean
btCollisionShape.isCompound?(
    )
{   
    Boolean __res = 
    this.cxx_isCompound(
        );
    
    return __res;
}

Data
btCollisionShape.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

///the getAnisotropicRollingFrictionDirection can be used in combination with setAnisotropicFriction
///See Bullet/Demos/RollingFrictionDemo for an example
btVector3
btCollisionShape.getAnisotropicRollingFrictionDirection?(
    )
{   
    btVector3 __res = 
    this.cxx_getAnisotropicRollingFrictionDirection(
        );
    
    return __res;
}

Boolean
btCollisionShape.isNonMoving?(
    )
{   
    Boolean __res = 
    this.cxx_isNonMoving(
        );
    
    return __res;
}

Boolean
btCollisionShape.isConcave?(
    )
{   
    Boolean __res = 
    this.cxx_isConcave(
        );
    
    return __res;
}

///getAngularMotionDisc returns the maximum radius needed for Conservative Advancement to handle time-of-impact with rotations.
Float32
btCollisionShape.getAngularMotionDisc?(
    )
{   
    Float32 __res = 
    this.cxx_getAngularMotionDisc(
        );
    
    return __res;
}

Boolean
btCollisionShape.isConvex2d?(
    )
{   
    Boolean __res = 
    this.cxx_isConvex2d(
        );
    
    return __res;
}

SInt32
btCollisionShape.getShapeType?(
    )
{   
    SInt32 __res = 
    this.cxx_getShapeType(
        );
    
    return __res;
}

///getAabb returns the axis aligned bounding box in the coordinate frame of the given transform t.

btCollisionShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btCollisionShape.getBoundingSphere?(
    io
    btVector3
    center
    
    ,
    io
    Float32
    radius
    
    
    )
{   
    
    CxxbtVector3Ref center__cxx = Make_CxxbtVector3Ref(center);
    
    CxxFloat32Ref radius__cxx = Make_CxxFloat32Ref(radius);
    
    this.cxx_getBoundingSphere(
        center__cxx,
        radius__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShape] EDK[Fabric_EDK_KL_btCollisionShape] LIB[btCollisionShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionShape.=(
    btCollisionShape that
    ) = "Bullet2__btCollisionShape__MU__simple_ass_op__fd18a369f7d90520d1e8ae401a6028ac";


/// \dfgPresetOmit
/// \internal
btCollisionShape.appendDesc(io String string) {
  string += "btCollisionShape:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionShapeData] EDK[Fabric_EDK_KL_btCollisionShapeData] LIB[btCollisionShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShapeData] EDK[Fabric_EDK_KL_btCollisionShapeData] LIB[btCollisionShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShapeData] EDK[Fabric_EDK_KL_btCollisionShapeData] LIB[btCollisionShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionShapeData() = "Bullet2__btCollisionShapeData__MU__empty_ctor__f8d911273c427c9fc109ed8330550155";

/// \dfgPresetOmit
btCollisionShapeData(
    btCollisionShapeData that
    ) = "Bullet2__btCollisionShapeData__MU__copy_ctor__fe5b3c0c80fdba55d756055e0d9dba23";

btCollisionShapeData.cxx_delete() = "Bullet2__btCollisionShapeData__MU__delete__72639ac8cea9168fd63c6adbc8d52aa7";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShapeData] EDK[Fabric_EDK_KL_btCollisionShapeData] LIB[btCollisionShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShapeData] EDK[Fabric_EDK_KL_btCollisionShapeData] LIB[btCollisionShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionShapeData] EDK[Fabric_EDK_KL_btCollisionShapeData] LIB[btCollisionShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionShapeData.=(
    btCollisionShapeData that
    ) = "Bullet2__btCollisionShapeData__MU__simple_ass_op__c90bd74e9d9e481a9fbe1d502213f680";


/// \dfgPresetOmit
/// \internal
btCollisionShapeData.appendDesc(io String string) {
  string += "btCollisionShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btConvexShape(
    btConvexShape that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btConvexShape.cxx_delete() = "Bullet2__btConvexShape__MU__delete__31df59f6597b752edcfcb448de1d350e";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btConvexShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexShape__CO__meth_localGetSupportingVertex__02e0befb0f63c71e4f6b7c4aea5084c0";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexShape__CO__meth_localGetSupportingVertexWithoutMargin__521411771593ef928bf962bad49fa08f";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexShape.cxx_localGetSupportVertexWithoutMarginNonVirtual?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexShape__CO__meth_localGetSupportVertexWithoutMarginNonVirtual__4de1d020f1ddfaa39e9b168ebfac767c";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexShape.cxx_localGetSupportVertexNonVirtual?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexShape__CO__meth_localGetSupportVertexNonVirtual__2a44c660ac9423712463ae7912090df7";

/// \dfgPresetOmit
/// \internal
Float32
btConvexShape.cxx_getMarginNonVirtual?(
    )
 = "Bullet2__btConvexShape__CO__meth_getMarginNonVirtual__292bdfa4904b0b5d609a07fd8313bc9d";

/// \dfgPresetOmit
/// \internal

btConvexShape.cxx_getAabbNonVirtual?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btConvexShape__CO__meth_getAabbNonVirtual__53fb3b0ab2e2e0268ad824957e449d8b";

/// \dfgPresetOmit
/// \internal

btConvexShape.cxx_project?(
    CxxbtTransformConstRef trans,
    CxxbtVector3ConstRef dir,
    CxxFloat32Ref minProj,
    CxxFloat32Ref maxProj,
    CxxbtVector3Ref witnesPtMin,
    CxxbtVector3Ref witnesPtMax
    )
 = "Bullet2__btConvexShape__CO__meth_project__0a0cba2b11cc87e1047d8bc84f51a2b6";

/// \dfgPresetOmit
/// \internal

btConvexShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btConvexShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__eb734fa6a614ad59f17ddf34f0bb46e8";

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
/// \dfgPresetOmit
/// \internal

btConvexShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btConvexShape__CO__meth_getAabb__e0369a5204eca69e2e2f3291d67bc727";

/// \dfgPresetOmit
/// \internal

btConvexShape.cxx_getAabbSlow?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btConvexShape__CO__meth_getAabbSlow__1a6670b49d9290fffc3cc77149d65d95";

/// \dfgPresetOmit
/// \internal

btConvexShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btConvexShape__MU__meth_setLocalScaling__f07a15851626162c4948912e5468d4fd";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btConvexShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btConvexShape__CO__meth_getLocalScaling__afdff2a8c64cacce9a160b300aa9e7d9";

/// \dfgPresetOmit
/// \internal

btConvexShape.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btConvexShape__MU__meth_setMargin__d61190d0d9d315257b6a517559b6e428";

/// \dfgPresetOmit
/// \internal
Float32
btConvexShape.cxx_getMargin?(
    )
 = "Bullet2__btConvexShape__CO__meth_getMargin__1acc7945399bb05996fce21a7ec861b5";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexShape.cxx_getNumPreferredPenetrationDirections?(
    )
 = "Bullet2__btConvexShape__CO__meth_getNumPreferredPenetrationDirections__ed1fb498315f2d2dacad0f96e5fd8408";

/// \dfgPresetOmit
/// \internal

btConvexShape.cxx_getPreferredPenetrationDirection?(
    SInt32 index,
    CxxbtVector3Ref penetrationVector
    )
 = "Bullet2__btConvexShape__CO__meth_getPreferredPenetrationDirection__ee6fb0204a6650c687579829915cff9d";


btConvexShape.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}


btConvexShape.getAabbNonVirtual?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabbNonVirtual(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btConvexShape.getAabbSlow?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabbSlow(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

btVector3
btConvexShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

btVector3
btConvexShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}


btConvexShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

Float32
btConvexShape.getMarginNonVirtual?(
    )
{   
    Float32 __res = 
    this.cxx_getMarginNonVirtual(
        );
    
    return __res;
}

Float32
btConvexShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}


btConvexShape.project?(
    in
    btTransform
    trans
    
    ,
    in
    btVector3
    dir
    
    ,
    io
    Float32
    minProj
    
    ,
    io
    Float32
    maxProj
    
    ,
    io
    btVector3
    witnesPtMin
    
    ,
    io
    btVector3
    witnesPtMax
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    
    CxxFloat32Ref minProj__cxx = Make_CxxFloat32Ref(minProj);
    
    CxxFloat32Ref maxProj__cxx = Make_CxxFloat32Ref(maxProj);
    
    CxxbtVector3Ref witnesPtMin__cxx = Make_CxxbtVector3Ref(witnesPtMin);
    
    CxxbtVector3Ref witnesPtMax__cxx = Make_CxxbtVector3Ref(witnesPtMax);
    
    this.cxx_project(
        trans__cxx,
        dir__cxx,
        minProj__cxx,
        maxProj__cxx,
        witnesPtMin__cxx,
        witnesPtMax__cxx
        );
    
    
    
    
    
    
    
    
}

btVector3
btConvexShape.localGetSupportVertexNonVirtual?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportVertexNonVirtual(
        vec__cxx
        );
    
    
    return __res;
}

SInt32
btConvexShape.getNumPreferredPenetrationDirections?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPreferredPenetrationDirections(
        );
    
    return __res;
}

btVector3
btConvexShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btConvexShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btConvexShape.getPreferredPenetrationDirection?(
    in
    SInt32
    index
    
    ,
    io
    btVector3
    penetrationVector
    
    
    )
{   
    
    
    CxxbtVector3Ref penetrationVector__cxx = Make_CxxbtVector3Ref(penetrationVector);
    
    this.cxx_getPreferredPenetrationDirection(
        index,
        penetrationVector__cxx
        );
    
    
    
    
}

btVector3
btConvexShape.localGetSupportVertexWithoutMarginNonVirtual?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportVertexWithoutMarginNonVirtual(
        vec__cxx
        );
    
    
    return __res;
}

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version

btConvexShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexShape] EDK[Fabric_EDK_KL_btConvexShape] LIB[btConvexShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexShape.=(
    btConvexShape that
    ) = "Bullet2__btConvexShape__MU__simple_ass_op__06caa2212083b32c341e9120c35dcbb2";


/// \dfgPresetOmit
/// \internal
btConvexShape.appendDesc(io String string) {
  string += "btConvexShape:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btConcaveShape(
    btConcaveShape that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btConcaveShape.cxx_delete() = "Bullet2__btConcaveShape__MU__delete__109e2b42365389cd55eca26d876f89fe";

//////////////////////////////////////////////////////////////////////////////
// KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btConcaveShape.cxx_getMargin?(
    )
 = "Bullet2__btConcaveShape__CO__meth_getMargin__ba7ce989dbcbd97d98b0aadbe81517f3";

/// \dfgPresetOmit
/// \internal

btConcaveShape.cxx_setMargin!(
    Float32 collisionMargin
    )
 = "Bullet2__btConcaveShape__MU__meth_setMargin__5c798b56c2d5dd68c2fcca75ed6eb23f";


btConcaveShape.setMargin!(
    in
    Float32
    collisionMargin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        collisionMargin
        );
    
    
    
}

Float32
btConcaveShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConcaveShape] EDK[Fabric_EDK_KL_btConcaveShape] LIB[btConcaveShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConcaveShape.=(
    btConcaveShape that
    ) = "Bullet2__btConcaveShape__MU__simple_ass_op__b8aa3f3dda0f36b8c0dd80ae22bb9c23";


/// \dfgPresetOmit
/// \internal
btConcaveShape.appendDesc(io String string) {
  string += "btConcaveShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexInternalShape() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btConvexInternalShape(
    btConvexInternalShape that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btConvexInternalShape.cxx_delete() = "Bullet2__btConvexInternalShape__MU__delete__31d293d558520b9452363c9667c08763";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btConvexInternalShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexInternalShape__CO__meth_localGetSupportingVertex__9752debac2a5acfb8c05e1f3cf3253d5";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btConvexInternalShape.cxx_getImplicitShapeDimensions?(
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getImplicitShapeDimensions__152c03d344a616a20eda0e345e5f276d";

///warning: use setImplicitShapeDimensions with care
///changing a collision shape while the body is in the world is not recommended,
///it is best to remove the body from the world, then make the change, and re-add it
///alternatively flush the contact points, see documentation for 'cleanProxyFromPairs'
/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_setImplicitShapeDimensions!(
    CxxbtVector3ConstRef dimensions
    )
 = "Bullet2__btConvexInternalShape__MU__meth_setImplicitShapeDimensions__3f198d484a7043b2e7fdcd0d84a4b509";

/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_setSafeMargin!(
    Float32 minDimension
    )
 = "Bullet2__btConvexInternalShape__MU__meth_setSafeMargin__6de789310987820a0b54971712834697";

/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_setSafeMargin!(
    Float32 minDimension,
    Float32 defaultMarginMultiplier
    )
 = "Bullet2__btConvexInternalShape__MU__meth_setSafeMargin__318c44fc919a29ea9805e528b43ea75f";

/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_setSafeMargin!(
    CxxbtVector3ConstRef halfExtents
    )
 = "Bullet2__btConvexInternalShape__MU__meth_setSafeMargin__913c0cb0090d79f0f5af790f41d12768";

/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_setSafeMargin!(
    CxxbtVector3ConstRef halfExtents,
    Float32 defaultMarginMultiplier
    )
 = "Bullet2__btConvexInternalShape__MU__meth_setSafeMargin__2a9928960a745bfe94e7a38d5a6a7541";

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getAabb__b4e698f99ed5866a6a665eb90a6bc787";

/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_getAabbSlow?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getAabbSlow__c9605228f372a45e7cd8a68c9d6927b2";

/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btConvexInternalShape__MU__meth_setLocalScaling__0e57fe81a6ba0b6ecbc640e6354d6ff1";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btConvexInternalShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getLocalScaling__ca4fcd7cdbb53b66bdd8161d9b8e6c02";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btConvexInternalShape.cxx_getLocalScalingNV?(
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getLocalScalingNV__4bdfead55c15be16968fbcd62ab45824";

/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btConvexInternalShape__MU__meth_setMargin__9c6a21be75535eb9809854b56cd85d24";

/// \dfgPresetOmit
/// \internal
Float32
btConvexInternalShape.cxx_getMargin?(
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getMargin__1b20fce922138060ee99c8deabc43c70";

/// \dfgPresetOmit
/// \internal
Float32
btConvexInternalShape.cxx_getMarginNV?(
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getMarginNV__5653c95fa8f758630a85e474fd0bb600";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexInternalShape.cxx_getNumPreferredPenetrationDirections?(
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getNumPreferredPenetrationDirections__c86eb273d08296396ca20add2db48af1";

/// \dfgPresetOmit
/// \internal

btConvexInternalShape.cxx_getPreferredPenetrationDirection?(
    SInt32 index,
    CxxbtVector3Ref penetrationVector
    )
 = "Bullet2__btConvexInternalShape__CO__meth_getPreferredPenetrationDirection__cea12d884935b4454d1c6cb3ae78ef2c";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexInternalShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btConvexInternalShape__CO__meth_calculateSerializeBufferSize__2eb53c4be48e85167afe403e6e3a5bb3";

SInt32
btConvexInternalShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

Float32
btConvexInternalShape.getMarginNV?(
    )
{   
    Float32 __res = 
    this.cxx_getMarginNV(
        );
    
    return __res;
}

Float32
btConvexInternalShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}


btConvexInternalShape.getPreferredPenetrationDirection?(
    in
    SInt32
    index
    
    ,
    io
    btVector3
    penetrationVector
    
    
    )
{   
    
    
    CxxbtVector3Ref penetrationVector__cxx = Make_CxxbtVector3Ref(penetrationVector);
    
    this.cxx_getPreferredPenetrationDirection(
        index,
        penetrationVector__cxx
        );
    
    
    
    
}


btConvexInternalShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btConvexInternalShape.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}


btConvexInternalShape.getAabbSlow?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabbSlow(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

///warning: use setImplicitShapeDimensions with care
///changing a collision shape while the body is in the world is not recommended,
///it is best to remove the body from the world, then make the change, and re-add it
///alternatively flush the contact points, see documentation for 'cleanProxyFromPairs'

btConvexInternalShape.setImplicitShapeDimensions!(
    in
    btVector3
    dimensions
    
    
    )
{   
    
    CxxbtVector3ConstRef dimensions__cxx = Make_CxxbtVector3ConstRef(dimensions);
    
    this.cxx_setImplicitShapeDimensions(
        dimensions__cxx
        );
    
    
    
}


btConvexInternalShape.setSafeMargin!(
    in
    btVector3
    halfExtents
    
    ,
    in
    Float32
    defaultMarginMultiplier
    
    
    )
{   
    
    CxxbtVector3ConstRef halfExtents__cxx = Make_CxxbtVector3ConstRef(halfExtents);
    
    
    this.cxx_setSafeMargin(
        halfExtents__cxx,
        defaultMarginMultiplier
        );
    
    
    
    
}

btVector3
btConvexInternalShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version

btConvexInternalShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

btVector3
btConvexInternalShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

SInt32
btConvexInternalShape.getNumPreferredPenetrationDirections?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPreferredPenetrationDirections(
        );
    
    return __res;
}

btVector3
btConvexInternalShape.getImplicitShapeDimensions?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getImplicitShapeDimensions(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btConvexInternalShape.setSafeMargin!(
    in
    btVector3
    halfExtents
    
    
    )
{   
    
    CxxbtVector3ConstRef halfExtents__cxx = Make_CxxbtVector3ConstRef(halfExtents);
    
    this.cxx_setSafeMargin(
        halfExtents__cxx
        );
    
    
    
}

btVector3
btConvexInternalShape.getLocalScalingNV?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScalingNV(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btConvexInternalShape.setSafeMargin!(
    in
    Float32
    minDimension
    
    
    )
{   
    
    
    this.cxx_setSafeMargin(
        minDimension
        );
    
    
    
}


btConvexInternalShape.setSafeMargin!(
    in
    Float32
    minDimension
    
    ,
    in
    Float32
    defaultMarginMultiplier
    
    
    )
{   
    
    
    
    this.cxx_setSafeMargin(
        minDimension,
        defaultMarginMultiplier
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShape] EDK[Fabric_EDK_KL_btConvexInternalShape] LIB[btConvexInternalShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexInternalShape.=(
    btConvexInternalShape that
    ) = "Bullet2__btConvexInternalShape__MU__simple_ass_op__080c2c8a934abe0db28ac824facba54f";


/// \dfgPresetOmit
/// \internal
btConvexInternalShape.appendDesc(io String string) {
  string += "btConvexInternalShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalShapeData] EDK[Fabric_EDK_KL_btConvexInternalShapeData] LIB[btConvexInternalShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShapeData] EDK[Fabric_EDK_KL_btConvexInternalShapeData] LIB[btConvexInternalShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShapeData] EDK[Fabric_EDK_KL_btConvexInternalShapeData] LIB[btConvexInternalShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexInternalShapeData() = "Bullet2__btConvexInternalShapeData__MU__empty_ctor__053415e271dea0d79350050004f85f18";

/// \dfgPresetOmit
btConvexInternalShapeData(
    btConvexInternalShapeData that
    ) = "Bullet2__btConvexInternalShapeData__MU__copy_ctor__884678ad2ea9460fc118927b55481035";

btConvexInternalShapeData.cxx_delete() = "Bullet2__btConvexInternalShapeData__MU__delete__7b340fc7dc0303f1ffaaebd8065e9a4e";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShapeData] EDK[Fabric_EDK_KL_btConvexInternalShapeData] LIB[btConvexInternalShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShapeData] EDK[Fabric_EDK_KL_btConvexInternalShapeData] LIB[btConvexInternalShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalShapeData] EDK[Fabric_EDK_KL_btConvexInternalShapeData] LIB[btConvexInternalShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexInternalShapeData.=(
    btConvexInternalShapeData that
    ) = "Bullet2__btConvexInternalShapeData__MU__simple_ass_op__ec1686d4061a97ceb4a2a106d4754495";


/// \dfgPresetOmit
/// \internal
btConvexInternalShapeData.appendDesc(io String string) {
  string += "btConvexInternalShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexInternalAabbCachingShape() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btConvexInternalAabbCachingShape(
    btConvexInternalAabbCachingShape that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btConvexInternalAabbCachingShape.cxx_delete() = "Bullet2__btConvexInternalAabbCachingShape__MU__delete__534c577fd53814c642302a3cacd7d1c2";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btConvexInternalAabbCachingShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btConvexInternalAabbCachingShape__MU__meth_setLocalScaling__c3db46e89c2824b3ac7d4fe8249f9723";

/// \dfgPresetOmit
/// \internal

btConvexInternalAabbCachingShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btConvexInternalAabbCachingShape__CO__meth_getAabb__4cdcfc53bab28b3abd04925c7706f1b5";

/// \dfgPresetOmit
/// \internal

btConvexInternalAabbCachingShape.cxx_recalcLocalAabb!(
    )
 = "Bullet2__btConvexInternalAabbCachingShape__MU__meth_recalcLocalAabb__101ec69f2e197f4ce0a089c9e3f09fae";


btConvexInternalAabbCachingShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btConvexInternalAabbCachingShape.recalcLocalAabb!(
    )
{   
    
    this.cxx_recalcLocalAabb(
        );
    
    
}


btConvexInternalAabbCachingShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexInternalAabbCachingShape] EDK[Fabric_EDK_KL_btConvexInternalAabbCachingShape] LIB[btConvexInternalAabbCachingShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexInternalAabbCachingShape.=(
    btConvexInternalAabbCachingShape that
    ) = "Bullet2__btConvexInternalAabbCachingShape__MU__simple_ass_op__a6569c76bb82cb0a735043aa6cc49b66";


/// \dfgPresetOmit
/// \internal
btConvexInternalAabbCachingShape.appendDesc(io String string) {
  string += "btConvexInternalAabbCachingShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btPolyhedralConvexShape(
    btPolyhedralConvexShape that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btPolyhedralConvexShape.cxx_delete() = "Bullet2__btPolyhedralConvexShape__MU__delete__c827616bab4a4339ae354d42e17cd4c6";

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///optional method mainly used to generate multiple contact points by clipping polyhedral features (faces/edges)
///experimental/work-in-progress
/// \dfgPresetOmit
/// \internal
Boolean
btPolyhedralConvexShape.cxx_initializePolyhedralFeatures!(
    )
 = "Bullet2__btPolyhedralConvexShape__MU__meth_initializePolyhedralFeatures__0a59b04749439bc5935ddcb3c8c78f7d";

/// \dfgPresetOmit
/// \internal
Boolean
btPolyhedralConvexShape.cxx_initializePolyhedralFeatures!(
    SInt32 shiftVerticesByMargin
    )
 = "Bullet2__btPolyhedralConvexShape__MU__meth_initializePolyhedralFeatures__e655eb080a9fb2df4b6b28035b9481fd";

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstPtr
btPolyhedralConvexShape.cxx_getConvexPolyhedron?(
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_getConvexPolyhedron__9a3d4cc86c990491bfcba2bb872523a1";

/// \dfgPresetOmit
/// \internal
btVector3
btPolyhedralConvexShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_localGetSupportingVertexWithoutMargin__6619e85b4e7e7e754883a2b2055b85dd";

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__ee1f9e78021e078411d5c0042cb7e302";

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_calculateLocalInertia__f128abfec07109101fbb9aa09b40aa84";

/// \dfgPresetOmit
/// \internal
SInt32
btPolyhedralConvexShape.cxx_getNumVertices?(
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_getNumVertices__c1cdf851344113b038deb26219ab1ef5";

/// \dfgPresetOmit
/// \internal
SInt32
btPolyhedralConvexShape.cxx_getNumEdges?(
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_getNumEdges__6ded1f418b71299f1a343bd21b4cbb1f";

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexShape.cxx_getEdge?(
    SInt32 i,
    CxxbtVector3Ref pa,
    CxxbtVector3Ref pb
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_getEdge__ead547b5a92b64b9872f25df5662690a";

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexShape.cxx_getVertex?(
    SInt32 i,
    CxxbtVector3Ref vtx
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_getVertex__d76d553fd4a2eb309d4d5b1af2a80532";

/// \dfgPresetOmit
/// \internal
SInt32
btPolyhedralConvexShape.cxx_getNumPlanes?(
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_getNumPlanes__83ce8998b6b6515d5a01a7885b2be7a5";

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexShape.cxx_getPlane?(
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport,
    SInt32 i
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_getPlane__a1d60ed56f772402e054a347f88fe040";

/// \dfgPresetOmit
/// \internal
Boolean
btPolyhedralConvexShape.cxx_isInside?(
    CxxbtVector3ConstRef pt,
    Float32 tolerance
    )
 = "Bullet2__btPolyhedralConvexShape__CO__meth_isInside__58aa28eee26dbe6b7a2d3622bdb03a65";


btPolyhedralConvexShape.getEdge?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    pa
    
    ,
    io
    btVector3
    pb
    
    
    )
{   
    
    
    CxxbtVector3Ref pa__cxx = Make_CxxbtVector3Ref(pa);
    
    CxxbtVector3Ref pb__cxx = Make_CxxbtVector3Ref(pb);
    
    this.cxx_getEdge(
        i,
        pa__cxx,
        pb__cxx
        );
    
    
    
    
    
}

Boolean
btPolyhedralConvexShape.isInside?(
    in
    btVector3
    pt
    
    ,
    in
    Float32
    tolerance
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    Boolean __res = 
    this.cxx_isInside(
        pt__cxx,
        tolerance
        );
    
    
    
    return __res;
}

///optional method mainly used to generate multiple contact points by clipping polyhedral features (faces/edges)
///experimental/work-in-progress
Boolean
btPolyhedralConvexShape.initializePolyhedralFeatures!(
    )
{   
    Boolean __res = 
    this.cxx_initializePolyhedralFeatures(
        );
    
    return __res;
}


btPolyhedralConvexShape.getPlane?(
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    
    this.cxx_getPlane(
        planeNormal__cxx,
        planeSupport__cxx,
        i
        );
    
    
    
    
    
}

btVector3
btPolyhedralConvexShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

SInt32
btPolyhedralConvexShape.getNumEdges?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumEdges(
        );
    
    return __res;
}

btConvexPolyhedron
btPolyhedralConvexShape.getConvexPolyhedron?(
    )
{   
    CxxbtConvexPolyhedronConstPtr __res_cxx = 
    this.cxx_getConvexPolyhedron(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtConvexPolyhedronConstPtr';
    btConvexPolyhedron __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

SInt32
btPolyhedralConvexShape.getNumPlanes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPlanes(
        );
    
    return __res;
}

Boolean
btPolyhedralConvexShape.initializePolyhedralFeatures!(
    in
    SInt32
    shiftVerticesByMargin
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_initializePolyhedralFeatures(
        shiftVerticesByMargin
        );
    
    
    return __res;
}

SInt32
btPolyhedralConvexShape.getNumVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumVertices(
        );
    
    return __res;
}


btPolyhedralConvexShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}


btPolyhedralConvexShape.getVertex?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    vtx
    
    
    )
{   
    
    
    CxxbtVector3Ref vtx__cxx = Make_CxxbtVector3Ref(vtx);
    
    this.cxx_getVertex(
        i,
        vtx__cxx
        );
    
    
    
    
}


btPolyhedralConvexShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexShape] EDK[Fabric_EDK_KL_btPolyhedralConvexShape] LIB[btPolyhedralConvexShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPolyhedralConvexShape.=(
    btPolyhedralConvexShape that
    ) = "Bullet2__btPolyhedralConvexShape__MU__simple_ass_op__b389748002400aa2071d60e34dd306be";


/// \dfgPresetOmit
/// \internal
btPolyhedralConvexShape.appendDesc(io String string) {
  string += "btPolyhedralConvexShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btPolyhedralConvexAabbCachingShape(
    btPolyhedralConvexAabbCachingShape that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btPolyhedralConvexAabbCachingShape.cxx_delete() = "Bullet2__btPolyhedralConvexAabbCachingShape__MU__delete__e502e0ad4192d26516c555952ac2acff";

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexAabbCachingShape.cxx_getNonvirtualAabb?(
    CxxbtTransformConstRef trans,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax,
    Float32 margin
    )
 = "Bullet2__btPolyhedralConvexAabbCachingShape__CO__meth_getNonvirtualAabb__6ae2c93441ed641de03fe105d441c784";

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexAabbCachingShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btPolyhedralConvexAabbCachingShape__MU__meth_setLocalScaling__d4994662e588362884d7049bfe29d497";

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexAabbCachingShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btPolyhedralConvexAabbCachingShape__CO__meth_getAabb__1e41aa64ab0866cdf1c5722410e8d5fa";

/// \dfgPresetOmit
/// \internal

btPolyhedralConvexAabbCachingShape.cxx_recalcLocalAabb!(
    )
 = "Bullet2__btPolyhedralConvexAabbCachingShape__MU__meth_recalcLocalAabb__758b556eaa8eb5c3b03ab4fdfe9c0209";


btPolyhedralConvexAabbCachingShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btPolyhedralConvexAabbCachingShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btPolyhedralConvexAabbCachingShape.recalcLocalAabb!(
    )
{   
    
    this.cxx_recalcLocalAabb(
        );
    
    
}


btPolyhedralConvexAabbCachingShape.getNonvirtualAabb?(
    in
    btTransform
    trans
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    ,
    in
    Float32
    margin
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    
    this.cxx_getNonvirtualAabb(
        trans__cxx,
        aabbMin__cxx,
        aabbMax__cxx,
        margin
        );
    
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPolyhedralConvexAabbCachingShape] EDK[Fabric_EDK_KL_btPolyhedralConvexAabbCachingShape] LIB[btPolyhedralConvexAabbCachingShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPolyhedralConvexAabbCachingShape.=(
    btPolyhedralConvexAabbCachingShape that
    ) = "Bullet2__btPolyhedralConvexAabbCachingShape__MU__simple_ass_op__98ed5193b210a775419193a4a3ec08b5";


/// \dfgPresetOmit
/// \internal
btPolyhedralConvexAabbCachingShape.appendDesc(io String string) {
  string += "btPolyhedralConvexAabbCachingShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBoxShape() = "Bullet2__btBoxShape__MU__empty_ctor__5e3e7622790c99bc4eab5126e7a111dc";

/// \dfgPresetOmit
btBoxShape(
    btBoxShape that
    ) = "Bullet2__btBoxShape__MU__copy_ctor__170c17aa0920ff1a8df4e3fb71e89b73";

/// \dfgPresetOmit
/// \internal
btBoxShape.__ctor(
    CxxbtVector3ConstRef boxHalfExtents
    ) = "Bullet2__btBoxShape__MU__ctor__aae29407e2998bd7b9de29705391c01e";

/// \dfgPresetOmit
btBoxShape(
    CxxbtVector3ConstRef boxHalfExtents
    ) {
    this.__ctor(
        boxHalfExtents
        );
}

btBoxShape(
    in
    btVector3
    boxHalfExtents
    
    
    ) {
    
    CxxbtVector3ConstRef boxHalfExtents__cxx = Make_CxxbtVector3ConstRef(boxHalfExtents);
    this.__ctor(
        boxHalfExtents__cxx
        );
    
}

btBoxShape.cxx_delete() = "Bullet2__btBoxShape__MU__delete__efd3b89bf5a11836dd0fbc23a0d8a4c2";

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btBoxShape.cxx_getHalfExtentsWithMargin?(
    )
 = "Bullet2__btBoxShape__CO__meth_getHalfExtentsWithMargin__058ef804f4d5f402b81016ac3e8ba767";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btBoxShape.cxx_getHalfExtentsWithoutMargin?(
    )
 = "Bullet2__btBoxShape__CO__meth_getHalfExtentsWithoutMargin__0163896f4e4d8c2349d114993d8114de";

/// \dfgPresetOmit
/// \internal
btVector3
btBoxShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btBoxShape__CO__meth_localGetSupportingVertex__49b34e12f2ea24c82dfcae180fe106b9";

/// \dfgPresetOmit
/// \internal
btVector3
btBoxShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btBoxShape__CO__meth_localGetSupportingVertexWithoutMargin__76f43a001075b5447c9c93a2e1e1330c";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btBoxShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__59d2d1be5da543a890e8e3822b2faed6";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_setMargin!(
    Float32 collisionMargin
    )
 = "Bullet2__btBoxShape__MU__meth_setMargin__9aada43c57322d447608b4a41278a929";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btBoxShape__MU__meth_setLocalScaling__994ff55959d6e50d9a57cb97587154a6";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btBoxShape__CO__meth_getAabb__5eba1718f297d3132306e19cd05f7c99";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btBoxShape__CO__meth_calculateLocalInertia__b6304399ee0efc132d4a04c09efd3950";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_getPlane?(
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport,
    SInt32 i
    )
 = "Bullet2__btBoxShape__CO__meth_getPlane__1711e7d210d19d516304a398fab4ceae";

/// \dfgPresetOmit
/// \internal
SInt32
btBoxShape.cxx_getNumPlanes?(
    )
 = "Bullet2__btBoxShape__CO__meth_getNumPlanes__2040da0b3d567e2b60cbb6bcf4e60b73";

/// \dfgPresetOmit
/// \internal
SInt32
btBoxShape.cxx_getNumVertices?(
    )
 = "Bullet2__btBoxShape__CO__meth_getNumVertices__7275004566f0830fc0f0cbf31edb7d00";

/// \dfgPresetOmit
/// \internal
SInt32
btBoxShape.cxx_getNumEdges?(
    )
 = "Bullet2__btBoxShape__CO__meth_getNumEdges__5e8696792684aa5fc8645626f4e66628";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_getVertex?(
    SInt32 i,
    CxxbtVector3Ref vtx
    )
 = "Bullet2__btBoxShape__CO__meth_getVertex__413547a2a169646cc04af3ee081f70fb";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_getPlaneEquation?(
    CxxbtVector4Ref plane,
    SInt32 i
    )
 = "Bullet2__btBoxShape__CO__meth_getPlaneEquation__5c6743fa4417b8c70f00beab13e12ac0";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_getEdge?(
    SInt32 i,
    CxxbtVector3Ref pa,
    CxxbtVector3Ref pb
    )
 = "Bullet2__btBoxShape__CO__meth_getEdge__7920d26d1ce4079c9deed4395c166b03";

/// \dfgPresetOmit
/// \internal
Boolean
btBoxShape.cxx_isInside?(
    CxxbtVector3ConstRef pt,
    Float32 tolerance
    )
 = "Bullet2__btBoxShape__CO__meth_isInside__ff35522e061645dcf031e8abc623bfc3";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btBoxShape.cxx_getName?(
    )
 = "Bullet2__btBoxShape__CO__meth_getName__b8ef09aa4d4a23eb11c4ef0f7634bc23";

/// \dfgPresetOmit
/// \internal
SInt32
btBoxShape.cxx_getNumPreferredPenetrationDirections?(
    )
 = "Bullet2__btBoxShape__CO__meth_getNumPreferredPenetrationDirections__028a533659683678671995401348e8a8";

/// \dfgPresetOmit
/// \internal

btBoxShape.cxx_getPreferredPenetrationDirection?(
    SInt32 index,
    CxxbtVector3Ref penetrationVector
    )
 = "Bullet2__btBoxShape__CO__meth_getPreferredPenetrationDirection__09ed94697d6fd6bd0160cde054312142";


btBoxShape.setMargin!(
    in
    Float32
    collisionMargin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        collisionMargin
        );
    
    
    
}

btVector3
btBoxShape.getHalfExtentsWithMargin?(
    )
{   
    btVector3 __res = 
    this.cxx_getHalfExtentsWithMargin(
        );
    
    return __res;
}


btBoxShape.getEdge?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    pa
    
    ,
    io
    btVector3
    pb
    
    
    )
{   
    
    
    CxxbtVector3Ref pa__cxx = Make_CxxbtVector3Ref(pa);
    
    CxxbtVector3Ref pb__cxx = Make_CxxbtVector3Ref(pb);
    
    this.cxx_getEdge(
        i,
        pa__cxx,
        pb__cxx
        );
    
    
    
    
    
}

SInt32
btBoxShape.getNumEdges?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumEdges(
        );
    
    return __res;
}


btBoxShape.getPlaneEquation?(
    io
    btVector4
    plane
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector4Ref plane__cxx = Make_CxxbtVector4Ref(plane);
    
    
    this.cxx_getPlaneEquation(
        plane__cxx,
        i
        );
    
    
    
    
}

btVector3
btBoxShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

String
btBoxShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btBoxShape.getVertex?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    vtx
    
    
    )
{   
    
    
    CxxbtVector3Ref vtx__cxx = Make_CxxbtVector3Ref(vtx);
    
    this.cxx_getVertex(
        i,
        vtx__cxx
        );
    
    
    
    
}

btVector3
btBoxShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

SInt32
btBoxShape.getNumVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumVertices(
        );
    
    return __res;
}


btBoxShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

btVector3
btBoxShape.getHalfExtentsWithoutMargin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getHalfExtentsWithoutMargin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btBoxShape.getNumPreferredPenetrationDirections?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPreferredPenetrationDirections(
        );
    
    return __res;
}


btBoxShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}


btBoxShape.getPlane?(
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    
    this.cxx_getPlane(
        planeNormal__cxx,
        planeSupport__cxx,
        i
        );
    
    
    
    
    
}

Boolean
btBoxShape.isInside?(
    in
    btVector3
    pt
    
    ,
    in
    Float32
    tolerance
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    Boolean __res = 
    this.cxx_isInside(
        pt__cxx,
        tolerance
        );
    
    
    
    return __res;
}


btBoxShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}


btBoxShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btBoxShape.getPreferredPenetrationDirection?(
    in
    SInt32
    index
    
    ,
    io
    btVector3
    penetrationVector
    
    
    )
{   
    
    
    CxxbtVector3Ref penetrationVector__cxx = Make_CxxbtVector3Ref(penetrationVector);
    
    this.cxx_getPreferredPenetrationDirection(
        index,
        penetrationVector__cxx
        );
    
    
    
    
}

SInt32
btBoxShape.getNumPlanes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPlanes(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxShape] EDK[Fabric_EDK_KL_btBoxShape] LIB[btBoxShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBoxShape.=(
    btBoxShape that
    ) = "Bullet2__btBoxShape__MU__simple_ass_op__0c55da8058996d993481fa4b9bafb579";


/// \dfgPresetOmit
/// \internal
btBoxShape.appendDesc(io String string) {
  string += "btBoxShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBox2dShape() = "Bullet2__btBox2dShape__MU__empty_ctor__03fd38e409887d701e3d7d9d630b1083";

/// \dfgPresetOmit
btBox2dShape(
    btBox2dShape that
    ) = "Bullet2__btBox2dShape__MU__copy_ctor__b9b8f4dbabc379a1e6504b6d8874bd07";

/// \dfgPresetOmit
/// \internal
btBox2dShape.__ctor(
    CxxbtVector3ConstRef boxHalfExtents
    ) = "Bullet2__btBox2dShape__MU__ctor__398ca4ac789308c3d5d8cdbe8072a783";

///a btBox2dShape is a flat 2D box in the X-Y plane (Z extents are zero)
/// \dfgPresetOmit
btBox2dShape(
    CxxbtVector3ConstRef boxHalfExtents
    ) {
    this.__ctor(
        boxHalfExtents
        );
}

///a btBox2dShape is a flat 2D box in the X-Y plane (Z extents are zero)
btBox2dShape(
    in
    btVector3
    boxHalfExtents
    
    
    ) {
    
    CxxbtVector3ConstRef boxHalfExtents__cxx = Make_CxxbtVector3ConstRef(boxHalfExtents);
    this.__ctor(
        boxHalfExtents__cxx
        );
    
}

btBox2dShape.cxx_delete() = "Bullet2__btBox2dShape__MU__delete__3cf5def365147564d35809980e0f73ef";

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btBox2dShape.cxx_getHalfExtentsWithMargin?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getHalfExtentsWithMargin__632f73dbe5c0089e17dfdeb958e94b11";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btBox2dShape.cxx_getHalfExtentsWithoutMargin?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getHalfExtentsWithoutMargin__99c560c7b2a8dbcb62b50feec1385b9e";

/// \dfgPresetOmit
/// \internal
btVector3
btBox2dShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btBox2dShape__CO__meth_localGetSupportingVertex__6ca53be4354873c99b62216adcba5638";

/// \dfgPresetOmit
/// \internal
btVector3
btBox2dShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btBox2dShape__CO__meth_localGetSupportingVertexWithoutMargin__901ce3289e77f1af1575155e5f1a8a66";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btBox2dShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__3d5806a2064be208d7cebdf97fc4eadb";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_setMargin!(
    Float32 collisionMargin
    )
 = "Bullet2__btBox2dShape__MU__meth_setMargin__2ad13c765e1e448af434a1fbe4711335";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btBox2dShape__MU__meth_setLocalScaling__895b97438af4e56b82c1759320787148";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btBox2dShape__CO__meth_getAabb__5289e402aafc0c3d329b7c92cbe3209c";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btBox2dShape__CO__meth_calculateLocalInertia__92560a5283f03bae0f4f35d28b6dc504";

/// \dfgPresetOmit
/// \internal
SInt32
btBox2dShape.cxx_getVertexCount?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getVertexCount__277cd01d3b2fd2e7260bccb9f936685c";

/// \dfgPresetOmit
/// \internal
SInt32
btBox2dShape.cxx_getNumVertices?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getNumVertices__aa98c58b494eaf1c03b364f29b4524ba";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr
btBox2dShape.cxx_getVertices?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getVertices__b91223943899dfdd59da6211f4bfebcc";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr
btBox2dShape.cxx_getNormals?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getNormals__29476dee906e5002ac716e2d49f8df15";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_getPlane?(
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport,
    SInt32 i
    )
 = "Bullet2__btBox2dShape__CO__meth_getPlane__31f49bd4b98a7e3f9b96646b556068d1";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btBox2dShape.cxx_getCentroid?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getCentroid__82302f5389a8ad049961c5291e0e534c";

/// \dfgPresetOmit
/// \internal
SInt32
btBox2dShape.cxx_getNumPlanes?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getNumPlanes__c2480e77b03c2320a9063811f697548f";

/// \dfgPresetOmit
/// \internal
SInt32
btBox2dShape.cxx_getNumEdges?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getNumEdges__4ac0436f70bf08e53705f0c53d34e34c";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_getVertex?(
    SInt32 i,
    CxxbtVector3Ref vtx
    )
 = "Bullet2__btBox2dShape__CO__meth_getVertex__78d267c8b97a9178e1c7ad1c04d63146";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_getPlaneEquation?(
    CxxbtVector4Ref plane,
    SInt32 i
    )
 = "Bullet2__btBox2dShape__CO__meth_getPlaneEquation__1788e9738e5725dd0d7b00377a30385d";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_getEdge?(
    SInt32 i,
    CxxbtVector3Ref pa,
    CxxbtVector3Ref pb
    )
 = "Bullet2__btBox2dShape__CO__meth_getEdge__0da4587b5fb4e81a4ac864c6f0054a93";

/// \dfgPresetOmit
/// \internal
Boolean
btBox2dShape.cxx_isInside?(
    CxxbtVector3ConstRef pt,
    Float32 tolerance
    )
 = "Bullet2__btBox2dShape__CO__meth_isInside__c9532100f3705efa9f30973fe0b5e5da";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btBox2dShape.cxx_getName?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getName__4658fbfa094e773e7d392c0af1d5ed4d";

/// \dfgPresetOmit
/// \internal
SInt32
btBox2dShape.cxx_getNumPreferredPenetrationDirections?(
    )
 = "Bullet2__btBox2dShape__CO__meth_getNumPreferredPenetrationDirections__08b43fa44e46512063d7ea24e31279f3";

/// \dfgPresetOmit
/// \internal

btBox2dShape.cxx_getPreferredPenetrationDirection?(
    SInt32 index,
    CxxbtVector3Ref penetrationVector
    )
 = "Bullet2__btBox2dShape__CO__meth_getPreferredPenetrationDirection__63ada8b173129e2667295b30ba22e274";

btVector3
btBox2dShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

btVector3
btBox2dShape.getVertices?(
    )
{   
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_getVertices(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btBox2dShape.setMargin!(
    in
    Float32
    collisionMargin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        collisionMargin
        );
    
    
    
}

SInt32
btBox2dShape.getVertexCount?(
    )
{   
    SInt32 __res = 
    this.cxx_getVertexCount(
        );
    
    return __res;
}

btVector3
btBox2dShape.getCentroid?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getCentroid(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btBox2dShape.getNumPlanes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPlanes(
        );
    
    return __res;
}

btVector3
btBox2dShape.getNormals?(
    )
{   
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_getNormals(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btBox2dShape.getPreferredPenetrationDirection?(
    in
    SInt32
    index
    
    ,
    io
    btVector3
    penetrationVector
    
    
    )
{   
    
    
    CxxbtVector3Ref penetrationVector__cxx = Make_CxxbtVector3Ref(penetrationVector);
    
    this.cxx_getPreferredPenetrationDirection(
        index,
        penetrationVector__cxx
        );
    
    
    
    
}


btBox2dShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

Boolean
btBox2dShape.isInside?(
    in
    btVector3
    pt
    
    ,
    in
    Float32
    tolerance
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    Boolean __res = 
    this.cxx_isInside(
        pt__cxx,
        tolerance
        );
    
    
    
    return __res;
}

btVector3
btBox2dShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

btVector3
btBox2dShape.getHalfExtentsWithoutMargin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getHalfExtentsWithoutMargin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btBox2dShape.getNumEdges?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumEdges(
        );
    
    return __res;
}

SInt32
btBox2dShape.getNumVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumVertices(
        );
    
    return __res;
}


btBox2dShape.getPlaneEquation?(
    io
    btVector4
    plane
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector4Ref plane__cxx = Make_CxxbtVector4Ref(plane);
    
    
    this.cxx_getPlaneEquation(
        plane__cxx,
        i
        );
    
    
    
    
}

SInt32
btBox2dShape.getNumPreferredPenetrationDirections?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPreferredPenetrationDirections(
        );
    
    return __res;
}


btBox2dShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}


btBox2dShape.getPlane?(
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    
    this.cxx_getPlane(
        planeNormal__cxx,
        planeSupport__cxx,
        i
        );
    
    
    
    
    
}

String
btBox2dShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btBox2dShape.getEdge?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    pa
    
    ,
    io
    btVector3
    pb
    
    
    )
{   
    
    
    CxxbtVector3Ref pa__cxx = Make_CxxbtVector3Ref(pa);
    
    CxxbtVector3Ref pb__cxx = Make_CxxbtVector3Ref(pb);
    
    this.cxx_getEdge(
        i,
        pa__cxx,
        pb__cxx
        );
    
    
    
    
    
}


btBox2dShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btBox2dShape.getVertex?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    vtx
    
    
    )
{   
    
    
    CxxbtVector3Ref vtx__cxx = Make_CxxbtVector3Ref(vtx);
    
    this.cxx_getVertex(
        i,
        vtx__cxx
        );
    
    
    
    
}

btVector3
btBox2dShape.getHalfExtentsWithMargin?(
    )
{   
    btVector3 __res = 
    this.cxx_getHalfExtentsWithMargin(
        );
    
    return __res;
}


btBox2dShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dShape] EDK[Fabric_EDK_KL_btBox2dShape] LIB[btBox2dShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBox2dShape.=(
    btBox2dShape that
    ) = "Bullet2__btBox2dShape__MU__simple_ass_op__319827a92801be9d271599f5f5948404";


/// \dfgPresetOmit
/// \internal
btBox2dShape.appendDesc(io String string) {
  string += "btBox2dShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCapsuleShape() = "Bullet2__btCapsuleShape__MU__empty_ctor__85af263fd617d31c74dc0ac122ed0a4f";

/// \dfgPresetOmit
btCapsuleShape(
    btCapsuleShape that
    ) = "Bullet2__btCapsuleShape__MU__copy_ctor__b4341fda7d3dc0bb0cacb9b857e70e7d";

/// \dfgPresetOmit
/// \internal
btCapsuleShape.__ctor(
    Float32 radius,
    Float32 height
    ) = "Bullet2__btCapsuleShape__MU__ctor__f346386ca3ff569ac47188ce3fc35ee4";

/// \dfgPresetOmit
btCapsuleShape(
    Float32 radius,
    Float32 height
    ) {
    this.__ctor(
        radius,
        height
        );
}

btCapsuleShape.cxx_delete() = "Bullet2__btCapsuleShape__MU__delete__4d96b1a513b22a1c088fb124ddc5dd56";

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///CollisionShape Interface
/// \dfgPresetOmit
/// \internal

btCapsuleShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btCapsuleShape__CO__meth_calculateLocalInertia__469ad208855e276362fbf48e79472e3f";

/// btConvexShape Interface
/// \dfgPresetOmit
/// \internal
btVector3
btCapsuleShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btCapsuleShape__CO__meth_localGetSupportingVertexWithoutMargin__769a3202d31e19e61c03bb236f13d165";

/// \dfgPresetOmit
/// \internal

btCapsuleShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btCapsuleShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__f41950954dddccde38195873935e7f2e";

/// \dfgPresetOmit
/// \internal

btCapsuleShape.cxx_setMargin!(
    Float32 collisionMargin
    )
 = "Bullet2__btCapsuleShape__MU__meth_setMargin__46d33f5827d1f26d9a3b67e6d4e388ab";

/// \dfgPresetOmit
/// \internal

btCapsuleShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btCapsuleShape__CO__meth_getAabb__58eb4c028ea07f3d6b209a2410a8aa7c";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCapsuleShape.cxx_getName?(
    )
 = "Bullet2__btCapsuleShape__CO__meth_getName__bd44f1fa491a3488da39f7041c77613c";

/// \dfgPresetOmit
/// \internal
SInt32
btCapsuleShape.cxx_getUpAxis?(
    )
 = "Bullet2__btCapsuleShape__CO__meth_getUpAxis__021449e55cb2e2a27bec8cc7bcd5aeae";

/// \dfgPresetOmit
/// \internal
Float32
btCapsuleShape.cxx_getRadius?(
    )
 = "Bullet2__btCapsuleShape__CO__meth_getRadius__546936acd5c228aa9d25a60ed6edea5c";

/// \dfgPresetOmit
/// \internal
Float32
btCapsuleShape.cxx_getHalfHeight?(
    )
 = "Bullet2__btCapsuleShape__CO__meth_getHalfHeight__b19577953f3ee4e76abf436a66614fb6";

/// \dfgPresetOmit
/// \internal

btCapsuleShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btCapsuleShape__MU__meth_setLocalScaling__482d0c39b9a9f7c6ed9f1ae3657258a2";

/// \dfgPresetOmit
/// \internal
btVector3
btCapsuleShape.cxx_getAnisotropicRollingFrictionDirection?(
    )
 = "Bullet2__btCapsuleShape__CO__meth_getAnisotropicRollingFrictionDirection__0798168b5b0c07f98a7d7dbfb7a8e963";

/// \dfgPresetOmit
/// \internal
SInt32
btCapsuleShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btCapsuleShape__CO__meth_calculateSerializeBufferSize__389b1ca52abd910b89cb09135a838365";

/// \dfgPresetOmit
/// \internal

btCapsuleShape.cxx_deSerializeFloat!(
    btCapsuleShapeData dataBuffer
    )
 = "Bullet2__btCapsuleShape__MU__meth_deSerializeFloat__011cd4d557a3d898c8ab50a16b06d8c3";

String
btCapsuleShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

Float32
btCapsuleShape.getHalfHeight?(
    )
{   
    Float32 __res = 
    this.cxx_getHalfHeight(
        );
    
    return __res;
}

Float32
btCapsuleShape.getRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getRadius(
        );
    
    return __res;
}


btCapsuleShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

SInt32
btCapsuleShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btCapsuleShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btCapsuleShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

/// btConvexShape Interface
btVector3
btCapsuleShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}


btCapsuleShape.setMargin!(
    in
    Float32
    collisionMargin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        collisionMargin
        );
    
    
    
}

///CollisionShape Interface

btCapsuleShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

btVector3
btCapsuleShape.getAnisotropicRollingFrictionDirection?(
    )
{   
    btVector3 __res = 
    this.cxx_getAnisotropicRollingFrictionDirection(
        );
    
    return __res;
}


btCapsuleShape.deSerializeFloat!(
    in
    btCapsuleShapeData
    dataBuffer
    
    
    )
{   
    
    
    this.cxx_deSerializeFloat(
        dataBuffer
        );
    
    
    
}

SInt32
btCapsuleShape.getUpAxis?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpAxis(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShape] EDK[Fabric_EDK_KL_btCapsuleShape] LIB[btCapsuleShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCapsuleShape.=(
    btCapsuleShape that
    ) = "Bullet2__btCapsuleShape__MU__simple_ass_op__867b7d443881e38569839c5451c670cc";


/// \dfgPresetOmit
/// \internal
btCapsuleShape.appendDesc(io String string) {
  string += "btCapsuleShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCapsuleShapeX() = "Bullet2__btCapsuleShapeX__MU__empty_ctor__010ebeec93e563b86df99f2b7e2859aa";

/// \dfgPresetOmit
btCapsuleShapeX(
    btCapsuleShapeX that
    ) = "Bullet2__btCapsuleShapeX__MU__copy_ctor__33ec74f3e0c8885c326ee00ad2ce95cc";

/// \dfgPresetOmit
/// \internal
btCapsuleShapeX.__ctor(
    Float32 radius,
    Float32 height
    ) = "Bullet2__btCapsuleShapeX__MU__ctor__ff949d94da34f49e00961c432b1be98f";

/// \dfgPresetOmit
btCapsuleShapeX(
    Float32 radius,
    Float32 height
    ) {
    this.__ctor(
        radius,
        height
        );
}

btCapsuleShapeX.cxx_delete() = "Bullet2__btCapsuleShapeX__MU__delete__0d21282f97bb6e6e063d4d5e277d87a1";

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCapsuleShapeX.cxx_getName?(
    )
 = "Bullet2__btCapsuleShapeX__CO__meth_getName__057adc8c6bcea6ac88b29a4ca4046ace";

String
btCapsuleShapeX.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeX] EDK[Fabric_EDK_KL_btCapsuleShapeX] LIB[btCapsuleShapeX *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCapsuleShapeX.=(
    btCapsuleShapeX that
    ) = "Bullet2__btCapsuleShapeX__MU__simple_ass_op__fb04693eff7d82fbea5b56545852d60b";


/// \dfgPresetOmit
/// \internal
btCapsuleShapeX.appendDesc(io String string) {
  string += "btCapsuleShapeX:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCapsuleShapeZ() = "Bullet2__btCapsuleShapeZ__MU__empty_ctor__914f1678feed3587e75959707cdcf05e";

/// \dfgPresetOmit
btCapsuleShapeZ(
    btCapsuleShapeZ that
    ) = "Bullet2__btCapsuleShapeZ__MU__copy_ctor__11f27c8ab58e9121158077c4b8662f9b";

/// \dfgPresetOmit
/// \internal
btCapsuleShapeZ.__ctor(
    Float32 radius,
    Float32 height
    ) = "Bullet2__btCapsuleShapeZ__MU__ctor__a23a175f45a1ae90ed0c7debd011935c";

/// \dfgPresetOmit
btCapsuleShapeZ(
    Float32 radius,
    Float32 height
    ) {
    this.__ctor(
        radius,
        height
        );
}

btCapsuleShapeZ.cxx_delete() = "Bullet2__btCapsuleShapeZ__MU__delete__1c500598e9c8613a8a7823b6acfb640a";

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCapsuleShapeZ.cxx_getName?(
    )
 = "Bullet2__btCapsuleShapeZ__CO__meth_getName__d4f0384daadd7f8f6a4ecfbe32e4c466";

String
btCapsuleShapeZ.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeZ] EDK[Fabric_EDK_KL_btCapsuleShapeZ] LIB[btCapsuleShapeZ *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCapsuleShapeZ.=(
    btCapsuleShapeZ that
    ) = "Bullet2__btCapsuleShapeZ__MU__simple_ass_op__5791f182baddd4c5fa3b8b5879f6268e";


/// \dfgPresetOmit
/// \internal
btCapsuleShapeZ.appendDesc(io String string) {
  string += "btCapsuleShapeZ:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCapsuleShapeData] EDK[Fabric_EDK_KL_btCapsuleShapeData] LIB[btCapsuleShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeData] EDK[Fabric_EDK_KL_btCapsuleShapeData] LIB[btCapsuleShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeData] EDK[Fabric_EDK_KL_btCapsuleShapeData] LIB[btCapsuleShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCapsuleShapeData() = "Bullet2__btCapsuleShapeData__MU__empty_ctor__8a9754452eeeef7db5c1b710eec34e71";

/// \dfgPresetOmit
btCapsuleShapeData(
    btCapsuleShapeData that
    ) = "Bullet2__btCapsuleShapeData__MU__copy_ctor__8466d275a93b380d86e87fb41b75f8c3";

btCapsuleShapeData.cxx_delete() = "Bullet2__btCapsuleShapeData__MU__delete__3cd05aa246b5435980449b92160bbc32";

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeData] EDK[Fabric_EDK_KL_btCapsuleShapeData] LIB[btCapsuleShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeData] EDK[Fabric_EDK_KL_btCapsuleShapeData] LIB[btCapsuleShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCapsuleShapeData] EDK[Fabric_EDK_KL_btCapsuleShapeData] LIB[btCapsuleShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCapsuleShapeData.=(
    btCapsuleShapeData that
    ) = "Bullet2__btCapsuleShapeData__MU__simple_ass_op__bc7c75f12bb067046dbc52bbdd0bc052";


/// \dfgPresetOmit
/// \internal
btCapsuleShapeData.appendDesc(io String string) {
  string += "btCapsuleShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConeShape() = "Bullet2__btConeShape__MU__empty_ctor__54994f0475c024c80a3e8c3f682afc56";

/// \dfgPresetOmit
btConeShape(
    btConeShape that
    ) = "Bullet2__btConeShape__MU__copy_ctor__ded31fc46ed7683a0e4c9f16dada48c7";

/// \dfgPresetOmit
/// \internal
btConeShape.__ctor(
    Float32 radius,
    Float32 height
    ) = "Bullet2__btConeShape__MU__ctor__2e032d2cf09c15ce0f839abd2efb38ae";

/// \dfgPresetOmit
btConeShape(
    Float32 radius,
    Float32 height
    ) {
    this.__ctor(
        radius,
        height
        );
}

btConeShape.cxx_delete() = "Bullet2__btConeShape__MU__delete__37f99c19a9ba31089f21f47769973f4d";

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btConeShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConeShape__CO__meth_localGetSupportingVertex__02dc16f07d6cee01a4849caf4fc3c2e0";

/// \dfgPresetOmit
/// \internal
btVector3
btConeShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConeShape__CO__meth_localGetSupportingVertexWithoutMargin__da4b5daab3c2d1f62958cbb9d812bb9f";

/// \dfgPresetOmit
/// \internal

btConeShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btConeShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__d1b0f1ddbef44adf0427c88f110a643e";

/// \dfgPresetOmit
/// \internal
Float32
btConeShape.cxx_getRadius?(
    )
 = "Bullet2__btConeShape__CO__meth_getRadius__4b012c52539ee00bff9cb2eebfe91d62";

/// \dfgPresetOmit
/// \internal
Float32
btConeShape.cxx_getHeight?(
    )
 = "Bullet2__btConeShape__CO__meth_getHeight__d34c35aacc8649bd0a5d549298e8613f";

/// \dfgPresetOmit
/// \internal

btConeShape.cxx_setRadius!(
    Float32 radius
    )
 = "Bullet2__btConeShape__MU__meth_setRadius__29b8b89f95c3c162ee270205b89e632a";

/// \dfgPresetOmit
/// \internal

btConeShape.cxx_setHeight!(
    Float32 height
    )
 = "Bullet2__btConeShape__MU__meth_setHeight__99353e618aa089c0c0bde3f338d33986";

/// \dfgPresetOmit
/// \internal

btConeShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btConeShape__CO__meth_calculateLocalInertia__ddfa8d985070c173d1ba7f1d096ebe2e";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btConeShape.cxx_getName?(
    )
 = "Bullet2__btConeShape__CO__meth_getName__da365edc4fd9cf85d17447bff327b667";

///choose upAxis index
/// \dfgPresetOmit
/// \internal

btConeShape.cxx_setConeUpIndex!(
    SInt32 upIndex
    )
 = "Bullet2__btConeShape__MU__meth_setConeUpIndex__d2d0b64d5c379e663fef2117113124e8";

/// \dfgPresetOmit
/// \internal
SInt32
btConeShape.cxx_getConeUpIndex?(
    )
 = "Bullet2__btConeShape__CO__meth_getConeUpIndex__c05b23626e13ce2fdaee163801f9f143";

/// \dfgPresetOmit
/// \internal
btVector3
btConeShape.cxx_getAnisotropicRollingFrictionDirection?(
    )
 = "Bullet2__btConeShape__CO__meth_getAnisotropicRollingFrictionDirection__466854086abb2060005ccccaeeda9000";

/// \dfgPresetOmit
/// \internal

btConeShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btConeShape__MU__meth_setLocalScaling__cde55c637290b93add70a11d0503aa65";

/// \dfgPresetOmit
/// \internal
SInt32
btConeShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btConeShape__CO__meth_calculateSerializeBufferSize__b3e01b90110e13badd79e4eafd5bff86";

String
btConeShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btConeShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btConeShape.setRadius!(
    in
    Float32
    radius
    
    
    )
{   
    
    
    this.cxx_setRadius(
        radius
        );
    
    
    
}

btVector3
btConeShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

SInt32
btConeShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btConeShape.setHeight!(
    in
    Float32
    height
    
    
    )
{   
    
    
    this.cxx_setHeight(
        height
        );
    
    
    
}

btVector3
btConeShape.getAnisotropicRollingFrictionDirection?(
    )
{   
    btVector3 __res = 
    this.cxx_getAnisotropicRollingFrictionDirection(
        );
    
    return __res;
}

SInt32
btConeShape.getConeUpIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getConeUpIndex(
        );
    
    return __res;
}

Float32
btConeShape.getRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getRadius(
        );
    
    return __res;
}


btConeShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

///choose upAxis index

btConeShape.setConeUpIndex!(
    in
    SInt32
    upIndex
    
    
    )
{   
    
    
    this.cxx_setConeUpIndex(
        upIndex
        );
    
    
    
}


btConeShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

Float32
btConeShape.getHeight?(
    )
{   
    Float32 __res = 
    this.cxx_getHeight(
        );
    
    return __res;
}

btVector3
btConeShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShape] EDK[Fabric_EDK_KL_btConeShape] LIB[btConeShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConeShape.=(
    btConeShape that
    ) = "Bullet2__btConeShape__MU__simple_ass_op__7584682cb4de9fd87f4dd3be903eac85";


/// \dfgPresetOmit
/// \internal
btConeShape.appendDesc(io String string) {
  string += "btConeShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConeShapeX() = "Bullet2__btConeShapeX__MU__empty_ctor__6dbb62a1cacfeee6a561771c2f174691";

/// \dfgPresetOmit
btConeShapeX(
    btConeShapeX that
    ) = "Bullet2__btConeShapeX__MU__copy_ctor__3c613c5140aa8c5b886ebb3cee32a256";

/// \dfgPresetOmit
/// \internal
btConeShapeX.__ctor(
    Float32 radius,
    Float32 height
    ) = "Bullet2__btConeShapeX__MU__ctor__2169969d58506d8b98acd7b958d59e3a";

/// \dfgPresetOmit
btConeShapeX(
    Float32 radius,
    Float32 height
    ) {
    this.__ctor(
        radius,
        height
        );
}

btConeShapeX.cxx_delete() = "Bullet2__btConeShapeX__MU__delete__8f408eabadd6df96b1c02644a50a1092";

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btConeShapeX.cxx_getAnisotropicRollingFrictionDirection?(
    )
 = "Bullet2__btConeShapeX__CO__meth_getAnisotropicRollingFrictionDirection__6ed0f0aac360360634bf99133e466f27";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btConeShapeX.cxx_getName?(
    )
 = "Bullet2__btConeShapeX__CO__meth_getName__b7e95d35c88c21fabefef26a5382f17f";

btVector3
btConeShapeX.getAnisotropicRollingFrictionDirection?(
    )
{   
    btVector3 __res = 
    this.cxx_getAnisotropicRollingFrictionDirection(
        );
    
    return __res;
}

String
btConeShapeX.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeX] EDK[Fabric_EDK_KL_btConeShapeX] LIB[btConeShapeX *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConeShapeX.=(
    btConeShapeX that
    ) = "Bullet2__btConeShapeX__MU__simple_ass_op__54a7e1833c56b61f9d37e884c8f269a3";


/// \dfgPresetOmit
/// \internal
btConeShapeX.appendDesc(io String string) {
  string += "btConeShapeX:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConeShapeZ() = "Bullet2__btConeShapeZ__MU__empty_ctor__5372eb15c8cb186d5f9df4c448449ca9";

/// \dfgPresetOmit
btConeShapeZ(
    btConeShapeZ that
    ) = "Bullet2__btConeShapeZ__MU__copy_ctor__13e50063c67492b870c2b55c1f51ed83";

/// \dfgPresetOmit
/// \internal
btConeShapeZ.__ctor(
    Float32 radius,
    Float32 height
    ) = "Bullet2__btConeShapeZ__MU__ctor__f6ae80ec2fc7c1b988b35a48c64b4938";

/// \dfgPresetOmit
btConeShapeZ(
    Float32 radius,
    Float32 height
    ) {
    this.__ctor(
        radius,
        height
        );
}

btConeShapeZ.cxx_delete() = "Bullet2__btConeShapeZ__MU__delete__140d89218e2cdb0e6da49ecf46d243fe";

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btConeShapeZ.cxx_getAnisotropicRollingFrictionDirection?(
    )
 = "Bullet2__btConeShapeZ__CO__meth_getAnisotropicRollingFrictionDirection__7c68ab2e9fb5807061ad76389ab69c8c";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btConeShapeZ.cxx_getName?(
    )
 = "Bullet2__btConeShapeZ__CO__meth_getName__e8ad5bad469c519c1c3127d248a07652";

btVector3
btConeShapeZ.getAnisotropicRollingFrictionDirection?(
    )
{   
    btVector3 __res = 
    this.cxx_getAnisotropicRollingFrictionDirection(
        );
    
    return __res;
}

String
btConeShapeZ.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeZ] EDK[Fabric_EDK_KL_btConeShapeZ] LIB[btConeShapeZ *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConeShapeZ.=(
    btConeShapeZ that
    ) = "Bullet2__btConeShapeZ__MU__simple_ass_op__07b0717bbc57a990bc36a14bb919f053";


/// \dfgPresetOmit
/// \internal
btConeShapeZ.appendDesc(io String string) {
  string += "btConeShapeZ:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeShapeData] EDK[Fabric_EDK_KL_btConeShapeData] LIB[btConeShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeData] EDK[Fabric_EDK_KL_btConeShapeData] LIB[btConeShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeData] EDK[Fabric_EDK_KL_btConeShapeData] LIB[btConeShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConeShapeData() = "Bullet2__btConeShapeData__MU__empty_ctor__6ed2ab98bbc69d070ff5b75500af17dd";

/// \dfgPresetOmit
btConeShapeData(
    btConeShapeData that
    ) = "Bullet2__btConeShapeData__MU__copy_ctor__e98df62f616593d33b780620618f5c35";

btConeShapeData.cxx_delete() = "Bullet2__btConeShapeData__MU__delete__3dc5236e9767832656b78a2e116cb8da";

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeData] EDK[Fabric_EDK_KL_btConeShapeData] LIB[btConeShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeData] EDK[Fabric_EDK_KL_btConeShapeData] LIB[btConeShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeShapeData] EDK[Fabric_EDK_KL_btConeShapeData] LIB[btConeShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConeShapeData.=(
    btConeShapeData that
    ) = "Bullet2__btConeShapeData__MU__simple_ass_op__11327f6a86033a9b00a7df2d0e11badc";


/// \dfgPresetOmit
/// \internal
btConeShapeData.appendDesc(io String string) {
  string += "btConeShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btEmptyShape(
    btEmptyShape that
    ) = "Bullet2__btEmptyShape__MU__copy_ctor__83980389d8d31c043cffb1ce76f8e537";

/// \dfgPresetOmit
/// \internal
btEmptyShape.__ctor(
    ) = "Bullet2__btEmptyShape__MU__ctor__7ad077bdb2e980d9561f7154be9cd2b4";

/// \dfgPresetOmit
btEmptyShape(
    ) {
    this.__ctor(
        );
}

btEmptyShape.cxx_delete() = "Bullet2__btEmptyShape__MU__delete__f42e503494d834c9544c846067a786dd";

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
/// \dfgPresetOmit
/// \internal

btEmptyShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btEmptyShape__CO__meth_getAabb__8da1709e976a597dda34af8b0a085a2f";

/// \dfgPresetOmit
/// \internal

btEmptyShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btEmptyShape__MU__meth_setLocalScaling__2d53914686976f340bdedb09053f6b2d";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btEmptyShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btEmptyShape__CO__meth_getLocalScaling__5db5d8181f5cf0184ed2cf25ee661540";

/// \dfgPresetOmit
/// \internal

btEmptyShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btEmptyShape__CO__meth_calculateLocalInertia__dd5eb7dd93e9c5f0eed757b0894f337e";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btEmptyShape.cxx_getName?(
    )
 = "Bullet2__btEmptyShape__CO__meth_getName__4454ba4eb94fc3aa4ae3e52acd091b04";


btEmptyShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btEmptyShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

String
btEmptyShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

btVector3
btEmptyShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version

btEmptyShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyShape] EDK[Fabric_EDK_KL_btEmptyShape] LIB[btEmptyShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btEmptyShape.=(
    btEmptyShape that
    ) = "Bullet2__btEmptyShape__MU__simple_ass_op__5ce8da64f9fb5bc0cea086ffab405e34";


/// \dfgPresetOmit
/// \internal
btEmptyShape.appendDesc(io String string) {
  string += "btEmptyShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSphereShape() = "Bullet2__btSphereShape__MU__empty_ctor__3f0e144d1c73ed22e806420e2963bc24";

/// \dfgPresetOmit
btSphereShape(
    btSphereShape that
    ) = "Bullet2__btSphereShape__MU__copy_ctor__dc441ac209b72df65d96408ce13c45eb";

/// \dfgPresetOmit
/// \internal
btSphereShape.__ctor(
    Float32 radius
    ) = "Bullet2__btSphereShape__MU__ctor__411b1e63fd18214b40f972ef9342691c";

/// \dfgPresetOmit
btSphereShape(
    Float32 radius
    ) {
    this.__ctor(
        radius
        );
}

btSphereShape.cxx_delete() = "Bullet2__btSphereShape__MU__delete__79feab0353b2b50e32795d52c4370d6b";

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btSphereShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btSphereShape__CO__meth_localGetSupportingVertex__4f1d5b09da4d10e997359110f44cc749";

/// \dfgPresetOmit
/// \internal
btVector3
btSphereShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btSphereShape__CO__meth_localGetSupportingVertexWithoutMargin__2a4286ee1ce94cfacd05afdc4a07456c";

/// \dfgPresetOmit
/// \internal

btSphereShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btSphereShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__f7f02f5c5eb43e994afef98d60ccff51";

/// \dfgPresetOmit
/// \internal

btSphereShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btSphereShape__CO__meth_calculateLocalInertia__cfd0888d31cf0edf0f7b55ad84e6d1be";

/// \dfgPresetOmit
/// \internal

btSphereShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btSphereShape__CO__meth_getAabb__33328f71873cc7c094b287ead077586e";

/// \dfgPresetOmit
/// \internal
Float32
btSphereShape.cxx_getRadius?(
    )
 = "Bullet2__btSphereShape__CO__meth_getRadius__b2d1c86083276df5e5cc23d9a3380264";

/// \dfgPresetOmit
/// \internal

btSphereShape.cxx_setUnscaledRadius!(
    Float32 radius
    )
 = "Bullet2__btSphereShape__MU__meth_setUnscaledRadius__c4d2dd0407af3835e5f6d82372e551f6";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btSphereShape.cxx_getName?(
    )
 = "Bullet2__btSphereShape__CO__meth_getName__d7a98831485279b1b742977e69608c6f";

/// \dfgPresetOmit
/// \internal

btSphereShape.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btSphereShape__MU__meth_setMargin__14b3d59b7f8e5b24f8b8501405ab4753";

/// \dfgPresetOmit
/// \internal
Float32
btSphereShape.cxx_getMargin?(
    )
 = "Bullet2__btSphereShape__CO__meth_getMargin__c17ba761fe50c7baff41a74be6209f90";


btSphereShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

Float32
btSphereShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}

Float32
btSphereShape.getRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getRadius(
        );
    
    return __res;
}


btSphereShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}


btSphereShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btSphereShape.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}


btSphereShape.setUnscaledRadius!(
    in
    Float32
    radius
    
    
    )
{   
    
    
    this.cxx_setUnscaledRadius(
        radius
        );
    
    
    
}

btVector3
btSphereShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

String
btSphereShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

btVector3
btSphereShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereShape] EDK[Fabric_EDK_KL_btSphereShape] LIB[btSphereShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSphereShape.=(
    btSphereShape that
    ) = "Bullet2__btSphereShape__MU__simple_ass_op__c0376673a000030fee182208c3fca0c0";


/// \dfgPresetOmit
/// \internal
btSphereShape.appendDesc(io String string) {
  string += "btSphereShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCylinderShape() = "Bullet2__btCylinderShape__MU__empty_ctor__9c8652701c85b4d370a42a30cb426985";

/// \dfgPresetOmit
btCylinderShape(
    btCylinderShape that
    ) = "Bullet2__btCylinderShape__MU__copy_ctor__09aa44a03ffc48b0eca526fc8e64fe95";

/// \dfgPresetOmit
/// \internal
btCylinderShape.__ctor(
    CxxbtVector3ConstRef halfExtents
    ) = "Bullet2__btCylinderShape__MU__ctor__4d087eb42aa661ec28f88d46c42dc028";

/// \dfgPresetOmit
btCylinderShape(
    CxxbtVector3ConstRef halfExtents
    ) {
    this.__ctor(
        halfExtents
        );
}

btCylinderShape(
    in
    btVector3
    halfExtents
    
    
    ) {
    
    CxxbtVector3ConstRef halfExtents__cxx = Make_CxxbtVector3ConstRef(halfExtents);
    this.__ctor(
        halfExtents__cxx
        );
    
}

btCylinderShape.cxx_delete() = "Bullet2__btCylinderShape__MU__delete__e57428e0f03e807db4c925ecae325f17";

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btCylinderShape.cxx_getHalfExtentsWithMargin?(
    )
 = "Bullet2__btCylinderShape__CO__meth_getHalfExtentsWithMargin__20f1b37e612495fe78077093d3da91e0";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btCylinderShape.cxx_getHalfExtentsWithoutMargin?(
    )
 = "Bullet2__btCylinderShape__CO__meth_getHalfExtentsWithoutMargin__b579e253a189de3083bc5a974f6fe07b";

/// \dfgPresetOmit
/// \internal

btCylinderShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btCylinderShape__CO__meth_getAabb__74891de51362265e7df794e20fdc910d";

/// \dfgPresetOmit
/// \internal

btCylinderShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btCylinderShape__CO__meth_calculateLocalInertia__c44f193a8c6ea0ce0a3c5df3e9485c07";

/// \dfgPresetOmit
/// \internal
btVector3
btCylinderShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btCylinderShape__CO__meth_localGetSupportingVertexWithoutMargin__7f12a9044874585ef48d97ca3dbb1d11";

/// \dfgPresetOmit
/// \internal

btCylinderShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btCylinderShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__870ac1f35ffefea7eae8ac1df7fdc737";

/// \dfgPresetOmit
/// \internal

btCylinderShape.cxx_setMargin!(
    Float32 collisionMargin
    )
 = "Bullet2__btCylinderShape__MU__meth_setMargin__e4637a794bc27ea4a68176f1932615c6";

/// \dfgPresetOmit
/// \internal
btVector3
btCylinderShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btCylinderShape__CO__meth_localGetSupportingVertex__328014d09bf0fa1c69648e11d4b0da4d";

/// \dfgPresetOmit
/// \internal
SInt32
btCylinderShape.cxx_getUpAxis?(
    )
 = "Bullet2__btCylinderShape__CO__meth_getUpAxis__ae3cd8c4fa2e8969a8d30f1ab53683bd";

/// \dfgPresetOmit
/// \internal
btVector3
btCylinderShape.cxx_getAnisotropicRollingFrictionDirection?(
    )
 = "Bullet2__btCylinderShape__CO__meth_getAnisotropicRollingFrictionDirection__d36d078836f711235e249cd85bd9a8db";

/// \dfgPresetOmit
/// \internal
Float32
btCylinderShape.cxx_getRadius?(
    )
 = "Bullet2__btCylinderShape__CO__meth_getRadius__8d7fdc94d7af4a81c8b0e5330041b2da";

/// \dfgPresetOmit
/// \internal

btCylinderShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btCylinderShape__MU__meth_setLocalScaling__117eed2067f44e9874f59f9ce9313c16";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCylinderShape.cxx_getName?(
    )
 = "Bullet2__btCylinderShape__CO__meth_getName__29730bf6e651088e4d5fcbd0d30af5ea";

/// \dfgPresetOmit
/// \internal
SInt32
btCylinderShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btCylinderShape__CO__meth_calculateSerializeBufferSize__10788c1adc547d3a2fed59fddc94b274";

String
btCylinderShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btCylinderShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

btVector3
btCylinderShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

btVector3
btCylinderShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

btVector3
btCylinderShape.getAnisotropicRollingFrictionDirection?(
    )
{   
    btVector3 __res = 
    this.cxx_getAnisotropicRollingFrictionDirection(
        );
    
    return __res;
}


btCylinderShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

SInt32
btCylinderShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btCylinderShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

Float32
btCylinderShape.getRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getRadius(
        );
    
    return __res;
}

btVector3
btCylinderShape.getHalfExtentsWithMargin?(
    )
{   
    btVector3 __res = 
    this.cxx_getHalfExtentsWithMargin(
        );
    
    return __res;
}

SInt32
btCylinderShape.getUpAxis?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpAxis(
        );
    
    return __res;
}


btCylinderShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

btVector3
btCylinderShape.getHalfExtentsWithoutMargin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getHalfExtentsWithoutMargin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btCylinderShape.setMargin!(
    in
    Float32
    collisionMargin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        collisionMargin
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShape] EDK[Fabric_EDK_KL_btCylinderShape] LIB[btCylinderShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCylinderShape.=(
    btCylinderShape that
    ) = "Bullet2__btCylinderShape__MU__simple_ass_op__264089591adadaa057935d5e898da50e";


/// \dfgPresetOmit
/// \internal
btCylinderShape.appendDesc(io String string) {
  string += "btCylinderShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCylinderShapeX() = "Bullet2__btCylinderShapeX__MU__empty_ctor__e45e4819c62c0e00c9d22d5c9095396e";

/// \dfgPresetOmit
btCylinderShapeX(
    btCylinderShapeX that
    ) = "Bullet2__btCylinderShapeX__MU__copy_ctor__d20f1626b1ec7b79728095452cc1152a";

/// \dfgPresetOmit
/// \internal
btCylinderShapeX.__ctor(
    CxxbtVector3ConstRef halfExtents
    ) = "Bullet2__btCylinderShapeX__MU__ctor__0ae1ae88753e709b9ca7fd02c0217c12";

/// \dfgPresetOmit
btCylinderShapeX(
    CxxbtVector3ConstRef halfExtents
    ) {
    this.__ctor(
        halfExtents
        );
}

btCylinderShapeX(
    in
    btVector3
    halfExtents
    
    
    ) {
    
    CxxbtVector3ConstRef halfExtents__cxx = Make_CxxbtVector3ConstRef(halfExtents);
    this.__ctor(
        halfExtents__cxx
        );
    
}

btCylinderShapeX.cxx_delete() = "Bullet2__btCylinderShapeX__MU__delete__d2f3423347346526d2262421b798bd2d";

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btCylinderShapeX.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btCylinderShapeX__CO__meth_localGetSupportingVertexWithoutMargin__efaf5043255f7175b9068d80bf04d7cf";

/// \dfgPresetOmit
/// \internal

btCylinderShapeX.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btCylinderShapeX__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__c202312383fb0d65e410e9ad6c7f3f41";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCylinderShapeX.cxx_getName?(
    )
 = "Bullet2__btCylinderShapeX__CO__meth_getName__80c8a2b3af066644b36ba9920e912450";

/// \dfgPresetOmit
/// \internal
Float32
btCylinderShapeX.cxx_getRadius?(
    )
 = "Bullet2__btCylinderShapeX__CO__meth_getRadius__674d6203b8f1f80158ec4bc8b1f9f16c";

String
btCylinderShapeX.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btCylinderShapeX.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

btVector3
btCylinderShapeX.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

Float32
btCylinderShapeX.getRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getRadius(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeX] EDK[Fabric_EDK_KL_btCylinderShapeX] LIB[btCylinderShapeX *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCylinderShapeX.=(
    btCylinderShapeX that
    ) = "Bullet2__btCylinderShapeX__MU__simple_ass_op__663a178ec924caed1ac23f39e3a41043";


/// \dfgPresetOmit
/// \internal
btCylinderShapeX.appendDesc(io String string) {
  string += "btCylinderShapeX:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCylinderShapeZ() = "Bullet2__btCylinderShapeZ__MU__empty_ctor__97ae9312e6e3c901fddaa5843cdd0ef8";

/// \dfgPresetOmit
btCylinderShapeZ(
    btCylinderShapeZ that
    ) = "Bullet2__btCylinderShapeZ__MU__copy_ctor__11c6a9e35bb71d418442ea9dd1ab5c1c";

/// \dfgPresetOmit
/// \internal
btCylinderShapeZ.__ctor(
    CxxbtVector3ConstRef halfExtents
    ) = "Bullet2__btCylinderShapeZ__MU__ctor__6ee99a0071264a1bbf608ccc4cf45352";

/// \dfgPresetOmit
btCylinderShapeZ(
    CxxbtVector3ConstRef halfExtents
    ) {
    this.__ctor(
        halfExtents
        );
}

btCylinderShapeZ(
    in
    btVector3
    halfExtents
    
    
    ) {
    
    CxxbtVector3ConstRef halfExtents__cxx = Make_CxxbtVector3ConstRef(halfExtents);
    this.__ctor(
        halfExtents__cxx
        );
    
}

btCylinderShapeZ.cxx_delete() = "Bullet2__btCylinderShapeZ__MU__delete__d553e2f70b701db666d3b7e798921226";

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btCylinderShapeZ.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btCylinderShapeZ__CO__meth_localGetSupportingVertexWithoutMargin__bd9cd36dcb1b6985f5f005868333c01b";

/// \dfgPresetOmit
/// \internal

btCylinderShapeZ.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btCylinderShapeZ__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__23a48be05ac96355a7018afbf4c3d7a6";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCylinderShapeZ.cxx_getName?(
    )
 = "Bullet2__btCylinderShapeZ__CO__meth_getName__c713136403267417e94c62b578f129af";

/// \dfgPresetOmit
/// \internal
Float32
btCylinderShapeZ.cxx_getRadius?(
    )
 = "Bullet2__btCylinderShapeZ__CO__meth_getRadius__7ec777e6ea641c5264df1a32beb52b77";

btVector3
btCylinderShapeZ.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

String
btCylinderShapeZ.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btCylinderShapeZ.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

Float32
btCylinderShapeZ.getRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getRadius(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeZ] EDK[Fabric_EDK_KL_btCylinderShapeZ] LIB[btCylinderShapeZ *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCylinderShapeZ.=(
    btCylinderShapeZ that
    ) = "Bullet2__btCylinderShapeZ__MU__simple_ass_op__5a075acb62a5ad229cb67ecb6d8218cb";


/// \dfgPresetOmit
/// \internal
btCylinderShapeZ.appendDesc(io String string) {
  string += "btCylinderShapeZ:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCylinderShapeData] EDK[Fabric_EDK_KL_btCylinderShapeData] LIB[btCylinderShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeData] EDK[Fabric_EDK_KL_btCylinderShapeData] LIB[btCylinderShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeData] EDK[Fabric_EDK_KL_btCylinderShapeData] LIB[btCylinderShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCylinderShapeData() = "Bullet2__btCylinderShapeData__MU__empty_ctor__0eb34ef035daccab55d1522446b03dcc";

/// \dfgPresetOmit
btCylinderShapeData(
    btCylinderShapeData that
    ) = "Bullet2__btCylinderShapeData__MU__copy_ctor__33fe63f84a643227ef98c75e42150d18";

btCylinderShapeData.cxx_delete() = "Bullet2__btCylinderShapeData__MU__delete__c09ac7f50043d7826974275fefd01b00";

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeData] EDK[Fabric_EDK_KL_btCylinderShapeData] LIB[btCylinderShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeData] EDK[Fabric_EDK_KL_btCylinderShapeData] LIB[btCylinderShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCylinderShapeData] EDK[Fabric_EDK_KL_btCylinderShapeData] LIB[btCylinderShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCylinderShapeData.=(
    btCylinderShapeData that
    ) = "Bullet2__btCylinderShapeData__MU__simple_ass_op__4e9973811de5d61c785ecabb1d1aa36c";


/// \dfgPresetOmit
/// \internal
btCylinderShapeData.appendDesc(io String string) {
  string += "btCylinderShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btStaticPlaneShape() = "Bullet2__btStaticPlaneShape__MU__empty_ctor__5bcf3e596bb1f7b93cc3214d7b23aa87";

/// \dfgPresetOmit
btStaticPlaneShape(
    btStaticPlaneShape that
    ) = "Bullet2__btStaticPlaneShape__MU__copy_ctor__f8d96a881934cc93fac5ca488f94bbd7";

/// \dfgPresetOmit
/// \internal
btStaticPlaneShape.__ctor(
    CxxbtVector3ConstRef planeNormal,
    Float32 planeConstant
    ) = "Bullet2__btStaticPlaneShape__MU__ctor__8050805bbdadb3bda6086d1454b3b8f6";

/// \dfgPresetOmit
btStaticPlaneShape(
    CxxbtVector3ConstRef planeNormal,
    Float32 planeConstant
    ) {
    this.__ctor(
        planeNormal,
        planeConstant
        );
}

btStaticPlaneShape(
    in
    btVector3
    planeNormal
    
    ,
    in
    Float32
    planeConstant
    
    
    ) {
    
    CxxbtVector3ConstRef planeNormal__cxx = Make_CxxbtVector3ConstRef(planeNormal);
    
    this.__ctor(
        planeNormal__cxx,
        planeConstant
        );
    
    
}

btStaticPlaneShape.cxx_delete() = "Bullet2__btStaticPlaneShape__MU__delete__e67841c1bafe0038907eb6b226af92bf";

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btStaticPlaneShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btStaticPlaneShape__CO__meth_getAabb__32e774fd9c7f7c65c3c777d38d5492d8";

/// \dfgPresetOmit
/// \internal

btStaticPlaneShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btStaticPlaneShape__CO__meth_calculateLocalInertia__b4fabd9e07c7a0e34eb2de0b2685bba8";

/// \dfgPresetOmit
/// \internal

btStaticPlaneShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btStaticPlaneShape__MU__meth_setLocalScaling__e9c3796e112f9f2b4950792d442468c6";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btStaticPlaneShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btStaticPlaneShape__CO__meth_getLocalScaling__fa2d86e341b78b1c65d7510d1dec7139";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btStaticPlaneShape.cxx_getPlaneNormal?(
    )
 = "Bullet2__btStaticPlaneShape__CO__meth_getPlaneNormal__57483866e8d4021a55dac1066e2c56dc";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
btStaticPlaneShape.cxx_getPlaneConstant?(
    )
 = "Bullet2__btStaticPlaneShape__CO__meth_getPlaneConstant__9956093c4726d44b406a5855019ca7fe";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btStaticPlaneShape.cxx_getName?(
    )
 = "Bullet2__btStaticPlaneShape__CO__meth_getName__b1cdaafa324b091a2b4a79459a737905";

/// \dfgPresetOmit
/// \internal
SInt32
btStaticPlaneShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btStaticPlaneShape__CO__meth_calculateSerializeBufferSize__4428a01fe932b26a73c50a9d34632fea";

btVector3
btStaticPlaneShape.getPlaneNormal?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPlaneNormal(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btStaticPlaneShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btStaticPlaneShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

String
btStaticPlaneShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btStaticPlaneShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btStaticPlaneShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}


btStaticPlaneShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

Float32
btStaticPlaneShape.getPlaneConstant?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getPlaneConstant(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShape] EDK[Fabric_EDK_KL_btStaticPlaneShape] LIB[btStaticPlaneShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btStaticPlaneShape.=(
    btStaticPlaneShape that
    ) = "Bullet2__btStaticPlaneShape__MU__simple_ass_op__2f93397d28d1c2bbbb7863eb1adbe664";


/// \dfgPresetOmit
/// \internal
btStaticPlaneShape.appendDesc(io String string) {
  string += "btStaticPlaneShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStaticPlaneShapeData] EDK[Fabric_EDK_KL_btStaticPlaneShapeData] LIB[btStaticPlaneShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShapeData] EDK[Fabric_EDK_KL_btStaticPlaneShapeData] LIB[btStaticPlaneShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShapeData] EDK[Fabric_EDK_KL_btStaticPlaneShapeData] LIB[btStaticPlaneShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btStaticPlaneShapeData() = "Bullet2__btStaticPlaneShapeData__MU__empty_ctor__b6125a0b3a8031bcf701ba65e6ccae8c";

/// \dfgPresetOmit
btStaticPlaneShapeData(
    btStaticPlaneShapeData that
    ) = "Bullet2__btStaticPlaneShapeData__MU__copy_ctor__edf26074400c809350422daed50fe925";

btStaticPlaneShapeData.cxx_delete() = "Bullet2__btStaticPlaneShapeData__MU__delete__77a0a599d547652909a984f713df1f9e";

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShapeData] EDK[Fabric_EDK_KL_btStaticPlaneShapeData] LIB[btStaticPlaneShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShapeData] EDK[Fabric_EDK_KL_btStaticPlaneShapeData] LIB[btStaticPlaneShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStaticPlaneShapeData] EDK[Fabric_EDK_KL_btStaticPlaneShapeData] LIB[btStaticPlaneShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btStaticPlaneShapeData.=(
    btStaticPlaneShapeData that
    ) = "Bullet2__btStaticPlaneShapeData__MU__simple_ass_op__df24b6ea7f69dde303a2daedf7a05f0b";


/// \dfgPresetOmit
/// \internal
btStaticPlaneShapeData.appendDesc(io String string) {
  string += "btStaticPlaneShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btBU_Simplex1to4(
    btBU_Simplex1to4 that
    ) = "Bullet2__btBU_Simplex1to4__MU__copy_ctor__3eaa02e6cf00cd25ffbed532b04966e1";

/// \dfgPresetOmit
/// \internal
btBU_Simplex1to4.__ctor(
    ) = "Bullet2__btBU_Simplex1to4__MU__ctor__7bb1aa22c8e6cf23f3a2c7410510088e";

/// \dfgPresetOmit
btBU_Simplex1to4(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btBU_Simplex1to4.__ctor(
    CxxbtVector3ConstRef pt0
    ) = "Bullet2__btBU_Simplex1to4__MU__ctor__cd6583d3a245c23bab06e69182688a66";

/// \dfgPresetOmit
btBU_Simplex1to4(
    CxxbtVector3ConstRef pt0
    ) {
    this.__ctor(
        pt0
        );
}

/// \dfgPresetOmit
/// \internal
btBU_Simplex1to4.__ctor(
    CxxbtVector3ConstRef pt0,
    CxxbtVector3ConstRef pt1
    ) = "Bullet2__btBU_Simplex1to4__MU__ctor__9021152701632b9ce357972f4f82d8be";

/// \dfgPresetOmit
btBU_Simplex1to4(
    CxxbtVector3ConstRef pt0,
    CxxbtVector3ConstRef pt1
    ) {
    this.__ctor(
        pt0,
        pt1
        );
}

/// \dfgPresetOmit
/// \internal
btBU_Simplex1to4.__ctor(
    CxxbtVector3ConstRef pt0,
    CxxbtVector3ConstRef pt1,
    CxxbtVector3ConstRef pt2
    ) = "Bullet2__btBU_Simplex1to4__MU__ctor__abaaa802f9f78cde1e615a19fcaa4aab";

/// \dfgPresetOmit
btBU_Simplex1to4(
    CxxbtVector3ConstRef pt0,
    CxxbtVector3ConstRef pt1,
    CxxbtVector3ConstRef pt2
    ) {
    this.__ctor(
        pt0,
        pt1,
        pt2
        );
}

/// \dfgPresetOmit
/// \internal
btBU_Simplex1to4.__ctor(
    CxxbtVector3ConstRef pt0,
    CxxbtVector3ConstRef pt1,
    CxxbtVector3ConstRef pt2,
    CxxbtVector3ConstRef pt3
    ) = "Bullet2__btBU_Simplex1to4__MU__ctor__12d3e76b52b913799ebd7adf1886788f";

/// \dfgPresetOmit
btBU_Simplex1to4(
    CxxbtVector3ConstRef pt0,
    CxxbtVector3ConstRef pt1,
    CxxbtVector3ConstRef pt2,
    CxxbtVector3ConstRef pt3
    ) {
    this.__ctor(
        pt0,
        pt1,
        pt2,
        pt3
        );
}

btBU_Simplex1to4(
    in
    btVector3
    pt0
    
    ,
    in
    btVector3
    pt1
    
    
    ) {
    
    CxxbtVector3ConstRef pt0__cxx = Make_CxxbtVector3ConstRef(pt0);
    
    CxxbtVector3ConstRef pt1__cxx = Make_CxxbtVector3ConstRef(pt1);
    this.__ctor(
        pt0__cxx,
        pt1__cxx
        );
    
    
}

btBU_Simplex1to4(
    in
    btVector3
    pt0
    
    ,
    in
    btVector3
    pt1
    
    ,
    in
    btVector3
    pt2
    
    ,
    in
    btVector3
    pt3
    
    
    ) {
    
    CxxbtVector3ConstRef pt0__cxx = Make_CxxbtVector3ConstRef(pt0);
    
    CxxbtVector3ConstRef pt1__cxx = Make_CxxbtVector3ConstRef(pt1);
    
    CxxbtVector3ConstRef pt2__cxx = Make_CxxbtVector3ConstRef(pt2);
    
    CxxbtVector3ConstRef pt3__cxx = Make_CxxbtVector3ConstRef(pt3);
    this.__ctor(
        pt0__cxx,
        pt1__cxx,
        pt2__cxx,
        pt3__cxx
        );
    
    
    
    
}

btBU_Simplex1to4(
    in
    btVector3
    pt0
    
    
    ) {
    
    CxxbtVector3ConstRef pt0__cxx = Make_CxxbtVector3ConstRef(pt0);
    this.__ctor(
        pt0__cxx
        );
    
}

btBU_Simplex1to4(
    in
    btVector3
    pt0
    
    ,
    in
    btVector3
    pt1
    
    ,
    in
    btVector3
    pt2
    
    
    ) {
    
    CxxbtVector3ConstRef pt0__cxx = Make_CxxbtVector3ConstRef(pt0);
    
    CxxbtVector3ConstRef pt1__cxx = Make_CxxbtVector3ConstRef(pt1);
    
    CxxbtVector3ConstRef pt2__cxx = Make_CxxbtVector3ConstRef(pt2);
    this.__ctor(
        pt0__cxx,
        pt1__cxx,
        pt2__cxx
        );
    
    
    
}

btBU_Simplex1to4.cxx_delete() = "Bullet2__btBU_Simplex1to4__MU__delete__2cf2ddad7a6d959b22e7b52ca8ab2f00";

//////////////////////////////////////////////////////////////////////////////
// KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btBU_Simplex1to4.cxx_reset!(
    )
 = "Bullet2__btBU_Simplex1to4__MU__meth_reset__5b5d7f67d0ebad97b9094b74afc5eee2";

/// \dfgPresetOmit
/// \internal

btBU_Simplex1to4.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getAabb__29eb3043d3b881fb869c364822061a43";

/// \dfgPresetOmit
/// \internal

btBU_Simplex1to4.cxx_addVertex!(
    CxxbtVector3ConstRef pt
    )
 = "Bullet2__btBU_Simplex1to4__MU__meth_addVertex__690e246dad48f44f540690fb785a6789";

/// \dfgPresetOmit
/// \internal
SInt32
btBU_Simplex1to4.cxx_getNumVertices?(
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getNumVertices__5b2f6f824331fcf021a8a80856d0c5cf";

/// \dfgPresetOmit
/// \internal
SInt32
btBU_Simplex1to4.cxx_getNumEdges?(
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getNumEdges__a5cbef904ba36b4b4528ca6d097e1988";

/// \dfgPresetOmit
/// \internal

btBU_Simplex1to4.cxx_getEdge?(
    SInt32 i,
    CxxbtVector3Ref pa,
    CxxbtVector3Ref pb
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getEdge__0ab741c51609eaa2adf17100ba415829";

/// \dfgPresetOmit
/// \internal

btBU_Simplex1to4.cxx_getVertex?(
    SInt32 i,
    CxxbtVector3Ref vtx
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getVertex__ee366e653bf2f962f73b9742bfc28281";

/// \dfgPresetOmit
/// \internal
SInt32
btBU_Simplex1to4.cxx_getNumPlanes?(
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getNumPlanes__3b8833e0036c193238910f393f0e5e78";

/// \dfgPresetOmit
/// \internal

btBU_Simplex1to4.cxx_getPlane?(
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport,
    SInt32 i
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getPlane__5a9c44b760b32573751591b7446f5ffb";

/// \dfgPresetOmit
/// \internal
SInt32
btBU_Simplex1to4.cxx_getIndex?(
    SInt32 i
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getIndex__121e2acc69a24b0d360bb246c29cf4e9";

/// \dfgPresetOmit
/// \internal
Boolean
btBU_Simplex1to4.cxx_isInside?(
    CxxbtVector3ConstRef pt,
    Float32 tolerance
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_isInside__b7726e39a80d75c68d13967f7f44b5ec";

///getName is for debugging
/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btBU_Simplex1to4.cxx_getName?(
    )
 = "Bullet2__btBU_Simplex1to4__CO__meth_getName__0854c5793054f00cf916fadfe0b7a886";

SInt32
btBU_Simplex1to4.getNumPlanes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPlanes(
        );
    
    return __res;
}

SInt32
btBU_Simplex1to4.getNumEdges?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumEdges(
        );
    
    return __res;
}


btBU_Simplex1to4.getPlane?(
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    
    this.cxx_getPlane(
        planeNormal__cxx,
        planeSupport__cxx,
        i
        );
    
    
    
    
    
}


btBU_Simplex1to4.getVertex?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    vtx
    
    
    )
{   
    
    
    CxxbtVector3Ref vtx__cxx = Make_CxxbtVector3Ref(vtx);
    
    this.cxx_getVertex(
        i,
        vtx__cxx
        );
    
    
    
    
}

Boolean
btBU_Simplex1to4.isInside?(
    in
    btVector3
    pt
    
    ,
    in
    Float32
    tolerance
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    Boolean __res = 
    this.cxx_isInside(
        pt__cxx,
        tolerance
        );
    
    
    
    return __res;
}

SInt32
btBU_Simplex1to4.getIndex?(
    in
    SInt32
    i
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getIndex(
        i
        );
    
    
    return __res;
}


btBU_Simplex1to4.addVertex!(
    in
    btVector3
    pt
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    this.cxx_addVertex(
        pt__cxx
        );
    
    
    
}

SInt32
btBU_Simplex1to4.getNumVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumVertices(
        );
    
    return __res;
}


btBU_Simplex1to4.getEdge?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    pa
    
    ,
    io
    btVector3
    pb
    
    
    )
{   
    
    
    CxxbtVector3Ref pa__cxx = Make_CxxbtVector3Ref(pa);
    
    CxxbtVector3Ref pb__cxx = Make_CxxbtVector3Ref(pb);
    
    this.cxx_getEdge(
        i,
        pa__cxx,
        pb__cxx
        );
    
    
    
    
    
}

///getName is for debugging
String
btBU_Simplex1to4.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btBU_Simplex1to4.reset!(
    )
{   
    
    this.cxx_reset(
        );
    
    
}


btBU_Simplex1to4.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBU_Simplex1to4] EDK[Fabric_EDK_KL_btBU_Simplex1to4] LIB[btBU_Simplex1to4 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBU_Simplex1to4.=(
    btBU_Simplex1to4 that
    ) = "Bullet2__btBU_Simplex1to4__MU__simple_ass_op__fd19db93291d9332d2af59cc6c5a688c";


/// \dfgPresetOmit
/// \internal
btBU_Simplex1to4.appendDesc(io String string) {
  string += "btBU_Simplex1to4:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexHullShape() = "Bullet2__btConvexHullShape__MU__empty_ctor__84b639e63b30d8f3156fad42af4e3280";

/// \dfgPresetOmit
btConvexHullShape(
    btConvexHullShape that
    ) = "Bullet2__btConvexHullShape__MU__copy_ctor__845807697462e2d5125a8b46d169d9cf";

/// \dfgPresetOmit
/// \internal
btConvexHullShape.__ctor(
    ) = "Bullet2__btConvexHullShape__MU__ctor__f339085178e7c35d0cf6ea753f7cf423";

///this constructor optionally takes in a pointer to points. Each point is assumed to be 3 consecutive btScalar (x,y,z), the striding defines the number of bytes between each point, in memory.
///It is easier to not pass any points in the constructor, and just add one point at a time, using addPoint.
///btConvexHullShape make an internal copy of the points.
/// \dfgPresetOmit
btConvexHullShape(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btConvexHullShape.__ctor(
    CxxFloat32ConstPtr points
    ) = "Bullet2__btConvexHullShape__MU__ctor__f0852eff91c6c272a6f3cf96da5d040b";

/// \dfgPresetOmit
btConvexHullShape(
    CxxFloat32ConstPtr points
    ) {
    this.__ctor(
        points
        );
}

/// \dfgPresetOmit
/// \internal
btConvexHullShape.__ctor(
    CxxFloat32ConstPtr points,
    SInt32 numPoints
    ) = "Bullet2__btConvexHullShape__MU__ctor__898c006ca8214c780bf63a57a5523ae9";

/// \dfgPresetOmit
btConvexHullShape(
    CxxFloat32ConstPtr points,
    SInt32 numPoints
    ) {
    this.__ctor(
        points,
        numPoints
        );
}

/// \dfgPresetOmit
/// \internal
btConvexHullShape.__ctor(
    CxxFloat32ConstPtr points,
    SInt32 numPoints,
    SInt32 stride
    ) = "Bullet2__btConvexHullShape__MU__ctor__38b97d66358923a871895a7d0b1f3afb";

/// \dfgPresetOmit
btConvexHullShape(
    CxxFloat32ConstPtr points,
    SInt32 numPoints,
    SInt32 stride
    ) {
    this.__ctor(
        points,
        numPoints,
        stride
        );
}

btConvexHullShape(
    in
    Float32
    points
    
    ,
    in
    SInt32
    numPoints
    
    
    ) {
    
    CxxFloat32ConstPtr points__cxx = Make_CxxFloat32ConstPtr(points);
    
    this.__ctor(
        points__cxx,
        numPoints
        );
    
    
}

btConvexHullShape(
    in
    Float32
    points
    
    
    ) {
    
    CxxFloat32ConstPtr points__cxx = Make_CxxFloat32ConstPtr(points);
    this.__ctor(
        points__cxx
        );
    
}

btConvexHullShape(
    in
    Float32
    points
    
    ,
    in
    SInt32
    numPoints
    
    ,
    in
    SInt32
    stride
    
    
    ) {
    
    CxxFloat32ConstPtr points__cxx = Make_CxxFloat32ConstPtr(points);
    
    
    this.__ctor(
        points__cxx,
        numPoints,
        stride
        );
    
    
    
}

btConvexHullShape.cxx_delete() = "Bullet2__btConvexHullShape__MU__delete__5fb87fe70a21ed2a18766fc44537ca2e";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_addPoint!(
    CxxbtVector3ConstRef point
    )
 = "Bullet2__btConvexHullShape__MU__meth_addPoint__f476dcd08fd8c7399da3a9450ed6a84e";

/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_addPoint!(
    CxxbtVector3ConstRef point,
    Boolean recalculateLocalAabb
    )
 = "Bullet2__btConvexHullShape__MU__meth_addPoint__d4a59f77237089cc20ce55e4ba28eb73";

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr
btConvexHullShape.cxx_getUnscaledPoints!(
    )
 = "Bullet2__btConvexHullShape__MU__meth_getUnscaledPoints__0787c0b3d56a9681c753dc47da52427c";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr
btConvexHullShape.cxx_getUnscaledPoints?(
    )
 = "Bullet2__btConvexHullShape__CO__meth_getUnscaledPoints__67b7980c740a9e30cd60ec8c4606a551";

///getPoints is obsolete, please use getUnscaledPoints
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr
btConvexHullShape.cxx_getPoints?(
    )
 = "Bullet2__btConvexHullShape__CO__meth_getPoints__cd0f002446ec76e9dda87c18c792cdc8";

/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_optimizeConvexHull!(
    )
 = "Bullet2__btConvexHullShape__MU__meth_optimizeConvexHull__3056ffee400c5859c065c038d50887ba";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexHullShape.cxx_getScaledPoint?(
    SInt32 i
    )
 = "Bullet2__btConvexHullShape__CO__meth_getScaledPoint__933fef7f77fc8c7ba9a4580f69680fd5";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexHullShape.cxx_getNumPoints?(
    )
 = "Bullet2__btConvexHullShape__CO__meth_getNumPoints__3491444beb70711d36a82ad1c285eb10";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexHullShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexHullShape__CO__meth_localGetSupportingVertex__84bfee700ae81f9f675e5b9eee2f53ba";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexHullShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexHullShape__CO__meth_localGetSupportingVertexWithoutMargin__c9e7b0619ecd7380df970fb119fa4bcd";

/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btConvexHullShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__fe95823184673c1ea6477987639a426e";

/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_project?(
    CxxbtTransformConstRef trans,
    CxxbtVector3ConstRef dir,
    CxxFloat32Ref minProj,
    CxxFloat32Ref maxProj,
    CxxbtVector3Ref witnesPtMin,
    CxxbtVector3Ref witnesPtMax
    )
 = "Bullet2__btConvexHullShape__CO__meth_project__b43dd27efa585a222434ed0020b90e29";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btConvexHullShape.cxx_getName?(
    )
 = "Bullet2__btConvexHullShape__CO__meth_getName__6c6ee7cedc9dfd4d5aa6f2fceeed22b3";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexHullShape.cxx_getNumVertices?(
    )
 = "Bullet2__btConvexHullShape__CO__meth_getNumVertices__ad0b9666b4bf55a2aa99b6f27632228d";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexHullShape.cxx_getNumEdges?(
    )
 = "Bullet2__btConvexHullShape__CO__meth_getNumEdges__117433d4f72ce709026645cbf676b949";

/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_getEdge?(
    SInt32 i,
    CxxbtVector3Ref pa,
    CxxbtVector3Ref pb
    )
 = "Bullet2__btConvexHullShape__CO__meth_getEdge__654e4f5fa0879a88027c68072c1d880b";

/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_getVertex?(
    SInt32 i,
    CxxbtVector3Ref vtx
    )
 = "Bullet2__btConvexHullShape__CO__meth_getVertex__0f530dd5b519c6e89259fee0ab49df1f";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexHullShape.cxx_getNumPlanes?(
    )
 = "Bullet2__btConvexHullShape__CO__meth_getNumPlanes__9c8fba6cb3840d5acd6c90324be4c2c2";

/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_getPlane?(
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport,
    SInt32 i
    )
 = "Bullet2__btConvexHullShape__CO__meth_getPlane__e9c9d33e8a766fcbb5be2e1dd655b910";

/// \dfgPresetOmit
/// \internal
Boolean
btConvexHullShape.cxx_isInside?(
    CxxbtVector3ConstRef pt,
    Float32 tolerance
    )
 = "Bullet2__btConvexHullShape__CO__meth_isInside__21608cf7179fe7df29753d691f704bfb";

///in case we receive negative scaling
/// \dfgPresetOmit
/// \internal

btConvexHullShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btConvexHullShape__MU__meth_setLocalScaling__6e6005bed236708f2e610dc1bfbc3db2";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexHullShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btConvexHullShape__CO__meth_calculateSerializeBufferSize__6311c33eb893b2fb402234f2417858df";


btConvexHullShape.getEdge?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    pa
    
    ,
    io
    btVector3
    pb
    
    
    )
{   
    
    
    CxxbtVector3Ref pa__cxx = Make_CxxbtVector3Ref(pa);
    
    CxxbtVector3Ref pb__cxx = Make_CxxbtVector3Ref(pb);
    
    this.cxx_getEdge(
        i,
        pa__cxx,
        pb__cxx
        );
    
    
    
    
    
}

SInt32
btConvexHullShape.getNumPlanes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPlanes(
        );
    
    return __res;
}


btConvexHullShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}


btConvexHullShape.getVertex?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    vtx
    
    
    )
{   
    
    
    CxxbtVector3Ref vtx__cxx = Make_CxxbtVector3Ref(vtx);
    
    this.cxx_getVertex(
        i,
        vtx__cxx
        );
    
    
    
    
}

SInt32
btConvexHullShape.getNumVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumVertices(
        );
    
    return __res;
}


btConvexHullShape.addPoint!(
    in
    btVector3
    point
    
    
    )
{   
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    
    this.cxx_addPoint(
        point__cxx
        );
    
    
    
}


btConvexHullShape.project?(
    in
    btTransform
    trans
    
    ,
    in
    btVector3
    dir
    
    ,
    io
    Float32
    minProj
    
    ,
    io
    Float32
    maxProj
    
    ,
    io
    btVector3
    witnesPtMin
    
    ,
    io
    btVector3
    witnesPtMax
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    
    CxxFloat32Ref minProj__cxx = Make_CxxFloat32Ref(minProj);
    
    CxxFloat32Ref maxProj__cxx = Make_CxxFloat32Ref(maxProj);
    
    CxxbtVector3Ref witnesPtMin__cxx = Make_CxxbtVector3Ref(witnesPtMin);
    
    CxxbtVector3Ref witnesPtMax__cxx = Make_CxxbtVector3Ref(witnesPtMax);
    
    this.cxx_project(
        trans__cxx,
        dir__cxx,
        minProj__cxx,
        maxProj__cxx,
        witnesPtMin__cxx,
        witnesPtMax__cxx
        );
    
    
    
    
    
    
    
    
}

btVector3
btConvexHullShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

SInt32
btConvexHullShape.getNumEdges?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumEdges(
        );
    
    return __res;
}

btVector3
btConvexHullShape.getUnscaledPoints!(
    )
{   
    CxxbtVector3Ptr __res_cxx = 
    this.cxx_getUnscaledPoints(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3Ptr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

Boolean
btConvexHullShape.isInside?(
    in
    btVector3
    pt
    
    ,
    in
    Float32
    tolerance
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    Boolean __res = 
    this.cxx_isInside(
        pt__cxx,
        tolerance
        );
    
    
    
    return __res;
}


btConvexHullShape.addPoint!(
    in
    btVector3
    point
    
    ,
    in
    Boolean
    recalculateLocalAabb
    
    
    )
{   
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    
    
    this.cxx_addPoint(
        point__cxx,
        recalculateLocalAabb
        );
    
    
    
    
}

SInt32
btConvexHullShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

btVector3
btConvexHullShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

String
btConvexHullShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

SInt32
btConvexHullShape.getNumPoints?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPoints(
        );
    
    return __res;
}


btConvexHullShape.getPlane?(
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    
    this.cxx_getPlane(
        planeNormal__cxx,
        planeSupport__cxx,
        i
        );
    
    
    
    
    
}


btConvexHullShape.optimizeConvexHull!(
    )
{   
    
    this.cxx_optimizeConvexHull(
        );
    
    
}

///in case we receive negative scaling

btConvexHullShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

///getPoints is obsolete, please use getUnscaledPoints
btVector3
btConvexHullShape.getPoints?(
    )
{   
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_getPoints(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

btVector3
btConvexHullShape.getScaledPoint?(
    in
    SInt32
    i
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_getScaledPoint(
        i
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShape] EDK[Fabric_EDK_KL_btConvexHullShape] LIB[btConvexHullShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexHullShape.=(
    btConvexHullShape that
    ) = "Bullet2__btConvexHullShape__MU__simple_ass_op__ae088f4db0c61e04dcffb4a7e49aa5f4";


/// \dfgPresetOmit
/// \internal
btConvexHullShape.appendDesc(io String string) {
  string += "btConvexHullShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexHullShapeData] EDK[Fabric_EDK_KL_btConvexHullShapeData] LIB[btConvexHullShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShapeData] EDK[Fabric_EDK_KL_btConvexHullShapeData] LIB[btConvexHullShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShapeData] EDK[Fabric_EDK_KL_btConvexHullShapeData] LIB[btConvexHullShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexHullShapeData() = "Bullet2__btConvexHullShapeData__MU__empty_ctor__b782907277212ca8f82e872341f3201a";

/// \dfgPresetOmit
btConvexHullShapeData(
    btConvexHullShapeData that
    ) = "Bullet2__btConvexHullShapeData__MU__copy_ctor__c2a9f905012a5668f8c661cadfc06854";

btConvexHullShapeData.cxx_delete() = "Bullet2__btConvexHullShapeData__MU__delete__fe854e564623d29dc28a09d24f9f8aaf";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShapeData] EDK[Fabric_EDK_KL_btConvexHullShapeData] LIB[btConvexHullShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShapeData] EDK[Fabric_EDK_KL_btConvexHullShapeData] LIB[btConvexHullShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexHullShapeData] EDK[Fabric_EDK_KL_btConvexHullShapeData] LIB[btConvexHullShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexHullShapeData.=(
    btConvexHullShapeData that
    ) = "Bullet2__btConvexHullShapeData__MU__simple_ass_op__0369821dd130b5291024d48f2f7d6280";


/// \dfgPresetOmit
/// \internal
btConvexHullShapeData.appendDesc(io String string) {
  string += "btConvexHullShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvex2dShape() = "Bullet2__btConvex2dShape__MU__empty_ctor__a80b010be9041e8702956c5116a5839b";

/// \dfgPresetOmit
btConvex2dShape(
    btConvex2dShape that
    ) = "Bullet2__btConvex2dShape__MU__copy_ctor__7fc2ccc359f17adf9337e46cde3302a7";

/// \dfgPresetOmit
/// \internal
btConvex2dShape.__ctor(
    btConvexShape convexChildShape
    ) = "Bullet2__btConvex2dShape__MU__ctor__3989b65f0a7262f6dc6d77f77fa1a7e7";

/// \dfgPresetOmit
btConvex2dShape(
    btConvexShape convexChildShape
    ) {
    this.__ctor(
        convexChildShape
        );
}

btConvex2dShape.cxx_delete() = "Bullet2__btConvex2dShape__MU__delete__0860d0b54556fb7d2be53b481029e7f5";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btConvex2dShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvex2dShape__CO__meth_localGetSupportingVertexWithoutMargin__5633068ee745f9dc4a8f0b323dbfa4cf";

/// \dfgPresetOmit
/// \internal
btVector3
btConvex2dShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvex2dShape__CO__meth_localGetSupportingVertex__f8777c7369e9d574eec0e340a5b5f9bb";

/// \dfgPresetOmit
/// \internal

btConvex2dShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btConvex2dShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__5cdd1b8dbfe953d80e2b452ad2677ddb";

/// \dfgPresetOmit
/// \internal

btConvex2dShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btConvex2dShape__CO__meth_calculateLocalInertia__87da961193383caa33db9f2d8174efd8";

/// \dfgPresetOmit
/// \internal
btConvexShape
btConvex2dShape.cxx_getChildShape!(
    )
 = "Bullet2__btConvex2dShape__MU__meth_getChildShape__959ad5aad4ab69238f2599e8af4b7814";

/// \dfgPresetOmit
/// \internal
btConvexShape
btConvex2dShape.cxx_getChildShape?(
    )
 = "Bullet2__btConvex2dShape__CO__meth_getChildShape__8986250be36b6d5e1a51deaae518f038";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btConvex2dShape.cxx_getName?(
    )
 = "Bullet2__btConvex2dShape__CO__meth_getName__06111140556cf29643de0446bde33dde";

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
/// \dfgPresetOmit
/// \internal

btConvex2dShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btConvex2dShape__CO__meth_getAabb__b6530e151e2634abe9fb2579dd45baea";

/// \dfgPresetOmit
/// \internal

btConvex2dShape.cxx_getAabbSlow?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btConvex2dShape__CO__meth_getAabbSlow__ffb04fc1c7c44ef7317605f928999edb";

/// \dfgPresetOmit
/// \internal

btConvex2dShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btConvex2dShape__MU__meth_setLocalScaling__4000d54783a79b82d08b45e4688251dd";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btConvex2dShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btConvex2dShape__CO__meth_getLocalScaling__7fd4391d88ad875c0ef144e2e74cfa49";

/// \dfgPresetOmit
/// \internal

btConvex2dShape.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btConvex2dShape__MU__meth_setMargin__71edd89ba5fd8127d772061e5621baa6";

/// \dfgPresetOmit
/// \internal
Float32
btConvex2dShape.cxx_getMargin?(
    )
 = "Bullet2__btConvex2dShape__CO__meth_getMargin__81571f4238d2b973d13031b8dc344051";

/// \dfgPresetOmit
/// \internal
SInt32
btConvex2dShape.cxx_getNumPreferredPenetrationDirections?(
    )
 = "Bullet2__btConvex2dShape__CO__meth_getNumPreferredPenetrationDirections__b8b067a3ac791687783d44f90739c269";

/// \dfgPresetOmit
/// \internal

btConvex2dShape.cxx_getPreferredPenetrationDirection?(
    SInt32 index,
    CxxbtVector3Ref penetrationVector
    )
 = "Bullet2__btConvex2dShape__CO__meth_getPreferredPenetrationDirection__4292cc12085bb9ea8a75b5821f960741";


btConvex2dShape.getAabbSlow?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabbSlow(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

SInt32
btConvex2dShape.getNumPreferredPenetrationDirections?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPreferredPenetrationDirections(
        );
    
    return __res;
}

btVector3
btConvex2dShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

Float32
btConvex2dShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}

btVector3
btConvex2dShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btConvex2dShape.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}


btConvex2dShape.getPreferredPenetrationDirection?(
    in
    SInt32
    index
    
    ,
    io
    btVector3
    penetrationVector
    
    
    )
{   
    
    
    CxxbtVector3Ref penetrationVector__cxx = Make_CxxbtVector3Ref(penetrationVector);
    
    this.cxx_getPreferredPenetrationDirection(
        index,
        penetrationVector__cxx
        );
    
    
    
    
}


btConvex2dShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

btConvexShape
btConvex2dShape.getChildShape!(
    )
{   
    btConvexShape __res = 
    this.cxx_getChildShape(
        );
    
    return __res;
}

String
btConvex2dShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btConvex2dShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

btVector3
btConvex2dShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}


btConvex2dShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version

btConvex2dShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dShape] EDK[Fabric_EDK_KL_btConvex2dShape] LIB[btConvex2dShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvex2dShape.=(
    btConvex2dShape that
    ) = "Bullet2__btConvex2dShape__MU__simple_ass_op__714eb498774f01b8ce411bf1b3980898";


/// \dfgPresetOmit
/// \internal
btConvex2dShape.appendDesc(io String string) {
  string += "btConvex2dShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btStridingMeshInterface(
    btStridingMeshInterface that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btStridingMeshInterface.cxx_delete() = "Bullet2__btStridingMeshInterface__MU__delete__97254972506508bb109b3cae8cfffcc1";

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///brute force method to calculate aabb
/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_calculateAabbBruteForce!(
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btStridingMeshInterface__MU__meth_calculateAabbBruteForce__ccdfd92b958253b346fa66c28e42ac3f";

/// get read and write access to a subpart of a triangle mesh
/// this subpart has a continuous array of vertices and indices
/// in this way the mesh can be handled as chunks of memory with striding
/// very similar to OpenGL vertexarray support
/// make a call to unLockVertexBase when the read and write access is finished
/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_getLockedVertexIndexBase!(
    CxxUInt8PtrPtr vertexbase,
    CxxSInt32Ref numverts,
    CxxPHY_ScalarTypeRef type,
    CxxSInt32Ref stride,
    CxxUInt8PtrPtr indexbase,
    CxxSInt32Ref indexstride,
    CxxSInt32Ref numfaces,
    CxxPHY_ScalarTypeRef indicestype
    )
 = "Bullet2__btStridingMeshInterface__MU__meth_getLockedVertexIndexBase__9e758d9b5da652918ace7429f640b57c";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_getLockedVertexIndexBase!(
    CxxUInt8PtrPtr vertexbase,
    CxxSInt32Ref numverts,
    CxxPHY_ScalarTypeRef type,
    CxxSInt32Ref stride,
    CxxUInt8PtrPtr indexbase,
    CxxSInt32Ref indexstride,
    CxxSInt32Ref numfaces,
    CxxPHY_ScalarTypeRef indicestype,
    SInt32 subpart
    )
 = "Bullet2__btStridingMeshInterface__MU__meth_getLockedVertexIndexBase__c54426e9b3d659f8966b62b37e399480";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_getLockedReadOnlyVertexIndexBase?(
    CxxUInt8ConstPtrPtr vertexbase,
    CxxSInt32Ref numverts,
    CxxPHY_ScalarTypeRef type,
    CxxSInt32Ref stride,
    CxxUInt8ConstPtrPtr indexbase,
    CxxSInt32Ref indexstride,
    CxxSInt32Ref numfaces,
    CxxPHY_ScalarTypeRef indicestype
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_getLockedReadOnlyVertexIndexBase__92892273cda99351213b414883841f2c";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_getLockedReadOnlyVertexIndexBase?(
    CxxUInt8ConstPtrPtr vertexbase,
    CxxSInt32Ref numverts,
    CxxPHY_ScalarTypeRef type,
    CxxSInt32Ref stride,
    CxxUInt8ConstPtrPtr indexbase,
    CxxSInt32Ref indexstride,
    CxxSInt32Ref numfaces,
    CxxPHY_ScalarTypeRef indicestype,
    SInt32 subpart
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_getLockedReadOnlyVertexIndexBase__2aa9d514c527e1025dde609f53cc700f";

/// unLockVertexBase finishes the access to a subpart of the triangle mesh
/// make a call to unLockVertexBase when the read and write access (using getLockedVertexIndexBase) is finished
/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_unLockVertexBase!(
    SInt32 subpart
    )
 = "Bullet2__btStridingMeshInterface__MU__meth_unLockVertexBase__17e833eb62ae172c10872180521c4f2a";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_unLockReadOnlyVertexBase?(
    SInt32 subpart
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_unLockReadOnlyVertexBase__4de43246f0ef8b60226a434618b24725";

/// getNumSubParts returns the number of seperate subparts
/// each subpart has a continuous array of vertices and indices
/// \dfgPresetOmit
/// \internal
SInt32
btStridingMeshInterface.cxx_getNumSubParts?(
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_getNumSubParts__836d123dfdb0ae8f7628e303dde55913";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_preallocateVertices!(
    SInt32 numverts
    )
 = "Bullet2__btStridingMeshInterface__MU__meth_preallocateVertices__e5e4002e2085d307e1b0189734ca110d";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_preallocateIndices!(
    SInt32 numindices
    )
 = "Bullet2__btStridingMeshInterface__MU__meth_preallocateIndices__1f8913adfab8ca1f81b9f6d3e8a5e5fa";

/// \dfgPresetOmit
/// \internal
Boolean
btStridingMeshInterface.cxx_hasPremadeAabb?(
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_hasPremadeAabb__619bee47626fb4bdb3a6f9ce55bab933";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_setPremadeAabb?(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_setPremadeAabb__4fc07e1f9f0c6f92b07b5a8e14d5efcf";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_getPremadeAabb?(
    CxxbtVector3Ptr aabbMin,
    CxxbtVector3Ptr aabbMax
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_getPremadeAabb__bf028ad9dbbbf4ec39e36a3e9245ea37";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btStridingMeshInterface.cxx_getScaling?(
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_getScaling__f3262c23371315fc03738732d22aed1a";

/// \dfgPresetOmit
/// \internal

btStridingMeshInterface.cxx_setScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btStridingMeshInterface__MU__meth_setScaling__1220c4955b7be11043bb05a547412707";

/// \dfgPresetOmit
/// \internal
SInt32
btStridingMeshInterface.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btStridingMeshInterface__CO__meth_calculateSerializeBufferSize__4f702fa44e44eb2198cc12ff9878e502";


btStridingMeshInterface.getPremadeAabb?(
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3Ptr aabbMin__cxx = Make_CxxbtVector3Ptr(aabbMin);
    
    CxxbtVector3Ptr aabbMax__cxx = Make_CxxbtVector3Ptr(aabbMax);
    
    this.cxx_getPremadeAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}

/// get read and write access to a subpart of a triangle mesh
/// this subpart has a continuous array of vertices and indices
/// in this way the mesh can be handled as chunks of memory with striding
/// very similar to OpenGL vertexarray support
/// make a call to unLockVertexBase when the read and write access is finished

btStridingMeshInterface.getLockedVertexIndexBase!(
    io
    UInt8
    vertexbase
    
    ,
    io
    SInt32
    numverts
    
    ,
    io
    PHY_ScalarType
    type
    
    ,
    io
    SInt32
    stride
    
    ,
    io
    UInt8
    indexbase
    
    ,
    io
    SInt32
    indexstride
    
    ,
    io
    SInt32
    numfaces
    
    ,
    io
    PHY_ScalarType
    indicestype
    
    
    )
{   
    
    CxxUInt8Ptr vertexbase__cxx = Make_CxxUInt8Ptr(vertexbase);
    CxxUInt8PtrPtr vertexbase__cxx__cxx = Make_CxxUInt8PtrPtr(vertexbase__cxx);
    
    CxxSInt32Ref numverts__cxx = Make_CxxSInt32Ref(numverts);
    
    CxxPHY_ScalarTypeRef type__cxx = Make_CxxPHY_ScalarTypeRef(type);
    
    CxxSInt32Ref stride__cxx = Make_CxxSInt32Ref(stride);
    
    CxxUInt8Ptr indexbase__cxx = Make_CxxUInt8Ptr(indexbase);
    CxxUInt8PtrPtr indexbase__cxx__cxx = Make_CxxUInt8PtrPtr(indexbase__cxx);
    
    CxxSInt32Ref indexstride__cxx = Make_CxxSInt32Ref(indexstride);
    
    CxxSInt32Ref numfaces__cxx = Make_CxxSInt32Ref(numfaces);
    
    CxxPHY_ScalarTypeRef indicestype__cxx = Make_CxxPHY_ScalarTypeRef(indicestype);
    
    this.cxx_getLockedVertexIndexBase(
        vertexbase__cxx__cxx,
        numverts__cxx,
        type__cxx,
        stride__cxx,
        indexbase__cxx__cxx,
        indexstride__cxx,
        numfaces__cxx,
        indicestype__cxx
        );
    
    
    
    
    
    
    
    
    
    
}


btStridingMeshInterface.setPremadeAabb?(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_setPremadeAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}

Boolean
btStridingMeshInterface.hasPremadeAabb?(
    )
{   
    Boolean __res = 
    this.cxx_hasPremadeAabb(
        );
    
    return __res;
}


btStridingMeshInterface.getLockedVertexIndexBase!(
    io
    UInt8
    vertexbase
    
    ,
    io
    SInt32
    numverts
    
    ,
    io
    PHY_ScalarType
    type
    
    ,
    io
    SInt32
    stride
    
    ,
    io
    UInt8
    indexbase
    
    ,
    io
    SInt32
    indexstride
    
    ,
    io
    SInt32
    numfaces
    
    ,
    io
    PHY_ScalarType
    indicestype
    
    ,
    in
    SInt32
    subpart
    
    
    )
{   
    
    CxxUInt8Ptr vertexbase__cxx = Make_CxxUInt8Ptr(vertexbase);
    CxxUInt8PtrPtr vertexbase__cxx__cxx = Make_CxxUInt8PtrPtr(vertexbase__cxx);
    
    CxxSInt32Ref numverts__cxx = Make_CxxSInt32Ref(numverts);
    
    CxxPHY_ScalarTypeRef type__cxx = Make_CxxPHY_ScalarTypeRef(type);
    
    CxxSInt32Ref stride__cxx = Make_CxxSInt32Ref(stride);
    
    CxxUInt8Ptr indexbase__cxx = Make_CxxUInt8Ptr(indexbase);
    CxxUInt8PtrPtr indexbase__cxx__cxx = Make_CxxUInt8PtrPtr(indexbase__cxx);
    
    CxxSInt32Ref indexstride__cxx = Make_CxxSInt32Ref(indexstride);
    
    CxxSInt32Ref numfaces__cxx = Make_CxxSInt32Ref(numfaces);
    
    CxxPHY_ScalarTypeRef indicestype__cxx = Make_CxxPHY_ScalarTypeRef(indicestype);
    
    
    this.cxx_getLockedVertexIndexBase(
        vertexbase__cxx__cxx,
        numverts__cxx,
        type__cxx,
        stride__cxx,
        indexbase__cxx__cxx,
        indexstride__cxx,
        numfaces__cxx,
        indicestype__cxx,
        subpart
        );
    
    
    
    
    
    
    
    
    
    
    
}


btStridingMeshInterface.setScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setScaling(
        scaling__cxx
        );
    
    
    
}


btStridingMeshInterface.preallocateIndices!(
    in
    SInt32
    numindices
    
    
    )
{   
    
    
    this.cxx_preallocateIndices(
        numindices
        );
    
    
    
}


btStridingMeshInterface.getLockedReadOnlyVertexIndexBase?(
    io
    UInt8
    vertexbase
    
    ,
    io
    SInt32
    numverts
    
    ,
    io
    PHY_ScalarType
    type
    
    ,
    io
    SInt32
    stride
    
    ,
    io
    UInt8
    indexbase
    
    ,
    io
    SInt32
    indexstride
    
    ,
    io
    SInt32
    numfaces
    
    ,
    io
    PHY_ScalarType
    indicestype
    
    ,
    in
    SInt32
    subpart
    
    
    )
{   
    
    CxxUInt8ConstPtr vertexbase__cxx = Make_CxxUInt8ConstPtr(vertexbase);
    CxxUInt8ConstPtrPtr vertexbase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(vertexbase__cxx);
    
    CxxSInt32Ref numverts__cxx = Make_CxxSInt32Ref(numverts);
    
    CxxPHY_ScalarTypeRef type__cxx = Make_CxxPHY_ScalarTypeRef(type);
    
    CxxSInt32Ref stride__cxx = Make_CxxSInt32Ref(stride);
    
    CxxUInt8ConstPtr indexbase__cxx = Make_CxxUInt8ConstPtr(indexbase);
    CxxUInt8ConstPtrPtr indexbase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(indexbase__cxx);
    
    CxxSInt32Ref indexstride__cxx = Make_CxxSInt32Ref(indexstride);
    
    CxxSInt32Ref numfaces__cxx = Make_CxxSInt32Ref(numfaces);
    
    CxxPHY_ScalarTypeRef indicestype__cxx = Make_CxxPHY_ScalarTypeRef(indicestype);
    
    
    this.cxx_getLockedReadOnlyVertexIndexBase(
        vertexbase__cxx__cxx,
        numverts__cxx,
        type__cxx,
        stride__cxx,
        indexbase__cxx__cxx,
        indexstride__cxx,
        numfaces__cxx,
        indicestype__cxx,
        subpart
        );
    
    
    
    
    
    
    
    
    
    
    
}

btVector3
btStridingMeshInterface.getScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btStridingMeshInterface.unLockReadOnlyVertexBase?(
    in
    SInt32
    subpart
    
    
    )
{   
    
    
    this.cxx_unLockReadOnlyVertexBase(
        subpart
        );
    
    
    
}

SInt32
btStridingMeshInterface.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

/// unLockVertexBase finishes the access to a subpart of the triangle mesh
/// make a call to unLockVertexBase when the read and write access (using getLockedVertexIndexBase) is finished

btStridingMeshInterface.unLockVertexBase!(
    in
    SInt32
    subpart
    
    
    )
{   
    
    
    this.cxx_unLockVertexBase(
        subpart
        );
    
    
    
}


btStridingMeshInterface.preallocateVertices!(
    in
    SInt32
    numverts
    
    
    )
{   
    
    
    this.cxx_preallocateVertices(
        numverts
        );
    
    
    
}

/// getNumSubParts returns the number of seperate subparts
/// each subpart has a continuous array of vertices and indices
SInt32
btStridingMeshInterface.getNumSubParts?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumSubParts(
        );
    
    return __res;
}


btStridingMeshInterface.getLockedReadOnlyVertexIndexBase?(
    io
    UInt8
    vertexbase
    
    ,
    io
    SInt32
    numverts
    
    ,
    io
    PHY_ScalarType
    type
    
    ,
    io
    SInt32
    stride
    
    ,
    io
    UInt8
    indexbase
    
    ,
    io
    SInt32
    indexstride
    
    ,
    io
    SInt32
    numfaces
    
    ,
    io
    PHY_ScalarType
    indicestype
    
    
    )
{   
    
    CxxUInt8ConstPtr vertexbase__cxx = Make_CxxUInt8ConstPtr(vertexbase);
    CxxUInt8ConstPtrPtr vertexbase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(vertexbase__cxx);
    
    CxxSInt32Ref numverts__cxx = Make_CxxSInt32Ref(numverts);
    
    CxxPHY_ScalarTypeRef type__cxx = Make_CxxPHY_ScalarTypeRef(type);
    
    CxxSInt32Ref stride__cxx = Make_CxxSInt32Ref(stride);
    
    CxxUInt8ConstPtr indexbase__cxx = Make_CxxUInt8ConstPtr(indexbase);
    CxxUInt8ConstPtrPtr indexbase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(indexbase__cxx);
    
    CxxSInt32Ref indexstride__cxx = Make_CxxSInt32Ref(indexstride);
    
    CxxSInt32Ref numfaces__cxx = Make_CxxSInt32Ref(numfaces);
    
    CxxPHY_ScalarTypeRef indicestype__cxx = Make_CxxPHY_ScalarTypeRef(indicestype);
    
    this.cxx_getLockedReadOnlyVertexIndexBase(
        vertexbase__cxx__cxx,
        numverts__cxx,
        type__cxx,
        stride__cxx,
        indexbase__cxx__cxx,
        indexstride__cxx,
        numfaces__cxx,
        indicestype__cxx
        );
    
    
    
    
    
    
    
    
    
    
}

///brute force method to calculate aabb

btStridingMeshInterface.calculateAabbBruteForce!(
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_calculateAabbBruteForce(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterface] EDK[Fabric_EDK_KL_btStridingMeshInterface] LIB[btStridingMeshInterface *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btStridingMeshInterface.=(
    btStridingMeshInterface that
    ) = "Bullet2__btStridingMeshInterface__MU__simple_ass_op__043aab2583cc625dbb41e22d8b820c53";


/// \dfgPresetOmit
/// \internal
btStridingMeshInterface.appendDesc(io String string) {
  string += "btStridingMeshInterface:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btIntIndexData] EDK[Fabric_EDK_KL_btIntIndexData] LIB[btIntIndexData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btIntIndexData] EDK[Fabric_EDK_KL_btIntIndexData] LIB[btIntIndexData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btIntIndexData] EDK[Fabric_EDK_KL_btIntIndexData] LIB[btIntIndexData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btIntIndexData() = "Bullet2__btIntIndexData__MU__empty_ctor__8a8f0f2d325a37333fea275b2e918949";

/// \dfgPresetOmit
btIntIndexData(
    btIntIndexData that
    ) = "Bullet2__btIntIndexData__MU__copy_ctor__cd524ce8ad81239ad516e7ef3cdf2642";

btIntIndexData.cxx_delete() = "Bullet2__btIntIndexData__MU__delete__0125c67d1c0cc9e3c412825b66a38456";

//////////////////////////////////////////////////////////////////////////////
// KL[btIntIndexData] EDK[Fabric_EDK_KL_btIntIndexData] LIB[btIntIndexData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btIntIndexData] EDK[Fabric_EDK_KL_btIntIndexData] LIB[btIntIndexData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btIntIndexData] EDK[Fabric_EDK_KL_btIntIndexData] LIB[btIntIndexData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btIntIndexData.=(
    btIntIndexData that
    ) = "Bullet2__btIntIndexData__MU__simple_ass_op__ff36b7e1d54eb8f5dcf0e6762eeab40f";


/// \dfgPresetOmit
/// \internal
btIntIndexData.appendDesc(io String string) {
  string += "btIntIndexData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShortIntIndexData] EDK[Fabric_EDK_KL_btShortIntIndexData] LIB[btShortIntIndexData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexData] EDK[Fabric_EDK_KL_btShortIntIndexData] LIB[btShortIntIndexData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexData] EDK[Fabric_EDK_KL_btShortIntIndexData] LIB[btShortIntIndexData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btShortIntIndexData() = "Bullet2__btShortIntIndexData__MU__empty_ctor__2126d2221a09c4ebdb7708bc7c26be1f";

/// \dfgPresetOmit
btShortIntIndexData(
    btShortIntIndexData that
    ) = "Bullet2__btShortIntIndexData__MU__copy_ctor__b7c3d54f9319685d71f61496f5ed286f";

btShortIntIndexData.cxx_delete() = "Bullet2__btShortIntIndexData__MU__delete__5b358af7080bc3ac367742a03a2ec2fd";

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexData] EDK[Fabric_EDK_KL_btShortIntIndexData] LIB[btShortIntIndexData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexData] EDK[Fabric_EDK_KL_btShortIntIndexData] LIB[btShortIntIndexData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexData] EDK[Fabric_EDK_KL_btShortIntIndexData] LIB[btShortIntIndexData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btShortIntIndexData.=(
    btShortIntIndexData that
    ) = "Bullet2__btShortIntIndexData__MU__simple_ass_op__0acf91ce2ce0de250b3f7362119d5e20";


/// \dfgPresetOmit
/// \internal
btShortIntIndexData.appendDesc(io String string) {
  string += "btShortIntIndexData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShortIntIndexTripletData] EDK[Fabric_EDK_KL_btShortIntIndexTripletData] LIB[btShortIntIndexTripletData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexTripletData] EDK[Fabric_EDK_KL_btShortIntIndexTripletData] LIB[btShortIntIndexTripletData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexTripletData] EDK[Fabric_EDK_KL_btShortIntIndexTripletData] LIB[btShortIntIndexTripletData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btShortIntIndexTripletData() = "Bullet2__btShortIntIndexTripletData__MU__empty_ctor__43946073846320bcc477ab2fee25322e";

/// \dfgPresetOmit
btShortIntIndexTripletData(
    btShortIntIndexTripletData that
    ) = "Bullet2__btShortIntIndexTripletData__MU__copy_ctor__402985381c4f75fc7335a5173220c83a";

btShortIntIndexTripletData.cxx_delete() = "Bullet2__btShortIntIndexTripletData__MU__delete__bfcb5c274be98d89c3c034c905523e85";

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexTripletData] EDK[Fabric_EDK_KL_btShortIntIndexTripletData] LIB[btShortIntIndexTripletData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexTripletData] EDK[Fabric_EDK_KL_btShortIntIndexTripletData] LIB[btShortIntIndexTripletData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShortIntIndexTripletData] EDK[Fabric_EDK_KL_btShortIntIndexTripletData] LIB[btShortIntIndexTripletData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btShortIntIndexTripletData.=(
    btShortIntIndexTripletData that
    ) = "Bullet2__btShortIntIndexTripletData__MU__simple_ass_op__5fab77b29b4ce1d78a77bc237b9bb659";


/// \dfgPresetOmit
/// \internal
btShortIntIndexTripletData.appendDesc(io String string) {
  string += "btShortIntIndexTripletData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCharIndexTripletData] EDK[Fabric_EDK_KL_btCharIndexTripletData] LIB[btCharIndexTripletData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCharIndexTripletData] EDK[Fabric_EDK_KL_btCharIndexTripletData] LIB[btCharIndexTripletData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCharIndexTripletData] EDK[Fabric_EDK_KL_btCharIndexTripletData] LIB[btCharIndexTripletData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCharIndexTripletData() = "Bullet2__btCharIndexTripletData__MU__empty_ctor__739a59d253177c67caaec878b6040c2a";

/// \dfgPresetOmit
btCharIndexTripletData(
    btCharIndexTripletData that
    ) = "Bullet2__btCharIndexTripletData__MU__copy_ctor__c010dedb782011920e1aa8de63fb9326";

btCharIndexTripletData.cxx_delete() = "Bullet2__btCharIndexTripletData__MU__delete__787c80036e4697f42220188eacf488cb";

//////////////////////////////////////////////////////////////////////////////
// KL[btCharIndexTripletData] EDK[Fabric_EDK_KL_btCharIndexTripletData] LIB[btCharIndexTripletData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCharIndexTripletData] EDK[Fabric_EDK_KL_btCharIndexTripletData] LIB[btCharIndexTripletData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCharIndexTripletData] EDK[Fabric_EDK_KL_btCharIndexTripletData] LIB[btCharIndexTripletData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCharIndexTripletData.=(
    btCharIndexTripletData that
    ) = "Bullet2__btCharIndexTripletData__MU__simple_ass_op__50d0018bd4effab91105eedf7eda2def";


/// \dfgPresetOmit
/// \internal
btCharIndexTripletData.appendDesc(io String string) {
  string += "btCharIndexTripletData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMeshPartData] EDK[Fabric_EDK_KL_btMeshPartData] LIB[btMeshPartData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMeshPartData] EDK[Fabric_EDK_KL_btMeshPartData] LIB[btMeshPartData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMeshPartData] EDK[Fabric_EDK_KL_btMeshPartData] LIB[btMeshPartData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMeshPartData() = "Bullet2__btMeshPartData__MU__empty_ctor__9c0c6721b55e48a283b98c52d8cd5f4d";

/// \dfgPresetOmit
btMeshPartData(
    btMeshPartData that
    ) = "Bullet2__btMeshPartData__MU__copy_ctor__6e18792c9bc40eb8fb650654dda6bf7d";

btMeshPartData.cxx_delete() = "Bullet2__btMeshPartData__MU__delete__bc1f91652b999d3d0c20f458d7b3114e";

//////////////////////////////////////////////////////////////////////////////
// KL[btMeshPartData] EDK[Fabric_EDK_KL_btMeshPartData] LIB[btMeshPartData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMeshPartData] EDK[Fabric_EDK_KL_btMeshPartData] LIB[btMeshPartData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMeshPartData] EDK[Fabric_EDK_KL_btMeshPartData] LIB[btMeshPartData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMeshPartData.=(
    btMeshPartData that
    ) = "Bullet2__btMeshPartData__MU__simple_ass_op__b50d1be1b05476cc61ca446958e690e8";


/// \dfgPresetOmit
/// \internal
btMeshPartData.appendDesc(io String string) {
  string += "btMeshPartData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btStridingMeshInterfaceData] EDK[Fabric_EDK_KL_btStridingMeshInterfaceData] LIB[btStridingMeshInterfaceData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterfaceData] EDK[Fabric_EDK_KL_btStridingMeshInterfaceData] LIB[btStridingMeshInterfaceData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterfaceData] EDK[Fabric_EDK_KL_btStridingMeshInterfaceData] LIB[btStridingMeshInterfaceData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btStridingMeshInterfaceData() = "Bullet2__btStridingMeshInterfaceData__MU__empty_ctor__6e86b3a7874307dc657a6387328a20a7";

/// \dfgPresetOmit
btStridingMeshInterfaceData(
    btStridingMeshInterfaceData that
    ) = "Bullet2__btStridingMeshInterfaceData__MU__copy_ctor__900a2fb857e2ed92ae552a58ea5e4253";

btStridingMeshInterfaceData.cxx_delete() = "Bullet2__btStridingMeshInterfaceData__MU__delete__b74b78230f5da19ece5aae60cb483810";

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterfaceData] EDK[Fabric_EDK_KL_btStridingMeshInterfaceData] LIB[btStridingMeshInterfaceData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterfaceData] EDK[Fabric_EDK_KL_btStridingMeshInterfaceData] LIB[btStridingMeshInterfaceData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btStridingMeshInterfaceData] EDK[Fabric_EDK_KL_btStridingMeshInterfaceData] LIB[btStridingMeshInterfaceData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btStridingMeshInterfaceData.=(
    btStridingMeshInterfaceData that
    ) = "Bullet2__btStridingMeshInterfaceData__MU__simple_ass_op__0cf2d98101e67e2fb11c853501a4507b";


/// \dfgPresetOmit
/// \internal
btStridingMeshInterfaceData.appendDesc(io String string) {
  string += "btStridingMeshInterfaceData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btIndexedMesh] EDK[Fabric_EDK_KL_btIndexedMesh] LIB[btIndexedMesh *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btIndexedMesh] EDK[Fabric_EDK_KL_btIndexedMesh] LIB[btIndexedMesh *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btIndexedMesh] EDK[Fabric_EDK_KL_btIndexedMesh] LIB[btIndexedMesh *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btIndexedMesh(
    btIndexedMesh that
    ) = "Bullet2__btIndexedMesh__MU__copy_ctor__54d00d2b9b0205a2d857a12676ba8200";

/// \dfgPresetOmit
/// \internal
btIndexedMesh.__ctor(
    ) = "Bullet2__btIndexedMesh__MU__ctor__bc64d9e0681096716a34bf1936f82799";

/// \dfgPresetOmit
btIndexedMesh(
    ) {
    this.__ctor(
        );
}

btIndexedMesh.cxx_delete() = "Bullet2__btIndexedMesh__MU__delete__c04503132479f13879438d0f66f6017a";

//////////////////////////////////////////////////////////////////////////////
// KL[btIndexedMesh] EDK[Fabric_EDK_KL_btIndexedMesh] LIB[btIndexedMesh *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btIndexedMesh] EDK[Fabric_EDK_KL_btIndexedMesh] LIB[btIndexedMesh *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btIndexedMesh] EDK[Fabric_EDK_KL_btIndexedMesh] LIB[btIndexedMesh *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btIndexedMesh.=(
    btIndexedMesh that
    ) = "Bullet2__btIndexedMesh__MU__simple_ass_op__ad7138ef67f40c3726521d3c205b22ad";


/// \dfgPresetOmit
/// \internal
btIndexedMesh.appendDesc(io String string) {
  string += "btIndexedMesh:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btTriangleIndexVertexArray(
    btTriangleIndexVertexArray that
    ) = "Bullet2__btTriangleIndexVertexArray__MU__copy_ctor__5ad7da986413c023a91e5fad2f87e691";

/// \dfgPresetOmit
/// \internal
btTriangleIndexVertexArray.__ctor(
    ) = "Bullet2__btTriangleIndexVertexArray__MU__ctor__52e62e3e2bd2de08287b46129e508de6";

/// \dfgPresetOmit
btTriangleIndexVertexArray(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btTriangleIndexVertexArray.__ctor(
    SInt32 numTriangles,
    CxxSInt32Ptr triangleIndexBase,
    SInt32 triangleIndexStride,
    SInt32 numVertices,
    CxxFloat32Ptr vertexBase,
    SInt32 vertexStride
    ) = "Bullet2__btTriangleIndexVertexArray__MU__ctor__3f98fc1fd7c3a69142757a7a284d0725";

/// \dfgPresetOmit
btTriangleIndexVertexArray(
    SInt32 numTriangles,
    CxxSInt32Ptr triangleIndexBase,
    SInt32 triangleIndexStride,
    SInt32 numVertices,
    CxxFloat32Ptr vertexBase,
    SInt32 vertexStride
    ) {
    this.__ctor(
        numTriangles,
        triangleIndexBase,
        triangleIndexStride,
        numVertices,
        vertexBase,
        vertexStride
        );
}

btTriangleIndexVertexArray(
    in
    SInt32
    numTriangles
    
    ,
    io
    SInt32
    triangleIndexBase
    
    ,
    in
    SInt32
    triangleIndexStride
    
    ,
    in
    SInt32
    numVertices
    
    ,
    io
    Float32
    vertexBase
    
    ,
    in
    SInt32
    vertexStride
    
    
    ) {
    
    
    CxxSInt32Ptr triangleIndexBase__cxx = Make_CxxSInt32Ptr(triangleIndexBase);
    
    
    
    CxxFloat32Ptr vertexBase__cxx = Make_CxxFloat32Ptr(vertexBase);
    
    this.__ctor(
        numTriangles,
        triangleIndexBase__cxx,
        triangleIndexStride,
        numVertices,
        vertexBase__cxx,
        vertexStride
        );
    
    
    
    
    
    
}

btTriangleIndexVertexArray.cxx_delete() = "Bullet2__btTriangleIndexVertexArray__MU__delete__39fcd10a9f3873f44fec8110e8dbf2df";

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_addIndexedMesh!(
    btIndexedMesh mesh
    )
 = "Bullet2__btTriangleIndexVertexArray__MU__meth_addIndexedMesh__a75f18a2362cbfaa91b43d3b0c8fc5f1";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_addIndexedMesh!(
    btIndexedMesh mesh,
    PHY_ScalarType indexType
    )
 = "Bullet2__btTriangleIndexVertexArray__MU__meth_addIndexedMesh__b19598990db0656a83bc840b752af68f";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_getLockedVertexIndexBase!(
    CxxUInt8PtrPtr vertexbase,
    CxxSInt32Ref numverts,
    CxxPHY_ScalarTypeRef type,
    CxxSInt32Ref vertexStride,
    CxxUInt8PtrPtr indexbase,
    CxxSInt32Ref indexstride,
    CxxSInt32Ref numfaces,
    CxxPHY_ScalarTypeRef indicestype
    )
 = "Bullet2__btTriangleIndexVertexArray__MU__meth_getLockedVertexIndexBase__c3dc9e37251bf08be487e75ddffa35e1";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_getLockedVertexIndexBase!(
    CxxUInt8PtrPtr vertexbase,
    CxxSInt32Ref numverts,
    CxxPHY_ScalarTypeRef type,
    CxxSInt32Ref vertexStride,
    CxxUInt8PtrPtr indexbase,
    CxxSInt32Ref indexstride,
    CxxSInt32Ref numfaces,
    CxxPHY_ScalarTypeRef indicestype,
    SInt32 subpart
    )
 = "Bullet2__btTriangleIndexVertexArray__MU__meth_getLockedVertexIndexBase__5b2fbfebcceb7f8d474eeba3fcf6089f";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_getLockedReadOnlyVertexIndexBase?(
    CxxUInt8ConstPtrPtr vertexbase,
    CxxSInt32Ref numverts,
    CxxPHY_ScalarTypeRef type,
    CxxSInt32Ref vertexStride,
    CxxUInt8ConstPtrPtr indexbase,
    CxxSInt32Ref indexstride,
    CxxSInt32Ref numfaces,
    CxxPHY_ScalarTypeRef indicestype
    )
 = "Bullet2__btTriangleIndexVertexArray__CO__meth_getLockedReadOnlyVertexIndexBase__ec44f5ed43bcc44f07ed1840a3519221";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_getLockedReadOnlyVertexIndexBase?(
    CxxUInt8ConstPtrPtr vertexbase,
    CxxSInt32Ref numverts,
    CxxPHY_ScalarTypeRef type,
    CxxSInt32Ref vertexStride,
    CxxUInt8ConstPtrPtr indexbase,
    CxxSInt32Ref indexstride,
    CxxSInt32Ref numfaces,
    CxxPHY_ScalarTypeRef indicestype,
    SInt32 subpart
    )
 = "Bullet2__btTriangleIndexVertexArray__CO__meth_getLockedReadOnlyVertexIndexBase__cc3d2ee8eb527276493be936708f8e00";

/// unLockVertexBase finishes the access to a subpart of the triangle mesh
/// make a call to unLockVertexBase when the read and write access (using getLockedVertexIndexBase) is finished
/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_unLockVertexBase!(
    SInt32 subpart
    )
 = "Bullet2__btTriangleIndexVertexArray__MU__meth_unLockVertexBase__50211fe3b4e66fca2ac62f2b94848900";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_unLockReadOnlyVertexBase?(
    SInt32 subpart
    )
 = "Bullet2__btTriangleIndexVertexArray__CO__meth_unLockReadOnlyVertexBase__3f56132568672ddd940d566023b6a1b8";

/// getNumSubParts returns the number of seperate subparts
/// each subpart has a continuous array of vertices and indices
/// \dfgPresetOmit
/// \internal
SInt32
btTriangleIndexVertexArray.cxx_getNumSubParts?(
    )
 = "Bullet2__btTriangleIndexVertexArray__CO__meth_getNumSubParts__6979a5d9c4655318d0db53cf688cd719";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_preallocateVertices!(
    SInt32 numverts
    )
 = "Bullet2__btTriangleIndexVertexArray__MU__meth_preallocateVertices__28c6b7087ea0829d64cbc8f5a0574617";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_preallocateIndices!(
    SInt32 numindices
    )
 = "Bullet2__btTriangleIndexVertexArray__MU__meth_preallocateIndices__b9dbda28132e17601a60b2f12cd03b10";

/// \dfgPresetOmit
/// \internal
Boolean
btTriangleIndexVertexArray.cxx_hasPremadeAabb?(
    )
 = "Bullet2__btTriangleIndexVertexArray__CO__meth_hasPremadeAabb__f3a013263c64f978e06bc3a6753554e9";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_setPremadeAabb?(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btTriangleIndexVertexArray__CO__meth_setPremadeAabb__bb4134ed6d193818013e72a500ddc3a2";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexArray.cxx_getPremadeAabb?(
    CxxbtVector3Ptr aabbMin,
    CxxbtVector3Ptr aabbMax
    )
 = "Bullet2__btTriangleIndexVertexArray__CO__meth_getPremadeAabb__98c56d8d45016aeb18f350d3c6c62bfc";


btTriangleIndexVertexArray.setPremadeAabb?(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_setPremadeAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}


btTriangleIndexVertexArray.addIndexedMesh!(
    in
    btIndexedMesh
    mesh
    
    
    )
{   
    
    
    this.cxx_addIndexedMesh(
        mesh
        );
    
    
    
}


btTriangleIndexVertexArray.getLockedVertexIndexBase!(
    io
    UInt8
    vertexbase
    
    ,
    io
    SInt32
    numverts
    
    ,
    io
    PHY_ScalarType
    type
    
    ,
    io
    SInt32
    vertexStride
    
    ,
    io
    UInt8
    indexbase
    
    ,
    io
    SInt32
    indexstride
    
    ,
    io
    SInt32
    numfaces
    
    ,
    io
    PHY_ScalarType
    indicestype
    
    ,
    in
    SInt32
    subpart
    
    
    )
{   
    
    CxxUInt8Ptr vertexbase__cxx = Make_CxxUInt8Ptr(vertexbase);
    CxxUInt8PtrPtr vertexbase__cxx__cxx = Make_CxxUInt8PtrPtr(vertexbase__cxx);
    
    CxxSInt32Ref numverts__cxx = Make_CxxSInt32Ref(numverts);
    
    CxxPHY_ScalarTypeRef type__cxx = Make_CxxPHY_ScalarTypeRef(type);
    
    CxxSInt32Ref vertexStride__cxx = Make_CxxSInt32Ref(vertexStride);
    
    CxxUInt8Ptr indexbase__cxx = Make_CxxUInt8Ptr(indexbase);
    CxxUInt8PtrPtr indexbase__cxx__cxx = Make_CxxUInt8PtrPtr(indexbase__cxx);
    
    CxxSInt32Ref indexstride__cxx = Make_CxxSInt32Ref(indexstride);
    
    CxxSInt32Ref numfaces__cxx = Make_CxxSInt32Ref(numfaces);
    
    CxxPHY_ScalarTypeRef indicestype__cxx = Make_CxxPHY_ScalarTypeRef(indicestype);
    
    
    this.cxx_getLockedVertexIndexBase(
        vertexbase__cxx__cxx,
        numverts__cxx,
        type__cxx,
        vertexStride__cxx,
        indexbase__cxx__cxx,
        indexstride__cxx,
        numfaces__cxx,
        indicestype__cxx,
        subpart
        );
    
    
    
    
    
    
    
    
    
    
    
}

/// getNumSubParts returns the number of seperate subparts
/// each subpart has a continuous array of vertices and indices
SInt32
btTriangleIndexVertexArray.getNumSubParts?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumSubParts(
        );
    
    return __res;
}


btTriangleIndexVertexArray.preallocateVertices!(
    in
    SInt32
    numverts
    
    
    )
{   
    
    
    this.cxx_preallocateVertices(
        numverts
        );
    
    
    
}

Boolean
btTriangleIndexVertexArray.hasPremadeAabb?(
    )
{   
    Boolean __res = 
    this.cxx_hasPremadeAabb(
        );
    
    return __res;
}


btTriangleIndexVertexArray.addIndexedMesh!(
    in
    btIndexedMesh
    mesh
    
    ,
    in
    PHY_ScalarType
    indexType
    
    
    )
{   
    
    
    
    this.cxx_addIndexedMesh(
        mesh,
        indexType
        );
    
    
    
    
}


btTriangleIndexVertexArray.getLockedReadOnlyVertexIndexBase?(
    io
    UInt8
    vertexbase
    
    ,
    io
    SInt32
    numverts
    
    ,
    io
    PHY_ScalarType
    type
    
    ,
    io
    SInt32
    vertexStride
    
    ,
    io
    UInt8
    indexbase
    
    ,
    io
    SInt32
    indexstride
    
    ,
    io
    SInt32
    numfaces
    
    ,
    io
    PHY_ScalarType
    indicestype
    
    
    )
{   
    
    CxxUInt8ConstPtr vertexbase__cxx = Make_CxxUInt8ConstPtr(vertexbase);
    CxxUInt8ConstPtrPtr vertexbase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(vertexbase__cxx);
    
    CxxSInt32Ref numverts__cxx = Make_CxxSInt32Ref(numverts);
    
    CxxPHY_ScalarTypeRef type__cxx = Make_CxxPHY_ScalarTypeRef(type);
    
    CxxSInt32Ref vertexStride__cxx = Make_CxxSInt32Ref(vertexStride);
    
    CxxUInt8ConstPtr indexbase__cxx = Make_CxxUInt8ConstPtr(indexbase);
    CxxUInt8ConstPtrPtr indexbase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(indexbase__cxx);
    
    CxxSInt32Ref indexstride__cxx = Make_CxxSInt32Ref(indexstride);
    
    CxxSInt32Ref numfaces__cxx = Make_CxxSInt32Ref(numfaces);
    
    CxxPHY_ScalarTypeRef indicestype__cxx = Make_CxxPHY_ScalarTypeRef(indicestype);
    
    this.cxx_getLockedReadOnlyVertexIndexBase(
        vertexbase__cxx__cxx,
        numverts__cxx,
        type__cxx,
        vertexStride__cxx,
        indexbase__cxx__cxx,
        indexstride__cxx,
        numfaces__cxx,
        indicestype__cxx
        );
    
    
    
    
    
    
    
    
    
    
}


btTriangleIndexVertexArray.getPremadeAabb?(
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3Ptr aabbMin__cxx = Make_CxxbtVector3Ptr(aabbMin);
    
    CxxbtVector3Ptr aabbMax__cxx = Make_CxxbtVector3Ptr(aabbMax);
    
    this.cxx_getPremadeAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}


btTriangleIndexVertexArray.getLockedVertexIndexBase!(
    io
    UInt8
    vertexbase
    
    ,
    io
    SInt32
    numverts
    
    ,
    io
    PHY_ScalarType
    type
    
    ,
    io
    SInt32
    vertexStride
    
    ,
    io
    UInt8
    indexbase
    
    ,
    io
    SInt32
    indexstride
    
    ,
    io
    SInt32
    numfaces
    
    ,
    io
    PHY_ScalarType
    indicestype
    
    
    )
{   
    
    CxxUInt8Ptr vertexbase__cxx = Make_CxxUInt8Ptr(vertexbase);
    CxxUInt8PtrPtr vertexbase__cxx__cxx = Make_CxxUInt8PtrPtr(vertexbase__cxx);
    
    CxxSInt32Ref numverts__cxx = Make_CxxSInt32Ref(numverts);
    
    CxxPHY_ScalarTypeRef type__cxx = Make_CxxPHY_ScalarTypeRef(type);
    
    CxxSInt32Ref vertexStride__cxx = Make_CxxSInt32Ref(vertexStride);
    
    CxxUInt8Ptr indexbase__cxx = Make_CxxUInt8Ptr(indexbase);
    CxxUInt8PtrPtr indexbase__cxx__cxx = Make_CxxUInt8PtrPtr(indexbase__cxx);
    
    CxxSInt32Ref indexstride__cxx = Make_CxxSInt32Ref(indexstride);
    
    CxxSInt32Ref numfaces__cxx = Make_CxxSInt32Ref(numfaces);
    
    CxxPHY_ScalarTypeRef indicestype__cxx = Make_CxxPHY_ScalarTypeRef(indicestype);
    
    this.cxx_getLockedVertexIndexBase(
        vertexbase__cxx__cxx,
        numverts__cxx,
        type__cxx,
        vertexStride__cxx,
        indexbase__cxx__cxx,
        indexstride__cxx,
        numfaces__cxx,
        indicestype__cxx
        );
    
    
    
    
    
    
    
    
    
    
}


btTriangleIndexVertexArray.getLockedReadOnlyVertexIndexBase?(
    io
    UInt8
    vertexbase
    
    ,
    io
    SInt32
    numverts
    
    ,
    io
    PHY_ScalarType
    type
    
    ,
    io
    SInt32
    vertexStride
    
    ,
    io
    UInt8
    indexbase
    
    ,
    io
    SInt32
    indexstride
    
    ,
    io
    SInt32
    numfaces
    
    ,
    io
    PHY_ScalarType
    indicestype
    
    ,
    in
    SInt32
    subpart
    
    
    )
{   
    
    CxxUInt8ConstPtr vertexbase__cxx = Make_CxxUInt8ConstPtr(vertexbase);
    CxxUInt8ConstPtrPtr vertexbase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(vertexbase__cxx);
    
    CxxSInt32Ref numverts__cxx = Make_CxxSInt32Ref(numverts);
    
    CxxPHY_ScalarTypeRef type__cxx = Make_CxxPHY_ScalarTypeRef(type);
    
    CxxSInt32Ref vertexStride__cxx = Make_CxxSInt32Ref(vertexStride);
    
    CxxUInt8ConstPtr indexbase__cxx = Make_CxxUInt8ConstPtr(indexbase);
    CxxUInt8ConstPtrPtr indexbase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(indexbase__cxx);
    
    CxxSInt32Ref indexstride__cxx = Make_CxxSInt32Ref(indexstride);
    
    CxxSInt32Ref numfaces__cxx = Make_CxxSInt32Ref(numfaces);
    
    CxxPHY_ScalarTypeRef indicestype__cxx = Make_CxxPHY_ScalarTypeRef(indicestype);
    
    
    this.cxx_getLockedReadOnlyVertexIndexBase(
        vertexbase__cxx__cxx,
        numverts__cxx,
        type__cxx,
        vertexStride__cxx,
        indexbase__cxx__cxx,
        indexstride__cxx,
        numfaces__cxx,
        indicestype__cxx,
        subpart
        );
    
    
    
    
    
    
    
    
    
    
    
}


btTriangleIndexVertexArray.preallocateIndices!(
    in
    SInt32
    numindices
    
    
    )
{   
    
    
    this.cxx_preallocateIndices(
        numindices
        );
    
    
    
}


btTriangleIndexVertexArray.unLockReadOnlyVertexBase?(
    in
    SInt32
    subpart
    
    
    )
{   
    
    
    this.cxx_unLockReadOnlyVertexBase(
        subpart
        );
    
    
    
}

/// unLockVertexBase finishes the access to a subpart of the triangle mesh
/// make a call to unLockVertexBase when the read and write access (using getLockedVertexIndexBase) is finished

btTriangleIndexVertexArray.unLockVertexBase!(
    in
    SInt32
    subpart
    
    
    )
{   
    
    
    this.cxx_unLockVertexBase(
        subpart
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexArray] LIB[btTriangleIndexVertexArray *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTriangleIndexVertexArray.=(
    btTriangleIndexVertexArray that
    ) = "Bullet2__btTriangleIndexVertexArray__MU__simple_ass_op__f15be79e01b5c067d67e032cf1b90255";


/// \dfgPresetOmit
/// \internal
btTriangleIndexVertexArray.appendDesc(io String string) {
  string += "btTriangleIndexVertexArray:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMaterialProperties] EDK[Fabric_EDK_KL_btMaterialProperties] LIB[btMaterialProperties *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterialProperties] EDK[Fabric_EDK_KL_btMaterialProperties] LIB[btMaterialProperties *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterialProperties] EDK[Fabric_EDK_KL_btMaterialProperties] LIB[btMaterialProperties *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMaterialProperties() = "Bullet2__btMaterialProperties__MU__empty_ctor__596476670886131af078190378e686fd";

/// \dfgPresetOmit
btMaterialProperties(
    btMaterialProperties that
    ) = "Bullet2__btMaterialProperties__MU__copy_ctor__279311de2c128ec00561df9798489607";

btMaterialProperties.cxx_delete() = "Bullet2__btMaterialProperties__MU__delete__4080a75d7b2d59e6b3bbc7ce7c40586d";

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterialProperties] EDK[Fabric_EDK_KL_btMaterialProperties] LIB[btMaterialProperties *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterialProperties] EDK[Fabric_EDK_KL_btMaterialProperties] LIB[btMaterialProperties *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterialProperties] EDK[Fabric_EDK_KL_btMaterialProperties] LIB[btMaterialProperties *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMaterialProperties.=(
    btMaterialProperties that
    ) = "Bullet2__btMaterialProperties__MU__simple_ass_op__5752cc9739c311b6dc6809f05d7e8999";


/// \dfgPresetOmit
/// \internal
btMaterialProperties.appendDesc(io String string) {
  string += "btMaterialProperties:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btTriangleIndexVertexMaterialArray(
    btTriangleIndexVertexMaterialArray that
    ) = "Bullet2__btTriangleIndexVertexMaterialArray__MU__copy_ctor__0bf48c149015d7eff286a99bfa72847b";

/// \dfgPresetOmit
/// \internal
btTriangleIndexVertexMaterialArray.__ctor(
    ) = "Bullet2__btTriangleIndexVertexMaterialArray__MU__ctor__01ac5be711ddfb177164630bd61a4823";

/// \dfgPresetOmit
btTriangleIndexVertexMaterialArray(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btTriangleIndexVertexMaterialArray.__ctor(
    SInt32 numTriangles,
    CxxSInt32Ptr triangleIndexBase,
    SInt32 triangleIndexStride,
    SInt32 numVertices,
    CxxFloat32Ptr vertexBase,
    SInt32 vertexStride,
    SInt32 numMaterials,
    CxxUInt8Ptr materialBase,
    SInt32 materialStride,
    CxxSInt32Ptr triangleMaterialsBase,
    SInt32 materialIndexStride
    ) = "Bullet2__btTriangleIndexVertexMaterialArray__MU__ctor__1bde9cc085c1909f536e7cccf02d56ea";

/// \dfgPresetOmit
btTriangleIndexVertexMaterialArray(
    SInt32 numTriangles,
    CxxSInt32Ptr triangleIndexBase,
    SInt32 triangleIndexStride,
    SInt32 numVertices,
    CxxFloat32Ptr vertexBase,
    SInt32 vertexStride,
    SInt32 numMaterials,
    CxxUInt8Ptr materialBase,
    SInt32 materialStride,
    CxxSInt32Ptr triangleMaterialsBase,
    SInt32 materialIndexStride
    ) {
    this.__ctor(
        numTriangles,
        triangleIndexBase,
        triangleIndexStride,
        numVertices,
        vertexBase,
        vertexStride,
        numMaterials,
        materialBase,
        materialStride,
        triangleMaterialsBase,
        materialIndexStride
        );
}

btTriangleIndexVertexMaterialArray(
    in
    SInt32
    numTriangles
    
    ,
    io
    SInt32
    triangleIndexBase
    
    ,
    in
    SInt32
    triangleIndexStride
    
    ,
    in
    SInt32
    numVertices
    
    ,
    io
    Float32
    vertexBase
    
    ,
    in
    SInt32
    vertexStride
    
    ,
    in
    SInt32
    numMaterials
    
    ,
    io
    UInt8
    materialBase
    
    ,
    in
    SInt32
    materialStride
    
    ,
    io
    SInt32
    triangleMaterialsBase
    
    ,
    in
    SInt32
    materialIndexStride
    
    
    ) {
    
    
    CxxSInt32Ptr triangleIndexBase__cxx = Make_CxxSInt32Ptr(triangleIndexBase);
    
    
    
    CxxFloat32Ptr vertexBase__cxx = Make_CxxFloat32Ptr(vertexBase);
    
    
    
    CxxUInt8Ptr materialBase__cxx = Make_CxxUInt8Ptr(materialBase);
    
    
    CxxSInt32Ptr triangleMaterialsBase__cxx = Make_CxxSInt32Ptr(triangleMaterialsBase);
    
    this.__ctor(
        numTriangles,
        triangleIndexBase__cxx,
        triangleIndexStride,
        numVertices,
        vertexBase__cxx,
        vertexStride,
        numMaterials,
        materialBase__cxx,
        materialStride,
        triangleMaterialsBase__cxx,
        materialIndexStride
        );
    
    
    
    
    
    
    
    
    
    
    
}

btTriangleIndexVertexMaterialArray.cxx_delete() = "Bullet2__btTriangleIndexVertexMaterialArray__MU__delete__aa2e256fd956bd2e5fd4bd5903f6ccac";

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexMaterialArray.cxx_addMaterialProperties!(
    btMaterialProperties mat
    )
 = "Bullet2__btTriangleIndexVertexMaterialArray__MU__meth_addMaterialProperties__6a4ac7bee7634d7fe48881b749eaf198";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexMaterialArray.cxx_addMaterialProperties!(
    btMaterialProperties mat,
    PHY_ScalarType triangleType
    )
 = "Bullet2__btTriangleIndexVertexMaterialArray__MU__meth_addMaterialProperties__e359bd3b55730d3d5ed8c9deb2b0faba";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexMaterialArray.cxx_getLockedMaterialBase!(
    CxxUInt8PtrPtr materialBase,
    CxxSInt32Ref numMaterials,
    CxxPHY_ScalarTypeRef materialType,
    CxxSInt32Ref materialStride,
    CxxUInt8PtrPtr triangleMaterialBase,
    CxxSInt32Ref numTriangles,
    CxxSInt32Ref triangleMaterialStride,
    CxxPHY_ScalarTypeRef triangleType
    )
 = "Bullet2__btTriangleIndexVertexMaterialArray__MU__meth_getLockedMaterialBase__e0577417f068669410a3e75c3390f44e";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexMaterialArray.cxx_getLockedMaterialBase!(
    CxxUInt8PtrPtr materialBase,
    CxxSInt32Ref numMaterials,
    CxxPHY_ScalarTypeRef materialType,
    CxxSInt32Ref materialStride,
    CxxUInt8PtrPtr triangleMaterialBase,
    CxxSInt32Ref numTriangles,
    CxxSInt32Ref triangleMaterialStride,
    CxxPHY_ScalarTypeRef triangleType,
    SInt32 subpart
    )
 = "Bullet2__btTriangleIndexVertexMaterialArray__MU__meth_getLockedMaterialBase__b501d5857dcb2fd6746a7d0fafd95c4f";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexMaterialArray.cxx_getLockedReadOnlyMaterialBase!(
    CxxUInt8ConstPtrPtr materialBase,
    CxxSInt32Ref numMaterials,
    CxxPHY_ScalarTypeRef materialType,
    CxxSInt32Ref materialStride,
    CxxUInt8ConstPtrPtr triangleMaterialBase,
    CxxSInt32Ref numTriangles,
    CxxSInt32Ref triangleMaterialStride,
    CxxPHY_ScalarTypeRef triangleType
    )
 = "Bullet2__btTriangleIndexVertexMaterialArray__MU__meth_getLockedReadOnlyMaterialBase__bd73b6ae81cacfc58cae97d0d2de86a8";

/// \dfgPresetOmit
/// \internal

btTriangleIndexVertexMaterialArray.cxx_getLockedReadOnlyMaterialBase!(
    CxxUInt8ConstPtrPtr materialBase,
    CxxSInt32Ref numMaterials,
    CxxPHY_ScalarTypeRef materialType,
    CxxSInt32Ref materialStride,
    CxxUInt8ConstPtrPtr triangleMaterialBase,
    CxxSInt32Ref numTriangles,
    CxxSInt32Ref triangleMaterialStride,
    CxxPHY_ScalarTypeRef triangleType,
    SInt32 subpart
    )
 = "Bullet2__btTriangleIndexVertexMaterialArray__MU__meth_getLockedReadOnlyMaterialBase__9bd8fec12578cb9ff3fe4897172c45cf";


btTriangleIndexVertexMaterialArray.addMaterialProperties!(
    in
    btMaterialProperties
    mat
    
    
    )
{   
    
    
    this.cxx_addMaterialProperties(
        mat
        );
    
    
    
}


btTriangleIndexVertexMaterialArray.getLockedReadOnlyMaterialBase!(
    io
    UInt8
    materialBase
    
    ,
    io
    SInt32
    numMaterials
    
    ,
    io
    PHY_ScalarType
    materialType
    
    ,
    io
    SInt32
    materialStride
    
    ,
    io
    UInt8
    triangleMaterialBase
    
    ,
    io
    SInt32
    numTriangles
    
    ,
    io
    SInt32
    triangleMaterialStride
    
    ,
    io
    PHY_ScalarType
    triangleType
    
    
    )
{   
    
    CxxUInt8ConstPtr materialBase__cxx = Make_CxxUInt8ConstPtr(materialBase);
    CxxUInt8ConstPtrPtr materialBase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(materialBase__cxx);
    
    CxxSInt32Ref numMaterials__cxx = Make_CxxSInt32Ref(numMaterials);
    
    CxxPHY_ScalarTypeRef materialType__cxx = Make_CxxPHY_ScalarTypeRef(materialType);
    
    CxxSInt32Ref materialStride__cxx = Make_CxxSInt32Ref(materialStride);
    
    CxxUInt8ConstPtr triangleMaterialBase__cxx = Make_CxxUInt8ConstPtr(triangleMaterialBase);
    CxxUInt8ConstPtrPtr triangleMaterialBase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(triangleMaterialBase__cxx);
    
    CxxSInt32Ref numTriangles__cxx = Make_CxxSInt32Ref(numTriangles);
    
    CxxSInt32Ref triangleMaterialStride__cxx = Make_CxxSInt32Ref(triangleMaterialStride);
    
    CxxPHY_ScalarTypeRef triangleType__cxx = Make_CxxPHY_ScalarTypeRef(triangleType);
    
    this.cxx_getLockedReadOnlyMaterialBase(
        materialBase__cxx__cxx,
        numMaterials__cxx,
        materialType__cxx,
        materialStride__cxx,
        triangleMaterialBase__cxx__cxx,
        numTriangles__cxx,
        triangleMaterialStride__cxx,
        triangleType__cxx
        );
    
    
    
    
    
    
    
    
    
    
}


btTriangleIndexVertexMaterialArray.getLockedMaterialBase!(
    io
    UInt8
    materialBase
    
    ,
    io
    SInt32
    numMaterials
    
    ,
    io
    PHY_ScalarType
    materialType
    
    ,
    io
    SInt32
    materialStride
    
    ,
    io
    UInt8
    triangleMaterialBase
    
    ,
    io
    SInt32
    numTriangles
    
    ,
    io
    SInt32
    triangleMaterialStride
    
    ,
    io
    PHY_ScalarType
    triangleType
    
    
    )
{   
    
    CxxUInt8Ptr materialBase__cxx = Make_CxxUInt8Ptr(materialBase);
    CxxUInt8PtrPtr materialBase__cxx__cxx = Make_CxxUInt8PtrPtr(materialBase__cxx);
    
    CxxSInt32Ref numMaterials__cxx = Make_CxxSInt32Ref(numMaterials);
    
    CxxPHY_ScalarTypeRef materialType__cxx = Make_CxxPHY_ScalarTypeRef(materialType);
    
    CxxSInt32Ref materialStride__cxx = Make_CxxSInt32Ref(materialStride);
    
    CxxUInt8Ptr triangleMaterialBase__cxx = Make_CxxUInt8Ptr(triangleMaterialBase);
    CxxUInt8PtrPtr triangleMaterialBase__cxx__cxx = Make_CxxUInt8PtrPtr(triangleMaterialBase__cxx);
    
    CxxSInt32Ref numTriangles__cxx = Make_CxxSInt32Ref(numTriangles);
    
    CxxSInt32Ref triangleMaterialStride__cxx = Make_CxxSInt32Ref(triangleMaterialStride);
    
    CxxPHY_ScalarTypeRef triangleType__cxx = Make_CxxPHY_ScalarTypeRef(triangleType);
    
    this.cxx_getLockedMaterialBase(
        materialBase__cxx__cxx,
        numMaterials__cxx,
        materialType__cxx,
        materialStride__cxx,
        triangleMaterialBase__cxx__cxx,
        numTriangles__cxx,
        triangleMaterialStride__cxx,
        triangleType__cxx
        );
    
    
    
    
    
    
    
    
    
    
}


btTriangleIndexVertexMaterialArray.getLockedReadOnlyMaterialBase!(
    io
    UInt8
    materialBase
    
    ,
    io
    SInt32
    numMaterials
    
    ,
    io
    PHY_ScalarType
    materialType
    
    ,
    io
    SInt32
    materialStride
    
    ,
    io
    UInt8
    triangleMaterialBase
    
    ,
    io
    SInt32
    numTriangles
    
    ,
    io
    SInt32
    triangleMaterialStride
    
    ,
    io
    PHY_ScalarType
    triangleType
    
    ,
    in
    SInt32
    subpart
    
    
    )
{   
    
    CxxUInt8ConstPtr materialBase__cxx = Make_CxxUInt8ConstPtr(materialBase);
    CxxUInt8ConstPtrPtr materialBase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(materialBase__cxx);
    
    CxxSInt32Ref numMaterials__cxx = Make_CxxSInt32Ref(numMaterials);
    
    CxxPHY_ScalarTypeRef materialType__cxx = Make_CxxPHY_ScalarTypeRef(materialType);
    
    CxxSInt32Ref materialStride__cxx = Make_CxxSInt32Ref(materialStride);
    
    CxxUInt8ConstPtr triangleMaterialBase__cxx = Make_CxxUInt8ConstPtr(triangleMaterialBase);
    CxxUInt8ConstPtrPtr triangleMaterialBase__cxx__cxx = Make_CxxUInt8ConstPtrPtr(triangleMaterialBase__cxx);
    
    CxxSInt32Ref numTriangles__cxx = Make_CxxSInt32Ref(numTriangles);
    
    CxxSInt32Ref triangleMaterialStride__cxx = Make_CxxSInt32Ref(triangleMaterialStride);
    
    CxxPHY_ScalarTypeRef triangleType__cxx = Make_CxxPHY_ScalarTypeRef(triangleType);
    
    
    this.cxx_getLockedReadOnlyMaterialBase(
        materialBase__cxx__cxx,
        numMaterials__cxx,
        materialType__cxx,
        materialStride__cxx,
        triangleMaterialBase__cxx__cxx,
        numTriangles__cxx,
        triangleMaterialStride__cxx,
        triangleType__cxx,
        subpart
        );
    
    
    
    
    
    
    
    
    
    
    
}


btTriangleIndexVertexMaterialArray.getLockedMaterialBase!(
    io
    UInt8
    materialBase
    
    ,
    io
    SInt32
    numMaterials
    
    ,
    io
    PHY_ScalarType
    materialType
    
    ,
    io
    SInt32
    materialStride
    
    ,
    io
    UInt8
    triangleMaterialBase
    
    ,
    io
    SInt32
    numTriangles
    
    ,
    io
    SInt32
    triangleMaterialStride
    
    ,
    io
    PHY_ScalarType
    triangleType
    
    ,
    in
    SInt32
    subpart
    
    
    )
{   
    
    CxxUInt8Ptr materialBase__cxx = Make_CxxUInt8Ptr(materialBase);
    CxxUInt8PtrPtr materialBase__cxx__cxx = Make_CxxUInt8PtrPtr(materialBase__cxx);
    
    CxxSInt32Ref numMaterials__cxx = Make_CxxSInt32Ref(numMaterials);
    
    CxxPHY_ScalarTypeRef materialType__cxx = Make_CxxPHY_ScalarTypeRef(materialType);
    
    CxxSInt32Ref materialStride__cxx = Make_CxxSInt32Ref(materialStride);
    
    CxxUInt8Ptr triangleMaterialBase__cxx = Make_CxxUInt8Ptr(triangleMaterialBase);
    CxxUInt8PtrPtr triangleMaterialBase__cxx__cxx = Make_CxxUInt8PtrPtr(triangleMaterialBase__cxx);
    
    CxxSInt32Ref numTriangles__cxx = Make_CxxSInt32Ref(numTriangles);
    
    CxxSInt32Ref triangleMaterialStride__cxx = Make_CxxSInt32Ref(triangleMaterialStride);
    
    CxxPHY_ScalarTypeRef triangleType__cxx = Make_CxxPHY_ScalarTypeRef(triangleType);
    
    
    this.cxx_getLockedMaterialBase(
        materialBase__cxx__cxx,
        numMaterials__cxx,
        materialType__cxx,
        materialStride__cxx,
        triangleMaterialBase__cxx__cxx,
        numTriangles__cxx,
        triangleMaterialStride__cxx,
        triangleType__cxx,
        subpart
        );
    
    
    
    
    
    
    
    
    
    
    
}


btTriangleIndexVertexMaterialArray.addMaterialProperties!(
    in
    btMaterialProperties
    mat
    
    ,
    in
    PHY_ScalarType
    triangleType
    
    
    )
{   
    
    
    
    this.cxx_addMaterialProperties(
        mat,
        triangleType
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleIndexVertexMaterialArray] EDK[Fabric_EDK_KL_btTriangleIndexVertexMaterialArray] LIB[btTriangleIndexVertexMaterialArray *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTriangleIndexVertexMaterialArray.=(
    btTriangleIndexVertexMaterialArray that
    ) = "Bullet2__btTriangleIndexVertexMaterialArray__MU__simple_ass_op__f876952b0c03eec4ba9f61e3fd889196";


/// \dfgPresetOmit
/// \internal
btTriangleIndexVertexMaterialArray.appendDesc(io String string) {
  string += "btTriangleIndexVertexMaterialArray:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTriangleMeshShape() = "Bullet2__btTriangleMeshShape__MU__empty_ctor__6577653cba0cf1bf4ef9d5c27b3e5e5e";

/// \dfgPresetOmit
btTriangleMeshShape(
    btTriangleMeshShape that
    ) = "Bullet2__btTriangleMeshShape__MU__copy_ctor__0a6018141013554590afc857ebb32d54";

btTriangleMeshShape.cxx_delete() = "Bullet2__btTriangleMeshShape__MU__delete__5d4628d4409acfb340d84716d5e424db";

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btTriangleMeshShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_localGetSupportingVertex__49ec63468ff1b6ff2f0aa1e643712d2d";

/// \dfgPresetOmit
/// \internal
btVector3
btTriangleMeshShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_localGetSupportingVertexWithoutMargin__615b89c69beb92db04ffa18f06040cf2";

/// \dfgPresetOmit
/// \internal

btTriangleMeshShape.cxx_recalcLocalAabb!(
    )
 = "Bullet2__btTriangleMeshShape__MU__meth_recalcLocalAabb__584eea6d1a7b13000ce0cc47f7819747";

/// \dfgPresetOmit
/// \internal

btTriangleMeshShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_getAabb__e0327bfc652ecce66c23e2fe98adf635";

/// \dfgPresetOmit
/// \internal

btTriangleMeshShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_calculateLocalInertia__cb280bd286e55a3618393751b0a517b0";

/// \dfgPresetOmit
/// \internal

btTriangleMeshShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btTriangleMeshShape__MU__meth_setLocalScaling__78fe6c9b83e367c99d34bdc3b339ebc5";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btTriangleMeshShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_getLocalScaling__44fdd7b2c18521848ecfe4d6b952586b";

/// \dfgPresetOmit
/// \internal
btStridingMeshInterface
btTriangleMeshShape.cxx_getMeshInterface!(
    )
 = "Bullet2__btTriangleMeshShape__MU__meth_getMeshInterface__60a229847bd06476a3c9820d766f1d28";

/// \dfgPresetOmit
/// \internal
btStridingMeshInterface
btTriangleMeshShape.cxx_getMeshInterface?(
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_getMeshInterface__fc6ede06fdb6179dba1eea09e9965d43";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btTriangleMeshShape.cxx_getLocalAabbMin?(
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_getLocalAabbMin__aeded886b3e1f5c0a9a8cc3175ece9e1";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btTriangleMeshShape.cxx_getLocalAabbMax?(
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_getLocalAabbMax__af4897ad8f603a449d7ee35084887c17";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btTriangleMeshShape.cxx_getName?(
    )
 = "Bullet2__btTriangleMeshShape__CO__meth_getName__6948e51d1854ca903fcb8b16b2aa876b";


btTriangleMeshShape.recalcLocalAabb!(
    )
{   
    
    this.cxx_recalcLocalAabb(
        );
    
    
}

String
btTriangleMeshShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

btVector3
btTriangleMeshShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}


btTriangleMeshShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btTriangleMeshShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

btVector3
btTriangleMeshShape.getLocalAabbMin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalAabbMin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btTriangleMeshShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btTriangleMeshShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}

btVector3
btTriangleMeshShape.getLocalAabbMax?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalAabbMax(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btTriangleMeshShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

btStridingMeshInterface
btTriangleMeshShape.getMeshInterface!(
    )
{   
    btStridingMeshInterface __res = 
    this.cxx_getMeshInterface(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShape] EDK[Fabric_EDK_KL_btTriangleMeshShape] LIB[btTriangleMeshShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTriangleMeshShape.=(
    btTriangleMeshShape that
    ) = "Bullet2__btTriangleMeshShape__MU__simple_ass_op__d408a911c58e108923573048770496ea";


/// \dfgPresetOmit
/// \internal
btTriangleMeshShape.appendDesc(io String string) {
  string += "btTriangleMeshShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBvhTriangleMeshShape() = "Bullet2__btBvhTriangleMeshShape__MU__empty_ctor__c481e5bcdfc545081d3ec3cb275f22d9";

/// \dfgPresetOmit
btBvhTriangleMeshShape(
    btBvhTriangleMeshShape that
    ) = "Bullet2__btBvhTriangleMeshShape__MU__copy_ctor__b96dd18bd18f5be1488fd6c06a194849";

/// \dfgPresetOmit
/// \internal
btBvhTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression
    ) = "Bullet2__btBvhTriangleMeshShape__MU__ctor__cfcc8ede4cb2a183c0d1731c1852be92";

/// \dfgPresetOmit
btBvhTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression
    ) {
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression
        );
}

/// \dfgPresetOmit
/// \internal
btBvhTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    Boolean buildBvh
    ) = "Bullet2__btBvhTriangleMeshShape__MU__ctor__94fbab434f4398e13689f353ad5ca7f4";

/// \dfgPresetOmit
btBvhTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    Boolean buildBvh
    ) {
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        buildBvh
        );
}

/// \dfgPresetOmit
/// \internal
btBvhTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax
    ) = "Bullet2__btBvhTriangleMeshShape__MU__ctor__36cbaead11b3ff90f208fe1342b42440";

///optionally pass in a larger bvh aabb, used for quantization. This allows for deformations within this aabb
/// \dfgPresetOmit
btBvhTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax
    ) {
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        bvhAabbMin,
        bvhAabbMax
        );
}

/// \dfgPresetOmit
/// \internal
btBvhTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax,
    Boolean buildBvh
    ) = "Bullet2__btBvhTriangleMeshShape__MU__ctor__81606ad68f18e785c49508af92768484";

/// \dfgPresetOmit
btBvhTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax,
    Boolean buildBvh
    ) {
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        bvhAabbMin,
        bvhAabbMax,
        buildBvh
        );
}

btBvhTriangleMeshShape(
    in
    btStridingMeshInterface
    meshInterface
    
    ,
    in
    Boolean
    useQuantizedAabbCompression
    
    ,
    in
    btVector3
    bvhAabbMin
    
    ,
    in
    btVector3
    bvhAabbMax
    
    ,
    in
    Boolean
    buildBvh
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef bvhAabbMin__cxx = Make_CxxbtVector3ConstRef(bvhAabbMin);
    
    CxxbtVector3ConstRef bvhAabbMax__cxx = Make_CxxbtVector3ConstRef(bvhAabbMax);
    
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        bvhAabbMin__cxx,
        bvhAabbMax__cxx,
        buildBvh
        );
    
    
    
    
    
}

///optionally pass in a larger bvh aabb, used for quantization. This allows for deformations within this aabb
btBvhTriangleMeshShape(
    in
    btStridingMeshInterface
    meshInterface
    
    ,
    in
    Boolean
    useQuantizedAabbCompression
    
    ,
    in
    btVector3
    bvhAabbMin
    
    ,
    in
    btVector3
    bvhAabbMax
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef bvhAabbMin__cxx = Make_CxxbtVector3ConstRef(bvhAabbMin);
    
    CxxbtVector3ConstRef bvhAabbMax__cxx = Make_CxxbtVector3ConstRef(bvhAabbMax);
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        bvhAabbMin__cxx,
        bvhAabbMax__cxx
        );
    
    
    
    
}

btBvhTriangleMeshShape.cxx_delete() = "Bullet2__btBvhTriangleMeshShape__MU__delete__a9c2b3e17766e90ee45c0e66f4bff6bf";

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btBvhTriangleMeshShape.cxx_getOwnsBvh?(
    )
 = "Bullet2__btBvhTriangleMeshShape__CO__meth_getOwnsBvh__5f9b3a7dd7e815629e40b3d17aa89093";

/// \dfgPresetOmit
/// \internal

btBvhTriangleMeshShape.cxx_refitTree!(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btBvhTriangleMeshShape__MU__meth_refitTree__cbbfbc31c14e62928bc04291e650460c";

///for a fast incremental refit of parts of the tree. Note: the entire AABB of the tree will become more conservative, it never shrinks
/// \dfgPresetOmit
/// \internal

btBvhTriangleMeshShape.cxx_partialRefitTree!(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btBvhTriangleMeshShape__MU__meth_partialRefitTree__0e472bcbed820d436fa78d464da73cfe";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btBvhTriangleMeshShape.cxx_getName?(
    )
 = "Bullet2__btBvhTriangleMeshShape__CO__meth_getName__2b8bb257f36da06b163462280fd7d14a";

/// \dfgPresetOmit
/// \internal

btBvhTriangleMeshShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btBvhTriangleMeshShape__MU__meth_setLocalScaling__195874e570d376ffd39945255b49c882";

/// \dfgPresetOmit
/// \internal
btOptimizedBvh
btBvhTriangleMeshShape.cxx_getOptimizedBvh!(
    )
 = "Bullet2__btBvhTriangleMeshShape__MU__meth_getOptimizedBvh__5bc5e72cd17dba707f708042fc5581e1";

/// \dfgPresetOmit
/// \internal

btBvhTriangleMeshShape.cxx_setOptimizedBvh!(
    btOptimizedBvh bvh
    )
 = "Bullet2__btBvhTriangleMeshShape__MU__meth_setOptimizedBvh__66666a43b8bf7de7f1898411ead491a1";

/// \dfgPresetOmit
/// \internal

btBvhTriangleMeshShape.cxx_setOptimizedBvh!(
    btOptimizedBvh bvh,
    CxxbtVector3ConstRef localScaling
    )
 = "Bullet2__btBvhTriangleMeshShape__MU__meth_setOptimizedBvh__89136ddc153fb401d6558e8e7f19a539";

/// \dfgPresetOmit
/// \internal

btBvhTriangleMeshShape.cxx_buildOptimizedBvh!(
    )
 = "Bullet2__btBvhTriangleMeshShape__MU__meth_buildOptimizedBvh__f01769ab76950ff86b0354a3d2cd5299";

/// \dfgPresetOmit
/// \internal
Boolean
btBvhTriangleMeshShape.cxx_usesQuantizedAabbCompression?(
    )
 = "Bullet2__btBvhTriangleMeshShape__CO__meth_usesQuantizedAabbCompression__68fc823d63f793de81f94b0d1944d54a";

/// \dfgPresetOmit
/// \internal
SInt32
btBvhTriangleMeshShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btBvhTriangleMeshShape__CO__meth_calculateSerializeBufferSize__b6df50796ed229238ddaa73172e55f59";

SInt32
btBvhTriangleMeshShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btBvhTriangleMeshShape.setOptimizedBvh!(
    in
    btOptimizedBvh
    bvh
    
    
    )
{   
    
    
    this.cxx_setOptimizedBvh(
        bvh
        );
    
    
    
}

String
btBvhTriangleMeshShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btBvhTriangleMeshShape.buildOptimizedBvh!(
    )
{   
    
    this.cxx_buildOptimizedBvh(
        );
    
    
}

Boolean
btBvhTriangleMeshShape.getOwnsBvh?(
    )
{   
    Boolean __res = 
    this.cxx_getOwnsBvh(
        );
    
    return __res;
}


btBvhTriangleMeshShape.refitTree!(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_refitTree(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}

Boolean
btBvhTriangleMeshShape.usesQuantizedAabbCompression?(
    )
{   
    Boolean __res = 
    this.cxx_usesQuantizedAabbCompression(
        );
    
    return __res;
}

///for a fast incremental refit of parts of the tree. Note: the entire AABB of the tree will become more conservative, it never shrinks

btBvhTriangleMeshShape.partialRefitTree!(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_partialRefitTree(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}


btBvhTriangleMeshShape.setOptimizedBvh!(
    in
    btOptimizedBvh
    bvh
    
    ,
    in
    btVector3
    localScaling
    
    
    )
{   
    
    
    CxxbtVector3ConstRef localScaling__cxx = Make_CxxbtVector3ConstRef(localScaling);
    
    this.cxx_setOptimizedBvh(
        bvh,
        localScaling__cxx
        );
    
    
    
    
}

btOptimizedBvh
btBvhTriangleMeshShape.getOptimizedBvh!(
    )
{   
    btOptimizedBvh __res = 
    this.cxx_getOptimizedBvh(
        );
    
    return __res;
}


btBvhTriangleMeshShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btBvhTriangleMeshShape] LIB[btBvhTriangleMeshShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBvhTriangleMeshShape.=(
    btBvhTriangleMeshShape that
    ) = "Bullet2__btBvhTriangleMeshShape__MU__simple_ass_op__6df4124f4541f8717fbc228494806b91";


/// \dfgPresetOmit
/// \internal
btBvhTriangleMeshShape.appendDesc(io String string) {
  string += "btBvhTriangleMeshShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleMeshShapeData] EDK[Fabric_EDK_KL_btTriangleMeshShapeData] LIB[btTriangleMeshShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShapeData] EDK[Fabric_EDK_KL_btTriangleMeshShapeData] LIB[btTriangleMeshShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShapeData] EDK[Fabric_EDK_KL_btTriangleMeshShapeData] LIB[btTriangleMeshShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTriangleMeshShapeData() = "Bullet2__btTriangleMeshShapeData__MU__empty_ctor__84a622032b162fdda66423dab1b318ab";

/// \dfgPresetOmit
btTriangleMeshShapeData(
    btTriangleMeshShapeData that
    ) = "Bullet2__btTriangleMeshShapeData__MU__copy_ctor__d635886a28c7b40ef92ad0a7d32e27c4";

btTriangleMeshShapeData.cxx_delete() = "Bullet2__btTriangleMeshShapeData__MU__delete__941f6040b718fe398cb8be6e126e66e7";

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShapeData] EDK[Fabric_EDK_KL_btTriangleMeshShapeData] LIB[btTriangleMeshShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShapeData] EDK[Fabric_EDK_KL_btTriangleMeshShapeData] LIB[btTriangleMeshShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleMeshShapeData] EDK[Fabric_EDK_KL_btTriangleMeshShapeData] LIB[btTriangleMeshShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTriangleMeshShapeData.=(
    btTriangleMeshShapeData that
    ) = "Bullet2__btTriangleMeshShapeData__MU__simple_ass_op__72e029ff35296e3cb861052fa9a418a1";


/// \dfgPresetOmit
/// \internal
btTriangleMeshShapeData.appendDesc(io String string) {
  string += "btTriangleMeshShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btTriangleShape(
    btTriangleShape that
    ) = "Bullet2__btTriangleShape__MU__copy_ctor__3659596a0be83e9a6620a69684142c4d";

/// \dfgPresetOmit
/// \internal
btTriangleShape.__ctor(
    ) = "Bullet2__btTriangleShape__MU__ctor__7359540c8940dd8a9b9257c24ef11e60";

/// \dfgPresetOmit
btTriangleShape(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btTriangleShape.__ctor(
    CxxbtVector3ConstRef p0,
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2
    ) = "Bullet2__btTriangleShape__MU__ctor__9caef0c6022c6ac1525730b04e78b6ea";

/// \dfgPresetOmit
btTriangleShape(
    CxxbtVector3ConstRef p0,
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2
    ) {
    this.__ctor(
        p0,
        p1,
        p2
        );
}

btTriangleShape(
    in
    btVector3
    p0
    
    ,
    in
    btVector3
    p1
    
    ,
    in
    btVector3
    p2
    
    
    ) {
    
    CxxbtVector3ConstRef p0__cxx = Make_CxxbtVector3ConstRef(p0);
    
    CxxbtVector3ConstRef p1__cxx = Make_CxxbtVector3ConstRef(p1);
    
    CxxbtVector3ConstRef p2__cxx = Make_CxxbtVector3ConstRef(p2);
    this.__ctor(
        p0__cxx,
        p1__cxx,
        p2__cxx
        );
    
    
    
}

btTriangleShape.cxx_delete() = "Bullet2__btTriangleShape__MU__delete__e5434b97933e0d5a43130b8fe1c54c0e";

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btTriangleShape.cxx_getNumVertices?(
    )
 = "Bullet2__btTriangleShape__CO__meth_getNumVertices__4ff57ee3c37eeac2cb3e5914cbaab438";

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref
btTriangleShape.cxx_getVertexPtr!(
    SInt32 index
    )
 = "Bullet2__btTriangleShape__MU__meth_getVertexPtr__4162a43e89596fa8e6b2d6a8fd68dfa9";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btTriangleShape.cxx_getVertexPtr?(
    SInt32 index
    )
 = "Bullet2__btTriangleShape__CO__meth_getVertexPtr__b9f5d158631670512035fabbff91ea84";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_getVertex?(
    SInt32 index,
    CxxbtVector3Ref vert
    )
 = "Bullet2__btTriangleShape__CO__meth_getVertex__eabb2889410a97e90be075b143e63cd0";

/// \dfgPresetOmit
/// \internal
SInt32
btTriangleShape.cxx_getNumEdges?(
    )
 = "Bullet2__btTriangleShape__CO__meth_getNumEdges__b06f181b008f9d853be11aca41d993be";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_getEdge?(
    SInt32 i,
    CxxbtVector3Ref pa,
    CxxbtVector3Ref pb
    )
 = "Bullet2__btTriangleShape__CO__meth_getEdge__143bb13e297c12ce2eee88b2a6341274";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btTriangleShape__CO__meth_getAabb__48b7f3e41daddbda03a2020c6eafa3bb";

/// \dfgPresetOmit
/// \internal
btVector3
btTriangleShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef dir
    )
 = "Bullet2__btTriangleShape__CO__meth_localGetSupportingVertexWithoutMargin__62621d5752fd87c6771bbd631433422a";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btTriangleShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__18b97581497ce8fdeb0d32a7dec9b52a";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_getPlane?(
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport,
    SInt32 i
    )
 = "Bullet2__btTriangleShape__CO__meth_getPlane__9b4d3f8cb94c859f0c2dcbad50717279";

/// \dfgPresetOmit
/// \internal
SInt32
btTriangleShape.cxx_getNumPlanes?(
    )
 = "Bullet2__btTriangleShape__CO__meth_getNumPlanes__7fc97ba8359f9eb1aed2d8f576539afa";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_calcNormal?(
    CxxbtVector3Ref normal
    )
 = "Bullet2__btTriangleShape__CO__meth_calcNormal__e9de02d92ef6f9ff0ff938fde3d78174";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_getPlaneEquation?(
    SInt32 i,
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport
    )
 = "Bullet2__btTriangleShape__CO__meth_getPlaneEquation__0803edb812ff59fac5754fec1cdfc368";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btTriangleShape__CO__meth_calculateLocalInertia__32fe9c91a61a4166a8d472d7b556597b";

/// \dfgPresetOmit
/// \internal
Boolean
btTriangleShape.cxx_isInside?(
    CxxbtVector3ConstRef pt,
    Float32 tolerance
    )
 = "Bullet2__btTriangleShape__CO__meth_isInside__29967ceb039de37d7ba66d4ecac58800";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btTriangleShape.cxx_getName?(
    )
 = "Bullet2__btTriangleShape__CO__meth_getName__86c051e717da0eacba4558299c0962f8";

/// \dfgPresetOmit
/// \internal
SInt32
btTriangleShape.cxx_getNumPreferredPenetrationDirections?(
    )
 = "Bullet2__btTriangleShape__CO__meth_getNumPreferredPenetrationDirections__627b3f1fa83e026d1ad0e1878055bedc";

/// \dfgPresetOmit
/// \internal

btTriangleShape.cxx_getPreferredPenetrationDirection?(
    SInt32 index,
    CxxbtVector3Ref penetrationVector
    )
 = "Bullet2__btTriangleShape__CO__meth_getPreferredPenetrationDirection__25ef6e07e44b6daa17d3e9f5fee4d4f3";


btTriangleShape.calcNormal?(
    io
    btVector3
    normal
    
    
    )
{   
    
    CxxbtVector3Ref normal__cxx = Make_CxxbtVector3Ref(normal);
    
    this.cxx_calcNormal(
        normal__cxx
        );
    
    
    
}


btTriangleShape.getPlaneEquation?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    
    )
{   
    
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    this.cxx_getPlaneEquation(
        i,
        planeNormal__cxx,
        planeSupport__cxx
        );
    
    
    
    
    
}

SInt32
btTriangleShape.getNumPlanes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPlanes(
        );
    
    return __res;
}

String
btTriangleShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btTriangleShape.getPlane?(
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    
    this.cxx_getPlane(
        planeNormal__cxx,
        planeSupport__cxx,
        i
        );
    
    
    
    
    
}


btTriangleShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}


btTriangleShape.getPreferredPenetrationDirection?(
    in
    SInt32
    index
    
    ,
    io
    btVector3
    penetrationVector
    
    
    )
{   
    
    
    CxxbtVector3Ref penetrationVector__cxx = Make_CxxbtVector3Ref(penetrationVector);
    
    this.cxx_getPreferredPenetrationDirection(
        index,
        penetrationVector__cxx
        );
    
    
    
    
}

btVector3
btTriangleShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    dir
    
    
    )
{   
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        dir__cxx
        );
    
    
    return __res;
}

Boolean
btTriangleShape.isInside?(
    in
    btVector3
    pt
    
    ,
    in
    Float32
    tolerance
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    Boolean __res = 
    this.cxx_isInside(
        pt__cxx,
        tolerance
        );
    
    
    
    return __res;
}


btTriangleShape.getVertex?(
    in
    SInt32
    index
    
    ,
    io
    btVector3
    vert
    
    
    )
{   
    
    
    CxxbtVector3Ref vert__cxx = Make_CxxbtVector3Ref(vert);
    
    this.cxx_getVertex(
        index,
        vert__cxx
        );
    
    
    
    
}


btTriangleShape.getEdge?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    pa
    
    ,
    io
    btVector3
    pb
    
    
    )
{   
    
    
    CxxbtVector3Ref pa__cxx = Make_CxxbtVector3Ref(pa);
    
    CxxbtVector3Ref pb__cxx = Make_CxxbtVector3Ref(pb);
    
    this.cxx_getEdge(
        i,
        pa__cxx,
        pb__cxx
        );
    
    
    
    
    
}


btTriangleShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

SInt32
btTriangleShape.getNumVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumVertices(
        );
    
    return __res;
}

SInt32
btTriangleShape.getNumPreferredPenetrationDirections?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPreferredPenetrationDirections(
        );
    
    return __res;
}

btVector3
btTriangleShape.getVertexPtr!(
    in
    SInt32
    index
    
    
    )
{   
    
    CxxbtVector3Ref __res_cxx = 
    this.cxx_getVertexPtr(
        index
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3Ref';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btTriangleShape.getNumEdges?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumEdges(
        );
    
    return __res;
}


btTriangleShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShape] EDK[Fabric_EDK_KL_btTriangleShape] LIB[btTriangleShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTriangleShape.=(
    btTriangleShape that
    ) = "Bullet2__btTriangleShape__MU__simple_ass_op__7a0947fc1334819085cd5572b6103ed9";


/// \dfgPresetOmit
/// \internal
btTriangleShape.appendDesc(io String string) {
  string += "btTriangleShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btUniformScalingShape() = "Bullet2__btUniformScalingShape__MU__empty_ctor__4f3fb2129c080449bb43df7ea93e8353";

/// \dfgPresetOmit
btUniformScalingShape(
    btUniformScalingShape that
    ) = "Bullet2__btUniformScalingShape__MU__copy_ctor__89f6091ac8d18ebda0a2fe8ec38dd1ee";

/// \dfgPresetOmit
/// \internal
btUniformScalingShape.__ctor(
    btConvexShape convexChildShape,
    Float32 uniformScalingFactor
    ) = "Bullet2__btUniformScalingShape__MU__ctor__f4235269efa3c6a674359dfa9865bac3";

/// \dfgPresetOmit
btUniformScalingShape(
    btConvexShape convexChildShape,
    Float32 uniformScalingFactor
    ) {
    this.__ctor(
        convexChildShape,
        uniformScalingFactor
        );
}

btUniformScalingShape.cxx_delete() = "Bullet2__btUniformScalingShape__MU__delete__961749b24d4d68b535020c81d318f2b8";

//////////////////////////////////////////////////////////////////////////////
// KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btUniformScalingShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btUniformScalingShape__CO__meth_localGetSupportingVertexWithoutMargin__15439ff4ddc6de5d55907e6d291119b0";

/// \dfgPresetOmit
/// \internal
btVector3
btUniformScalingShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btUniformScalingShape__CO__meth_localGetSupportingVertex__70024b9abe636db40b95f9579bb5b578";

/// \dfgPresetOmit
/// \internal

btUniformScalingShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btUniformScalingShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__3d5b4abe44468249a97624780ce83730";

/// \dfgPresetOmit
/// \internal

btUniformScalingShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btUniformScalingShape__CO__meth_calculateLocalInertia__de93da6e9605e555c140065a4a8ffd07";

/// \dfgPresetOmit
/// \internal
Float32
btUniformScalingShape.cxx_getUniformScalingFactor?(
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getUniformScalingFactor__87b21f61bc5a9cb0273bcd719e393ce8";

/// \dfgPresetOmit
/// \internal
btConvexShape
btUniformScalingShape.cxx_getChildShape!(
    )
 = "Bullet2__btUniformScalingShape__MU__meth_getChildShape__a0fb2d05bc82a0f33294cb74570623d7";

/// \dfgPresetOmit
/// \internal
btConvexShape
btUniformScalingShape.cxx_getChildShape?(
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getChildShape__37ebd278281ac53b66350e956980572e";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btUniformScalingShape.cxx_getName?(
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getName__725c9ad94af568ac72832edc5a108d2e";

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
/// \dfgPresetOmit
/// \internal

btUniformScalingShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getAabb__2f9872532bb44926980459b85dac250d";

/// \dfgPresetOmit
/// \internal

btUniformScalingShape.cxx_getAabbSlow?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getAabbSlow__66ac3a25a848d06ef83ba13970d0fc1e";

/// \dfgPresetOmit
/// \internal

btUniformScalingShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btUniformScalingShape__MU__meth_setLocalScaling__0fbe6223cbf2ae0be545bc2a5486ce62";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btUniformScalingShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getLocalScaling__94abe93a5b7045341b851ce0ea9d46e0";

/// \dfgPresetOmit
/// \internal

btUniformScalingShape.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btUniformScalingShape__MU__meth_setMargin__542350185f3cdf1c70b0953f308e54c9";

/// \dfgPresetOmit
/// \internal
Float32
btUniformScalingShape.cxx_getMargin?(
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getMargin__2bfec44e5e749dca205ba71155820d8f";

/// \dfgPresetOmit
/// \internal
SInt32
btUniformScalingShape.cxx_getNumPreferredPenetrationDirections?(
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getNumPreferredPenetrationDirections__784aeba8a8c23bd2d06ce6cedcb5c856";

/// \dfgPresetOmit
/// \internal

btUniformScalingShape.cxx_getPreferredPenetrationDirection?(
    SInt32 index,
    CxxbtVector3Ref penetrationVector
    )
 = "Bullet2__btUniformScalingShape__CO__meth_getPreferredPenetrationDirection__e8cf82fdeecaceb3d16657b279e3104e";

btVector3
btUniformScalingShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}


btUniformScalingShape.getAabbSlow?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabbSlow(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

SInt32
btUniformScalingShape.getNumPreferredPenetrationDirections?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPreferredPenetrationDirections(
        );
    
    return __res;
}

String
btUniformScalingShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btUniformScalingShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

btVector3
btUniformScalingShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}


btUniformScalingShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btUniformScalingShape.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version

btUniformScalingShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

Float32
btUniformScalingShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}


btUniformScalingShape.getPreferredPenetrationDirection?(
    in
    SInt32
    index
    
    ,
    io
    btVector3
    penetrationVector
    
    
    )
{   
    
    
    CxxbtVector3Ref penetrationVector__cxx = Make_CxxbtVector3Ref(penetrationVector);
    
    this.cxx_getPreferredPenetrationDirection(
        index,
        penetrationVector__cxx
        );
    
    
    
    
}

btConvexShape
btUniformScalingShape.getChildShape!(
    )
{   
    btConvexShape __res = 
    this.cxx_getChildShape(
        );
    
    return __res;
}

btVector3
btUniformScalingShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btUniformScalingShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

Float32
btUniformScalingShape.getUniformScalingFactor?(
    )
{   
    Float32 __res = 
    this.cxx_getUniformScalingFactor(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUniformScalingShape] EDK[Fabric_EDK_KL_btUniformScalingShape] LIB[btUniformScalingShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btUniformScalingShape.=(
    btUniformScalingShape that
    ) = "Bullet2__btUniformScalingShape__MU__simple_ass_op__6c5ffda9661b568804b96057d344b97d";


/// \dfgPresetOmit
/// \internal
btUniformScalingShape.appendDesc(io String string) {
  string += "btUniformScalingShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeChild] EDK[Fabric_EDK_KL_btCompoundShapeChild] LIB[btCompoundShapeChild *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChild] EDK[Fabric_EDK_KL_btCompoundShapeChild] LIB[btCompoundShapeChild *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChild] EDK[Fabric_EDK_KL_btCompoundShapeChild] LIB[btCompoundShapeChild *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundShapeChild() = "Bullet2__btCompoundShapeChild__MU__empty_ctor__474da5eebbf7bdd1a1b59d2b80dffc97";

/// \dfgPresetOmit
btCompoundShapeChild(
    btCompoundShapeChild that
    ) = "Bullet2__btCompoundShapeChild__MU__copy_ctor__cd08f8f22125c1d6ffdba28d6b376a4f";

btCompoundShapeChild.cxx_delete() = "Bullet2__btCompoundShapeChild__MU__delete__b67fd59d1709fee921e86a33df1ed156";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChild] EDK[Fabric_EDK_KL_btCompoundShapeChild] LIB[btCompoundShapeChild *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChild] EDK[Fabric_EDK_KL_btCompoundShapeChild] LIB[btCompoundShapeChild *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChild] EDK[Fabric_EDK_KL_btCompoundShapeChild] LIB[btCompoundShapeChild *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundShapeChild.=(
    btCompoundShapeChild that
    ) = "Bullet2__btCompoundShapeChild__MU__simple_ass_op__914b270985d969195beccf2ad69f95d2";


/// \dfgPresetOmit
/// \internal
btCompoundShapeChild.appendDesc(io String string) {
  string += "btCompoundShapeChild:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundShape() = "Bullet2__btCompoundShape__MU__empty_ctor__3db1e9a36f9e71b8930b3b15077d2eda";

/// \dfgPresetOmit
btCompoundShape(
    btCompoundShape that
    ) = "Bullet2__btCompoundShape__MU__copy_ctor__db1cf236961e529d4b9214164eb7957d";

/// \dfgPresetOmit
/// \internal
btCompoundShape.__ctor(
    ) = "Bullet2__btCompoundShape__MU__ctor__4f1959aad5feefefd9b2b71aa6143b1e";

/// \dfgPresetOmit
btCompoundShape(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btCompoundShape.__ctor(
    Boolean enableDynamicAabbTree
    ) = "Bullet2__btCompoundShape__MU__ctor__de89c9b3325519f7626f9f558224282e";

/// \dfgPresetOmit
btCompoundShape(
    Boolean enableDynamicAabbTree
    ) {
    this.__ctor(
        enableDynamicAabbTree
        );
}

/// \dfgPresetOmit
/// \internal
btCompoundShape.__ctor(
    Boolean enableDynamicAabbTree,
    SInt32 initialChildCapacity
    ) = "Bullet2__btCompoundShape__MU__ctor__227d0ad0a606588e3a26a26ba82de38b";

/// \dfgPresetOmit
btCompoundShape(
    Boolean enableDynamicAabbTree,
    SInt32 initialChildCapacity
    ) {
    this.__ctor(
        enableDynamicAabbTree,
        initialChildCapacity
        );
}

btCompoundShape.cxx_delete() = "Bullet2__btCompoundShape__MU__delete__b5430790f583c5204ba390fffeb583dc";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_addChildShape!(
    CxxbtTransformConstRef localTransform,
    btCollisionShape shape
    )
 = "Bullet2__btCompoundShape__MU__meth_addChildShape__c65541da0322abc57da283611abf9ec9";

/// Remove all children shapes that contain the specified shape
/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_removeChildShape!(
    btCollisionShape shape
    )
 = "Bullet2__btCompoundShape__MU__meth_removeChildShape__872f2a31a665efa104239ffadca9b732";

/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_removeChildShapeByIndex!(
    SInt32 childShapeindex
    )
 = "Bullet2__btCompoundShape__MU__meth_removeChildShapeByIndex__5eb88c69b80b661c52d6e099defcd9f8";

/// \dfgPresetOmit
/// \internal
SInt32
btCompoundShape.cxx_getNumChildShapes?(
    )
 = "Bullet2__btCompoundShape__CO__meth_getNumChildShapes__23e1494c147dce7f0c44d98c2cc05a70";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCompoundShape.cxx_getChildShape!(
    SInt32 index
    )
 = "Bullet2__btCompoundShape__MU__meth_getChildShape__9c4be178cc4967c2b512afa205c350c1";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCompoundShape.cxx_getChildShape?(
    SInt32 index
    )
 = "Bullet2__btCompoundShape__CO__meth_getChildShape__d0bce17aa57aa4ba6ca9e1b0889a61dd";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btCompoundShape.cxx_getChildTransform!(
    SInt32 index
    )
 = "Bullet2__btCompoundShape__MU__meth_getChildTransform__e2f94d56ea1e3186ca639eec3f75a8e8";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btCompoundShape.cxx_getChildTransform?(
    SInt32 index
    )
 = "Bullet2__btCompoundShape__CO__meth_getChildTransform__f6455530eacfbba1613cab3b64b7d8d9";

///set a new transform for a child, and update internal data structures (local aabb and dynamic tree)
/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_updateChildTransform!(
    SInt32 childIndex,
    CxxbtTransformConstRef newChildTransform
    )
 = "Bullet2__btCompoundShape__MU__meth_updateChildTransform__516c96bf80ba88e4c011dbe9812524c7";

/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_updateChildTransform!(
    SInt32 childIndex,
    CxxbtTransformConstRef newChildTransform,
    Boolean shouldRecalculateLocalAabb
    )
 = "Bullet2__btCompoundShape__MU__meth_updateChildTransform__5763dee2fd624ef2d7b059c371e84686";

/// \dfgPresetOmit
/// \internal
btCompoundShapeChild
btCompoundShape.cxx_getChildList!(
    )
 = "Bullet2__btCompoundShape__MU__meth_getChildList__53fee9ada85c9e1f87c3e0886b7d8851";

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version
/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btCompoundShape__CO__meth_getAabb__a26d111786377f98bb713ed22c0e51d4";

/** Re-calculate the local Aabb. Is called at the end of removeChildShapes. 
	Use this yourself if you modify the children or their transforms. */
/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_recalculateLocalAabb!(
    )
 = "Bullet2__btCompoundShape__MU__meth_recalculateLocalAabb__1a57b0cbe06d78edcb66ae97388ec574";

/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btCompoundShape__MU__meth_setLocalScaling__cfaca2c811ffb47caf17a4ebbbcc759d";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btCompoundShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btCompoundShape__CO__meth_getLocalScaling__534a0c38577fce2264c5153e5a97641d";

/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btCompoundShape__CO__meth_calculateLocalInertia__4e6dc7769595a4e0dafe3c6be3223890";

/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btCompoundShape__MU__meth_setMargin__77296bd7f01509c1adbc4b72aa40cfd2";

/// \dfgPresetOmit
/// \internal
Float32
btCompoundShape.cxx_getMargin?(
    )
 = "Bullet2__btCompoundShape__CO__meth_getMargin__ac6aba74dfc22213e7cd84af61d47833";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCompoundShape.cxx_getName?(
    )
 = "Bullet2__btCompoundShape__CO__meth_getName__08d0e3adfa55d2557000d0e14023ad8a";

/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_createAabbTreeFromChildren!(
    )
 = "Bullet2__btCompoundShape__MU__meth_createAabbTreeFromChildren__82893717c8464aca2408876e806098c3";

///computes the exact moment of inertia and the transform from the coordinate system defined by the principal axes of the moment of inertia
///and the center of mass to the current coordinate system. "masses" points to an array of masses of the children. The resulting transform
///"principal" has to be applied inversely to all children transforms in order for the local coordinate system of the compound
///shape to be centered at the center of mass and to coincide with the principal axes. This also necessitates a correction of the world transform
///of the collision object by the principal transform.
/// \dfgPresetOmit
/// \internal

btCompoundShape.cxx_calculatePrincipalAxisTransform?(
    CxxFloat32Ptr masses,
    CxxbtTransformRef principal,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btCompoundShape__CO__meth_calculatePrincipalAxisTransform__ade2d2b312f0ed9e5c9d0fac4fd622d8";

/// \dfgPresetOmit
/// \internal
SInt32
btCompoundShape.cxx_getUpdateRevision?(
    )
 = "Bullet2__btCompoundShape__CO__meth_getUpdateRevision__abf8afced69fe85ad129f501d68b50d8";

/// \dfgPresetOmit
/// \internal
SInt32
btCompoundShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btCompoundShape__CO__meth_calculateSerializeBufferSize__f1b5cc3109163b94d4b5f29fcce8673f";


btCompoundShape.createAabbTreeFromChildren!(
    )
{   
    
    this.cxx_createAabbTreeFromChildren(
        );
    
    
}

/// Remove all children shapes that contain the specified shape

btCompoundShape.removeChildShape!(
    in
    btCollisionShape
    shape
    
    
    )
{   
    
    
    this.cxx_removeChildShape(
        shape
        );
    
    
    
}


btCompoundShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}


btCompoundShape.removeChildShapeByIndex!(
    in
    SInt32
    childShapeindex
    
    
    )
{   
    
    
    this.cxx_removeChildShapeByIndex(
        childShapeindex
        );
    
    
    
}

btTransform
btCompoundShape.getChildTransform!(
    in
    SInt32
    index
    
    
    )
{   
    
    CxxbtTransformRef __res_cxx = 
    this.cxx_getChildTransform(
        index
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

btCompoundShapeChild
btCompoundShape.getChildList!(
    )
{   
    btCompoundShapeChild __res = 
    this.cxx_getChildList(
        );
    
    return __res;
}

SInt32
btCompoundShape.getNumChildShapes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumChildShapes(
        );
    
    return __res;
}

btCollisionShape
btCompoundShape.getChildShape!(
    in
    SInt32
    index
    
    
    )
{   
    
    btCollisionShape __res = 
    this.cxx_getChildShape(
        index
        );
    
    
    return __res;
}

String
btCompoundShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

SInt32
btCompoundShape.getUpdateRevision?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevision(
        );
    
    return __res;
}

SInt32
btCompoundShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btCompoundShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btCompoundShape.addChildShape!(
    in
    btTransform
    localTransform
    
    ,
    in
    btCollisionShape
    shape
    
    
    )
{   
    
    CxxbtTransformConstRef localTransform__cxx = Make_CxxbtTransformConstRef(localTransform);
    
    
    this.cxx_addChildShape(
        localTransform__cxx,
        shape
        );
    
    
    
    
}

///set a new transform for a child, and update internal data structures (local aabb and dynamic tree)

btCompoundShape.updateChildTransform!(
    in
    SInt32
    childIndex
    
    ,
    in
    btTransform
    newChildTransform
    
    
    )
{   
    
    
    CxxbtTransformConstRef newChildTransform__cxx = Make_CxxbtTransformConstRef(newChildTransform);
    
    this.cxx_updateChildTransform(
        childIndex,
        newChildTransform__cxx
        );
    
    
    
    
}

///computes the exact moment of inertia and the transform from the coordinate system defined by the principal axes of the moment of inertia
///and the center of mass to the current coordinate system. "masses" points to an array of masses of the children. The resulting transform
///"principal" has to be applied inversely to all children transforms in order for the local coordinate system of the compound
///shape to be centered at the center of mass and to coincide with the principal axes. This also necessitates a correction of the world transform
///of the collision object by the principal transform.

btCompoundShape.calculatePrincipalAxisTransform?(
    io
    Float32
    masses
    
    ,
    io
    btTransform
    principal
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    CxxFloat32Ptr masses__cxx = Make_CxxFloat32Ptr(masses);
    
    CxxbtTransformRef principal__cxx = Make_CxxbtTransformRef(principal);
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculatePrincipalAxisTransform(
        masses__cxx,
        principal__cxx,
        inertia__cxx
        );
    
    
    
    
    
}

///getAabb's default implementation is brute force, expected derived classes to implement a fast dedicated version

btCompoundShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

btVector3
btCompoundShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btCompoundShape.updateChildTransform!(
    in
    SInt32
    childIndex
    
    ,
    in
    btTransform
    newChildTransform
    
    ,
    in
    Boolean
    shouldRecalculateLocalAabb
    
    
    )
{   
    
    
    CxxbtTransformConstRef newChildTransform__cxx = Make_CxxbtTransformConstRef(newChildTransform);
    
    
    this.cxx_updateChildTransform(
        childIndex,
        newChildTransform__cxx,
        shouldRecalculateLocalAabb
        );
    
    
    
    
    
}


btCompoundShape.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}

Float32
btCompoundShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}

/** Re-calculate the local Aabb. Is called at the end of removeChildShapes. 
	Use this yourself if you modify the children or their transforms. */

btCompoundShape.recalculateLocalAabb!(
    )
{   
    
    this.cxx_recalculateLocalAabb(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShape] EDK[Fabric_EDK_KL_btCompoundShape] LIB[btCompoundShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundShape.=(
    btCompoundShape that
    ) = "Bullet2__btCompoundShape__MU__simple_ass_op__2c46d6b9621390f85e75c1911323d31f";


/// \dfgPresetOmit
/// \internal
btCompoundShape.appendDesc(io String string) {
  string += "btCompoundShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeChildData] EDK[Fabric_EDK_KL_btCompoundShapeChildData] LIB[btCompoundShapeChildData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChildData] EDK[Fabric_EDK_KL_btCompoundShapeChildData] LIB[btCompoundShapeChildData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChildData] EDK[Fabric_EDK_KL_btCompoundShapeChildData] LIB[btCompoundShapeChildData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundShapeChildData() = "Bullet2__btCompoundShapeChildData__MU__empty_ctor__7c14c49648c25b674f7e2db6fa5fb5cf";

/// \dfgPresetOmit
btCompoundShapeChildData(
    btCompoundShapeChildData that
    ) = "Bullet2__btCompoundShapeChildData__MU__copy_ctor__d9921ce3c8a8be7fcfd154a947167739";

btCompoundShapeChildData.cxx_delete() = "Bullet2__btCompoundShapeChildData__MU__delete__95d749603d4617f85800d4acbe3b0a7d";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChildData] EDK[Fabric_EDK_KL_btCompoundShapeChildData] LIB[btCompoundShapeChildData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChildData] EDK[Fabric_EDK_KL_btCompoundShapeChildData] LIB[btCompoundShapeChildData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeChildData] EDK[Fabric_EDK_KL_btCompoundShapeChildData] LIB[btCompoundShapeChildData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundShapeChildData.=(
    btCompoundShapeChildData that
    ) = "Bullet2__btCompoundShapeChildData__MU__simple_ass_op__163e9fb12e0f48f8f5c86c3c987ba527";


/// \dfgPresetOmit
/// \internal
btCompoundShapeChildData.appendDesc(io String string) {
  string += "btCompoundShapeChildData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundShapeData] EDK[Fabric_EDK_KL_btCompoundShapeData] LIB[btCompoundShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeData] EDK[Fabric_EDK_KL_btCompoundShapeData] LIB[btCompoundShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeData] EDK[Fabric_EDK_KL_btCompoundShapeData] LIB[btCompoundShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundShapeData() = "Bullet2__btCompoundShapeData__MU__empty_ctor__6bdc083ea7e2b3fae093d73fcb775c0c";

/// \dfgPresetOmit
btCompoundShapeData(
    btCompoundShapeData that
    ) = "Bullet2__btCompoundShapeData__MU__copy_ctor__3579ff9338f81947ed574db0d9393ffe";

btCompoundShapeData.cxx_delete() = "Bullet2__btCompoundShapeData__MU__delete__2d2c1af431b96b101156e0c35a093a86";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeData] EDK[Fabric_EDK_KL_btCompoundShapeData] LIB[btCompoundShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeData] EDK[Fabric_EDK_KL_btCompoundShapeData] LIB[btCompoundShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundShapeData] EDK[Fabric_EDK_KL_btCompoundShapeData] LIB[btCompoundShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundShapeData.=(
    btCompoundShapeData that
    ) = "Bullet2__btCompoundShapeData__MU__simple_ass_op__e9c9326db8eba56080110be6756944b8";


/// \dfgPresetOmit
/// \internal
btCompoundShapeData.appendDesc(io String string) {
  string += "btCompoundShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btConvexPointCloudShape(
    btConvexPointCloudShape that
    ) = "Bullet2__btConvexPointCloudShape__MU__copy_ctor__7c6226927f51a286d4d75b6b4be0be5e";

/// \dfgPresetOmit
/// \internal
btConvexPointCloudShape.__ctor(
    ) = "Bullet2__btConvexPointCloudShape__MU__ctor__f18cf5bc940f388c71886278808a998e";

/// \dfgPresetOmit
btConvexPointCloudShape(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btConvexPointCloudShape.__ctor(
    CxxbtVector3Ptr points,
    SInt32 numPoints,
    CxxbtVector3ConstRef localScaling
    ) = "Bullet2__btConvexPointCloudShape__MU__ctor__fe07830b8ba484c8273705c8f9ecb1a6";

/// \dfgPresetOmit
btConvexPointCloudShape(
    CxxbtVector3Ptr points,
    SInt32 numPoints,
    CxxbtVector3ConstRef localScaling
    ) {
    this.__ctor(
        points,
        numPoints,
        localScaling
        );
}

/// \dfgPresetOmit
/// \internal
btConvexPointCloudShape.__ctor(
    CxxbtVector3Ptr points,
    SInt32 numPoints,
    CxxbtVector3ConstRef localScaling,
    Boolean computeAabb
    ) = "Bullet2__btConvexPointCloudShape__MU__ctor__2969e80df024a60813845439fba00e6d";

/// \dfgPresetOmit
btConvexPointCloudShape(
    CxxbtVector3Ptr points,
    SInt32 numPoints,
    CxxbtVector3ConstRef localScaling,
    Boolean computeAabb
    ) {
    this.__ctor(
        points,
        numPoints,
        localScaling,
        computeAabb
        );
}

btConvexPointCloudShape(
    io
    btVector3
    points
    
    ,
    in
    SInt32
    numPoints
    
    ,
    in
    btVector3
    localScaling
    
    
    ) {
    
    CxxbtVector3Ptr points__cxx = Make_CxxbtVector3Ptr(points);
    
    
    CxxbtVector3ConstRef localScaling__cxx = Make_CxxbtVector3ConstRef(localScaling);
    this.__ctor(
        points__cxx,
        numPoints,
        localScaling__cxx
        );
    
    
    
}

btConvexPointCloudShape(
    io
    btVector3
    points
    
    ,
    in
    SInt32
    numPoints
    
    ,
    in
    btVector3
    localScaling
    
    ,
    in
    Boolean
    computeAabb
    
    
    ) {
    
    CxxbtVector3Ptr points__cxx = Make_CxxbtVector3Ptr(points);
    
    
    CxxbtVector3ConstRef localScaling__cxx = Make_CxxbtVector3ConstRef(localScaling);
    
    this.__ctor(
        points__cxx,
        numPoints,
        localScaling__cxx,
        computeAabb
        );
    
    
    
    
}

btConvexPointCloudShape.cxx_delete() = "Bullet2__btConvexPointCloudShape__MU__delete__af3e22782b955e73c4ec64d29f289e42";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btConvexPointCloudShape.cxx_setPoints!(
    CxxbtVector3Ptr points,
    SInt32 numPoints
    )
 = "Bullet2__btConvexPointCloudShape__MU__meth_setPoints__cbae4cbdc995bc5237ed1aaf2832a722";

/// \dfgPresetOmit
/// \internal

btConvexPointCloudShape.cxx_setPoints!(
    CxxbtVector3Ptr points,
    SInt32 numPoints,
    Boolean computeAabb
    )
 = "Bullet2__btConvexPointCloudShape__MU__meth_setPoints__e45434f7a1599de76603a17b558d9989";

/// \dfgPresetOmit
/// \internal

btConvexPointCloudShape.cxx_setPoints!(
    CxxbtVector3Ptr points,
    SInt32 numPoints,
    Boolean computeAabb,
    CxxbtVector3ConstRef localScaling
    )
 = "Bullet2__btConvexPointCloudShape__MU__meth_setPoints__a2da29745e967c20b7140061ca029370";

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr
btConvexPointCloudShape.cxx_getUnscaledPoints!(
    )
 = "Bullet2__btConvexPointCloudShape__MU__meth_getUnscaledPoints__efe052ab010d8ffa8ef30e2bc14c0501";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr
btConvexPointCloudShape.cxx_getUnscaledPoints?(
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getUnscaledPoints__ffb2af294d1b0393c5a0e086cf09058c";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexPointCloudShape.cxx_getNumPoints?(
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getNumPoints__44d72245940f70d0db17131c864da363";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexPointCloudShape.cxx_getScaledPoint?(
    SInt32 index
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getScaledPoint__84e2073d8590aeead5038922627ce78f";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexPointCloudShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_localGetSupportingVertex__592017592d4f8ceaeeceb585d5ed8ab8";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexPointCloudShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_localGetSupportingVertexWithoutMargin__a2806ceda42e9dfa468400b32bc48c89";

/// \dfgPresetOmit
/// \internal

btConvexPointCloudShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__75be0ed3bc0c3cb63c3053d294a89a91";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btConvexPointCloudShape.cxx_getName?(
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getName__f7f0f2c48ac277ee105acf03e1d8d66c";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexPointCloudShape.cxx_getNumVertices?(
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getNumVertices__b2515a340770add47d898b74c88c3fa4";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexPointCloudShape.cxx_getNumEdges?(
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getNumEdges__9117e20505d277c2326dc47ad5388d2d";

/// \dfgPresetOmit
/// \internal

btConvexPointCloudShape.cxx_getEdge?(
    SInt32 i,
    CxxbtVector3Ref pa,
    CxxbtVector3Ref pb
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getEdge__2e7a2c2b40d54a3b515494369cdb1570";

/// \dfgPresetOmit
/// \internal

btConvexPointCloudShape.cxx_getVertex?(
    SInt32 i,
    CxxbtVector3Ref vtx
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getVertex__f80ca3698ccc73fb9800660296d08a9c";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexPointCloudShape.cxx_getNumPlanes?(
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getNumPlanes__2f6ff970dd85d7708ad8c8279bff0170";

/// \dfgPresetOmit
/// \internal

btConvexPointCloudShape.cxx_getPlane?(
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport,
    SInt32 i
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_getPlane__66845b0db4de0ae34288c888623b0036";

/// \dfgPresetOmit
/// \internal
Boolean
btConvexPointCloudShape.cxx_isInside?(
    CxxbtVector3ConstRef pt,
    Float32 tolerance
    )
 = "Bullet2__btConvexPointCloudShape__CO__meth_isInside__cafe84e7973462d0dd8e75dcf1475d54";

///in case we receive negative scaling
/// \dfgPresetOmit
/// \internal

btConvexPointCloudShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btConvexPointCloudShape__MU__meth_setLocalScaling__180c2f8e5ba869ac18c6bba968843d1d";

btVector3
btConvexPointCloudShape.getScaledPoint?(
    in
    SInt32
    index
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_getScaledPoint(
        index
        );
    
    
    return __res;
}

///in case we receive negative scaling

btConvexPointCloudShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

btVector3
btConvexPointCloudShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}


btConvexPointCloudShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

btVector3
btConvexPointCloudShape.getUnscaledPoints!(
    )
{   
    CxxbtVector3Ptr __res_cxx = 
    this.cxx_getUnscaledPoints(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3Ptr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

btVector3
btConvexPointCloudShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

SInt32
btConvexPointCloudShape.getNumVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumVertices(
        );
    
    return __res;
}


btConvexPointCloudShape.setPoints!(
    io
    btVector3
    points
    
    ,
    in
    SInt32
    numPoints
    
    ,
    in
    Boolean
    computeAabb
    
    ,
    in
    btVector3
    localScaling
    
    
    )
{   
    
    CxxbtVector3Ptr points__cxx = Make_CxxbtVector3Ptr(points);
    
    
    
    CxxbtVector3ConstRef localScaling__cxx = Make_CxxbtVector3ConstRef(localScaling);
    
    this.cxx_setPoints(
        points__cxx,
        numPoints,
        computeAabb,
        localScaling__cxx
        );
    
    
    
    
    
    
}


btConvexPointCloudShape.getPlane?(
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    
    this.cxx_getPlane(
        planeNormal__cxx,
        planeSupport__cxx,
        i
        );
    
    
    
    
    
}

Boolean
btConvexPointCloudShape.isInside?(
    in
    btVector3
    pt
    
    ,
    in
    Float32
    tolerance
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    Boolean __res = 
    this.cxx_isInside(
        pt__cxx,
        tolerance
        );
    
    
    
    return __res;
}

SInt32
btConvexPointCloudShape.getNumPoints?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPoints(
        );
    
    return __res;
}


btConvexPointCloudShape.setPoints!(
    io
    btVector3
    points
    
    ,
    in
    SInt32
    numPoints
    
    ,
    in
    Boolean
    computeAabb
    
    
    )
{   
    
    CxxbtVector3Ptr points__cxx = Make_CxxbtVector3Ptr(points);
    
    
    
    this.cxx_setPoints(
        points__cxx,
        numPoints,
        computeAabb
        );
    
    
    
    
    
}

String
btConvexPointCloudShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

SInt32
btConvexPointCloudShape.getNumPlanes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPlanes(
        );
    
    return __res;
}


btConvexPointCloudShape.getEdge?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    pa
    
    ,
    io
    btVector3
    pb
    
    
    )
{   
    
    
    CxxbtVector3Ref pa__cxx = Make_CxxbtVector3Ref(pa);
    
    CxxbtVector3Ref pb__cxx = Make_CxxbtVector3Ref(pb);
    
    this.cxx_getEdge(
        i,
        pa__cxx,
        pb__cxx
        );
    
    
    
    
    
}


btConvexPointCloudShape.getVertex?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    vtx
    
    
    )
{   
    
    
    CxxbtVector3Ref vtx__cxx = Make_CxxbtVector3Ref(vtx);
    
    this.cxx_getVertex(
        i,
        vtx__cxx
        );
    
    
    
    
}


btConvexPointCloudShape.setPoints!(
    io
    btVector3
    points
    
    ,
    in
    SInt32
    numPoints
    
    
    )
{   
    
    CxxbtVector3Ptr points__cxx = Make_CxxbtVector3Ptr(points);
    
    
    this.cxx_setPoints(
        points__cxx,
        numPoints
        );
    
    
    
    
}

SInt32
btConvexPointCloudShape.getNumEdges?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumEdges(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPointCloudShape] EDK[Fabric_EDK_KL_btConvexPointCloudShape] LIB[btConvexPointCloudShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexPointCloudShape.=(
    btConvexPointCloudShape that
    ) = "Bullet2__btConvexPointCloudShape__MU__simple_ass_op__cc6b2c45c15a47d8c9e787889022aad0";


/// \dfgPresetOmit
/// \internal
btConvexPointCloudShape.appendDesc(io String string) {
  string += "btConvexPointCloudShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexTriangleMeshShape() = "Bullet2__btConvexTriangleMeshShape__MU__empty_ctor__7cc2ef986a7e10a8e78fe1a5a7fd0dbf";

/// \dfgPresetOmit
btConvexTriangleMeshShape(
    btConvexTriangleMeshShape that
    ) = "Bullet2__btConvexTriangleMeshShape__MU__copy_ctor__c0312edee2eb40d1afc15b6c121d2c2f";

/// \dfgPresetOmit
/// \internal
btConvexTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface
    ) = "Bullet2__btConvexTriangleMeshShape__MU__ctor__52e2de6b2a0791cd94efb0d8c3719625";

/// \dfgPresetOmit
btConvexTriangleMeshShape(
    btStridingMeshInterface meshInterface
    ) {
    this.__ctor(
        meshInterface
        );
}

/// \dfgPresetOmit
/// \internal
btConvexTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean calcAabb
    ) = "Bullet2__btConvexTriangleMeshShape__MU__ctor__26d0a31e97ea2dca699be02ec77b39b5";

/// \dfgPresetOmit
btConvexTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean calcAabb
    ) {
    this.__ctor(
        meshInterface,
        calcAabb
        );
}

btConvexTriangleMeshShape.cxx_delete() = "Bullet2__btConvexTriangleMeshShape__MU__delete__e4fcd1bd095b0c5f6d9f34822f365012";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btStridingMeshInterface
btConvexTriangleMeshShape.cxx_getMeshInterface!(
    )
 = "Bullet2__btConvexTriangleMeshShape__MU__meth_getMeshInterface__54dbb10a24f64fcd09ad2c499120808b";

/// \dfgPresetOmit
/// \internal
btStridingMeshInterface
btConvexTriangleMeshShape.cxx_getMeshInterface?(
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getMeshInterface__4b4e42959919c918f38e80b31e399b18";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexTriangleMeshShape.cxx_localGetSupportingVertex?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_localGetSupportingVertex__e84c30e047531a622f3268ce57e2cf7c";

/// \dfgPresetOmit
/// \internal
btVector3
btConvexTriangleMeshShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_localGetSupportingVertexWithoutMargin__0009da39a82860ef4ff0afde228ef1b4";

/// \dfgPresetOmit
/// \internal

btConvexTriangleMeshShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__a11df1fb4fde9d00987a69fd9c89502e";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btConvexTriangleMeshShape.cxx_getName?(
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getName__1918b16e1e250a164378253c73573fc2";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexTriangleMeshShape.cxx_getNumVertices?(
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getNumVertices__0fb25640543f022725a20f20d8fce41a";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexTriangleMeshShape.cxx_getNumEdges?(
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getNumEdges__598050d5ab5d73adfa9dc9c94d47f2db";

/// \dfgPresetOmit
/// \internal

btConvexTriangleMeshShape.cxx_getEdge?(
    SInt32 i,
    CxxbtVector3Ref pa,
    CxxbtVector3Ref pb
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getEdge__ea1918207466a4bce1b70317e1f7821f";

/// \dfgPresetOmit
/// \internal

btConvexTriangleMeshShape.cxx_getVertex?(
    SInt32 i,
    CxxbtVector3Ref vtx
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getVertex__21aa76b5a998fb4f6c51594f4b581f56";

/// \dfgPresetOmit
/// \internal
SInt32
btConvexTriangleMeshShape.cxx_getNumPlanes?(
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getNumPlanes__fd08e7acc5cb6d61400851d71f7182b2";

/// \dfgPresetOmit
/// \internal

btConvexTriangleMeshShape.cxx_getPlane?(
    CxxbtVector3Ref planeNormal,
    CxxbtVector3Ref planeSupport,
    SInt32 i
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getPlane__cf3c8c57577fd0008ceac6c67cf6962c";

/// \dfgPresetOmit
/// \internal
Boolean
btConvexTriangleMeshShape.cxx_isInside?(
    CxxbtVector3ConstRef pt,
    Float32 tolerance
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_isInside__374b3d31f47a65b18e39cdb8f683e0c2";

/// \dfgPresetOmit
/// \internal

btConvexTriangleMeshShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btConvexTriangleMeshShape__MU__meth_setLocalScaling__1d2155e7d0d3be725d2259214cab729b";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btConvexTriangleMeshShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_getLocalScaling__0a4b792d641cc09e0a50f52138cb9f77";

///computes the exact moment of inertia and the transform from the coordinate system defined by the principal axes of the moment of inertia
///and the center of mass to the current coordinate system. A mass of 1 is assumed, for other masses just multiply the computed "inertia"
///by the mass. The resulting transform "principal" has to be applied inversely to the mesh in order for the local coordinate system of the
///shape to be centered at the center of mass and to coincide with the principal axes. This also necessitates a correction of the world transform
///of the collision object by the principal transform. This method also computes the volume of the convex mesh.
/// \dfgPresetOmit
/// \internal

btConvexTriangleMeshShape.cxx_calculatePrincipalAxisTransform?(
    CxxbtTransformRef principal,
    CxxbtVector3Ref inertia,
    CxxFloat32Ref volume
    )
 = "Bullet2__btConvexTriangleMeshShape__CO__meth_calculatePrincipalAxisTransform__322f38b0bbc2c6c64ab914b6659d4359";

btVector3
btConvexTriangleMeshShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btConvexTriangleMeshShape.localGetSupportingVertex?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertex(
        vec__cxx
        );
    
    
    return __res;
}


btConvexTriangleMeshShape.getPlane?(
    io
    btVector3
    planeNormal
    
    ,
    io
    btVector3
    planeSupport
    
    ,
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3Ref planeNormal__cxx = Make_CxxbtVector3Ref(planeNormal);
    
    CxxbtVector3Ref planeSupport__cxx = Make_CxxbtVector3Ref(planeSupport);
    
    
    this.cxx_getPlane(
        planeNormal__cxx,
        planeSupport__cxx,
        i
        );
    
    
    
    
    
}

btStridingMeshInterface
btConvexTriangleMeshShape.getMeshInterface!(
    )
{   
    btStridingMeshInterface __res = 
    this.cxx_getMeshInterface(
        );
    
    return __res;
}

SInt32
btConvexTriangleMeshShape.getNumPlanes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPlanes(
        );
    
    return __res;
}

Boolean
btConvexTriangleMeshShape.isInside?(
    in
    btVector3
    pt
    
    ,
    in
    Float32
    tolerance
    
    
    )
{   
    
    CxxbtVector3ConstRef pt__cxx = Make_CxxbtVector3ConstRef(pt);
    
    Boolean __res = 
    this.cxx_isInside(
        pt__cxx,
        tolerance
        );
    
    
    
    return __res;
}

///computes the exact moment of inertia and the transform from the coordinate system defined by the principal axes of the moment of inertia
///and the center of mass to the current coordinate system. A mass of 1 is assumed, for other masses just multiply the computed "inertia"
///by the mass. The resulting transform "principal" has to be applied inversely to the mesh in order for the local coordinate system of the
///shape to be centered at the center of mass and to coincide with the principal axes. This also necessitates a correction of the world transform
///of the collision object by the principal transform. This method also computes the volume of the convex mesh.

btConvexTriangleMeshShape.calculatePrincipalAxisTransform?(
    io
    btTransform
    principal
    
    ,
    io
    btVector3
    inertia
    
    ,
    io
    Float32
    volume
    
    
    )
{   
    
    CxxbtTransformRef principal__cxx = Make_CxxbtTransformRef(principal);
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    CxxFloat32Ref volume__cxx = Make_CxxFloat32Ref(volume);
    
    this.cxx_calculatePrincipalAxisTransform(
        principal__cxx,
        inertia__cxx,
        volume__cxx
        );
    
    
    
    
    
}


btConvexTriangleMeshShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}


btConvexTriangleMeshShape.getEdge?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    pa
    
    ,
    io
    btVector3
    pb
    
    
    )
{   
    
    
    CxxbtVector3Ref pa__cxx = Make_CxxbtVector3Ref(pa);
    
    CxxbtVector3Ref pb__cxx = Make_CxxbtVector3Ref(pb);
    
    this.cxx_getEdge(
        i,
        pa__cxx,
        pb__cxx
        );
    
    
    
    
    
}

SInt32
btConvexTriangleMeshShape.getNumEdges?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumEdges(
        );
    
    return __res;
}


btConvexTriangleMeshShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

btVector3
btConvexTriangleMeshShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}


btConvexTriangleMeshShape.getVertex?(
    in
    SInt32
    i
    
    ,
    io
    btVector3
    vtx
    
    
    )
{   
    
    
    CxxbtVector3Ref vtx__cxx = Make_CxxbtVector3Ref(vtx);
    
    this.cxx_getVertex(
        i,
        vtx__cxx
        );
    
    
    
    
}

String
btConvexTriangleMeshShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

SInt32
btConvexTriangleMeshShape.getNumVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumVertices(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleMeshShape] EDK[Fabric_EDK_KL_btConvexTriangleMeshShape] LIB[btConvexTriangleMeshShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexTriangleMeshShape.=(
    btConvexTriangleMeshShape that
    ) = "Bullet2__btConvexTriangleMeshShape__MU__simple_ass_op__33c245a2703007548fc764087ff761b4";


/// \dfgPresetOmit
/// \internal
btConvexTriangleMeshShape.appendDesc(io String string) {
  string += "btConvexTriangleMeshShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btHeightfieldTerrainShape() = "Bullet2__btHeightfieldTerrainShape__MU__empty_ctor__868096c3308acc9f4fd8c17d13c54fe2";

/// \dfgPresetOmit
btHeightfieldTerrainShape(
    btHeightfieldTerrainShape that
    ) = "Bullet2__btHeightfieldTerrainShape__MU__copy_ctor__ab23c44a6f72757404346472faa5a904";

/// \dfgPresetOmit
/// \internal
btHeightfieldTerrainShape.__ctor(
    SInt32 heightStickWidth,
    SInt32 heightStickLength,
    Data heightfieldData,
    Float32 heightScale,
    Float32 minHeight,
    Float32 maxHeight,
    SInt32 upAxis,
    PHY_ScalarType heightDataType,
    Boolean flipQuadEdges
    ) = "Bullet2__btHeightfieldTerrainShape__MU__ctor__c037cb7f84e94f61c94065a41d4c59ba";

/// preferred constructor
// /**
// This constructor supports a range of heightfield
// data types, and allows for a non-zero minimum height value.
// heightScale is needed for any integer-based heightfield data types.
// */
/// \dfgPresetOmit
btHeightfieldTerrainShape(
    SInt32 heightStickWidth,
    SInt32 heightStickLength,
    Data heightfieldData,
    Float32 heightScale,
    Float32 minHeight,
    Float32 maxHeight,
    SInt32 upAxis,
    PHY_ScalarType heightDataType,
    Boolean flipQuadEdges
    ) {
    this.__ctor(
        heightStickWidth,
        heightStickLength,
        heightfieldData,
        heightScale,
        minHeight,
        maxHeight,
        upAxis,
        heightDataType,
        flipQuadEdges
        );
}

/// \dfgPresetOmit
/// \internal
btHeightfieldTerrainShape.__ctor(
    SInt32 heightStickWidth,
    SInt32 heightStickLength,
    Data heightfieldData,
    Float32 maxHeight,
    SInt32 upAxis,
    Boolean useFloatData,
    Boolean flipQuadEdges
    ) = "Bullet2__btHeightfieldTerrainShape__MU__ctor__d953c23a6aa9a7f2256871727d2c5b2a";

/// legacy constructor
// /**
// The legacy constructor assumes the heightfield has a minimum height
// of zero.  Only unsigned char or floats are supported.  For legacy
// compatibility reasons, heightScale is calculated as maxHeight / 65535
// (and is only used when useFloatData = false).
// */
/// \dfgPresetOmit
btHeightfieldTerrainShape(
    SInt32 heightStickWidth,
    SInt32 heightStickLength,
    Data heightfieldData,
    Float32 maxHeight,
    SInt32 upAxis,
    Boolean useFloatData,
    Boolean flipQuadEdges
    ) {
    this.__ctor(
        heightStickWidth,
        heightStickLength,
        heightfieldData,
        maxHeight,
        upAxis,
        useFloatData,
        flipQuadEdges
        );
}

btHeightfieldTerrainShape.cxx_delete() = "Bullet2__btHeightfieldTerrainShape__MU__delete__f489397b5f63eedede6d76fd5118255c";

//////////////////////////////////////////////////////////////////////////////
// KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btHeightfieldTerrainShape.cxx_setUseDiamondSubdivision!(
    )
 = "Bullet2__btHeightfieldTerrainShape__MU__meth_setUseDiamondSubdivision__6d89cd2ae079f503cc49d07d74065b02";

/// \dfgPresetOmit
/// \internal

btHeightfieldTerrainShape.cxx_setUseDiamondSubdivision!(
    Boolean useDiamondSubdivision
    )
 = "Bullet2__btHeightfieldTerrainShape__MU__meth_setUseDiamondSubdivision__4c1c241a6a0c260e9229f926e7660c49";

///could help compatibility with Ogre heightfields. See https://code.google.com/p/bullet/issues/detail?id=625
/// \dfgPresetOmit
/// \internal

btHeightfieldTerrainShape.cxx_setUseZigzagSubdivision!(
    )
 = "Bullet2__btHeightfieldTerrainShape__MU__meth_setUseZigzagSubdivision__237aa371b2239ac5b78e7a3759d23627";

/// \dfgPresetOmit
/// \internal

btHeightfieldTerrainShape.cxx_setUseZigzagSubdivision!(
    Boolean useZigzagSubdivision
    )
 = "Bullet2__btHeightfieldTerrainShape__MU__meth_setUseZigzagSubdivision__d8102907c9b83773723eb91c33daa7ed";

/// \dfgPresetOmit
/// \internal

btHeightfieldTerrainShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btHeightfieldTerrainShape__CO__meth_getAabb__43a4462bb7c5e87cd534c6447517d178";

/// \dfgPresetOmit
/// \internal

btHeightfieldTerrainShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btHeightfieldTerrainShape__CO__meth_calculateLocalInertia__cb54b35e32ca883d4e278870956e6c42";

/// \dfgPresetOmit
/// \internal

btHeightfieldTerrainShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btHeightfieldTerrainShape__MU__meth_setLocalScaling__549b25e0ddf271f172a1113b70cf20d4";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btHeightfieldTerrainShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btHeightfieldTerrainShape__CO__meth_getLocalScaling__e8902cf70cb47746f873645c8102a0a4";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btHeightfieldTerrainShape.cxx_getName?(
    )
 = "Bullet2__btHeightfieldTerrainShape__CO__meth_getName__5341ecb79af18275a8647a1621f44653";

String
btHeightfieldTerrainShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

///could help compatibility with Ogre heightfields. See https://code.google.com/p/bullet/issues/detail?id=625

btHeightfieldTerrainShape.setUseZigzagSubdivision!(
    )
{   
    
    this.cxx_setUseZigzagSubdivision(
        );
    
    
}

btVector3
btHeightfieldTerrainShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btHeightfieldTerrainShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btHeightfieldTerrainShape.setUseZigzagSubdivision!(
    in
    Boolean
    useZigzagSubdivision
    
    
    )
{   
    
    
    this.cxx_setUseZigzagSubdivision(
        useZigzagSubdivision
        );
    
    
    
}


btHeightfieldTerrainShape.setUseDiamondSubdivision!(
    in
    Boolean
    useDiamondSubdivision
    
    
    )
{   
    
    
    this.cxx_setUseDiamondSubdivision(
        useDiamondSubdivision
        );
    
    
    
}


btHeightfieldTerrainShape.setUseDiamondSubdivision!(
    )
{   
    
    this.cxx_setUseDiamondSubdivision(
        );
    
    
}


btHeightfieldTerrainShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btHeightfieldTerrainShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHeightfieldTerrainShape] EDK[Fabric_EDK_KL_btHeightfieldTerrainShape] LIB[btHeightfieldTerrainShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btHeightfieldTerrainShape.=(
    btHeightfieldTerrainShape that
    ) = "Bullet2__btHeightfieldTerrainShape__MU__simple_ass_op__308fdc4c70c367c6739599c2f21aa37b";


/// \dfgPresetOmit
/// \internal
btHeightfieldTerrainShape.appendDesc(io String string) {
  string += "btHeightfieldTerrainShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMinkowskiSumShape() = "Bullet2__btMinkowskiSumShape__MU__empty_ctor__9f8ac29e2dba459511cedc00ebfff740";

/// \dfgPresetOmit
btMinkowskiSumShape(
    btMinkowskiSumShape that
    ) = "Bullet2__btMinkowskiSumShape__MU__copy_ctor__69fcc95792e3f24a35d9f23a43ace772";

/// \dfgPresetOmit
/// \internal
btMinkowskiSumShape.__ctor(
    btConvexShape shapeA,
    btConvexShape shapeB
    ) = "Bullet2__btMinkowskiSumShape__MU__ctor__7e529fee2098752882bc8b24f255a107";

/// \dfgPresetOmit
btMinkowskiSumShape(
    btConvexShape shapeA,
    btConvexShape shapeB
    ) {
    this.__ctor(
        shapeA,
        shapeB
        );
}

btMinkowskiSumShape.cxx_delete() = "Bullet2__btMinkowskiSumShape__MU__delete__44c29e292f2aa4073892f853b0fdeeee";

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
btMinkowskiSumShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_localGetSupportingVertexWithoutMargin__5d28a35e99ac8d6da6d4cfe52a844824";

/// \dfgPresetOmit
/// \internal

btMinkowskiSumShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__23daef65b317e87f8b0f2e93d5cf6aea";

/// \dfgPresetOmit
/// \internal

btMinkowskiSumShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_calculateLocalInertia__4fc63128e46f601376c7161a99458459";

/// \dfgPresetOmit
/// \internal

btMinkowskiSumShape.cxx_setTransformA!(
    CxxbtTransformConstRef transA
    )
 = "Bullet2__btMinkowskiSumShape__MU__meth_setTransformA__19f02022dda0a982ec006c24a93345e6";

/// \dfgPresetOmit
/// \internal

btMinkowskiSumShape.cxx_setTransformB!(
    CxxbtTransformConstRef transB
    )
 = "Bullet2__btMinkowskiSumShape__MU__meth_setTransformB__529d369df309dd4123a2703304478e8b";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btMinkowskiSumShape.cxx_getTransformA?(
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_getTransformA__d19d18833fa96539c4be87bb39f9832f";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btMinkowskiSumShape.cxx_GetTransformB?(
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_GetTransformB__e8d9dbcbafd1032964c6a2b39369acc2";

/// \dfgPresetOmit
/// \internal
Float32
btMinkowskiSumShape.cxx_getMargin?(
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_getMargin__298359161ca8550b0d9f11a07402e924";

/// \dfgPresetOmit
/// \internal
btConvexShape
btMinkowskiSumShape.cxx_getShapeA?(
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_getShapeA__67f2a625d66588eebcff3a9adc1443a9";

/// \dfgPresetOmit
/// \internal
btConvexShape
btMinkowskiSumShape.cxx_getShapeB?(
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_getShapeB__041d5b76241a235be196decbf0f76d2f";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btMinkowskiSumShape.cxx_getName?(
    )
 = "Bullet2__btMinkowskiSumShape__CO__meth_getName__d6f2a50340bbdeb62c4d1a30316f6925";

btTransform
btMinkowskiSumShape.GetTransformB?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_GetTransformB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

String
btMinkowskiSumShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btMinkowskiSumShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

btVector3
btMinkowskiSumShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

btTransform
btMinkowskiSumShape.getTransformA?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getTransformA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btMinkowskiSumShape.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}


btMinkowskiSumShape.setTransformB!(
    in
    btTransform
    transB
    
    
    )
{   
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    this.cxx_setTransformB(
        transB__cxx
        );
    
    
    
}

btConvexShape
btMinkowskiSumShape.getShapeA?(
    )
{   
    btConvexShape __res = 
    this.cxx_getShapeA(
        );
    
    return __res;
}


btMinkowskiSumShape.setTransformA!(
    in
    btTransform
    transA
    
    
    )
{   
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    this.cxx_setTransformA(
        transA__cxx
        );
    
    
    
}


btMinkowskiSumShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

btConvexShape
btMinkowskiSumShape.getShapeB?(
    )
{   
    btConvexShape __res = 
    this.cxx_getShapeB(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiSumShape] EDK[Fabric_EDK_KL_btMinkowskiSumShape] LIB[btMinkowskiSumShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMinkowskiSumShape.=(
    btMinkowskiSumShape that
    ) = "Bullet2__btMinkowskiSumShape__MU__simple_ass_op__88f797158c3e8db71335ce45fb822654";


/// \dfgPresetOmit
/// \internal
btMinkowskiSumShape.appendDesc(io String string) {
  string += "btMinkowskiSumShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMaterial] EDK[Fabric_EDK_KL_btMaterial] LIB[btMaterial *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterial] EDK[Fabric_EDK_KL_btMaterial] LIB[btMaterial *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 btMaterial.cxx_get_m_friction()
  = "Bullet2__btMaterial__CO__getter_m_friction__eeb5bb8cc8fa95c52b4420a9711210be";

Float32
btMaterial.get_m_friction()
{
    Float32 __res = 
    this.cxx_get_m_friction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btMaterial.cxx_set_m_friction!(Float32 value)
  = "Bullet2__btMaterial__MU__setter_m_friction__1222d195e738715f8590d0a128295f98";

btMaterial.set_m_friction!(
    Float32 value
   )
{
    
    this.cxx_set_m_friction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btMaterial.cxx_get_m_restitution()
  = "Bullet2__btMaterial__CO__getter_m_restitution__b4edd32e557455aff228e810f1ce807d";

Float32
btMaterial.get_m_restitution()
{
    Float32 __res = 
    this.cxx_get_m_restitution();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btMaterial.cxx_set_m_restitution!(Float32 value)
  = "Bullet2__btMaterial__MU__setter_m_restitution__874854434bb71f76d049ded56872225d";

btMaterial.set_m_restitution!(
    Float32 value
   )
{
    
    this.cxx_set_m_restitution(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32[2] btMaterial.cxx_get_pad()
  = "Bullet2__btMaterial__CO__getter_pad__3811f167f371b15d3365dff8ce71e646";

SInt32[2]
btMaterial.get_pad()
{
    SInt32 __res[2] = 
    this.cxx_get_pad();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btMaterial.cxx_set_pad!(SInt32 value[2])
  = "Bullet2__btMaterial__MU__setter_pad__f289f2e4dfdc8bc543da038a65d216db";

btMaterial.set_pad!(
    SInt32 value[2]
   )
{
    
    this.cxx_set_pad(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[btMaterial] EDK[Fabric_EDK_KL_btMaterial] LIB[btMaterial *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btMaterial(
    btMaterial that
    ) = "Bullet2__btMaterial__MU__copy_ctor__036d1654b9a5966072127443d24db9f8";

/// \dfgPresetOmit
/// \internal
btMaterial.__ctor(
    ) = "Bullet2__btMaterial__MU__ctor__960c76edf18a40616a1091be7bcb4e0f";

/// \dfgPresetOmit
btMaterial(
    ) {
    this.__ctor(
        );
}

btMaterial.cxx_delete() = "Bullet2__btMaterial__MU__delete__67bbb262bbe68963a4c4ae4fd2fe336e";

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterial] EDK[Fabric_EDK_KL_btMaterial] LIB[btMaterial *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterial] EDK[Fabric_EDK_KL_btMaterial] LIB[btMaterial *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMaterial] EDK[Fabric_EDK_KL_btMaterial] LIB[btMaterial *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMaterial.=(
    btMaterial that
    ) = "Bullet2__btMaterial__MU__simple_ass_op__a4353a99b61a89af6e3c192e6c3f430e";


/// \dfgPresetOmit
/// \internal
btMaterial.appendDesc(io String string) {
  string += "btMaterial:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultimaterialTriangleMeshShape() = "Bullet2__btMultimaterialTriangleMeshShape__MU__empty_ctor__7a4d55399135723d04d923c00b8517db";

/// \dfgPresetOmit
btMultimaterialTriangleMeshShape(
    btMultimaterialTriangleMeshShape that
    ) = "Bullet2__btMultimaterialTriangleMeshShape__MU__copy_ctor__32a570e643faef1d4d05e603b0e2580b";

/// \dfgPresetOmit
/// \internal
btMultimaterialTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression
    ) = "Bullet2__btMultimaterialTriangleMeshShape__MU__ctor__73dd99898c8bd2502a71951027adc756";

/// \dfgPresetOmit
btMultimaterialTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression
    ) {
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression
        );
}

/// \dfgPresetOmit
/// \internal
btMultimaterialTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    Boolean buildBvh
    ) = "Bullet2__btMultimaterialTriangleMeshShape__MU__ctor__3cef2cc52b7135a57f74174c133e1609";

/// \dfgPresetOmit
btMultimaterialTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    Boolean buildBvh
    ) {
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        buildBvh
        );
}

/// \dfgPresetOmit
/// \internal
btMultimaterialTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax
    ) = "Bullet2__btMultimaterialTriangleMeshShape__MU__ctor__73fb04f09a2b958f6b671eb1022674dc";

///optionally pass in a larger bvh aabb, used for quantization. This allows for deformations within this aabb
/// \dfgPresetOmit
btMultimaterialTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax
    ) {
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        bvhAabbMin,
        bvhAabbMax
        );
}

/// \dfgPresetOmit
/// \internal
btMultimaterialTriangleMeshShape.__ctor(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax,
    Boolean buildBvh
    ) = "Bullet2__btMultimaterialTriangleMeshShape__MU__ctor__e0eb9dfab276d5562638a6f1bb56d25b";

/// \dfgPresetOmit
btMultimaterialTriangleMeshShape(
    btStridingMeshInterface meshInterface,
    Boolean useQuantizedAabbCompression,
    CxxbtVector3ConstRef bvhAabbMin,
    CxxbtVector3ConstRef bvhAabbMax,
    Boolean buildBvh
    ) {
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        bvhAabbMin,
        bvhAabbMax,
        buildBvh
        );
}

btMultimaterialTriangleMeshShape(
    in
    btStridingMeshInterface
    meshInterface
    
    ,
    in
    Boolean
    useQuantizedAabbCompression
    
    ,
    in
    btVector3
    bvhAabbMin
    
    ,
    in
    btVector3
    bvhAabbMax
    
    ,
    in
    Boolean
    buildBvh
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef bvhAabbMin__cxx = Make_CxxbtVector3ConstRef(bvhAabbMin);
    
    CxxbtVector3ConstRef bvhAabbMax__cxx = Make_CxxbtVector3ConstRef(bvhAabbMax);
    
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        bvhAabbMin__cxx,
        bvhAabbMax__cxx,
        buildBvh
        );
    
    
    
    
    
}

///optionally pass in a larger bvh aabb, used for quantization. This allows for deformations within this aabb
btMultimaterialTriangleMeshShape(
    in
    btStridingMeshInterface
    meshInterface
    
    ,
    in
    Boolean
    useQuantizedAabbCompression
    
    ,
    in
    btVector3
    bvhAabbMin
    
    ,
    in
    btVector3
    bvhAabbMax
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef bvhAabbMin__cxx = Make_CxxbtVector3ConstRef(bvhAabbMin);
    
    CxxbtVector3ConstRef bvhAabbMax__cxx = Make_CxxbtVector3ConstRef(bvhAabbMax);
    this.__ctor(
        meshInterface,
        useQuantizedAabbCompression,
        bvhAabbMin__cxx,
        bvhAabbMax__cxx
        );
    
    
    
    
}

btMultimaterialTriangleMeshShape.cxx_delete() = "Bullet2__btMultimaterialTriangleMeshShape__MU__delete__06423ec678ef20278487dbe4d0ca8c84";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btMultimaterialTriangleMeshShape.cxx_getName?(
    )
 = "Bullet2__btMultimaterialTriangleMeshShape__CO__meth_getName__a39c4610e6ef98093b548cda23fc9b7f";

///Obtains the material for a specific triangle
/// \dfgPresetOmit
/// \internal
btMaterial
btMultimaterialTriangleMeshShape.cxx_getMaterialProperties!(
    SInt32 partID,
    SInt32 triIndex
    )
 = "Bullet2__btMultimaterialTriangleMeshShape__MU__meth_getMaterialProperties__3f1bf54b0ebcff6a3af579a173c01fdb";

///Obtains the material for a specific triangle
btMaterial
btMultimaterialTriangleMeshShape.getMaterialProperties!(
    in
    SInt32
    partID
    
    ,
    in
    SInt32
    triIndex
    
    
    )
{   
    
    
    btMaterial __res = 
    this.cxx_getMaterialProperties(
        partID,
        triIndex
        );
    
    
    
    return __res;
}

String
btMultimaterialTriangleMeshShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultimaterialTriangleMeshShape] EDK[Fabric_EDK_KL_btMultimaterialTriangleMeshShape] LIB[btMultimaterialTriangleMeshShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultimaterialTriangleMeshShape.=(
    btMultimaterialTriangleMeshShape that
    ) = "Bullet2__btMultimaterialTriangleMeshShape__MU__simple_ass_op__af2efb57a4b7004fe38c5fd4e5489dfa";


/// \dfgPresetOmit
/// \internal
btMultimaterialTriangleMeshShape.appendDesc(io String string) {
  string += "btMultimaterialTriangleMeshShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiSphereShape() = "Bullet2__btMultiSphereShape__MU__empty_ctor__22d869292a3b6462c664ac15788406d1";

/// \dfgPresetOmit
btMultiSphereShape(
    btMultiSphereShape that
    ) = "Bullet2__btMultiSphereShape__MU__copy_ctor__1602506ebddff07a70af044ee6e1b8ca";

/// \dfgPresetOmit
/// \internal
btMultiSphereShape.__ctor(
    CxxbtVector3ConstPtr positions,
    CxxFloat32ConstPtr radi,
    SInt32 numSpheres
    ) = "Bullet2__btMultiSphereShape__MU__ctor__9f40f5de0697b0e3456f6d01ad2dc970";

/// \dfgPresetOmit
btMultiSphereShape(
    CxxbtVector3ConstPtr positions,
    CxxFloat32ConstPtr radi,
    SInt32 numSpheres
    ) {
    this.__ctor(
        positions,
        radi,
        numSpheres
        );
}

btMultiSphereShape(
    in
    btVector3
    positions
    
    ,
    in
    Float32
    radi
    
    ,
    in
    SInt32
    numSpheres
    
    
    ) {
    
    CxxbtVector3ConstPtr positions__cxx = Make_CxxbtVector3ConstPtr(positions);
    
    CxxFloat32ConstPtr radi__cxx = Make_CxxFloat32ConstPtr(radi);
    
    this.__ctor(
        positions__cxx,
        radi__cxx,
        numSpheres
        );
    
    
    
}

btMultiSphereShape.cxx_delete() = "Bullet2__btMultiSphereShape__MU__delete__1e2a10576f1e9416d1594ea74e4b310f";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///CollisionShape Interface
/// \dfgPresetOmit
/// \internal

btMultiSphereShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btMultiSphereShape__CO__meth_calculateLocalInertia__abfb9159d9ef162c4270496d887680ff";

/// btConvexShape Interface
/// \dfgPresetOmit
/// \internal
btVector3
btMultiSphereShape.cxx_localGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btMultiSphereShape__CO__meth_localGetSupportingVertexWithoutMargin__b67c32363735e0c2e1bd449020a7d106";

/// \dfgPresetOmit
/// \internal

btMultiSphereShape.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin?(
    CxxbtVector3ConstPtr vectors,
    CxxbtVector3Ptr supportVerticesOut,
    SInt32 numVectors
    )
 = "Bullet2__btMultiSphereShape__CO__meth_batchedUnitVectorGetSupportingVertexWithoutMargin__b41fa6c2f8593e61b17fd043ea60c5b5";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiSphereShape.cxx_getSphereCount?(
    )
 = "Bullet2__btMultiSphereShape__CO__meth_getSphereCount__bed9f7329494ea53a762bd6ab06c57c6";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiSphereShape.cxx_getSpherePosition?(
    SInt32 index
    )
 = "Bullet2__btMultiSphereShape__CO__meth_getSpherePosition__a5711df5f0cc37f5c7292dd4bdd077e1";

/// \dfgPresetOmit
/// \internal
Float32
btMultiSphereShape.cxx_getSphereRadius?(
    SInt32 index
    )
 = "Bullet2__btMultiSphereShape__CO__meth_getSphereRadius__bbcbdf7b76f89ea29f21d44f2b15b526";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btMultiSphereShape.cxx_getName?(
    )
 = "Bullet2__btMultiSphereShape__CO__meth_getName__88dccccdfa0836de2a23ff2b618c8fcd";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiSphereShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btMultiSphereShape__CO__meth_calculateSerializeBufferSize__03e846cf4c1e75ef1e07b01076f78efc";

Float32
btMultiSphereShape.getSphereRadius?(
    in
    SInt32
    index
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getSphereRadius(
        index
        );
    
    
    return __res;
}


btMultiSphereShape.batchedUnitVectorGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vectors
    
    ,
    io
    btVector3
    supportVerticesOut
    
    ,
    in
    SInt32
    numVectors
    
    
    )
{   
    
    CxxbtVector3ConstPtr vectors__cxx = Make_CxxbtVector3ConstPtr(vectors);
    
    CxxbtVector3Ptr supportVerticesOut__cxx = Make_CxxbtVector3Ptr(supportVerticesOut);
    
    
    this.cxx_batchedUnitVectorGetSupportingVertexWithoutMargin(
        vectors__cxx,
        supportVerticesOut__cxx,
        numVectors
        );
    
    
    
    
    
}

/// btConvexShape Interface
btVector3
btMultiSphereShape.localGetSupportingVertexWithoutMargin?(
    in
    btVector3
    vec
    
    
    )
{   
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localGetSupportingVertexWithoutMargin(
        vec__cxx
        );
    
    
    return __res;
}

SInt32
btMultiSphereShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

SInt32
btMultiSphereShape.getSphereCount?(
    )
{   
    SInt32 __res = 
    this.cxx_getSphereCount(
        );
    
    return __res;
}

String
btMultiSphereShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

///CollisionShape Interface

btMultiSphereShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

btVector3
btMultiSphereShape.getSpherePosition?(
    in
    SInt32
    index
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getSpherePosition(
        index
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShape] EDK[Fabric_EDK_KL_btMultiSphereShape] LIB[btMultiSphereShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiSphereShape.=(
    btMultiSphereShape that
    ) = "Bullet2__btMultiSphereShape__MU__simple_ass_op__8418bcbe0d604588202b8ff93e88f3e6";


/// \dfgPresetOmit
/// \internal
btMultiSphereShape.appendDesc(io String string) {
  string += "btMultiSphereShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPositionAndRadius] EDK[Fabric_EDK_KL_btPositionAndRadius] LIB[btPositionAndRadius *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPositionAndRadius] EDK[Fabric_EDK_KL_btPositionAndRadius] LIB[btPositionAndRadius *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPositionAndRadius] EDK[Fabric_EDK_KL_btPositionAndRadius] LIB[btPositionAndRadius *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btPositionAndRadius() = "Bullet2__btPositionAndRadius__MU__empty_ctor__dd229026d7da2ae2c64b602f890ce861";

/// \dfgPresetOmit
btPositionAndRadius(
    btPositionAndRadius that
    ) = "Bullet2__btPositionAndRadius__MU__copy_ctor__cb601d23a6364a70e1e914450c2784c2";

btPositionAndRadius.cxx_delete() = "Bullet2__btPositionAndRadius__MU__delete__a145322c921a21e9a295b637f1073b7e";

//////////////////////////////////////////////////////////////////////////////
// KL[btPositionAndRadius] EDK[Fabric_EDK_KL_btPositionAndRadius] LIB[btPositionAndRadius *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPositionAndRadius] EDK[Fabric_EDK_KL_btPositionAndRadius] LIB[btPositionAndRadius *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPositionAndRadius] EDK[Fabric_EDK_KL_btPositionAndRadius] LIB[btPositionAndRadius *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPositionAndRadius.=(
    btPositionAndRadius that
    ) = "Bullet2__btPositionAndRadius__MU__simple_ass_op__888e3c46fae0ef7a8a7fe5e31e2f6dfe";


/// \dfgPresetOmit
/// \internal
btPositionAndRadius.appendDesc(io String string) {
  string += "btPositionAndRadius:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiSphereShapeData] EDK[Fabric_EDK_KL_btMultiSphereShapeData] LIB[btMultiSphereShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShapeData] EDK[Fabric_EDK_KL_btMultiSphereShapeData] LIB[btMultiSphereShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShapeData] EDK[Fabric_EDK_KL_btMultiSphereShapeData] LIB[btMultiSphereShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiSphereShapeData() = "Bullet2__btMultiSphereShapeData__MU__empty_ctor__8f3d0b89e0af1f5e0a20c7824a0756fe";

/// \dfgPresetOmit
btMultiSphereShapeData(
    btMultiSphereShapeData that
    ) = "Bullet2__btMultiSphereShapeData__MU__copy_ctor__88b4a8f19849c7628d857f12b7b16e6d";

btMultiSphereShapeData.cxx_delete() = "Bullet2__btMultiSphereShapeData__MU__delete__0cc98774440ef0e39f57e36a4a582296";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShapeData] EDK[Fabric_EDK_KL_btMultiSphereShapeData] LIB[btMultiSphereShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShapeData] EDK[Fabric_EDK_KL_btMultiSphereShapeData] LIB[btMultiSphereShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiSphereShapeData] EDK[Fabric_EDK_KL_btMultiSphereShapeData] LIB[btMultiSphereShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiSphereShapeData.=(
    btMultiSphereShapeData that
    ) = "Bullet2__btMultiSphereShapeData__MU__simple_ass_op__c37ef854cfe4f32893cf2e72ba8700e1";


/// \dfgPresetOmit
/// \internal
btMultiSphereShapeData.appendDesc(io String string) {
  string += "btMultiSphereShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btScaledBvhTriangleMeshShape() = "Bullet2__btScaledBvhTriangleMeshShape__MU__empty_ctor__545ca7fd31111e41f52b89c8ab8a5075";

/// \dfgPresetOmit
btScaledBvhTriangleMeshShape(
    btScaledBvhTriangleMeshShape that
    ) = "Bullet2__btScaledBvhTriangleMeshShape__MU__copy_ctor__a4137bf77adafdfdc8ceac55420e6496";

/// \dfgPresetOmit
/// \internal
btScaledBvhTriangleMeshShape.__ctor(
    btBvhTriangleMeshShape childShape,
    CxxbtVector3ConstRef localScaling
    ) = "Bullet2__btScaledBvhTriangleMeshShape__MU__ctor__2af14f49a229fd95c471ceb523daf5ef";

/// \dfgPresetOmit
btScaledBvhTriangleMeshShape(
    btBvhTriangleMeshShape childShape,
    CxxbtVector3ConstRef localScaling
    ) {
    this.__ctor(
        childShape,
        localScaling
        );
}

btScaledBvhTriangleMeshShape(
    in
    btBvhTriangleMeshShape
    childShape
    
    ,
    in
    btVector3
    localScaling
    
    
    ) {
    
    
    CxxbtVector3ConstRef localScaling__cxx = Make_CxxbtVector3ConstRef(localScaling);
    this.__ctor(
        childShape,
        localScaling__cxx
        );
    
    
}

btScaledBvhTriangleMeshShape.cxx_delete() = "Bullet2__btScaledBvhTriangleMeshShape__MU__delete__cfe382ee8f7b4f42b6f3243ff2382795";

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btScaledBvhTriangleMeshShape.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btScaledBvhTriangleMeshShape__CO__meth_getAabb__08bab3b6e7caafbf8ada1c237fc7a788";

/// \dfgPresetOmit
/// \internal

btScaledBvhTriangleMeshShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btScaledBvhTriangleMeshShape__MU__meth_setLocalScaling__6e30b2a9fe8cc99a7b3dfb1d08f88567";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btScaledBvhTriangleMeshShape.cxx_getLocalScaling?(
    )
 = "Bullet2__btScaledBvhTriangleMeshShape__CO__meth_getLocalScaling__83405e044d8ca65b18b40f335cf4859c";

/// \dfgPresetOmit
/// \internal

btScaledBvhTriangleMeshShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btScaledBvhTriangleMeshShape__CO__meth_calculateLocalInertia__70f38892f431d6995a83ad0bd2ba2b8e";

/// \dfgPresetOmit
/// \internal
btBvhTriangleMeshShape
btScaledBvhTriangleMeshShape.cxx_getChildShape!(
    )
 = "Bullet2__btScaledBvhTriangleMeshShape__MU__meth_getChildShape__a1ac1d0684df4360d48078a334cc4184";

/// \dfgPresetOmit
/// \internal
btBvhTriangleMeshShape
btScaledBvhTriangleMeshShape.cxx_getChildShape?(
    )
 = "Bullet2__btScaledBvhTriangleMeshShape__CO__meth_getChildShape__130edcafcea7ac689f88b07cd3654bc9";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btScaledBvhTriangleMeshShape.cxx_getName?(
    )
 = "Bullet2__btScaledBvhTriangleMeshShape__CO__meth_getName__b47e6a96034fb2f8534f6f7041e31992";

/// \dfgPresetOmit
/// \internal
SInt32
btScaledBvhTriangleMeshShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btScaledBvhTriangleMeshShape__CO__meth_calculateSerializeBufferSize__84a3aee42895b74771b66c457dedc85e";

btVector3
btScaledBvhTriangleMeshShape.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btScaledBvhTriangleMeshShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

SInt32
btScaledBvhTriangleMeshShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

btBvhTriangleMeshShape
btScaledBvhTriangleMeshShape.getChildShape!(
    )
{   
    btBvhTriangleMeshShape __res = 
    this.cxx_getChildShape(
        );
    
    return __res;
}


btScaledBvhTriangleMeshShape.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

String
btScaledBvhTriangleMeshShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}


btScaledBvhTriangleMeshShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledBvhTriangleMeshShape] EDK[Fabric_EDK_KL_btScaledBvhTriangleMeshShape] LIB[btScaledBvhTriangleMeshShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btScaledBvhTriangleMeshShape.=(
    btScaledBvhTriangleMeshShape that
    ) = "Bullet2__btScaledBvhTriangleMeshShape__MU__simple_ass_op__c6715ae1d418a1d6fdfd4d0fb8afb1d7";


/// \dfgPresetOmit
/// \internal
btScaledBvhTriangleMeshShape.appendDesc(io String string) {
  string += "btScaledBvhTriangleMeshShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btScaledTriangleMeshShapeData] EDK[Fabric_EDK_KL_btScaledTriangleMeshShapeData] LIB[btScaledTriangleMeshShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledTriangleMeshShapeData] EDK[Fabric_EDK_KL_btScaledTriangleMeshShapeData] LIB[btScaledTriangleMeshShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledTriangleMeshShapeData] EDK[Fabric_EDK_KL_btScaledTriangleMeshShapeData] LIB[btScaledTriangleMeshShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btScaledTriangleMeshShapeData() = "Bullet2__btScaledTriangleMeshShapeData__MU__empty_ctor__a4c7b11d55196cd59d7948e53c83fe92";

/// \dfgPresetOmit
btScaledTriangleMeshShapeData(
    btScaledTriangleMeshShapeData that
    ) = "Bullet2__btScaledTriangleMeshShapeData__MU__copy_ctor__4d797101cc72163edcc038dcae468d46";

btScaledTriangleMeshShapeData.cxx_delete() = "Bullet2__btScaledTriangleMeshShapeData__MU__delete__d81a15d385a5de9931d7a03ae09a99a4";

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledTriangleMeshShapeData] EDK[Fabric_EDK_KL_btScaledTriangleMeshShapeData] LIB[btScaledTriangleMeshShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledTriangleMeshShapeData] EDK[Fabric_EDK_KL_btScaledTriangleMeshShapeData] LIB[btScaledTriangleMeshShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btScaledTriangleMeshShapeData] EDK[Fabric_EDK_KL_btScaledTriangleMeshShapeData] LIB[btScaledTriangleMeshShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btScaledTriangleMeshShapeData.=(
    btScaledTriangleMeshShapeData that
    ) = "Bullet2__btScaledTriangleMeshShapeData__MU__simple_ass_op__aac11fc1f0529402e51a9dcc299747bb";


/// \dfgPresetOmit
/// \internal
btScaledTriangleMeshShapeData.appendDesc(io String string) {
  string += "btScaledTriangleMeshShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btShapeHull() = "Bullet2__btShapeHull__MU__empty_ctor__4331a2a2d672799491fb994908aac298";

/// \dfgPresetOmit
btShapeHull(
    btShapeHull that
    ) = "Bullet2__btShapeHull__MU__copy_ctor__f1dbad7036aeaf4674f7c5b87a6da089";

/// \dfgPresetOmit
/// \internal
btShapeHull.__ctor(
    btConvexShape shape
    ) = "Bullet2__btShapeHull__MU__ctor__c4fa307b651d1cece31b367d250a27a4";

/// \dfgPresetOmit
btShapeHull(
    btConvexShape shape
    ) {
    this.__ctor(
        shape
        );
}

btShapeHull.cxx_delete() = "Bullet2__btShapeHull__MU__delete__1342f1fcd8f383f30fc042654b6a5554";

//////////////////////////////////////////////////////////////////////////////
// KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btShapeHull.cxx_buildHull!(
    Float32 margin
    )
 = "Bullet2__btShapeHull__MU__meth_buildHull__24659c5d70a119faa2aa75bbcf8e6c41";

/// \dfgPresetOmit
/// \internal
SInt32
btShapeHull.cxx_numTriangles?(
    )
 = "Bullet2__btShapeHull__CO__meth_numTriangles__10ccf30326f8aee467c25b1addff1b0a";

/// \dfgPresetOmit
/// \internal
SInt32
btShapeHull.cxx_numVertices?(
    )
 = "Bullet2__btShapeHull__CO__meth_numVertices__66ccaae435a7bc6ae44b712b33e9a5f9";

/// \dfgPresetOmit
/// \internal
SInt32
btShapeHull.cxx_numIndices?(
    )
 = "Bullet2__btShapeHull__CO__meth_numIndices__6c73b1fb1970fcf3074dbcd01e9be2a7";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr
btShapeHull.cxx_getVertexPointer?(
    )
 = "Bullet2__btShapeHull__CO__meth_getVertexPointer__514c4c31b4ce7c7c0fb25247deb2acc7";

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtr
btShapeHull.cxx_getIndexPointer?(
    )
 = "Bullet2__btShapeHull__CO__meth_getIndexPointer__c7aeda33494564ff2c9365a0017e6e28";

btVector3
btShapeHull.getVertexPointer?(
    )
{   
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_getVertexPointer(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

SInt32
btShapeHull.numTriangles?(
    )
{   
    SInt32 __res = 
    this.cxx_numTriangles(
        );
    
    return __res;
}

Boolean
btShapeHull.buildHull!(
    in
    Float32
    margin
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_buildHull(
        margin
        );
    
    
    return __res;
}

SInt32
btShapeHull.numVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_numVertices(
        );
    
    return __res;
}

SInt32
btShapeHull.numIndices?(
    )
{   
    SInt32 __res = 
    this.cxx_numIndices(
        );
    
    return __res;
}

UInt32
btShapeHull.getIndexPointer?(
    )
{   
    CxxUInt32ConstPtr __res_cxx = 
    this.cxx_getIndexPointer(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxUInt32ConstPtr';
    UInt32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btShapeHull] EDK[Fabric_EDK_KL_btShapeHull] LIB[btShapeHull *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btShapeHull.=(
    btShapeHull that
    ) = "Bullet2__btShapeHull__MU__simple_ass_op__70e068587b47a9abc3f8d02a1a153969";


/// \dfgPresetOmit
/// \internal
btShapeHull.appendDesc(io String string) {
  string += "btShapeHull:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBroadphaseAabbCallback() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btBroadphaseAabbCallback(
    btBroadphaseAabbCallback that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btBroadphaseAabbCallback.cxx_delete() = "Bullet2__btBroadphaseAabbCallback__MU__delete__7d2b2a7319bfea1dd4cc2458464cdd59";

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseAabbCallback.cxx_process!(
    btBroadphaseProxy proxy
    )
 = "Bullet2__btBroadphaseAabbCallback__MU__meth_process__f74525211323ba473738da5f96679613";

Boolean
btBroadphaseAabbCallback.process!(
    in
    btBroadphaseProxy
    proxy
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_process(
        proxy
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseAabbCallback] EDK[Fabric_EDK_KL_btBroadphaseAabbCallback] LIB[btBroadphaseAabbCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBroadphaseAabbCallback.=(
    btBroadphaseAabbCallback that
    ) = "Bullet2__btBroadphaseAabbCallback__MU__simple_ass_op__419272d6c2466796bab0f0e0ca4515b0";


/// \dfgPresetOmit
/// \internal
btBroadphaseAabbCallback.appendDesc(io String string) {
  string += "btBroadphaseAabbCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseRayCallback] EDK[Fabric_EDK_KL_btBroadphaseRayCallback] LIB[btBroadphaseRayCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseRayCallback] EDK[Fabric_EDK_KL_btBroadphaseRayCallback] LIB[btBroadphaseRayCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseRayCallback] EDK[Fabric_EDK_KL_btBroadphaseRayCallback] LIB[btBroadphaseRayCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBroadphaseRayCallback() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btBroadphaseRayCallback(
    btBroadphaseRayCallback that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btBroadphaseRayCallback.cxx_delete() = "Bullet2__btBroadphaseRayCallback__MU__delete__1e503c861b9ea1c148619f346a4805df";

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseRayCallback] EDK[Fabric_EDK_KL_btBroadphaseRayCallback] LIB[btBroadphaseRayCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseRayCallback] EDK[Fabric_EDK_KL_btBroadphaseRayCallback] LIB[btBroadphaseRayCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseRayCallback] EDK[Fabric_EDK_KL_btBroadphaseRayCallback] LIB[btBroadphaseRayCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBroadphaseRayCallback.=(
    btBroadphaseRayCallback that
    ) = "Bullet2__btBroadphaseRayCallback__MU__simple_ass_op__7d1a5b22334c48023a685bd2e11046c6";


/// \dfgPresetOmit
/// \internal
btBroadphaseRayCallback.appendDesc(io String string) {
  string += "btBroadphaseRayCallback:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBroadphaseInterface() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btBroadphaseInterface(
    btBroadphaseInterface that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btBroadphaseInterface.cxx_delete() = "Bullet2__btBroadphaseInterface__MU__delete__3d1c562c81a2fdd734a593844b186da4";

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
btBroadphaseInterface.cxx_createProxy!(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    SInt32 shapeType,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask,
    btDispatcher dispatcher
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_createProxy__dc7160901a67d6cdee613682bed6f025";

/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_destroyProxy!(
    btBroadphaseProxy proxy,
    btDispatcher dispatcher
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_destroyProxy__ba05b372a27d2d76af5431829d971b0f";

/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_setAabb!(
    btBroadphaseProxy proxy,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    btDispatcher dispatcher
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_setAabb__14ad152bcd4a44eb5b196f69d43d6908";

/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_getAabb?(
    btBroadphaseProxy proxy,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btBroadphaseInterface__CO__meth_getAabb__09862c3070ececb6b06b1c22ade75e1e";

/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_rayTest__8f3841835ef973544b964a142f9c4dc6";

/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback,
    CxxbtVector3ConstRef aabbMin
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_rayTest__7963a3be3f5a2f55cead14af5fc6a61a";

/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_rayTest__8d2bf590d365584a50ca198d920df87c";

/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_aabbTest!(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    btBroadphaseAabbCallback callback
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_aabbTest__9757729e61cd5b50191a283780bdc6b1";

///calculateOverlappingPairs is optional: incremental algorithms (sweep and prune) might do it during the set aabb
/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_calculateOverlappingPairs!(
    btDispatcher dispatcher
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_calculateOverlappingPairs__577f30365b7c708e19f85c418d8b123a";

///getAabb returns the axis aligned bounding box in the 'global' coordinate frame
///will add some transform later
/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_getBroadphaseAabb?(
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btBroadphaseInterface__CO__meth_getBroadphaseAabb__0c964e591610f05a531bf57fb7f2b385";

///reset broadphase internal structures, to ensure determinism/reproducability
/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_resetPool!(
    btDispatcher dispatcher
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_resetPool__a6008f65ab317e71aeeee73fce7b3cb6";

/// \dfgPresetOmit
/// \internal

btBroadphaseInterface.cxx_printStats!(
    )
 = "Bullet2__btBroadphaseInterface__MU__meth_printStats__580702613db5c8a969f637b74fa47598";

btBroadphaseProxy
btBroadphaseInterface.createProxy!(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    SInt32
    shapeType
    
    ,
    in
    Data
    userPtr
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    
    
    
    btBroadphaseProxy __res = 
    this.cxx_createProxy(
        aabbMin__cxx,
        aabbMax__cxx,
        shapeType,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask,
        dispatcher
        );
    
    
    
    
    
    
    
    
    return __res;
}


btBroadphaseInterface.aabbTest!(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    btBroadphaseAabbCallback
    callback
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    this.cxx_aabbTest(
        aabbMin__cxx,
        aabbMax__cxx,
        callback
        );
    
    
    
    
    
}


btBroadphaseInterface.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback
        );
    
    
    
    
    
}


btBroadphaseInterface.getAabb?(
    in
    btBroadphaseProxy
    proxy
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        proxy,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btBroadphaseInterface.setAabb!(
    in
    btBroadphaseProxy
    proxy
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    this.cxx_setAabb(
        proxy,
        aabbMin__cxx,
        aabbMax__cxx,
        dispatcher
        );
    
    
    
    
    
    
}

///calculateOverlappingPairs is optional: incremental algorithms (sweep and prune) might do it during the set aabb

btBroadphaseInterface.calculateOverlappingPairs!(
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    this.cxx_calculateOverlappingPairs(
        dispatcher
        );
    
    
    
}


btBroadphaseInterface.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
    
    
}

///reset broadphase internal structures, to ensure determinism/reproducability

btBroadphaseInterface.resetPool!(
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    this.cxx_resetPool(
        dispatcher
        );
    
    
    
}


btBroadphaseInterface.printStats!(
    )
{   
    
    this.cxx_printStats(
        );
    
    
}

///getAabb returns the axis aligned bounding box in the 'global' coordinate frame
///will add some transform later

btBroadphaseInterface.getBroadphaseAabb?(
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getBroadphaseAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}


btBroadphaseInterface.destroyProxy!(
    in
    btBroadphaseProxy
    proxy
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    
    this.cxx_destroyProxy(
        proxy,
        dispatcher
        );
    
    
    
    
}


btBroadphaseInterface.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    ,
    in
    btVector3
    aabbMin
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback,
        aabbMin__cxx
        );
    
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseInterface] EDK[Fabric_EDK_KL_btBroadphaseInterface] LIB[btBroadphaseInterface *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBroadphaseInterface.=(
    btBroadphaseInterface that
    ) = "Bullet2__btBroadphaseInterface__MU__simple_ass_op__35d66778ae76b4a2bf498b8e4758d6ce";


/// \dfgPresetOmit
/// \internal
btBroadphaseInterface.appendDesc(io String string) {
  string += "btBroadphaseInterface:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btBroadphaseProxy(
    btBroadphaseProxy that
    ) = "Bullet2__btBroadphaseProxy__MU__copy_ctor__c77492830ed69bf6f613cc1e3a0b6ac2";

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy.__ctor(
    ) = "Bullet2__btBroadphaseProxy__MU__ctor__1d2c02e7bec06c28eabf1e0bcf7a604f";

/// \dfgPresetOmit
btBroadphaseProxy(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy.__ctor(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    ) = "Bullet2__btBroadphaseProxy__MU__ctor__471d304b8ddbf30a4763e45fd628235a";

/// \dfgPresetOmit
btBroadphaseProxy(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    ) {
    this.__ctor(
        aabbMin,
        aabbMax,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask
        );
}

btBroadphaseProxy(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    Data
    userPtr
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    
    ) {
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    
    this.__ctor(
        aabbMin__cxx,
        aabbMax__cxx,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask
        );
    
    
    
    
    
}

btBroadphaseProxy.cxx_delete() = "Bullet2__btBroadphaseProxy__MU__delete__9b343cd33e9f29ac28b840ab8adb4cd9";

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btBroadphaseProxy.cxx_getUid?(
    )
 = "Bullet2__btBroadphaseProxy__CO__meth_getUid__f58f71bc5fcc114200df526889fb1d92";

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseProxy_CxxisPolyhedral(
    SInt32 proxyType
    )
 = "Bullet2__btBroadphaseProxy__ST__meth_isPolyhedral__f1349ccf55c596b5c24ef940ece42ad4";

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseProxy_CxxisConvex(
    SInt32 proxyType
    )
 = "Bullet2__btBroadphaseProxy__ST__meth_isConvex__c43590d1f75ef9b5918ca80eb0cda404";

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseProxy_CxxisNonMoving(
    SInt32 proxyType
    )
 = "Bullet2__btBroadphaseProxy__ST__meth_isNonMoving__fab2dd3e6c81e8dae5b280064d5fa4be";

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseProxy_CxxisConcave(
    SInt32 proxyType
    )
 = "Bullet2__btBroadphaseProxy__ST__meth_isConcave__06acad9ffd945b5546af4383798d7381";

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseProxy_CxxisCompound(
    SInt32 proxyType
    )
 = "Bullet2__btBroadphaseProxy__ST__meth_isCompound__246a96ccf9445bfa5371ae36376d3863";

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseProxy_CxxisSoftBody(
    SInt32 proxyType
    )
 = "Bullet2__btBroadphaseProxy__ST__meth_isSoftBody__db019add13d2a993514c38237a66fb3c";

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseProxy_CxxisInfinite(
    SInt32 proxyType
    )
 = "Bullet2__btBroadphaseProxy__ST__meth_isInfinite__9c6a5dd220ecdcff4a02d83a828774d9";

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphaseProxy_CxxisConvex2d(
    SInt32 proxyType
    )
 = "Bullet2__btBroadphaseProxy__ST__meth_isConvex2d__cf1c09fdbc5a4d3c2d251e4282d28951";

Boolean
btBroadphaseProxy_isPolyhedral(
    in
    SInt32
    proxyType
    
    
    )
{   
    
    Boolean __res = 
    btBroadphaseProxy_CxxisPolyhedral(
        proxyType
        );
    
    
    return __res;
}

Boolean
btBroadphaseProxy_isSoftBody(
    in
    SInt32
    proxyType
    
    
    )
{   
    
    Boolean __res = 
    btBroadphaseProxy_CxxisSoftBody(
        proxyType
        );
    
    
    return __res;
}

Boolean
btBroadphaseProxy_isInfinite(
    in
    SInt32
    proxyType
    
    
    )
{   
    
    Boolean __res = 
    btBroadphaseProxy_CxxisInfinite(
        proxyType
        );
    
    
    return __res;
}

Boolean
btBroadphaseProxy_isCompound(
    in
    SInt32
    proxyType
    
    
    )
{   
    
    Boolean __res = 
    btBroadphaseProxy_CxxisCompound(
        proxyType
        );
    
    
    return __res;
}

Boolean
btBroadphaseProxy_isConcave(
    in
    SInt32
    proxyType
    
    
    )
{   
    
    Boolean __res = 
    btBroadphaseProxy_CxxisConcave(
        proxyType
        );
    
    
    return __res;
}

Boolean
btBroadphaseProxy_isNonMoving(
    in
    SInt32
    proxyType
    
    
    )
{   
    
    Boolean __res = 
    btBroadphaseProxy_CxxisNonMoving(
        proxyType
        );
    
    
    return __res;
}

Boolean
btBroadphaseProxy_isConvex(
    in
    SInt32
    proxyType
    
    
    )
{   
    
    Boolean __res = 
    btBroadphaseProxy_CxxisConvex(
        proxyType
        );
    
    
    return __res;
}

Boolean
btBroadphaseProxy_isConvex2d(
    in
    SInt32
    proxyType
    
    
    )
{   
    
    Boolean __res = 
    btBroadphaseProxy_CxxisConvex2d(
        proxyType
        );
    
    
    return __res;
}

SInt32
btBroadphaseProxy.getUid?(
    )
{   
    SInt32 __res = 
    this.cxx_getUid(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphaseProxy] EDK[Fabric_EDK_KL_btBroadphaseProxy] LIB[btBroadphaseProxy *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBroadphaseProxy.=(
    btBroadphaseProxy that
    ) = "Bullet2__btBroadphaseProxy__MU__simple_ass_op__f0e5e9e0b152d137f0c1d7b15a0d0975";


/// \dfgPresetOmit
/// \internal
btBroadphaseProxy.appendDesc(io String string) {
  string += "btBroadphaseProxy:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphasePair] EDK[Fabric_EDK_KL_btBroadphasePair] LIB[btBroadphasePair *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePair] EDK[Fabric_EDK_KL_btBroadphasePair] LIB[btBroadphasePair *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePair] EDK[Fabric_EDK_KL_btBroadphasePair] LIB[btBroadphasePair *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btBroadphasePair(
    btBroadphasePair that
    ) = "Bullet2__btBroadphasePair__MU__copy_ctor__176b8448b2ea57944c2b51a395b4cf7f";

/// \dfgPresetOmit
/// \internal
btBroadphasePair.__ctor(
    ) = "Bullet2__btBroadphasePair__MU__ctor__6b9b2c078d4c1dc979c28374f11733df";

/// \dfgPresetOmit
btBroadphasePair(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphasePair.__ctor(
    btBroadphasePair other
    ) = "Bullet2__btBroadphasePair__MU__ctor__ed1693aaaded769858822c99c6337b55";

/// \dfgPresetOmit
btBroadphasePair(
    btBroadphasePair other
    ) {
    this.__ctor(
        other
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphasePair.__ctor(
    btBroadphaseProxy proxy0,
    btBroadphaseProxy proxy1
    ) = "Bullet2__btBroadphasePair__MU__ctor__ae4b48550fef956446452cabb7237a29";

/// \dfgPresetOmit
btBroadphasePair(
    btBroadphaseProxy proxy0,
    btBroadphaseProxy proxy1
    ) {
    this.__ctor(
        proxy0,
        proxy1
        );
}

btBroadphasePair.cxx_delete() = "Bullet2__btBroadphasePair__MU__delete__4deb3195fb23b5666a359b557f9fdafa";

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePair] EDK[Fabric_EDK_KL_btBroadphasePair] LIB[btBroadphasePair *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePair] EDK[Fabric_EDK_KL_btBroadphasePair] LIB[btBroadphasePair *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePair] EDK[Fabric_EDK_KL_btBroadphasePair] LIB[btBroadphasePair *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBroadphasePair.=(
    btBroadphasePair that
    ) = "Bullet2__btBroadphasePair__MU__simple_ass_op__5ead3977932b0364ca9c1fb945f17a54";


/// \dfgPresetOmit
/// \internal
btBroadphasePair.appendDesc(io String string) {
  string += "btBroadphasePair:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBroadphasePairSortPredicate() = "Bullet2__btBroadphasePairSortPredicate__MU__empty_ctor__ffc34a0d8081ff0e6a51286cac670e1f";

/// \dfgPresetOmit
btBroadphasePairSortPredicate(
    btBroadphasePairSortPredicate that
    ) = "Bullet2__btBroadphasePairSortPredicate__MU__copy_ctor__6f5b5df4473730fc3e7dc71c23efdf49";

btBroadphasePairSortPredicate.cxx_delete() = "Bullet2__btBroadphasePairSortPredicate__MU__delete__11a80e711494a1f8515d2f71433a767e";

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Call Operators
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btBroadphasePairSortPredicate.cxx_call?(
    btBroadphasePair a,
    btBroadphasePair b
    )
 = "Bullet2__btBroadphasePairSortPredicate__CO__call_op__7dff87f7b66ad14acec444f113db3c0e";

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBroadphasePairSortPredicate] EDK[Fabric_EDK_KL_btBroadphasePairSortPredicate] LIB[btBroadphasePairSortPredicate *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBroadphasePairSortPredicate.=(
    btBroadphasePairSortPredicate that
    ) = "Bullet2__btBroadphasePairSortPredicate__MU__simple_ass_op__39a10516d17555b0eb1ef8824f80e2a5";


/// \dfgPresetOmit
/// \internal
btBroadphasePairSortPredicate.appendDesc(io String string) {
  string += "btBroadphasePairSortPredicate:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btAxisSweep3] EDK[Fabric_EDK_KL_btAxisSweep3] LIB[btAxisSweep3 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAxisSweep3] EDK[Fabric_EDK_KL_btAxisSweep3] LIB[btAxisSweep3 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAxisSweep3] EDK[Fabric_EDK_KL_btAxisSweep3] LIB[btAxisSweep3 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btAxisSweep3() = "Bullet2__btAxisSweep3__MU__empty_ctor__504c8ad0ef4e7461bb5d6f9e8622f5d4";

/// \dfgPresetOmit
btAxisSweep3(
    btAxisSweep3 that
    ) = "Bullet2__btAxisSweep3__MU__copy_ctor__f57ee83b04b88afc207d952c07eb2ed4";

/// \dfgPresetOmit
/// \internal
btAxisSweep3.__ctor(
    CxxbtVector3ConstRef worldAabbMin,
    CxxbtVector3ConstRef worldAabbMax
    ) = "Bullet2__btAxisSweep3__MU__ctor__5f1d0f9e7181914b55a3b1f6c413d625";

/// \dfgPresetOmit
btAxisSweep3(
    CxxbtVector3ConstRef worldAabbMin,
    CxxbtVector3ConstRef worldAabbMax
    ) {
    this.__ctor(
        worldAabbMin,
        worldAabbMax
        );
}

/// \dfgPresetOmit
/// \internal
btAxisSweep3.__ctor(
    CxxbtVector3ConstRef worldAabbMin,
    CxxbtVector3ConstRef worldAabbMax,
    UInt16 maxHandles
    ) = "Bullet2__btAxisSweep3__MU__ctor__0b2ca35b236bf62bcb0910d3b02668a2";

/// \dfgPresetOmit
btAxisSweep3(
    CxxbtVector3ConstRef worldAabbMin,
    CxxbtVector3ConstRef worldAabbMax,
    UInt16 maxHandles
    ) {
    this.__ctor(
        worldAabbMin,
        worldAabbMax,
        maxHandles
        );
}

btAxisSweep3(
    in
    btVector3
    worldAabbMin
    
    ,
    in
    btVector3
    worldAabbMax
    
    ,
    in
    UInt16
    maxHandles
    
    
    ) {
    
    CxxbtVector3ConstRef worldAabbMin__cxx = Make_CxxbtVector3ConstRef(worldAabbMin);
    
    CxxbtVector3ConstRef worldAabbMax__cxx = Make_CxxbtVector3ConstRef(worldAabbMax);
    
    this.__ctor(
        worldAabbMin__cxx,
        worldAabbMax__cxx,
        maxHandles
        );
    
    
    
}

btAxisSweep3(
    in
    btVector3
    worldAabbMin
    
    ,
    in
    btVector3
    worldAabbMax
    
    
    ) {
    
    CxxbtVector3ConstRef worldAabbMin__cxx = Make_CxxbtVector3ConstRef(worldAabbMin);
    
    CxxbtVector3ConstRef worldAabbMax__cxx = Make_CxxbtVector3ConstRef(worldAabbMax);
    this.__ctor(
        worldAabbMin__cxx,
        worldAabbMax__cxx
        );
    
    
}

btAxisSweep3.cxx_delete() = "Bullet2__btAxisSweep3__MU__delete__1a4bc65ac20f7f29c804b01f48788d3b";

//////////////////////////////////////////////////////////////////////////////
// KL[btAxisSweep3] EDK[Fabric_EDK_KL_btAxisSweep3] LIB[btAxisSweep3 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAxisSweep3] EDK[Fabric_EDK_KL_btAxisSweep3] LIB[btAxisSweep3 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAxisSweep3] EDK[Fabric_EDK_KL_btAxisSweep3] LIB[btAxisSweep3 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAxisSweep3.=(
    btAxisSweep3 that
    ) = "Bullet2__btAxisSweep3__MU__simple_ass_op__a420081a46b6e02bbce5d3fb2d12911a";


/// \dfgPresetOmit
/// \internal
btAxisSweep3.appendDesc(io String string) {
  string += "btAxisSweep3:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[bt32BitAxisSweep3] EDK[Fabric_EDK_KL_bt32BitAxisSweep3] LIB[bt32BitAxisSweep3 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[bt32BitAxisSweep3] EDK[Fabric_EDK_KL_bt32BitAxisSweep3] LIB[bt32BitAxisSweep3 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[bt32BitAxisSweep3] EDK[Fabric_EDK_KL_bt32BitAxisSweep3] LIB[bt32BitAxisSweep3 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

bt32BitAxisSweep3() = "Bullet2__bt32BitAxisSweep3__MU__empty_ctor__80a9c6278299faef8db26d074b5bdf37";

/// \dfgPresetOmit
bt32BitAxisSweep3(
    bt32BitAxisSweep3 that
    ) = "Bullet2__bt32BitAxisSweep3__MU__copy_ctor__bd36aef87f49dd454de5bdafdbd58695";

/// \dfgPresetOmit
/// \internal
bt32BitAxisSweep3.__ctor(
    CxxbtVector3ConstRef worldAabbMin,
    CxxbtVector3ConstRef worldAabbMax
    ) = "Bullet2__bt32BitAxisSweep3__MU__ctor__2523343eb7393ceb172c7ad89a2a2c62";

/// \dfgPresetOmit
bt32BitAxisSweep3(
    CxxbtVector3ConstRef worldAabbMin,
    CxxbtVector3ConstRef worldAabbMax
    ) {
    this.__ctor(
        worldAabbMin,
        worldAabbMax
        );
}

/// \dfgPresetOmit
/// \internal
bt32BitAxisSweep3.__ctor(
    CxxbtVector3ConstRef worldAabbMin,
    CxxbtVector3ConstRef worldAabbMax,
    UInt32 maxHandles
    ) = "Bullet2__bt32BitAxisSweep3__MU__ctor__81b54412f01ee6a1c41c2ae86fdd7858";

/// \dfgPresetOmit
bt32BitAxisSweep3(
    CxxbtVector3ConstRef worldAabbMin,
    CxxbtVector3ConstRef worldAabbMax,
    UInt32 maxHandles
    ) {
    this.__ctor(
        worldAabbMin,
        worldAabbMax,
        maxHandles
        );
}

bt32BitAxisSweep3(
    in
    btVector3
    worldAabbMin
    
    ,
    in
    btVector3
    worldAabbMax
    
    
    ) {
    
    CxxbtVector3ConstRef worldAabbMin__cxx = Make_CxxbtVector3ConstRef(worldAabbMin);
    
    CxxbtVector3ConstRef worldAabbMax__cxx = Make_CxxbtVector3ConstRef(worldAabbMax);
    this.__ctor(
        worldAabbMin__cxx,
        worldAabbMax__cxx
        );
    
    
}

bt32BitAxisSweep3(
    in
    btVector3
    worldAabbMin
    
    ,
    in
    btVector3
    worldAabbMax
    
    ,
    in
    UInt32
    maxHandles
    
    
    ) {
    
    CxxbtVector3ConstRef worldAabbMin__cxx = Make_CxxbtVector3ConstRef(worldAabbMin);
    
    CxxbtVector3ConstRef worldAabbMax__cxx = Make_CxxbtVector3ConstRef(worldAabbMax);
    
    this.__ctor(
        worldAabbMin__cxx,
        worldAabbMax__cxx,
        maxHandles
        );
    
    
    
}

bt32BitAxisSweep3.cxx_delete() = "Bullet2__bt32BitAxisSweep3__MU__delete__e8fc26e98387f0b36612bf91fc9a47f0";

//////////////////////////////////////////////////////////////////////////////
// KL[bt32BitAxisSweep3] EDK[Fabric_EDK_KL_bt32BitAxisSweep3] LIB[bt32BitAxisSweep3 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[bt32BitAxisSweep3] EDK[Fabric_EDK_KL_bt32BitAxisSweep3] LIB[bt32BitAxisSweep3 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[bt32BitAxisSweep3] EDK[Fabric_EDK_KL_bt32BitAxisSweep3] LIB[bt32BitAxisSweep3 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

bt32BitAxisSweep3.=(
    bt32BitAxisSweep3 that
    ) = "Bullet2__bt32BitAxisSweep3__MU__simple_ass_op__272f2e6b9a4d8ca70ce584947275e745";


/// \dfgPresetOmit
/// \internal
bt32BitAxisSweep3.appendDesc(io String string) {
  string += "bt32BitAxisSweep3:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithmConstructionInfo] EDK[Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo] LIB[btCollisionAlgorithmConstructionInfo *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmConstructionInfo] EDK[Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo] LIB[btCollisionAlgorithmConstructionInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmConstructionInfo] EDK[Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo] LIB[btCollisionAlgorithmConstructionInfo *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionAlgorithmConstructionInfo(
    btCollisionAlgorithmConstructionInfo that
    ) = "Bullet2__btCollisionAlgorithmConstructionInfo__MU__copy_ctor__c0ac321b7af4b403c4803612eef36395";

/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmConstructionInfo.__ctor(
    ) = "Bullet2__btCollisionAlgorithmConstructionInfo__MU__ctor__cd04e31984f98aebe51583e3db4df7a1";

/// \dfgPresetOmit
btCollisionAlgorithmConstructionInfo(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmConstructionInfo.__ctor(
    btDispatcher dispatcher,
    SInt32 temp
    ) = "Bullet2__btCollisionAlgorithmConstructionInfo__MU__ctor__7e2cd2f2868b9dffe4d9c38fbd878a96";

/// \dfgPresetOmit
btCollisionAlgorithmConstructionInfo(
    btDispatcher dispatcher,
    SInt32 temp
    ) {
    this.__ctor(
        dispatcher,
        temp
        );
}

btCollisionAlgorithmConstructionInfo.cxx_delete() = "Bullet2__btCollisionAlgorithmConstructionInfo__MU__delete__e493dfba6a51dfe534065daea40d7f48";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmConstructionInfo] EDK[Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo] LIB[btCollisionAlgorithmConstructionInfo *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmConstructionInfo] EDK[Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo] LIB[btCollisionAlgorithmConstructionInfo *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmConstructionInfo] EDK[Fabric_EDK_KL_btCollisionAlgorithmConstructionInfo] LIB[btCollisionAlgorithmConstructionInfo *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionAlgorithmConstructionInfo.=(
    btCollisionAlgorithmConstructionInfo that
    ) = "Bullet2__btCollisionAlgorithmConstructionInfo__MU__simple_ass_op__d7746ea6a3a30b7cb24a9852902b99f5";


/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmConstructionInfo.appendDesc(io String string) {
  string += "btCollisionAlgorithmConstructionInfo:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionAlgorithm(
    btCollisionAlgorithm that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btCollisionAlgorithm.cxx_delete() = "Bullet2__btCollisionAlgorithm__MU__delete__3bfa559ee6ce6374e66f85e8484af52d";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btCollisionAlgorithm__MU__meth_calculateTimeOfImpact__097a334238fbf0cef23450c227d883f1";

Float32
btCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithm] EDK[Fabric_EDK_KL_btCollisionAlgorithm] LIB[btCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionAlgorithm.=(
    btCollisionAlgorithm that
    ) = "Bullet2__btCollisionAlgorithm__MU__simple_ass_op__6c5a2c794e12afb5cdbfcfe5aedf8f8d";


/// \dfgPresetOmit
/// \internal
btCollisionAlgorithm.appendDesc(io String string) {
  string += "btCollisionAlgorithm:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDbvtProxy] EDK[Fabric_EDK_KL_btDbvtProxy] LIB[btDbvtProxy *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtProxy] EDK[Fabric_EDK_KL_btDbvtProxy] LIB[btDbvtProxy *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtProxy] EDK[Fabric_EDK_KL_btDbvtProxy] LIB[btDbvtProxy *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDbvtProxy() = "Bullet2__btDbvtProxy__MU__empty_ctor__5fde7652f6d6f60c39585862432a9eed";

/// \dfgPresetOmit
btDbvtProxy(
    btDbvtProxy that
    ) = "Bullet2__btDbvtProxy__MU__copy_ctor__d3d4059d45a452df229fadff6d21a6ef";

/// \dfgPresetOmit
/// \internal
btDbvtProxy.__ctor(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    ) = "Bullet2__btDbvtProxy__MU__ctor__5547672e6c7968941117d4ac44e93668";

/// \dfgPresetOmit
btDbvtProxy(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    ) {
    this.__ctor(
        aabbMin,
        aabbMax,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask
        );
}

btDbvtProxy(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    Data
    userPtr
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    
    ) {
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    
    this.__ctor(
        aabbMin__cxx,
        aabbMax__cxx,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask
        );
    
    
    
    
    
}

btDbvtProxy.cxx_delete() = "Bullet2__btDbvtProxy__MU__delete__ab8da795f38fdb09bb75768791530148";

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtProxy] EDK[Fabric_EDK_KL_btDbvtProxy] LIB[btDbvtProxy *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtProxy] EDK[Fabric_EDK_KL_btDbvtProxy] LIB[btDbvtProxy *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtProxy] EDK[Fabric_EDK_KL_btDbvtProxy] LIB[btDbvtProxy *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDbvtProxy.=(
    btDbvtProxy that
    ) = "Bullet2__btDbvtProxy__MU__simple_ass_op__55dfd2113791edd053f90653c90a9153";


/// \dfgPresetOmit
/// \internal
btDbvtProxy.appendDesc(io String string) {
  string += "btDbvtProxy:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDbvtBroadphase() = "Bullet2__btDbvtBroadphase__MU__empty_ctor__29c730b93abf96c25cb503426c189eeb";

/// \dfgPresetOmit
btDbvtBroadphase(
    btDbvtBroadphase that
    ) = "Bullet2__btDbvtBroadphase__MU__copy_ctor__c8557b103b4f9404f127f660d80f0822";

/// \dfgPresetOmit
/// \internal
btDbvtBroadphase.__ctor(
    ) = "Bullet2__btDbvtBroadphase__MU__ctor__36c3efb3df2322a85aa8eacd91f79fce";

/// \dfgPresetOmit
btDbvtBroadphase(
    ) {
    this.__ctor(
        );
}

btDbvtBroadphase.cxx_delete() = "Bullet2__btDbvtBroadphase__MU__delete__a73d7f55b605e616241f697261eba4dd";

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_collide!(
    btDispatcher dispatcher
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_collide__4345d9f42a1f98e20d4d5a9119b319b3";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_optimize!(
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_optimize__67ae27e1a3e9c6d79b06af8d909939f4";

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
btDbvtBroadphase.cxx_createProxy!(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    SInt32 shapeType,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask,
    btDispatcher dispatcher
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_createProxy__2bc885e13d4330546077512c5ba35934";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_destroyProxy!(
    btBroadphaseProxy proxy,
    btDispatcher dispatcher
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_destroyProxy__70af08b7d194402274b94fdc9aea283d";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_setAabb!(
    btBroadphaseProxy proxy,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    btDispatcher dispatcher
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_setAabb__b2e7ce874beffa16526c50863a3f4bf7";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_rayTest__4dd512670ee0e7c815a9075f29fc9c87";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback,
    CxxbtVector3ConstRef aabbMin
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_rayTest__d6de8e525b0808892c64c7247471e49e";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_rayTest__c62ef9253cde6ab620ae2f91935d32df";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_aabbTest!(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    btBroadphaseAabbCallback callback
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_aabbTest__3d06031e04012af14622c2f583248f87";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_getAabb?(
    btBroadphaseProxy proxy,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btDbvtBroadphase__CO__meth_getAabb__cf8cef66b3d115a0d31d005c331a96ea";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_calculateOverlappingPairs!(
    btDispatcher dispatcher
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_calculateOverlappingPairs__310de836bb11506fc987c1398b63b59a";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_getBroadphaseAabb?(
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btDbvtBroadphase__CO__meth_getBroadphaseAabb__2e2d81324c1aa978a501cdb3916c3519";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_printStats!(
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_printStats__b62f1d052d075405b3411dff0ea95409";

///reset broadphase internal structures, to ensure determinism/reproducability
/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_resetPool!(
    btDispatcher dispatcher
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_resetPool__ef3324a2ddb265cfc6b862996fa32a8e";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_performDeferredRemoval!(
    btDispatcher dispatcher
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_performDeferredRemoval__14a6842b79787246449823cc694bb8ff";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_setVelocityPrediction!(
    Float32 prediction
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_setVelocityPrediction__453562e9c9d43efb56b3c8788a4b51ea";

/// \dfgPresetOmit
/// \internal
Float32
btDbvtBroadphase.cxx_getVelocityPrediction?(
    )
 = "Bullet2__btDbvtBroadphase__CO__meth_getVelocityPrediction__7c5d62f47eb9a39668f095b8c253b216";

///this setAabbForceUpdate is similar to setAabb but always forces the aabb update.
///it is not part of the btBroadphaseInterface but specific to btDbvtBroadphase.
///it bypasses certain optimizations that prevent aabb updates (when the aabb shrinks), see
///http://code.google.com/p/bullet/issues/detail?id=223
/// \dfgPresetOmit
/// \internal

btDbvtBroadphase.cxx_setAabbForceUpdate!(
    btBroadphaseProxy absproxy,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    btDispatcher _arg3
    )
 = "Bullet2__btDbvtBroadphase__MU__meth_setAabbForceUpdate__5adf1a5676ef7846c43ea22c5c3af80a";

/// \dfgPresetOmit
/// \internal

btDbvtBroadphase_Cxxbenchmark(
    btBroadphaseInterface _arg0
    )
 = "Bullet2__btDbvtBroadphase__ST__meth_benchmark__a235447bd7c9d0a8ff811eafa2f16648";

///this setAabbForceUpdate is similar to setAabb but always forces the aabb update.
///it is not part of the btBroadphaseInterface but specific to btDbvtBroadphase.
///it bypasses certain optimizations that prevent aabb updates (when the aabb shrinks), see
///http://code.google.com/p/bullet/issues/detail?id=223

btDbvtBroadphase.setAabbForceUpdate!(
    in
    btBroadphaseProxy
    absproxy
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    btDispatcher
    _arg3
    
    
    )
{   
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    this.cxx_setAabbForceUpdate(
        absproxy,
        aabbMin__cxx,
        aabbMax__cxx,
        _arg3
        );
    
    
    
    
    
    
}


btDbvtBroadphase.collide!(
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    this.cxx_collide(
        dispatcher
        );
    
    
    
}

btBroadphaseProxy
btDbvtBroadphase.createProxy!(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    SInt32
    shapeType
    
    ,
    in
    Data
    userPtr
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    
    
    
    btBroadphaseProxy __res = 
    this.cxx_createProxy(
        aabbMin__cxx,
        aabbMax__cxx,
        shapeType,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask,
        dispatcher
        );
    
    
    
    
    
    
    
    
    return __res;
}


btDbvtBroadphase.destroyProxy!(
    in
    btBroadphaseProxy
    proxy
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    
    this.cxx_destroyProxy(
        proxy,
        dispatcher
        );
    
    
    
    
}


btDbvtBroadphase.getAabb?(
    in
    btBroadphaseProxy
    proxy
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        proxy,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btDbvtBroadphase.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    ,
    in
    btVector3
    aabbMin
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback,
        aabbMin__cxx
        );
    
    
    
    
    
    
}

Float32
btDbvtBroadphase.getVelocityPrediction?(
    )
{   
    Float32 __res = 
    this.cxx_getVelocityPrediction(
        );
    
    return __res;
}


btDbvtBroadphase.aabbTest!(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    btBroadphaseAabbCallback
    callback
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    this.cxx_aabbTest(
        aabbMin__cxx,
        aabbMax__cxx,
        callback
        );
    
    
    
    
    
}


btDbvtBroadphase.printStats!(
    )
{   
    
    this.cxx_printStats(
        );
    
    
}

///reset broadphase internal structures, to ensure determinism/reproducability

btDbvtBroadphase.resetPool!(
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    this.cxx_resetPool(
        dispatcher
        );
    
    
    
}


btDbvtBroadphase.optimize!(
    )
{   
    
    this.cxx_optimize(
        );
    
    
}


btDbvtBroadphase.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
    
    
}


btDbvtBroadphase.getBroadphaseAabb?(
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getBroadphaseAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}


btDbvtBroadphase_benchmark(
    in
    btBroadphaseInterface
    _arg0
    
    
    )
{   
    
    
    btDbvtBroadphase_Cxxbenchmark(
        _arg0
        );
    
    
    
}


btDbvtBroadphase.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback
        );
    
    
    
    
    
}


btDbvtBroadphase.setVelocityPrediction!(
    in
    Float32
    prediction
    
    
    )
{   
    
    
    this.cxx_setVelocityPrediction(
        prediction
        );
    
    
    
}


btDbvtBroadphase.performDeferredRemoval!(
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    this.cxx_performDeferredRemoval(
        dispatcher
        );
    
    
    
}


btDbvtBroadphase.setAabb!(
    in
    btBroadphaseProxy
    proxy
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    this.cxx_setAabb(
        proxy,
        aabbMin__cxx,
        aabbMax__cxx,
        dispatcher
        );
    
    
    
    
    
    
}


btDbvtBroadphase.calculateOverlappingPairs!(
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    this.cxx_calculateOverlappingPairs(
        dispatcher
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDbvtBroadphase] EDK[Fabric_EDK_KL_btDbvtBroadphase] LIB[btDbvtBroadphase *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDbvtBroadphase.=(
    btDbvtBroadphase that
    ) = "Bullet2__btDbvtBroadphase__MU__simple_ass_op__40fdc55a47a7f5267c09837ba6775188";


/// \dfgPresetOmit
/// \internal
btDbvtBroadphase.appendDesc(io String string) {
  string += "btDbvtBroadphase:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btDispatcherInfo(
    btDispatcherInfo that
    ) = "Bullet2__btDispatcherInfo__MU__copy_ctor__e4efc34bf20a7a8ef5d69dcc7e2ed525";

/// \dfgPresetOmit
/// \internal
btDispatcherInfo.__ctor(
    ) = "Bullet2__btDispatcherInfo__MU__ctor__37de72b98042e1987a9a7f21c520d0bd";

/// \dfgPresetOmit
btDispatcherInfo(
    ) {
    this.__ctor(
        );
}

~btDispatcherInfo() = "Bullet2__btDispatcherInfo__MU__dtor__cf45921905f066adbb55adf818493c5a";

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDispatcherInfo.=(
    btDispatcherInfo that
    ) = "Bullet2__btDispatcherInfo__MU__simple_ass_op__99274e0c8386075043bc4d606344d56e";



/// \dfgPresetOmit
/// \internal
btDispatcherInfo.appendDesc(io String string) {
  string += "btDispatcherInfo:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDispatcher() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btDispatcher(
    btDispatcher that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btDispatcher.cxx_delete() = "Bullet2__btDispatcher__MU__delete__ab78ce7838478029d5aae6a85c4c14ad";

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btDispatcher.cxx_needsCollision!(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btDispatcher__MU__meth_needsCollision__21d87836bf3f3553be43ed67568b1f70";

/// \dfgPresetOmit
/// \internal
Boolean
btDispatcher.cxx_needsResponse!(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btDispatcher__MU__meth_needsResponse__54c2893eb6ff2965681bf772676e428f";

/// \dfgPresetOmit
/// \internal
SInt32
btDispatcher.cxx_getNumManifolds?(
    )
 = "Bullet2__btDispatcher__CO__meth_getNumManifolds__70f52cbfc763113f2e3e0d2083037184";

/// \dfgPresetOmit
/// \internal
Data
btDispatcher.cxx_allocateCollisionAlgorithm!(
    SInt32 size
    )
 = "Bullet2__btDispatcher__MU__meth_allocateCollisionAlgorithm__fd0470dbec6ccbb9c83537a06b191b68";

/// \dfgPresetOmit
/// \internal

btDispatcher.cxx_freeCollisionAlgorithm!(
    Data ptr
    )
 = "Bullet2__btDispatcher__MU__meth_freeCollisionAlgorithm__af374f6c813fe20328b4a11329a914a6";


btDispatcher.freeCollisionAlgorithm!(
    in
    Data
    ptr
    
    
    )
{   
    
    
    this.cxx_freeCollisionAlgorithm(
        ptr
        );
    
    
    
}

Boolean
btDispatcher.needsResponse!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_needsResponse(
        body0,
        body1
        );
    
    
    
    return __res;
}

Boolean
btDispatcher.needsCollision!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_needsCollision(
        body0,
        body1
        );
    
    
    
    return __res;
}

Data
btDispatcher.allocateCollisionAlgorithm!(
    in
    SInt32
    size
    
    
    )
{   
    
    Data __res = 
    this.cxx_allocateCollisionAlgorithm(
        size
        );
    
    
    return __res;
}

SInt32
btDispatcher.getNumManifolds?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumManifolds(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDispatcher] EDK[Fabric_EDK_KL_btDispatcher] LIB[btDispatcher *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDispatcher.=(
    btDispatcher that
    ) = "Bullet2__btDispatcher__MU__simple_ass_op__952fb09fde594416096ed654e4009bfb";


/// \dfgPresetOmit
/// \internal
btDispatcher.appendDesc(io String string) {
  string += "btDispatcher:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSimpleBroadphaseProxy(
    btSimpleBroadphaseProxy that
    ) = "Bullet2__btSimpleBroadphaseProxy__MU__copy_ctor__a87c3ebf3d6e51f6aca807eb3daf666c";

/// \dfgPresetOmit
/// \internal
btSimpleBroadphaseProxy.__ctor(
    ) = "Bullet2__btSimpleBroadphaseProxy__MU__ctor__dca9e36479f82ae9e2d8872a7ff0ad25";

/// \dfgPresetOmit
btSimpleBroadphaseProxy(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btSimpleBroadphaseProxy.__ctor(
    CxxbtVector3ConstRef minpt,
    CxxbtVector3ConstRef maxpt,
    SInt32 shapeType,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    ) = "Bullet2__btSimpleBroadphaseProxy__MU__ctor__12668612efe6c5ef6dedb807e3011896";

/// \dfgPresetOmit
btSimpleBroadphaseProxy(
    CxxbtVector3ConstRef minpt,
    CxxbtVector3ConstRef maxpt,
    SInt32 shapeType,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    ) {
    this.__ctor(
        minpt,
        maxpt,
        shapeType,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask
        );
}

btSimpleBroadphaseProxy(
    in
    btVector3
    minpt
    
    ,
    in
    btVector3
    maxpt
    
    ,
    in
    SInt32
    shapeType
    
    ,
    in
    Data
    userPtr
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    
    ) {
    
    CxxbtVector3ConstRef minpt__cxx = Make_CxxbtVector3ConstRef(minpt);
    
    CxxbtVector3ConstRef maxpt__cxx = Make_CxxbtVector3ConstRef(maxpt);
    
    
    
    
    this.__ctor(
        minpt__cxx,
        maxpt__cxx,
        shapeType,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask
        );
    
    
    
    
    
    
}

btSimpleBroadphaseProxy.cxx_delete() = "Bullet2__btSimpleBroadphaseProxy__MU__delete__675df9ef62c9857d87a0e3ae1859cba1";

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSimpleBroadphaseProxy.cxx_SetNextFree!(
    SInt32 next
    )
 = "Bullet2__btSimpleBroadphaseProxy__MU__meth_SetNextFree__866d84a3d0b50746aacef7d7311cc7ea";

/// \dfgPresetOmit
/// \internal
SInt32
btSimpleBroadphaseProxy.cxx_GetNextFree?(
    )
 = "Bullet2__btSimpleBroadphaseProxy__CO__meth_GetNextFree__41eac7b6467f805881efa995bbe112d1";

SInt32
btSimpleBroadphaseProxy.GetNextFree?(
    )
{   
    SInt32 __res = 
    this.cxx_GetNextFree(
        );
    
    return __res;
}


btSimpleBroadphaseProxy.SetNextFree!(
    in
    SInt32
    next
    
    
    )
{   
    
    
    this.cxx_SetNextFree(
        next
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphaseProxy] EDK[Fabric_EDK_KL_btSimpleBroadphaseProxy] LIB[btSimpleBroadphaseProxy *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSimpleBroadphaseProxy.=(
    btSimpleBroadphaseProxy that
    ) = "Bullet2__btSimpleBroadphaseProxy__MU__simple_ass_op__5fbe0c5f167bf8e09c30447045329c3e";


/// \dfgPresetOmit
/// \internal
btSimpleBroadphaseProxy.appendDesc(io String string) {
  string += "btSimpleBroadphaseProxy:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSimpleBroadphase() = "Bullet2__btSimpleBroadphase__MU__empty_ctor__6a300957ff1797c85d2d95ab0a7d4a56";

/// \dfgPresetOmit
btSimpleBroadphase(
    btSimpleBroadphase that
    ) = "Bullet2__btSimpleBroadphase__MU__copy_ctor__db4503adbe6b8d27d8689d4e070a6408";

/// \dfgPresetOmit
/// \internal
btSimpleBroadphase.__ctor(
    ) = "Bullet2__btSimpleBroadphase__MU__ctor__c69b42c728c989cce0ba1860caa53ac7";

/// \dfgPresetOmit
btSimpleBroadphase(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btSimpleBroadphase.__ctor(
    SInt32 maxProxies
    ) = "Bullet2__btSimpleBroadphase__MU__ctor__d48459dd19ea78f45c85fa3c835b12a1";

/// \dfgPresetOmit
btSimpleBroadphase(
    SInt32 maxProxies
    ) {
    this.__ctor(
        maxProxies
        );
}

btSimpleBroadphase.cxx_delete() = "Bullet2__btSimpleBroadphase__MU__delete__b4cd345cd3568ab326dd9bd65b92b36a";

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btSimpleBroadphase_CxxaabbOverlap(
    btSimpleBroadphaseProxy proxy0,
    btSimpleBroadphaseProxy proxy1
    )
 = "Bullet2__btSimpleBroadphase__ST__meth_aabbOverlap__8f24fff2af845d860a3c4d4443eb095d";

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
btSimpleBroadphase.cxx_createProxy!(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    SInt32 shapeType,
    Data userPtr,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask,
    btDispatcher dispatcher
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_createProxy__aca96dbad5f031ba8346d1999f11a46e";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_calculateOverlappingPairs!(
    btDispatcher dispatcher
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_calculateOverlappingPairs__0067cd3f2c6eecc5011a832219978c23";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_destroyProxy!(
    btBroadphaseProxy proxy,
    btDispatcher dispatcher
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_destroyProxy__4eb8bfd9f6fe1ad5af52cdfcba3927c4";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_setAabb!(
    btBroadphaseProxy proxy,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    btDispatcher dispatcher
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_setAabb__ae09142fb649b76223a85fc164c6ef4e";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_getAabb?(
    btBroadphaseProxy proxy,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btSimpleBroadphase__CO__meth_getAabb__bb95ac06e851d64da0f6bfcae99a1e1a";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_rayTest__d6c68b9f2d6b9ca6988c81b38e18ed45";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback,
    CxxbtVector3ConstRef aabbMin
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_rayTest__e060fe5832198e1615a9514bc60eef65";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btBroadphaseRayCallback rayCallback,
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_rayTest__330fe6ea04482e89fece8ac18d990f23";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_aabbTest!(
    CxxbtVector3ConstRef aabbMin,
    CxxbtVector3ConstRef aabbMax,
    btBroadphaseAabbCallback callback
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_aabbTest__6d4dbaf50bfcdd0741b21a2498418b1c";

/// \dfgPresetOmit
/// \internal
Boolean
btSimpleBroadphase.cxx_testAabbOverlap!(
    btBroadphaseProxy proxy0,
    btBroadphaseProxy proxy1
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_testAabbOverlap__d66ce4092607397f4f28417f1424e53a";

///getAabb returns the axis aligned bounding box in the 'global' coordinate frame
///will add some transform later
/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_getBroadphaseAabb?(
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btSimpleBroadphase__CO__meth_getBroadphaseAabb__413964de6d0f4763e4f3dc122a67d743";

/// \dfgPresetOmit
/// \internal

btSimpleBroadphase.cxx_printStats!(
    )
 = "Bullet2__btSimpleBroadphase__MU__meth_printStats__ab9bf7afd382d07071f84e74c90f403f";

btBroadphaseProxy
btSimpleBroadphase.createProxy!(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    SInt32
    shapeType
    
    ,
    in
    Data
    userPtr
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    
    
    
    btBroadphaseProxy __res = 
    this.cxx_createProxy(
        aabbMin__cxx,
        aabbMax__cxx,
        shapeType,
        userPtr,
        collisionFilterGroup,
        collisionFilterMask,
        dispatcher
        );
    
    
    
    
    
    
    
    
    return __res;
}


btSimpleBroadphase.getAabb?(
    in
    btBroadphaseProxy
    proxy
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        proxy,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}


btSimpleBroadphase.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
    
    
}


btSimpleBroadphase.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback
        );
    
    
    
    
    
}

Boolean
btSimpleBroadphase_aabbOverlap(
    in
    btSimpleBroadphaseProxy
    proxy0
    
    ,
    in
    btSimpleBroadphaseProxy
    proxy1
    
    
    )
{   
    
    
    Boolean __res = 
    btSimpleBroadphase_CxxaabbOverlap(
        proxy0,
        proxy1
        );
    
    
    
    return __res;
}


btSimpleBroadphase.destroyProxy!(
    in
    btBroadphaseProxy
    proxy
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    
    this.cxx_destroyProxy(
        proxy,
        dispatcher
        );
    
    
    
    
}


btSimpleBroadphase.aabbTest!(
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    btBroadphaseAabbCallback
    callback
    
    
    )
{   
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    this.cxx_aabbTest(
        aabbMin__cxx,
        aabbMax__cxx,
        callback
        );
    
    
    
    
    
}


btSimpleBroadphase.calculateOverlappingPairs!(
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    this.cxx_calculateOverlappingPairs(
        dispatcher
        );
    
    
    
}

Boolean
btSimpleBroadphase.testAabbOverlap!(
    in
    btBroadphaseProxy
    proxy0
    
    ,
    in
    btBroadphaseProxy
    proxy1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_testAabbOverlap(
        proxy0,
        proxy1
        );
    
    
    
    return __res;
}

///getAabb returns the axis aligned bounding box in the 'global' coordinate frame
///will add some transform later

btSimpleBroadphase.getBroadphaseAabb?(
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getBroadphaseAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}


btSimpleBroadphase.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btBroadphaseRayCallback
    rayCallback
    
    ,
    in
    btVector3
    aabbMin
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        rayCallback,
        aabbMin__cxx
        );
    
    
    
    
    
    
}


btSimpleBroadphase.printStats!(
    )
{   
    
    this.cxx_printStats(
        );
    
    
}


btSimpleBroadphase.setAabb!(
    in
    btBroadphaseProxy
    proxy
    
    ,
    in
    btVector3
    aabbMin
    
    ,
    in
    btVector3
    aabbMax
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    CxxbtVector3ConstRef aabbMin__cxx = Make_CxxbtVector3ConstRef(aabbMin);
    
    CxxbtVector3ConstRef aabbMax__cxx = Make_CxxbtVector3ConstRef(aabbMax);
    
    
    this.cxx_setAabb(
        proxy,
        aabbMin__cxx,
        aabbMax__cxx,
        dispatcher
        );
    
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleBroadphase] EDK[Fabric_EDK_KL_btSimpleBroadphase] LIB[btSimpleBroadphase *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSimpleBroadphase.=(
    btSimpleBroadphase that
    ) = "Bullet2__btSimpleBroadphase__MU__simple_ass_op__3648cc42cc1ee9d5f147ebf5b0783bcc";


/// \dfgPresetOmit
/// \internal
btSimpleBroadphase.appendDesc(io String string) {
  string += "btSimpleBroadphase:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btActivatingCollisionAlgorithm] EDK[Fabric_EDK_KL_btActivatingCollisionAlgorithm] LIB[btActivatingCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btActivatingCollisionAlgorithm] EDK[Fabric_EDK_KL_btActivatingCollisionAlgorithm] LIB[btActivatingCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btActivatingCollisionAlgorithm] EDK[Fabric_EDK_KL_btActivatingCollisionAlgorithm] LIB[btActivatingCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btActivatingCollisionAlgorithm() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btActivatingCollisionAlgorithm(
    btActivatingCollisionAlgorithm that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btActivatingCollisionAlgorithm.cxx_delete() = "Bullet2__btActivatingCollisionAlgorithm__MU__delete__cb8997736d6145d764a9e8a6f1cecc41";

//////////////////////////////////////////////////////////////////////////////
// KL[btActivatingCollisionAlgorithm] EDK[Fabric_EDK_KL_btActivatingCollisionAlgorithm] LIB[btActivatingCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btActivatingCollisionAlgorithm] EDK[Fabric_EDK_KL_btActivatingCollisionAlgorithm] LIB[btActivatingCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btActivatingCollisionAlgorithm] EDK[Fabric_EDK_KL_btActivatingCollisionAlgorithm] LIB[btActivatingCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btActivatingCollisionAlgorithm.=(
    btActivatingCollisionAlgorithm that
    ) = "Bullet2__btActivatingCollisionAlgorithm__MU__simple_ass_op__d62ade44175a4cda727a84ab740d9dc9";


/// \dfgPresetOmit
/// \internal
btActivatingCollisionAlgorithm.appendDesc(io String string) {
  string += "btActivatingCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBox2dBox2dCollisionAlgorithm() = "Bullet2__btBox2dBox2dCollisionAlgorithm__MU__empty_ctor__f9b1ca36e16cfcc34dd33f304f130c66";

/// \dfgPresetOmit
btBox2dBox2dCollisionAlgorithm(
    btBox2dBox2dCollisionAlgorithm that
    ) = "Bullet2__btBox2dBox2dCollisionAlgorithm__MU__copy_ctor__c667cdea0a46922cd52b8022a3a416f2";

/// \dfgPresetOmit
/// \internal
btBox2dBox2dCollisionAlgorithm.__ctor(
    btCollisionAlgorithmConstructionInfo ci
    ) = "Bullet2__btBox2dBox2dCollisionAlgorithm__MU__ctor__70ad5fa2df31ab30727b1e3d0a7308b0";

/// \dfgPresetOmit
btBox2dBox2dCollisionAlgorithm(
    btCollisionAlgorithmConstructionInfo ci
    ) {
    this.__ctor(
        ci
        );
}

btBox2dBox2dCollisionAlgorithm.cxx_delete() = "Bullet2__btBox2dBox2dCollisionAlgorithm__MU__delete__70409cf29ad337270241f6854aa5988b";

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btBox2dBox2dCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btBox2dBox2dCollisionAlgorithm__MU__meth_calculateTimeOfImpact__ff8274d7165be2e3466064bc04d4da47";

Float32
btBox2dBox2dCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm] LIB[btBox2dBox2dCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBox2dBox2dCollisionAlgorithm.=(
    btBox2dBox2dCollisionAlgorithm that
    ) = "Bullet2__btBox2dBox2dCollisionAlgorithm__MU__simple_ass_op__f5a5cb553fa0460670c1e67ce8ec4f5d";


/// \dfgPresetOmit
/// \internal
btBox2dBox2dCollisionAlgorithm.appendDesc(io String string) {
  string += "btBox2dBox2dCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBox2dBox2dCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc] LIB[btBox2dBox2dCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc] LIB[btBox2dBox2dCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc] LIB[btBox2dBox2dCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBox2dBox2dCollisionAlgorithm_CreateFunc() = "Bullet2__btBox2dBox2dCollisionAlgorithm_CreateFunc__MU__empty_ctor__098506698acfacb6c4fdbaff949df5a8";

/// \dfgPresetOmit
btBox2dBox2dCollisionAlgorithm_CreateFunc(
    btBox2dBox2dCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btBox2dBox2dCollisionAlgorithm_CreateFunc__MU__copy_ctor__3145e6c2c0f144157820fcedaf8b5410";

btBox2dBox2dCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btBox2dBox2dCollisionAlgorithm_CreateFunc__MU__delete__32501fbec016e1e0772072efca9cc197";

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc] LIB[btBox2dBox2dCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc] LIB[btBox2dBox2dCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBox2dBox2dCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBox2dBox2dCollisionAlgorithm_CreateFunc] LIB[btBox2dBox2dCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBox2dBox2dCollisionAlgorithm_CreateFunc.=(
    btBox2dBox2dCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btBox2dBox2dCollisionAlgorithm_CreateFunc__MU__simple_ass_op__4634e2ff63d4046bd2c7020866d1fc46";


/// \dfgPresetOmit
/// \internal
btBox2dBox2dCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btBox2dBox2dCollisionAlgorithm_CreateFunc:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBoxBoxCollisionAlgorithm() = "Bullet2__btBoxBoxCollisionAlgorithm__MU__empty_ctor__e9d82c04e6d970e156ef10af464cd79b";

/// \dfgPresetOmit
btBoxBoxCollisionAlgorithm(
    btBoxBoxCollisionAlgorithm that
    ) = "Bullet2__btBoxBoxCollisionAlgorithm__MU__copy_ctor__6eb82cbdf9cf32a26a8b0379fc7e8663";

/// \dfgPresetOmit
/// \internal
btBoxBoxCollisionAlgorithm.__ctor(
    btCollisionAlgorithmConstructionInfo ci
    ) = "Bullet2__btBoxBoxCollisionAlgorithm__MU__ctor__80f9e07c5f490d1c48905eed70a5d2e8";

/// \dfgPresetOmit
btBoxBoxCollisionAlgorithm(
    btCollisionAlgorithmConstructionInfo ci
    ) {
    this.__ctor(
        ci
        );
}

btBoxBoxCollisionAlgorithm.cxx_delete() = "Bullet2__btBoxBoxCollisionAlgorithm__MU__delete__87e33ff84751aef812281f1d1e085001";

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btBoxBoxCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btBoxBoxCollisionAlgorithm__MU__meth_calculateTimeOfImpact__19ddecbe0d609fcf731714da7983f825";

Float32
btBoxBoxCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm] LIB[btBoxBoxCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBoxBoxCollisionAlgorithm.=(
    btBoxBoxCollisionAlgorithm that
    ) = "Bullet2__btBoxBoxCollisionAlgorithm__MU__simple_ass_op__b402c732a232f1e52e59edae8a1a1ff4";


/// \dfgPresetOmit
/// \internal
btBoxBoxCollisionAlgorithm.appendDesc(io String string) {
  string += "btBoxBoxCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc] LIB[btBoxBoxCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc] LIB[btBoxBoxCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc] LIB[btBoxBoxCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBoxBoxCollisionAlgorithm_CreateFunc() = "Bullet2__btBoxBoxCollisionAlgorithm_CreateFunc__MU__empty_ctor__456b6f8fbd677d009454432b318eeecf";

/// \dfgPresetOmit
btBoxBoxCollisionAlgorithm_CreateFunc(
    btBoxBoxCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btBoxBoxCollisionAlgorithm_CreateFunc__MU__copy_ctor__990e358bfd1896ca4814f89ac4767cf3";

btBoxBoxCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btBoxBoxCollisionAlgorithm_CreateFunc__MU__delete__8ecc27138d5c1ec61542d6c89f35224d";

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc] LIB[btBoxBoxCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc] LIB[btBoxBoxCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btBoxBoxCollisionAlgorithm_CreateFunc] LIB[btBoxBoxCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBoxBoxCollisionAlgorithm_CreateFunc.=(
    btBoxBoxCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btBoxBoxCollisionAlgorithm_CreateFunc__MU__simple_ass_op__dd43d380d82f00797203c2b908d4dbd1";


/// \dfgPresetOmit
/// \internal
btBoxBoxCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btBoxBoxCollisionAlgorithm_CreateFunc:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBoxBoxDetector] EDK[Fabric_EDK_KL_btBoxBoxDetector] LIB[btBoxBoxDetector *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxDetector] EDK[Fabric_EDK_KL_btBoxBoxDetector] LIB[btBoxBoxDetector *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxDetector] EDK[Fabric_EDK_KL_btBoxBoxDetector] LIB[btBoxBoxDetector *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btBoxBoxDetector() = "Bullet2__btBoxBoxDetector__MU__empty_ctor__5083f96c11246399ef0f143190931aaf";

/// \dfgPresetOmit
btBoxBoxDetector(
    btBoxBoxDetector that
    ) = "Bullet2__btBoxBoxDetector__MU__copy_ctor__85a138ab2a094103d229b3967feeeeb9";

/// \dfgPresetOmit
/// \internal
btBoxBoxDetector.__ctor(
    btBoxShape box1,
    btBoxShape box2
    ) = "Bullet2__btBoxBoxDetector__MU__ctor__67e5a993b89e0860d02b50c919f39b5a";

/// \dfgPresetOmit
btBoxBoxDetector(
    btBoxShape box1,
    btBoxShape box2
    ) {
    this.__ctor(
        box1,
        box2
        );
}

btBoxBoxDetector.cxx_delete() = "Bullet2__btBoxBoxDetector__MU__delete__ac66253987ca6f995f045894c2f8ac91";

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxDetector] EDK[Fabric_EDK_KL_btBoxBoxDetector] LIB[btBoxBoxDetector *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxDetector] EDK[Fabric_EDK_KL_btBoxBoxDetector] LIB[btBoxBoxDetector *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBoxBoxDetector] EDK[Fabric_EDK_KL_btBoxBoxDetector] LIB[btBoxBoxDetector *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBoxBoxDetector.=(
    btBoxBoxDetector that
    ) = "Bullet2__btBoxBoxDetector__MU__simple_ass_op__b0ae65d61be10f25e397a856cdcbe98a";


/// \dfgPresetOmit
/// \internal
btBoxBoxDetector.appendDesc(io String string) {
  string += "btBoxBoxDetector:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionConfiguration() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btCollisionConfiguration(
    btCollisionConfiguration that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btCollisionConfiguration.cxx_delete() = "Bullet2__btCollisionConfiguration__MU__delete__0d8dde4d26538e1882a275470ee7cde6";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmCreateFunc
btCollisionConfiguration.cxx_getCollisionAlgorithmCreateFunc!(
    SInt32 proxyType0,
    SInt32 proxyType1
    )
 = "Bullet2__btCollisionConfiguration__MU__meth_getCollisionAlgorithmCreateFunc__ce798439a4dabdbb71782a9f83083f2a";

/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmCreateFunc
btCollisionConfiguration.cxx_getClosestPointsAlgorithmCreateFunc!(
    SInt32 proxyType0,
    SInt32 proxyType1
    )
 = "Bullet2__btCollisionConfiguration__MU__meth_getClosestPointsAlgorithmCreateFunc__241f83ef13d48611db40467e35e6bc3c";

btCollisionAlgorithmCreateFunc
btCollisionConfiguration.getClosestPointsAlgorithmCreateFunc!(
    in
    SInt32
    proxyType0
    
    ,
    in
    SInt32
    proxyType1
    
    
    )
{   
    
    
    btCollisionAlgorithmCreateFunc __res = 
    this.cxx_getClosestPointsAlgorithmCreateFunc(
        proxyType0,
        proxyType1
        );
    
    
    
    return __res;
}

btCollisionAlgorithmCreateFunc
btCollisionConfiguration.getCollisionAlgorithmCreateFunc!(
    in
    SInt32
    proxyType0
    
    ,
    in
    SInt32
    proxyType1
    
    
    )
{   
    
    
    btCollisionAlgorithmCreateFunc __res = 
    this.cxx_getCollisionAlgorithmCreateFunc(
        proxyType0,
        proxyType1
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionConfiguration] EDK[Fabric_EDK_KL_btCollisionConfiguration] LIB[btCollisionConfiguration *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionConfiguration.=(
    btCollisionConfiguration that
    ) = "Bullet2__btCollisionConfiguration__MU__simple_ass_op__4736e9ccc488bbe10eafc0cb12309716";


/// \dfgPresetOmit
/// \internal
btCollisionConfiguration.appendDesc(io String string) {
  string += "btCollisionConfiguration:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionAlgorithmCreateFunc] EDK[Fabric_EDK_KL_btCollisionAlgorithmCreateFunc] LIB[btCollisionAlgorithmCreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmCreateFunc] EDK[Fabric_EDK_KL_btCollisionAlgorithmCreateFunc] LIB[btCollisionAlgorithmCreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmCreateFunc] EDK[Fabric_EDK_KL_btCollisionAlgorithmCreateFunc] LIB[btCollisionAlgorithmCreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionAlgorithmCreateFunc(
    btCollisionAlgorithmCreateFunc that
    ) = "Bullet2__btCollisionAlgorithmCreateFunc__MU__copy_ctor__aeb1e2f3fb50e0782c5d4ca96b150724";

/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmCreateFunc.__ctor(
    ) = "Bullet2__btCollisionAlgorithmCreateFunc__MU__ctor__371c4722d22398291dead528c7abb504";

/// \dfgPresetOmit
btCollisionAlgorithmCreateFunc(
    ) {
    this.__ctor(
        );
}

btCollisionAlgorithmCreateFunc.cxx_delete() = "Bullet2__btCollisionAlgorithmCreateFunc__MU__delete__ff1a2b702d33f598ecc72b417367704e";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmCreateFunc] EDK[Fabric_EDK_KL_btCollisionAlgorithmCreateFunc] LIB[btCollisionAlgorithmCreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmCreateFunc] EDK[Fabric_EDK_KL_btCollisionAlgorithmCreateFunc] LIB[btCollisionAlgorithmCreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionAlgorithmCreateFunc] EDK[Fabric_EDK_KL_btCollisionAlgorithmCreateFunc] LIB[btCollisionAlgorithmCreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionAlgorithmCreateFunc.=(
    btCollisionAlgorithmCreateFunc that
    ) = "Bullet2__btCollisionAlgorithmCreateFunc__MU__simple_ass_op__fa2e010e6d0a9c742f07c5e9771a8747";


/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmCreateFunc.appendDesc(io String string) {
  string += "btCollisionAlgorithmCreateFunc:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionDispatcher() = "Bullet2__btCollisionDispatcher__MU__empty_ctor__592a34154ce1da47df48d8d96e22811f";

/// \dfgPresetOmit
btCollisionDispatcher(
    btCollisionDispatcher that
    ) = "Bullet2__btCollisionDispatcher__MU__copy_ctor__f0833087b09a5043f93ce1696e9e5ccc";

/// \dfgPresetOmit
/// \internal
btCollisionDispatcher.__ctor(
    btCollisionConfiguration collisionConfiguration
    ) = "Bullet2__btCollisionDispatcher__MU__ctor__641c125d245062b5063504b798fd9207";

/// \dfgPresetOmit
btCollisionDispatcher(
    btCollisionConfiguration collisionConfiguration
    ) {
    this.__ctor(
        collisionConfiguration
        );
}

btCollisionDispatcher.cxx_delete() = "Bullet2__btCollisionDispatcher__MU__delete__c593c070367a60d80f6cdedc70c398e9";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionDispatcher.cxx_getDispatcherFlags?(
    )
 = "Bullet2__btCollisionDispatcher__CO__meth_getDispatcherFlags__3fb68eb3f0c985c3ee77bbc9f6a4bbef";

/// \dfgPresetOmit
/// \internal

btCollisionDispatcher.cxx_setDispatcherFlags!(
    SInt32 flags
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_setDispatcherFlags__cbeee3c4d90eebcc042f9aefc2f3c982";

///registerCollisionCreateFunc allows registration of custom/alternative collision create functions
/// \dfgPresetOmit
/// \internal

btCollisionDispatcher.cxx_registerCollisionCreateFunc!(
    SInt32 proxyType0,
    SInt32 proxyType1,
    btCollisionAlgorithmCreateFunc createFunc
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_registerCollisionCreateFunc__63b0d017796af54c753716de1a6fc0be";

/// \dfgPresetOmit
/// \internal

btCollisionDispatcher.cxx_registerClosestPointsCreateFunc!(
    SInt32 proxyType0,
    SInt32 proxyType1,
    btCollisionAlgorithmCreateFunc createFunc
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_registerClosestPointsCreateFunc__c4118199c4e4d648668a1ba8cc211cab";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionDispatcher.cxx_getNumManifolds?(
    )
 = "Bullet2__btCollisionDispatcher__CO__meth_getNumManifolds__eefd5d9429b1a479f9cfbc80a380a075";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionDispatcher.cxx_needsCollision!(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_needsCollision__21b8099f8d273f932d7364ab5581563d";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionDispatcher.cxx_needsResponse!(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_needsResponse__cf97960d2b4d1bc3cd05fc1922b0602e";

/// \dfgPresetOmit
/// \internal

btCollisionDispatcher_CxxdefaultNearCallback(
    btBroadphasePair collisionPair,
    btCollisionDispatcher dispatcher,
    CxxbtDispatcherInfoConstRef dispatchInfo
    )
 = "Bullet2__btCollisionDispatcher__ST__meth_defaultNearCallback__8445434ae7c82115b565a3027b938805";

/// \dfgPresetOmit
/// \internal
Data
btCollisionDispatcher.cxx_allocateCollisionAlgorithm!(
    SInt32 size
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_allocateCollisionAlgorithm__730cb600d7c93bbfcc339be66e3a6a14";

/// \dfgPresetOmit
/// \internal

btCollisionDispatcher.cxx_freeCollisionAlgorithm!(
    Data ptr
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_freeCollisionAlgorithm__1892832600f14c8d4b91fc26bee0c86e";

/// \dfgPresetOmit
/// \internal
btCollisionConfiguration
btCollisionDispatcher.cxx_getCollisionConfiguration!(
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_getCollisionConfiguration__ba9ed30fc552b013dddad696bd0c9dd5";

/// \dfgPresetOmit
/// \internal
btCollisionConfiguration
btCollisionDispatcher.cxx_getCollisionConfiguration?(
    )
 = "Bullet2__btCollisionDispatcher__CO__meth_getCollisionConfiguration__705185e9500352188db92693bd0f5442";

/// \dfgPresetOmit
/// \internal

btCollisionDispatcher.cxx_setCollisionConfiguration!(
    btCollisionConfiguration config
    )
 = "Bullet2__btCollisionDispatcher__MU__meth_setCollisionConfiguration__30d0e71da1cf48e446a8227c46cf9638";

Boolean
btCollisionDispatcher.needsResponse!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_needsResponse(
        body0,
        body1
        );
    
    
    
    return __res;
}


btCollisionDispatcher.registerClosestPointsCreateFunc!(
    in
    SInt32
    proxyType0
    
    ,
    in
    SInt32
    proxyType1
    
    ,
    in
    btCollisionAlgorithmCreateFunc
    createFunc
    
    
    )
{   
    
    
    
    
    this.cxx_registerClosestPointsCreateFunc(
        proxyType0,
        proxyType1,
        createFunc
        );
    
    
    
    
    
}

Boolean
btCollisionDispatcher.needsCollision!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_needsCollision(
        body0,
        body1
        );
    
    
    
    return __res;
}


btCollisionDispatcher.freeCollisionAlgorithm!(
    in
    Data
    ptr
    
    
    )
{   
    
    
    this.cxx_freeCollisionAlgorithm(
        ptr
        );
    
    
    
}

SInt32
btCollisionDispatcher.getDispatcherFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getDispatcherFlags(
        );
    
    return __res;
}


btCollisionDispatcher_defaultNearCallback(
    in
    btBroadphasePair
    collisionPair
    
    ,
    in
    btCollisionDispatcher
    dispatcher
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    btCollisionDispatcher_CxxdefaultNearCallback(
        collisionPair,
        dispatcher,
        dispatchInfo__cxx
        );
    
    
    
    
    
}

btCollisionConfiguration
btCollisionDispatcher.getCollisionConfiguration!(
    )
{   
    btCollisionConfiguration __res = 
    this.cxx_getCollisionConfiguration(
        );
    
    return __res;
}


btCollisionDispatcher.setCollisionConfiguration!(
    in
    btCollisionConfiguration
    config
    
    
    )
{   
    
    
    this.cxx_setCollisionConfiguration(
        config
        );
    
    
    
}

///registerCollisionCreateFunc allows registration of custom/alternative collision create functions

btCollisionDispatcher.registerCollisionCreateFunc!(
    in
    SInt32
    proxyType0
    
    ,
    in
    SInt32
    proxyType1
    
    ,
    in
    btCollisionAlgorithmCreateFunc
    createFunc
    
    
    )
{   
    
    
    
    
    this.cxx_registerCollisionCreateFunc(
        proxyType0,
        proxyType1,
        createFunc
        );
    
    
    
    
    
}


btCollisionDispatcher.setDispatcherFlags!(
    in
    SInt32
    flags
    
    
    )
{   
    
    
    this.cxx_setDispatcherFlags(
        flags
        );
    
    
    
}

Data
btCollisionDispatcher.allocateCollisionAlgorithm!(
    in
    SInt32
    size
    
    
    )
{   
    
    Data __res = 
    this.cxx_allocateCollisionAlgorithm(
        size
        );
    
    
    return __res;
}

SInt32
btCollisionDispatcher.getNumManifolds?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumManifolds(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionDispatcher] EDK[Fabric_EDK_KL_btCollisionDispatcher] LIB[btCollisionDispatcher *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionDispatcher.=(
    btCollisionDispatcher that
    ) = "Bullet2__btCollisionDispatcher__MU__simple_ass_op__ec3e2b2da42620d455b14c3acc6793c2";


/// \dfgPresetOmit
/// \internal
btCollisionDispatcher.appendDesc(io String string) {
  string += "btCollisionDispatcher:MANAGED";
}





//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_btCollisionObject] EDK[Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject] LIB[btAlignedObjectArray< btCollisionObject * >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectConstPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstPtr] LIB[btAlignedObjectArray< btCollisionObject * > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectConstPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstPtr] LIB[btAlignedObjectArray< btCollisionObject * > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_size on null CxxbtAlignedObjectArray_btCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_capacity on null CxxbtAlignedObjectArray_btCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_findBinarySearch?(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_btCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_findLinearSearch?(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_btCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.findLinearSearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.findBinarySearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectConstPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstPtr] LIB[btAlignedObjectArray< btCollisionObject * > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionObject
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_getAtIndex on null CxxbtAlignedObjectArray_btCollisionObjectConstPtr";
    return this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutablePtr] LIB[btAlignedObjectArray< btCollisionObject * > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutablePtr] LIB[btAlignedObjectArray< btCollisionObject * > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_size on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_clear on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_pop_back on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_resize on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_push_back!(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_push_back on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_capacity on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_reserve on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_swap on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_findBinarySearch?(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_findLinearSearch?(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_removeAtIndex on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_remove!(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_remove on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_btCollisionObjectConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_copyFromArray on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.push_back!(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.copyFromArray!(
    in
    btAlignedObjectArray_btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_btCollisionObjectConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_btCollisionObjectConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectPtr.findLinearSearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectPtr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.remove!(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectPtr.findBinarySearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectPtr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectPtr.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutablePtr] LIB[btAlignedObjectArray< btCollisionObject * > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionObject
CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_getAtIndex on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    return this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectPtr] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutablePtr] LIB[btAlignedObjectArray< btCollisionObject * > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_setAtIndex!(
    UInt64 index,
    btCollisionObject value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_setAtIndex on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectConstRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstRef] LIB[btAlignedObjectArray< btCollisionObject * > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectConstRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstRef] LIB[btAlignedObjectArray< btCollisionObject * > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectConstRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstRef] LIB[btAlignedObjectArray< btCollisionObject * > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_size on null CxxbtAlignedObjectArray_btCollisionObjectConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_capacity on null CxxbtAlignedObjectArray_btCollisionObjectConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_findBinarySearch?(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_findBinarySearch on null CxxbtAlignedObjectArray_btCollisionObjectConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_findLinearSearch?(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_findLinearSearch on null CxxbtAlignedObjectArray_btCollisionObjectConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstRef.findLinearSearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstRef.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstRef.findBinarySearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectConstRef.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectConstRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectConstRef] LIB[btAlignedObjectArray< btCollisionObject * > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionObject
CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_getAtIndex on null CxxbtAlignedObjectArray_btCollisionObjectConstRef";
    return this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutableRef] LIB[btAlignedObjectArray< btCollisionObject * > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutableRef] LIB[btAlignedObjectArray< btCollisionObject * > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_size on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_clear on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_pop_back on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_resize on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_push_back!(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_push_back on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_capacity on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_reserve on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_swap on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_findBinarySearch?(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_findBinarySearch on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_findLinearSearch?(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_findLinearSearch on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_removeAtIndex on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_remove!(
    CxxbtCollisionObjectRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_remove on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_btCollisionObjectConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_copyFromArray on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectRef.findLinearSearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectRef.findBinarySearch?(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectRef.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.remove!(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.push_back!(
    io
    btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtCollisionObjectRef _arg0__cxx = Make_CxxbtCollisionObjectRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_btCollisionObjectRef.copyFromArray!(
    in
    btAlignedObjectArray_btCollisionObject
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_btCollisionObjectConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_btCollisionObjectConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_btCollisionObjectRef.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutableRef] LIB[btAlignedObjectArray< btCollisionObject * > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionObject
CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_getAtIndex on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    return this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_btCollisionObjectRef] EDK[CxxbtAlignedObjectArray_btCollisionObjectMutableRef] LIB[btAlignedObjectArray< btCollisionObject * > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_setAtIndex!(
    UInt64 index,
    btCollisionObject value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_setAtIndex on null CxxbtAlignedObjectArray_btCollisionObjectRef";
    this.ptr.data()->{ btAlignedObjectArray_btCollisionObject }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxbtAlignedObjectArray_btCollisionObjectConstPtr
// CxxbtAlignedObjectArray_btCollisionObjectPtr
// CxxbtAlignedObjectArray_btCollisionObjectConstRef
// CxxbtAlignedObjectArray_btCollisionObjectRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstPtr(btAlignedObjectArray_btCollisionObject array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstPtr(btAlignedObjectArray_btCollisionObject array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstPtr(btAlignedObjectArray_btCollisionObject value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstPtr Make_CxxbtAlignedObjectArray_btCollisionObjectConstPtr(btAlignedObjectArray_btCollisionObject value) {
  return CxxbtAlignedObjectArray_btCollisionObjectConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectPtr(btAlignedObjectArray_btCollisionObject array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectPtr(btAlignedObjectArray_btCollisionObject array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectPtr(btAlignedObjectArray_btCollisionObject value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectPtr Make_CxxbtAlignedObjectArray_btCollisionObjectPtr(btAlignedObjectArray_btCollisionObject value) {
  return CxxbtAlignedObjectArray_btCollisionObjectPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef(btAlignedObjectArray_btCollisionObject array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef(btAlignedObjectArray_btCollisionObject array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef(btAlignedObjectArray_btCollisionObject value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef Make_CxxbtAlignedObjectArray_btCollisionObjectConstRef(btAlignedObjectArray_btCollisionObject value) {
  return CxxbtAlignedObjectArray_btCollisionObjectConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef(btAlignedObjectArray_btCollisionObject array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef(btAlignedObjectArray_btCollisionObject array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef(btAlignedObjectArray_btCollisionObject value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef Make_CxxbtAlignedObjectArray_btCollisionObjectRef(btAlignedObjectArray_btCollisionObject value) {
  return CxxbtAlignedObjectArray_btCollisionObjectRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtAlignedObjectArray_btCollisionObjectConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtAlignedObjectArray_btCollisionObjectConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_getAt on null CxxbtAlignedObjectArray_btCollisionObjectConstPtr";
  return CxxbtAlignedObjectArray_btCollisionObjectConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef CxxbtAlignedObjectArray_btCollisionObjectConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtAlignedObjectArray_btCollisionObjectConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_getAt on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
  return CxxbtAlignedObjectArray_btCollisionObjectRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_btCollisionObject()));
}

/// Same as for CxxbtAlignedObjectArray_btCollisionObjectConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_setAt(Index i, btAlignedObjectArray_btCollisionObject v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_btCollisionObjectPtr.cxx_setAt on null CxxbtAlignedObjectArray_btCollisionObjectPtr";
  this.ptr.offset(i)->{ btAlignedObjectArray_btCollisionObject } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef(CxxbtAlignedObjectArray_btCollisionObjectConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef.=(CxxbtAlignedObjectArray_btCollisionObjectConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btAlignedObjectArray_btCollisionObject value
/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_btCollisionObject CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_btCollisionObjectConstRef.cxx_get on null CxxbtAlignedObjectArray_btCollisionObjectConstRef";
  return this.ptr.data()->{ btAlignedObjectArray_btCollisionObject };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_set(btAlignedObjectArray_btCollisionObject value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_btCollisionObjectRef.cxx_set on null CxxbtAlignedObjectArray_btCollisionObjectRef";
  this.ptr.data()->{ btAlignedObjectArray_btCollisionObject } = value;
}

/// Assignment of btAlignedObjectArray_btCollisionObject
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef.=(btAlignedObjectArray_btCollisionObject value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef.appendDesc(io String s) {
  s += this.cxx_get();
}






//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionObject(
    btCollisionObject that
    ) = "Bullet2__btCollisionObject__MU__copy_ctor__56c4e75a65299658695bea4096af1e7f";

/// \dfgPresetOmit
/// \internal
btCollisionObject.__ctor(
    ) = "Bullet2__btCollisionObject__MU__ctor__1e75d5bb2067aa0eef5fe2a883a2e02f";

/// \dfgPresetOmit
btCollisionObject(
    ) {
    this.__ctor(
        );
}

btCollisionObject.cxx_delete() = "Bullet2__btCollisionObject__MU__delete__29b9a6d1bddd1f84232eb1e201b119b9";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_mergesSimulationIslands?(
    )
 = "Bullet2__btCollisionObject__CO__meth_mergesSimulationIslands__8dc0ec3cffa2f78eae24c486df89df21";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btCollisionObject.cxx_getAnisotropicFriction?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getAnisotropicFriction__18e9e4ba393fd3a2531cf5ac8736e728";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction
    )
 = "Bullet2__btCollisionObject__MU__meth_setAnisotropicFriction__0efcb3497bedfbebe48e19a5986e990a";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction,
    SInt32 frictionMode
    )
 = "Bullet2__btCollisionObject__MU__meth_setAnisotropicFriction__e0c93c9f821e689bb3429643944af0ce";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_hasAnisotropicFriction?(
    )
 = "Bullet2__btCollisionObject__CO__meth_hasAnisotropicFriction__be80ccc8f23d94959b2a6d5bddced0cd";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
 = "Bullet2__btCollisionObject__CO__meth_hasAnisotropicFriction__ff4bb6e60ed3190878660157ce298dd1";

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setContactProcessingThreshold!(
    Float32 contactProcessingThreshold
    )
 = "Bullet2__btCollisionObject__MU__meth_setContactProcessingThreshold__1aa1d599a24f7f786dd1f0941a25ea6e";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getContactProcessingThreshold?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getContactProcessingThreshold__7bc5ed723c1bfcdd987ac172844e8cad";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_isStaticObject?(
    )
 = "Bullet2__btCollisionObject__CO__meth_isStaticObject__5c26969945c284c6560bdaeb3dbc1b59";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_isKinematicObject?(
    )
 = "Bullet2__btCollisionObject__CO__meth_isKinematicObject__68310a1eaccbc1c5f0a4f4644f7c83de";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_isStaticOrKinematicObject?(
    )
 = "Bullet2__btCollisionObject__CO__meth_isStaticOrKinematicObject__8ada991a240e2cc8921b0cad6e6dfe45";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_hasContactResponse?(
    )
 = "Bullet2__btCollisionObject__CO__meth_hasContactResponse__75e72e69d28bc37550a6f22fa74edd1b";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setCollisionShape!(
    btCollisionShape collisionShape
    )
 = "Bullet2__btCollisionObject__MU__meth_setCollisionShape__6d75c3dd3d40f93b0b59af34873cac25";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionObject.cxx_getCollisionShape?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getCollisionShape__c46f8494ca1830a606f991f98b61e04c";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionObject.cxx_getCollisionShape!(
    )
 = "Bullet2__btCollisionObject__MU__meth_getCollisionShape__3aad073fd442f0b411d906218ff8ebf4";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setIgnoreCollisionCheck!(
    btCollisionObject co,
    Boolean ignoreCollisionCheck
    )
 = "Bullet2__btCollisionObject__MU__meth_setIgnoreCollisionCheck__d15944b3a9bc2dcf6ce0fd725309e148";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_checkCollideWithOverride?(
    btCollisionObject co
    )
 = "Bullet2__btCollisionObject__CO__meth_checkCollideWithOverride__57c13debf9323a8502fd2758ef327e74";

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
btCollisionObject.cxx_internalGetExtensionPointer?(
    )
 = "Bullet2__btCollisionObject__CO__meth_internalGetExtensionPointer__c9107b180ae9e9e730c5eb4e4a35c9d7";

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_internalSetExtensionPointer!(
    Data pointer
    )
 = "Bullet2__btCollisionObject__MU__meth_internalSetExtensionPointer__c8b8545153bd7f1525380ce7ff2d3dc9";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getActivationState?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getActivationState__9f7e915942630143a5d7780d9e0cbdf3";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setActivationState?(
    SInt32 newState
    )
 = "Bullet2__btCollisionObject__CO__meth_setActivationState__8453a907b79c395df5145f09eeaf1795";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setDeactivationTime!(
    Float32 time
    )
 = "Bullet2__btCollisionObject__MU__meth_setDeactivationTime__922c5ab3f97b51642c63f8d555c202cb";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getDeactivationTime?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getDeactivationTime__aa2bd8913c2d4c0939b2cfc1ace9c243";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_forceActivationState?(
    SInt32 newState
    )
 = "Bullet2__btCollisionObject__CO__meth_forceActivationState__09d55db9629fccfde43eb12f85f4c170";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_activate?(
    )
 = "Bullet2__btCollisionObject__CO__meth_activate__709a158e3b3e751b7d20cfda4918392c";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_activate?(
    Boolean forceActivation
    )
 = "Bullet2__btCollisionObject__CO__meth_activate__de4ff73709852dd82b0e22149b01b96a";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_isActive?(
    )
 = "Bullet2__btCollisionObject__CO__meth_isActive__ceef90ae61eb64d52965cd8e616d4f52";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setRestitution!(
    Float32 rest
    )
 = "Bullet2__btCollisionObject__MU__meth_setRestitution__7d6026cde51cc1c9ffd7a0022a21a4c0";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getRestitution?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getRestitution__a2fafd443692878095caefb6f3fb21a4";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setFriction!(
    Float32 frict
    )
 = "Bullet2__btCollisionObject__MU__meth_setFriction__203ceab4abf1cf321ac775dd5859eaf8";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getFriction?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getFriction__cc722c4a6a690093cf816225d7098e20";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setRollingFriction!(
    Float32 frict
    )
 = "Bullet2__btCollisionObject__MU__meth_setRollingFriction__a501c9e1c520a0beceddad6317b1970b";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getRollingFriction?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getRollingFriction__fbdb167f59913aa5a94d7d689ef64478";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setSpinningFriction!(
    Float32 frict
    )
 = "Bullet2__btCollisionObject__MU__meth_setSpinningFriction__7608072e69a239987a0f89e6159481bd";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getSpinningFriction?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getSpinningFriction__d892626f068b30fa2cd1cce04d6b0998";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setContactStiffnessAndDamping!(
    Float32 stiffness,
    Float32 damping
    )
 = "Bullet2__btCollisionObject__MU__meth_setContactStiffnessAndDamping__8b88853ac3b5ca94a2aa7af0a602eaa4";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getContactStiffness?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getContactStiffness__7bf0fa91c30315d4f190b7a549a8ebd6";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getContactDamping?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getContactDamping__953490142d41ec4ec1c1b4d8f973473e";

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getInternalType?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getInternalType__e74aa37329c80d7fec8ddaa752bd504d";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btCollisionObject.cxx_getWorldTransform!(
    )
 = "Bullet2__btCollisionObject__MU__meth_getWorldTransform__5996950cdd2f5296154fd3378e2e4abe";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btCollisionObject.cxx_getWorldTransform?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getWorldTransform__d9d8fcb528f1bc68e4e6720e989a630c";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setWorldTransform!(
    CxxbtTransformConstRef worldTrans
    )
 = "Bullet2__btCollisionObject__MU__meth_setWorldTransform__2dd81d50e9a7a1c6681fdb9ad7c2e2ea";

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
btCollisionObject.cxx_getBroadphaseHandle!(
    )
 = "Bullet2__btCollisionObject__MU__meth_getBroadphaseHandle__a92c97246f21eb0acb61e552f14b0f4b";

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
btCollisionObject.cxx_getBroadphaseHandle?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getBroadphaseHandle__eb0e30e7b05f2d83afe223c4aba88534";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setBroadphaseHandle!(
    btBroadphaseProxy handle
    )
 = "Bullet2__btCollisionObject__MU__meth_setBroadphaseHandle__d423ceeb321f0959cbd55dde69eb4481";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btCollisionObject.cxx_getInterpolationWorldTransform?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getInterpolationWorldTransform__dfb762561e7c42c9675dc02affcea6d2";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btCollisionObject.cxx_getInterpolationWorldTransform!(
    )
 = "Bullet2__btCollisionObject__MU__meth_getInterpolationWorldTransform__afce967a89fe38eb9ad0496f1c484f4b";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setInterpolationWorldTransform!(
    CxxbtTransformConstRef trans
    )
 = "Bullet2__btCollisionObject__MU__meth_setInterpolationWorldTransform__778856bc287a0ea28b25f6bd7b8f9a9c";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setInterpolationLinearVelocity!(
    CxxbtVector3ConstRef linvel
    )
 = "Bullet2__btCollisionObject__MU__meth_setInterpolationLinearVelocity__43277c57826070dcd693bd18b5a9669d";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setInterpolationAngularVelocity!(
    CxxbtVector3ConstRef angvel
    )
 = "Bullet2__btCollisionObject__MU__meth_setInterpolationAngularVelocity__d30e892cb39c31940070d5f076e91866";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btCollisionObject.cxx_getInterpolationLinearVelocity?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getInterpolationLinearVelocity__f047f67ea4ce9d0cda6b7c6e90408568";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btCollisionObject.cxx_getInterpolationAngularVelocity?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getInterpolationAngularVelocity__13d9630c2ce68fce17b1216924db11fe";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getIslandTag?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getIslandTag__646308ab05173abc48243e92ba18e61a";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setIslandTag!(
    SInt32 tag
    )
 = "Bullet2__btCollisionObject__MU__meth_setIslandTag__a0e0c73307d2c1c80b71745987fb8b2b";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getCompanionId?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getCompanionId__94dbd27964d95ba507a32549632125a3";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setCompanionId!(
    SInt32 id
    )
 = "Bullet2__btCollisionObject__MU__meth_setCompanionId__60b91ef24ab65fbdfa1c436aacbe10d4";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getWorldArrayIndex?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getWorldArrayIndex__b04c9605276c93bfef1253327e00041d";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setWorldArrayIndex!(
    SInt32 ix
    )
 = "Bullet2__btCollisionObject__MU__meth_setWorldArrayIndex__a9fa32d0dce36d43fc4f08653a4dcaa5";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getHitFraction?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getHitFraction__c1ef5ce59bb441d1d6c1bf1d67ca5469";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setHitFraction!(
    Float32 hitFraction
    )
 = "Bullet2__btCollisionObject__MU__meth_setHitFraction__546b050dd13d32c7a317e1429b9d0d28";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getCollisionFlags?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getCollisionFlags__3c5905dfdf493b684e5bac6203e68f94";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setCollisionFlags!(
    SInt32 flags
    )
 = "Bullet2__btCollisionObject__MU__meth_setCollisionFlags__3bdd614f8b4b488f8aecd376cbf59c8d";

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getCcdSweptSphereRadius?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getCcdSweptSphereRadius__46e798e684639b8ea27a7112f29f9d6a";

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setCcdSweptSphereRadius!(
    Float32 radius
    )
 = "Bullet2__btCollisionObject__MU__meth_setCcdSweptSphereRadius__53e4302d2ad7334a7683f4452db6be00";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getCcdMotionThreshold?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getCcdMotionThreshold__bc34bbfcaae0554cded02e11ccca6b2c";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionObject.cxx_getCcdSquareMotionThreshold?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getCcdSquareMotionThreshold__dbb2f5cf18c1a41c9d0bc0dbfb7183ca";

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setCcdMotionThreshold!(
    Float32 ccdMotionThreshold
    )
 = "Bullet2__btCollisionObject__MU__meth_setCcdMotionThreshold__4b364a8155ccf0045b85abd1b8117776";

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
btCollisionObject.cxx_getUserPointer?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getUserPointer__50ca51df91c50afed9ac643840e6e9ba";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getUserIndex?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getUserIndex__3e97d2db7b850720b7284163687dd2fc";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getUserIndex2?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getUserIndex2__2bf3b6fb8d558d2793cbe81e2e5fa2d7";

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setUserPointer!(
    Data userPointer
    )
 = "Bullet2__btCollisionObject__MU__meth_setUserPointer__41bcafb002280b600cb02146a958b81b";

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setUserIndex!(
    SInt32 index
    )
 = "Bullet2__btCollisionObject__MU__meth_setUserIndex__e7e0192a3ed8308ebf06f49de7749af1";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setUserIndex2!(
    SInt32 index
    )
 = "Bullet2__btCollisionObject__MU__meth_setUserIndex2__ee27da01a77c4437af9b05238ead0fda";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_getUpdateRevisionInternal?(
    )
 = "Bullet2__btCollisionObject__CO__meth_getUpdateRevisionInternal__bb140d7f867c5af85a362a1c0db08ca4";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_setCustomDebugColor!(
    CxxbtVector3ConstRef colorRGB
    )
 = "Bullet2__btCollisionObject__MU__meth_setCustomDebugColor__ab7a1c12845d39511c256b6662aa257f";

/// \dfgPresetOmit
/// \internal

btCollisionObject.cxx_removeCustomDebugColor!(
    )
 = "Bullet2__btCollisionObject__MU__meth_removeCustomDebugColor__71f47759aa266ed21c97666810381bc3";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
 = "Bullet2__btCollisionObject__CO__meth_getCustomDebugColor__a3efc0b1570c63fac517365db1fff6ac";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionObject.cxx_checkCollideWith?(
    btCollisionObject co
    )
 = "Bullet2__btCollisionObject__CO__meth_checkCollideWith__9f82fda66cd0b0184c6b681c06153c73";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionObject.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btCollisionObject__CO__meth_calculateSerializeBufferSize__40b8e8d2475cae4df3bfdf39f1eebd01";


btCollisionObject.setContactStiffnessAndDamping!(
    in
    Float32
    stiffness
    
    ,
    in
    Float32
    damping
    
    
    )
{   
    
    
    
    this.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
    
    
    
    
}


btCollisionObject.setDeactivationTime!(
    in
    Float32
    time
    
    
    )
{   
    
    
    this.cxx_setDeactivationTime(
        time
        );
    
    
    
}

SInt32
btCollisionObject.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}

SInt32
btCollisionObject.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}


btCollisionObject.setInterpolationLinearVelocity!(
    in
    btVector3
    linvel
    
    
    )
{   
    
    CxxbtVector3ConstRef linvel__cxx = Make_CxxbtVector3ConstRef(linvel);
    
    this.cxx_setInterpolationLinearVelocity(
        linvel__cxx
        );
    
    
    
}

Float32
btCollisionObject.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}

Float32
btCollisionObject.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}


btCollisionObject.setWorldArrayIndex!(
    in
    SInt32
    ix
    
    
    )
{   
    
    
    this.cxx_setWorldArrayIndex(
        ix
        );
    
    
    
}

SInt32
btCollisionObject.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

btVector3
btCollisionObject.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold

btCollisionObject.setCcdMotionThreshold!(
    in
    Float32
    ccdMotionThreshold
    
    
    )
{   
    
    
    this.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
    
    
    
}

SInt32
btCollisionObject.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
Data
btCollisionObject.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

Float32
btCollisionObject.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

SInt32
btCollisionObject.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
Float32
btCollisionObject.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}


btCollisionObject.removeCustomDebugColor!(
    )
{   
    
    this.cxx_removeCustomDebugColor(
        );
    
    
}

Boolean
btCollisionObject.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

Boolean
btCollisionObject.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}


btCollisionObject.setCompanionId!(
    in
    SInt32
    id
    
    
    )
{   
    
    
    this.cxx_setCompanionId(
        id
        );
    
    
    
}

btTransform
btCollisionObject.getWorldTransform!(
    )
{   
    CxxbtTransformRef __res_cxx = 
    this.cxx_getWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

Boolean
btCollisionObject.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

Float32
btCollisionObject.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}


btCollisionObject.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    ,
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx,
        frictionMode
        );
    
    
    
    
}

Float32
btCollisionObject.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}


btCollisionObject.setHitFraction!(
    in
    Float32
    hitFraction
    
    
    )
{   
    
    
    this.cxx_setHitFraction(
        hitFraction
        );
    
    
    
}

btVector3
btCollisionObject.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btCollisionObject.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

Boolean
btCollisionObject.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

Boolean
btCollisionObject.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}


btCollisionObject.setIslandTag!(
    in
    SInt32
    tag
    
    
    )
{   
    
    
    this.cxx_setIslandTag(
        tag
        );
    
    
    
}

Boolean
btCollisionObject.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}


btCollisionObject.setFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setFriction(
        frict
        );
    
    
    
}


btCollisionObject.setInterpolationWorldTransform!(
    in
    btTransform
    trans
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    this.cxx_setInterpolationWorldTransform(
        trans__cxx
        );
    
    
    
}

Boolean
btCollisionObject.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.

btCollisionObject.internalSetExtensionPointer!(
    in
    Data
    pointer
    
    
    )
{   
    
    
    this.cxx_internalSetExtensionPointer(
        pointer
        );
    
    
    
}


btCollisionObject.setSpinningFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setSpinningFriction(
        frict
        );
    
    
    
}


btCollisionObject.setRestitution!(
    in
    Float32
    rest
    
    
    )
{   
    
    
    this.cxx_setRestitution(
        rest
        );
    
    
    
}

Float32
btCollisionObject.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet

btCollisionObject.setUserPointer!(
    in
    Data
    userPointer
    
    
    )
{   
    
    
    this.cxx_setUserPointer(
        userPointer
        );
    
    
    
}

Boolean
btCollisionObject.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}


btCollisionObject.setBroadphaseHandle!(
    in
    btBroadphaseProxy
    handle
    
    
    )
{   
    
    
    this.cxx_setBroadphaseHandle(
        handle
        );
    
    
    
}


btCollisionObject.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}


btCollisionObject.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

Float32
btCollisionObject.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

Boolean
btCollisionObject.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}


btCollisionObject.setRollingFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setRollingFriction(
        frict
        );
    
    
    
}


btCollisionObject.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx
        );
    
    
    
}

///users can point to their objects, userPointer is not used by Bullet

btCollisionObject.setUserIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex(
        index
        );
    
    
    
}


btCollisionObject.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

btBroadphaseProxy
btCollisionObject.getBroadphaseHandle!(
    )
{   
    btBroadphaseProxy __res = 
    this.cxx_getBroadphaseHandle(
        );
    
    return __res;
}

///reserved for Bullet internal usage
SInt32
btCollisionObject.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges

btCollisionObject.setContactProcessingThreshold!(
    in
    Float32
    contactProcessingThreshold
    
    
    )
{   
    
    
    this.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
    
    
    
}

SInt32
btCollisionObject.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}


btCollisionObject.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

///users can point to their objects, userPointer is not used by Bullet
Data
btCollisionObject.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

Boolean
btCollisionObject.checkCollideWithOverride?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWithOverride(
        co
        );
    
    
    return __res;
}

Boolean
btCollisionObject.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

btCollisionShape
btCollisionObject.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}


btCollisionObject.setIgnoreCollisionCheck!(
    in
    btCollisionObject
    co
    
    ,
    in
    Boolean
    ignoreCollisionCheck
    
    
    )
{   
    
    
    
    this.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
    
    
    
    
}

Float32
btCollisionObject.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

SInt32
btCollisionObject.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}


btCollisionObject.setUserIndex2!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex2(
        index
        );
    
    
    
}

Float32
btCollisionObject.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::

btCollisionObject.setCcdSweptSphereRadius!(
    in
    Float32
    radius
    
    
    )
{   
    
    
    this.cxx_setCcdSweptSphereRadius(
        radius
        );
    
    
    
}

SInt32
btCollisionObject.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}


btCollisionObject.setCollisionShape!(
    in
    btCollisionShape
    collisionShape
    
    
    )
{   
    
    
    this.cxx_setCollisionShape(
        collisionShape
        );
    
    
    
}


btCollisionObject.setInterpolationAngularVelocity!(
    in
    btVector3
    angvel
    
    
    )
{   
    
    CxxbtVector3ConstRef angvel__cxx = Make_CxxbtVector3ConstRef(angvel);
    
    this.cxx_setInterpolationAngularVelocity(
        angvel__cxx
        );
    
    
    
}


btCollisionObject.setWorldTransform!(
    in
    btTransform
    worldTrans
    
    
    )
{   
    
    CxxbtTransformConstRef worldTrans__cxx = Make_CxxbtTransformConstRef(worldTrans);
    
    this.cxx_setWorldTransform(
        worldTrans__cxx
        );
    
    
    
}

Float32
btCollisionObject.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

Float32
btCollisionObject.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

btVector3
btCollisionObject.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btCollisionObject.setCustomDebugColor!(
    in
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3ConstRef colorRGB__cxx = Make_CxxbtVector3ConstRef(colorRGB);
    
    this.cxx_setCustomDebugColor(
        colorRGB__cxx
        );
    
    
    
}

btTransform
btCollisionObject.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btCollisionObject.setCollisionFlags!(
    in
    SInt32
    flags
    
    
    )
{   
    
    
    this.cxx_setCollisionFlags(
        flags
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionObject.=(
    btCollisionObject that
    ) = "Bullet2__btCollisionObject__MU__simple_ass_op__a38d818d77bd43a337e6fb1eeb9750ad";


/// \dfgPresetOmit
/// \internal
btCollisionObject.appendDesc(io String string) {
  string += "btCollisionObject:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}






//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObjectDoubleData] EDK[Fabric_EDK_KL_btCollisionObjectDoubleData] LIB[btCollisionObjectDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectDoubleData] EDK[Fabric_EDK_KL_btCollisionObjectDoubleData] LIB[btCollisionObjectDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectDoubleData] EDK[Fabric_EDK_KL_btCollisionObjectDoubleData] LIB[btCollisionObjectDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionObjectDoubleData() = "Bullet2__btCollisionObjectDoubleData__MU__empty_ctor__0307de142cc790693cadfdb9b5f4deaa";

/// \dfgPresetOmit
btCollisionObjectDoubleData(
    btCollisionObjectDoubleData that
    ) = "Bullet2__btCollisionObjectDoubleData__MU__copy_ctor__16ae19b5d75de741cd686929ecbf434f";

btCollisionObjectDoubleData.cxx_delete() = "Bullet2__btCollisionObjectDoubleData__MU__delete__61142dabdda02832c4fc1a6543e2a405";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectDoubleData] EDK[Fabric_EDK_KL_btCollisionObjectDoubleData] LIB[btCollisionObjectDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectDoubleData] EDK[Fabric_EDK_KL_btCollisionObjectDoubleData] LIB[btCollisionObjectDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectDoubleData] EDK[Fabric_EDK_KL_btCollisionObjectDoubleData] LIB[btCollisionObjectDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionObjectDoubleData.=(
    btCollisionObjectDoubleData that
    ) = "Bullet2__btCollisionObjectDoubleData__MU__simple_ass_op__0f9abe5e994fbf71815188adbc0f56c8";


/// \dfgPresetOmit
/// \internal
btCollisionObjectDoubleData.appendDesc(io String string) {
  string += "btCollisionObjectDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionObjectFloatData] EDK[Fabric_EDK_KL_btCollisionObjectFloatData] LIB[btCollisionObjectFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectFloatData] EDK[Fabric_EDK_KL_btCollisionObjectFloatData] LIB[btCollisionObjectFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectFloatData] EDK[Fabric_EDK_KL_btCollisionObjectFloatData] LIB[btCollisionObjectFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionObjectFloatData() = "Bullet2__btCollisionObjectFloatData__MU__empty_ctor__d47091c99a09039a7ff7aa7311385e3f";

/// \dfgPresetOmit
btCollisionObjectFloatData(
    btCollisionObjectFloatData that
    ) = "Bullet2__btCollisionObjectFloatData__MU__copy_ctor__0f1f19a98ec79c67f3fd06bd0ddb2e72";

btCollisionObjectFloatData.cxx_delete() = "Bullet2__btCollisionObjectFloatData__MU__delete__b3e8e93d90c733f942be24635a173fdc";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectFloatData] EDK[Fabric_EDK_KL_btCollisionObjectFloatData] LIB[btCollisionObjectFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectFloatData] EDK[Fabric_EDK_KL_btCollisionObjectFloatData] LIB[btCollisionObjectFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionObjectFloatData] EDK[Fabric_EDK_KL_btCollisionObjectFloatData] LIB[btCollisionObjectFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionObjectFloatData.=(
    btCollisionObjectFloatData that
    ) = "Bullet2__btCollisionObjectFloatData__MU__simple_ass_op__b87a536eedf69308292a3332709102f8";


/// \dfgPresetOmit
/// \internal
btCollisionObjectFloatData.appendDesc(io String string) {
  string += "btCollisionObjectFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld() = "Bullet2__btCollisionWorld__MU__empty_ctor__97a21781ed4af4917aa5722129dfaa17";

/// \dfgPresetOmit
btCollisionWorld(
    btCollisionWorld that
    ) = "Bullet2__btCollisionWorld__MU__copy_ctor__f9359baf5666f9f8639152f84a6108b1";

btCollisionWorld.cxx_delete() = "Bullet2__btCollisionWorld__MU__delete__aff61225f253e5418b7d118d34ab9ff9";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///the computeOverlappingPairs is usually already called by performDiscreteCollisionDetection (or stepSimulation)
// 
///it can be useful to use if you perform ray tests without collision detection/simulation
/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_computeOverlappingPairs!(
    )
 = "Bullet2__btCollisionWorld__MU__meth_computeOverlappingPairs__d8778b0197b999383d0976db526f478e";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_debugDrawWorld!(
    )
 = "Bullet2__btCollisionWorld__MU__meth_debugDrawWorld__78a7c5277ec67941b93c8002f77d54e6";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_debugDrawObject!(
    CxxbtTransformConstRef worldTransform,
    btCollisionShape shape,
    CxxbtVector3ConstRef color
    )
 = "Bullet2__btCollisionWorld__MU__meth_debugDrawObject__f34bef14a99904880300d886ff682704";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionWorld.cxx_getNumCollisionObjects?(
    )
 = "Bullet2__btCollisionWorld__CO__meth_getNumCollisionObjects__e02573accf34590a64375cfef0f674cf";

/// rayTest performs a raycast on all objects in the btCollisionWorld, and calls the resultCallback
// 
/// This allows for several queries: first hit, all hits, any hit, dependent on the value returned by the callback.
/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_rayTest?(
    CxxbtVector3ConstRef rayFromWorld,
    CxxbtVector3ConstRef rayToWorld,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btCollisionWorld__CO__meth_rayTest__009014e9979d7f1fd8c4e1543b29c868";

/// convexTest performs a swept convex cast on all objects in the btCollisionWorld, and calls the resultCallback
// 
/// This allows for several queries: first hit, all hits, any hit, dependent on the value return by the callback.
/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_convexSweepTest?(
    btConvexShape castShape,
    CxxbtTransformConstRef from,
    CxxbtTransformConstRef to,
    btCollisionWorld_ConvexResultCallback resultCallback
    )
 = "Bullet2__btCollisionWorld__CO__meth_convexSweepTest__bdffdd0c33a6ea6a02a28dd4a3edcc93";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_convexSweepTest?(
    btConvexShape castShape,
    CxxbtTransformConstRef from,
    CxxbtTransformConstRef to,
    btCollisionWorld_ConvexResultCallback resultCallback,
    Float32 allowedCcdPenetration
    )
 = "Bullet2__btCollisionWorld__CO__meth_convexSweepTest__3a5196ee8f74b2d43f8b2ad5fe206238";

///contactTest performs a discrete collision test between colObj against all objects in the btCollisionWorld, and calls the resultCallback.
// 
///it reports one or more contact points for every overlapping object (including the one with deepest penetration)
/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_contactTest!(
    btCollisionObject colObj,
    btCollisionWorld_ContactResultCallback resultCallback
    )
 = "Bullet2__btCollisionWorld__MU__meth_contactTest__ce2348d9a189f9f4763a397df4d09f74";

///contactTest performs a discrete collision test between two collision objects and calls the resultCallback if overlap if detected.
// 
///it reports one or more contact points (including the one with deepest penetration)
/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_contactPairTest!(
    btCollisionObject colObjA,
    btCollisionObject colObjB,
    btCollisionWorld_ContactResultCallback resultCallback
    )
 = "Bullet2__btCollisionWorld__MU__meth_contactPairTest__9938cc34b28a2b616b641285b28f4f89";

/// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
// 
/// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
// 
/// This allows more customization.
/// \dfgPresetOmit
/// \internal

btCollisionWorld_CxxrayTestSingle(
    CxxbtTransformConstRef rayFromTrans,
    CxxbtTransformConstRef rayToTrans,
    btCollisionObject collisionObject,
    btCollisionShape collisionShape,
    CxxbtTransformConstRef colObjWorldTransform,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btCollisionWorld__ST__meth_rayTestSingle__f67156c1d10f83b59f12f1956e2f06e8";

/// objectQuerySingle performs a collision detection query and calls the resultCallback. It is used internally by rayTest.
/// \dfgPresetOmit
/// \internal

btCollisionWorld_CxxobjectQuerySingle(
    btConvexShape castShape,
    CxxbtTransformConstRef rayFromTrans,
    CxxbtTransformConstRef rayToTrans,
    btCollisionObject collisionObject,
    btCollisionShape collisionShape,
    CxxbtTransformConstRef colObjWorldTransform,
    btCollisionWorld_ConvexResultCallback resultCallback,
    Float32 allowedPenetration
    )
 = "Bullet2__btCollisionWorld__ST__meth_objectQuerySingle__cb539638ae67006765619a37fa6a63de";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_addCollisionObject!(
    btCollisionObject collisionObject
    )
 = "Bullet2__btCollisionWorld__MU__meth_addCollisionObject__3a8f39c06d91375d69ac980f60b06b1b";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_addCollisionObject!(
    btCollisionObject collisionObject,
    SInt32 collisionFilterGroup
    )
 = "Bullet2__btCollisionWorld__MU__meth_addCollisionObject__d1b1c7bb742a4940876a085a318b07ce";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_addCollisionObject!(
    btCollisionObject collisionObject,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    )
 = "Bullet2__btCollisionWorld__MU__meth_addCollisionObject__564db207ac2ceddfa51c0dc3fbed8ea8";

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef
btCollisionWorld.cxx_getCollisionObjectArray!(
    )
 = "Bullet2__btCollisionWorld__MU__meth_getCollisionObjectArray__8552c6e1f11bb1b9c56dbad758d69433";

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectConstRef
btCollisionWorld.cxx_getCollisionObjectArray?(
    )
 = "Bullet2__btCollisionWorld__CO__meth_getCollisionObjectArray__d136eba31ccf02faf297bb532f942ace";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_removeCollisionObject!(
    btCollisionObject collisionObject
    )
 = "Bullet2__btCollisionWorld__MU__meth_removeCollisionObject__a87a9bd0c59d774a444c9ce1b934b0e8";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_performDiscreteCollisionDetection!(
    )
 = "Bullet2__btCollisionWorld__MU__meth_performDiscreteCollisionDetection__778dab1ebe70e061ab1c48545ca7a68e";

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef
btCollisionWorld.cxx_getDispatchInfo!(
    )
 = "Bullet2__btCollisionWorld__MU__meth_getDispatchInfo__00c024b6aa545821fffc4701eb7ed97d";

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef
btCollisionWorld.cxx_getDispatchInfo?(
    )
 = "Bullet2__btCollisionWorld__CO__meth_getDispatchInfo__e70cfd456012ba2287f1a3c2f9bceb16";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionWorld.cxx_getForceUpdateAllAabbs?(
    )
 = "Bullet2__btCollisionWorld__CO__meth_getForceUpdateAllAabbs__2bd5ccbddaf62a53023a480a826cc159";

/// \dfgPresetOmit
/// \internal

btCollisionWorld.cxx_setForceUpdateAllAabbs!(
    Boolean forceUpdateAllAabbs
    )
 = "Bullet2__btCollisionWorld__MU__meth_setForceUpdateAllAabbs__57a98f05b04a4c91f4c1c6173f2e6ed6";

/// convexTest performs a swept convex cast on all objects in the btCollisionWorld, and calls the resultCallback
// 
/// This allows for several queries: first hit, all hits, any hit, dependent on the value return by the callback.

btCollisionWorld.convexSweepTest?(
    in
    btConvexShape
    castShape
    
    ,
    in
    btTransform
    from
    
    ,
    in
    btTransform
    to
    
    ,
    in
    btCollisionWorld_ConvexResultCallback
    resultCallback
    
    
    )
{   
    
    
    CxxbtTransformConstRef from__cxx = Make_CxxbtTransformConstRef(from);
    
    CxxbtTransformConstRef to__cxx = Make_CxxbtTransformConstRef(to);
    
    
    this.cxx_convexSweepTest(
        castShape,
        from__cxx,
        to__cxx,
        resultCallback
        );
    
    
    
    
    
    
}


btCollisionWorld.debugDrawObject!(
    in
    btTransform
    worldTransform
    
    ,
    in
    btCollisionShape
    shape
    
    ,
    in
    btVector3
    color
    
    
    )
{   
    
    CxxbtTransformConstRef worldTransform__cxx = Make_CxxbtTransformConstRef(worldTransform);
    
    
    CxxbtVector3ConstRef color__cxx = Make_CxxbtVector3ConstRef(color);
    
    this.cxx_debugDrawObject(
        worldTransform__cxx,
        shape,
        color__cxx
        );
    
    
    
    
    
}

/// objectQuerySingle performs a collision detection query and calls the resultCallback. It is used internally by rayTest.

btCollisionWorld_objectQuerySingle(
    in
    btConvexShape
    castShape
    
    ,
    in
    btTransform
    rayFromTrans
    
    ,
    in
    btTransform
    rayToTrans
    
    ,
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    btCollisionShape
    collisionShape
    
    ,
    in
    btTransform
    colObjWorldTransform
    
    ,
    in
    btCollisionWorld_ConvexResultCallback
    resultCallback
    
    ,
    in
    Float32
    allowedPenetration
    
    
    )
{   
    
    
    CxxbtTransformConstRef rayFromTrans__cxx = Make_CxxbtTransformConstRef(rayFromTrans);
    
    CxxbtTransformConstRef rayToTrans__cxx = Make_CxxbtTransformConstRef(rayToTrans);
    
    
    
    CxxbtTransformConstRef colObjWorldTransform__cxx = Make_CxxbtTransformConstRef(colObjWorldTransform);
    
    
    
    btCollisionWorld_CxxobjectQuerySingle(
        castShape,
        rayFromTrans__cxx,
        rayToTrans__cxx,
        collisionObject,
        collisionShape,
        colObjWorldTransform__cxx,
        resultCallback,
        allowedPenetration
        );
    
    
    
    
    
    
    
    
    
    
}

/// rayTest performs a raycast on all objects in the btCollisionWorld, and calls the resultCallback
// 
/// This allows for several queries: first hit, all hits, any hit, dependent on the value returned by the callback.

btCollisionWorld.rayTest?(
    in
    btVector3
    rayFromWorld
    
    ,
    in
    btVector3
    rayToWorld
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFromWorld__cxx = Make_CxxbtVector3ConstRef(rayFromWorld);
    
    CxxbtVector3ConstRef rayToWorld__cxx = Make_CxxbtVector3ConstRef(rayToWorld);
    
    
    this.cxx_rayTest(
        rayFromWorld__cxx,
        rayToWorld__cxx,
        resultCallback
        );
    
    
    
    
    
}


btCollisionWorld.setForceUpdateAllAabbs!(
    in
    Boolean
    forceUpdateAllAabbs
    
    
    )
{   
    
    
    this.cxx_setForceUpdateAllAabbs(
        forceUpdateAllAabbs
        );
    
    
    
}


btCollisionWorld.removeCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    
    )
{   
    
    
    this.cxx_removeCollisionObject(
        collisionObject
        );
    
    
    
}


btCollisionWorld.addCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    
    )
{   
    
    
    
    
    this.cxx_addCollisionObject(
        collisionObject,
        collisionFilterGroup,
        collisionFilterMask
        );
    
    
    
    
    
}


btCollisionWorld.debugDrawWorld!(
    )
{   
    
    this.cxx_debugDrawWorld(
        );
    
    
}

///contactTest performs a discrete collision test between two collision objects and calls the resultCallback if overlap if detected.
// 
///it reports one or more contact points (including the one with deepest penetration)

btCollisionWorld.contactPairTest!(
    in
    btCollisionObject
    colObjA
    
    ,
    in
    btCollisionObject
    colObjB
    
    ,
    in
    btCollisionWorld_ContactResultCallback
    resultCallback
    
    
    )
{   
    
    
    
    
    this.cxx_contactPairTest(
        colObjA,
        colObjB,
        resultCallback
        );
    
    
    
    
    
}


btCollisionWorld.addCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    
    )
{   
    
    
    
    this.cxx_addCollisionObject(
        collisionObject,
        collisionFilterGroup
        );
    
    
    
    
}

///the computeOverlappingPairs is usually already called by performDiscreteCollisionDetection (or stepSimulation)
// 
///it can be useful to use if you perform ray tests without collision detection/simulation

btCollisionWorld.computeOverlappingPairs!(
    )
{   
    
    this.cxx_computeOverlappingPairs(
        );
    
    
}

btDispatcherInfo
btCollisionWorld.getDispatchInfo!(
    )
{   
    CxxbtDispatcherInfoRef __res_cxx = 
    this.cxx_getDispatchInfo(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtDispatcherInfoRef';
    btDispatcherInfo __res = __res_cxx.cxx_get();
    return __res;
}


btCollisionWorld.performDiscreteCollisionDetection!(
    )
{   
    
    this.cxx_performDiscreteCollisionDetection(
        );
    
    
}

btAlignedObjectArray_btCollisionObject
btCollisionWorld.getCollisionObjectArray!(
    )
{   
    CxxbtAlignedObjectArray_btCollisionObjectRef __res_cxx = 
    this.cxx_getCollisionObjectArray(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtAlignedObjectArray_btCollisionObjectRef';
    btAlignedObjectArray_btCollisionObject __res = __res_cxx.cxx_get();
    return __res;
}


btCollisionWorld.addCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    
    )
{   
    
    
    this.cxx_addCollisionObject(
        collisionObject
        );
    
    
    
}


btCollisionWorld.convexSweepTest?(
    in
    btConvexShape
    castShape
    
    ,
    in
    btTransform
    from
    
    ,
    in
    btTransform
    to
    
    ,
    in
    btCollisionWorld_ConvexResultCallback
    resultCallback
    
    ,
    in
    Float32
    allowedCcdPenetration
    
    
    )
{   
    
    
    CxxbtTransformConstRef from__cxx = Make_CxxbtTransformConstRef(from);
    
    CxxbtTransformConstRef to__cxx = Make_CxxbtTransformConstRef(to);
    
    
    
    this.cxx_convexSweepTest(
        castShape,
        from__cxx,
        to__cxx,
        resultCallback,
        allowedCcdPenetration
        );
    
    
    
    
    
    
    
}

/// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
// 
/// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
// 
/// This allows more customization.

btCollisionWorld_rayTestSingle(
    in
    btTransform
    rayFromTrans
    
    ,
    in
    btTransform
    rayToTrans
    
    ,
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    btCollisionShape
    collisionShape
    
    ,
    in
    btTransform
    colObjWorldTransform
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtTransformConstRef rayFromTrans__cxx = Make_CxxbtTransformConstRef(rayFromTrans);
    
    CxxbtTransformConstRef rayToTrans__cxx = Make_CxxbtTransformConstRef(rayToTrans);
    
    
    
    CxxbtTransformConstRef colObjWorldTransform__cxx = Make_CxxbtTransformConstRef(colObjWorldTransform);
    
    
    btCollisionWorld_CxxrayTestSingle(
        rayFromTrans__cxx,
        rayToTrans__cxx,
        collisionObject,
        collisionShape,
        colObjWorldTransform__cxx,
        resultCallback
        );
    
    
    
    
    
    
    
    
}

SInt32
btCollisionWorld.getNumCollisionObjects?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumCollisionObjects(
        );
    
    return __res;
}

///contactTest performs a discrete collision test between colObj against all objects in the btCollisionWorld, and calls the resultCallback.
// 
///it reports one or more contact points for every overlapping object (including the one with deepest penetration)

btCollisionWorld.contactTest!(
    in
    btCollisionObject
    colObj
    
    ,
    in
    btCollisionWorld_ContactResultCallback
    resultCallback
    
    
    )
{   
    
    
    
    this.cxx_contactTest(
        colObj,
        resultCallback
        );
    
    
    
    
}

Boolean
btCollisionWorld.getForceUpdateAllAabbs?(
    )
{   
    Boolean __res = 
    this.cxx_getForceUpdateAllAabbs(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld] EDK[Fabric_EDK_KL_btCollisionWorld] LIB[btCollisionWorld *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld.=(
    btCollisionWorld that
    ) = "Bullet2__btCollisionWorld__MU__simple_ass_op__25b0acd165882715a2eb45fb478a3fe3";


/// \dfgPresetOmit
/// \internal
btCollisionWorld.appendDesc(io String string) {
  string += "btCollisionWorld:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalShapeInfo] EDK[Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo] LIB[btCollisionWorld::LocalShapeInfo *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalShapeInfo] EDK[Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo] LIB[btCollisionWorld::LocalShapeInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalShapeInfo] EDK[Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo] LIB[btCollisionWorld::LocalShapeInfo *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_LocalShapeInfo() = "Bullet2__btCollisionWorld_LocalShapeInfo__MU__empty_ctor__966e79741834dc87eafb2b0f899a4b28";

/// \dfgPresetOmit
btCollisionWorld_LocalShapeInfo(
    btCollisionWorld_LocalShapeInfo that
    ) = "Bullet2__btCollisionWorld_LocalShapeInfo__MU__copy_ctor__0219b02717f0ac43bc0be13b6270fdf8";

btCollisionWorld_LocalShapeInfo.cxx_delete() = "Bullet2__btCollisionWorld_LocalShapeInfo__MU__delete__6275a61d99535873e6e12d04a0a0723f";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalShapeInfo] EDK[Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo] LIB[btCollisionWorld::LocalShapeInfo *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalShapeInfo] EDK[Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo] LIB[btCollisionWorld::LocalShapeInfo *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalShapeInfo] EDK[Fabric_EDK_KL_btCollisionWorld_LocalShapeInfo] LIB[btCollisionWorld::LocalShapeInfo *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_LocalShapeInfo.=(
    btCollisionWorld_LocalShapeInfo that
    ) = "Bullet2__btCollisionWorld_LocalShapeInfo__MU__simple_ass_op__dae09e0baa2fe85c96963ce4e93f64df";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_LocalShapeInfo.appendDesc(io String string) {
  string += "btCollisionWorld_LocalShapeInfo:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalRayResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalRayResult] LIB[btCollisionWorld::LocalRayResult *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalRayResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalRayResult] LIB[btCollisionWorld::LocalRayResult *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalRayResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalRayResult] LIB[btCollisionWorld::LocalRayResult *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_LocalRayResult() = "Bullet2__btCollisionWorld_LocalRayResult__MU__empty_ctor__7bff102a13a3e50b7a52976c978af314";

/// \dfgPresetOmit
btCollisionWorld_LocalRayResult(
    btCollisionWorld_LocalRayResult that
    ) = "Bullet2__btCollisionWorld_LocalRayResult__MU__copy_ctor__24e931530802a6cf4e4fe029bcc9e8c6";

/// \dfgPresetOmit
/// \internal
btCollisionWorld_LocalRayResult.__ctor(
    btCollisionObject collisionObject,
    btCollisionWorld_LocalShapeInfo localShapeInfo,
    CxxbtVector3ConstRef hitNormalLocal,
    Float32 hitFraction
    ) = "Bullet2__btCollisionWorld_LocalRayResult__MU__ctor__ac790131abe3e77ed13d3a05be602d89";

/// \dfgPresetOmit
btCollisionWorld_LocalRayResult(
    btCollisionObject collisionObject,
    btCollisionWorld_LocalShapeInfo localShapeInfo,
    CxxbtVector3ConstRef hitNormalLocal,
    Float32 hitFraction
    ) {
    this.__ctor(
        collisionObject,
        localShapeInfo,
        hitNormalLocal,
        hitFraction
        );
}

btCollisionWorld_LocalRayResult(
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    btCollisionWorld_LocalShapeInfo
    localShapeInfo
    
    ,
    in
    btVector3
    hitNormalLocal
    
    ,
    in
    Float32
    hitFraction
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef hitNormalLocal__cxx = Make_CxxbtVector3ConstRef(hitNormalLocal);
    
    this.__ctor(
        collisionObject,
        localShapeInfo,
        hitNormalLocal__cxx,
        hitFraction
        );
    
    
    
    
}

btCollisionWorld_LocalRayResult.cxx_delete() = "Bullet2__btCollisionWorld_LocalRayResult__MU__delete__d91198ce780efa8ad7daf7ccf1008397";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalRayResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalRayResult] LIB[btCollisionWorld::LocalRayResult *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalRayResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalRayResult] LIB[btCollisionWorld::LocalRayResult *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalRayResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalRayResult] LIB[btCollisionWorld::LocalRayResult *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_LocalRayResult.=(
    btCollisionWorld_LocalRayResult that
    ) = "Bullet2__btCollisionWorld_LocalRayResult__MU__simple_ass_op__0ef0085539855dea7b1556e5121a4913";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_LocalRayResult.appendDesc(io String string) {
  string += "btCollisionWorld_LocalRayResult:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionWorld_RayResultCallback(
    btCollisionWorld_RayResultCallback that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btCollisionWorld_RayResultCallback.cxx_delete() = "Bullet2__btCollisionWorld_RayResultCallback__MU__delete__fe20af86b7d3c476c94ddad6b8884c82";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionWorld_RayResultCallback.cxx_needsCollision?(
    btBroadphaseProxy proxy0
    )
 = "Bullet2__btCollisionWorld_RayResultCallback__CO__meth_needsCollision__d341d27fcd8c63971bcb34e411701a14";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionWorld_RayResultCallback.cxx_addSingleResult!(
    btCollisionWorld_LocalRayResult rayResult,
    Boolean normalInWorldSpace
    )
 = "Bullet2__btCollisionWorld_RayResultCallback__MU__meth_addSingleResult__8e578c86f4ad60aa03775208232d2310";

Float32
btCollisionWorld_RayResultCallback.addSingleResult!(
    in
    btCollisionWorld_LocalRayResult
    rayResult
    
    ,
    in
    Boolean
    normalInWorldSpace
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_addSingleResult(
        rayResult,
        normalInWorldSpace
        );
    
    
    
    return __res;
}

Boolean
btCollisionWorld_RayResultCallback.needsCollision?(
    in
    btBroadphaseProxy
    proxy0
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_needsCollision(
        proxy0
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_RayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_RayResultCallback] LIB[btCollisionWorld::RayResultCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_RayResultCallback.=(
    btCollisionWorld_RayResultCallback that
    ) = "Bullet2__btCollisionWorld_RayResultCallback__MU__simple_ass_op__ac06ed69acbae0818b2f67e128e83049";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_RayResultCallback.appendDesc(io String string) {
  string += "btCollisionWorld_RayResultCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_ClosestRayResultCallback() = "Bullet2__btCollisionWorld_ClosestRayResultCallback__MU__empty_ctor__803a1bfa4856ad705a7fba4100aec699";

/// \dfgPresetOmit
btCollisionWorld_ClosestRayResultCallback(
    btCollisionWorld_ClosestRayResultCallback that
    ) = "Bullet2__btCollisionWorld_ClosestRayResultCallback__MU__copy_ctor__cd2d72c904070ab6e16c123effdb7480";

/// \dfgPresetOmit
/// \internal
btCollisionWorld_ClosestRayResultCallback.__ctor(
    CxxbtVector3ConstRef rayFromWorld,
    CxxbtVector3ConstRef rayToWorld
    ) = "Bullet2__btCollisionWorld_ClosestRayResultCallback__MU__ctor__2299ad8b3e90dbead2fcc3b76f999405";

/// \dfgPresetOmit
btCollisionWorld_ClosestRayResultCallback(
    CxxbtVector3ConstRef rayFromWorld,
    CxxbtVector3ConstRef rayToWorld
    ) {
    this.__ctor(
        rayFromWorld,
        rayToWorld
        );
}

btCollisionWorld_ClosestRayResultCallback(
    in
    btVector3
    rayFromWorld
    
    ,
    in
    btVector3
    rayToWorld
    
    
    ) {
    
    CxxbtVector3ConstRef rayFromWorld__cxx = Make_CxxbtVector3ConstRef(rayFromWorld);
    
    CxxbtVector3ConstRef rayToWorld__cxx = Make_CxxbtVector3ConstRef(rayToWorld);
    this.__ctor(
        rayFromWorld__cxx,
        rayToWorld__cxx
        );
    
    
}

btCollisionWorld_ClosestRayResultCallback.cxx_delete() = "Bullet2__btCollisionWorld_ClosestRayResultCallback__MU__delete__79da4049132590034ed1b62ab2e7c524";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btCollisionWorld_ClosestRayResultCallback.cxx_addSingleResult!(
    btCollisionWorld_LocalRayResult rayResult,
    Boolean normalInWorldSpace
    )
 = "Bullet2__btCollisionWorld_ClosestRayResultCallback__MU__meth_addSingleResult__ac8e1fafd95b97cbd2c9d59079fecaf9";

Float32
btCollisionWorld_ClosestRayResultCallback.addSingleResult!(
    in
    btCollisionWorld_LocalRayResult
    rayResult
    
    ,
    in
    Boolean
    normalInWorldSpace
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_addSingleResult(
        rayResult,
        normalInWorldSpace
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestRayResultCallback] LIB[btCollisionWorld::ClosestRayResultCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_ClosestRayResultCallback.=(
    btCollisionWorld_ClosestRayResultCallback that
    ) = "Bullet2__btCollisionWorld_ClosestRayResultCallback__MU__simple_ass_op__59ab29fe656c0292f1b1a2922d4de9d2";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_ClosestRayResultCallback.appendDesc(io String string) {
  string += "btCollisionWorld_ClosestRayResultCallback:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_AllHitsRayResultCallback() = "Bullet2__btCollisionWorld_AllHitsRayResultCallback__MU__empty_ctor__25a8b477b0e60b0ad4de5cb8bfc43711";

/// \dfgPresetOmit
btCollisionWorld_AllHitsRayResultCallback(
    btCollisionWorld_AllHitsRayResultCallback that
    ) = "Bullet2__btCollisionWorld_AllHitsRayResultCallback__MU__copy_ctor__98da9a3ed8437b3143e09d159fe05845";

/// \dfgPresetOmit
/// \internal
btCollisionWorld_AllHitsRayResultCallback.__ctor(
    CxxbtVector3ConstRef rayFromWorld,
    CxxbtVector3ConstRef rayToWorld
    ) = "Bullet2__btCollisionWorld_AllHitsRayResultCallback__MU__ctor__08437c3381114243a89bc2302b54ffc2";

/// \dfgPresetOmit
btCollisionWorld_AllHitsRayResultCallback(
    CxxbtVector3ConstRef rayFromWorld,
    CxxbtVector3ConstRef rayToWorld
    ) {
    this.__ctor(
        rayFromWorld,
        rayToWorld
        );
}

btCollisionWorld_AllHitsRayResultCallback(
    in
    btVector3
    rayFromWorld
    
    ,
    in
    btVector3
    rayToWorld
    
    
    ) {
    
    CxxbtVector3ConstRef rayFromWorld__cxx = Make_CxxbtVector3ConstRef(rayFromWorld);
    
    CxxbtVector3ConstRef rayToWorld__cxx = Make_CxxbtVector3ConstRef(rayToWorld);
    this.__ctor(
        rayFromWorld__cxx,
        rayToWorld__cxx
        );
    
    
}

btCollisionWorld_AllHitsRayResultCallback.cxx_delete() = "Bullet2__btCollisionWorld_AllHitsRayResultCallback__MU__delete__e380e4d713c0065d1488ba1374f9fa1d";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btCollisionWorld_AllHitsRayResultCallback.cxx_addSingleResult!(
    btCollisionWorld_LocalRayResult rayResult,
    Boolean normalInWorldSpace
    )
 = "Bullet2__btCollisionWorld_AllHitsRayResultCallback__MU__meth_addSingleResult__13766df06fe5136acc4a149d34543395";

Float32
btCollisionWorld_AllHitsRayResultCallback.addSingleResult!(
    in
    btCollisionWorld_LocalRayResult
    rayResult
    
    ,
    in
    Boolean
    normalInWorldSpace
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_addSingleResult(
        rayResult,
        normalInWorldSpace
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_AllHitsRayResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_AllHitsRayResultCallback] LIB[btCollisionWorld::AllHitsRayResultCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_AllHitsRayResultCallback.=(
    btCollisionWorld_AllHitsRayResultCallback that
    ) = "Bullet2__btCollisionWorld_AllHitsRayResultCallback__MU__simple_ass_op__976c5e2e556a8fe5801f20f4b36ca97e";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_AllHitsRayResultCallback.appendDesc(io String string) {
  string += "btCollisionWorld_AllHitsRayResultCallback:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_LocalConvexResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalConvexResult] LIB[btCollisionWorld::LocalConvexResult *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalConvexResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalConvexResult] LIB[btCollisionWorld::LocalConvexResult *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalConvexResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalConvexResult] LIB[btCollisionWorld::LocalConvexResult *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_LocalConvexResult() = "Bullet2__btCollisionWorld_LocalConvexResult__MU__empty_ctor__d70242d1c7c13ea164345f5c15216062";

/// \dfgPresetOmit
btCollisionWorld_LocalConvexResult(
    btCollisionWorld_LocalConvexResult that
    ) = "Bullet2__btCollisionWorld_LocalConvexResult__MU__copy_ctor__81918d3799262613987b8a4193ac588a";

/// \dfgPresetOmit
/// \internal
btCollisionWorld_LocalConvexResult.__ctor(
    btCollisionObject hitCollisionObject,
    btCollisionWorld_LocalShapeInfo localShapeInfo,
    CxxbtVector3ConstRef hitNormalLocal,
    CxxbtVector3ConstRef hitPointLocal,
    Float32 hitFraction
    ) = "Bullet2__btCollisionWorld_LocalConvexResult__MU__ctor__0829818c386f9906ee9d9173ef10b5f2";

/// \dfgPresetOmit
btCollisionWorld_LocalConvexResult(
    btCollisionObject hitCollisionObject,
    btCollisionWorld_LocalShapeInfo localShapeInfo,
    CxxbtVector3ConstRef hitNormalLocal,
    CxxbtVector3ConstRef hitPointLocal,
    Float32 hitFraction
    ) {
    this.__ctor(
        hitCollisionObject,
        localShapeInfo,
        hitNormalLocal,
        hitPointLocal,
        hitFraction
        );
}

btCollisionWorld_LocalConvexResult(
    in
    btCollisionObject
    hitCollisionObject
    
    ,
    in
    btCollisionWorld_LocalShapeInfo
    localShapeInfo
    
    ,
    in
    btVector3
    hitNormalLocal
    
    ,
    in
    btVector3
    hitPointLocal
    
    ,
    in
    Float32
    hitFraction
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef hitNormalLocal__cxx = Make_CxxbtVector3ConstRef(hitNormalLocal);
    
    CxxbtVector3ConstRef hitPointLocal__cxx = Make_CxxbtVector3ConstRef(hitPointLocal);
    
    this.__ctor(
        hitCollisionObject,
        localShapeInfo,
        hitNormalLocal__cxx,
        hitPointLocal__cxx,
        hitFraction
        );
    
    
    
    
    
}

btCollisionWorld_LocalConvexResult.cxx_delete() = "Bullet2__btCollisionWorld_LocalConvexResult__MU__delete__0b2a1fd7bb2a7dee4bbe99de73e6c21e";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalConvexResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalConvexResult] LIB[btCollisionWorld::LocalConvexResult *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalConvexResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalConvexResult] LIB[btCollisionWorld::LocalConvexResult *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_LocalConvexResult] EDK[Fabric_EDK_KL_btCollisionWorld_LocalConvexResult] LIB[btCollisionWorld::LocalConvexResult *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_LocalConvexResult.=(
    btCollisionWorld_LocalConvexResult that
    ) = "Bullet2__btCollisionWorld_LocalConvexResult__MU__simple_ass_op__11a96b6e314403c5ddd46013c345b1c0";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_LocalConvexResult.appendDesc(io String string) {
  string += "btCollisionWorld_LocalConvexResult:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionWorld_ConvexResultCallback(
    btCollisionWorld_ConvexResultCallback that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btCollisionWorld_ConvexResultCallback.cxx_delete() = "Bullet2__btCollisionWorld_ConvexResultCallback__MU__delete__389ac4ffbeeaf9b7f23de1a60eb66002";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionWorld_ConvexResultCallback.cxx_hasHit?(
    )
 = "Bullet2__btCollisionWorld_ConvexResultCallback__CO__meth_hasHit__d7eb7704f8013316b53ff91ad45c4616";

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionWorld_ConvexResultCallback.cxx_needsCollision?(
    btBroadphaseProxy proxy0
    )
 = "Bullet2__btCollisionWorld_ConvexResultCallback__CO__meth_needsCollision__2bcb77a8a35d3f3bdeb146a9199bea6e";

/// \dfgPresetOmit
/// \internal
Float32
btCollisionWorld_ConvexResultCallback.cxx_addSingleResult!(
    btCollisionWorld_LocalConvexResult convexResult,
    Boolean normalInWorldSpace
    )
 = "Bullet2__btCollisionWorld_ConvexResultCallback__MU__meth_addSingleResult__f626827310d9ca57674f4efff56a5533";

Boolean
btCollisionWorld_ConvexResultCallback.hasHit?(
    )
{   
    Boolean __res = 
    this.cxx_hasHit(
        );
    
    return __res;
}

Boolean
btCollisionWorld_ConvexResultCallback.needsCollision?(
    in
    btBroadphaseProxy
    proxy0
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_needsCollision(
        proxy0
        );
    
    
    return __res;
}

Float32
btCollisionWorld_ConvexResultCallback.addSingleResult!(
    in
    btCollisionWorld_LocalConvexResult
    convexResult
    
    ,
    in
    Boolean
    normalInWorldSpace
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_addSingleResult(
        convexResult,
        normalInWorldSpace
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ConvexResultCallback] LIB[btCollisionWorld::ConvexResultCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_ConvexResultCallback.=(
    btCollisionWorld_ConvexResultCallback that
    ) = "Bullet2__btCollisionWorld_ConvexResultCallback__MU__simple_ass_op__f0e25e7e4d990d71345b961406c9cfe6";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_ConvexResultCallback.appendDesc(io String string) {
  string += "btCollisionWorld_ConvexResultCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_ClosestConvexResultCallback() = "Bullet2__btCollisionWorld_ClosestConvexResultCallback__MU__empty_ctor__6bca5c4da1c054b4907df8c15fb27e89";

/// \dfgPresetOmit
btCollisionWorld_ClosestConvexResultCallback(
    btCollisionWorld_ClosestConvexResultCallback that
    ) = "Bullet2__btCollisionWorld_ClosestConvexResultCallback__MU__copy_ctor__b3c075edb014f46d17439bda27cd5a65";

/// \dfgPresetOmit
/// \internal
btCollisionWorld_ClosestConvexResultCallback.__ctor(
    CxxbtVector3ConstRef convexFromWorld,
    CxxbtVector3ConstRef convexToWorld
    ) = "Bullet2__btCollisionWorld_ClosestConvexResultCallback__MU__ctor__1a8bb36464830b3bf688bdd09dada4aa";

/// \dfgPresetOmit
btCollisionWorld_ClosestConvexResultCallback(
    CxxbtVector3ConstRef convexFromWorld,
    CxxbtVector3ConstRef convexToWorld
    ) {
    this.__ctor(
        convexFromWorld,
        convexToWorld
        );
}

btCollisionWorld_ClosestConvexResultCallback(
    in
    btVector3
    convexFromWorld
    
    ,
    in
    btVector3
    convexToWorld
    
    
    ) {
    
    CxxbtVector3ConstRef convexFromWorld__cxx = Make_CxxbtVector3ConstRef(convexFromWorld);
    
    CxxbtVector3ConstRef convexToWorld__cxx = Make_CxxbtVector3ConstRef(convexToWorld);
    this.__ctor(
        convexFromWorld__cxx,
        convexToWorld__cxx
        );
    
    
}

btCollisionWorld_ClosestConvexResultCallback.cxx_delete() = "Bullet2__btCollisionWorld_ClosestConvexResultCallback__MU__delete__058a9f402531439ae09fbb5c401f98a6";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btCollisionWorld_ClosestConvexResultCallback.cxx_addSingleResult!(
    btCollisionWorld_LocalConvexResult convexResult,
    Boolean normalInWorldSpace
    )
 = "Bullet2__btCollisionWorld_ClosestConvexResultCallback__MU__meth_addSingleResult__15480a7986a1746ae303d4fae3808546";

Float32
btCollisionWorld_ClosestConvexResultCallback.addSingleResult!(
    in
    btCollisionWorld_LocalConvexResult
    convexResult
    
    ,
    in
    Boolean
    normalInWorldSpace
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_addSingleResult(
        convexResult,
        normalInWorldSpace
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ClosestConvexResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ClosestConvexResultCallback] LIB[btCollisionWorld::ClosestConvexResultCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_ClosestConvexResultCallback.=(
    btCollisionWorld_ClosestConvexResultCallback that
    ) = "Bullet2__btCollisionWorld_ClosestConvexResultCallback__MU__simple_ass_op__6d654692a55404bd0cfd6b3950ce89c5";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_ClosestConvexResultCallback.appendDesc(io String string) {
  string += "btCollisionWorld_ClosestConvexResultCallback:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCollisionWorld_ContactResultCallback(
    btCollisionWorld_ContactResultCallback that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btCollisionWorld_ContactResultCallback.cxx_delete() = "Bullet2__btCollisionWorld_ContactResultCallback__MU__delete__dec710d700ad0f6b15830246f04c1bb7";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btCollisionWorld_ContactResultCallback.cxx_needsCollision?(
    btBroadphaseProxy proxy0
    )
 = "Bullet2__btCollisionWorld_ContactResultCallback__CO__meth_needsCollision__44d32e91e34c612d1bc862d63e2d08f0";

Boolean
btCollisionWorld_ContactResultCallback.needsCollision?(
    in
    btBroadphaseProxy
    proxy0
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_needsCollision(
        proxy0
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorld_ContactResultCallback] EDK[Fabric_EDK_KL_btCollisionWorld_ContactResultCallback] LIB[btCollisionWorld::ContactResultCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorld_ContactResultCallback.=(
    btCollisionWorld_ContactResultCallback that
    ) = "Bullet2__btCollisionWorld_ContactResultCallback__MU__simple_ass_op__61dd48e3b27bb13eaa82eaf8dc403949";


/// \dfgPresetOmit
/// \internal
btCollisionWorld_ContactResultCallback.appendDesc(io String string) {
  string += "btCollisionWorld_ContactResultCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCollisionWorldImporter() = "Bullet2__btCollisionWorldImporter__MU__empty_ctor__3b0f661047020fb8abaee1917830b927";

/// \dfgPresetOmit
btCollisionWorldImporter(
    btCollisionWorldImporter that
    ) = "Bullet2__btCollisionWorldImporter__MU__copy_ctor__2d44eacf8b048cdaaf5b804b5f43289b";

/// \dfgPresetOmit
/// \internal
btCollisionWorldImporter.__ctor(
    btCollisionWorld world
    ) = "Bullet2__btCollisionWorldImporter__MU__ctor__7ee9208082802e6f84042fc538d46c4c";

/// \dfgPresetOmit
btCollisionWorldImporter(
    btCollisionWorld world
    ) {
    this.__ctor(
        world
        );
}

btCollisionWorldImporter.cxx_delete() = "Bullet2__btCollisionWorldImporter__MU__delete__a5d699c5690f2c797f352319898f8671";

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///delete all memory collision shapes, rigid bodies, constraints etc. allocated during the load.
// 
///make sure you don't use the dynamics world containing objects after you call this method
/// \dfgPresetOmit
/// \internal

btCollisionWorldImporter.cxx_deleteAllData!(
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_deleteAllData__e216003b6548ba2e4d6526d3d5d54e4c";

/// \dfgPresetOmit
/// \internal

btCollisionWorldImporter.cxx_setVerboseMode!(
    SInt32 verboseMode
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_setVerboseMode__56d4882ac5e6c10ffd332ffffc70e950";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionWorldImporter.cxx_getVerboseMode?(
    )
 = "Bullet2__btCollisionWorldImporter__CO__meth_getVerboseMode__9ccfe44372809f0fd0e763f8dcea154e";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionWorldImporter.cxx_getNumCollisionShapes?(
    )
 = "Bullet2__btCollisionWorldImporter__CO__meth_getNumCollisionShapes__100024ceea11e26460561a63d16b9e6a";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_getCollisionShapeByIndex!(
    SInt32 index
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_getCollisionShapeByIndex__d9355401c910b001ba2452c4b1a399a9";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionWorldImporter.cxx_getNumRigidBodies?(
    )
 = "Bullet2__btCollisionWorldImporter__CO__meth_getNumRigidBodies__c6b6852fbe9d80d587be82180f6fea58";

/// \dfgPresetOmit
/// \internal
btCollisionObject
btCollisionWorldImporter.cxx_getRigidBodyByIndex?(
    SInt32 index
    )
 = "Bullet2__btCollisionWorldImporter__CO__meth_getRigidBodyByIndex__31f7ccc4355cb429bec12c922a9b6911";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionWorldImporter.cxx_getNumBvhs?(
    )
 = "Bullet2__btCollisionWorldImporter__CO__meth_getNumBvhs__53a5b88374df0f277122fb890d7658c6";

/// \dfgPresetOmit
/// \internal
btOptimizedBvh
btCollisionWorldImporter.cxx_getBvhByIndex?(
    SInt32 index
    )
 = "Bullet2__btCollisionWorldImporter__CO__meth_getBvhByIndex__8e453abeba7bb9ebcfc38c6ed7be3d58";

/// \dfgPresetOmit
/// \internal
SInt32
btCollisionWorldImporter.cxx_getNumTriangleInfoMaps?(
    )
 = "Bullet2__btCollisionWorldImporter__CO__meth_getNumTriangleInfoMaps__8550be82da774701331f795075527540";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_getCollisionShapeByName!(
    CxxCharConstPtr name
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_getCollisionShapeByName__bf3433775144fa28d839c108ec27d294";

/// \dfgPresetOmit
/// \internal
btCollisionObject
btCollisionWorldImporter.cxx_getCollisionObjectByName!(
    CxxCharConstPtr name
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_getCollisionObjectByName__17e224446efb87b273bb1881ddd7c512";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btCollisionWorldImporter.cxx_getNameForPointer?(
    Data ptr
    )
 = "Bullet2__btCollisionWorldImporter__CO__meth_getNameForPointer__87e55071705a5b0aca573f48e226030c";

///those virtuals are called by load and can be overridden by the user
/// \dfgPresetOmit
/// \internal
btCollisionObject
btCollisionWorldImporter.cxx_createCollisionObject!(
    CxxbtTransformConstRef startTransform,
    btCollisionShape shape,
    CxxCharConstPtr bodyName
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createCollisionObject__3af84a698eaccc3b5daf048e3f2a829d";

///shapes
/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createPlaneShape!(
    CxxbtVector3ConstRef planeNormal,
    Float32 planeConstant
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createPlaneShape__e41dcd941f7d7249de20f0baa1db0e9e";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createBoxShape!(
    CxxbtVector3ConstRef halfExtents
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createBoxShape__691d03e322f1b9b04d80fef458850fd5";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createSphereShape!(
    Float32 radius
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createSphereShape__98a26bfc0d5873ec41a8876d115a8350";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createCapsuleShapeX!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createCapsuleShapeX__56836ae3e0a30d9c6f71bf2bf27948be";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createCapsuleShapeY!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createCapsuleShapeY__454db28f6156201d667077e55f20282e";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createCapsuleShapeZ!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createCapsuleShapeZ__4b88ef6bac940dba6fbab2a4fb218e2f";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createCylinderShapeX!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createCylinderShapeX__a594f5b6408c898feb10cef8d49403ec";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createCylinderShapeY!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createCylinderShapeY__dbfbdc067b3ba285dd792d54f82fc345";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createCylinderShapeZ!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createCylinderShapeZ__fc46598021ecdb0f1b6598f3a928164f";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createConeShapeX!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createConeShapeX__8d255f77d0c71611fc03e8ff712b7ce2";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createConeShapeY!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createConeShapeY__7742cf73e37a925e606f0331bc64b2da";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createConeShapeZ!(
    Float32 radius,
    Float32 height
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createConeShapeZ__835a8a04d229cb70136f2673a89e2185";

/// \dfgPresetOmit
/// \internal
btTriangleIndexVertexArray
btCollisionWorldImporter.cxx_createTriangleMeshContainer!(
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createTriangleMeshContainer__a50588140d689ab48ee427462baed915";

/// \dfgPresetOmit
/// \internal
btBvhTriangleMeshShape
btCollisionWorldImporter.cxx_createBvhTriangleMeshShape!(
    btStridingMeshInterface trimesh,
    btOptimizedBvh bvh
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createBvhTriangleMeshShape__a7a12af5d2c4f48c54d8d8c242b120f9";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btCollisionWorldImporter.cxx_createConvexTriangleMeshShape!(
    btStridingMeshInterface trimesh
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createConvexTriangleMeshShape__6599983c7cccca523a0c105cb3bf54b5";

/// \dfgPresetOmit
/// \internal
btStridingMeshInterfaceData
btCollisionWorldImporter.cxx_createStridingMeshInterfaceData!(
    btStridingMeshInterfaceData interfaceData
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createStridingMeshInterfaceData__6b77403927aae4457d71a8e6746049cf";

/// \dfgPresetOmit
/// \internal
btConvexHullShape
btCollisionWorldImporter.cxx_createConvexHullShape!(
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createConvexHullShape__bec9c3aa1864e2b7cbc8c077360b5138";

/// \dfgPresetOmit
/// \internal
btCompoundShape
btCollisionWorldImporter.cxx_createCompoundShape!(
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createCompoundShape__02932b8dc0e18df67fe06ff2cc004f61";

/// \dfgPresetOmit
/// \internal
btScaledBvhTriangleMeshShape
btCollisionWorldImporter.cxx_createScaledTrangleMeshShape!(
    btBvhTriangleMeshShape meshShape,
    CxxbtVector3ConstRef localScalingbtBvhTriangleMeshShape
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createScaledTrangleMeshShape__029463a38f761a3c37cb8a5518f97aff";

/// \dfgPresetOmit
/// \internal
btMultiSphereShape
btCollisionWorldImporter.cxx_createMultiSphereShape!(
    CxxbtVector3ConstPtr positions,
    CxxFloat32ConstPtr radi,
    SInt32 numSpheres
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createMultiSphereShape__d1e5353f38ecf5789148dd04b1b74986";

/// \dfgPresetOmit
/// \internal
btTriangleIndexVertexArray
btCollisionWorldImporter.cxx_createMeshInterface!(
    btStridingMeshInterfaceData meshData
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createMeshInterface__c179e61b06a5e9155b5068461e35d6cf";

///acceleration and connectivity structures
/// \dfgPresetOmit
/// \internal
btOptimizedBvh
btCollisionWorldImporter.cxx_createOptimizedBvh!(
    )
 = "Bullet2__btCollisionWorldImporter__MU__meth_createOptimizedBvh__af89f0194c7a0f6bceab61cd6549ef52";

btCollisionShape
btCollisionWorldImporter.createConeShapeX!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createConeShapeX(
        radius,
        height
        );
    
    
    
    return __res;
}

SInt32
btCollisionWorldImporter.getNumCollisionShapes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumCollisionShapes(
        );
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createConvexTriangleMeshShape!(
    in
    btStridingMeshInterface
    trimesh
    
    
    )
{   
    
    btCollisionShape __res = 
    this.cxx_createConvexTriangleMeshShape(
        trimesh
        );
    
    
    return __res;
}

///those virtuals are called by load and can be overridden by the user
btCollisionObject
btCollisionWorldImporter.createCollisionObject!(
    in
    btTransform
    startTransform
    
    ,
    in
    btCollisionShape
    shape
    
    ,
    in
    String
    bodyName
    
    
    )
{   
    
    CxxbtTransformConstRef startTransform__cxx = Make_CxxbtTransformConstRef(startTransform);
    
    CxxCharConstPtr bodyName__cxx = CxxCharConstPtr(bodyName);
    btCollisionObject __res = 
    this.cxx_createCollisionObject(
        startTransform__cxx,
        shape,
        bodyName__cxx
        );
    
    
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createCylinderShapeX!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createCylinderShapeX(
        radius,
        height
        );
    
    
    
    return __res;
}

///shapes
btCollisionShape
btCollisionWorldImporter.createPlaneShape!(
    in
    btVector3
    planeNormal
    
    ,
    in
    Float32
    planeConstant
    
    
    )
{   
    
    CxxbtVector3ConstRef planeNormal__cxx = Make_CxxbtVector3ConstRef(planeNormal);
    
    btCollisionShape __res = 
    this.cxx_createPlaneShape(
        planeNormal__cxx,
        planeConstant
        );
    
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createConeShapeZ!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createConeShapeZ(
        radius,
        height
        );
    
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createCapsuleShapeY!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createCapsuleShapeY(
        radius,
        height
        );
    
    
    
    return __res;
}

SInt32
btCollisionWorldImporter.getNumBvhs?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumBvhs(
        );
    
    return __res;
}

///acceleration and connectivity structures
btOptimizedBvh
btCollisionWorldImporter.createOptimizedBvh!(
    )
{   
    btOptimizedBvh __res = 
    this.cxx_createOptimizedBvh(
        );
    
    return __res;
}

btConvexHullShape
btCollisionWorldImporter.createConvexHullShape!(
    )
{   
    btConvexHullShape __res = 
    this.cxx_createConvexHullShape(
        );
    
    return __res;
}

SInt32
btCollisionWorldImporter.getVerboseMode?(
    )
{   
    SInt32 __res = 
    this.cxx_getVerboseMode(
        );
    
    return __res;
}

SInt32
btCollisionWorldImporter.getNumRigidBodies?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumRigidBodies(
        );
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createBoxShape!(
    in
    btVector3
    halfExtents
    
    
    )
{   
    
    CxxbtVector3ConstRef halfExtents__cxx = Make_CxxbtVector3ConstRef(halfExtents);
    btCollisionShape __res = 
    this.cxx_createBoxShape(
        halfExtents__cxx
        );
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createConeShapeY!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createConeShapeY(
        radius,
        height
        );
    
    
    
    return __res;
}

btBvhTriangleMeshShape
btCollisionWorldImporter.createBvhTriangleMeshShape!(
    in
    btStridingMeshInterface
    trimesh
    
    ,
    in
    btOptimizedBvh
    bvh
    
    
    )
{   
    
    
    btBvhTriangleMeshShape __res = 
    this.cxx_createBvhTriangleMeshShape(
        trimesh,
        bvh
        );
    
    
    
    return __res;
}

btTriangleIndexVertexArray
btCollisionWorldImporter.createTriangleMeshContainer!(
    )
{   
    btTriangleIndexVertexArray __res = 
    this.cxx_createTriangleMeshContainer(
        );
    
    return __res;
}

btTriangleIndexVertexArray
btCollisionWorldImporter.createMeshInterface!(
    in
    btStridingMeshInterfaceData
    meshData
    
    
    )
{   
    
    btTriangleIndexVertexArray __res = 
    this.cxx_createMeshInterface(
        meshData
        );
    
    
    return __res;
}

btMultiSphereShape
btCollisionWorldImporter.createMultiSphereShape!(
    in
    btVector3
    positions
    
    ,
    in
    Float32
    radi
    
    ,
    in
    SInt32
    numSpheres
    
    
    )
{   
    
    CxxbtVector3ConstPtr positions__cxx = Make_CxxbtVector3ConstPtr(positions);
    
    CxxFloat32ConstPtr radi__cxx = Make_CxxFloat32ConstPtr(radi);
    
    btMultiSphereShape __res = 
    this.cxx_createMultiSphereShape(
        positions__cxx,
        radi__cxx,
        numSpheres
        );
    
    
    
    
    return __res;
}

btCollisionObject
btCollisionWorldImporter.getRigidBodyByIndex?(
    in
    SInt32
    index
    
    
    )
{   
    
    btCollisionObject __res = 
    this.cxx_getRigidBodyByIndex(
        index
        );
    
    
    return __res;
}

String
btCollisionWorldImporter.getNameForPointer?(
    in
    Data
    ptr
    
    
    )
{   
    
    CxxCharConstPtr __res = 
    this.cxx_getNameForPointer(
        ptr
        );
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createSphereShape!(
    in
    Float32
    radius
    
    
    )
{   
    
    btCollisionShape __res = 
    this.cxx_createSphereShape(
        radius
        );
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createCylinderShapeY!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createCylinderShapeY(
        radius,
        height
        );
    
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.getCollisionShapeByName!(
    in
    String
    name
    
    
    )
{   
    CxxCharConstPtr name__cxx = CxxCharConstPtr(name);
    btCollisionShape __res = 
    this.cxx_getCollisionShapeByName(
        name__cxx
        );
    
    
    return __res;
}

///delete all memory collision shapes, rigid bodies, constraints etc. allocated during the load.
// 
///make sure you don't use the dynamics world containing objects after you call this method

btCollisionWorldImporter.deleteAllData!(
    )
{   
    
    this.cxx_deleteAllData(
        );
    
    
}

btCollisionObject
btCollisionWorldImporter.getCollisionObjectByName!(
    in
    String
    name
    
    
    )
{   
    CxxCharConstPtr name__cxx = CxxCharConstPtr(name);
    btCollisionObject __res = 
    this.cxx_getCollisionObjectByName(
        name__cxx
        );
    
    
    return __res;
}

btOptimizedBvh
btCollisionWorldImporter.getBvhByIndex?(
    in
    SInt32
    index
    
    
    )
{   
    
    btOptimizedBvh __res = 
    this.cxx_getBvhByIndex(
        index
        );
    
    
    return __res;
}


btCollisionWorldImporter.setVerboseMode!(
    in
    SInt32
    verboseMode
    
    
    )
{   
    
    
    this.cxx_setVerboseMode(
        verboseMode
        );
    
    
    
}

SInt32
btCollisionWorldImporter.getNumTriangleInfoMaps?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumTriangleInfoMaps(
        );
    
    return __res;
}

btStridingMeshInterfaceData
btCollisionWorldImporter.createStridingMeshInterfaceData!(
    in
    btStridingMeshInterfaceData
    interfaceData
    
    
    )
{   
    
    btStridingMeshInterfaceData __res = 
    this.cxx_createStridingMeshInterfaceData(
        interfaceData
        );
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createCylinderShapeZ!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createCylinderShapeZ(
        radius,
        height
        );
    
    
    
    return __res;
}

btCompoundShape
btCollisionWorldImporter.createCompoundShape!(
    )
{   
    btCompoundShape __res = 
    this.cxx_createCompoundShape(
        );
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createCapsuleShapeZ!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createCapsuleShapeZ(
        radius,
        height
        );
    
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.getCollisionShapeByIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    btCollisionShape __res = 
    this.cxx_getCollisionShapeByIndex(
        index
        );
    
    
    return __res;
}

btCollisionShape
btCollisionWorldImporter.createCapsuleShapeX!(
    in
    Float32
    radius
    
    ,
    in
    Float32
    height
    
    
    )
{   
    
    
    btCollisionShape __res = 
    this.cxx_createCapsuleShapeX(
        radius,
        height
        );
    
    
    
    return __res;
}

btScaledBvhTriangleMeshShape
btCollisionWorldImporter.createScaledTrangleMeshShape!(
    in
    btBvhTriangleMeshShape
    meshShape
    
    ,
    in
    btVector3
    localScalingbtBvhTriangleMeshShape
    
    
    )
{   
    
    
    CxxbtVector3ConstRef localScalingbtBvhTriangleMeshShape__cxx = Make_CxxbtVector3ConstRef(localScalingbtBvhTriangleMeshShape);
    btScaledBvhTriangleMeshShape __res = 
    this.cxx_createScaledTrangleMeshShape(
        meshShape,
        localScalingbtBvhTriangleMeshShape__cxx
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCollisionWorldImporter] EDK[Fabric_EDK_KL_btCollisionWorldImporter] LIB[btCollisionWorldImporter *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCollisionWorldImporter.=(
    btCollisionWorldImporter that
    ) = "Bullet2__btCollisionWorldImporter__MU__simple_ass_op__22262e848843b091255f72c78e24cb44";


/// \dfgPresetOmit
/// \internal
btCollisionWorldImporter.appendDesc(io String string) {
  string += "btCollisionWorldImporter:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundCollisionAlgorithm() = "Bullet2__btCompoundCollisionAlgorithm__MU__empty_ctor__8a5a9c402f7697370928811f4b6132d9";

/// \dfgPresetOmit
btCompoundCollisionAlgorithm(
    btCompoundCollisionAlgorithm that
    ) = "Bullet2__btCompoundCollisionAlgorithm__MU__copy_ctor__298be3e21a7b912b02ab3694297b99b7";

btCompoundCollisionAlgorithm.cxx_delete() = "Bullet2__btCompoundCollisionAlgorithm__MU__delete__306ed2ff49e3f2565f1d0f22187a3286";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btCollisionAlgorithm
btCompoundCollisionAlgorithm.cxx_getChildAlgorithm?(
    SInt32 n
    )
 = "Bullet2__btCompoundCollisionAlgorithm__CO__meth_getChildAlgorithm__40b1c9ecd63c47969a79a7e406f6b897";

/// \dfgPresetOmit
/// \internal
Float32
btCompoundCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btCompoundCollisionAlgorithm__MU__meth_calculateTimeOfImpact__dfb528748e833e3186cce393780acc2b";

btCollisionAlgorithm
btCompoundCollisionAlgorithm.getChildAlgorithm?(
    in
    SInt32
    n
    
    
    )
{   
    
    btCollisionAlgorithm __res = 
    this.cxx_getChildAlgorithm(
        n
        );
    
    
    return __res;
}

Float32
btCompoundCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm] LIB[btCompoundCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundCollisionAlgorithm.=(
    btCompoundCollisionAlgorithm that
    ) = "Bullet2__btCompoundCollisionAlgorithm__MU__simple_ass_op__548911cdda5cd0f6f30521ba9c1a5602";


/// \dfgPresetOmit
/// \internal
btCompoundCollisionAlgorithm.appendDesc(io String string) {
  string += "btCompoundCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundCollisionAlgorithm_CreateFunc() = "Bullet2__btCompoundCollisionAlgorithm_CreateFunc__MU__empty_ctor__714da941c2601c7b81e15d3f879470f0";

/// \dfgPresetOmit
btCompoundCollisionAlgorithm_CreateFunc(
    btCompoundCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btCompoundCollisionAlgorithm_CreateFunc__MU__copy_ctor__d3f87c23d417d897b1bda1dc1e48e190";

btCompoundCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btCompoundCollisionAlgorithm_CreateFunc__MU__delete__cbf8dc82f0ec40faf4ac3d6f904bd621";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundCollisionAlgorithm_CreateFunc.=(
    btCompoundCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btCompoundCollisionAlgorithm_CreateFunc__MU__simple_ass_op__9946ec7d5a356d05ed555078925f4748";


/// \dfgPresetOmit
/// \internal
btCompoundCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btCompoundCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundCollisionAlgorithm_SwappedCreateFunc() = "Bullet2__btCompoundCollisionAlgorithm_SwappedCreateFunc__MU__empty_ctor__d5a761f73a8008f80fc1e140e1f99ca3";

/// \dfgPresetOmit
btCompoundCollisionAlgorithm_SwappedCreateFunc(
    btCompoundCollisionAlgorithm_SwappedCreateFunc that
    ) = "Bullet2__btCompoundCollisionAlgorithm_SwappedCreateFunc__MU__copy_ctor__e9980f90d1281f1a383a0ffb9d76eef9";

btCompoundCollisionAlgorithm_SwappedCreateFunc.cxx_delete() = "Bullet2__btCompoundCollisionAlgorithm_SwappedCreateFunc__MU__delete__a8b5b63456452989ca664f63f44339c6";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundCollisionAlgorithm_SwappedCreateFunc.=(
    btCompoundCollisionAlgorithm_SwappedCreateFunc that
    ) = "Bullet2__btCompoundCollisionAlgorithm_SwappedCreateFunc__MU__simple_ass_op__4d6e9717bd2e56e646cf3626bcd6d452";


/// \dfgPresetOmit
/// \internal
btCompoundCollisionAlgorithm_SwappedCreateFunc.appendDesc(io String string) {
  string += "btCompoundCollisionAlgorithm_SwappedCreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundCompoundCollisionAlgorithm() = "Bullet2__btCompoundCompoundCollisionAlgorithm__MU__empty_ctor__ce3b90c1c12602e92a74b953ebf0f02c";

/// \dfgPresetOmit
btCompoundCompoundCollisionAlgorithm(
    btCompoundCompoundCollisionAlgorithm that
    ) = "Bullet2__btCompoundCompoundCollisionAlgorithm__MU__copy_ctor__21885388f3bd2a3ed14bb4cae2d6bdb9";

btCompoundCompoundCollisionAlgorithm.cxx_delete() = "Bullet2__btCompoundCompoundCollisionAlgorithm__MU__delete__97a029ed86f93fbcabdc2f27c52c2f55";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btCompoundCompoundCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btCompoundCompoundCollisionAlgorithm__MU__meth_calculateTimeOfImpact__06dd2234bdddb7440e309792f7c472df";

Float32
btCompoundCompoundCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm] LIB[btCompoundCompoundCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundCompoundCollisionAlgorithm.=(
    btCompoundCompoundCollisionAlgorithm that
    ) = "Bullet2__btCompoundCompoundCollisionAlgorithm__MU__simple_ass_op__df84c8938b909fe46e4f34ebd85f865e";


/// \dfgPresetOmit
/// \internal
btCompoundCompoundCollisionAlgorithm.appendDesc(io String string) {
  string += "btCompoundCompoundCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundCompoundCollisionAlgorithm_CreateFunc() = "Bullet2__btCompoundCompoundCollisionAlgorithm_CreateFunc__MU__empty_ctor__2964b7293f1cb3aa70bf8f1a0cb1287c";

/// \dfgPresetOmit
btCompoundCompoundCollisionAlgorithm_CreateFunc(
    btCompoundCompoundCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btCompoundCompoundCollisionAlgorithm_CreateFunc__MU__copy_ctor__e01373100ec29627c33915d484baf9f8";

btCompoundCompoundCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btCompoundCompoundCollisionAlgorithm_CreateFunc__MU__delete__c0d57720f0c2d680b8275b04ce81971e";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_CreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundCompoundCollisionAlgorithm_CreateFunc.=(
    btCompoundCompoundCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btCompoundCompoundCollisionAlgorithm_CreateFunc__MU__simple_ass_op__bba0379ba3da95affd20037f11739c76";


/// \dfgPresetOmit
/// \internal
btCompoundCompoundCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btCompoundCompoundCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc() = "Bullet2__btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc__MU__empty_ctor__1614520dbb5843b597c96f3f46d2fa2d";

/// \dfgPresetOmit
btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc(
    btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc that
    ) = "Bullet2__btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc__MU__copy_ctor__3de29c3bbfd7beb17b3f6aa1cd98188f";

btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc.cxx_delete() = "Bullet2__btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc__MU__delete__afa6e6a21330536747d34b58d7bbb461";

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc] LIB[btCompoundCompoundCollisionAlgorithm::SwappedCreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc.=(
    btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc that
    ) = "Bullet2__btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc__MU__simple_ass_op__e3f0a35eaefd10e6b49b387d55d5b48a";


/// \dfgPresetOmit
/// \internal
btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc.appendDesc(io String string) {
  string += "btCompoundCompoundCollisionAlgorithm_SwappedCreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvex2dConvex2dAlgorithm() = "Bullet2__btConvex2dConvex2dAlgorithm__MU__empty_ctor__43d5364bb030365c31676578b16b2f4b";

/// \dfgPresetOmit
btConvex2dConvex2dAlgorithm(
    btConvex2dConvex2dAlgorithm that
    ) = "Bullet2__btConvex2dConvex2dAlgorithm__MU__copy_ctor__e0d28712ebff29b10cd51f693a678b8e";

btConvex2dConvex2dAlgorithm.cxx_delete() = "Bullet2__btConvex2dConvex2dAlgorithm__MU__delete__003913e9c07db3398d2d0a4a40fcde95";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btConvex2dConvex2dAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btConvex2dConvex2dAlgorithm__MU__meth_calculateTimeOfImpact__7f6cf7046d242bcc784a2bbeae2f5cb5";

/// \dfgPresetOmit
/// \internal

btConvex2dConvex2dAlgorithm.cxx_setLowLevelOfDetail!(
    Boolean useLowLevel
    )
 = "Bullet2__btConvex2dConvex2dAlgorithm__MU__meth_setLowLevelOfDetail__eec30e71ddec5f63a79d9fba56b222e4";

Float32
btConvex2dConvex2dAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}


btConvex2dConvex2dAlgorithm.setLowLevelOfDetail!(
    in
    Boolean
    useLowLevel
    
    
    )
{   
    
    
    this.cxx_setLowLevelOfDetail(
        useLowLevel
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm] LIB[btConvex2dConvex2dAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvex2dConvex2dAlgorithm.=(
    btConvex2dConvex2dAlgorithm that
    ) = "Bullet2__btConvex2dConvex2dAlgorithm__MU__simple_ass_op__6e3ecd17609fb72709922d4888a49b22";


/// \dfgPresetOmit
/// \internal
btConvex2dConvex2dAlgorithm.appendDesc(io String string) {
  string += "btConvex2dConvex2dAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvex2dConvex2dAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc] LIB[btConvex2dConvex2dAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc] LIB[btConvex2dConvex2dAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc] LIB[btConvex2dConvex2dAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvex2dConvex2dAlgorithm_CreateFunc() = "Bullet2__btConvex2dConvex2dAlgorithm_CreateFunc__MU__empty_ctor__4bf7030c8e9f973e95321200591a6748";

/// \dfgPresetOmit
btConvex2dConvex2dAlgorithm_CreateFunc(
    btConvex2dConvex2dAlgorithm_CreateFunc that
    ) = "Bullet2__btConvex2dConvex2dAlgorithm_CreateFunc__MU__copy_ctor__b937cee0937db6a60b1e3c11cfbd61f8";

btConvex2dConvex2dAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btConvex2dConvex2dAlgorithm_CreateFunc__MU__delete__26f47c26314795cf8cff0bfe23b7d2e1";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc] LIB[btConvex2dConvex2dAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc] LIB[btConvex2dConvex2dAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvex2dConvex2dAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvex2dConvex2dAlgorithm_CreateFunc] LIB[btConvex2dConvex2dAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvex2dConvex2dAlgorithm_CreateFunc.=(
    btConvex2dConvex2dAlgorithm_CreateFunc that
    ) = "Bullet2__btConvex2dConvex2dAlgorithm_CreateFunc__MU__simple_ass_op__b601d5f5f67636f99e090509fd5c2c35";


/// \dfgPresetOmit
/// \internal
btConvex2dConvex2dAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btConvex2dConvex2dAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexTriangleCallback() = "Bullet2__btConvexTriangleCallback__MU__empty_ctor__a162e52c22e61093d4ab426aaaeb37ad";

/// \dfgPresetOmit
btConvexTriangleCallback(
    btConvexTriangleCallback that
    ) = "Bullet2__btConvexTriangleCallback__MU__copy_ctor__9657e71d2064704a8e95843b678d8fd5";

btConvexTriangleCallback.cxx_delete() = "Bullet2__btConvexTriangleCallback__MU__delete__90025e2fbb2f1b00aa73d6d9f368d369";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btConvexTriangleCallback.cxx_clearWrapperData!(
    )
 = "Bullet2__btConvexTriangleCallback__MU__meth_clearWrapperData__9ce01ca30b1a476746ae8dcbad5837f8";

/// \dfgPresetOmit
/// \internal

btConvexTriangleCallback.cxx_processTriangle!(
    CxxbtVector3Ptr triangle,
    SInt32 partId,
    SInt32 triangleIndex
    )
 = "Bullet2__btConvexTriangleCallback__MU__meth_processTriangle__1e3443c8d75b043e43e458af5548a154";

/// \dfgPresetOmit
/// \internal

btConvexTriangleCallback.cxx_clearCache!(
    )
 = "Bullet2__btConvexTriangleCallback__MU__meth_clearCache__9d1531bffdb18edd6402d4f903cb84df";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btConvexTriangleCallback.cxx_getAabbMin?(
    )
 = "Bullet2__btConvexTriangleCallback__CO__meth_getAabbMin__7a0ecb5b08d2e17d97f4381b43102602";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btConvexTriangleCallback.cxx_getAabbMax?(
    )
 = "Bullet2__btConvexTriangleCallback__CO__meth_getAabbMax__fe87f4221389ccce9420cc8ddf6988ed";

btVector3
btConvexTriangleCallback.getAabbMax?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAabbMax(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btConvexTriangleCallback.clearWrapperData!(
    )
{   
    
    this.cxx_clearWrapperData(
        );
    
    
}

btVector3
btConvexTriangleCallback.getAabbMin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAabbMin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btConvexTriangleCallback.processTriangle!(
    io
    btVector3
    triangle
    
    ,
    in
    SInt32
    partId
    
    ,
    in
    SInt32
    triangleIndex
    
    
    )
{   
    
    CxxbtVector3Ptr triangle__cxx = Make_CxxbtVector3Ptr(triangle);
    
    
    
    this.cxx_processTriangle(
        triangle__cxx,
        partId,
        triangleIndex
        );
    
    
    
    
    
}


btConvexTriangleCallback.clearCache!(
    )
{   
    
    this.cxx_clearCache(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexTriangleCallback] EDK[Fabric_EDK_KL_btConvexTriangleCallback] LIB[btConvexTriangleCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexTriangleCallback.=(
    btConvexTriangleCallback that
    ) = "Bullet2__btConvexTriangleCallback__MU__simple_ass_op__4ab22a626eebee3a8b709d88ed5a945a";


/// \dfgPresetOmit
/// \internal
btConvexTriangleCallback.appendDesc(io String string) {
  string += "btConvexTriangleCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexConcaveCollisionAlgorithm() = "Bullet2__btConvexConcaveCollisionAlgorithm__MU__empty_ctor__d6d9b712d6906569e3f62a8ed9fcc962";

/// \dfgPresetOmit
btConvexConcaveCollisionAlgorithm(
    btConvexConcaveCollisionAlgorithm that
    ) = "Bullet2__btConvexConcaveCollisionAlgorithm__MU__copy_ctor__dad6f24deffe98729da6a5676a3c7b31";

btConvexConcaveCollisionAlgorithm.cxx_delete() = "Bullet2__btConvexConcaveCollisionAlgorithm__MU__delete__c891eb642bdd504bdcba324dc6d31402";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btConvexConcaveCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btConvexConcaveCollisionAlgorithm__MU__meth_calculateTimeOfImpact__1361c2262549e4e8ff7c76fee4a6fe78";

/// \dfgPresetOmit
/// \internal

btConvexConcaveCollisionAlgorithm.cxx_clearCache!(
    )
 = "Bullet2__btConvexConcaveCollisionAlgorithm__MU__meth_clearCache__bb7c12fdb322e8f7b5f4cc4472caa579";

Float32
btConvexConcaveCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}


btConvexConcaveCollisionAlgorithm.clearCache!(
    )
{   
    
    this.cxx_clearCache(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm] LIB[btConvexConcaveCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexConcaveCollisionAlgorithm.=(
    btConvexConcaveCollisionAlgorithm that
    ) = "Bullet2__btConvexConcaveCollisionAlgorithm__MU__simple_ass_op__0f3319451ceac785425053d4dd05ffbd";


/// \dfgPresetOmit
/// \internal
btConvexConcaveCollisionAlgorithm.appendDesc(io String string) {
  string += "btConvexConcaveCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc] LIB[btConvexConcaveCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc] LIB[btConvexConcaveCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc] LIB[btConvexConcaveCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexConcaveCollisionAlgorithm_CreateFunc() = "Bullet2__btConvexConcaveCollisionAlgorithm_CreateFunc__MU__empty_ctor__a4b373735763bb9acc2508a2ff4c9314";

/// \dfgPresetOmit
btConvexConcaveCollisionAlgorithm_CreateFunc(
    btConvexConcaveCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btConvexConcaveCollisionAlgorithm_CreateFunc__MU__copy_ctor__48fdee62d4c7f9913038ce3c2386b74f";

btConvexConcaveCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btConvexConcaveCollisionAlgorithm_CreateFunc__MU__delete__46356067577b9510208355cd06079400";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc] LIB[btConvexConcaveCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc] LIB[btConvexConcaveCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_CreateFunc] LIB[btConvexConcaveCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexConcaveCollisionAlgorithm_CreateFunc.=(
    btConvexConcaveCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btConvexConcaveCollisionAlgorithm_CreateFunc__MU__simple_ass_op__1c5b0160aacbbaac4f32e1810aad4b93";


/// \dfgPresetOmit
/// \internal
btConvexConcaveCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btConvexConcaveCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexConcaveCollisionAlgorithm_SwappedCreateFunc() = "Bullet2__btConvexConcaveCollisionAlgorithm_SwappedCreateFunc__MU__empty_ctor__d0efe216813c10823e2376adf83d2561";

/// \dfgPresetOmit
btConvexConcaveCollisionAlgorithm_SwappedCreateFunc(
    btConvexConcaveCollisionAlgorithm_SwappedCreateFunc that
    ) = "Bullet2__btConvexConcaveCollisionAlgorithm_SwappedCreateFunc__MU__copy_ctor__2a7f837f02ae03655f334b7629a664a6";

btConvexConcaveCollisionAlgorithm_SwappedCreateFunc.cxx_delete() = "Bullet2__btConvexConcaveCollisionAlgorithm_SwappedCreateFunc__MU__delete__16b6dcdfbaff4a1fc8af3d905331ed53";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btConvexConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btConvexConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexConcaveCollisionAlgorithm_SwappedCreateFunc.=(
    btConvexConcaveCollisionAlgorithm_SwappedCreateFunc that
    ) = "Bullet2__btConvexConcaveCollisionAlgorithm_SwappedCreateFunc__MU__simple_ass_op__12ee8907da407f0608cf2f3b859b3860";


/// \dfgPresetOmit
/// \internal
btConvexConcaveCollisionAlgorithm_SwappedCreateFunc.appendDesc(io String string) {
  string += "btConvexConcaveCollisionAlgorithm_SwappedCreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexConvexAlgorithm() = "Bullet2__btConvexConvexAlgorithm__MU__empty_ctor__5c820d261b1f7411010d60c153c53476";

/// \dfgPresetOmit
btConvexConvexAlgorithm(
    btConvexConvexAlgorithm that
    ) = "Bullet2__btConvexConvexAlgorithm__MU__copy_ctor__476149ad1388f6712f7e62f664263fde";

btConvexConvexAlgorithm.cxx_delete() = "Bullet2__btConvexConvexAlgorithm__MU__delete__cd015fd8a596f79173da724fff680d59";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btConvexConvexAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btConvexConvexAlgorithm__MU__meth_calculateTimeOfImpact__6a696cbec3a5ff1e5ea4a200192fb4a2";

/// \dfgPresetOmit
/// \internal

btConvexConvexAlgorithm.cxx_setLowLevelOfDetail!(
    Boolean useLowLevel
    )
 = "Bullet2__btConvexConvexAlgorithm__MU__meth_setLowLevelOfDetail__9ff931370784676a5e798b45cff19fc2";

Float32
btConvexConvexAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}


btConvexConvexAlgorithm.setLowLevelOfDetail!(
    in
    Boolean
    useLowLevel
    
    
    )
{   
    
    
    this.cxx_setLowLevelOfDetail(
        useLowLevel
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm] LIB[btConvexConvexAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexConvexAlgorithm.=(
    btConvexConvexAlgorithm that
    ) = "Bullet2__btConvexConvexAlgorithm__MU__simple_ass_op__6ba8ee9e13d2f8b3b876d03791ceed9e";


/// \dfgPresetOmit
/// \internal
btConvexConvexAlgorithm.appendDesc(io String string) {
  string += "btConvexConvexAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexConvexAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc] LIB[btConvexConvexAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc] LIB[btConvexConvexAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc] LIB[btConvexConvexAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexConvexAlgorithm_CreateFunc() = "Bullet2__btConvexConvexAlgorithm_CreateFunc__MU__empty_ctor__d460ae9b483e50c317905d2a401c1a14";

/// \dfgPresetOmit
btConvexConvexAlgorithm_CreateFunc(
    btConvexConvexAlgorithm_CreateFunc that
    ) = "Bullet2__btConvexConvexAlgorithm_CreateFunc__MU__copy_ctor__b155fe039188c0a38397a663c55cb65b";

btConvexConvexAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btConvexConvexAlgorithm_CreateFunc__MU__delete__150219650031795dd99e6d3932b10f14";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc] LIB[btConvexConvexAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc] LIB[btConvexConvexAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexConvexAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexConvexAlgorithm_CreateFunc] LIB[btConvexConvexAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexConvexAlgorithm_CreateFunc.=(
    btConvexConvexAlgorithm_CreateFunc that
    ) = "Bullet2__btConvexConvexAlgorithm_CreateFunc__MU__simple_ass_op__ac97b954b51fd53305a7057353c8e4f6";


/// \dfgPresetOmit
/// \internal
btConvexConvexAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btConvexConvexAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConvexPlaneCollisionAlgorithm() = "Bullet2__btConvexPlaneCollisionAlgorithm__MU__empty_ctor__9e1365d9aa3dafa05814660dabef175d";

/// \dfgPresetOmit
btConvexPlaneCollisionAlgorithm(
    btConvexPlaneCollisionAlgorithm that
    ) = "Bullet2__btConvexPlaneCollisionAlgorithm__MU__copy_ctor__15fe8996f0a51a87630d70e9220cc93c";

btConvexPlaneCollisionAlgorithm.cxx_delete() = "Bullet2__btConvexPlaneCollisionAlgorithm__MU__delete__1efa8738119ff2fc6a8017813a34d938";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btConvexPlaneCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btConvexPlaneCollisionAlgorithm__MU__meth_calculateTimeOfImpact__01f6a6b94c367a6b0b3640b91807adc7";

Float32
btConvexPlaneCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm] LIB[btConvexPlaneCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexPlaneCollisionAlgorithm.=(
    btConvexPlaneCollisionAlgorithm that
    ) = "Bullet2__btConvexPlaneCollisionAlgorithm__MU__simple_ass_op__4ead00b98bf8716785311e9cda74b81d";


/// \dfgPresetOmit
/// \internal
btConvexPlaneCollisionAlgorithm.appendDesc(io String string) {
  string += "btConvexPlaneCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConvexPlaneCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc] LIB[btConvexPlaneCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc] LIB[btConvexPlaneCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc] LIB[btConvexPlaneCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btConvexPlaneCollisionAlgorithm_CreateFunc(
    btConvexPlaneCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btConvexPlaneCollisionAlgorithm_CreateFunc__MU__copy_ctor__36b9c03d49e0df93009b18b014889c59";

/// \dfgPresetOmit
/// \internal
btConvexPlaneCollisionAlgorithm_CreateFunc.__ctor(
    ) = "Bullet2__btConvexPlaneCollisionAlgorithm_CreateFunc__MU__ctor__c79affd6ddeadc0b2e2d0ce8c2502c26";

/// \dfgPresetOmit
btConvexPlaneCollisionAlgorithm_CreateFunc(
    ) {
    this.__ctor(
        );
}

btConvexPlaneCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btConvexPlaneCollisionAlgorithm_CreateFunc__MU__delete__8d1339b3581fb4e43639245f345c01ca";

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc] LIB[btConvexPlaneCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc] LIB[btConvexPlaneCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConvexPlaneCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btConvexPlaneCollisionAlgorithm_CreateFunc] LIB[btConvexPlaneCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConvexPlaneCollisionAlgorithm_CreateFunc.=(
    btConvexPlaneCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btConvexPlaneCollisionAlgorithm_CreateFunc__MU__simple_ass_op__5807cc6c3547eb3b63af57c288604172";


/// \dfgPresetOmit
/// \internal
btConvexPlaneCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btConvexPlaneCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultCollisionConstructionInfo] EDK[Fabric_EDK_KL_btDefaultCollisionConstructionInfo] LIB[btDefaultCollisionConstructionInfo *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConstructionInfo] EDK[Fabric_EDK_KL_btDefaultCollisionConstructionInfo] LIB[btDefaultCollisionConstructionInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConstructionInfo] EDK[Fabric_EDK_KL_btDefaultCollisionConstructionInfo] LIB[btDefaultCollisionConstructionInfo *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btDefaultCollisionConstructionInfo(
    btDefaultCollisionConstructionInfo that
    ) = "Bullet2__btDefaultCollisionConstructionInfo__MU__copy_ctor__0b6184ecf867e13e4b51baaadb2a3d4c";

/// \dfgPresetOmit
/// \internal
btDefaultCollisionConstructionInfo.__ctor(
    ) = "Bullet2__btDefaultCollisionConstructionInfo__MU__ctor__c8071ecb1a476ffc1be5326eaf931dd6";

/// \dfgPresetOmit
btDefaultCollisionConstructionInfo(
    ) {
    this.__ctor(
        );
}

btDefaultCollisionConstructionInfo.cxx_delete() = "Bullet2__btDefaultCollisionConstructionInfo__MU__delete__e57aa24dc01e3d6b056335eb134808aa";

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConstructionInfo] EDK[Fabric_EDK_KL_btDefaultCollisionConstructionInfo] LIB[btDefaultCollisionConstructionInfo *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConstructionInfo] EDK[Fabric_EDK_KL_btDefaultCollisionConstructionInfo] LIB[btDefaultCollisionConstructionInfo *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConstructionInfo] EDK[Fabric_EDK_KL_btDefaultCollisionConstructionInfo] LIB[btDefaultCollisionConstructionInfo *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDefaultCollisionConstructionInfo.=(
    btDefaultCollisionConstructionInfo that
    ) = "Bullet2__btDefaultCollisionConstructionInfo__MU__simple_ass_op__59bf99d3bb7e4b038567ce75e1732806";


/// \dfgPresetOmit
/// \internal
btDefaultCollisionConstructionInfo.appendDesc(io String string) {
  string += "btDefaultCollisionConstructionInfo:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDefaultCollisionConfiguration() = "Bullet2__btDefaultCollisionConfiguration__MU__empty_ctor__0c3ef70b4e5222c7ed339c29ad463b1a";

/// \dfgPresetOmit
btDefaultCollisionConfiguration(
    btDefaultCollisionConfiguration that
    ) = "Bullet2__btDefaultCollisionConfiguration__MU__copy_ctor__d79c2d80ec52948ff59927c6f604e203";

/// \dfgPresetOmit
/// \internal
btDefaultCollisionConfiguration.__ctor(
    ) = "Bullet2__btDefaultCollisionConfiguration__MU__ctor__6aa66f5164624eea74f3646506677b39";

/// \dfgPresetOmit
btDefaultCollisionConfiguration(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btDefaultCollisionConfiguration.__ctor(
    btDefaultCollisionConstructionInfo constructionInfo
    ) = "Bullet2__btDefaultCollisionConfiguration__MU__ctor__dbefd74715d0d6f6341ac738ccf4cc00";

/// \dfgPresetOmit
btDefaultCollisionConfiguration(
    btDefaultCollisionConstructionInfo constructionInfo
    ) {
    this.__ctor(
        constructionInfo
        );
}

btDefaultCollisionConfiguration.cxx_delete() = "Bullet2__btDefaultCollisionConfiguration__MU__delete__565773ea021a2d65c2838527b4ead0a8";

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmCreateFunc
btDefaultCollisionConfiguration.cxx_getCollisionAlgorithmCreateFunc!(
    SInt32 proxyType0,
    SInt32 proxyType1
    )
 = "Bullet2__btDefaultCollisionConfiguration__MU__meth_getCollisionAlgorithmCreateFunc__c68272f8b25ebf6fe2d4ffad8a7fc02c";

/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmCreateFunc
btDefaultCollisionConfiguration.cxx_getClosestPointsAlgorithmCreateFunc!(
    SInt32 proxyType0,
    SInt32 proxyType1
    )
 = "Bullet2__btDefaultCollisionConfiguration__MU__meth_getClosestPointsAlgorithmCreateFunc__23356df9042261129442979cf41b0e74";

///Use this method to allow to generate multiple contact points between at once, between two objects using the generic convex-convex algorithm.
///By default, this feature is disabled for best performance.
///@param numPerturbationIterations controls the number of collision queries. Set it to zero to disable the feature.
///@param minimumPointsPerturbationThreshold is the minimum number of points in the contact cache, above which the feature is disabled
///3 is a good value for both params, if you want to enable the feature. This is because the default contact cache contains a maximum of 4 points, and one collision query at the unperturbed orientation is performed first.
///See Bullet/Demos/CollisionDemo for an example how this feature gathers multiple points.
///@todo we could add a per-object setting of those parameters, for level-of-detail collision detection.
/// \dfgPresetOmit
/// \internal

btDefaultCollisionConfiguration.cxx_setConvexConvexMultipointIterations!(
    )
 = "Bullet2__btDefaultCollisionConfiguration__MU__meth_setConvexConvexMultipointIterations__81fa5f7c03b6eab80438883e6117794a";

/// \dfgPresetOmit
/// \internal

btDefaultCollisionConfiguration.cxx_setConvexConvexMultipointIterations!(
    SInt32 numPerturbationIterations
    )
 = "Bullet2__btDefaultCollisionConfiguration__MU__meth_setConvexConvexMultipointIterations__803b3870a3b8f24080af6541174c554e";

/// \dfgPresetOmit
/// \internal

btDefaultCollisionConfiguration.cxx_setConvexConvexMultipointIterations!(
    SInt32 numPerturbationIterations,
    SInt32 minimumPointsPerturbationThreshold
    )
 = "Bullet2__btDefaultCollisionConfiguration__MU__meth_setConvexConvexMultipointIterations__505903fdcb389b4a8f54999c6d11f009";

/// \dfgPresetOmit
/// \internal

btDefaultCollisionConfiguration.cxx_setPlaneConvexMultipointIterations!(
    )
 = "Bullet2__btDefaultCollisionConfiguration__MU__meth_setPlaneConvexMultipointIterations__196cb788c7c5656b316e0c2eaaf81ddf";

/// \dfgPresetOmit
/// \internal

btDefaultCollisionConfiguration.cxx_setPlaneConvexMultipointIterations!(
    SInt32 numPerturbationIterations
    )
 = "Bullet2__btDefaultCollisionConfiguration__MU__meth_setPlaneConvexMultipointIterations__70fc1cec28864661a9aaa9de68f552e0";

/// \dfgPresetOmit
/// \internal

btDefaultCollisionConfiguration.cxx_setPlaneConvexMultipointIterations!(
    SInt32 numPerturbationIterations,
    SInt32 minimumPointsPerturbationThreshold
    )
 = "Bullet2__btDefaultCollisionConfiguration__MU__meth_setPlaneConvexMultipointIterations__c33bae7f2a1de869a9731afeb9fe02a2";


btDefaultCollisionConfiguration.setConvexConvexMultipointIterations!(
    in
    SInt32
    numPerturbationIterations
    
    ,
    in
    SInt32
    minimumPointsPerturbationThreshold
    
    
    )
{   
    
    
    
    this.cxx_setConvexConvexMultipointIterations(
        numPerturbationIterations,
        minimumPointsPerturbationThreshold
        );
    
    
    
    
}


btDefaultCollisionConfiguration.setPlaneConvexMultipointIterations!(
    )
{   
    
    this.cxx_setPlaneConvexMultipointIterations(
        );
    
    
}

btCollisionAlgorithmCreateFunc
btDefaultCollisionConfiguration.getCollisionAlgorithmCreateFunc!(
    in
    SInt32
    proxyType0
    
    ,
    in
    SInt32
    proxyType1
    
    
    )
{   
    
    
    btCollisionAlgorithmCreateFunc __res = 
    this.cxx_getCollisionAlgorithmCreateFunc(
        proxyType0,
        proxyType1
        );
    
    
    
    return __res;
}


btDefaultCollisionConfiguration.setConvexConvexMultipointIterations!(
    in
    SInt32
    numPerturbationIterations
    
    
    )
{   
    
    
    this.cxx_setConvexConvexMultipointIterations(
        numPerturbationIterations
        );
    
    
    
}


btDefaultCollisionConfiguration.setPlaneConvexMultipointIterations!(
    in
    SInt32
    numPerturbationIterations
    
    ,
    in
    SInt32
    minimumPointsPerturbationThreshold
    
    
    )
{   
    
    
    
    this.cxx_setPlaneConvexMultipointIterations(
        numPerturbationIterations,
        minimumPointsPerturbationThreshold
        );
    
    
    
    
}

///Use this method to allow to generate multiple contact points between at once, between two objects using the generic convex-convex algorithm.
///By default, this feature is disabled for best performance.
///@param numPerturbationIterations controls the number of collision queries. Set it to zero to disable the feature.
///@param minimumPointsPerturbationThreshold is the minimum number of points in the contact cache, above which the feature is disabled
///3 is a good value for both params, if you want to enable the feature. This is because the default contact cache contains a maximum of 4 points, and one collision query at the unperturbed orientation is performed first.
///See Bullet/Demos/CollisionDemo for an example how this feature gathers multiple points.
///@todo we could add a per-object setting of those parameters, for level-of-detail collision detection.

btDefaultCollisionConfiguration.setConvexConvexMultipointIterations!(
    )
{   
    
    this.cxx_setConvexConvexMultipointIterations(
        );
    
    
}


btDefaultCollisionConfiguration.setPlaneConvexMultipointIterations!(
    in
    SInt32
    numPerturbationIterations
    
    
    )
{   
    
    
    this.cxx_setPlaneConvexMultipointIterations(
        numPerturbationIterations
        );
    
    
    
}

btCollisionAlgorithmCreateFunc
btDefaultCollisionConfiguration.getClosestPointsAlgorithmCreateFunc!(
    in
    SInt32
    proxyType0
    
    ,
    in
    SInt32
    proxyType1
    
    
    )
{   
    
    
    btCollisionAlgorithmCreateFunc __res = 
    this.cxx_getClosestPointsAlgorithmCreateFunc(
        proxyType0,
        proxyType1
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultCollisionConfiguration] EDK[Fabric_EDK_KL_btDefaultCollisionConfiguration] LIB[btDefaultCollisionConfiguration *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDefaultCollisionConfiguration.=(
    btDefaultCollisionConfiguration that
    ) = "Bullet2__btDefaultCollisionConfiguration__MU__simple_ass_op__9104cef3b49a892c0d1226d79dadb13f";


/// \dfgPresetOmit
/// \internal
btDefaultCollisionConfiguration.appendDesc(io String string) {
  string += "btDefaultCollisionConfiguration:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btEmptyAlgorithm() = "Bullet2__btEmptyAlgorithm__MU__empty_ctor__2b78013af346a17246a17090cc5ffc6b";

/// \dfgPresetOmit
btEmptyAlgorithm(
    btEmptyAlgorithm that
    ) = "Bullet2__btEmptyAlgorithm__MU__copy_ctor__86fccd9125610da1be32072b19b2197b";

/// \dfgPresetOmit
/// \internal
btEmptyAlgorithm.__ctor(
    btCollisionAlgorithmConstructionInfo ci
    ) = "Bullet2__btEmptyAlgorithm__MU__ctor__956c5a7290b908087ff2d0202ff8b9af";

/// \dfgPresetOmit
btEmptyAlgorithm(
    btCollisionAlgorithmConstructionInfo ci
    ) {
    this.__ctor(
        ci
        );
}

btEmptyAlgorithm.cxx_delete() = "Bullet2__btEmptyAlgorithm__MU__delete__e786bd9c9eefd699a4cde2b31c2bccbd";

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btEmptyAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btEmptyAlgorithm__MU__meth_calculateTimeOfImpact__85e2b38aa880811d13d08be93ca07371";

Float32
btEmptyAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm] EDK[Fabric_EDK_KL_btEmptyAlgorithm] LIB[btEmptyAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btEmptyAlgorithm.=(
    btEmptyAlgorithm that
    ) = "Bullet2__btEmptyAlgorithm__MU__simple_ass_op__fe1e44c9311791dcc92f5beddfba78ae";


/// \dfgPresetOmit
/// \internal
btEmptyAlgorithm.appendDesc(io String string) {
  string += "btEmptyAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btEmptyAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc] LIB[btEmptyAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc] LIB[btEmptyAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc] LIB[btEmptyAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btEmptyAlgorithm_CreateFunc() = "Bullet2__btEmptyAlgorithm_CreateFunc__MU__empty_ctor__e6042496b6a68bd0f77124c51bdad610";

/// \dfgPresetOmit
btEmptyAlgorithm_CreateFunc(
    btEmptyAlgorithm_CreateFunc that
    ) = "Bullet2__btEmptyAlgorithm_CreateFunc__MU__copy_ctor__4fc0665c2a62bf4001ab5b482d2d674d";

btEmptyAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btEmptyAlgorithm_CreateFunc__MU__delete__7a94a914744e52d060013cd650cf6ca6";

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc] LIB[btEmptyAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc] LIB[btEmptyAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btEmptyAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btEmptyAlgorithm_CreateFunc] LIB[btEmptyAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btEmptyAlgorithm_CreateFunc.=(
    btEmptyAlgorithm_CreateFunc that
    ) = "Bullet2__btEmptyAlgorithm_CreateFunc__MU__simple_ass_op__3b1b241c980f1a3ba9af3e45dd2ffb45";


/// \dfgPresetOmit
/// \internal
btEmptyAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btEmptyAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btGhostObject(
    btGhostObject that
    ) = "Bullet2__btGhostObject__MU__copy_ctor__925dacb8b27025e14fb4e3f8269d3459";

/// \dfgPresetOmit
/// \internal
btGhostObject.__ctor(
    ) = "Bullet2__btGhostObject__MU__ctor__51dd8f040f1752b7a3a63264ad31f752";

/// \dfgPresetOmit
btGhostObject(
    ) {
    this.__ctor(
        );
}

btGhostObject.cxx_delete() = "Bullet2__btGhostObject__MU__delete__b7a784bfda63bba05c8d902547be64c8";

//////////////////////////////////////////////////////////////////////////////
// KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btGhostObject.cxx_convexSweepTest?(
    btConvexShape castShape,
    CxxbtTransformConstRef convexFromWorld,
    CxxbtTransformConstRef convexToWorld,
    btCollisionWorld_ConvexResultCallback resultCallback
    )
 = "Bullet2__btGhostObject__CO__meth_convexSweepTest__e1c75e455efc4eae3ea42c62dd8cee75";

/// \dfgPresetOmit
/// \internal

btGhostObject.cxx_convexSweepTest?(
    btConvexShape castShape,
    CxxbtTransformConstRef convexFromWorld,
    CxxbtTransformConstRef convexToWorld,
    btCollisionWorld_ConvexResultCallback resultCallback,
    Float32 allowedCcdPenetration
    )
 = "Bullet2__btGhostObject__CO__meth_convexSweepTest__e4a4daa6eaea8b6dcf6f6016ed630936";

/// \dfgPresetOmit
/// \internal

btGhostObject.cxx_rayTest?(
    CxxbtVector3ConstRef rayFromWorld,
    CxxbtVector3ConstRef rayToWorld,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btGhostObject__CO__meth_rayTest__82e26e677a5301a1cda30ecc1b8d2be8";

///this method is mainly for expert/internal use only.
/// \dfgPresetOmit
/// \internal

btGhostObject.cxx_addOverlappingObjectInternal!(
    btBroadphaseProxy otherProxy
    )
 = "Bullet2__btGhostObject__MU__meth_addOverlappingObjectInternal__79ae6cf467aef7379844ce979611b2d1";

/// \dfgPresetOmit
/// \internal

btGhostObject.cxx_addOverlappingObjectInternal!(
    btBroadphaseProxy otherProxy,
    btBroadphaseProxy thisProxy
    )
 = "Bullet2__btGhostObject__MU__meth_addOverlappingObjectInternal__54f7a631d05ee8f09b9972337d0720b8";

///this method is mainly for expert/internal use only.
/// \dfgPresetOmit
/// \internal

btGhostObject.cxx_removeOverlappingObjectInternal!(
    btBroadphaseProxy otherProxy,
    btDispatcher dispatcher
    )
 = "Bullet2__btGhostObject__MU__meth_removeOverlappingObjectInternal__32ed8e6517073aa6910da4976e9c8266";

/// \dfgPresetOmit
/// \internal

btGhostObject.cxx_removeOverlappingObjectInternal!(
    btBroadphaseProxy otherProxy,
    btDispatcher dispatcher,
    btBroadphaseProxy thisProxy
    )
 = "Bullet2__btGhostObject__MU__meth_removeOverlappingObjectInternal__127d528f45f7d21d4cbd1e472cb7fbf3";

/// \dfgPresetOmit
/// \internal
SInt32
btGhostObject.cxx_getNumOverlappingObjects?(
    )
 = "Bullet2__btGhostObject__CO__meth_getNumOverlappingObjects__db184239cca7887d7b4eb00cf64d1a87";

/// \dfgPresetOmit
/// \internal
btCollisionObject
btGhostObject.cxx_getOverlappingObject!(
    SInt32 index
    )
 = "Bullet2__btGhostObject__MU__meth_getOverlappingObject__6faed4a36794a96f331871b7efa74e6a";

/// \dfgPresetOmit
/// \internal
btCollisionObject
btGhostObject.cxx_getOverlappingObject?(
    SInt32 index
    )
 = "Bullet2__btGhostObject__CO__meth_getOverlappingObject__b16f59c65482e813050f70bc3b654ef5";

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_btCollisionObjectRef
btGhostObject.cxx_getOverlappingPairs!(
    )
 = "Bullet2__btGhostObject__MU__meth_getOverlappingPairs__08fdb8acc5de798ee7b129b1d0b3977b";

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_btCollisionObject
btGhostObject.cxx_getOverlappingPairs?(
    )
 = "Bullet2__btGhostObject__CO__meth_getOverlappingPairs__05b341e4c8d461bdc08aa27d1b1a4355";

/// \dfgPresetOmit
/// \internal
btGhostObject
btGhostObject_Cxxupcast(
    btCollisionObject colObj
    )
 = "Bullet2__btGhostObject__ST__meth_upcast__88a161d4f99811b7556f4a082e78016e";

///this method is mainly for expert/internal use only.

btGhostObject.addOverlappingObjectInternal!(
    in
    btBroadphaseProxy
    otherProxy
    
    
    )
{   
    
    
    this.cxx_addOverlappingObjectInternal(
        otherProxy
        );
    
    
    
}

btCollisionObject
btGhostObject.getOverlappingObject!(
    in
    SInt32
    index
    
    
    )
{   
    
    btCollisionObject __res = 
    this.cxx_getOverlappingObject(
        index
        );
    
    
    return __res;
}


btGhostObject.convexSweepTest?(
    in
    btConvexShape
    castShape
    
    ,
    in
    btTransform
    convexFromWorld
    
    ,
    in
    btTransform
    convexToWorld
    
    ,
    in
    btCollisionWorld_ConvexResultCallback
    resultCallback
    
    
    )
{   
    
    
    CxxbtTransformConstRef convexFromWorld__cxx = Make_CxxbtTransformConstRef(convexFromWorld);
    
    CxxbtTransformConstRef convexToWorld__cxx = Make_CxxbtTransformConstRef(convexToWorld);
    
    
    this.cxx_convexSweepTest(
        castShape,
        convexFromWorld__cxx,
        convexToWorld__cxx,
        resultCallback
        );
    
    
    
    
    
    
}

btGhostObject
btGhostObject_upcast(
    in
    btCollisionObject
    colObj
    
    
    )
{   
    
    btGhostObject __res = 
    btGhostObject_Cxxupcast(
        colObj
        );
    
    
    return __res;
}


btGhostObject.removeOverlappingObjectInternal!(
    in
    btBroadphaseProxy
    otherProxy
    
    ,
    in
    btDispatcher
    dispatcher
    
    ,
    in
    btBroadphaseProxy
    thisProxy
    
    
    )
{   
    
    
    
    
    this.cxx_removeOverlappingObjectInternal(
        otherProxy,
        dispatcher,
        thisProxy
        );
    
    
    
    
    
}


btGhostObject.rayTest?(
    in
    btVector3
    rayFromWorld
    
    ,
    in
    btVector3
    rayToWorld
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFromWorld__cxx = Make_CxxbtVector3ConstRef(rayFromWorld);
    
    CxxbtVector3ConstRef rayToWorld__cxx = Make_CxxbtVector3ConstRef(rayToWorld);
    
    
    this.cxx_rayTest(
        rayFromWorld__cxx,
        rayToWorld__cxx,
        resultCallback
        );
    
    
    
    
    
}


btGhostObject.addOverlappingObjectInternal!(
    in
    btBroadphaseProxy
    otherProxy
    
    ,
    in
    btBroadphaseProxy
    thisProxy
    
    
    )
{   
    
    
    
    this.cxx_addOverlappingObjectInternal(
        otherProxy,
        thisProxy
        );
    
    
    
    
}

btAlignedObjectArray_btCollisionObject
btGhostObject.getOverlappingPairs!(
    )
{   
    CxxbtAlignedObjectArray_btCollisionObjectRef __res_cxx = 
    this.cxx_getOverlappingPairs(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtAlignedObjectArray_btCollisionObjectRef';
    btAlignedObjectArray_btCollisionObject __res = __res_cxx.cxx_get();
    return __res;
}


btGhostObject.convexSweepTest?(
    in
    btConvexShape
    castShape
    
    ,
    in
    btTransform
    convexFromWorld
    
    ,
    in
    btTransform
    convexToWorld
    
    ,
    in
    btCollisionWorld_ConvexResultCallback
    resultCallback
    
    ,
    in
    Float32
    allowedCcdPenetration
    
    
    )
{   
    
    
    CxxbtTransformConstRef convexFromWorld__cxx = Make_CxxbtTransformConstRef(convexFromWorld);
    
    CxxbtTransformConstRef convexToWorld__cxx = Make_CxxbtTransformConstRef(convexToWorld);
    
    
    
    this.cxx_convexSweepTest(
        castShape,
        convexFromWorld__cxx,
        convexToWorld__cxx,
        resultCallback,
        allowedCcdPenetration
        );
    
    
    
    
    
    
    
}

SInt32
btGhostObject.getNumOverlappingObjects?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumOverlappingObjects(
        );
    
    return __res;
}

///this method is mainly for expert/internal use only.

btGhostObject.removeOverlappingObjectInternal!(
    in
    btBroadphaseProxy
    otherProxy
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    
    this.cxx_removeOverlappingObjectInternal(
        otherProxy,
        dispatcher
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGhostObject] EDK[Fabric_EDK_KL_btGhostObject] LIB[btGhostObject *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGhostObject.=(
    btGhostObject that
    ) = "Bullet2__btGhostObject__MU__simple_ass_op__6a62bb93a228022b52ddcfdf8c6ea2a6";


/// \dfgPresetOmit
/// \internal
btGhostObject.appendDesc(io String string) {
  string += "btGhostObject:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btPairCachingGhostObject(
    btPairCachingGhostObject that
    ) = "Bullet2__btPairCachingGhostObject__MU__copy_ctor__dce0314445cb1638e0994db118512e4d";

/// \dfgPresetOmit
/// \internal
btPairCachingGhostObject.__ctor(
    ) = "Bullet2__btPairCachingGhostObject__MU__ctor__b34068b0a1fc7a149b7d1d7b2fe010b3";

/// \dfgPresetOmit
btPairCachingGhostObject(
    ) {
    this.__ctor(
        );
}

btPairCachingGhostObject.cxx_delete() = "Bullet2__btPairCachingGhostObject__MU__delete__ab0ab198d60e69a09fcc9491c73a6214";

//////////////////////////////////////////////////////////////////////////////
// KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///this method is mainly for expert/internal use only.
/// \dfgPresetOmit
/// \internal

btPairCachingGhostObject.cxx_addOverlappingObjectInternal!(
    btBroadphaseProxy otherProxy
    )
 = "Bullet2__btPairCachingGhostObject__MU__meth_addOverlappingObjectInternal__fb30180c00fffe26f34ad88eae719717";

/// \dfgPresetOmit
/// \internal

btPairCachingGhostObject.cxx_addOverlappingObjectInternal!(
    btBroadphaseProxy otherProxy,
    btBroadphaseProxy thisProxy
    )
 = "Bullet2__btPairCachingGhostObject__MU__meth_addOverlappingObjectInternal__190882fe0e40dc93752d57c0c9f5a4ff";

/// \dfgPresetOmit
/// \internal

btPairCachingGhostObject.cxx_removeOverlappingObjectInternal!(
    btBroadphaseProxy otherProxy,
    btDispatcher dispatcher
    )
 = "Bullet2__btPairCachingGhostObject__MU__meth_removeOverlappingObjectInternal__2626181ea2158509da7673ce39261a5f";

/// \dfgPresetOmit
/// \internal

btPairCachingGhostObject.cxx_removeOverlappingObjectInternal!(
    btBroadphaseProxy otherProxy,
    btDispatcher dispatcher,
    btBroadphaseProxy thisProxy
    )
 = "Bullet2__btPairCachingGhostObject__MU__meth_removeOverlappingObjectInternal__9ad12c65e45c646e00b29555d4cab78e";


btPairCachingGhostObject.removeOverlappingObjectInternal!(
    in
    btBroadphaseProxy
    otherProxy
    
    ,
    in
    btDispatcher
    dispatcher
    
    ,
    in
    btBroadphaseProxy
    thisProxy
    
    
    )
{   
    
    
    
    
    this.cxx_removeOverlappingObjectInternal(
        otherProxy,
        dispatcher,
        thisProxy
        );
    
    
    
    
    
}


btPairCachingGhostObject.addOverlappingObjectInternal!(
    in
    btBroadphaseProxy
    otherProxy
    
    ,
    in
    btBroadphaseProxy
    thisProxy
    
    
    )
{   
    
    
    
    this.cxx_addOverlappingObjectInternal(
        otherProxy,
        thisProxy
        );
    
    
    
    
}

///this method is mainly for expert/internal use only.

btPairCachingGhostObject.addOverlappingObjectInternal!(
    in
    btBroadphaseProxy
    otherProxy
    
    
    )
{   
    
    
    this.cxx_addOverlappingObjectInternal(
        otherProxy
        );
    
    
    
}


btPairCachingGhostObject.removeOverlappingObjectInternal!(
    in
    btBroadphaseProxy
    otherProxy
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    
    this.cxx_removeOverlappingObjectInternal(
        otherProxy,
        dispatcher
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPairCachingGhostObject] EDK[Fabric_EDK_KL_btPairCachingGhostObject] LIB[btPairCachingGhostObject *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPairCachingGhostObject.=(
    btPairCachingGhostObject that
    ) = "Bullet2__btPairCachingGhostObject__MU__simple_ass_op__eee0e00251f3192001f4fe7e8cff253c";


/// \dfgPresetOmit
/// \internal
btPairCachingGhostObject.appendDesc(io String string) {
  string += "btPairCachingGhostObject:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimplePair] EDK[Fabric_EDK_KL_btSimplePair] LIB[btSimplePair *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimplePair] EDK[Fabric_EDK_KL_btSimplePair] LIB[btSimplePair *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimplePair] EDK[Fabric_EDK_KL_btSimplePair] LIB[btSimplePair *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSimplePair() = "Bullet2__btSimplePair__MU__empty_ctor__778dda7b996b136e8823ab92b58511aa";

/// \dfgPresetOmit
btSimplePair(
    btSimplePair that
    ) = "Bullet2__btSimplePair__MU__copy_ctor__8a3a89547f0bdc1a25258245ad606a62";

/// \dfgPresetOmit
/// \internal
btSimplePair.__ctor(
    SInt32 indexA,
    SInt32 indexB
    ) = "Bullet2__btSimplePair__MU__ctor__fb5474deacb6584607c1e1de96d398e9";

/// \dfgPresetOmit
btSimplePair(
    SInt32 indexA,
    SInt32 indexB
    ) {
    this.__ctor(
        indexA,
        indexB
        );
}

btSimplePair.cxx_delete() = "Bullet2__btSimplePair__MU__delete__4342e8b8c6e95f0a7bba4915c2d3b3c3";

//////////////////////////////////////////////////////////////////////////////
// KL[btSimplePair] EDK[Fabric_EDK_KL_btSimplePair] LIB[btSimplePair *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimplePair] EDK[Fabric_EDK_KL_btSimplePair] LIB[btSimplePair *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimplePair] EDK[Fabric_EDK_KL_btSimplePair] LIB[btSimplePair *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSimplePair.=(
    btSimplePair that
    ) = "Bullet2__btSimplePair__MU__simple_ass_op__2981e573a8b3f6e30b3ae5244a9a3f11";


/// \dfgPresetOmit
/// \internal
btSimplePair.appendDesc(io String string) {
  string += "btSimplePair:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btHashedSimplePairCache(
    btHashedSimplePairCache that
    ) = "Bullet2__btHashedSimplePairCache__MU__copy_ctor__784f53863d9812342eed3539e0e23e8f";

/// \dfgPresetOmit
/// \internal
btHashedSimplePairCache.__ctor(
    ) = "Bullet2__btHashedSimplePairCache__MU__ctor__20ebf8f0baead50c56916178c27ad546";

/// \dfgPresetOmit
btHashedSimplePairCache(
    ) {
    this.__ctor(
        );
}

btHashedSimplePairCache.cxx_delete() = "Bullet2__btHashedSimplePairCache__MU__delete__aac1a4fe024add3a447772eb81f16f39";

//////////////////////////////////////////////////////////////////////////////
// KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btHashedSimplePairCache.cxx_removeAllPairs!(
    )
 = "Bullet2__btHashedSimplePairCache__MU__meth_removeAllPairs__b8ef13f7e289921ef5aea897f5559f63";

/// \dfgPresetOmit
/// \internal
Data
btHashedSimplePairCache.cxx_removeOverlappingPair!(
    SInt32 indexA,
    SInt32 indexB
    )
 = "Bullet2__btHashedSimplePairCache__MU__meth_removeOverlappingPair__97f5d0df9ad71b31bf464facd2922465";

/// \dfgPresetOmit
/// \internal
btSimplePair
btHashedSimplePairCache.cxx_addOverlappingPair!(
    SInt32 indexA,
    SInt32 indexB
    )
 = "Bullet2__btHashedSimplePairCache__MU__meth_addOverlappingPair__7dce017dc3e7e6a1b103bfead19a9038";

/// \dfgPresetOmit
/// \internal
btSimplePair
btHashedSimplePairCache.cxx_getOverlappingPairArrayPtr!(
    )
 = "Bullet2__btHashedSimplePairCache__MU__meth_getOverlappingPairArrayPtr__2774532f397243d6e7bad2059608f21e";

/// \dfgPresetOmit
/// \internal
btSimplePair
btHashedSimplePairCache.cxx_getOverlappingPairArrayPtr?(
    )
 = "Bullet2__btHashedSimplePairCache__CO__meth_getOverlappingPairArrayPtr__d71d61889bebf869162cadc458ff1cb5";

/// \dfgPresetOmit
/// \internal
btSimplePair
btHashedSimplePairCache.cxx_findPair!(
    SInt32 indexA,
    SInt32 indexB
    )
 = "Bullet2__btHashedSimplePairCache__MU__meth_findPair__cf16a2dae95bd6b184ae987f217bd791";

/// \dfgPresetOmit
/// \internal
SInt32
btHashedSimplePairCache.cxx_GetCount?(
    )
 = "Bullet2__btHashedSimplePairCache__CO__meth_GetCount__d6e98d2e45a15848dedd6a44f19f73cc";

/// \dfgPresetOmit
/// \internal
SInt32
btHashedSimplePairCache.cxx_getNumOverlappingPairs?(
    )
 = "Bullet2__btHashedSimplePairCache__CO__meth_getNumOverlappingPairs__1bf16b9fa5db81eda73d9bc93fa0e23f";

SInt32
btHashedSimplePairCache.getNumOverlappingPairs?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumOverlappingPairs(
        );
    
    return __res;
}

SInt32
btHashedSimplePairCache.GetCount?(
    )
{   
    SInt32 __res = 
    this.cxx_GetCount(
        );
    
    return __res;
}

Data
btHashedSimplePairCache.removeOverlappingPair!(
    in
    SInt32
    indexA
    
    ,
    in
    SInt32
    indexB
    
    
    )
{   
    
    
    Data __res = 
    this.cxx_removeOverlappingPair(
        indexA,
        indexB
        );
    
    
    
    return __res;
}

btSimplePair
btHashedSimplePairCache.findPair!(
    in
    SInt32
    indexA
    
    ,
    in
    SInt32
    indexB
    
    
    )
{   
    
    
    btSimplePair __res = 
    this.cxx_findPair(
        indexA,
        indexB
        );
    
    
    
    return __res;
}

btSimplePair
btHashedSimplePairCache.getOverlappingPairArrayPtr!(
    )
{   
    btSimplePair __res = 
    this.cxx_getOverlappingPairArrayPtr(
        );
    
    return __res;
}

btSimplePair
btHashedSimplePairCache.addOverlappingPair!(
    in
    SInt32
    indexA
    
    ,
    in
    SInt32
    indexB
    
    
    )
{   
    
    
    btSimplePair __res = 
    this.cxx_addOverlappingPair(
        indexA,
        indexB
        );
    
    
    
    return __res;
}


btHashedSimplePairCache.removeAllPairs!(
    )
{   
    
    this.cxx_removeAllPairs(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHashedSimplePairCache] EDK[Fabric_EDK_KL_btHashedSimplePairCache] LIB[btHashedSimplePairCache *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btHashedSimplePairCache.=(
    btHashedSimplePairCache that
    ) = "Bullet2__btHashedSimplePairCache__MU__simple_ass_op__204f196d278fb32e743a5a2b4d28063f";


/// \dfgPresetOmit
/// \internal
btHashedSimplePairCache.appendDesc(io String string) {
  string += "btHashedSimplePairCache:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btManifoldResult(
    btManifoldResult that
    ) = "Bullet2__btManifoldResult__MU__copy_ctor__1c471b48d046c4ab6354ff0bc36259d9";

/// \dfgPresetOmit
/// \internal
btManifoldResult.__ctor(
    ) = "Bullet2__btManifoldResult__MU__ctor__efbc48aecbbeca553fade9f22725cadd";

/// \dfgPresetOmit
btManifoldResult(
    ) {
    this.__ctor(
        );
}

btManifoldResult.cxx_delete() = "Bullet2__btManifoldResult__MU__delete__8f16d349b682ae41c208c8000f5a75a4";

//////////////////////////////////////////////////////////////////////////////
// KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btManifoldResult.cxx_setShapeIdentifiersA!(
    SInt32 partId0,
    SInt32 index0
    )
 = "Bullet2__btManifoldResult__MU__meth_setShapeIdentifiersA__fb661d7687e68cae0707d9dc291f6878";

/// \dfgPresetOmit
/// \internal

btManifoldResult.cxx_setShapeIdentifiersB!(
    SInt32 partId1,
    SInt32 index1
    )
 = "Bullet2__btManifoldResult__MU__meth_setShapeIdentifiersB__d016fecce05d546e237dae79a034d6a3";

/// \dfgPresetOmit
/// \internal

btManifoldResult.cxx_addContactPoint!(
    CxxbtVector3ConstRef normalOnBInWorld,
    CxxbtVector3ConstRef pointInWorld,
    Float32 depth
    )
 = "Bullet2__btManifoldResult__MU__meth_addContactPoint__b5594c0396e6c78f81687b5ca972aad3";

/// \dfgPresetOmit
/// \internal

btManifoldResult.cxx_refreshContactPoints!(
    )
 = "Bullet2__btManifoldResult__MU__meth_refreshContactPoints__11eee7d84872a50f179d319f483f5825";

/// \dfgPresetOmit
/// \internal
btCollisionObject
btManifoldResult.cxx_getBody0Internal?(
    )
 = "Bullet2__btManifoldResult__CO__meth_getBody0Internal__e84b8a64682e9c7e8ec547a7daaded39";

/// \dfgPresetOmit
/// \internal
btCollisionObject
btManifoldResult.cxx_getBody1Internal?(
    )
 = "Bullet2__btManifoldResult__CO__meth_getBody1Internal__1b1cbb5a4305e23bccd6349b5c716628";

/// in the future we can let the user override the methods to combine restitution and friction
/// \dfgPresetOmit
/// \internal
Float32
btManifoldResult_CxxcalculateCombinedRestitution(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btManifoldResult__ST__meth_calculateCombinedRestitution__5a8572c987eb3d1fa4997a870bbb58c4";

/// \dfgPresetOmit
/// \internal
Float32
btManifoldResult_CxxcalculateCombinedFriction(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btManifoldResult__ST__meth_calculateCombinedFriction__1da7d24c8113aefa7c2be01c39cdd718";

/// \dfgPresetOmit
/// \internal
Float32
btManifoldResult_CxxcalculateCombinedRollingFriction(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btManifoldResult__ST__meth_calculateCombinedRollingFriction__e9fe77ebe627a2cbd604e7a7ec2fd373";

/// \dfgPresetOmit
/// \internal
Float32
btManifoldResult_CxxcalculateCombinedSpinningFriction(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btManifoldResult__ST__meth_calculateCombinedSpinningFriction__198912169409787b1802c6d24eb11b42";

/// \dfgPresetOmit
/// \internal
Float32
btManifoldResult_CxxcalculateCombinedContactDamping(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btManifoldResult__ST__meth_calculateCombinedContactDamping__8c3b3bcd4b753e02e049b62d6bc566aa";

/// \dfgPresetOmit
/// \internal
Float32
btManifoldResult_CxxcalculateCombinedContactStiffness(
    btCollisionObject body0,
    btCollisionObject body1
    )
 = "Bullet2__btManifoldResult__ST__meth_calculateCombinedContactStiffness__72cc328d6eb07096c4b754afefd21ad5";

Float32
btManifoldResult_calculateCombinedRollingFriction(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Float32 __res = 
    btManifoldResult_CxxcalculateCombinedRollingFriction(
        body0,
        body1
        );
    
    
    
    return __res;
}

Float32
btManifoldResult_calculateCombinedContactDamping(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Float32 __res = 
    btManifoldResult_CxxcalculateCombinedContactDamping(
        body0,
        body1
        );
    
    
    
    return __res;
}

Float32
btManifoldResult_calculateCombinedContactStiffness(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Float32 __res = 
    btManifoldResult_CxxcalculateCombinedContactStiffness(
        body0,
        body1
        );
    
    
    
    return __res;
}

btCollisionObject
btManifoldResult.getBody1Internal?(
    )
{   
    btCollisionObject __res = 
    this.cxx_getBody1Internal(
        );
    
    return __res;
}

Float32
btManifoldResult_calculateCombinedSpinningFriction(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Float32 __res = 
    btManifoldResult_CxxcalculateCombinedSpinningFriction(
        body0,
        body1
        );
    
    
    
    return __res;
}

btCollisionObject
btManifoldResult.getBody0Internal?(
    )
{   
    btCollisionObject __res = 
    this.cxx_getBody0Internal(
        );
    
    return __res;
}


btManifoldResult.setShapeIdentifiersA!(
    in
    SInt32
    partId0
    
    ,
    in
    SInt32
    index0
    
    
    )
{   
    
    
    
    this.cxx_setShapeIdentifiersA(
        partId0,
        index0
        );
    
    
    
    
}


btManifoldResult.setShapeIdentifiersB!(
    in
    SInt32
    partId1
    
    ,
    in
    SInt32
    index1
    
    
    )
{   
    
    
    
    this.cxx_setShapeIdentifiersB(
        partId1,
        index1
        );
    
    
    
    
}


btManifoldResult.addContactPoint!(
    in
    btVector3
    normalOnBInWorld
    
    ,
    in
    btVector3
    pointInWorld
    
    ,
    in
    Float32
    depth
    
    
    )
{   
    
    CxxbtVector3ConstRef normalOnBInWorld__cxx = Make_CxxbtVector3ConstRef(normalOnBInWorld);
    
    CxxbtVector3ConstRef pointInWorld__cxx = Make_CxxbtVector3ConstRef(pointInWorld);
    
    
    this.cxx_addContactPoint(
        normalOnBInWorld__cxx,
        pointInWorld__cxx,
        depth
        );
    
    
    
    
    
}

/// in the future we can let the user override the methods to combine restitution and friction
Float32
btManifoldResult_calculateCombinedRestitution(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Float32 __res = 
    btManifoldResult_CxxcalculateCombinedRestitution(
        body0,
        body1
        );
    
    
    
    return __res;
}

Float32
btManifoldResult_calculateCombinedFriction(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    
    )
{   
    
    
    Float32 __res = 
    btManifoldResult_CxxcalculateCombinedFriction(
        body0,
        body1
        );
    
    
    
    return __res;
}


btManifoldResult.refreshContactPoints!(
    )
{   
    
    this.cxx_refreshContactPoints(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btManifoldResult] EDK[Fabric_EDK_KL_btManifoldResult] LIB[btManifoldResult *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btManifoldResult.=(
    btManifoldResult that
    ) = "Bullet2__btManifoldResult__MU__simple_ass_op__6da3c92fd72033daecd48da7e49941d5";


/// \dfgPresetOmit
/// \internal
btManifoldResult.appendDesc(io String string) {
  string += "btManifoldResult:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSimulationIslandManager(
    btSimulationIslandManager that
    ) = "Bullet2__btSimulationIslandManager__MU__copy_ctor__66548f7c65089dc6fc63ce02160404b8";

/// \dfgPresetOmit
/// \internal
btSimulationIslandManager.__ctor(
    ) = "Bullet2__btSimulationIslandManager__MU__ctor__0053da0712647654bcf64127ae959373";

/// \dfgPresetOmit
btSimulationIslandManager(
    ) {
    this.__ctor(
        );
}

btSimulationIslandManager.cxx_delete() = "Bullet2__btSimulationIslandManager__MU__delete__9b3dc122e74a4831ebd27befce91f529";

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSimulationIslandManager.cxx_initUnionFind!(
    SInt32 n
    )
 = "Bullet2__btSimulationIslandManager__MU__meth_initUnionFind__4433589fae885eebe79dc44b417f7a3f";

/// \dfgPresetOmit
/// \internal

btSimulationIslandManager.cxx_updateActivationState!(
    btCollisionWorld colWorld,
    btDispatcher dispatcher
    )
 = "Bullet2__btSimulationIslandManager__MU__meth_updateActivationState__290152cdc60ede0d8b9a79333f0ab723";

/// \dfgPresetOmit
/// \internal

btSimulationIslandManager.cxx_storeIslandActivationState!(
    btCollisionWorld world
    )
 = "Bullet2__btSimulationIslandManager__MU__meth_storeIslandActivationState__772b2cb2c0200b15c315331a3de74161";

/// \dfgPresetOmit
/// \internal

btSimulationIslandManager.cxx_findUnions!(
    btDispatcher dispatcher,
    btCollisionWorld colWorld
    )
 = "Bullet2__btSimulationIslandManager__MU__meth_findUnions__6101c84bdf16f91cfc4ff7a61267c568";

/// \dfgPresetOmit
/// \internal

btSimulationIslandManager.cxx_buildAndProcessIslands!(
    btDispatcher dispatcher,
    btCollisionWorld collisionWorld,
    btSimulationIslandManager_IslandCallback callback
    )
 = "Bullet2__btSimulationIslandManager__MU__meth_buildAndProcessIslands__8395a1d5d5a2dd6da466415cbfa7fff7";

/// \dfgPresetOmit
/// \internal

btSimulationIslandManager.cxx_buildIslands!(
    btDispatcher dispatcher,
    btCollisionWorld colWorld
    )
 = "Bullet2__btSimulationIslandManager__MU__meth_buildIslands__9dcdbfaf5902b97666fb86eddcccdb7f";

/// \dfgPresetOmit
/// \internal
Boolean
btSimulationIslandManager.cxx_getSplitIslands!(
    )
 = "Bullet2__btSimulationIslandManager__MU__meth_getSplitIslands__2947c793aebe1240a262c7bd439c1e7c";

/// \dfgPresetOmit
/// \internal

btSimulationIslandManager.cxx_setSplitIslands!(
    Boolean doSplitIslands
    )
 = "Bullet2__btSimulationIslandManager__MU__meth_setSplitIslands__b0c19975ac32d5fd68606aa274fde0fd";


btSimulationIslandManager.setSplitIslands!(
    in
    Boolean
    doSplitIslands
    
    
    )
{   
    
    
    this.cxx_setSplitIslands(
        doSplitIslands
        );
    
    
    
}


btSimulationIslandManager.initUnionFind!(
    in
    SInt32
    n
    
    
    )
{   
    
    
    this.cxx_initUnionFind(
        n
        );
    
    
    
}

Boolean
btSimulationIslandManager.getSplitIslands!(
    )
{   
    Boolean __res = 
    this.cxx_getSplitIslands(
        );
    
    return __res;
}


btSimulationIslandManager.storeIslandActivationState!(
    in
    btCollisionWorld
    world
    
    
    )
{   
    
    
    this.cxx_storeIslandActivationState(
        world
        );
    
    
    
}


btSimulationIslandManager.buildIslands!(
    in
    btDispatcher
    dispatcher
    
    ,
    in
    btCollisionWorld
    colWorld
    
    
    )
{   
    
    
    
    this.cxx_buildIslands(
        dispatcher,
        colWorld
        );
    
    
    
    
}


btSimulationIslandManager.buildAndProcessIslands!(
    in
    btDispatcher
    dispatcher
    
    ,
    in
    btCollisionWorld
    collisionWorld
    
    ,
    in
    btSimulationIslandManager_IslandCallback
    callback
    
    
    )
{   
    
    
    
    
    this.cxx_buildAndProcessIslands(
        dispatcher,
        collisionWorld,
        callback
        );
    
    
    
    
    
}


btSimulationIslandManager.updateActivationState!(
    in
    btCollisionWorld
    colWorld
    
    ,
    in
    btDispatcher
    dispatcher
    
    
    )
{   
    
    
    
    this.cxx_updateActivationState(
        colWorld,
        dispatcher
        );
    
    
    
    
}


btSimulationIslandManager.findUnions!(
    in
    btDispatcher
    dispatcher
    
    ,
    in
    btCollisionWorld
    colWorld
    
    
    )
{   
    
    
    
    this.cxx_findUnions(
        dispatcher,
        colWorld
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager] EDK[Fabric_EDK_KL_btSimulationIslandManager] LIB[btSimulationIslandManager *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSimulationIslandManager.=(
    btSimulationIslandManager that
    ) = "Bullet2__btSimulationIslandManager__MU__simple_ass_op__e7776bcc4d72fedd8dc6091c643883ee";


/// \dfgPresetOmit
/// \internal
btSimulationIslandManager.appendDesc(io String string) {
  string += "btSimulationIslandManager:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimulationIslandManager_IslandCallback] EDK[Fabric_EDK_KL_btSimulationIslandManager_IslandCallback] LIB[btSimulationIslandManager::IslandCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager_IslandCallback] EDK[Fabric_EDK_KL_btSimulationIslandManager_IslandCallback] LIB[btSimulationIslandManager::IslandCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager_IslandCallback] EDK[Fabric_EDK_KL_btSimulationIslandManager_IslandCallback] LIB[btSimulationIslandManager::IslandCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSimulationIslandManager_IslandCallback() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btSimulationIslandManager_IslandCallback(
    btSimulationIslandManager_IslandCallback that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btSimulationIslandManager_IslandCallback.cxx_delete() = "Bullet2__btSimulationIslandManager_IslandCallback__MU__delete__a8d4d30cf74766ccd14f26144256bdce";

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager_IslandCallback] EDK[Fabric_EDK_KL_btSimulationIslandManager_IslandCallback] LIB[btSimulationIslandManager::IslandCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager_IslandCallback] EDK[Fabric_EDK_KL_btSimulationIslandManager_IslandCallback] LIB[btSimulationIslandManager::IslandCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimulationIslandManager_IslandCallback] EDK[Fabric_EDK_KL_btSimulationIslandManager_IslandCallback] LIB[btSimulationIslandManager::IslandCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSimulationIslandManager_IslandCallback.=(
    btSimulationIslandManager_IslandCallback that
    ) = "Bullet2__btSimulationIslandManager_IslandCallback__MU__simple_ass_op__388ccd0b8a830f834177e53c4010fd83";


/// \dfgPresetOmit
/// \internal
btSimulationIslandManager_IslandCallback.appendDesc(io String string) {
  string += "btSimulationIslandManager_IslandCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSphereBoxCollisionAlgorithm() = "Bullet2__btSphereBoxCollisionAlgorithm__MU__empty_ctor__16aeab76320a313a1401334dc9690473";

/// \dfgPresetOmit
btSphereBoxCollisionAlgorithm(
    btSphereBoxCollisionAlgorithm that
    ) = "Bullet2__btSphereBoxCollisionAlgorithm__MU__copy_ctor__3ba24b27fc35fa97181789233a2669d8";

btSphereBoxCollisionAlgorithm.cxx_delete() = "Bullet2__btSphereBoxCollisionAlgorithm__MU__delete__8eb63ba4601c5f138a03fbffffd5f340";

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btSphereBoxCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btSphereBoxCollisionAlgorithm__MU__meth_calculateTimeOfImpact__0ef0969520f7c9c2452fc889e7b400e7";

/// \dfgPresetOmit
/// \internal
Float32
btSphereBoxCollisionAlgorithm.cxx_getSpherePenetration!(
    CxxbtVector3ConstRef boxHalfExtent,
    CxxbtVector3ConstRef sphereRelPos,
    CxxbtVector3Ref closestPoint,
    CxxbtVector3Ref normal
    )
 = "Bullet2__btSphereBoxCollisionAlgorithm__MU__meth_getSpherePenetration__9f8a4d5e5a6795edb5d68fbd8e116c33";

Float32
btSphereBoxCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

Float32
btSphereBoxCollisionAlgorithm.getSpherePenetration!(
    in
    btVector3
    boxHalfExtent
    
    ,
    in
    btVector3
    sphereRelPos
    
    ,
    io
    btVector3
    closestPoint
    
    ,
    io
    btVector3
    normal
    
    
    )
{   
    
    CxxbtVector3ConstRef boxHalfExtent__cxx = Make_CxxbtVector3ConstRef(boxHalfExtent);
    
    CxxbtVector3ConstRef sphereRelPos__cxx = Make_CxxbtVector3ConstRef(sphereRelPos);
    
    CxxbtVector3Ref closestPoint__cxx = Make_CxxbtVector3Ref(closestPoint);
    
    CxxbtVector3Ref normal__cxx = Make_CxxbtVector3Ref(normal);
    Float32 __res = 
    this.cxx_getSpherePenetration(
        boxHalfExtent__cxx,
        sphereRelPos__cxx,
        closestPoint__cxx,
        normal__cxx
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm] LIB[btSphereBoxCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSphereBoxCollisionAlgorithm.=(
    btSphereBoxCollisionAlgorithm that
    ) = "Bullet2__btSphereBoxCollisionAlgorithm__MU__simple_ass_op__c30a2caab1306af40422eaf36f27d030";


/// \dfgPresetOmit
/// \internal
btSphereBoxCollisionAlgorithm.appendDesc(io String string) {
  string += "btSphereBoxCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc] LIB[btSphereBoxCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc] LIB[btSphereBoxCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc] LIB[btSphereBoxCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSphereBoxCollisionAlgorithm_CreateFunc() = "Bullet2__btSphereBoxCollisionAlgorithm_CreateFunc__MU__empty_ctor__255cd3d02ffee4a6bd78fec796e24861";

/// \dfgPresetOmit
btSphereBoxCollisionAlgorithm_CreateFunc(
    btSphereBoxCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSphereBoxCollisionAlgorithm_CreateFunc__MU__copy_ctor__1c1562be2ad6882661ad24574b51b1e1";

btSphereBoxCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btSphereBoxCollisionAlgorithm_CreateFunc__MU__delete__0cc98389370b886057f89af1ad036ad7";

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc] LIB[btSphereBoxCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc] LIB[btSphereBoxCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereBoxCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereBoxCollisionAlgorithm_CreateFunc] LIB[btSphereBoxCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSphereBoxCollisionAlgorithm_CreateFunc.=(
    btSphereBoxCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSphereBoxCollisionAlgorithm_CreateFunc__MU__simple_ass_op__aa416ec92867b38a9dc7dd9b952f3baa";


/// \dfgPresetOmit
/// \internal
btSphereBoxCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btSphereBoxCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSphereSphereCollisionAlgorithm() = "Bullet2__btSphereSphereCollisionAlgorithm__MU__empty_ctor__41004e4bc00e6c7f9f855fe93204e92f";

/// \dfgPresetOmit
btSphereSphereCollisionAlgorithm(
    btSphereSphereCollisionAlgorithm that
    ) = "Bullet2__btSphereSphereCollisionAlgorithm__MU__copy_ctor__3a064dfeb02d3991375c687c6a05e934";

/// \dfgPresetOmit
/// \internal
btSphereSphereCollisionAlgorithm.__ctor(
    btCollisionAlgorithmConstructionInfo ci
    ) = "Bullet2__btSphereSphereCollisionAlgorithm__MU__ctor__93b364e1ce273ca4adcdc37968c98314";

/// \dfgPresetOmit
btSphereSphereCollisionAlgorithm(
    btCollisionAlgorithmConstructionInfo ci
    ) {
    this.__ctor(
        ci
        );
}

btSphereSphereCollisionAlgorithm.cxx_delete() = "Bullet2__btSphereSphereCollisionAlgorithm__MU__delete__29b2f748d2422f813e466862ac202408";

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btSphereSphereCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btSphereSphereCollisionAlgorithm__MU__meth_calculateTimeOfImpact__1adc5c7c9c964a93286bf570b4e5bcdc";

Float32
btSphereSphereCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm] LIB[btSphereSphereCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSphereSphereCollisionAlgorithm.=(
    btSphereSphereCollisionAlgorithm that
    ) = "Bullet2__btSphereSphereCollisionAlgorithm__MU__simple_ass_op__15faa9c13e15a82f9d3412871ff02556";


/// \dfgPresetOmit
/// \internal
btSphereSphereCollisionAlgorithm.appendDesc(io String string) {
  string += "btSphereSphereCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereSphereCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc] LIB[btSphereSphereCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc] LIB[btSphereSphereCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc] LIB[btSphereSphereCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSphereSphereCollisionAlgorithm_CreateFunc() = "Bullet2__btSphereSphereCollisionAlgorithm_CreateFunc__MU__empty_ctor__bbc74574c345dbecbfa8995a19ca2f94";

/// \dfgPresetOmit
btSphereSphereCollisionAlgorithm_CreateFunc(
    btSphereSphereCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSphereSphereCollisionAlgorithm_CreateFunc__MU__copy_ctor__1c64ce81f987bf6c5bd1735866cf4015";

btSphereSphereCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btSphereSphereCollisionAlgorithm_CreateFunc__MU__delete__4c3b56708ef644203c101a3dee039421";

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc] LIB[btSphereSphereCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc] LIB[btSphereSphereCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereSphereCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereSphereCollisionAlgorithm_CreateFunc] LIB[btSphereSphereCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSphereSphereCollisionAlgorithm_CreateFunc.=(
    btSphereSphereCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSphereSphereCollisionAlgorithm_CreateFunc__MU__simple_ass_op__5828409700e4db1cfdbb2cd0c1cfe09c";


/// \dfgPresetOmit
/// \internal
btSphereSphereCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btSphereSphereCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSphereTriangleCollisionAlgorithm() = "Bullet2__btSphereTriangleCollisionAlgorithm__MU__empty_ctor__a05b42006619cd302a3c586a66e79638";

/// \dfgPresetOmit
btSphereTriangleCollisionAlgorithm(
    btSphereTriangleCollisionAlgorithm that
    ) = "Bullet2__btSphereTriangleCollisionAlgorithm__MU__copy_ctor__a10bbbdb235fc018c76608ebce18c02d";

/// \dfgPresetOmit
/// \internal
btSphereTriangleCollisionAlgorithm.__ctor(
    btCollisionAlgorithmConstructionInfo ci
    ) = "Bullet2__btSphereTriangleCollisionAlgorithm__MU__ctor__9f99a45c871b7753bf237f7917209fd3";

/// \dfgPresetOmit
btSphereTriangleCollisionAlgorithm(
    btCollisionAlgorithmConstructionInfo ci
    ) {
    this.__ctor(
        ci
        );
}

btSphereTriangleCollisionAlgorithm.cxx_delete() = "Bullet2__btSphereTriangleCollisionAlgorithm__MU__delete__c718f53196a247bfacd002d67a78f183";

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btSphereTriangleCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btSphereTriangleCollisionAlgorithm__MU__meth_calculateTimeOfImpact__1574e8951c09040934c0ed124d88348d";

Float32
btSphereTriangleCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm] LIB[btSphereTriangleCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSphereTriangleCollisionAlgorithm.=(
    btSphereTriangleCollisionAlgorithm that
    ) = "Bullet2__btSphereTriangleCollisionAlgorithm__MU__simple_ass_op__1307f1478c0281dc3a569faeb5ee7c9b";


/// \dfgPresetOmit
/// \internal
btSphereTriangleCollisionAlgorithm.appendDesc(io String string) {
  string += "btSphereTriangleCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSphereTriangleCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc] LIB[btSphereTriangleCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc] LIB[btSphereTriangleCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc] LIB[btSphereTriangleCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSphereTriangleCollisionAlgorithm_CreateFunc() = "Bullet2__btSphereTriangleCollisionAlgorithm_CreateFunc__MU__empty_ctor__974bf5f9af0888d12472f940d97c7477";

/// \dfgPresetOmit
btSphereTriangleCollisionAlgorithm_CreateFunc(
    btSphereTriangleCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSphereTriangleCollisionAlgorithm_CreateFunc__MU__copy_ctor__e6b04000d08e2ef6a1202ed41547591a";

btSphereTriangleCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btSphereTriangleCollisionAlgorithm_CreateFunc__MU__delete__45cad47e22c978f6aeeae12a11035ed8";

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc] LIB[btSphereTriangleCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc] LIB[btSphereTriangleCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSphereTriangleCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSphereTriangleCollisionAlgorithm_CreateFunc] LIB[btSphereTriangleCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSphereTriangleCollisionAlgorithm_CreateFunc.=(
    btSphereTriangleCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSphereTriangleCollisionAlgorithm_CreateFunc__MU__simple_ass_op__a877ca8b3f23988909c746f613acf923";


/// \dfgPresetOmit
/// \internal
btSphereTriangleCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btSphereTriangleCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

SphereTriangleDetector() = "Bullet2__SphereTriangleDetector__MU__empty_ctor__47a01533880e1d0a2044593107a1de70";

/// \dfgPresetOmit
SphereTriangleDetector(
    SphereTriangleDetector that
    ) = "Bullet2__SphereTriangleDetector__MU__copy_ctor__e4bbafdcc755afcdbdf6f74bb0a2d5fc";

/// \dfgPresetOmit
/// \internal
SphereTriangleDetector.__ctor(
    btSphereShape sphere,
    btTriangleShape triangle,
    Float32 contactBreakingThreshold
    ) = "Bullet2__SphereTriangleDetector__MU__ctor__bb1b78231bc4ae72b35031e926a4133a";

/// \dfgPresetOmit
SphereTriangleDetector(
    btSphereShape sphere,
    btTriangleShape triangle,
    Float32 contactBreakingThreshold
    ) {
    this.__ctor(
        sphere,
        triangle,
        contactBreakingThreshold
        );
}

SphereTriangleDetector.cxx_delete() = "Bullet2__SphereTriangleDetector__MU__delete__c920d743ff3ac03f8bbcc46325f6ef53";

//////////////////////////////////////////////////////////////////////////////
// KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
SphereTriangleDetector.cxx_collide!(
    CxxbtVector3ConstRef sphereCenter,
    CxxbtVector3Ref point,
    CxxbtVector3Ref resultNormal,
    CxxFloat32Ref depth,
    CxxFloat32Ref timeOfImpact,
    Float32 contactBreakingThreshold
    )
 = "Bullet2__SphereTriangleDetector__MU__meth_collide__d9da6c6746602110160002e6909c680b";

Boolean
SphereTriangleDetector.collide!(
    in
    btVector3
    sphereCenter
    
    ,
    io
    btVector3
    point
    
    ,
    io
    btVector3
    resultNormal
    
    ,
    io
    Float32
    depth
    
    ,
    io
    Float32
    timeOfImpact
    
    ,
    in
    Float32
    contactBreakingThreshold
    
    
    )
{   
    
    CxxbtVector3ConstRef sphereCenter__cxx = Make_CxxbtVector3ConstRef(sphereCenter);
    
    CxxbtVector3Ref point__cxx = Make_CxxbtVector3Ref(point);
    
    CxxbtVector3Ref resultNormal__cxx = Make_CxxbtVector3Ref(resultNormal);
    
    CxxFloat32Ref depth__cxx = Make_CxxFloat32Ref(depth);
    
    CxxFloat32Ref timeOfImpact__cxx = Make_CxxFloat32Ref(timeOfImpact);
    
    Boolean __res = 
    this.cxx_collide(
        sphereCenter__cxx,
        point__cxx,
        resultNormal__cxx,
        depth__cxx,
        timeOfImpact__cxx,
        contactBreakingThreshold
        );
    
    
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[SphereTriangleDetector] EDK[Fabric_EDK_KL_SphereTriangleDetector] LIB[SphereTriangleDetector *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

SphereTriangleDetector.=(
    SphereTriangleDetector that
    ) = "Bullet2__SphereTriangleDetector__MU__simple_ass_op__424f13a42c1b55666e56f94a32d91f0d";


/// \dfgPresetOmit
/// \internal
SphereTriangleDetector.appendDesc(io String string) {
  string += "SphereTriangleDetector:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
BT_BOX_BOX_TRANSFORM_CACHE(
    BT_BOX_BOX_TRANSFORM_CACHE that
    ) = "Bullet2__BT_BOX_BOX_TRANSFORM_CACHE__MU__copy_ctor__e6eb74e875efa3f8e37085ddfc36d82e";

/// \dfgPresetOmit
/// \internal
BT_BOX_BOX_TRANSFORM_CACHE.__ctor(
    ) = "Bullet2__BT_BOX_BOX_TRANSFORM_CACHE__MU__ctor__37c282083d15919bd4a4bcdaa7757ad6";

/// \dfgPresetOmit
BT_BOX_BOX_TRANSFORM_CACHE(
    ) {
    this.__ctor(
        );
}

BT_BOX_BOX_TRANSFORM_CACHE.cxx_delete() = "Bullet2__BT_BOX_BOX_TRANSFORM_CACHE__MU__delete__bdba1746277abb6cb828de9ed50f8ab6";

//////////////////////////////////////////////////////////////////////////////
// KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

BT_BOX_BOX_TRANSFORM_CACHE.cxx_calc_absolute_matrix!(
    )
 = "Bullet2__BT_BOX_BOX_TRANSFORM_CACHE__MU__meth_calc_absolute_matrix__aecf0384697c25987eb0bbb4a0b0fb88";

//! Calc the transformation relative  1 to 0. Inverts matrics by transposing
/// \dfgPresetOmit
/// \internal

BT_BOX_BOX_TRANSFORM_CACHE.cxx_calc_from_homogenic!(
    CxxbtTransformConstRef trans0,
    CxxbtTransformConstRef trans1
    )
 = "Bullet2__BT_BOX_BOX_TRANSFORM_CACHE__MU__meth_calc_from_homogenic__355baac73a25e337eb3502075fc94b30";

//! Calcs the full invertion of the matrices. Useful for scaling matrices
/// \dfgPresetOmit
/// \internal

BT_BOX_BOX_TRANSFORM_CACHE.cxx_calc_from_full_invert!(
    CxxbtTransformConstRef trans0,
    CxxbtTransformConstRef trans1
    )
 = "Bullet2__BT_BOX_BOX_TRANSFORM_CACHE__MU__meth_calc_from_full_invert__1962c8b31e1f9edaa328a98f9c6298a9";

/// \dfgPresetOmit
/// \internal
btVector3
BT_BOX_BOX_TRANSFORM_CACHE.cxx_transform?(
    CxxbtVector3ConstRef point
    )
 = "Bullet2__BT_BOX_BOX_TRANSFORM_CACHE__CO__meth_transform__8fb9570f6bee54e0a11ef6e285b90446";

btVector3
BT_BOX_BOX_TRANSFORM_CACHE.transform?(
    in
    btVector3
    point
    
    
    )
{   
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    btVector3 __res = 
    this.cxx_transform(
        point__cxx
        );
    
    
    return __res;
}

//! Calc the transformation relative  1 to 0. Inverts matrics by transposing

BT_BOX_BOX_TRANSFORM_CACHE.calc_from_homogenic!(
    in
    btTransform
    trans0
    
    ,
    in
    btTransform
    trans1
    
    
    )
{   
    
    CxxbtTransformConstRef trans0__cxx = Make_CxxbtTransformConstRef(trans0);
    
    CxxbtTransformConstRef trans1__cxx = Make_CxxbtTransformConstRef(trans1);
    
    this.cxx_calc_from_homogenic(
        trans0__cxx,
        trans1__cxx
        );
    
    
    
    
}


BT_BOX_BOX_TRANSFORM_CACHE.calc_absolute_matrix!(
    )
{   
    
    this.cxx_calc_absolute_matrix(
        );
    
    
}

//! Calcs the full invertion of the matrices. Useful for scaling matrices

BT_BOX_BOX_TRANSFORM_CACHE.calc_from_full_invert!(
    in
    btTransform
    trans0
    
    ,
    in
    btTransform
    trans1
    
    
    )
{   
    
    CxxbtTransformConstRef trans0__cxx = Make_CxxbtTransformConstRef(trans0);
    
    CxxbtTransformConstRef trans1__cxx = Make_CxxbtTransformConstRef(trans1);
    
    this.cxx_calc_from_full_invert(
        trans0__cxx,
        trans1__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[BT_BOX_BOX_TRANSFORM_CACHE] EDK[Fabric_EDK_KL_BT_BOX_BOX_TRANSFORM_CACHE] LIB[BT_BOX_BOX_TRANSFORM_CACHE *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

BT_BOX_BOX_TRANSFORM_CACHE.=(
    BT_BOX_BOX_TRANSFORM_CACHE that
    ) = "Bullet2__BT_BOX_BOX_TRANSFORM_CACHE__MU__simple_ass_op__f643cd1b017097dfd2906c231af3a924";


/// \dfgPresetOmit
/// \internal
BT_BOX_BOX_TRANSFORM_CACHE.appendDesc(io String string) {
  string += "BT_BOX_BOX_TRANSFORM_CACHE:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btAABB.__ctor(
    ) = "Bullet2__btAABB__MU__ctor__37e7cb0d169ccf7d19024903cadf9649";

/// \dfgPresetOmit
btAABB(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btAABB.__ctor(
    CxxbtVector3ConstRef V1,
    CxxbtVector3ConstRef V2,
    CxxbtVector3ConstRef V3
    ) = "Bullet2__btAABB__MU__ctor__f6fdeab82b3b47f579e493ac08cfd724";

/// \dfgPresetOmit
btAABB(
    CxxbtVector3ConstRef V1,
    CxxbtVector3ConstRef V2,
    CxxbtVector3ConstRef V3
    ) {
    this.__ctor(
        V1,
        V2,
        V3
        );
}

/// \dfgPresetOmit
/// \internal
btAABB.__ctor(
    CxxbtVector3ConstRef V1,
    CxxbtVector3ConstRef V2,
    CxxbtVector3ConstRef V3,
    Float32 margin
    ) = "Bullet2__btAABB__MU__ctor__e986d26fcc34ae5d3fe3e98ca1c6e56e";

/// \dfgPresetOmit
btAABB(
    CxxbtVector3ConstRef V1,
    CxxbtVector3ConstRef V2,
    CxxbtVector3ConstRef V3,
    Float32 margin
    ) {
    this.__ctor(
        V1,
        V2,
        V3,
        margin
        );
}

/// \dfgPresetOmit
/// \internal
btAABB.__ctor(
    CxxbtAABBConstRef other
    ) = "Bullet2__btAABB__MU__ctor__5e0207a5a810be7e94b603f10d0acae8";

/// \dfgPresetOmit
btAABB(
    CxxbtAABBConstRef other
    ) {
    this.__ctor(
        other
        );
}

/// \dfgPresetOmit
/// \internal
btAABB.__ctor(
    CxxbtAABBConstRef other,
    Float32 margin
    ) = "Bullet2__btAABB__MU__ctor__cb36f516881fac136b2ab311aa60f4c1";

/// \dfgPresetOmit
btAABB(
    CxxbtAABBConstRef other,
    Float32 margin
    ) {
    this.__ctor(
        other,
        margin
        );
}

btAABB(
    in
    btVector3
    V1
    
    ,
    in
    btVector3
    V2
    
    ,
    in
    btVector3
    V3
    
    ,
    in
    Float32
    margin
    
    
    ) {
    
    CxxbtVector3ConstRef V1__cxx = Make_CxxbtVector3ConstRef(V1);
    
    CxxbtVector3ConstRef V2__cxx = Make_CxxbtVector3ConstRef(V2);
    
    CxxbtVector3ConstRef V3__cxx = Make_CxxbtVector3ConstRef(V3);
    
    this.__ctor(
        V1__cxx,
        V2__cxx,
        V3__cxx,
        margin
        );
    
    
    
    
}

btAABB(
    in
    btVector3
    V1
    
    ,
    in
    btVector3
    V2
    
    ,
    in
    btVector3
    V3
    
    
    ) {
    
    CxxbtVector3ConstRef V1__cxx = Make_CxxbtVector3ConstRef(V1);
    
    CxxbtVector3ConstRef V2__cxx = Make_CxxbtVector3ConstRef(V2);
    
    CxxbtVector3ConstRef V3__cxx = Make_CxxbtVector3ConstRef(V3);
    this.__ctor(
        V1__cxx,
        V2__cxx,
        V3__cxx
        );
    
    
    
}

btAABB(
    in
    btAABB
    other
    
    
    ) {
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    this.__ctor(
        other__cxx
        );
    
}

btAABB(
    in
    btAABB
    other
    
    ,
    in
    Float32
    margin
    
    
    ) {
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    this.__ctor(
        other__cxx,
        margin
        );
    
    
}

~btAABB() = "Bullet2__btAABB__MU__dtor__18a23f71a95f4b75ee34fd3d831d2b98";

//////////////////////////////////////////////////////////////////////////////
// KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btAABB.cxx_invalidate!(
    )
 = "Bullet2__btAABB__MU__meth_invalidate__63f48e3ff4ef3b6f52d2337044d093ee";

/// \dfgPresetOmit
/// \internal

btAABB.cxx_increment_margin!(
    Float32 margin
    )
 = "Bullet2__btAABB__MU__meth_increment_margin__d469dd999c4d605e811b43adff8116af";

/// \dfgPresetOmit
/// \internal

btAABB.cxx_copy_with_margin!(
    CxxbtAABBConstRef other,
    Float32 margin
    )
 = "Bullet2__btAABB__MU__meth_copy_with_margin__719e71d852ee3c5374cccb09441db51c";

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

btAABB.cxx_appy_transform!(
    CxxbtTransformConstRef trans
    )
 = "Bullet2__btAABB__MU__meth_appy_transform__aa82b9b410edd7595ca48d916e5dc984";

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

btAABB.cxx_appy_transform_trans_cache!(
    BT_BOX_BOX_TRANSFORM_CACHE trans
    )
 = "Bullet2__btAABB__MU__meth_appy_transform_trans_cache__c7c02e35f21cafbdce8ba4a97854275a";

//! Merges a Box
/// \dfgPresetOmit
/// \internal

btAABB.cxx_merge!(
    CxxbtAABBConstRef box
    )
 = "Bullet2__btAABB__MU__meth_merge__ee658e6b5330ac28a36f819aec42e383";

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

btAABB.cxx_get_center_extend?(
    CxxbtVector3Ref center,
    CxxbtVector3Ref extend
    )
 = "Bullet2__btAABB__CO__meth_get_center_extend__0dabda03c9d7ec4263441da751aea5e9";

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

btAABB.cxx_find_intersection?(
    CxxbtAABBConstRef other,
    CxxbtAABBRef intersection
    )
 = "Bullet2__btAABB__CO__meth_find_intersection__7f561f494203b8ff614596cf5e1dccc7";

/// \dfgPresetOmit
/// \internal
Boolean
btAABB.cxx_has_collision?(
    CxxbtAABBConstRef other
    )
 = "Bullet2__btAABB__CO__meth_has_collision__2ad523cff53f4f485592e56726d1ccb4";

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
btAABB.cxx_collide_ray?(
    CxxbtVector3ConstRef vorigin,
    CxxbtVector3ConstRef vdir
    )
 = "Bullet2__btAABB__CO__meth_collide_ray__1680377a589e92ec456105d0ca3df9b0";

/// \dfgPresetOmit
/// \internal

btAABB.cxx_projection_interval?(
    CxxbtVector3ConstRef direction,
    CxxFloat32Ref vmin,
    CxxFloat32Ref vmax
    )
 = "Bullet2__btAABB__CO__meth_projection_interval__29b746f4d613b49a14a95396d8c0914c";

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
btAABB.cxx_plane_classify?(
    CxxbtVector4ConstRef plane
    )
 = "Bullet2__btAABB__CO__meth_plane_classify__d228fbe6be49a7186f5872dd18a4d186";

/// \dfgPresetOmit
/// \internal
Boolean
btAABB.cxx_overlapping_trans_conservative?(
    CxxbtAABBConstRef box,
    CxxbtTransformRef trans1_to_0
    )
 = "Bullet2__btAABB__CO__meth_overlapping_trans_conservative__897e0f9679d39e0e8e19c97aad4fd2d4";

/// \dfgPresetOmit
/// \internal
Boolean
btAABB.cxx_overlapping_trans_conservative2?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE trans1_to_0
    )
 = "Bullet2__btAABB__CO__meth_overlapping_trans_conservative2__5733fd00a4fc715653cf82b1c67ef350";

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
btAABB.cxx_overlapping_trans_cache?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE transcache,
    Boolean fulltest
    )
 = "Bullet2__btAABB__CO__meth_overlapping_trans_cache__9270a2431725457980f340267ab61743";

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
btAABB.cxx_collide_plane?(
    CxxbtVector4ConstRef plane
    )
 = "Bullet2__btAABB__CO__meth_collide_plane__35e3152180105bac6933594ecdbaed0d";

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
btAABB.cxx_collide_triangle_exact?(
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2,
    CxxbtVector3ConstRef p3,
    CxxbtVector4ConstRef triangle_plane
    )
 = "Bullet2__btAABB__CO__meth_collide_triangle_exact__02a61ade4c755e4253877c3a11de7c51";

//! Simple test for planes.
Boolean
btAABB.collide_plane?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    Boolean __res = 
    this.cxx_collide_plane(
        plane__cxx
        );
    
    
    return __res;
}

//! Apply a transform to an AABB

btAABB.appy_transform!(
    in
    btTransform
    trans
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    this.cxx_appy_transform(
        trans__cxx
        );
    
    
    
}

//! transcache is the transformation cache from box to this AABB
Boolean
btAABB.overlapping_trans_cache?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    transcache
    
    ,
    in
    Boolean
    fulltest
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    
    Boolean __res = 
    this.cxx_overlapping_trans_cache(
        box__cxx,
        transcache,
        fulltest
        );
    
    
    
    
    return __res;
}

eBT_PLANE_INTERSECTION_TYPE
btAABB.plane_classify?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    eBT_PLANE_INTERSECTION_TYPE __res = 
    this.cxx_plane_classify(
        plane__cxx
        );
    
    
    return __res;
}

Boolean
btAABB.has_collision?(
    in
    btAABB
    other
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    Boolean __res = 
    this.cxx_has_collision(
        other__cxx
        );
    
    
    return __res;
}

//! Merges a Box

btAABB.merge!(
    in
    btAABB
    box
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    this.cxx_merge(
        box__cxx
        );
    
    
    
}


btAABB.invalidate!(
    )
{   
    
    this.cxx_invalidate(
        );
    
    
}

Boolean
btAABB.overlapping_trans_conservative2?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    Boolean __res = 
    this.cxx_overlapping_trans_conservative2(
        box__cxx,
        trans1_to_0
        );
    
    
    
    return __res;
}

//! test for a triangle, with edges
Boolean
btAABB.collide_triangle_exact?(
    in
    btVector3
    p1
    
    ,
    in
    btVector3
    p2
    
    ,
    in
    btVector3
    p3
    
    ,
    in
    btVector4
    triangle_plane
    
    
    )
{   
    
    CxxbtVector3ConstRef p1__cxx = Make_CxxbtVector3ConstRef(p1);
    
    CxxbtVector3ConstRef p2__cxx = Make_CxxbtVector3ConstRef(p2);
    
    CxxbtVector3ConstRef p3__cxx = Make_CxxbtVector3ConstRef(p3);
    
    CxxbtVector4ConstRef triangle_plane__cxx = Make_CxxbtVector4ConstRef(triangle_plane);
    Boolean __res = 
    this.cxx_collide_triangle_exact(
        p1__cxx,
        p2__cxx,
        p3__cxx,
        triangle_plane__cxx
        );
    
    
    
    
    
    return __res;
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
Boolean
btAABB.collide_ray?(
    in
    btVector3
    vorigin
    
    ,
    in
    btVector3
    vdir
    
    
    )
{   
    
    CxxbtVector3ConstRef vorigin__cxx = Make_CxxbtVector3ConstRef(vorigin);
    
    CxxbtVector3ConstRef vdir__cxx = Make_CxxbtVector3ConstRef(vdir);
    Boolean __res = 
    this.cxx_collide_ray(
        vorigin__cxx,
        vdir__cxx
        );
    
    
    
    return __res;
}


btAABB.increment_margin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_increment_margin(
        margin
        );
    
    
    
}


btAABB.copy_with_margin!(
    in
    btAABB
    other
    
    ,
    in
    Float32
    margin
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    
    this.cxx_copy_with_margin(
        other__cxx,
        margin
        );
    
    
    
    
}

//! Apply a transform to an AABB

btAABB.appy_transform_trans_cache!(
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    trans
    
    
    )
{   
    
    
    this.cxx_appy_transform_trans_cache(
        trans
        );
    
    
    
}

//! Finds the intersecting box between this box and the other.

btAABB.find_intersection?(
    in
    btAABB
    other
    
    ,
    io
    btAABB
    intersection
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    CxxbtAABBRef intersection__cxx = Make_CxxbtAABBRef(intersection);
    
    this.cxx_find_intersection(
        other__cxx,
        intersection__cxx
        );
    
    
    
    
}


btAABB.projection_interval?(
    in
    btVector3
    direction
    
    ,
    io
    Float32
    vmin
    
    ,
    io
    Float32
    vmax
    
    
    )
{   
    
    CxxbtVector3ConstRef direction__cxx = Make_CxxbtVector3ConstRef(direction);
    
    CxxFloat32Ref vmin__cxx = Make_CxxFloat32Ref(vmin);
    
    CxxFloat32Ref vmax__cxx = Make_CxxFloat32Ref(vmax);
    
    this.cxx_projection_interval(
        direction__cxx,
        vmin__cxx,
        vmax__cxx
        );
    
    
    
    
    
}

Boolean
btAABB.overlapping_trans_conservative?(
    in
    btAABB
    box
    
    ,
    io
    btTransform
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtTransformRef trans1_to_0__cxx = Make_CxxbtTransformRef(trans1_to_0);
    Boolean __res = 
    this.cxx_overlapping_trans_conservative(
        box__cxx,
        trans1_to_0__cxx
        );
    
    
    
    return __res;
}

//! Gets the extend and center

btAABB.get_center_extend?(
    io
    btVector3
    center
    
    ,
    io
    btVector3
    extend
    
    
    )
{   
    
    CxxbtVector3Ref center__cxx = Make_CxxbtVector3Ref(center);
    
    CxxbtVector3Ref extend__cxx = Make_CxxbtVector3Ref(extend);
    
    this.cxx_get_center_extend(
        center__cxx,
        extend__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAABB.=(
    btAABB that
    ) = "Bullet2__btAABB__MU__simple_ass_op__803c51fc61369c858970f9e53eb2651e";



/// \dfgPresetOmit
/// \internal
btAABB.appendDesc(io String string) {
  string += "btAABB:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

MyCallback() = "Bullet2__MyCallback__MU__empty_ctor__e1c299573b78e20bb8647145b7340ccf";

/// \dfgPresetOmit
MyCallback(
    MyCallback that
    ) = "Bullet2__MyCallback__MU__copy_ctor__6dd7cbe6b26122aa9d3582a7ae70ae5e";

/// \dfgPresetOmit
/// \internal
MyCallback.__ctor(
    CxxbtVector3ConstRef from,
    CxxbtVector3ConstRef to,
    SInt32 ignorePart,
    SInt32 ignoreTriangleIndex
    ) = "Bullet2__MyCallback__MU__ctor__81343d4f73bc4891489d5b0af1ce5b72";

/// \dfgPresetOmit
MyCallback(
    CxxbtVector3ConstRef from,
    CxxbtVector3ConstRef to,
    SInt32 ignorePart,
    SInt32 ignoreTriangleIndex
    ) {
    this.__ctor(
        from,
        to,
        ignorePart,
        ignoreTriangleIndex
        );
}

MyCallback(
    in
    btVector3
    from
    
    ,
    in
    btVector3
    to
    
    ,
    in
    SInt32
    ignorePart
    
    ,
    in
    SInt32
    ignoreTriangleIndex
    
    
    ) {
    
    CxxbtVector3ConstRef from__cxx = Make_CxxbtVector3ConstRef(from);
    
    CxxbtVector3ConstRef to__cxx = Make_CxxbtVector3ConstRef(to);
    
    
    this.__ctor(
        from__cxx,
        to__cxx,
        ignorePart,
        ignoreTriangleIndex
        );
    
    
    
    
}

MyCallback.cxx_delete() = "Bullet2__MyCallback__MU__delete__1fa3e7a426dd4dd8b600b5efe5f9fd4c";

//////////////////////////////////////////////////////////////////////////////
// KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
MyCallback.cxx_reportHit!(
    CxxbtVector3ConstRef hitNormalLocal,
    Float32 hitFraction,
    SInt32 partId,
    SInt32 triangleIndex
    )
 = "Bullet2__MyCallback__MU__meth_reportHit__4ea65c9efc7f583608f6f4986f7a6a68";

Float32
MyCallback.reportHit!(
    in
    btVector3
    hitNormalLocal
    
    ,
    in
    Float32
    hitFraction
    
    ,
    in
    SInt32
    partId
    
    ,
    in
    SInt32
    triangleIndex
    
    
    )
{   
    
    CxxbtVector3ConstRef hitNormalLocal__cxx = Make_CxxbtVector3ConstRef(hitNormalLocal);
    
    
    
    Float32 __res = 
    this.cxx_reportHit(
        hitNormalLocal__cxx,
        hitFraction,
        partId,
        triangleIndex
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[MyCallback] EDK[Fabric_EDK_KL_MyCallback] LIB[MyCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

MyCallback.=(
    MyCallback that
    ) = "Bullet2__MyCallback__MU__simple_ass_op__3d598184beab4e653aa2a28a292b2e90";


/// \dfgPresetOmit
/// \internal
MyCallback.appendDesc(io String string) {
  string += "MyCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

MyInternalTriangleIndexCallback() = "Bullet2__MyInternalTriangleIndexCallback__MU__empty_ctor__167bf8b24b23611af9a580b2a90ca975";

/// \dfgPresetOmit
MyInternalTriangleIndexCallback(
    MyInternalTriangleIndexCallback that
    ) = "Bullet2__MyInternalTriangleIndexCallback__MU__copy_ctor__2b020bad63bd9fae634895351b9691bd";

/// \dfgPresetOmit
/// \internal
MyInternalTriangleIndexCallback.__ctor(
    btCompoundShape colShape,
    btGImpactMeshShape meshShape,
    Float32 depth
    ) = "Bullet2__MyInternalTriangleIndexCallback__MU__ctor__6872c9be7ec6646da82a5d4c6290b8a1";

/// \dfgPresetOmit
MyInternalTriangleIndexCallback(
    btCompoundShape colShape,
    btGImpactMeshShape meshShape,
    Float32 depth
    ) {
    this.__ctor(
        colShape,
        meshShape,
        depth
        );
}

MyInternalTriangleIndexCallback.cxx_delete() = "Bullet2__MyInternalTriangleIndexCallback__MU__delete__1104ef9d7215abb67369483f9139455e";

//////////////////////////////////////////////////////////////////////////////
// KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

MyInternalTriangleIndexCallback.cxx_internalProcessTriangleIndex!(
    CxxbtVector3Ptr triangle,
    SInt32 partId,
    SInt32 triangleIndex
    )
 = "Bullet2__MyInternalTriangleIndexCallback__MU__meth_internalProcessTriangleIndex__38844df9a55b3bf1be038b1e4a8350fb";


MyInternalTriangleIndexCallback.internalProcessTriangleIndex!(
    io
    btVector3
    triangle
    
    ,
    in
    SInt32
    partId
    
    ,
    in
    SInt32
    triangleIndex
    
    
    )
{   
    
    CxxbtVector3Ptr triangle__cxx = Make_CxxbtVector3Ptr(triangle);
    
    
    
    this.cxx_internalProcessTriangleIndex(
        triangle__cxx,
        partId,
        triangleIndex
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[MyInternalTriangleIndexCallback] EDK[Fabric_EDK_KL_MyInternalTriangleIndexCallback] LIB[MyInternalTriangleIndexCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

MyInternalTriangleIndexCallback.=(
    MyInternalTriangleIndexCallback that
    ) = "Bullet2__MyInternalTriangleIndexCallback__MU__simple_ass_op__89cc42f9173b5b42856b0e324b7995fc";


/// \dfgPresetOmit
/// \internal
MyInternalTriangleIndexCallback.appendDesc(io String string) {
  string += "MyInternalTriangleIndexCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
GIM_CONTACT(
    GIM_CONTACT that
    ) = "Bullet2__GIM_CONTACT__MU__copy_ctor__8947c735e429d8da97c0bc6efc0ef0e5";

/// \dfgPresetOmit
/// \internal
GIM_CONTACT.__ctor(
    ) = "Bullet2__GIM_CONTACT__MU__ctor__af135a03825830d422e452d3a9cab156";

/// \dfgPresetOmit
GIM_CONTACT(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
GIM_CONTACT.__ctor(
    GIM_CONTACT contact
    ) = "Bullet2__GIM_CONTACT__MU__ctor__601a0bd15a0b1de3a6c84cdf669ad940";

/// \dfgPresetOmit
GIM_CONTACT(
    GIM_CONTACT contact
    ) {
    this.__ctor(
        contact
        );
}

/// \dfgPresetOmit
/// \internal
GIM_CONTACT.__ctor(
    CxxbtVector3ConstRef point,
    CxxbtVector3ConstRef normal,
    Float32 depth,
    SInt32 feature1,
    SInt32 feature2
    ) = "Bullet2__GIM_CONTACT__MU__ctor__9e930cb921ff1a0d2451b121fadde306";

/// \dfgPresetOmit
GIM_CONTACT(
    CxxbtVector3ConstRef point,
    CxxbtVector3ConstRef normal,
    Float32 depth,
    SInt32 feature1,
    SInt32 feature2
    ) {
    this.__ctor(
        point,
        normal,
        depth,
        feature1,
        feature2
        );
}

GIM_CONTACT(
    in
    btVector3
    point
    
    ,
    in
    btVector3
    normal
    
    ,
    in
    Float32
    depth
    
    ,
    in
    SInt32
    feature1
    
    ,
    in
    SInt32
    feature2
    
    
    ) {
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    
    CxxbtVector3ConstRef normal__cxx = Make_CxxbtVector3ConstRef(normal);
    
    
    
    this.__ctor(
        point__cxx,
        normal__cxx,
        depth,
        feature1,
        feature2
        );
    
    
    
    
    
}

GIM_CONTACT.cxx_delete() = "Bullet2__GIM_CONTACT__MU__delete__c3e01b981080afdcf4c0fd8aab43e9c2";

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! Calcs key for coord classification
/// \dfgPresetOmit
/// \internal
UInt32
GIM_CONTACT.cxx_calc_key_contact?(
    )
 = "Bullet2__GIM_CONTACT__CO__meth_calc_key_contact__32e7364783d61f3ce31edc5b2616bdf7";

/// \dfgPresetOmit
/// \internal

GIM_CONTACT.cxx_interpolate_normals!(
    CxxbtVector3Ptr normals,
    SInt32 normal_count
    )
 = "Bullet2__GIM_CONTACT__MU__meth_interpolate_normals__2149a19b4eb0a53f2cad407d4ad28a73";


GIM_CONTACT.interpolate_normals!(
    io
    btVector3
    normals
    
    ,
    in
    SInt32
    normal_count
    
    
    )
{   
    
    CxxbtVector3Ptr normals__cxx = Make_CxxbtVector3Ptr(normals);
    
    
    this.cxx_interpolate_normals(
        normals__cxx,
        normal_count
        );
    
    
    
    
}

//! Calcs key for coord classification
UInt32
GIM_CONTACT.calc_key_contact?(
    )
{   
    UInt32 __res = 
    this.cxx_calc_key_contact(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_CONTACT] EDK[Fabric_EDK_KL_GIM_CONTACT] LIB[GIM_CONTACT *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

GIM_CONTACT.=(
    GIM_CONTACT that
    ) = "Bullet2__GIM_CONTACT__MU__simple_ass_op__6d3e197bcd818f88d2a620417af50c45";


/// \dfgPresetOmit
/// \internal
GIM_CONTACT.appendDesc(io String string) {
  string += "GIM_CONTACT:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btContactArray(
    btContactArray that
    ) = "Bullet2__btContactArray__MU__copy_ctor__3bd065866c4345fc363efa49f2ca7598";

/// \dfgPresetOmit
/// \internal
btContactArray.__ctor(
    ) = "Bullet2__btContactArray__MU__ctor__7da6ab07a4e402924dafb0b125b88d0c";

/// \dfgPresetOmit
btContactArray(
    ) {
    this.__ctor(
        );
}

btContactArray.cxx_delete() = "Bullet2__btContactArray__MU__delete__882a9a0f7b041b15aefbc1f144c0cdc7";

//////////////////////////////////////////////////////////////////////////////
// KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btContactArray.cxx_push_contact!(
    CxxbtVector3ConstRef point,
    CxxbtVector3ConstRef normal,
    Float32 depth,
    SInt32 feature1,
    SInt32 feature2
    )
 = "Bullet2__btContactArray__MU__meth_push_contact__826bcf3ea53a4f7788016241fb21d145";

/// \dfgPresetOmit
/// \internal

btContactArray.cxx_push_triangle_contacts!(
    GIM_TRIANGLE_CONTACT tricontact,
    SInt32 feature1,
    SInt32 feature2
    )
 = "Bullet2__btContactArray__MU__meth_push_triangle_contacts__fd1b46c7c45cac8095ef1028777657e9";

/// \dfgPresetOmit
/// \internal

btContactArray.cxx_merge_contacts!(
    btContactArray contacts
    )
 = "Bullet2__btContactArray__MU__meth_merge_contacts__68ac0f258aa3c54c751658bc35a29a22";

/// \dfgPresetOmit
/// \internal

btContactArray.cxx_merge_contacts!(
    btContactArray contacts,
    Boolean normal_contact_average
    )
 = "Bullet2__btContactArray__MU__meth_merge_contacts__1d296fc6f00739eaabb3229ec01748ac";

/// \dfgPresetOmit
/// \internal

btContactArray.cxx_merge_contacts_unique!(
    btContactArray contacts
    )
 = "Bullet2__btContactArray__MU__meth_merge_contacts_unique__1abef0e20102ae2037e4eecfd601a0f0";


btContactArray.merge_contacts!(
    in
    btContactArray
    contacts
    
    
    )
{   
    
    
    this.cxx_merge_contacts(
        contacts
        );
    
    
    
}


btContactArray.push_triangle_contacts!(
    in
    GIM_TRIANGLE_CONTACT
    tricontact
    
    ,
    in
    SInt32
    feature1
    
    ,
    in
    SInt32
    feature2
    
    
    )
{   
    
    
    
    
    this.cxx_push_triangle_contacts(
        tricontact,
        feature1,
        feature2
        );
    
    
    
    
    
}


btContactArray.push_contact!(
    in
    btVector3
    point
    
    ,
    in
    btVector3
    normal
    
    ,
    in
    Float32
    depth
    
    ,
    in
    SInt32
    feature1
    
    ,
    in
    SInt32
    feature2
    
    
    )
{   
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    
    CxxbtVector3ConstRef normal__cxx = Make_CxxbtVector3ConstRef(normal);
    
    
    
    
    this.cxx_push_contact(
        point__cxx,
        normal__cxx,
        depth,
        feature1,
        feature2
        );
    
    
    
    
    
    
    
}


btContactArray.merge_contacts!(
    in
    btContactArray
    contacts
    
    ,
    in
    Boolean
    normal_contact_average
    
    
    )
{   
    
    
    
    this.cxx_merge_contacts(
        contacts,
        normal_contact_average
        );
    
    
    
    
}


btContactArray.merge_contacts_unique!(
    in
    btContactArray
    contacts
    
    
    )
{   
    
    
    this.cxx_merge_contacts_unique(
        contacts
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactArray] EDK[Fabric_EDK_KL_btContactArray] LIB[btContactArray *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btContactArray.=(
    btContactArray that
    ) = "Bullet2__btContactArray__MU__simple_ass_op__669a3f072842d2d3b710ee94580956cf";


/// \dfgPresetOmit
/// \internal
btContactArray.appendDesc(io String string) {
  string += "btContactArray:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGenericMemoryPool() = "Bullet2__btGenericMemoryPool__MU__empty_ctor__f0ff01830ff6f9a4826f2407eecc57a0";

/// \dfgPresetOmit
btGenericMemoryPool(
    btGenericMemoryPool that
    ) = "Bullet2__btGenericMemoryPool__MU__copy_ctor__c85ebcce3d175d3d2c9649eeb68d6023";

/// \dfgPresetOmit
/// \internal
btGenericMemoryPool.__ctor(
    UInt64 element_size,
    UInt64 element_count
    ) = "Bullet2__btGenericMemoryPool__MU__ctor__45a31930a2f69b864fc92702da896a30";

/// \dfgPresetOmit
btGenericMemoryPool(
    UInt64 element_size,
    UInt64 element_count
    ) {
    this.__ctor(
        element_size,
        element_count
        );
}

btGenericMemoryPool.cxx_delete() = "Bullet2__btGenericMemoryPool__MU__delete__eca21ecad2e5877ae53573f471952cd1";

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btGenericMemoryPool.cxx_init_pool!(
    UInt64 element_size,
    UInt64 element_count
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_init_pool__71a57e3650f1eb159c344b97254fd18e";

/// \dfgPresetOmit
/// \internal

btGenericMemoryPool.cxx_end_pool!(
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_end_pool__4b038b42063f2dac2e56285b1c285997";

/// \dfgPresetOmit
/// \internal
UInt64
btGenericMemoryPool.cxx_get_pool_capacity!(
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_get_pool_capacity__ecbecea5dc00370278e3ec58664a5967";

/// \dfgPresetOmit
/// \internal
UInt64
btGenericMemoryPool.cxx_gem_element_size!(
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_gem_element_size__680489c32452114f64ada769f21b096c";

/// \dfgPresetOmit
/// \internal
UInt64
btGenericMemoryPool.cxx_get_max_element_count!(
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_get_max_element_count__415fbb2b5f169986d23b9703e9aad6c3";

/// \dfgPresetOmit
/// \internal
UInt64
btGenericMemoryPool.cxx_get_allocated_count!(
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_get_allocated_count__55fe489e2c60b3498bd7c9b0742e35c4";

/// \dfgPresetOmit
/// \internal
UInt64
btGenericMemoryPool.cxx_get_free_positions_count!(
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_get_free_positions_count__de3099bfabb3fdd500421bd21eeccf60";

/// \dfgPresetOmit
/// \internal
Data
btGenericMemoryPool.cxx_get_element_data!(
    UInt64 element_index
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_get_element_data__250ef97b3d0d7cbeb34697e88dcdcb57";

//! Allocates memory in pool
// /*!
// \param size_bytes size in bytes of the buffer
// */
/// \dfgPresetOmit
/// \internal
Data
btGenericMemoryPool.cxx_allocate!(
    UInt64 size_bytes
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_allocate__7becc87c79b92943d67f146d187ce65e";

/// \dfgPresetOmit
/// \internal
Boolean
btGenericMemoryPool.cxx_freeMemory!(
    Data pointer
    )
 = "Bullet2__btGenericMemoryPool__MU__meth_freeMemory__7f1d39771bff2726a41d7cde9f5cbf79";

Data
btGenericMemoryPool.get_element_data!(
    in
    UInt64
    element_index
    
    
    )
{   
    
    Data __res = 
    this.cxx_get_element_data(
        element_index
        );
    
    
    return __res;
}


btGenericMemoryPool.end_pool!(
    )
{   
    
    this.cxx_end_pool(
        );
    
    
}

Boolean
btGenericMemoryPool.freeMemory!(
    in
    Data
    pointer
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_freeMemory(
        pointer
        );
    
    
    return __res;
}


btGenericMemoryPool.init_pool!(
    in
    UInt64
    element_size
    
    ,
    in
    UInt64
    element_count
    
    
    )
{   
    
    
    
    this.cxx_init_pool(
        element_size,
        element_count
        );
    
    
    
    
}

UInt64
btGenericMemoryPool.get_free_positions_count!(
    )
{   
    UInt64 __res = 
    this.cxx_get_free_positions_count(
        );
    
    return __res;
}

UInt64
btGenericMemoryPool.get_pool_capacity!(
    )
{   
    UInt64 __res = 
    this.cxx_get_pool_capacity(
        );
    
    return __res;
}

UInt64
btGenericMemoryPool.gem_element_size!(
    )
{   
    UInt64 __res = 
    this.cxx_gem_element_size(
        );
    
    return __res;
}

UInt64
btGenericMemoryPool.get_max_element_count!(
    )
{   
    UInt64 __res = 
    this.cxx_get_max_element_count(
        );
    
    return __res;
}

//! Allocates memory in pool
// /*!
// \param size_bytes size in bytes of the buffer
// */
Data
btGenericMemoryPool.allocate!(
    in
    UInt64
    size_bytes
    
    
    )
{   
    
    Data __res = 
    this.cxx_allocate(
        size_bytes
        );
    
    
    return __res;
}

UInt64
btGenericMemoryPool.get_allocated_count!(
    )
{   
    UInt64 __res = 
    this.cxx_get_allocated_count(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericMemoryPool] EDK[Fabric_EDK_KL_btGenericMemoryPool] LIB[btGenericMemoryPool *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGenericMemoryPool.=(
    btGenericMemoryPool that
    ) = "Bullet2__btGenericMemoryPool__MU__simple_ass_op__424d3a968f54e912b58851f0981728cc";


/// \dfgPresetOmit
/// \internal
btGenericMemoryPool.appendDesc(io String string) {
  string += "btGenericMemoryPool:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGenericPoolAllocator() = "Bullet2__btGenericPoolAllocator__MU__empty_ctor__04b4c7b08bb3a9f720441cab6c902d3d";

/// \dfgPresetOmit
btGenericPoolAllocator(
    btGenericPoolAllocator that
    ) = "Bullet2__btGenericPoolAllocator__MU__copy_ctor__8a12a539009a0a9acfa492210fb66791";

/// \dfgPresetOmit
/// \internal
btGenericPoolAllocator.__ctor(
    UInt64 pool_element_size,
    UInt64 pool_element_count
    ) = "Bullet2__btGenericPoolAllocator__MU__ctor__6d3f2a47cb88dd489939e493d5cb2a67";

/// \dfgPresetOmit
btGenericPoolAllocator(
    UInt64 pool_element_size,
    UInt64 pool_element_count
    ) {
    this.__ctor(
        pool_element_size,
        pool_element_count
        );
}

btGenericPoolAllocator.cxx_delete() = "Bullet2__btGenericPoolAllocator__MU__delete__1cb5f6c7bbba5f5b27ac268803a83774";

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
btGenericPoolAllocator.cxx_get_pool_capacity!(
    )
 = "Bullet2__btGenericPoolAllocator__MU__meth_get_pool_capacity__955a5a4b46db16f9ead8b5b69eb142e1";

//! Allocates memory in pool
// /*!
// \param size_bytes size in bytes of the buffer
// */
/// \dfgPresetOmit
/// \internal
Data
btGenericPoolAllocator.cxx_allocate!(
    UInt64 size_bytes
    )
 = "Bullet2__btGenericPoolAllocator__MU__meth_allocate__9ac4ae4801b92bf3037300d1eca9f786";

/// \dfgPresetOmit
/// \internal
Boolean
btGenericPoolAllocator.cxx_freeMemory!(
    Data pointer
    )
 = "Bullet2__btGenericPoolAllocator__MU__meth_freeMemory__ef0e74532e0ef9d0725b0687fade156a";

//! Allocates memory in pool
// /*!
// \param size_bytes size in bytes of the buffer
// */
Data
btGenericPoolAllocator.allocate!(
    in
    UInt64
    size_bytes
    
    
    )
{   
    
    Data __res = 
    this.cxx_allocate(
        size_bytes
        );
    
    
    return __res;
}

UInt64
btGenericPoolAllocator.get_pool_capacity!(
    )
{   
    UInt64 __res = 
    this.cxx_get_pool_capacity(
        );
    
    return __res;
}

Boolean
btGenericPoolAllocator.freeMemory!(
    in
    Data
    pointer
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_freeMemory(
        pointer
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGenericPoolAllocator] EDK[Fabric_EDK_KL_btGenericPoolAllocator] LIB[btGenericPoolAllocator *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGenericPoolAllocator.=(
    btGenericPoolAllocator that
    ) = "Bullet2__btGenericPoolAllocator__MU__simple_ass_op__dc37a6a088bc3d150ad6ecd595b90321";


/// \dfgPresetOmit
/// \internal
btGenericPoolAllocator.appendDesc(io String string) {
  string += "btGenericPoolAllocator:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_PAIR] EDK[Fabric_EDK_KL_GIM_PAIR] LIB[GIM_PAIR *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_PAIR] EDK[Fabric_EDK_KL_GIM_PAIR] LIB[GIM_PAIR *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_PAIR] EDK[Fabric_EDK_KL_GIM_PAIR] LIB[GIM_PAIR *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
GIM_PAIR(
    GIM_PAIR that
    ) = "Bullet2__GIM_PAIR__MU__copy_ctor__a1e3b57a1f5e8623e5555f01d08d04ed";

/// \dfgPresetOmit
/// \internal
GIM_PAIR.__ctor(
    ) = "Bullet2__GIM_PAIR__MU__ctor__8c8e9b851efaa62b12a321ad1fa1d107";

/// \dfgPresetOmit
GIM_PAIR(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
GIM_PAIR.__ctor(
    GIM_PAIR p
    ) = "Bullet2__GIM_PAIR__MU__ctor__37adbd84b9b0be1ecc7584ece511e461";

/// \dfgPresetOmit
GIM_PAIR(
    GIM_PAIR p
    ) {
    this.__ctor(
        p
        );
}

/// \dfgPresetOmit
/// \internal
GIM_PAIR.__ctor(
    SInt32 index1,
    SInt32 index2
    ) = "Bullet2__GIM_PAIR__MU__ctor__38a588e932b309e272d17fa581b26aed";

/// \dfgPresetOmit
GIM_PAIR(
    SInt32 index1,
    SInt32 index2
    ) {
    this.__ctor(
        index1,
        index2
        );
}

GIM_PAIR.cxx_delete() = "Bullet2__GIM_PAIR__MU__delete__c5410379490f8e0aa6169040f5b932aa";

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_PAIR] EDK[Fabric_EDK_KL_GIM_PAIR] LIB[GIM_PAIR *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_PAIR] EDK[Fabric_EDK_KL_GIM_PAIR] LIB[GIM_PAIR *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_PAIR] EDK[Fabric_EDK_KL_GIM_PAIR] LIB[GIM_PAIR *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

GIM_PAIR.=(
    GIM_PAIR that
    ) = "Bullet2__GIM_PAIR__MU__simple_ass_op__8d3ed90c2c0c41a779333cc93b151efa";


/// \dfgPresetOmit
/// \internal
GIM_PAIR.appendDesc(io String string) {
  string += "GIM_PAIR:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btPairSet(
    btPairSet that
    ) = "Bullet2__btPairSet__MU__copy_ctor__3185da00ac4bff52b77cd3e305807ac0";

/// \dfgPresetOmit
/// \internal
btPairSet.__ctor(
    ) = "Bullet2__btPairSet__MU__ctor__2fb0c9224f179334bea6dad922000df2";

/// \dfgPresetOmit
btPairSet(
    ) {
    this.__ctor(
        );
}

btPairSet.cxx_delete() = "Bullet2__btPairSet__MU__delete__264a75a75203af8c28d2275048f88513";

//////////////////////////////////////////////////////////////////////////////
// KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btPairSet.cxx_push_pair!(
    SInt32 index1,
    SInt32 index2
    )
 = "Bullet2__btPairSet__MU__meth_push_pair__238ecbbd497de164833982f6bf12a0da";

/// \dfgPresetOmit
/// \internal

btPairSet.cxx_push_pair_inv!(
    SInt32 index1,
    SInt32 index2
    )
 = "Bullet2__btPairSet__MU__meth_push_pair_inv__d6251908a914d686d925e8a8528bfb40";


btPairSet.push_pair!(
    in
    SInt32
    index1
    
    ,
    in
    SInt32
    index2
    
    
    )
{   
    
    
    
    this.cxx_push_pair(
        index1,
        index2
        );
    
    
    
    
}


btPairSet.push_pair_inv!(
    in
    SInt32
    index1
    
    ,
    in
    SInt32
    index2
    
    
    )
{   
    
    
    
    this.cxx_push_pair_inv(
        index1,
        index2
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPairSet] EDK[Fabric_EDK_KL_btPairSet] LIB[btPairSet *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPairSet.=(
    btPairSet that
    ) = "Bullet2__btPairSet__MU__simple_ass_op__e059b431bb1ad825d99468cf04393a44";


/// \dfgPresetOmit
/// \internal
btPairSet.appendDesc(io String string) {
  string += "btPairSet:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_DATA] EDK[Fabric_EDK_KL_GIM_BVH_DATA] LIB[GIM_BVH_DATA *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA] EDK[Fabric_EDK_KL_GIM_BVH_DATA] LIB[GIM_BVH_DATA *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA] EDK[Fabric_EDK_KL_GIM_BVH_DATA] LIB[GIM_BVH_DATA *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

GIM_BVH_DATA() = "Bullet2__GIM_BVH_DATA__MU__empty_ctor__582fcbee75bf68906e32259bd7cd2513";

/// \dfgPresetOmit
GIM_BVH_DATA(
    GIM_BVH_DATA that
    ) = "Bullet2__GIM_BVH_DATA__MU__copy_ctor__11f22c000f15c36507c4d089ddee7e46";

GIM_BVH_DATA.cxx_delete() = "Bullet2__GIM_BVH_DATA__MU__delete__f6aaf1e803ecdaba126fcbd7eadc3fb9";

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA] EDK[Fabric_EDK_KL_GIM_BVH_DATA] LIB[GIM_BVH_DATA *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA] EDK[Fabric_EDK_KL_GIM_BVH_DATA] LIB[GIM_BVH_DATA *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA] EDK[Fabric_EDK_KL_GIM_BVH_DATA] LIB[GIM_BVH_DATA *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

GIM_BVH_DATA.=(
    GIM_BVH_DATA that
    ) = "Bullet2__GIM_BVH_DATA__MU__simple_ass_op__ab7082495a2849dc5068af0ac6250596";


/// \dfgPresetOmit
/// \internal
GIM_BVH_DATA.appendDesc(io String string) {
  string += "GIM_BVH_DATA:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
GIM_BVH_TREE_NODE(
    GIM_BVH_TREE_NODE that
    ) = "Bullet2__GIM_BVH_TREE_NODE__MU__copy_ctor__b2a0afec52405a9840ad40603430758e";

/// \dfgPresetOmit
/// \internal
GIM_BVH_TREE_NODE.__ctor(
    ) = "Bullet2__GIM_BVH_TREE_NODE__MU__ctor__ed4091aad262f69a8c46cfba65b006ad";

/// \dfgPresetOmit
GIM_BVH_TREE_NODE(
    ) {
    this.__ctor(
        );
}

GIM_BVH_TREE_NODE.cxx_delete() = "Bullet2__GIM_BVH_TREE_NODE__MU__delete__0edb08e5d19204146dafd69bbaf8ea4c";

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
GIM_BVH_TREE_NODE.cxx_isLeafNode?(
    )
 = "Bullet2__GIM_BVH_TREE_NODE__CO__meth_isLeafNode__9b26e21b6a2e5731d9d5e7849cfc9fb0";

/// \dfgPresetOmit
/// \internal
SInt32
GIM_BVH_TREE_NODE.cxx_getEscapeIndex?(
    )
 = "Bullet2__GIM_BVH_TREE_NODE__CO__meth_getEscapeIndex__89b334a18545e80ad1da06873721abb2";

/// \dfgPresetOmit
/// \internal

GIM_BVH_TREE_NODE.cxx_setEscapeIndex!(
    SInt32 index
    )
 = "Bullet2__GIM_BVH_TREE_NODE__MU__meth_setEscapeIndex__2dc10a364cf7bb6c86af39a7bbf3abc4";

/// \dfgPresetOmit
/// \internal
SInt32
GIM_BVH_TREE_NODE.cxx_getDataIndex?(
    )
 = "Bullet2__GIM_BVH_TREE_NODE__CO__meth_getDataIndex__ffec12d8d577cca76e7a427de728890b";

/// \dfgPresetOmit
/// \internal

GIM_BVH_TREE_NODE.cxx_setDataIndex!(
    SInt32 index
    )
 = "Bullet2__GIM_BVH_TREE_NODE__MU__meth_setDataIndex__d8e26908db86c10d3ef5498fa551825b";


GIM_BVH_TREE_NODE.setEscapeIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setEscapeIndex(
        index
        );
    
    
    
}


GIM_BVH_TREE_NODE.setDataIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setDataIndex(
        index
        );
    
    
    
}

Boolean
GIM_BVH_TREE_NODE.isLeafNode?(
    )
{   
    Boolean __res = 
    this.cxx_isLeafNode(
        );
    
    return __res;
}

SInt32
GIM_BVH_TREE_NODE.getEscapeIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getEscapeIndex(
        );
    
    return __res;
}

SInt32
GIM_BVH_TREE_NODE.getDataIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getDataIndex(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE] LIB[GIM_BVH_TREE_NODE *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

GIM_BVH_TREE_NODE.=(
    GIM_BVH_TREE_NODE that
    ) = "Bullet2__GIM_BVH_TREE_NODE__MU__simple_ass_op__c404765ebfb0429133cc5e5bf18aab86";


/// \dfgPresetOmit
/// \internal
GIM_BVH_TREE_NODE.appendDesc(io String string) {
  string += "GIM_BVH_TREE_NODE:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_DATA_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_DATA_ARRAY] LIB[GIM_BVH_DATA_ARRAY *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_DATA_ARRAY] LIB[GIM_BVH_DATA_ARRAY *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_DATA_ARRAY] LIB[GIM_BVH_DATA_ARRAY *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

GIM_BVH_DATA_ARRAY() = "Bullet2__GIM_BVH_DATA_ARRAY__MU__empty_ctor__116bd5eae0f206dbc420129f517e6d61";

/// \dfgPresetOmit
GIM_BVH_DATA_ARRAY(
    GIM_BVH_DATA_ARRAY that
    ) = "Bullet2__GIM_BVH_DATA_ARRAY__MU__copy_ctor__ff61efc8434e6ff89b81893132090edf";

GIM_BVH_DATA_ARRAY.cxx_delete() = "Bullet2__GIM_BVH_DATA_ARRAY__MU__delete__41771736043d76d2f190653d582b3d0d";

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_DATA_ARRAY] LIB[GIM_BVH_DATA_ARRAY *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_DATA_ARRAY] LIB[GIM_BVH_DATA_ARRAY *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_DATA_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_DATA_ARRAY] LIB[GIM_BVH_DATA_ARRAY *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

GIM_BVH_DATA_ARRAY.=(
    GIM_BVH_DATA_ARRAY that
    ) = "Bullet2__GIM_BVH_DATA_ARRAY__MU__simple_ass_op__ecb0e6b9c92f4a3e8eca8ee8ee0cd589";


/// \dfgPresetOmit
/// \internal
GIM_BVH_DATA_ARRAY.appendDesc(io String string) {
  string += "GIM_BVH_DATA_ARRAY:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_BVH_TREE_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY] LIB[GIM_BVH_TREE_NODE_ARRAY *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY] LIB[GIM_BVH_TREE_NODE_ARRAY *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY] LIB[GIM_BVH_TREE_NODE_ARRAY *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

GIM_BVH_TREE_NODE_ARRAY() = "Bullet2__GIM_BVH_TREE_NODE_ARRAY__MU__empty_ctor__0756e95162dd24bf30b4da8b6a53b78c";

/// \dfgPresetOmit
GIM_BVH_TREE_NODE_ARRAY(
    GIM_BVH_TREE_NODE_ARRAY that
    ) = "Bullet2__GIM_BVH_TREE_NODE_ARRAY__MU__copy_ctor__578e7b6f7d0461f4c7e90b85c7a5835f";

GIM_BVH_TREE_NODE_ARRAY.cxx_delete() = "Bullet2__GIM_BVH_TREE_NODE_ARRAY__MU__delete__faf495218df16fc8caeee3bfedbbc68d";

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY] LIB[GIM_BVH_TREE_NODE_ARRAY *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY] LIB[GIM_BVH_TREE_NODE_ARRAY *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_BVH_TREE_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_BVH_TREE_NODE_ARRAY] LIB[GIM_BVH_TREE_NODE_ARRAY *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

GIM_BVH_TREE_NODE_ARRAY.=(
    GIM_BVH_TREE_NODE_ARRAY that
    ) = "Bullet2__GIM_BVH_TREE_NODE_ARRAY__MU__simple_ass_op__62ce8a42fd3657641e30ff16cd439f3e";


/// \dfgPresetOmit
/// \internal
GIM_BVH_TREE_NODE_ARRAY.appendDesc(io String string) {
  string += "GIM_BVH_TREE_NODE_ARRAY:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btBvhTree(
    btBvhTree that
    ) = "Bullet2__btBvhTree__MU__copy_ctor__9afa8b9e002990549d35f4259165beb7";

/// \dfgPresetOmit
/// \internal
btBvhTree.__ctor(
    ) = "Bullet2__btBvhTree__MU__ctor__993282eae589b6088c28a67bc6b33d84";

/// \dfgPresetOmit
btBvhTree(
    ) {
    this.__ctor(
        );
}

btBvhTree.cxx_delete() = "Bullet2__btBvhTree__MU__delete__64022a89b2b6f76573f845bd0f547787";

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! prototype functions for box tree management
//!@{
/// \dfgPresetOmit
/// \internal

btBvhTree.cxx_build_tree!(
    GIM_BVH_DATA_ARRAY primitive_boxes
    )
 = "Bullet2__btBvhTree__MU__meth_build_tree__62ae58a23d3b2e1f0bbde3c4a00b2cfa";

/// \dfgPresetOmit
/// \internal

btBvhTree.cxx_clearNodes!(
    )
 = "Bullet2__btBvhTree__MU__meth_clearNodes__1b2d89e10f8fbf16b8d4d1cef30a8f20";

//! node count
/// \dfgPresetOmit
/// \internal
SInt32
btBvhTree.cxx_getNodeCount?(
    )
 = "Bullet2__btBvhTree__CO__meth_getNodeCount__9b2bba40ffb2254be2df1e3d579d05de";

//! tells if the node is a leaf
/// \dfgPresetOmit
/// \internal
Boolean
btBvhTree.cxx_isLeafNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btBvhTree__CO__meth_isLeafNode__748876bd7221d14a0218d5dccd7816c0";

/// \dfgPresetOmit
/// \internal
SInt32
btBvhTree.cxx_getNodeData?(
    SInt32 nodeindex
    )
 = "Bullet2__btBvhTree__CO__meth_getNodeData__d01c789e8e0a26129cf3ea0448214701";

/// \dfgPresetOmit
/// \internal

btBvhTree.cxx_getNodeBound?(
    SInt32 nodeindex,
    CxxbtAABBRef bound
    )
 = "Bullet2__btBvhTree__CO__meth_getNodeBound__572ef8d074bf9452893f48f3a5c8ad91";

/// \dfgPresetOmit
/// \internal

btBvhTree.cxx_setNodeBound!(
    SInt32 nodeindex,
    CxxbtAABBConstRef bound
    )
 = "Bullet2__btBvhTree__MU__meth_setNodeBound__f2c03260112ba17ea704a1242f4e9420";

/// \dfgPresetOmit
/// \internal
SInt32
btBvhTree.cxx_getLeftNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btBvhTree__CO__meth_getLeftNode__21b1d87a209d1462b54f0251ab1cbb91";

/// \dfgPresetOmit
/// \internal
SInt32
btBvhTree.cxx_getRightNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btBvhTree__CO__meth_getRightNode__0aea6feb7e9b956dcc182de706a6ea9a";

/// \dfgPresetOmit
/// \internal
SInt32
btBvhTree.cxx_getEscapeNodeIndex?(
    SInt32 nodeindex
    )
 = "Bullet2__btBvhTree__CO__meth_getEscapeNodeIndex__fa7578ac0e27531ca97b4aaf166d55c2";

/// \dfgPresetOmit
/// \internal
GIM_BVH_TREE_NODE
btBvhTree.cxx_get_node_pointer?(
    )
 = "Bullet2__btBvhTree__CO__meth_get_node_pointer__6039d7f549583572f827f261ec5a864f";

/// \dfgPresetOmit
/// \internal
GIM_BVH_TREE_NODE
btBvhTree.cxx_get_node_pointer?(
    SInt32 index
    )
 = "Bullet2__btBvhTree__CO__meth_get_node_pointer__973dd9d47fa2a5daade9a9aea3994c2e";

SInt32
btBvhTree.getRightNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getRightNode(
        nodeindex
        );
    
    
    return __res;
}


btBvhTree.getNodeBound?(
    in
    SInt32
    nodeindex
    
    ,
    io
    btAABB
    bound
    
    
    )
{   
    
    
    CxxbtAABBRef bound__cxx = Make_CxxbtAABBRef(bound);
    
    this.cxx_getNodeBound(
        nodeindex,
        bound__cxx
        );
    
    
    
    
}

//! prototype functions for box tree management
//!@{

btBvhTree.build_tree!(
    in
    GIM_BVH_DATA_ARRAY
    primitive_boxes
    
    
    )
{   
    
    
    this.cxx_build_tree(
        primitive_boxes
        );
    
    
    
}

SInt32
btBvhTree.getLeftNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getLeftNode(
        nodeindex
        );
    
    
    return __res;
}

SInt32
btBvhTree.getEscapeNodeIndex?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getEscapeNodeIndex(
        nodeindex
        );
    
    
    return __res;
}

GIM_BVH_TREE_NODE
btBvhTree.get_node_pointer?(
    )
{   
    GIM_BVH_TREE_NODE __res = 
    this.cxx_get_node_pointer(
        );
    
    return __res;
}

//! node count
SInt32
btBvhTree.getNodeCount?(
    )
{   
    SInt32 __res = 
    this.cxx_getNodeCount(
        );
    
    return __res;
}


btBvhTree.clearNodes!(
    )
{   
    
    this.cxx_clearNodes(
        );
    
    
}

SInt32
btBvhTree.getNodeData?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getNodeData(
        nodeindex
        );
    
    
    return __res;
}


btBvhTree.setNodeBound!(
    in
    SInt32
    nodeindex
    
    ,
    in
    btAABB
    bound
    
    
    )
{   
    
    
    CxxbtAABBConstRef bound__cxx = Make_CxxbtAABBConstRef(bound);
    
    this.cxx_setNodeBound(
        nodeindex,
        bound__cxx
        );
    
    
    
    
}

//! tells if the node is a leaf
Boolean
btBvhTree.isLeafNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isLeafNode(
        nodeindex
        );
    
    
    return __res;
}

GIM_BVH_TREE_NODE
btBvhTree.get_node_pointer?(
    in
    SInt32
    index
    
    
    )
{   
    
    GIM_BVH_TREE_NODE __res = 
    this.cxx_get_node_pointer(
        index
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btBvhTree] EDK[Fabric_EDK_KL_btBvhTree] LIB[btBvhTree *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btBvhTree.=(
    btBvhTree that
    ) = "Bullet2__btBvhTree__MU__simple_ass_op__05d1da4b0484434393bd6434500d2166";


/// \dfgPresetOmit
/// \internal
btBvhTree.appendDesc(io String string) {
  string += "btBvhTree:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btPrimitiveManagerBase() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btPrimitiveManagerBase(
    btPrimitiveManagerBase that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btPrimitiveManagerBase.cxx_delete() = "Bullet2__btPrimitiveManagerBase__MU__delete__0079a753ec5c0392fd361e1615138e9e";

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! determines if this manager consist on only triangles, which special case will be optimized
/// \dfgPresetOmit
/// \internal
Boolean
btPrimitiveManagerBase.cxx_is_trimesh?(
    )
 = "Bullet2__btPrimitiveManagerBase__CO__meth_is_trimesh__d4fbd5fabe93b23f051cfc948534fd20";

/// \dfgPresetOmit
/// \internal
SInt32
btPrimitiveManagerBase.cxx_get_primitive_count?(
    )
 = "Bullet2__btPrimitiveManagerBase__CO__meth_get_primitive_count__b55396371dc9585657a4d30533edaef2";

/// \dfgPresetOmit
/// \internal

btPrimitiveManagerBase.cxx_get_primitive_box?(
    SInt32 prim_index,
    CxxbtAABBRef primbox
    )
 = "Bullet2__btPrimitiveManagerBase__CO__meth_get_primitive_box__471a4b795fe3ae3a5e90e58ba206b592";

//! retrieves only the points of the triangle, and the collision margin
/// \dfgPresetOmit
/// \internal

btPrimitiveManagerBase.cxx_get_primitive_triangle?(
    SInt32 prim_index,
    btPrimitiveTriangle triangle
    )
 = "Bullet2__btPrimitiveManagerBase__CO__meth_get_primitive_triangle__1018b55d46d0803557f444f726a17141";

//! retrieves only the points of the triangle, and the collision margin

btPrimitiveManagerBase.get_primitive_triangle?(
    in
    SInt32
    prim_index
    
    ,
    in
    btPrimitiveTriangle
    triangle
    
    
    )
{   
    
    
    
    this.cxx_get_primitive_triangle(
        prim_index,
        triangle
        );
    
    
    
    
}

//! determines if this manager consist on only triangles, which special case will be optimized
Boolean
btPrimitiveManagerBase.is_trimesh?(
    )
{   
    Boolean __res = 
    this.cxx_is_trimesh(
        );
    
    return __res;
}

SInt32
btPrimitiveManagerBase.get_primitive_count?(
    )
{   
    SInt32 __res = 
    this.cxx_get_primitive_count(
        );
    
    return __res;
}


btPrimitiveManagerBase.get_primitive_box?(
    in
    SInt32
    prim_index
    
    ,
    io
    btAABB
    primbox
    
    
    )
{   
    
    
    CxxbtAABBRef primbox__cxx = Make_CxxbtAABBRef(primbox);
    
    this.cxx_get_primitive_box(
        prim_index,
        primbox__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveManagerBase] EDK[Fabric_EDK_KL_btPrimitiveManagerBase] LIB[btPrimitiveManagerBase *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPrimitiveManagerBase.=(
    btPrimitiveManagerBase that
    ) = "Bullet2__btPrimitiveManagerBase__MU__simple_ass_op__021265922525fcf79ee9633787bcce9f";


/// \dfgPresetOmit
/// \internal
btPrimitiveManagerBase.appendDesc(io String string) {
  string += "btPrimitiveManagerBase:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btGImpactBvh(
    btGImpactBvh that
    ) = "Bullet2__btGImpactBvh__MU__copy_ctor__c2475b1c5bc3c202107fb98433a938fd";

/// \dfgPresetOmit
/// \internal
btGImpactBvh.__ctor(
    ) = "Bullet2__btGImpactBvh__MU__ctor__3340dd88db2e36c68a5aa338c613ed10";

//! this constructor doesn't build the tree. you must call	buildSet
/// \dfgPresetOmit
btGImpactBvh(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btGImpactBvh.__ctor(
    btPrimitiveManagerBase primitive_manager
    ) = "Bullet2__btGImpactBvh__MU__ctor__1dab49ff37dbbbcf28a2e8f1f4afda1f";

//! this constructor doesn't build the tree. you must call	buildSet
/// \dfgPresetOmit
btGImpactBvh(
    btPrimitiveManagerBase primitive_manager
    ) {
    this.__ctor(
        primitive_manager
        );
}

btGImpactBvh.cxx_delete() = "Bullet2__btGImpactBvh__MU__delete__27bb6674679e1ca58440fd57c0604685";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btAABB
btGImpactBvh.cxx_getGlobalBox?(
    )
 = "Bullet2__btGImpactBvh__CO__meth_getGlobalBox__d4460a17ff7c720c6d31ed1ef55a4551";

/// \dfgPresetOmit
/// \internal

btGImpactBvh.cxx_setPrimitiveManager!(
    btPrimitiveManagerBase primitive_manager
    )
 = "Bullet2__btGImpactBvh__MU__meth_setPrimitiveManager__293f405ac2b63d9b5efc1b1d5d3a130b";

/// \dfgPresetOmit
/// \internal
btPrimitiveManagerBase
btGImpactBvh.cxx_getPrimitiveManager?(
    )
 = "Bullet2__btGImpactBvh__CO__meth_getPrimitiveManager__be51e2258ab6d4d1cb626fe961e74d30";

//! this attemps to refit the box set.
/// \dfgPresetOmit
/// \internal

btGImpactBvh.cxx_update!(
    )
 = "Bullet2__btGImpactBvh__MU__meth_update__27421e1abe7663fad827c46db079d176";

//! this rebuild the entire set
/// \dfgPresetOmit
/// \internal

btGImpactBvh.cxx_buildSet!(
    )
 = "Bullet2__btGImpactBvh__MU__meth_buildSet__6f3d9adc1c452f7839be685617377fe4";

//! returns the indices of the primitives in the m_primitive_manager
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactBvh.cxx_boxQuery?(
    CxxbtAABBConstRef box,
    CxxbtAlignedObjectArray_SInt32Ref collided_results
    )
 = "Bullet2__btGImpactBvh__CO__meth_boxQuery__30ad03cd2dbbc3b8e745d8ade98f5958";

//! returns the indices of the primitives in the m_primitive_manager
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactBvh.cxx_boxQueryTrans?(
    CxxbtAABBConstRef box,
    CxxbtTransformConstRef transform,
    CxxbtAlignedObjectArray_SInt32Ref collided_results
    )
 = "Bullet2__btGImpactBvh__CO__meth_boxQueryTrans__fceef809304005c73354bb40e4c083cd";

//! returns the indices of the primitives in the m_primitive_manager
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactBvh.cxx_rayQuery?(
    CxxbtVector3ConstRef ray_dir,
    CxxbtVector3ConstRef ray_origin,
    CxxbtAlignedObjectArray_SInt32Ref collided_results
    )
 = "Bullet2__btGImpactBvh__CO__meth_rayQuery__de6ef73c03e89c7c87838ea878002a8a";

//! tells if this set has hierarcht
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactBvh.cxx_hasHierarchy?(
    )
 = "Bullet2__btGImpactBvh__CO__meth_hasHierarchy__33e707d6dc4bc126b2b0f4b0b775a121";

//! tells if this set is a trimesh
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactBvh.cxx_isTrimesh?(
    )
 = "Bullet2__btGImpactBvh__CO__meth_isTrimesh__212aa54d62a9ca099f8094c58833a79f";

//! node count
/// \dfgPresetOmit
/// \internal
SInt32
btGImpactBvh.cxx_getNodeCount?(
    )
 = "Bullet2__btGImpactBvh__CO__meth_getNodeCount__aed075fd1bcffdda778435f7cb26e053";

//! tells if the node is a leaf
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactBvh.cxx_isLeafNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactBvh__CO__meth_isLeafNode__ff9e8f0fc122e12f9c275cacb6b75b3f";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactBvh.cxx_getNodeData?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactBvh__CO__meth_getNodeData__e89bae4c5c8029f86aa96f33cf42a4b1";

/// \dfgPresetOmit
/// \internal

btGImpactBvh.cxx_getNodeBound?(
    SInt32 nodeindex,
    CxxbtAABBRef bound
    )
 = "Bullet2__btGImpactBvh__CO__meth_getNodeBound__e6aae6745bb5b0743be8337cc310bff1";

/// \dfgPresetOmit
/// \internal

btGImpactBvh.cxx_setNodeBound!(
    SInt32 nodeindex,
    CxxbtAABBConstRef bound
    )
 = "Bullet2__btGImpactBvh__MU__meth_setNodeBound__317b85c5820b2539a3a15504d10d9e8c";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactBvh.cxx_getLeftNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactBvh__CO__meth_getLeftNode__68f29bf5467d70f9e8c5b801f2ad9b9b";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactBvh.cxx_getRightNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactBvh__CO__meth_getRightNode__f70d79bdd6a3cd40a4c6a4ca9e4bf6b2";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactBvh.cxx_getEscapeNodeIndex?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactBvh__CO__meth_getEscapeNodeIndex__1175b578481650e3bd5e33a15d7ce7be";

/// \dfgPresetOmit
/// \internal

btGImpactBvh.cxx_getNodeTriangle?(
    SInt32 nodeindex,
    btPrimitiveTriangle triangle
    )
 = "Bullet2__btGImpactBvh__CO__meth_getNodeTriangle__b9dca628e9250e4f8d76188c4c0e4e31";

/// \dfgPresetOmit
/// \internal
GIM_BVH_TREE_NODE
btGImpactBvh.cxx_get_node_pointer?(
    )
 = "Bullet2__btGImpactBvh__CO__meth_get_node_pointer__f63c04371d7c641110448de86e99b4a5";

/// \dfgPresetOmit
/// \internal
GIM_BVH_TREE_NODE
btGImpactBvh.cxx_get_node_pointer?(
    SInt32 index
    )
 = "Bullet2__btGImpactBvh__CO__meth_get_node_pointer__9e02af01e523fd9fd4bdccb09c35f1f8";

/// \dfgPresetOmit
/// \internal

btGImpactBvh_Cxxfind_collision(
    btGImpactBvh boxset1,
    CxxbtTransformConstRef trans1,
    btGImpactBvh boxset2,
    CxxbtTransformConstRef trans2,
    btPairSet collision_pairs
    )
 = "Bullet2__btGImpactBvh__ST__meth_find_collision__1543540009e43287b58f67385a4c68b4";

//! tells if the node is a leaf
Boolean
btGImpactBvh.isLeafNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isLeafNode(
        nodeindex
        );
    
    
    return __res;
}

SInt32
btGImpactBvh.getLeftNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getLeftNode(
        nodeindex
        );
    
    
    return __res;
}

//! this attemps to refit the box set.

btGImpactBvh.update!(
    )
{   
    
    this.cxx_update(
        );
    
    
}

SInt32
btGImpactBvh.getEscapeNodeIndex?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getEscapeNodeIndex(
        nodeindex
        );
    
    
    return __res;
}

SInt32
btGImpactBvh.getNodeData?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getNodeData(
        nodeindex
        );
    
    
    return __res;
}

//! returns the indices of the primitives in the m_primitive_manager
Boolean
btGImpactBvh.boxQuery?(
    in
    btAABB
    box
    
    ,
    io
    btAlignedObjectArray_SInt32
    collided_results
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtAlignedObjectArray_SInt32Ref collided_results__cxx = Make_CxxbtAlignedObjectArray_SInt32Ref(collided_results);
    Boolean __res = 
    this.cxx_boxQuery(
        box__cxx,
        collided_results__cxx
        );
    
    
    
    return __res;
}

//! tells if this set is a trimesh
Boolean
btGImpactBvh.isTrimesh?(
    )
{   
    Boolean __res = 
    this.cxx_isTrimesh(
        );
    
    return __res;
}

//! this rebuild the entire set

btGImpactBvh.buildSet!(
    )
{   
    
    this.cxx_buildSet(
        );
    
    
}


btGImpactBvh.setPrimitiveManager!(
    in
    btPrimitiveManagerBase
    primitive_manager
    
    
    )
{   
    
    
    this.cxx_setPrimitiveManager(
        primitive_manager
        );
    
    
    
}

GIM_BVH_TREE_NODE
btGImpactBvh.get_node_pointer?(
    in
    SInt32
    index
    
    
    )
{   
    
    GIM_BVH_TREE_NODE __res = 
    this.cxx_get_node_pointer(
        index
        );
    
    
    return __res;
}


btGImpactBvh.getNodeTriangle?(
    in
    SInt32
    nodeindex
    
    ,
    in
    btPrimitiveTriangle
    triangle
    
    
    )
{   
    
    
    
    this.cxx_getNodeTriangle(
        nodeindex,
        triangle
        );
    
    
    
    
}

btPrimitiveManagerBase
btGImpactBvh.getPrimitiveManager?(
    )
{   
    btPrimitiveManagerBase __res = 
    this.cxx_getPrimitiveManager(
        );
    
    return __res;
}

//! node count
SInt32
btGImpactBvh.getNodeCount?(
    )
{   
    SInt32 __res = 
    this.cxx_getNodeCount(
        );
    
    return __res;
}


btGImpactBvh.setNodeBound!(
    in
    SInt32
    nodeindex
    
    ,
    in
    btAABB
    bound
    
    
    )
{   
    
    
    CxxbtAABBConstRef bound__cxx = Make_CxxbtAABBConstRef(bound);
    
    this.cxx_setNodeBound(
        nodeindex,
        bound__cxx
        );
    
    
    
    
}


btGImpactBvh.getNodeBound?(
    in
    SInt32
    nodeindex
    
    ,
    io
    btAABB
    bound
    
    
    )
{   
    
    
    CxxbtAABBRef bound__cxx = Make_CxxbtAABBRef(bound);
    
    this.cxx_getNodeBound(
        nodeindex,
        bound__cxx
        );
    
    
    
    
}

//! returns the indices of the primitives in the m_primitive_manager
Boolean
btGImpactBvh.rayQuery?(
    in
    btVector3
    ray_dir
    
    ,
    in
    btVector3
    ray_origin
    
    ,
    io
    btAlignedObjectArray_SInt32
    collided_results
    
    
    )
{   
    
    CxxbtVector3ConstRef ray_dir__cxx = Make_CxxbtVector3ConstRef(ray_dir);
    
    CxxbtVector3ConstRef ray_origin__cxx = Make_CxxbtVector3ConstRef(ray_origin);
    
    CxxbtAlignedObjectArray_SInt32Ref collided_results__cxx = Make_CxxbtAlignedObjectArray_SInt32Ref(collided_results);
    Boolean __res = 
    this.cxx_rayQuery(
        ray_dir__cxx,
        ray_origin__cxx,
        collided_results__cxx
        );
    
    
    
    
    return __res;
}


btGImpactBvh_find_collision(
    in
    btGImpactBvh
    boxset1
    
    ,
    in
    btTransform
    trans1
    
    ,
    in
    btGImpactBvh
    boxset2
    
    ,
    in
    btTransform
    trans2
    
    ,
    in
    btPairSet
    collision_pairs
    
    
    )
{   
    
    
    CxxbtTransformConstRef trans1__cxx = Make_CxxbtTransformConstRef(trans1);
    
    
    CxxbtTransformConstRef trans2__cxx = Make_CxxbtTransformConstRef(trans2);
    
    
    btGImpactBvh_Cxxfind_collision(
        boxset1,
        trans1__cxx,
        boxset2,
        trans2__cxx,
        collision_pairs
        );
    
    
    
    
    
    
    
}

//! returns the indices of the primitives in the m_primitive_manager
Boolean
btGImpactBvh.boxQueryTrans?(
    in
    btAABB
    box
    
    ,
    in
    btTransform
    transform
    
    ,
    io
    btAlignedObjectArray_SInt32
    collided_results
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtTransformConstRef transform__cxx = Make_CxxbtTransformConstRef(transform);
    
    CxxbtAlignedObjectArray_SInt32Ref collided_results__cxx = Make_CxxbtAlignedObjectArray_SInt32Ref(collided_results);
    Boolean __res = 
    this.cxx_boxQueryTrans(
        box__cxx,
        transform__cxx,
        collided_results__cxx
        );
    
    
    
    
    return __res;
}

SInt32
btGImpactBvh.getRightNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getRightNode(
        nodeindex
        );
    
    
    return __res;
}

btAABB
btGImpactBvh.getGlobalBox?(
    )
{   
    btAABB __res = 
    this.cxx_getGlobalBox(
        );
    
    return __res;
}

//! tells if this set has hierarcht
Boolean
btGImpactBvh.hasHierarchy?(
    )
{   
    Boolean __res = 
    this.cxx_hasHierarchy(
        );
    
    return __res;
}

GIM_BVH_TREE_NODE
btGImpactBvh.get_node_pointer?(
    )
{   
    GIM_BVH_TREE_NODE __res = 
    this.cxx_get_node_pointer(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactBvh] EDK[Fabric_EDK_KL_btGImpactBvh] LIB[btGImpactBvh *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactBvh.=(
    btGImpactBvh that
    ) = "Bullet2__btGImpactBvh__MU__simple_ass_op__e257ecb30b332744d99d149fc6c64bd0";


/// \dfgPresetOmit
/// \internal
btGImpactBvh.appendDesc(io String string) {
  string += "btGImpactBvh:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGImpactCollisionAlgorithm() = "Bullet2__btGImpactCollisionAlgorithm__MU__empty_ctor__08bb317299ad1f63044c5723079d98db";

/// \dfgPresetOmit
btGImpactCollisionAlgorithm(
    btGImpactCollisionAlgorithm that
    ) = "Bullet2__btGImpactCollisionAlgorithm__MU__copy_ctor__b4ba521d2aee4c53f1080e299e3ec03b";

btGImpactCollisionAlgorithm.cxx_delete() = "Bullet2__btGImpactCollisionAlgorithm__MU__delete__8b04309e633cd63f02c24a501b538a81";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btGImpactCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_calculateTimeOfImpact__3eba8d3bc5ba3f407d736860d56e97e9";

/// \dfgPresetOmit
/// \internal
btManifoldResult
btGImpactCollisionAlgorithm.cxx_internalGetResultOut!(
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_internalGetResultOut__6864f97a2251c11635d991ff1122a32d";

//! Use this function for register the algorithm externally
/// \dfgPresetOmit
/// \internal

btGImpactCollisionAlgorithm_CxxregisterAlgorithm(
    btCollisionDispatcher dispatcher
    )
 = "Bullet2__btGImpactCollisionAlgorithm__ST__meth_registerAlgorithm__1028b5d312a1d6ef46be44413b99d752";

/// Accessor/Mutator pairs for Part and triangleID
/// \dfgPresetOmit
/// \internal

btGImpactCollisionAlgorithm.cxx_setFace0!(
    SInt32 value
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_setFace0__ab49be32a577472aa43309707bd6b80b";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactCollisionAlgorithm.cxx_getFace0!(
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_getFace0__b26af4bbda0d45cdbd847fc9978899d9";

/// \dfgPresetOmit
/// \internal

btGImpactCollisionAlgorithm.cxx_setFace1!(
    SInt32 value
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_setFace1__457fd33e25880143ab5c899aa11a6ad2";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactCollisionAlgorithm.cxx_getFace1!(
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_getFace1__cf21e2ec28c28ea0dacf43170b80c93d";

/// \dfgPresetOmit
/// \internal

btGImpactCollisionAlgorithm.cxx_setPart0!(
    SInt32 value
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_setPart0__a63f9257bd889b81f466589096225778";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactCollisionAlgorithm.cxx_getPart0!(
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_getPart0__b3d2e207fc9bdfc8281753d875cdeb98";

/// \dfgPresetOmit
/// \internal

btGImpactCollisionAlgorithm.cxx_setPart1!(
    SInt32 value
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_setPart1__793318c67935b0e0f13b4baa90f0a6de";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactCollisionAlgorithm.cxx_getPart1!(
    )
 = "Bullet2__btGImpactCollisionAlgorithm__MU__meth_getPart1__e6e31e05c8eff20b0df4dfefa898e543";

SInt32
btGImpactCollisionAlgorithm.getPart0!(
    )
{   
    SInt32 __res = 
    this.cxx_getPart0(
        );
    
    return __res;
}


btGImpactCollisionAlgorithm.setPart0!(
    in
    SInt32
    value
    
    
    )
{   
    
    
    this.cxx_setPart0(
        value
        );
    
    
    
}


btGImpactCollisionAlgorithm.setPart1!(
    in
    SInt32
    value
    
    
    )
{   
    
    
    this.cxx_setPart1(
        value
        );
    
    
    
}

/// Accessor/Mutator pairs for Part and triangleID

btGImpactCollisionAlgorithm.setFace0!(
    in
    SInt32
    value
    
    
    )
{   
    
    
    this.cxx_setFace0(
        value
        );
    
    
    
}


btGImpactCollisionAlgorithm.setFace1!(
    in
    SInt32
    value
    
    
    )
{   
    
    
    this.cxx_setFace1(
        value
        );
    
    
    
}

SInt32
btGImpactCollisionAlgorithm.getFace0!(
    )
{   
    SInt32 __res = 
    this.cxx_getFace0(
        );
    
    return __res;
}

Float32
btGImpactCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//! Use this function for register the algorithm externally

btGImpactCollisionAlgorithm_registerAlgorithm(
    in
    btCollisionDispatcher
    dispatcher
    
    
    )
{   
    
    
    btGImpactCollisionAlgorithm_CxxregisterAlgorithm(
        dispatcher
        );
    
    
    
}

SInt32
btGImpactCollisionAlgorithm.getPart1!(
    )
{   
    SInt32 __res = 
    this.cxx_getPart1(
        );
    
    return __res;
}

SInt32
btGImpactCollisionAlgorithm.getFace1!(
    )
{   
    SInt32 __res = 
    this.cxx_getFace1(
        );
    
    return __res;
}

btManifoldResult
btGImpactCollisionAlgorithm.internalGetResultOut!(
    )
{   
    btManifoldResult __res = 
    this.cxx_internalGetResultOut(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm] LIB[btGImpactCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactCollisionAlgorithm.=(
    btGImpactCollisionAlgorithm that
    ) = "Bullet2__btGImpactCollisionAlgorithm__MU__simple_ass_op__7da817790858ec796ca07e66ba009675";


/// \dfgPresetOmit
/// \internal
btGImpactCollisionAlgorithm.appendDesc(io String string) {
  string += "btGImpactCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc] LIB[btGImpactCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc] LIB[btGImpactCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc] LIB[btGImpactCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGImpactCollisionAlgorithm_CreateFunc() = "Bullet2__btGImpactCollisionAlgorithm_CreateFunc__MU__empty_ctor__47f2c8c772da143d5ef25e7cdcd6abc7";

/// \dfgPresetOmit
btGImpactCollisionAlgorithm_CreateFunc(
    btGImpactCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btGImpactCollisionAlgorithm_CreateFunc__MU__copy_ctor__c166b1389122dd23344db53dd9c38df2";

btGImpactCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btGImpactCollisionAlgorithm_CreateFunc__MU__delete__86d2cb57134153369c86b25abc98c3b6";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc] LIB[btGImpactCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc] LIB[btGImpactCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btGImpactCollisionAlgorithm_CreateFunc] LIB[btGImpactCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactCollisionAlgorithm_CreateFunc.=(
    btGImpactCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btGImpactCollisionAlgorithm_CreateFunc__MU__simple_ass_op__c3c9960bb0e0e36570429fb8f87b1ea1";


/// \dfgPresetOmit
/// \internal
btGImpactCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btGImpactCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
BT_QUANTIZED_BVH_NODE(
    BT_QUANTIZED_BVH_NODE that
    ) = "Bullet2__BT_QUANTIZED_BVH_NODE__MU__copy_ctor__0e7dd1632aebffba5b5b6cf891ab7d97";

/// \dfgPresetOmit
/// \internal
BT_QUANTIZED_BVH_NODE.__ctor(
    ) = "Bullet2__BT_QUANTIZED_BVH_NODE__MU__ctor__ce9e24358816c6c8e6fc29a12d6842d4";

/// \dfgPresetOmit
BT_QUANTIZED_BVH_NODE(
    ) {
    this.__ctor(
        );
}

BT_QUANTIZED_BVH_NODE.cxx_delete() = "Bullet2__BT_QUANTIZED_BVH_NODE__MU__delete__759c0ee558c8140a738f8b499e13a8fb";

//////////////////////////////////////////////////////////////////////////////
// KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
BT_QUANTIZED_BVH_NODE.cxx_isLeafNode?(
    )
 = "Bullet2__BT_QUANTIZED_BVH_NODE__CO__meth_isLeafNode__7f2d793e58d67dd11853361e87e03f0a";

/// \dfgPresetOmit
/// \internal
SInt32
BT_QUANTIZED_BVH_NODE.cxx_getEscapeIndex?(
    )
 = "Bullet2__BT_QUANTIZED_BVH_NODE__CO__meth_getEscapeIndex__e2047bca629a5e10e7fcf84f0abee013";

/// \dfgPresetOmit
/// \internal

BT_QUANTIZED_BVH_NODE.cxx_setEscapeIndex!(
    SInt32 index
    )
 = "Bullet2__BT_QUANTIZED_BVH_NODE__MU__meth_setEscapeIndex__0447a72b90a87599eb8ed7aaef65bd9b";

/// \dfgPresetOmit
/// \internal
SInt32
BT_QUANTIZED_BVH_NODE.cxx_getDataIndex?(
    )
 = "Bullet2__BT_QUANTIZED_BVH_NODE__CO__meth_getDataIndex__ba0aa4f147810a0da4e17edb402ef0d8";

/// \dfgPresetOmit
/// \internal

BT_QUANTIZED_BVH_NODE.cxx_setDataIndex!(
    SInt32 index
    )
 = "Bullet2__BT_QUANTIZED_BVH_NODE__MU__meth_setDataIndex__ee3662fb1169e8e1c674c9f8beb52cad";

/// \dfgPresetOmit
/// \internal
Boolean
BT_QUANTIZED_BVH_NODE.cxx_testQuantizedBoxOverlapp?(
    CxxUInt16Ptr quantizedMin,
    CxxUInt16Ptr quantizedMax
    )
 = "Bullet2__BT_QUANTIZED_BVH_NODE__CO__meth_testQuantizedBoxOverlapp__0908140edd87d4cb591e929f56b7aaf0";

SInt32
BT_QUANTIZED_BVH_NODE.getEscapeIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getEscapeIndex(
        );
    
    return __res;
}

Boolean
BT_QUANTIZED_BVH_NODE.isLeafNode?(
    )
{   
    Boolean __res = 
    this.cxx_isLeafNode(
        );
    
    return __res;
}

SInt32
BT_QUANTIZED_BVH_NODE.getDataIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getDataIndex(
        );
    
    return __res;
}


BT_QUANTIZED_BVH_NODE.setEscapeIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setEscapeIndex(
        index
        );
    
    
    
}


BT_QUANTIZED_BVH_NODE.setDataIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setDataIndex(
        index
        );
    
    
    
}

Boolean
BT_QUANTIZED_BVH_NODE.testQuantizedBoxOverlapp?(
    io
    UInt16
    quantizedMin
    
    ,
    io
    UInt16
    quantizedMax
    
    
    )
{   
    
    CxxUInt16Ptr quantizedMin__cxx = Make_CxxUInt16Ptr(quantizedMin);
    
    CxxUInt16Ptr quantizedMax__cxx = Make_CxxUInt16Ptr(quantizedMax);
    Boolean __res = 
    this.cxx_testQuantizedBoxOverlapp(
        quantizedMin__cxx,
        quantizedMax__cxx
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[BT_QUANTIZED_BVH_NODE] EDK[Fabric_EDK_KL_BT_QUANTIZED_BVH_NODE] LIB[BT_QUANTIZED_BVH_NODE *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

BT_QUANTIZED_BVH_NODE.=(
    BT_QUANTIZED_BVH_NODE that
    ) = "Bullet2__BT_QUANTIZED_BVH_NODE__MU__simple_ass_op__71b7788aa6b5f87d4bd58317eb29789c";


/// \dfgPresetOmit
/// \internal
BT_QUANTIZED_BVH_NODE.appendDesc(io String string) {
  string += "BT_QUANTIZED_BVH_NODE:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_QUANTIZED_BVH_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY] LIB[GIM_QUANTIZED_BVH_NODE_ARRAY *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_QUANTIZED_BVH_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY] LIB[GIM_QUANTIZED_BVH_NODE_ARRAY *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_QUANTIZED_BVH_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY] LIB[GIM_QUANTIZED_BVH_NODE_ARRAY *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

GIM_QUANTIZED_BVH_NODE_ARRAY() = "Bullet2__GIM_QUANTIZED_BVH_NODE_ARRAY__MU__empty_ctor__52c11bf7202f5a7f36798e97cec48a12";

/// \dfgPresetOmit
GIM_QUANTIZED_BVH_NODE_ARRAY(
    GIM_QUANTIZED_BVH_NODE_ARRAY that
    ) = "Bullet2__GIM_QUANTIZED_BVH_NODE_ARRAY__MU__copy_ctor__454ffe1040ee97840d18b0d3ea435c1d";

GIM_QUANTIZED_BVH_NODE_ARRAY.cxx_delete() = "Bullet2__GIM_QUANTIZED_BVH_NODE_ARRAY__MU__delete__d8f0d353ac0d36acc3b9419f10e14026";

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_QUANTIZED_BVH_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY] LIB[GIM_QUANTIZED_BVH_NODE_ARRAY *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_QUANTIZED_BVH_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY] LIB[GIM_QUANTIZED_BVH_NODE_ARRAY *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_QUANTIZED_BVH_NODE_ARRAY] EDK[Fabric_EDK_KL_GIM_QUANTIZED_BVH_NODE_ARRAY] LIB[GIM_QUANTIZED_BVH_NODE_ARRAY *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

GIM_QUANTIZED_BVH_NODE_ARRAY.=(
    GIM_QUANTIZED_BVH_NODE_ARRAY that
    ) = "Bullet2__GIM_QUANTIZED_BVH_NODE_ARRAY__MU__simple_ass_op__8435ed72b8bdb61d8273563ca49a392a";


/// \dfgPresetOmit
/// \internal
GIM_QUANTIZED_BVH_NODE_ARRAY.appendDesc(io String string) {
  string += "GIM_QUANTIZED_BVH_NODE_ARRAY:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btQuantizedBvhTree(
    btQuantizedBvhTree that
    ) = "Bullet2__btQuantizedBvhTree__MU__copy_ctor__2d8c2c686a80bacabf6092098e7aa379";

/// \dfgPresetOmit
/// \internal
btQuantizedBvhTree.__ctor(
    ) = "Bullet2__btQuantizedBvhTree__MU__ctor__a03cac00d49b2e141607eb9e72ee5abe";

/// \dfgPresetOmit
btQuantizedBvhTree(
    ) {
    this.__ctor(
        );
}

btQuantizedBvhTree.cxx_delete() = "Bullet2__btQuantizedBvhTree__MU__delete__3a99ddf4bed0de8f964436fe70d09ee6";

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! prototype functions for box tree management
//!@{
/// \dfgPresetOmit
/// \internal

btQuantizedBvhTree.cxx_build_tree!(
    GIM_BVH_DATA_ARRAY primitive_boxes
    )
 = "Bullet2__btQuantizedBvhTree__MU__meth_build_tree__e0c7a1d079494b93159bb22139068fb0";

/// \dfgPresetOmit
/// \internal

btQuantizedBvhTree.cxx_quantizePoint?(
    CxxUInt16Ptr quantizedpoint,
    CxxbtVector3ConstRef point
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_quantizePoint__e2440aa6192870f420bcdb1879d21e7f";

/// \dfgPresetOmit
/// \internal
Boolean
btQuantizedBvhTree.cxx_testQuantizedBoxOverlapp?(
    SInt32 node_index,
    CxxUInt16Ptr quantizedMin,
    CxxUInt16Ptr quantizedMax
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_testQuantizedBoxOverlapp__decd019831ff5b2d9034af40ae60ecc1";

/// \dfgPresetOmit
/// \internal

btQuantizedBvhTree.cxx_clearNodes!(
    )
 = "Bullet2__btQuantizedBvhTree__MU__meth_clearNodes__412f4f547b8c471c5dd48fada8f84f07";

//! node count
/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvhTree.cxx_getNodeCount?(
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_getNodeCount__5f6af9f4d30920cb526448b80020480a";

//! tells if the node is a leaf
/// \dfgPresetOmit
/// \internal
Boolean
btQuantizedBvhTree.cxx_isLeafNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_isLeafNode__cb4989ac2288ed33fd766e7e672837dc";

/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvhTree.cxx_getNodeData?(
    SInt32 nodeindex
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_getNodeData__3199a9caa3ee76248e7e287b20d4a337";

/// \dfgPresetOmit
/// \internal

btQuantizedBvhTree.cxx_getNodeBound?(
    SInt32 nodeindex,
    CxxbtAABBRef bound
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_getNodeBound__a2e1439df549ff215bb6d9ff54d5890a";

/// \dfgPresetOmit
/// \internal

btQuantizedBvhTree.cxx_setNodeBound!(
    SInt32 nodeindex,
    CxxbtAABBConstRef bound
    )
 = "Bullet2__btQuantizedBvhTree__MU__meth_setNodeBound__9b1aab7a22b60dc9a6a7a534b8c8b25e";

/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvhTree.cxx_getLeftNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_getLeftNode__d8a0fc15956d60c517a63da2ace112c8";

/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvhTree.cxx_getRightNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_getRightNode__a5429ce16606dc6c1f4e9ad1a338d12b";

/// \dfgPresetOmit
/// \internal
SInt32
btQuantizedBvhTree.cxx_getEscapeNodeIndex?(
    SInt32 nodeindex
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_getEscapeNodeIndex__c861b00e22fc3c05b7d667e79f8389d2";

/// \dfgPresetOmit
/// \internal
BT_QUANTIZED_BVH_NODE
btQuantizedBvhTree.cxx_get_node_pointer?(
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_get_node_pointer__f2558dd7030162b411df1c504e9a8649";

/// \dfgPresetOmit
/// \internal
BT_QUANTIZED_BVH_NODE
btQuantizedBvhTree.cxx_get_node_pointer?(
    SInt32 index
    )
 = "Bullet2__btQuantizedBvhTree__CO__meth_get_node_pointer__51b1f5f72a8be6fa795c5e5102e58a78";


btQuantizedBvhTree.quantizePoint?(
    io
    UInt16
    quantizedpoint
    
    ,
    in
    btVector3
    point
    
    
    )
{   
    
    CxxUInt16Ptr quantizedpoint__cxx = Make_CxxUInt16Ptr(quantizedpoint);
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    
    this.cxx_quantizePoint(
        quantizedpoint__cxx,
        point__cxx
        );
    
    
    
    
}

SInt32
btQuantizedBvhTree.getRightNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getRightNode(
        nodeindex
        );
    
    
    return __res;
}

//! prototype functions for box tree management
//!@{

btQuantizedBvhTree.build_tree!(
    in
    GIM_BVH_DATA_ARRAY
    primitive_boxes
    
    
    )
{   
    
    
    this.cxx_build_tree(
        primitive_boxes
        );
    
    
    
}

SInt32
btQuantizedBvhTree.getNodeData?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getNodeData(
        nodeindex
        );
    
    
    return __res;
}

//! tells if the node is a leaf
Boolean
btQuantizedBvhTree.isLeafNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isLeafNode(
        nodeindex
        );
    
    
    return __res;
}

SInt32
btQuantizedBvhTree.getEscapeNodeIndex?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getEscapeNodeIndex(
        nodeindex
        );
    
    
    return __res;
}

Boolean
btQuantizedBvhTree.testQuantizedBoxOverlapp?(
    in
    SInt32
    node_index
    
    ,
    io
    UInt16
    quantizedMin
    
    ,
    io
    UInt16
    quantizedMax
    
    
    )
{   
    
    
    CxxUInt16Ptr quantizedMin__cxx = Make_CxxUInt16Ptr(quantizedMin);
    
    CxxUInt16Ptr quantizedMax__cxx = Make_CxxUInt16Ptr(quantizedMax);
    Boolean __res = 
    this.cxx_testQuantizedBoxOverlapp(
        node_index,
        quantizedMin__cxx,
        quantizedMax__cxx
        );
    
    
    
    
    return __res;
}


btQuantizedBvhTree.setNodeBound!(
    in
    SInt32
    nodeindex
    
    ,
    in
    btAABB
    bound
    
    
    )
{   
    
    
    CxxbtAABBConstRef bound__cxx = Make_CxxbtAABBConstRef(bound);
    
    this.cxx_setNodeBound(
        nodeindex,
        bound__cxx
        );
    
    
    
    
}

SInt32
btQuantizedBvhTree.getLeftNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getLeftNode(
        nodeindex
        );
    
    
    return __res;
}

BT_QUANTIZED_BVH_NODE
btQuantizedBvhTree.get_node_pointer?(
    )
{   
    BT_QUANTIZED_BVH_NODE __res = 
    this.cxx_get_node_pointer(
        );
    
    return __res;
}

BT_QUANTIZED_BVH_NODE
btQuantizedBvhTree.get_node_pointer?(
    in
    SInt32
    index
    
    
    )
{   
    
    BT_QUANTIZED_BVH_NODE __res = 
    this.cxx_get_node_pointer(
        index
        );
    
    
    return __res;
}

//! node count
SInt32
btQuantizedBvhTree.getNodeCount?(
    )
{   
    SInt32 __res = 
    this.cxx_getNodeCount(
        );
    
    return __res;
}


btQuantizedBvhTree.clearNodes!(
    )
{   
    
    this.cxx_clearNodes(
        );
    
    
}


btQuantizedBvhTree.getNodeBound?(
    in
    SInt32
    nodeindex
    
    ,
    io
    btAABB
    bound
    
    
    )
{   
    
    
    CxxbtAABBRef bound__cxx = Make_CxxbtAABBRef(bound);
    
    this.cxx_getNodeBound(
        nodeindex,
        bound__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btQuantizedBvhTree] EDK[Fabric_EDK_KL_btQuantizedBvhTree] LIB[btQuantizedBvhTree *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btQuantizedBvhTree.=(
    btQuantizedBvhTree that
    ) = "Bullet2__btQuantizedBvhTree__MU__simple_ass_op__bd20ee7563853807dcfaaae6c60b75e4";


/// \dfgPresetOmit
/// \internal
btQuantizedBvhTree.appendDesc(io String string) {
  string += "btQuantizedBvhTree:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btGImpactQuantizedBvh(
    btGImpactQuantizedBvh that
    ) = "Bullet2__btGImpactQuantizedBvh__MU__copy_ctor__bad3a4bdedd978211d5901f228af8ebf";

/// \dfgPresetOmit
/// \internal
btGImpactQuantizedBvh.__ctor(
    ) = "Bullet2__btGImpactQuantizedBvh__MU__ctor__64bb897bbbfa7caf735e35fe74387cc9";

//! this constructor doesn't build the tree. you must call	buildSet
/// \dfgPresetOmit
btGImpactQuantizedBvh(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btGImpactQuantizedBvh.__ctor(
    btPrimitiveManagerBase primitive_manager
    ) = "Bullet2__btGImpactQuantizedBvh__MU__ctor__005669e670f01b1a791936499282ace6";

//! this constructor doesn't build the tree. you must call	buildSet
/// \dfgPresetOmit
btGImpactQuantizedBvh(
    btPrimitiveManagerBase primitive_manager
    ) {
    this.__ctor(
        primitive_manager
        );
}

btGImpactQuantizedBvh.cxx_delete() = "Bullet2__btGImpactQuantizedBvh__MU__delete__83a21faa468fc692c1f2e2b0ec007514";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btAABB
btGImpactQuantizedBvh.cxx_getGlobalBox?(
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getGlobalBox__fbd92aff0e124140b874c0d6313096c7";

/// \dfgPresetOmit
/// \internal

btGImpactQuantizedBvh.cxx_setPrimitiveManager!(
    btPrimitiveManagerBase primitive_manager
    )
 = "Bullet2__btGImpactQuantizedBvh__MU__meth_setPrimitiveManager__9a9e3d1c73a3e927a648b5a2c07f2fa9";

/// \dfgPresetOmit
/// \internal
btPrimitiveManagerBase
btGImpactQuantizedBvh.cxx_getPrimitiveManager?(
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getPrimitiveManager__6b1e8f815c15500862473744c393d185";

//! this attemps to refit the box set.
/// \dfgPresetOmit
/// \internal

btGImpactQuantizedBvh.cxx_update!(
    )
 = "Bullet2__btGImpactQuantizedBvh__MU__meth_update__8ae03f6e602ff8ebf1a297a73d34f216";

//! this rebuild the entire set
/// \dfgPresetOmit
/// \internal

btGImpactQuantizedBvh.cxx_buildSet!(
    )
 = "Bullet2__btGImpactQuantizedBvh__MU__meth_buildSet__6bbe7c75ef84b3deffe12deab525e2a5";

//! returns the indices of the primitives in the m_primitive_manager
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactQuantizedBvh.cxx_boxQuery?(
    CxxbtAABBConstRef box,
    CxxbtAlignedObjectArray_SInt32Ref collided_results
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_boxQuery__85478e6ddecc83257b685f81a1059591";

//! returns the indices of the primitives in the m_primitive_manager
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactQuantizedBvh.cxx_boxQueryTrans?(
    CxxbtAABBConstRef box,
    CxxbtTransformConstRef transform,
    CxxbtAlignedObjectArray_SInt32Ref collided_results
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_boxQueryTrans__564ab94aae344a3d2309ba5c49c1e2ff";

//! returns the indices of the primitives in the m_primitive_manager
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactQuantizedBvh.cxx_rayQuery?(
    CxxbtVector3ConstRef ray_dir,
    CxxbtVector3ConstRef ray_origin,
    CxxbtAlignedObjectArray_SInt32Ref collided_results
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_rayQuery__a6c206508eb6a37cd667d6bf03ba17c2";

//! tells if this set has hierarcht
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactQuantizedBvh.cxx_hasHierarchy?(
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_hasHierarchy__7ef134a6419eb88f792ce112f8dbfe03";

//! tells if this set is a trimesh
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactQuantizedBvh.cxx_isTrimesh?(
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_isTrimesh__d5754c3251218c88e4e2770bc0332f49";

//! node count
/// \dfgPresetOmit
/// \internal
SInt32
btGImpactQuantizedBvh.cxx_getNodeCount?(
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getNodeCount__84cbc72d30ae9c9dac669a5a427072f5";

//! tells if the node is a leaf
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactQuantizedBvh.cxx_isLeafNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_isLeafNode__155772a33386f5d3971cf903b39a3938";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactQuantizedBvh.cxx_getNodeData?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getNodeData__6bb5cee482b536e7fdbdb8f51f65ab63";

/// \dfgPresetOmit
/// \internal

btGImpactQuantizedBvh.cxx_getNodeBound?(
    SInt32 nodeindex,
    CxxbtAABBRef bound
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getNodeBound__1c19c891d119f1eb3568d56fa7e1c6f9";

/// \dfgPresetOmit
/// \internal

btGImpactQuantizedBvh.cxx_setNodeBound!(
    SInt32 nodeindex,
    CxxbtAABBConstRef bound
    )
 = "Bullet2__btGImpactQuantizedBvh__MU__meth_setNodeBound__3b61013965b6c70cd5f64632f5faf642";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactQuantizedBvh.cxx_getLeftNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getLeftNode__91e770b9406943ecf46fcd093518b996";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactQuantizedBvh.cxx_getRightNode?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getRightNode__cee79a04aeb968a0eb9c0f0b1aa864f8";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactQuantizedBvh.cxx_getEscapeNodeIndex?(
    SInt32 nodeindex
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getEscapeNodeIndex__744574723a2f06c7290ea8db3002c27a";

/// \dfgPresetOmit
/// \internal

btGImpactQuantizedBvh.cxx_getNodeTriangle?(
    SInt32 nodeindex,
    btPrimitiveTriangle triangle
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_getNodeTriangle__a3207c1fb2212a6c00ef8a0ce604c3e5";

/// \dfgPresetOmit
/// \internal
BT_QUANTIZED_BVH_NODE
btGImpactQuantizedBvh.cxx_get_node_pointer?(
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_get_node_pointer__cb6badbfab11d1c194841c9256268e2c";

/// \dfgPresetOmit
/// \internal
BT_QUANTIZED_BVH_NODE
btGImpactQuantizedBvh.cxx_get_node_pointer?(
    SInt32 index
    )
 = "Bullet2__btGImpactQuantizedBvh__CO__meth_get_node_pointer__a3ff6ba9a8f6a1694fbbbce5f056be60";

/// \dfgPresetOmit
/// \internal

btGImpactQuantizedBvh_Cxxfind_collision(
    btGImpactQuantizedBvh boxset1,
    CxxbtTransformConstRef trans1,
    btGImpactQuantizedBvh boxset2,
    CxxbtTransformConstRef trans2,
    btPairSet collision_pairs
    )
 = "Bullet2__btGImpactQuantizedBvh__ST__meth_find_collision__ed7aa1ad15e6a20a097faf628a57d050";

SInt32
btGImpactQuantizedBvh.getLeftNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getLeftNode(
        nodeindex
        );
    
    
    return __res;
}

//! returns the indices of the primitives in the m_primitive_manager
Boolean
btGImpactQuantizedBvh.boxQuery?(
    in
    btAABB
    box
    
    ,
    io
    btAlignedObjectArray_SInt32
    collided_results
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtAlignedObjectArray_SInt32Ref collided_results__cxx = Make_CxxbtAlignedObjectArray_SInt32Ref(collided_results);
    Boolean __res = 
    this.cxx_boxQuery(
        box__cxx,
        collided_results__cxx
        );
    
    
    
    return __res;
}


btGImpactQuantizedBvh_find_collision(
    in
    btGImpactQuantizedBvh
    boxset1
    
    ,
    in
    btTransform
    trans1
    
    ,
    in
    btGImpactQuantizedBvh
    boxset2
    
    ,
    in
    btTransform
    trans2
    
    ,
    in
    btPairSet
    collision_pairs
    
    
    )
{   
    
    
    CxxbtTransformConstRef trans1__cxx = Make_CxxbtTransformConstRef(trans1);
    
    
    CxxbtTransformConstRef trans2__cxx = Make_CxxbtTransformConstRef(trans2);
    
    
    btGImpactQuantizedBvh_Cxxfind_collision(
        boxset1,
        trans1__cxx,
        boxset2,
        trans2__cxx,
        collision_pairs
        );
    
    
    
    
    
    
    
}

btAABB
btGImpactQuantizedBvh.getGlobalBox?(
    )
{   
    btAABB __res = 
    this.cxx_getGlobalBox(
        );
    
    return __res;
}

//! this rebuild the entire set

btGImpactQuantizedBvh.buildSet!(
    )
{   
    
    this.cxx_buildSet(
        );
    
    
}


btGImpactQuantizedBvh.setPrimitiveManager!(
    in
    btPrimitiveManagerBase
    primitive_manager
    
    
    )
{   
    
    
    this.cxx_setPrimitiveManager(
        primitive_manager
        );
    
    
    
}

//! tells if the node is a leaf
Boolean
btGImpactQuantizedBvh.isLeafNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isLeafNode(
        nodeindex
        );
    
    
    return __res;
}

//! returns the indices of the primitives in the m_primitive_manager
Boolean
btGImpactQuantizedBvh.rayQuery?(
    in
    btVector3
    ray_dir
    
    ,
    in
    btVector3
    ray_origin
    
    ,
    io
    btAlignedObjectArray_SInt32
    collided_results
    
    
    )
{   
    
    CxxbtVector3ConstRef ray_dir__cxx = Make_CxxbtVector3ConstRef(ray_dir);
    
    CxxbtVector3ConstRef ray_origin__cxx = Make_CxxbtVector3ConstRef(ray_origin);
    
    CxxbtAlignedObjectArray_SInt32Ref collided_results__cxx = Make_CxxbtAlignedObjectArray_SInt32Ref(collided_results);
    Boolean __res = 
    this.cxx_rayQuery(
        ray_dir__cxx,
        ray_origin__cxx,
        collided_results__cxx
        );
    
    
    
    
    return __res;
}


btGImpactQuantizedBvh.getNodeTriangle?(
    in
    SInt32
    nodeindex
    
    ,
    in
    btPrimitiveTriangle
    triangle
    
    
    )
{   
    
    
    
    this.cxx_getNodeTriangle(
        nodeindex,
        triangle
        );
    
    
    
    
}

SInt32
btGImpactQuantizedBvh.getEscapeNodeIndex?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getEscapeNodeIndex(
        nodeindex
        );
    
    
    return __res;
}


btGImpactQuantizedBvh.getNodeBound?(
    in
    SInt32
    nodeindex
    
    ,
    io
    btAABB
    bound
    
    
    )
{   
    
    
    CxxbtAABBRef bound__cxx = Make_CxxbtAABBRef(bound);
    
    this.cxx_getNodeBound(
        nodeindex,
        bound__cxx
        );
    
    
    
    
}

SInt32
btGImpactQuantizedBvh.getNodeData?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getNodeData(
        nodeindex
        );
    
    
    return __res;
}

BT_QUANTIZED_BVH_NODE
btGImpactQuantizedBvh.get_node_pointer?(
    )
{   
    BT_QUANTIZED_BVH_NODE __res = 
    this.cxx_get_node_pointer(
        );
    
    return __res;
}

BT_QUANTIZED_BVH_NODE
btGImpactQuantizedBvh.get_node_pointer?(
    in
    SInt32
    index
    
    
    )
{   
    
    BT_QUANTIZED_BVH_NODE __res = 
    this.cxx_get_node_pointer(
        index
        );
    
    
    return __res;
}

//! tells if this set has hierarcht
Boolean
btGImpactQuantizedBvh.hasHierarchy?(
    )
{   
    Boolean __res = 
    this.cxx_hasHierarchy(
        );
    
    return __res;
}

//! node count
SInt32
btGImpactQuantizedBvh.getNodeCount?(
    )
{   
    SInt32 __res = 
    this.cxx_getNodeCount(
        );
    
    return __res;
}


btGImpactQuantizedBvh.setNodeBound!(
    in
    SInt32
    nodeindex
    
    ,
    in
    btAABB
    bound
    
    
    )
{   
    
    
    CxxbtAABBConstRef bound__cxx = Make_CxxbtAABBConstRef(bound);
    
    this.cxx_setNodeBound(
        nodeindex,
        bound__cxx
        );
    
    
    
    
}

//! tells if this set is a trimesh
Boolean
btGImpactQuantizedBvh.isTrimesh?(
    )
{   
    Boolean __res = 
    this.cxx_isTrimesh(
        );
    
    return __res;
}

//! this attemps to refit the box set.

btGImpactQuantizedBvh.update!(
    )
{   
    
    this.cxx_update(
        );
    
    
}

btPrimitiveManagerBase
btGImpactQuantizedBvh.getPrimitiveManager?(
    )
{   
    btPrimitiveManagerBase __res = 
    this.cxx_getPrimitiveManager(
        );
    
    return __res;
}

SInt32
btGImpactQuantizedBvh.getRightNode?(
    in
    SInt32
    nodeindex
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getRightNode(
        nodeindex
        );
    
    
    return __res;
}

//! returns the indices of the primitives in the m_primitive_manager
Boolean
btGImpactQuantizedBvh.boxQueryTrans?(
    in
    btAABB
    box
    
    ,
    in
    btTransform
    transform
    
    ,
    io
    btAlignedObjectArray_SInt32
    collided_results
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtTransformConstRef transform__cxx = Make_CxxbtTransformConstRef(transform);
    
    CxxbtAlignedObjectArray_SInt32Ref collided_results__cxx = Make_CxxbtAlignedObjectArray_SInt32Ref(collided_results);
    Boolean __res = 
    this.cxx_boxQueryTrans(
        box__cxx,
        transform__cxx,
        collided_results__cxx
        );
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactQuantizedBvh] EDK[Fabric_EDK_KL_btGImpactQuantizedBvh] LIB[btGImpactQuantizedBvh *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactQuantizedBvh.=(
    btGImpactQuantizedBvh that
    ) = "Bullet2__btGImpactQuantizedBvh__MU__simple_ass_op__244a0917bb0b2057a19713c2ce9673c1";


/// \dfgPresetOmit
/// \internal
btGImpactQuantizedBvh.appendDesc(io String string) {
  string += "btGImpactQuantizedBvh:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btTetrahedronShapeEx(
    btTetrahedronShapeEx that
    ) = "Bullet2__btTetrahedronShapeEx__MU__copy_ctor__cac4493fab0b3397e7ecf7bcb8d93f2b";

/// \dfgPresetOmit
/// \internal
btTetrahedronShapeEx.__ctor(
    ) = "Bullet2__btTetrahedronShapeEx__MU__ctor__8bb802f63b5cad544b6b9ef4f523cb9b";

/// \dfgPresetOmit
btTetrahedronShapeEx(
    ) {
    this.__ctor(
        );
}

btTetrahedronShapeEx.cxx_delete() = "Bullet2__btTetrahedronShapeEx__MU__delete__bc91bdb85d376085d9a9404563b87a4f";

//////////////////////////////////////////////////////////////////////////////
// KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btTetrahedronShapeEx.cxx_setVertices!(
    CxxbtVector3ConstRef v0,
    CxxbtVector3ConstRef v1,
    CxxbtVector3ConstRef v2,
    CxxbtVector3ConstRef v3
    )
 = "Bullet2__btTetrahedronShapeEx__MU__meth_setVertices__2375dbdde057174a4f2b68e58aa41cea";


btTetrahedronShapeEx.setVertices!(
    in
    btVector3
    v0
    
    ,
    in
    btVector3
    v1
    
    ,
    in
    btVector3
    v2
    
    ,
    in
    btVector3
    v3
    
    
    )
{   
    
    CxxbtVector3ConstRef v0__cxx = Make_CxxbtVector3ConstRef(v0);
    
    CxxbtVector3ConstRef v1__cxx = Make_CxxbtVector3ConstRef(v1);
    
    CxxbtVector3ConstRef v2__cxx = Make_CxxbtVector3ConstRef(v2);
    
    CxxbtVector3ConstRef v3__cxx = Make_CxxbtVector3ConstRef(v3);
    
    this.cxx_setVertices(
        v0__cxx,
        v1__cxx,
        v2__cxx,
        v3__cxx
        );
    
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTetrahedronShapeEx] EDK[Fabric_EDK_KL_btTetrahedronShapeEx] LIB[btTetrahedronShapeEx *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTetrahedronShapeEx.=(
    btTetrahedronShapeEx that
    ) = "Bullet2__btTetrahedronShapeEx__MU__simple_ass_op__056771a3de8d9c10117f93f8b6cee543";


/// \dfgPresetOmit
/// \internal
btTetrahedronShapeEx.appendDesc(io String string) {
  string += "btTetrahedronShapeEx:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btGImpactShapeInterface(
    btGImpactShapeInterface that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btGImpactShapeInterface.cxx_delete() = "Bullet2__btGImpactShapeInterface__MU__delete__20db61ca4f95e34a54fa2b0c3fda7d11";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! performs refit operation
// /*!
// Updates the entire Box set of this shape.
// \pre postUpdate() must be called for attemps to calculating the box set, else this function
// will does nothing.
// \post if m_needs_update == true, then it calls calcLocalAABB();
// */
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_updateBound!(
    )
 = "Bullet2__btGImpactShapeInterface__MU__meth_updateBound__e0bbabdc329f226100bfe43fb2241c8b";

//! If the Bounding box is not updated, then this class attemps to calculate it.
// /*!
// \post Calls updateBound() for update the box set.
// */
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getAabb__7414726fa4b6eae5dc66bd3b82708aa8";

//! Tells to this object that is needed to refit the box set
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_postUpdate!(
    )
 = "Bullet2__btGImpactShapeInterface__MU__meth_postUpdate__8f60d45568ce8731c1dfc471203a60f4";

//! Obtains the local box, which is the global calculated box of the total of subshapes
/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef
btGImpactShapeInterface.cxx_getLocalBox!(
    )
 = "Bullet2__btGImpactShapeInterface__MU__meth_getLocalBox__483020fa3d6016f06b52487712a47521";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactShapeInterface.cxx_getShapeType?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getShapeType__2b258717095dc57de8c91daa06cdc14b";

/*!
	\post You must call updateBound() for update the box set.
	*/
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btGImpactShapeInterface__MU__meth_setLocalScaling__9827e52d642ed75148c401cd3e047038";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btGImpactShapeInterface.cxx_getLocalScaling?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getLocalScaling__ea127acf70a0c64a562f78599339d70e";

/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btGImpactShapeInterface__MU__meth_setMargin__59a163bda0b63a30b9ce7d281b269924";

//! Base method for determinig which kind of GIMPACT shape we get
/// \dfgPresetOmit
/// \internal
eGIMPACT_SHAPE_TYPE
btGImpactShapeInterface.cxx_getGImpactShapeType?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getGImpactShapeType__b94686d516638236c790c0749bd156af";

//! Determines if this class has a hierarchy structure for sorting its primitives
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactShapeInterface.cxx_hasBoxSet?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_hasBoxSet__51f41eb2808fb40cefae5f21e593c167";

//! Obtains the primitive manager
/// \dfgPresetOmit
/// \internal
btPrimitiveManagerBase
btGImpactShapeInterface.cxx_getPrimitiveManager?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getPrimitiveManager__9ffbef43733de851f8d20a91225cafff";

//! Gets the number of children
/// \dfgPresetOmit
/// \internal
SInt32
btGImpactShapeInterface.cxx_getNumChildShapes?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getNumChildShapes__b06db2cb2199fcc0e8aa666faa8e8003";

//! if true, then its children must get transforms.
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactShapeInterface.cxx_childrenHasTransform?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_childrenHasTransform__02e7407320d6c9111324e50a03d7fc0c";

//! Determines if this shape has triangles
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactShapeInterface.cxx_needsRetrieveTriangles?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_needsRetrieveTriangles__d24ff5ab076a4bbc9a5086cfd9d25bb9";

//! Determines if this shape has tetrahedrons
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactShapeInterface.cxx_needsRetrieveTetrahedrons?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_needsRetrieveTetrahedrons__d64810fd7f9dea1e587c033fe9bf0222";

/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_getBulletTriangle?(
    SInt32 prim_index,
    btTriangleShapeEx triangle
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getBulletTriangle__1e2f0bef2828b4fc17190a20e0f2d1ae";

/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_getBulletTetrahedron?(
    SInt32 prim_index,
    btTetrahedronShapeEx tetrahedron
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getBulletTetrahedron__92fbd740c1bb8c67a9d05f67180d2b0d";

//! call when reading child shapes
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_lockChildShapes?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_lockChildShapes__1cd892f900ffb3291622d67e3c261747";

/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_unlockChildShapes?(
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_unlockChildShapes__3d4221ec477e62ec835ccb3a922da219";

//! if this trimesh
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_getPrimitiveTriangle?(
    SInt32 index,
    btPrimitiveTriangle triangle
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getPrimitiveTriangle__3fa2be28f25d8881ac81fc565fed509a";

//! Retrieves the bound from a child
// /*!
// */
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_getChildAabb?(
    SInt32 child_index,
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getChildAabb__cc7226f4bcde07c6a10460b257b43f85";

//! Gets the children
/// \dfgPresetOmit
/// \internal
btCollisionShape
btGImpactShapeInterface.cxx_getChildShape!(
    SInt32 index
    )
 = "Bullet2__btGImpactShapeInterface__MU__meth_getChildShape__86bfed9e84effafb0ac1bd784c0c4adf";

//! Gets the child
/// \dfgPresetOmit
/// \internal
btCollisionShape
btGImpactShapeInterface.cxx_getChildShape?(
    SInt32 index
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getChildShape__c85df0c325e9d523e8524d48a2b74331";

//! Gets the children transform
/// \dfgPresetOmit
/// \internal
btTransform
btGImpactShapeInterface.cxx_getChildTransform?(
    SInt32 index
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_getChildTransform__eaa745c1e5a9d204db9a05f22b129154";

//! Sets the children transform
// /*!
// \post You must call updateBound() for update the box set.
// */
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_setChildTransform!(
    SInt32 index,
    CxxbtTransformConstRef transform
    )
 = "Bullet2__btGImpactShapeInterface__MU__meth_setChildTransform__723e5437cfc75f9b90e34133e5a3eb94";

//! virtual method for ray collision
/// \dfgPresetOmit
/// \internal

btGImpactShapeInterface.cxx_rayTest?(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btGImpactShapeInterface__CO__meth_rayTest__4c4c7ba8bfd967b344cf502e9b70fe1e";

//! Base method for determinig which kind of GIMPACT shape we get
eGIMPACT_SHAPE_TYPE
btGImpactShapeInterface.getGImpactShapeType?(
    )
{   
    eGIMPACT_SHAPE_TYPE __res = 
    this.cxx_getGImpactShapeType(
        );
    
    return __res;
}

//! Gets the number of children
SInt32
btGImpactShapeInterface.getNumChildShapes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumChildShapes(
        );
    
    return __res;
}

//! Determines if this shape has triangles
Boolean
btGImpactShapeInterface.needsRetrieveTriangles?(
    )
{   
    Boolean __res = 
    this.cxx_needsRetrieveTriangles(
        );
    
    return __res;
}

//! if this trimesh

btGImpactShapeInterface.getPrimitiveTriangle?(
    in
    SInt32
    index
    
    ,
    in
    btPrimitiveTriangle
    triangle
    
    
    )
{   
    
    
    
    this.cxx_getPrimitiveTriangle(
        index,
        triangle
        );
    
    
    
    
}

SInt32
btGImpactShapeInterface.getShapeType?(
    )
{   
    SInt32 __res = 
    this.cxx_getShapeType(
        );
    
    return __res;
}

//! Gets the children transform
btTransform
btGImpactShapeInterface.getChildTransform?(
    in
    SInt32
    index
    
    
    )
{   
    
    btTransform __res = 
    this.cxx_getChildTransform(
        index
        );
    
    
    return __res;
}

//! if true, then its children must get transforms.
Boolean
btGImpactShapeInterface.childrenHasTransform?(
    )
{   
    Boolean __res = 
    this.cxx_childrenHasTransform(
        );
    
    return __res;
}


btGImpactShapeInterface.getBulletTetrahedron?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTetrahedronShapeEx
    tetrahedron
    
    
    )
{   
    
    
    
    this.cxx_getBulletTetrahedron(
        prim_index,
        tetrahedron
        );
    
    
    
    
}


btGImpactShapeInterface.getBulletTriangle?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTriangleShapeEx
    triangle
    
    
    )
{   
    
    
    
    this.cxx_getBulletTriangle(
        prim_index,
        triangle
        );
    
    
    
    
}

//! call when reading child shapes

btGImpactShapeInterface.lockChildShapes?(
    )
{   
    
    this.cxx_lockChildShapes(
        );
    
    
}

/*!
	\post You must call updateBound() for update the box set.
	*/

btGImpactShapeInterface.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btGImpactShapeInterface.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}

//! Tells to this object that is needed to refit the box set

btGImpactShapeInterface.postUpdate!(
    )
{   
    
    this.cxx_postUpdate(
        );
    
    
}

//! performs refit operation
// /*!
// Updates the entire Box set of this shape.
// \pre postUpdate() must be called for attemps to calculating the box set, else this function
// will does nothing.
// \post if m_needs_update == true, then it calls calcLocalAABB();
// */

btGImpactShapeInterface.updateBound!(
    )
{   
    
    this.cxx_updateBound(
        );
    
    
}

//! Sets the children transform
// /*!
// \post You must call updateBound() for update the box set.
// */

btGImpactShapeInterface.setChildTransform!(
    in
    SInt32
    index
    
    ,
    in
    btTransform
    transform
    
    
    )
{   
    
    
    CxxbtTransformConstRef transform__cxx = Make_CxxbtTransformConstRef(transform);
    
    this.cxx_setChildTransform(
        index,
        transform__cxx
        );
    
    
    
    
}

btVector3
btGImpactShapeInterface.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

//! Obtains the local box, which is the global calculated box of the total of subshapes
btAABB
btGImpactShapeInterface.getLocalBox!(
    )
{   
    CxxbtAABBConstRef __res_cxx = 
    this.cxx_getLocalBox(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtAABBConstRef';
    btAABB __res = __res_cxx.cxx_get();
    return __res;
}

//! Determines if this shape has tetrahedrons
Boolean
btGImpactShapeInterface.needsRetrieveTetrahedrons?(
    )
{   
    Boolean __res = 
    this.cxx_needsRetrieveTetrahedrons(
        );
    
    return __res;
}

//! virtual method for ray collision

btGImpactShapeInterface.rayTest?(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        resultCallback
        );
    
    
    
    
    
}

//! If the Bounding box is not updated, then this class attemps to calculate it.
// /*!
// \post Calls updateBound() for update the box set.
// */

btGImpactShapeInterface.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

//! Determines if this class has a hierarchy structure for sorting its primitives
Boolean
btGImpactShapeInterface.hasBoxSet?(
    )
{   
    Boolean __res = 
    this.cxx_hasBoxSet(
        );
    
    return __res;
}

//! Retrieves the bound from a child
// /*!
// */

btGImpactShapeInterface.getChildAabb?(
    in
    SInt32
    child_index
    
    ,
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getChildAabb(
        child_index,
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
    
}


btGImpactShapeInterface.unlockChildShapes?(
    )
{   
    
    this.cxx_unlockChildShapes(
        );
    
    
}

//! Obtains the primitive manager
btPrimitiveManagerBase
btGImpactShapeInterface.getPrimitiveManager?(
    )
{   
    btPrimitiveManagerBase __res = 
    this.cxx_getPrimitiveManager(
        );
    
    return __res;
}

//! Gets the children
btCollisionShape
btGImpactShapeInterface.getChildShape!(
    in
    SInt32
    index
    
    
    )
{   
    
    btCollisionShape __res = 
    this.cxx_getChildShape(
        index
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactShapeInterface] EDK[Fabric_EDK_KL_btGImpactShapeInterface] LIB[btGImpactShapeInterface *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactShapeInterface.=(
    btGImpactShapeInterface that
    ) = "Bullet2__btGImpactShapeInterface__MU__simple_ass_op__bfaee8a7c46367bc20410407de7c89e1";


/// \dfgPresetOmit
/// \internal
btGImpactShapeInterface.appendDesc(io String string) {
  string += "btGImpactShapeInterface:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGImpactCompoundShape() = "Bullet2__btGImpactCompoundShape__MU__empty_ctor__bf56053799d40621dc56f61157556409";

/// \dfgPresetOmit
btGImpactCompoundShape(
    btGImpactCompoundShape that
    ) = "Bullet2__btGImpactCompoundShape__MU__copy_ctor__5405ba9be423aeb44e58a3ffe757949b";

/// \dfgPresetOmit
/// \internal
btGImpactCompoundShape.__ctor(
    ) = "Bullet2__btGImpactCompoundShape__MU__ctor__b4f11b474116564d7e5b2f9934036e28";

/// \dfgPresetOmit
btGImpactCompoundShape(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btGImpactCompoundShape.__ctor(
    Boolean children_has_transform
    ) = "Bullet2__btGImpactCompoundShape__MU__ctor__4ac342fa8436bd221ccf3ea922d93c69";

/// \dfgPresetOmit
btGImpactCompoundShape(
    Boolean children_has_transform
    ) {
    this.__ctor(
        children_has_transform
        );
}

btGImpactCompoundShape.cxx_delete() = "Bullet2__btGImpactCompoundShape__MU__delete__b4c2405baf97ddd786a090b53c3f3b2f";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! if true, then its children must get transforms.
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactCompoundShape.cxx_childrenHasTransform?(
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_childrenHasTransform__125ae6c0f79cf5b314ea1e8f0f6a7865";

//! Obtains the primitive manager
/// \dfgPresetOmit
/// \internal
btPrimitiveManagerBase
btGImpactCompoundShape.cxx_getPrimitiveManager?(
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getPrimitiveManager__8c55ff2679059d35efe5e3ac1d3c2af3";

//! Obtains the compopund primitive manager
/// \dfgPresetOmit
/// \internal
btGImpactCompoundShape_CompoundPrimitiveManager
btGImpactCompoundShape.cxx_getCompoundPrimitiveManager!(
    )
 = "Bullet2__btGImpactCompoundShape__MU__meth_getCompoundPrimitiveManager__39bf395234a9728b42d5aec69aaabb16";

//! Gets the number of children
/// \dfgPresetOmit
/// \internal
SInt32
btGImpactCompoundShape.cxx_getNumChildShapes?(
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getNumChildShapes__297a9b2c1f81f806b204160146aa9774";

//! Use this method for adding children. Only Convex shapes are allowed.
/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape.cxx_addChildShape!(
    CxxbtTransformConstRef localTransform,
    btCollisionShape shape
    )
 = "Bullet2__btGImpactCompoundShape__MU__meth_addChildShape__3019e0453d9edcb8fa8c9bbec5496547";

//! Use this method for adding children. Only Convex shapes are allowed.
/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape.cxx_addChildShape!(
    btCollisionShape shape
    )
 = "Bullet2__btGImpactCompoundShape__MU__meth_addChildShape__b30c566a4e48158f718bb1dc500a9f2f";

//! Gets the children
/// \dfgPresetOmit
/// \internal
btCollisionShape
btGImpactCompoundShape.cxx_getChildShape!(
    SInt32 index
    )
 = "Bullet2__btGImpactCompoundShape__MU__meth_getChildShape__19ad09568ef8059399a0c62b4cb37387";

//! Gets the children
/// \dfgPresetOmit
/// \internal
btCollisionShape
btGImpactCompoundShape.cxx_getChildShape?(
    SInt32 index
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getChildShape__6f8b829de70a9d511ef8135bc3be924a";

//! Retrieves the bound from a child
// /*!
// */
/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape.cxx_getChildAabb?(
    SInt32 child_index,
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getChildAabb__413bd42f35b9117beb37bd2821d5e59b";

//! Gets the children transform
/// \dfgPresetOmit
/// \internal
btTransform
btGImpactCompoundShape.cxx_getChildTransform?(
    SInt32 index
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getChildTransform__6b057c4962a367659585dffd6aace182";

//! Sets the children transform
// /*!
// \post You must call updateBound() for update the box set.
// */
/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape.cxx_setChildTransform!(
    SInt32 index,
    CxxbtTransformConstRef transform
    )
 = "Bullet2__btGImpactCompoundShape__MU__meth_setChildTransform__94094ce41ecdbca70b3643f5abc089e8";

//! Determines if this shape has triangles
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactCompoundShape.cxx_needsRetrieveTriangles?(
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_needsRetrieveTriangles__5bf682032d89fb5fbaf72ba38663b7da";

//! Determines if this shape has tetrahedrons
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactCompoundShape.cxx_needsRetrieveTetrahedrons?(
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_needsRetrieveTetrahedrons__5cec7b1e109c217b7b8f71fc9f144957";

/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape.cxx_getBulletTriangle?(
    SInt32 prim_index,
    btTriangleShapeEx triangle
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getBulletTriangle__fcece58583311f211cbc7d1f80837850";

/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape.cxx_getBulletTetrahedron?(
    SInt32 prim_index,
    btTetrahedronShapeEx tetrahedron
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getBulletTetrahedron__5fa5a40e93b75b5619419a2e370d0172";

//! Calculates the exact inertia tensor for this shape
/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_calculateLocalInertia__de38bcad2f3f8e2ace44fb9b2497c53e";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btGImpactCompoundShape.cxx_getName?(
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getName__eb1b4960d79e1c88a867c70ce81780c8";

/// \dfgPresetOmit
/// \internal
eGIMPACT_SHAPE_TYPE
btGImpactCompoundShape.cxx_getGImpactShapeType?(
    )
 = "Bullet2__btGImpactCompoundShape__CO__meth_getGImpactShapeType__7aa8a29a19b61d1f434202a2d0fddbeb";

//! Obtains the primitive manager
btPrimitiveManagerBase
btGImpactCompoundShape.getPrimitiveManager?(
    )
{   
    btPrimitiveManagerBase __res = 
    this.cxx_getPrimitiveManager(
        );
    
    return __res;
}


btGImpactCompoundShape.getBulletTetrahedron?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTetrahedronShapeEx
    tetrahedron
    
    
    )
{   
    
    
    
    this.cxx_getBulletTetrahedron(
        prim_index,
        tetrahedron
        );
    
    
    
    
}

//! Obtains the compopund primitive manager
btGImpactCompoundShape_CompoundPrimitiveManager
btGImpactCompoundShape.getCompoundPrimitiveManager!(
    )
{   
    btGImpactCompoundShape_CompoundPrimitiveManager __res = 
    this.cxx_getCompoundPrimitiveManager(
        );
    
    return __res;
}

String
btGImpactCompoundShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

//! Determines if this shape has tetrahedrons
Boolean
btGImpactCompoundShape.needsRetrieveTetrahedrons?(
    )
{   
    Boolean __res = 
    this.cxx_needsRetrieveTetrahedrons(
        );
    
    return __res;
}

//! Sets the children transform
// /*!
// \post You must call updateBound() for update the box set.
// */

btGImpactCompoundShape.setChildTransform!(
    in
    SInt32
    index
    
    ,
    in
    btTransform
    transform
    
    
    )
{   
    
    
    CxxbtTransformConstRef transform__cxx = Make_CxxbtTransformConstRef(transform);
    
    this.cxx_setChildTransform(
        index,
        transform__cxx
        );
    
    
    
    
}

//! Gets the children
btCollisionShape
btGImpactCompoundShape.getChildShape!(
    in
    SInt32
    index
    
    
    )
{   
    
    btCollisionShape __res = 
    this.cxx_getChildShape(
        index
        );
    
    
    return __res;
}

//! Gets the children transform
btTransform
btGImpactCompoundShape.getChildTransform?(
    in
    SInt32
    index
    
    
    )
{   
    
    btTransform __res = 
    this.cxx_getChildTransform(
        index
        );
    
    
    return __res;
}

//! if true, then its children must get transforms.
Boolean
btGImpactCompoundShape.childrenHasTransform?(
    )
{   
    Boolean __res = 
    this.cxx_childrenHasTransform(
        );
    
    return __res;
}

//! Calculates the exact inertia tensor for this shape

btGImpactCompoundShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

//! Gets the number of children
SInt32
btGImpactCompoundShape.getNumChildShapes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumChildShapes(
        );
    
    return __res;
}

eGIMPACT_SHAPE_TYPE
btGImpactCompoundShape.getGImpactShapeType?(
    )
{   
    eGIMPACT_SHAPE_TYPE __res = 
    this.cxx_getGImpactShapeType(
        );
    
    return __res;
}


btGImpactCompoundShape.getBulletTriangle?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTriangleShapeEx
    triangle
    
    
    )
{   
    
    
    
    this.cxx_getBulletTriangle(
        prim_index,
        triangle
        );
    
    
    
    
}

//! Determines if this shape has triangles
Boolean
btGImpactCompoundShape.needsRetrieveTriangles?(
    )
{   
    Boolean __res = 
    this.cxx_needsRetrieveTriangles(
        );
    
    return __res;
}

//! Use this method for adding children. Only Convex shapes are allowed.

btGImpactCompoundShape.addChildShape!(
    in
    btCollisionShape
    shape
    
    
    )
{   
    
    
    this.cxx_addChildShape(
        shape
        );
    
    
    
}

//! Retrieves the bound from a child
// /*!
// */

btGImpactCompoundShape.getChildAabb?(
    in
    SInt32
    child_index
    
    ,
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getChildAabb(
        child_index,
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
    
}

//! Use this method for adding children. Only Convex shapes are allowed.

btGImpactCompoundShape.addChildShape!(
    in
    btTransform
    localTransform
    
    ,
    in
    btCollisionShape
    shape
    
    
    )
{   
    
    CxxbtTransformConstRef localTransform__cxx = Make_CxxbtTransformConstRef(localTransform);
    
    
    this.cxx_addChildShape(
        localTransform__cxx,
        shape
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape] EDK[Fabric_EDK_KL_btGImpactCompoundShape] LIB[btGImpactCompoundShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactCompoundShape.=(
    btGImpactCompoundShape that
    ) = "Bullet2__btGImpactCompoundShape__MU__simple_ass_op__2cae936a42e09a72ff59497f600b6c73";


/// \dfgPresetOmit
/// \internal
btGImpactCompoundShape.appendDesc(io String string) {
  string += "btGImpactCompoundShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btGImpactCompoundShape_CompoundPrimitiveManager(
    btGImpactCompoundShape_CompoundPrimitiveManager that
    ) = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__MU__copy_ctor__29362079ce4a6f7be13250cf4063e164";

/// \dfgPresetOmit
/// \internal
btGImpactCompoundShape_CompoundPrimitiveManager.__ctor(
    btGImpactCompoundShape_CompoundPrimitiveManager compound
    ) = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__MU__ctor__615a47c9b200755be8f4d81d0d7ff5ac";

/// \dfgPresetOmit
btGImpactCompoundShape_CompoundPrimitiveManager(
    btGImpactCompoundShape_CompoundPrimitiveManager compound
    ) {
    this.__ctor(
        compound
        );
}

/// \dfgPresetOmit
/// \internal
btGImpactCompoundShape_CompoundPrimitiveManager.__ctor(
    btGImpactCompoundShape compoundShape
    ) = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__MU__ctor__c8a13a1ac6b067d10a777b73afff5ced";

/// \dfgPresetOmit
btGImpactCompoundShape_CompoundPrimitiveManager(
    btGImpactCompoundShape compoundShape
    ) {
    this.__ctor(
        compoundShape
        );
}

/// \dfgPresetOmit
/// \internal
btGImpactCompoundShape_CompoundPrimitiveManager.__ctor(
    ) = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__MU__ctor__7f0029487646323197c47d02f1d023da";

/// \dfgPresetOmit
btGImpactCompoundShape_CompoundPrimitiveManager(
    ) {
    this.__ctor(
        );
}

btGImpactCompoundShape_CompoundPrimitiveManager.cxx_delete() = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__MU__delete__22b892ab1f7061502e4b604036f6a0f0";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btGImpactCompoundShape_CompoundPrimitiveManager.cxx_is_trimesh?(
    )
 = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__CO__meth_is_trimesh__23eebd3ef788b6e7b0aec6b18c56b78d";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactCompoundShape_CompoundPrimitiveManager.cxx_get_primitive_count?(
    )
 = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__CO__meth_get_primitive_count__16e327648794ffb616bd7789c9c9d5b5";

/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape_CompoundPrimitiveManager.cxx_get_primitive_box?(
    SInt32 prim_index,
    CxxbtAABBRef primbox
    )
 = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__CO__meth_get_primitive_box__b6bf658704a8471771ad43b9ac3d11cb";

/// \dfgPresetOmit
/// \internal

btGImpactCompoundShape_CompoundPrimitiveManager.cxx_get_primitive_triangle?(
    SInt32 prim_index,
    btPrimitiveTriangle triangle
    )
 = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__CO__meth_get_primitive_triangle__d234475dc9232b9d9556bb4a7606d3ec";


btGImpactCompoundShape_CompoundPrimitiveManager.get_primitive_triangle?(
    in
    SInt32
    prim_index
    
    ,
    in
    btPrimitiveTriangle
    triangle
    
    
    )
{   
    
    
    
    this.cxx_get_primitive_triangle(
        prim_index,
        triangle
        );
    
    
    
    
}


btGImpactCompoundShape_CompoundPrimitiveManager.get_primitive_box?(
    in
    SInt32
    prim_index
    
    ,
    io
    btAABB
    primbox
    
    
    )
{   
    
    
    CxxbtAABBRef primbox__cxx = Make_CxxbtAABBRef(primbox);
    
    this.cxx_get_primitive_box(
        prim_index,
        primbox__cxx
        );
    
    
    
    
}

Boolean
btGImpactCompoundShape_CompoundPrimitiveManager.is_trimesh?(
    )
{   
    Boolean __res = 
    this.cxx_is_trimesh(
        );
    
    return __res;
}

SInt32
btGImpactCompoundShape_CompoundPrimitiveManager.get_primitive_count?(
    )
{   
    SInt32 __res = 
    this.cxx_get_primitive_count(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactCompoundShape_CompoundPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactCompoundShape_CompoundPrimitiveManager] LIB[btGImpactCompoundShape::CompoundPrimitiveManager *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactCompoundShape_CompoundPrimitiveManager.=(
    btGImpactCompoundShape_CompoundPrimitiveManager that
    ) = "Bullet2__btGImpactCompoundShape_CompoundPrimitiveManager__MU__simple_ass_op__d603757e129592e5a7c5b53a8f67e6bf";


/// \dfgPresetOmit
/// \internal
btGImpactCompoundShape_CompoundPrimitiveManager.appendDesc(io String string) {
  string += "btGImpactCompoundShape_CompoundPrimitiveManager:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btGImpactMeshShapePart(
    btGImpactMeshShapePart that
    ) = "Bullet2__btGImpactMeshShapePart__MU__copy_ctor__2f171bb507de4dc115452e8ce2cef502";

/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart.__ctor(
    ) = "Bullet2__btGImpactMeshShapePart__MU__ctor__5f80778d3c1b3f60e3744b0005c793a2";

/// \dfgPresetOmit
btGImpactMeshShapePart(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart.__ctor(
    btStridingMeshInterface meshInterface,
    SInt32 part
    ) = "Bullet2__btGImpactMeshShapePart__MU__ctor__edc68dd6b9adc17b66fd263883da0cb5";

/// \dfgPresetOmit
btGImpactMeshShapePart(
    btStridingMeshInterface meshInterface,
    SInt32 part
    ) {
    this.__ctor(
        meshInterface,
        part
        );
}

btGImpactMeshShapePart.cxx_delete() = "Bullet2__btGImpactMeshShapePart__MU__delete__eefe4aa555c33f6e6b2ca5b4e30ed11e";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! if true, then its children must get transforms.
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactMeshShapePart.cxx_childrenHasTransform?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_childrenHasTransform__c05e509d0874d502a8e249a093c3725a";

//! call when reading child shapes
/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_lockChildShapes?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_lockChildShapes__b57d680aaecb9e3b486647d6488f4135";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_unlockChildShapes?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_unlockChildShapes__6d9864b8a16c9f035795fda20922c618";

//! Gets the number of children
/// \dfgPresetOmit
/// \internal
SInt32
btGImpactMeshShapePart.cxx_getNumChildShapes?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getNumChildShapes__fb21e7454a9614abd723401cc16f608e";

//! Gets the children
/// \dfgPresetOmit
/// \internal
btCollisionShape
btGImpactMeshShapePart.cxx_getChildShape!(
    SInt32 index
    )
 = "Bullet2__btGImpactMeshShapePart__MU__meth_getChildShape__4302a085665dba70cdfa22a1cc5b1ab5";

//! Gets the child
/// \dfgPresetOmit
/// \internal
btCollisionShape
btGImpactMeshShapePart.cxx_getChildShape?(
    SInt32 index
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getChildShape__a5187d1c51a4012dda11b1b20e99e9e0";

//! Gets the children transform
/// \dfgPresetOmit
/// \internal
btTransform
btGImpactMeshShapePart.cxx_getChildTransform?(
    SInt32 index
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getChildTransform__b02ae74ea58d98d3bd09fb01fcc5a804";

//! Sets the children transform
// /*!
// \post You must call updateBound() for update the box set.
// */
/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_setChildTransform!(
    SInt32 index,
    CxxbtTransformConstRef transform
    )
 = "Bullet2__btGImpactMeshShapePart__MU__meth_setChildTransform__96a9d121771b6a3d3ac0c20967d36a0f";

//! Obtains the primitive manager
/// \dfgPresetOmit
/// \internal
btPrimitiveManagerBase
btGImpactMeshShapePart.cxx_getPrimitiveManager?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getPrimitiveManager__758a57064346ac1e91f1b722499e92ed";

/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart_TrimeshPrimitiveManager
btGImpactMeshShapePart.cxx_getTrimeshPrimitiveManager!(
    )
 = "Bullet2__btGImpactMeshShapePart__MU__meth_getTrimeshPrimitiveManager__fa22ec596283e2ba0287afcd27c3f1f5";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_calculateLocalInertia__143f41820753526aed6bd5efbfef112b";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btGImpactMeshShapePart.cxx_getName?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getName__c91d6146acfdff1c85abe04022300a4e";

/// \dfgPresetOmit
/// \internal
eGIMPACT_SHAPE_TYPE
btGImpactMeshShapePart.cxx_getGImpactShapeType?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getGImpactShapeType__16c20c5f998c24d326a160fc7816f8b2";

//! Determines if this shape has triangles
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactMeshShapePart.cxx_needsRetrieveTriangles?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_needsRetrieveTriangles__b9b947331e19ea10b964a77181407cc8";

//! Determines if this shape has tetrahedrons
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactMeshShapePart.cxx_needsRetrieveTetrahedrons?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_needsRetrieveTetrahedrons__f21a7a228927493e46bd8e94fe14bfe9";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_getBulletTriangle?(
    SInt32 prim_index,
    btTriangleShapeEx triangle
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getBulletTriangle__3ae8f8d263dcfe3100c9428397e0c2f6";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_getBulletTetrahedron?(
    SInt32 prim_index,
    btTetrahedronShapeEx tetrahedron
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getBulletTetrahedron__e71bd84bf2b7dc81931c52e66aa092a6";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactMeshShapePart.cxx_getVertexCount?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getVertexCount__77910d6d9ff8d8b1c13b950d6521a64b";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_getVertex?(
    SInt32 vertex_index,
    CxxbtVector3Ref vertex
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getVertex__3393f15fa74bfea8f881c1be455e8295";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btGImpactMeshShapePart__MU__meth_setMargin__13a4d74d3c22623cb83caa5d608fdafe";

/// \dfgPresetOmit
/// \internal
Float32
btGImpactMeshShapePart.cxx_getMargin?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getMargin__56528a260a7ae52a7a81680ec651b588";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btGImpactMeshShapePart__MU__meth_setLocalScaling__bcc36534889b622af4bccb5b67d8f50a";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btGImpactMeshShapePart.cxx_getLocalScaling?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getLocalScaling__4dc63784533051d3f56d601387d14949";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactMeshShapePart.cxx_getPart?(
    )
 = "Bullet2__btGImpactMeshShapePart__CO__meth_getPart__44be66dc09f365183f44be38630fc41f";

//! Obtains the primitive manager
btPrimitiveManagerBase
btGImpactMeshShapePart.getPrimitiveManager?(
    )
{   
    btPrimitiveManagerBase __res = 
    this.cxx_getPrimitiveManager(
        );
    
    return __res;
}


btGImpactMeshShapePart.getBulletTetrahedron?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTetrahedronShapeEx
    tetrahedron
    
    
    )
{   
    
    
    
    this.cxx_getBulletTetrahedron(
        prim_index,
        tetrahedron
        );
    
    
    
    
}


btGImpactMeshShapePart.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

//! Gets the number of children
SInt32
btGImpactMeshShapePart.getNumChildShapes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumChildShapes(
        );
    
    return __res;
}


btGImpactMeshShapePart.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}


btGImpactMeshShapePart.unlockChildShapes?(
    )
{   
    
    this.cxx_unlockChildShapes(
        );
    
    
}

btVector3
btGImpactMeshShapePart.getLocalScaling?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLocalScaling(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btGImpactMeshShapePart.getBulletTriangle?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTriangleShapeEx
    triangle
    
    
    )
{   
    
    
    
    this.cxx_getBulletTriangle(
        prim_index,
        triangle
        );
    
    
    
    
}

SInt32
btGImpactMeshShapePart.getVertexCount?(
    )
{   
    SInt32 __res = 
    this.cxx_getVertexCount(
        );
    
    return __res;
}

Float32
btGImpactMeshShapePart.getMargin?(
    )
{   
    Float32 __res = 
    this.cxx_getMargin(
        );
    
    return __res;
}

//! Gets the children
btCollisionShape
btGImpactMeshShapePart.getChildShape!(
    in
    SInt32
    index
    
    
    )
{   
    
    btCollisionShape __res = 
    this.cxx_getChildShape(
        index
        );
    
    
    return __res;
}

SInt32
btGImpactMeshShapePart.getPart?(
    )
{   
    SInt32 __res = 
    this.cxx_getPart(
        );
    
    return __res;
}

//! Gets the children transform
btTransform
btGImpactMeshShapePart.getChildTransform?(
    in
    SInt32
    index
    
    
    )
{   
    
    btTransform __res = 
    this.cxx_getChildTransform(
        index
        );
    
    
    return __res;
}


btGImpactMeshShapePart.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}

eGIMPACT_SHAPE_TYPE
btGImpactMeshShapePart.getGImpactShapeType?(
    )
{   
    eGIMPACT_SHAPE_TYPE __res = 
    this.cxx_getGImpactShapeType(
        );
    
    return __res;
}

//! call when reading child shapes

btGImpactMeshShapePart.lockChildShapes?(
    )
{   
    
    this.cxx_lockChildShapes(
        );
    
    
}

//! if true, then its children must get transforms.
Boolean
btGImpactMeshShapePart.childrenHasTransform?(
    )
{   
    Boolean __res = 
    this.cxx_childrenHasTransform(
        );
    
    return __res;
}


btGImpactMeshShapePart.getVertex?(
    in
    SInt32
    vertex_index
    
    ,
    io
    btVector3
    vertex
    
    
    )
{   
    
    
    CxxbtVector3Ref vertex__cxx = Make_CxxbtVector3Ref(vertex);
    
    this.cxx_getVertex(
        vertex_index,
        vertex__cxx
        );
    
    
    
    
}

String
btGImpactMeshShapePart.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

//! Sets the children transform
// /*!
// \post You must call updateBound() for update the box set.
// */

btGImpactMeshShapePart.setChildTransform!(
    in
    SInt32
    index
    
    ,
    in
    btTransform
    transform
    
    
    )
{   
    
    
    CxxbtTransformConstRef transform__cxx = Make_CxxbtTransformConstRef(transform);
    
    this.cxx_setChildTransform(
        index,
        transform__cxx
        );
    
    
    
    
}

btGImpactMeshShapePart_TrimeshPrimitiveManager
btGImpactMeshShapePart.getTrimeshPrimitiveManager!(
    )
{   
    btGImpactMeshShapePart_TrimeshPrimitiveManager __res = 
    this.cxx_getTrimeshPrimitiveManager(
        );
    
    return __res;
}

//! Determines if this shape has tetrahedrons
Boolean
btGImpactMeshShapePart.needsRetrieveTetrahedrons?(
    )
{   
    Boolean __res = 
    this.cxx_needsRetrieveTetrahedrons(
        );
    
    return __res;
}

//! Determines if this shape has triangles
Boolean
btGImpactMeshShapePart.needsRetrieveTriangles?(
    )
{   
    Boolean __res = 
    this.cxx_needsRetrieveTriangles(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart] EDK[Fabric_EDK_KL_btGImpactMeshShapePart] LIB[btGImpactMeshShapePart *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactMeshShapePart.=(
    btGImpactMeshShapePart that
    ) = "Bullet2__btGImpactMeshShapePart__MU__simple_ass_op__957c0b282be762a66676bb9ccd927a2c";


/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart.appendDesc(io String string) {
  string += "btGImpactMeshShapePart:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btGImpactMeshShapePart_TrimeshPrimitiveManager(
    btGImpactMeshShapePart_TrimeshPrimitiveManager that
    ) = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__MU__copy_ctor__ce2b3ce8ba85bece3965ed163bf77eb8";

/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart_TrimeshPrimitiveManager.__ctor(
    ) = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__MU__ctor__c8f83fa23e803433681be1b6ac8a1130";

/// \dfgPresetOmit
btGImpactMeshShapePart_TrimeshPrimitiveManager(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart_TrimeshPrimitiveManager.__ctor(
    btGImpactMeshShapePart_TrimeshPrimitiveManager manager
    ) = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__MU__ctor__1d05ff59e8e2b05f1fe069d696e1c7e2";

/// \dfgPresetOmit
btGImpactMeshShapePart_TrimeshPrimitiveManager(
    btGImpactMeshShapePart_TrimeshPrimitiveManager manager
    ) {
    this.__ctor(
        manager
        );
}

/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart_TrimeshPrimitiveManager.__ctor(
    btStridingMeshInterface meshInterface,
    SInt32 part
    ) = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__MU__ctor__9d8ce176413476e2a13fa130eed62f91";

/// \dfgPresetOmit
btGImpactMeshShapePart_TrimeshPrimitiveManager(
    btStridingMeshInterface meshInterface,
    SInt32 part
    ) {
    this.__ctor(
        meshInterface,
        part
        );
}

btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_delete() = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__MU__delete__2ef0641b2f9978540c727d6326bbf052";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_lock!(
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__MU__meth_lock__2fd726506062ab88cfc2a1e14edd2547";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_unlock!(
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__MU__meth_unlock__7252f9bdee9b508706d23989eca83cdc";

/// \dfgPresetOmit
/// \internal
Boolean
btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_is_trimesh?(
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__CO__meth_is_trimesh__1c37d56c358d19892dd56613e08be563";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_get_primitive_count?(
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__CO__meth_get_primitive_count__a07f92a1a122fae1aec365e6a53f012d";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_get_vertex_count?(
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__CO__meth_get_vertex_count__3bf599f63526dd1be962ba7125dc3d52";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_get_indices?(
    SInt32 face_index,
    CxxUInt32Ref i0,
    CxxUInt32Ref i1,
    CxxUInt32Ref i2
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__CO__meth_get_indices__23aadaa0180634bd11ad6dc1c86e46e5";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_get_vertex?(
    UInt32 vertex_index,
    CxxbtVector3Ref vertex
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__CO__meth_get_vertex__d54ffc998043b026530725e22e8aa844";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_get_primitive_box?(
    SInt32 prim_index,
    CxxbtAABBRef primbox
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__CO__meth_get_primitive_box__0a3895dbadbf87bb5a1efa0b647c05c3";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_get_primitive_triangle?(
    SInt32 prim_index,
    btPrimitiveTriangle triangle
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__CO__meth_get_primitive_triangle__3cb3fd10db9da90b382edb8cae6bd863";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShapePart_TrimeshPrimitiveManager.cxx_get_bullet_triangle?(
    SInt32 prim_index,
    btTriangleShapeEx triangle
    )
 = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__CO__meth_get_bullet_triangle__097d56d23ef553091ca6af44a599021d";


btGImpactMeshShapePart_TrimeshPrimitiveManager.lock_!(
    )
{   
    
    this.cxx_lock(
        );
    
    
}


btGImpactMeshShapePart_TrimeshPrimitiveManager.unlock!(
    )
{   
    
    this.cxx_unlock(
        );
    
    
}


btGImpactMeshShapePart_TrimeshPrimitiveManager.get_primitive_triangle?(
    in
    SInt32
    prim_index
    
    ,
    in
    btPrimitiveTriangle
    triangle
    
    
    )
{   
    
    
    
    this.cxx_get_primitive_triangle(
        prim_index,
        triangle
        );
    
    
    
    
}


btGImpactMeshShapePart_TrimeshPrimitiveManager.get_vertex?(
    in
    UInt32
    vertex_index
    
    ,
    io
    btVector3
    vertex
    
    
    )
{   
    
    
    CxxbtVector3Ref vertex__cxx = Make_CxxbtVector3Ref(vertex);
    
    this.cxx_get_vertex(
        vertex_index,
        vertex__cxx
        );
    
    
    
    
}


btGImpactMeshShapePart_TrimeshPrimitiveManager.get_indices?(
    in
    SInt32
    face_index
    
    ,
    io
    UInt32
    i0
    
    ,
    io
    UInt32
    i1
    
    ,
    io
    UInt32
    i2
    
    
    )
{   
    
    
    CxxUInt32Ref i0__cxx = Make_CxxUInt32Ref(i0);
    
    CxxUInt32Ref i1__cxx = Make_CxxUInt32Ref(i1);
    
    CxxUInt32Ref i2__cxx = Make_CxxUInt32Ref(i2);
    
    this.cxx_get_indices(
        face_index,
        i0__cxx,
        i1__cxx,
        i2__cxx
        );
    
    
    
    
    
    
}


btGImpactMeshShapePart_TrimeshPrimitiveManager.get_bullet_triangle?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTriangleShapeEx
    triangle
    
    
    )
{   
    
    
    
    this.cxx_get_bullet_triangle(
        prim_index,
        triangle
        );
    
    
    
    
}

Boolean
btGImpactMeshShapePart_TrimeshPrimitiveManager.is_trimesh?(
    )
{   
    Boolean __res = 
    this.cxx_is_trimesh(
        );
    
    return __res;
}

SInt32
btGImpactMeshShapePart_TrimeshPrimitiveManager.get_vertex_count?(
    )
{   
    SInt32 __res = 
    this.cxx_get_vertex_count(
        );
    
    return __res;
}

SInt32
btGImpactMeshShapePart_TrimeshPrimitiveManager.get_primitive_count?(
    )
{   
    SInt32 __res = 
    this.cxx_get_primitive_count(
        );
    
    return __res;
}


btGImpactMeshShapePart_TrimeshPrimitiveManager.get_primitive_box?(
    in
    SInt32
    prim_index
    
    ,
    io
    btAABB
    primbox
    
    
    )
{   
    
    
    CxxbtAABBRef primbox__cxx = Make_CxxbtAABBRef(primbox);
    
    this.cxx_get_primitive_box(
        prim_index,
        primbox__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapePart_TrimeshPrimitiveManager] EDK[Fabric_EDK_KL_btGImpactMeshShapePart_TrimeshPrimitiveManager] LIB[btGImpactMeshShapePart::TrimeshPrimitiveManager *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactMeshShapePart_TrimeshPrimitiveManager.=(
    btGImpactMeshShapePart_TrimeshPrimitiveManager that
    ) = "Bullet2__btGImpactMeshShapePart_TrimeshPrimitiveManager__MU__simple_ass_op__d001143d171c90194a5d85b1a7aa0c3f";


/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart_TrimeshPrimitiveManager.appendDesc(io String string) {
  string += "btGImpactMeshShapePart_TrimeshPrimitiveManager:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGImpactMeshShape() = "Bullet2__btGImpactMeshShape__MU__empty_ctor__fb05fadaecbf2c60c6e0e6df197011a3";

/// \dfgPresetOmit
btGImpactMeshShape(
    btGImpactMeshShape that
    ) = "Bullet2__btGImpactMeshShape__MU__copy_ctor__30c525a827456a9d9538cb4aa250ab83";

/// \dfgPresetOmit
/// \internal
btGImpactMeshShape.__ctor(
    btStridingMeshInterface meshInterface
    ) = "Bullet2__btGImpactMeshShape__MU__ctor__79517e91076484d55b344bfe4b683287";

/// \dfgPresetOmit
btGImpactMeshShape(
    btStridingMeshInterface meshInterface
    ) {
    this.__ctor(
        meshInterface
        );
}

btGImpactMeshShape.cxx_delete() = "Bullet2__btGImpactMeshShape__MU__delete__0cd964ce386661f55b484e4be25b39fa";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btStridingMeshInterface
btGImpactMeshShape.cxx_getMeshInterface!(
    )
 = "Bullet2__btGImpactMeshShape__MU__meth_getMeshInterface__88ddc0e44e6c42a991eedaa01435f377";

/// \dfgPresetOmit
/// \internal
btStridingMeshInterface
btGImpactMeshShape.cxx_getMeshInterface?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getMeshInterface__6951a9b63a309370128c22728f030fec";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactMeshShape.cxx_getMeshPartCount?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getMeshPartCount__579e2a076e255937e880d3dd45507057";

/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart
btGImpactMeshShape.cxx_getMeshPart!(
    SInt32 index
    )
 = "Bullet2__btGImpactMeshShape__MU__meth_getMeshPart__766196b0de778bde6db3c5c7e7b8b50e";

/// \dfgPresetOmit
/// \internal
btGImpactMeshShapePart
btGImpactMeshShape.cxx_getMeshPart?(
    SInt32 index
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getMeshPart__ae655de79b9c1b8a2ba028da894c0058";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_setLocalScaling!(
    CxxbtVector3ConstRef scaling
    )
 = "Bullet2__btGImpactMeshShape__MU__meth_setLocalScaling__de6074b23b92cf01e88ea5235390c4ae";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_setMargin!(
    Float32 margin
    )
 = "Bullet2__btGImpactMeshShape__MU__meth_setMargin__9e7148657564257b5f8395e1a359c951";

//! Tells to this object that is needed to refit all the meshes
/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_postUpdate!(
    )
 = "Bullet2__btGImpactMeshShape__MU__meth_postUpdate__6e29e07e23b1803c5b155cba8321f445";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_calculateLocalInertia?(
    Float32 mass,
    CxxbtVector3Ref inertia
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_calculateLocalInertia__2444846cd67854e169a8bb14a95964b7";

//! Obtains the primitive manager
/// \dfgPresetOmit
/// \internal
btPrimitiveManagerBase
btGImpactMeshShape.cxx_getPrimitiveManager?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getPrimitiveManager__903ce0e558bd1cfda35759dc921cfb69";

//! Gets the number of children
/// \dfgPresetOmit
/// \internal
SInt32
btGImpactMeshShape.cxx_getNumChildShapes?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getNumChildShapes__9f93343d331d917efd43cd28975a2a99";

//! if true, then its children must get transforms.
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactMeshShape.cxx_childrenHasTransform?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_childrenHasTransform__31f9d596975d5fef643681a80564cd65";

//! Determines if this shape has triangles
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactMeshShape.cxx_needsRetrieveTriangles?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_needsRetrieveTriangles__b4c26663d860dcd365bd81af99a6a821";

//! Determines if this shape has tetrahedrons
/// \dfgPresetOmit
/// \internal
Boolean
btGImpactMeshShape.cxx_needsRetrieveTetrahedrons?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_needsRetrieveTetrahedrons__073204691f0ad59294dcefe1aaa96e33";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_getBulletTriangle?(
    SInt32 prim_index,
    btTriangleShapeEx triangle
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getBulletTriangle__6a53d1a40406e92f583e9b0a5e604189";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_getBulletTetrahedron?(
    SInt32 prim_index,
    btTetrahedronShapeEx tetrahedron
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getBulletTetrahedron__020a2b1b98802f5c572c806827bff3b8";

//! call when reading child shapes
/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_lockChildShapes?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_lockChildShapes__7a6ecb0bd87aeb144941d52df3fe9168";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_unlockChildShapes?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_unlockChildShapes__3addd550d1dedd042d1bde32d13926a4";

//! Retrieves the bound from a child
// /*!
// */
/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_getChildAabb?(
    SInt32 child_index,
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getChildAabb__ffdbd240fa43dfd36b49a1e764f88e09";

//! Gets the children
/// \dfgPresetOmit
/// \internal
btCollisionShape
btGImpactMeshShape.cxx_getChildShape!(
    SInt32 index
    )
 = "Bullet2__btGImpactMeshShape__MU__meth_getChildShape__341bc79ee78e20e60866625bf82790ee";

//! Gets the child
/// \dfgPresetOmit
/// \internal
btCollisionShape
btGImpactMeshShape.cxx_getChildShape?(
    SInt32 index
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getChildShape__ad41d8330ccaffdfbee10a7a02000d4a";

//! Gets the children transform
/// \dfgPresetOmit
/// \internal
btTransform
btGImpactMeshShape.cxx_getChildTransform?(
    SInt32 index
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getChildTransform__2922a5939e91e103cd4d93079735390d";

//! Sets the children transform
// /*!
// \post You must call updateBound() for update the box set.
// */
/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_setChildTransform!(
    SInt32 index,
    CxxbtTransformConstRef transform
    )
 = "Bullet2__btGImpactMeshShape__MU__meth_setChildTransform__fc5b2b993f58a39813f29c25cf7a4cfe";

/// \dfgPresetOmit
/// \internal
eGIMPACT_SHAPE_TYPE
btGImpactMeshShape.cxx_getGImpactShapeType?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getGImpactShapeType__87bbaccdf83f662166a1969b1b2499ee";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btGImpactMeshShape.cxx_getName?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_getName__aa82c10dc7e9d6cb33a3f04a1eebdad5";

/// \dfgPresetOmit
/// \internal

btGImpactMeshShape.cxx_rayTest?(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_rayTest__f51c911b671da5c8eac0e6e13aa221de";

/// \dfgPresetOmit
/// \internal
SInt32
btGImpactMeshShape.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btGImpactMeshShape__CO__meth_calculateSerializeBufferSize__137ed5c7dd54d3e4cee94ea25cf45358";

btStridingMeshInterface
btGImpactMeshShape.getMeshInterface!(
    )
{   
    btStridingMeshInterface __res = 
    this.cxx_getMeshInterface(
        );
    
    return __res;
}

//! if true, then its children must get transforms.
Boolean
btGImpactMeshShape.childrenHasTransform?(
    )
{   
    Boolean __res = 
    this.cxx_childrenHasTransform(
        );
    
    return __res;
}


btGImpactMeshShape.calculateLocalInertia?(
    in
    Float32
    mass
    
    ,
    io
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3Ref inertia__cxx = Make_CxxbtVector3Ref(inertia);
    
    this.cxx_calculateLocalInertia(
        mass,
        inertia__cxx
        );
    
    
    
    
}

//! Determines if this shape has tetrahedrons
Boolean
btGImpactMeshShape.needsRetrieveTetrahedrons?(
    )
{   
    Boolean __res = 
    this.cxx_needsRetrieveTetrahedrons(
        );
    
    return __res;
}

//! call when reading child shapes

btGImpactMeshShape.lockChildShapes?(
    )
{   
    
    this.cxx_lockChildShapes(
        );
    
    
}

//! Retrieves the bound from a child
// /*!
// */

btGImpactMeshShape.getChildAabb?(
    in
    SInt32
    child_index
    
    ,
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getChildAabb(
        child_index,
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
    
}


btGImpactMeshShape.getBulletTetrahedron?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTetrahedronShapeEx
    tetrahedron
    
    
    )
{   
    
    
    
    this.cxx_getBulletTetrahedron(
        prim_index,
        tetrahedron
        );
    
    
    
    
}


btGImpactMeshShape.setMargin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_setMargin(
        margin
        );
    
    
    
}


btGImpactMeshShape.setLocalScaling!(
    in
    btVector3
    scaling
    
    
    )
{   
    
    CxxbtVector3ConstRef scaling__cxx = Make_CxxbtVector3ConstRef(scaling);
    
    this.cxx_setLocalScaling(
        scaling__cxx
        );
    
    
    
}

btGImpactMeshShapePart
btGImpactMeshShape.getMeshPart!(
    in
    SInt32
    index
    
    
    )
{   
    
    btGImpactMeshShapePart __res = 
    this.cxx_getMeshPart(
        index
        );
    
    
    return __res;
}


btGImpactMeshShape.rayTest?(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        resultCallback
        );
    
    
    
    
    
}

//! Determines if this shape has triangles
Boolean
btGImpactMeshShape.needsRetrieveTriangles?(
    )
{   
    Boolean __res = 
    this.cxx_needsRetrieveTriangles(
        );
    
    return __res;
}

SInt32
btGImpactMeshShape.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btGImpactMeshShape.unlockChildShapes?(
    )
{   
    
    this.cxx_unlockChildShapes(
        );
    
    
}

String
btGImpactMeshShape.getName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getName(
        );
    
    return __res;
}

//! Obtains the primitive manager
btPrimitiveManagerBase
btGImpactMeshShape.getPrimitiveManager?(
    )
{   
    btPrimitiveManagerBase __res = 
    this.cxx_getPrimitiveManager(
        );
    
    return __res;
}

//! Gets the children transform
btTransform
btGImpactMeshShape.getChildTransform?(
    in
    SInt32
    index
    
    
    )
{   
    
    btTransform __res = 
    this.cxx_getChildTransform(
        index
        );
    
    
    return __res;
}

//! Gets the number of children
SInt32
btGImpactMeshShape.getNumChildShapes?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumChildShapes(
        );
    
    return __res;
}

//! Gets the children
btCollisionShape
btGImpactMeshShape.getChildShape!(
    in
    SInt32
    index
    
    
    )
{   
    
    btCollisionShape __res = 
    this.cxx_getChildShape(
        index
        );
    
    
    return __res;
}


btGImpactMeshShape.getBulletTriangle?(
    in
    SInt32
    prim_index
    
    ,
    in
    btTriangleShapeEx
    triangle
    
    
    )
{   
    
    
    
    this.cxx_getBulletTriangle(
        prim_index,
        triangle
        );
    
    
    
    
}

eGIMPACT_SHAPE_TYPE
btGImpactMeshShape.getGImpactShapeType?(
    )
{   
    eGIMPACT_SHAPE_TYPE __res = 
    this.cxx_getGImpactShapeType(
        );
    
    return __res;
}

SInt32
btGImpactMeshShape.getMeshPartCount?(
    )
{   
    SInt32 __res = 
    this.cxx_getMeshPartCount(
        );
    
    return __res;
}

//! Sets the children transform
// /*!
// \post You must call updateBound() for update the box set.
// */

btGImpactMeshShape.setChildTransform!(
    in
    SInt32
    index
    
    ,
    in
    btTransform
    transform
    
    
    )
{   
    
    
    CxxbtTransformConstRef transform__cxx = Make_CxxbtTransformConstRef(transform);
    
    this.cxx_setChildTransform(
        index,
        transform__cxx
        );
    
    
    
    
}

//! Tells to this object that is needed to refit all the meshes

btGImpactMeshShape.postUpdate!(
    )
{   
    
    this.cxx_postUpdate(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShape] EDK[Fabric_EDK_KL_btGImpactMeshShape] LIB[btGImpactMeshShape *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactMeshShape.=(
    btGImpactMeshShape that
    ) = "Bullet2__btGImpactMeshShape__MU__simple_ass_op__7b84daf201e1398cf31cb95d41e2ebde";


/// \dfgPresetOmit
/// \internal
btGImpactMeshShape.appendDesc(io String string) {
  string += "btGImpactMeshShape:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGImpactMeshShapeData] EDK[Fabric_EDK_KL_btGImpactMeshShapeData] LIB[btGImpactMeshShapeData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapeData] EDK[Fabric_EDK_KL_btGImpactMeshShapeData] LIB[btGImpactMeshShapeData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapeData] EDK[Fabric_EDK_KL_btGImpactMeshShapeData] LIB[btGImpactMeshShapeData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGImpactMeshShapeData() = "Bullet2__btGImpactMeshShapeData__MU__empty_ctor__8f93544072c1f936fff2c9e53a14918e";

/// \dfgPresetOmit
btGImpactMeshShapeData(
    btGImpactMeshShapeData that
    ) = "Bullet2__btGImpactMeshShapeData__MU__copy_ctor__287b399989063b5792907fab93c02b41";

btGImpactMeshShapeData.cxx_delete() = "Bullet2__btGImpactMeshShapeData__MU__delete__dad46a09b2f3b8d8da15f7f7dea1ad9c";

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapeData] EDK[Fabric_EDK_KL_btGImpactMeshShapeData] LIB[btGImpactMeshShapeData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapeData] EDK[Fabric_EDK_KL_btGImpactMeshShapeData] LIB[btGImpactMeshShapeData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGImpactMeshShapeData] EDK[Fabric_EDK_KL_btGImpactMeshShapeData] LIB[btGImpactMeshShapeData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGImpactMeshShapeData.=(
    btGImpactMeshShapeData that
    ) = "Bullet2__btGImpactMeshShapeData__MU__simple_ass_op__20a6de1e3a239c0593e752b10ef1a342";


/// \dfgPresetOmit
/// \internal
btGImpactMeshShapeData.appendDesc(io String string) {
  string += "btGImpactMeshShapeData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
GIM_TRIANGLE_CONTACT(
    GIM_TRIANGLE_CONTACT that
    ) = "Bullet2__GIM_TRIANGLE_CONTACT__MU__copy_ctor__dc7284be3e6f81808d6a89209ec1df93";

/// \dfgPresetOmit
/// \internal
GIM_TRIANGLE_CONTACT.__ctor(
    ) = "Bullet2__GIM_TRIANGLE_CONTACT__MU__ctor__7a4637783933fc90acacdf4e9ee369f6";

/// \dfgPresetOmit
GIM_TRIANGLE_CONTACT(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
GIM_TRIANGLE_CONTACT.__ctor(
    GIM_TRIANGLE_CONTACT other
    ) = "Bullet2__GIM_TRIANGLE_CONTACT__MU__ctor__21e0b120e876f0239c0c892d28e872a3";

/// \dfgPresetOmit
GIM_TRIANGLE_CONTACT(
    GIM_TRIANGLE_CONTACT other
    ) {
    this.__ctor(
        other
        );
}

GIM_TRIANGLE_CONTACT.cxx_delete() = "Bullet2__GIM_TRIANGLE_CONTACT__MU__delete__388837ae54d3c8bec44f44a2eb0e672b";

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

GIM_TRIANGLE_CONTACT.cxx_copy_from!(
    GIM_TRIANGLE_CONTACT other
    )
 = "Bullet2__GIM_TRIANGLE_CONTACT__MU__meth_copy_from__604a602493aa2df29471db5663a4d4b2";

//! classify points that are closer
/// \dfgPresetOmit
/// \internal

GIM_TRIANGLE_CONTACT.cxx_merge_points!(
    CxxbtVector4ConstRef plane,
    Float32 margin,
    CxxbtVector3ConstPtr points,
    SInt32 point_count
    )
 = "Bullet2__GIM_TRIANGLE_CONTACT__MU__meth_merge_points__7c5967b4a5874b639072e0b09d2e1846";


GIM_TRIANGLE_CONTACT.copy_from!(
    in
    GIM_TRIANGLE_CONTACT
    other
    
    
    )
{   
    
    
    this.cxx_copy_from(
        other
        );
    
    
    
}

//! classify points that are closer

GIM_TRIANGLE_CONTACT.merge_points!(
    in
    btVector4
    plane
    
    ,
    in
    Float32
    margin
    
    ,
    in
    btVector3
    points
    
    ,
    in
    SInt32
    point_count
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    
    
    CxxbtVector3ConstPtr points__cxx = Make_CxxbtVector3ConstPtr(points);
    
    
    this.cxx_merge_points(
        plane__cxx,
        margin,
        points__cxx,
        point_count
        );
    
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[GIM_TRIANGLE_CONTACT] EDK[Fabric_EDK_KL_GIM_TRIANGLE_CONTACT] LIB[GIM_TRIANGLE_CONTACT *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

GIM_TRIANGLE_CONTACT.=(
    GIM_TRIANGLE_CONTACT that
    ) = "Bullet2__GIM_TRIANGLE_CONTACT__MU__simple_ass_op__11c5db6207291b09be292a077a2f4425";


/// \dfgPresetOmit
/// \internal
GIM_TRIANGLE_CONTACT.appendDesc(io String string) {
  string += "GIM_TRIANGLE_CONTACT:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btPrimitiveTriangle(
    btPrimitiveTriangle that
    ) = "Bullet2__btPrimitiveTriangle__MU__copy_ctor__c8bcba2c3c20d380ab15ae1df19b2a0c";

/// \dfgPresetOmit
/// \internal
btPrimitiveTriangle.__ctor(
    ) = "Bullet2__btPrimitiveTriangle__MU__ctor__ffb99f7d0ecedef3549acc988c45aa39";

/// \dfgPresetOmit
btPrimitiveTriangle(
    ) {
    this.__ctor(
        );
}

btPrimitiveTriangle.cxx_delete() = "Bullet2__btPrimitiveTriangle__MU__delete__089da0da08dc68a6c4a8e22871d229f5";

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btPrimitiveTriangle.cxx_buildTriPlane!(
    )
 = "Bullet2__btPrimitiveTriangle__MU__meth_buildTriPlane__6758d35143abf5482509e1cfb024159f";

//! Test if triangles could collide
/// \dfgPresetOmit
/// \internal
Boolean
btPrimitiveTriangle.cxx_overlap_test_conservative!(
    btPrimitiveTriangle other
    )
 = "Bullet2__btPrimitiveTriangle__MU__meth_overlap_test_conservative__edbf202f0297df38ac15efd6a14be5df";

//! Calcs the plane which is paralele to the edge and perpendicular to the triangle plane
// /*!
// \pre this triangle must have its plane calculated.
// */
/// \dfgPresetOmit
/// \internal

btPrimitiveTriangle.cxx_get_edge_plane?(
    SInt32 edge_index,
    CxxbtVector4Ref plane
    )
 = "Bullet2__btPrimitiveTriangle__CO__meth_get_edge_plane__6fd0acbcac0b470294ec4c0b791d2e2f";

/// \dfgPresetOmit
/// \internal

btPrimitiveTriangle.cxx_applyTransform!(
    CxxbtTransformConstRef t
    )
 = "Bullet2__btPrimitiveTriangle__MU__meth_applyTransform__4c9e916a5f5a99fcfee0800772de0931";

//! Clips the triangle against this
// /*!
// \pre clipped_points must have MAX_TRI_CLIPPING size, and this triangle must have its plane calculated.
// \return the number of clipped points
// */
/// \dfgPresetOmit
/// \internal
SInt32
btPrimitiveTriangle.cxx_clip_triangle!(
    btPrimitiveTriangle other,
    CxxbtVector3Ptr clipped_points
    )
 = "Bullet2__btPrimitiveTriangle__MU__meth_clip_triangle__59adbc9c9eb7062dbff2c077ab21a80c";

//! Find collision using the clipping method
// /*!
// \pre this triangle and other must have their triangles calculated
// */
/// \dfgPresetOmit
/// \internal
Boolean
btPrimitiveTriangle.cxx_find_triangle_collision_clip_method!(
    btPrimitiveTriangle other,
    GIM_TRIANGLE_CONTACT contacts
    )
 = "Bullet2__btPrimitiveTriangle__MU__meth_find_triangle_collision_clip_method__0b8b3d6ee5165985f9a4b5b6f3d6f1b0";

//! Find collision using the clipping method
// /*!
// \pre this triangle and other must have their triangles calculated
// */
Boolean
btPrimitiveTriangle.find_triangle_collision_clip_method!(
    in
    btPrimitiveTriangle
    other
    
    ,
    in
    GIM_TRIANGLE_CONTACT
    contacts
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_find_triangle_collision_clip_method(
        other,
        contacts
        );
    
    
    
    return __res;
}

//! Test if triangles could collide
Boolean
btPrimitiveTriangle.overlap_test_conservative!(
    in
    btPrimitiveTriangle
    other
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_overlap_test_conservative(
        other
        );
    
    
    return __res;
}


btPrimitiveTriangle.buildTriPlane!(
    )
{   
    
    this.cxx_buildTriPlane(
        );
    
    
}

//! Clips the triangle against this
// /*!
// \pre clipped_points must have MAX_TRI_CLIPPING size, and this triangle must have its plane calculated.
// \return the number of clipped points
// */
SInt32
btPrimitiveTriangle.clip_triangle!(
    in
    btPrimitiveTriangle
    other
    
    ,
    io
    btVector3
    clipped_points
    
    
    )
{   
    
    
    CxxbtVector3Ptr clipped_points__cxx = Make_CxxbtVector3Ptr(clipped_points);
    SInt32 __res = 
    this.cxx_clip_triangle(
        other,
        clipped_points__cxx
        );
    
    
    
    return __res;
}

//! Calcs the plane which is paralele to the edge and perpendicular to the triangle plane
// /*!
// \pre this triangle must have its plane calculated.
// */

btPrimitiveTriangle.get_edge_plane?(
    in
    SInt32
    edge_index
    
    ,
    io
    btVector4
    plane
    
    
    )
{   
    
    
    CxxbtVector4Ref plane__cxx = Make_CxxbtVector4Ref(plane);
    
    this.cxx_get_edge_plane(
        edge_index,
        plane__cxx
        );
    
    
    
    
}


btPrimitiveTriangle.applyTransform!(
    in
    btTransform
    t
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    this.cxx_applyTransform(
        t__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPrimitiveTriangle] EDK[Fabric_EDK_KL_btPrimitiveTriangle] LIB[btPrimitiveTriangle *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPrimitiveTriangle.=(
    btPrimitiveTriangle that
    ) = "Bullet2__btPrimitiveTriangle__MU__simple_ass_op__30ef3c73a6a7b0a218636db42c0a4b1e";


/// \dfgPresetOmit
/// \internal
btPrimitiveTriangle.appendDesc(io String string) {
  string += "btPrimitiveTriangle:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btTriangleShapeEx(
    btTriangleShapeEx that
    ) = "Bullet2__btTriangleShapeEx__MU__copy_ctor__93e98d0a03a347ca4841128f89922c5e";

/// \dfgPresetOmit
/// \internal
btTriangleShapeEx.__ctor(
    ) = "Bullet2__btTriangleShapeEx__MU__ctor__910cbf6c17dccaa98a98367419b44768";

/// \dfgPresetOmit
btTriangleShapeEx(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btTriangleShapeEx.__ctor(
    CxxbtVector3ConstRef p0,
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2
    ) = "Bullet2__btTriangleShapeEx__MU__ctor__17b6f99381d425f8111350c6bc1ffa99";

/// \dfgPresetOmit
btTriangleShapeEx(
    CxxbtVector3ConstRef p0,
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2
    ) {
    this.__ctor(
        p0,
        p1,
        p2
        );
}

/// \dfgPresetOmit
/// \internal
btTriangleShapeEx.__ctor(
    btTriangleShapeEx other
    ) = "Bullet2__btTriangleShapeEx__MU__ctor__91a31f05bc517bcecde3557c28706a07";

/// \dfgPresetOmit
btTriangleShapeEx(
    btTriangleShapeEx other
    ) {
    this.__ctor(
        other
        );
}

btTriangleShapeEx(
    in
    btVector3
    p0
    
    ,
    in
    btVector3
    p1
    
    ,
    in
    btVector3
    p2
    
    
    ) {
    
    CxxbtVector3ConstRef p0__cxx = Make_CxxbtVector3ConstRef(p0);
    
    CxxbtVector3ConstRef p1__cxx = Make_CxxbtVector3ConstRef(p1);
    
    CxxbtVector3ConstRef p2__cxx = Make_CxxbtVector3ConstRef(p2);
    this.__ctor(
        p0__cxx,
        p1__cxx,
        p2__cxx
        );
    
    
    
}

btTriangleShapeEx.cxx_delete() = "Bullet2__btTriangleShapeEx__MU__delete__9b3c709246ec091b86e65b8a84db3e00";

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btTriangleShapeEx.cxx_getAabb?(
    CxxbtTransformConstRef t,
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btTriangleShapeEx__CO__meth_getAabb__74e727b24ec4fc3ba65a79bf7d13c6cb";

/// \dfgPresetOmit
/// \internal

btTriangleShapeEx.cxx_applyTransform!(
    CxxbtTransformConstRef t
    )
 = "Bullet2__btTriangleShapeEx__MU__meth_applyTransform__346107e02edaafe3793e54680ae8dd9b";

/// \dfgPresetOmit
/// \internal

btTriangleShapeEx.cxx_buildTriPlane?(
    CxxbtVector4Ref plane
    )
 = "Bullet2__btTriangleShapeEx__CO__meth_buildTriPlane__79d0554ac484bb05117f61c34d1c1633";

/// \dfgPresetOmit
/// \internal
Boolean
btTriangleShapeEx.cxx_overlap_test_conservative!(
    btTriangleShapeEx other
    )
 = "Bullet2__btTriangleShapeEx__MU__meth_overlap_test_conservative__3a432aa61b18b6dd974eaf4405d0a668";


btTriangleShapeEx.buildTriPlane?(
    io
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4Ref plane__cxx = Make_CxxbtVector4Ref(plane);
    
    this.cxx_buildTriPlane(
        plane__cxx
        );
    
    
    
}


btTriangleShapeEx.applyTransform!(
    in
    btTransform
    t
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    this.cxx_applyTransform(
        t__cxx
        );
    
    
    
}


btTriangleShapeEx.getAabb?(
    in
    btTransform
    t
    
    ,
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        t__cxx,
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
    
}

Boolean
btTriangleShapeEx.overlap_test_conservative!(
    in
    btTriangleShapeEx
    other
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_overlap_test_conservative(
        other
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriangleShapeEx] EDK[Fabric_EDK_KL_btTriangleShapeEx] LIB[btTriangleShapeEx *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTriangleShapeEx.=(
    btTriangleShapeEx that
    ) = "Bullet2__btTriangleShapeEx__MU__simple_ass_op__92c0b37adf9e099b8346d76c3b0e4877";


/// \dfgPresetOmit
/// \internal
btTriangleShapeEx.appendDesc(io String string) {
  string += "btTriangleShapeEx:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btMinkowskiPenetrationDepthSolver] EDK[Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver] LIB[btMinkowskiPenetrationDepthSolver]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiPenetrationDepthSolver] EDK[Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver] LIB[btMinkowskiPenetrationDepthSolver]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiPenetrationDepthSolver] EDK[Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver] LIB[btMinkowskiPenetrationDepthSolver]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMinkowskiPenetrationDepthSolver() = "Bullet2__btMinkowskiPenetrationDepthSolver__MU__empty_ctor__f955425ccb1f88750c880f1dafcd7728";

/// \dfgPresetOmit
btMinkowskiPenetrationDepthSolver(
    btMinkowskiPenetrationDepthSolver that
    ) = "Bullet2__btMinkowskiPenetrationDepthSolver__MU__copy_ctor__d81dcc17b4fcc4ec50b804241167f545";

~btMinkowskiPenetrationDepthSolver() = "Bullet2__btMinkowskiPenetrationDepthSolver__MU__dtor__61ed5660dc24ddf2fc9835c17a809497";

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiPenetrationDepthSolver] EDK[Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver] LIB[btMinkowskiPenetrationDepthSolver]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiPenetrationDepthSolver] EDK[Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver] LIB[btMinkowskiPenetrationDepthSolver]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMinkowskiPenetrationDepthSolver] EDK[Fabric_EDK_KL_btMinkowskiPenetrationDepthSolver] LIB[btMinkowskiPenetrationDepthSolver]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMinkowskiPenetrationDepthSolver.=(
    btMinkowskiPenetrationDepthSolver that
    ) = "Bullet2__btMinkowskiPenetrationDepthSolver__MU__simple_ass_op__52c34419e2dc6c1ef8baaf257f93849c";



/// \dfgPresetOmit
/// \internal
btMinkowskiPenetrationDepthSolver.appendDesc(io String string) {
  string += "btMinkowskiPenetrationDepthSolver:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btUsageBitfield(
    btUsageBitfield that
    ) = "Bullet2__btUsageBitfield__MU__copy_ctor__352c084e4a853361dd4681cf741c3f91";

/// \dfgPresetOmit
/// \internal
btUsageBitfield.__ctor(
    ) = "Bullet2__btUsageBitfield__MU__ctor__54f782b7bc10b4f25e8b146d7c41f5c9";

/// \dfgPresetOmit
btUsageBitfield(
    ) {
    this.__ctor(
        );
}

btUsageBitfield.cxx_delete() = "Bullet2__btUsageBitfield__MU__delete__c74f8ef551f1a4df7cc9b282420f697d";

//////////////////////////////////////////////////////////////////////////////
// KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btUsageBitfield.cxx_reset!(
    )
 = "Bullet2__btUsageBitfield__MU__meth_reset__1710f9c0f4523f53d25bf9f14220bb89";


btUsageBitfield.reset!(
    )
{   
    
    this.cxx_reset(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUsageBitfield] EDK[Fabric_EDK_KL_btUsageBitfield] LIB[btUsageBitfield *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btUsageBitfield.=(
    btUsageBitfield that
    ) = "Bullet2__btUsageBitfield__MU__simple_ass_op__12962b5c17dc8ca48e3e220bc0f93e19";


/// \dfgPresetOmit
/// \internal
btUsageBitfield.appendDesc(io String string) {
  string += "btUsageBitfield:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSubSimplexClosestResult() = "Bullet2__btSubSimplexClosestResult__MU__empty_ctor__5cf7e228eee5ac8e35b3de725ab2cc32";

/// \dfgPresetOmit
btSubSimplexClosestResult(
    btSubSimplexClosestResult that
    ) = "Bullet2__btSubSimplexClosestResult__MU__copy_ctor__8cfb4445426a7457fd2a1c8fcd7aaab3";

btSubSimplexClosestResult.cxx_delete() = "Bullet2__btSubSimplexClosestResult__MU__delete__8d35de4f4edc890056b81fc79e4da5cf";

//////////////////////////////////////////////////////////////////////////////
// KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSubSimplexClosestResult.cxx_reset!(
    )
 = "Bullet2__btSubSimplexClosestResult__MU__meth_reset__10ff39568930d64bc027f8fe979c2693";

/// \dfgPresetOmit
/// \internal
Boolean
btSubSimplexClosestResult.cxx_isValid!(
    )
 = "Bullet2__btSubSimplexClosestResult__MU__meth_isValid__e0eaadc76cd174e35af2ffb8ea210cbf";

/// \dfgPresetOmit
/// \internal

btSubSimplexClosestResult.cxx_setBarycentricCoordinates!(
    )
 = "Bullet2__btSubSimplexClosestResult__MU__meth_setBarycentricCoordinates__0478b937415236feec1f03201ad3f12f";

/// \dfgPresetOmit
/// \internal

btSubSimplexClosestResult.cxx_setBarycentricCoordinates!(
    Float32 a
    )
 = "Bullet2__btSubSimplexClosestResult__MU__meth_setBarycentricCoordinates__d954f534aeb5e1fdc181d46dc8ca74c3";

/// \dfgPresetOmit
/// \internal

btSubSimplexClosestResult.cxx_setBarycentricCoordinates!(
    Float32 a,
    Float32 b
    )
 = "Bullet2__btSubSimplexClosestResult__MU__meth_setBarycentricCoordinates__6b7be6b78ee800a13acbdc531ee6ed55";

/// \dfgPresetOmit
/// \internal

btSubSimplexClosestResult.cxx_setBarycentricCoordinates!(
    Float32 a,
    Float32 b,
    Float32 c
    )
 = "Bullet2__btSubSimplexClosestResult__MU__meth_setBarycentricCoordinates__48fe74ecd8364e5e7b56521bec45af4c";

/// \dfgPresetOmit
/// \internal

btSubSimplexClosestResult.cxx_setBarycentricCoordinates!(
    Float32 a,
    Float32 b,
    Float32 c,
    Float32 d
    )
 = "Bullet2__btSubSimplexClosestResult__MU__meth_setBarycentricCoordinates__359ba5751c4fd5527e896a7428d5972e";


btSubSimplexClosestResult.setBarycentricCoordinates!(
    in
    Float32
    a
    
    ,
    in
    Float32
    b
    
    ,
    in
    Float32
    c
    
    
    )
{   
    
    
    
    
    this.cxx_setBarycentricCoordinates(
        a,
        b,
        c
        );
    
    
    
    
    
}


btSubSimplexClosestResult.setBarycentricCoordinates!(
    in
    Float32
    a
    
    
    )
{   
    
    
    this.cxx_setBarycentricCoordinates(
        a
        );
    
    
    
}

Boolean
btSubSimplexClosestResult.isValid!(
    )
{   
    Boolean __res = 
    this.cxx_isValid(
        );
    
    return __res;
}


btSubSimplexClosestResult.reset!(
    )
{   
    
    this.cxx_reset(
        );
    
    
}


btSubSimplexClosestResult.setBarycentricCoordinates!(
    in
    Float32
    a
    
    ,
    in
    Float32
    b
    
    
    )
{   
    
    
    
    this.cxx_setBarycentricCoordinates(
        a,
        b
        );
    
    
    
    
}


btSubSimplexClosestResult.setBarycentricCoordinates!(
    in
    Float32
    a
    
    ,
    in
    Float32
    b
    
    ,
    in
    Float32
    c
    
    ,
    in
    Float32
    d
    
    
    )
{   
    
    
    
    
    
    this.cxx_setBarycentricCoordinates(
        a,
        b,
        c,
        d
        );
    
    
    
    
    
    
}


btSubSimplexClosestResult.setBarycentricCoordinates!(
    )
{   
    
    this.cxx_setBarycentricCoordinates(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSubSimplexClosestResult] EDK[Fabric_EDK_KL_btSubSimplexClosestResult] LIB[btSubSimplexClosestResult *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSubSimplexClosestResult.=(
    btSubSimplexClosestResult that
    ) = "Bullet2__btSubSimplexClosestResult__MU__simple_ass_op__9b0e9156b46f0bcd2b526ddbf73ec125";


/// \dfgPresetOmit
/// \internal
btSubSimplexClosestResult.appendDesc(io String string) {
  string += "btSubSimplexClosestResult:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVoronoiSimplexSolver(
    btVoronoiSimplexSolver that
    ) = "Bullet2__btVoronoiSimplexSolver__MU__copy_ctor__aa18cc9b03f3271af6c06fe1d292e320";

/// \dfgPresetOmit
/// \internal
btVoronoiSimplexSolver.__ctor(
    ) = "Bullet2__btVoronoiSimplexSolver__MU__ctor__d9d4a785643b6c5c8931ecf6064c5665";

/// \dfgPresetOmit
btVoronoiSimplexSolver(
    ) {
    this.__ctor(
        );
}

btVoronoiSimplexSolver.cxx_delete() = "Bullet2__btVoronoiSimplexSolver__MU__delete__ef8dc456577ea5bb4ef986319b711ede";

//////////////////////////////////////////////////////////////////////////////
// KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btVoronoiSimplexSolver.cxx_removeVertex!(
    SInt32 index
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_removeVertex__b75f582592c95a1ad7ebf4166811c3aa";

/// \dfgPresetOmit
/// \internal

btVoronoiSimplexSolver.cxx_reduceVertices!(
    btUsageBitfield usedVerts
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_reduceVertices__f792a3cb791371dcab4ca0fb65d1376c";

/// \dfgPresetOmit
/// \internal
Boolean
btVoronoiSimplexSolver.cxx_updateClosestVectorAndPoints!(
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_updateClosestVectorAndPoints__9643d2f21551cae39f5720788bbe02fb";

/// \dfgPresetOmit
/// \internal
Boolean
btVoronoiSimplexSolver.cxx_closestPtPointTetrahedron!(
    CxxbtVector3ConstRef p,
    CxxbtVector3ConstRef a,
    CxxbtVector3ConstRef b,
    CxxbtVector3ConstRef c,
    CxxbtVector3ConstRef d,
    btSubSimplexClosestResult finalResult
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_closestPtPointTetrahedron__f1a312b36573f79ea00bee4c2b49a6e9";

/// \dfgPresetOmit
/// \internal
SInt32
btVoronoiSimplexSolver.cxx_pointOutsideOfPlane!(
    CxxbtVector3ConstRef p,
    CxxbtVector3ConstRef a,
    CxxbtVector3ConstRef b,
    CxxbtVector3ConstRef c,
    CxxbtVector3ConstRef d
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_pointOutsideOfPlane__cbb25cb3f3dd89c2f1b9a007dc535520";

/// \dfgPresetOmit
/// \internal
Boolean
btVoronoiSimplexSolver.cxx_closestPtPointTriangle!(
    CxxbtVector3ConstRef p,
    CxxbtVector3ConstRef a,
    CxxbtVector3ConstRef b,
    CxxbtVector3ConstRef c,
    btSubSimplexClosestResult result
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_closestPtPointTriangle__95d626b65e5f5c6f09d47d707ed35f6b";

/// \dfgPresetOmit
/// \internal

btVoronoiSimplexSolver.cxx_reset!(
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_reset__b9d4dfab0d1ead4d8b517de8c542b4fb";

/// \dfgPresetOmit
/// \internal

btVoronoiSimplexSolver.cxx_addVertex!(
    CxxbtVector3ConstRef w,
    CxxbtVector3ConstRef p,
    CxxbtVector3ConstRef q
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_addVertex__70a77fea51df9ee76609c8e78118f434";

/// \dfgPresetOmit
/// \internal

btVoronoiSimplexSolver.cxx_setEqualVertexThreshold!(
    Float32 threshold
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_setEqualVertexThreshold__68c75282dfcb295049c9d84ab76a1bd5";

/// \dfgPresetOmit
/// \internal
Float32
btVoronoiSimplexSolver.cxx_getEqualVertexThreshold?(
    )
 = "Bullet2__btVoronoiSimplexSolver__CO__meth_getEqualVertexThreshold__8105a5cf5e49602df648f8dcf0f09608";

/// \dfgPresetOmit
/// \internal
Boolean
btVoronoiSimplexSolver.cxx_closest!(
    CxxbtVector3Ref v
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_closest__1c9fc37b0ab8fe336dba8745ed56507a";

/// \dfgPresetOmit
/// \internal
Float32
btVoronoiSimplexSolver.cxx_maxVertex!(
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_maxVertex__ed910572f3b81b81ff303831adb9bab5";

/// \dfgPresetOmit
/// \internal
Boolean
btVoronoiSimplexSolver.cxx_fullSimplex?(
    )
 = "Bullet2__btVoronoiSimplexSolver__CO__meth_fullSimplex__88a1ad3724f9f01c7589ab22ab405dc4";

/// \dfgPresetOmit
/// \internal
SInt32
btVoronoiSimplexSolver.cxx_getSimplex?(
    CxxbtVector3Ptr pBuf,
    CxxbtVector3Ptr qBuf,
    CxxbtVector3Ptr yBuf
    )
 = "Bullet2__btVoronoiSimplexSolver__CO__meth_getSimplex__06c18f1759bc35ce792abbab6b5526b7";

/// \dfgPresetOmit
/// \internal
Boolean
btVoronoiSimplexSolver.cxx_inSimplex!(
    CxxbtVector3ConstRef w
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_inSimplex__d0e15c142e263871191cf03111a721f9";

/// \dfgPresetOmit
/// \internal

btVoronoiSimplexSolver.cxx_backup_closest!(
    CxxbtVector3Ref v
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_backup_closest__b4984e3921bdb072600ba63c7bc60628";

/// \dfgPresetOmit
/// \internal
Boolean
btVoronoiSimplexSolver.cxx_emptySimplex?(
    )
 = "Bullet2__btVoronoiSimplexSolver__CO__meth_emptySimplex__1ca040c066b5948a50d0602751890100";

/// \dfgPresetOmit
/// \internal

btVoronoiSimplexSolver.cxx_compute_points!(
    CxxbtVector3Ref p1,
    CxxbtVector3Ref p2
    )
 = "Bullet2__btVoronoiSimplexSolver__MU__meth_compute_points__5241585ffdc2a1914681182f99d67423";

/// \dfgPresetOmit
/// \internal
SInt32
btVoronoiSimplexSolver.cxx_numVertices?(
    )
 = "Bullet2__btVoronoiSimplexSolver__CO__meth_numVertices__c391703782919d4a8017fecd383b18b6";

Boolean
btVoronoiSimplexSolver.closestPtPointTetrahedron!(
    in
    btVector3
    p
    
    ,
    in
    btVector3
    a
    
    ,
    in
    btVector3
    b
    
    ,
    in
    btVector3
    c
    
    ,
    in
    btVector3
    d
    
    ,
    in
    btSubSimplexClosestResult
    finalResult
    
    
    )
{   
    
    CxxbtVector3ConstRef p__cxx = Make_CxxbtVector3ConstRef(p);
    
    CxxbtVector3ConstRef a__cxx = Make_CxxbtVector3ConstRef(a);
    
    CxxbtVector3ConstRef b__cxx = Make_CxxbtVector3ConstRef(b);
    
    CxxbtVector3ConstRef c__cxx = Make_CxxbtVector3ConstRef(c);
    
    CxxbtVector3ConstRef d__cxx = Make_CxxbtVector3ConstRef(d);
    
    Boolean __res = 
    this.cxx_closestPtPointTetrahedron(
        p__cxx,
        a__cxx,
        b__cxx,
        c__cxx,
        d__cxx,
        finalResult
        );
    
    
    
    
    
    
    
    return __res;
}

Boolean
btVoronoiSimplexSolver.updateClosestVectorAndPoints!(
    )
{   
    Boolean __res = 
    this.cxx_updateClosestVectorAndPoints(
        );
    
    return __res;
}


btVoronoiSimplexSolver.reduceVertices!(
    in
    btUsageBitfield
    usedVerts
    
    
    )
{   
    
    
    this.cxx_reduceVertices(
        usedVerts
        );
    
    
    
}

Boolean
btVoronoiSimplexSolver.emptySimplex?(
    )
{   
    Boolean __res = 
    this.cxx_emptySimplex(
        );
    
    return __res;
}

Boolean
btVoronoiSimplexSolver.inSimplex!(
    in
    btVector3
    w
    
    
    )
{   
    
    CxxbtVector3ConstRef w__cxx = Make_CxxbtVector3ConstRef(w);
    Boolean __res = 
    this.cxx_inSimplex(
        w__cxx
        );
    
    
    return __res;
}

Float32
btVoronoiSimplexSolver.maxVertex!(
    )
{   
    Float32 __res = 
    this.cxx_maxVertex(
        );
    
    return __res;
}


btVoronoiSimplexSolver.addVertex!(
    in
    btVector3
    w
    
    ,
    in
    btVector3
    p
    
    ,
    in
    btVector3
    q
    
    
    )
{   
    
    CxxbtVector3ConstRef w__cxx = Make_CxxbtVector3ConstRef(w);
    
    CxxbtVector3ConstRef p__cxx = Make_CxxbtVector3ConstRef(p);
    
    CxxbtVector3ConstRef q__cxx = Make_CxxbtVector3ConstRef(q);
    
    this.cxx_addVertex(
        w__cxx,
        p__cxx,
        q__cxx
        );
    
    
    
    
    
}


btVoronoiSimplexSolver.backup_closest!(
    io
    btVector3
    v
    
    
    )
{   
    
    CxxbtVector3Ref v__cxx = Make_CxxbtVector3Ref(v);
    
    this.cxx_backup_closest(
        v__cxx
        );
    
    
    
}


btVoronoiSimplexSolver.reset!(
    )
{   
    
    this.cxx_reset(
        );
    
    
}

Boolean
btVoronoiSimplexSolver.closest!(
    io
    btVector3
    v
    
    
    )
{   
    
    CxxbtVector3Ref v__cxx = Make_CxxbtVector3Ref(v);
    Boolean __res = 
    this.cxx_closest(
        v__cxx
        );
    
    
    return __res;
}

SInt32
btVoronoiSimplexSolver.getSimplex?(
    io
    btVector3
    pBuf
    
    ,
    io
    btVector3
    qBuf
    
    ,
    io
    btVector3
    yBuf
    
    
    )
{   
    
    CxxbtVector3Ptr pBuf__cxx = Make_CxxbtVector3Ptr(pBuf);
    
    CxxbtVector3Ptr qBuf__cxx = Make_CxxbtVector3Ptr(qBuf);
    
    CxxbtVector3Ptr yBuf__cxx = Make_CxxbtVector3Ptr(yBuf);
    SInt32 __res = 
    this.cxx_getSimplex(
        pBuf__cxx,
        qBuf__cxx,
        yBuf__cxx
        );
    
    
    
    
    return __res;
}


btVoronoiSimplexSolver.setEqualVertexThreshold!(
    in
    Float32
    threshold
    
    
    )
{   
    
    
    this.cxx_setEqualVertexThreshold(
        threshold
        );
    
    
    
}

Float32
btVoronoiSimplexSolver.getEqualVertexThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getEqualVertexThreshold(
        );
    
    return __res;
}


btVoronoiSimplexSolver.removeVertex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_removeVertex(
        index
        );
    
    
    
}

Boolean
btVoronoiSimplexSolver.closestPtPointTriangle!(
    in
    btVector3
    p
    
    ,
    in
    btVector3
    a
    
    ,
    in
    btVector3
    b
    
    ,
    in
    btVector3
    c
    
    ,
    in
    btSubSimplexClosestResult
    result
    
    
    )
{   
    
    CxxbtVector3ConstRef p__cxx = Make_CxxbtVector3ConstRef(p);
    
    CxxbtVector3ConstRef a__cxx = Make_CxxbtVector3ConstRef(a);
    
    CxxbtVector3ConstRef b__cxx = Make_CxxbtVector3ConstRef(b);
    
    CxxbtVector3ConstRef c__cxx = Make_CxxbtVector3ConstRef(c);
    
    Boolean __res = 
    this.cxx_closestPtPointTriangle(
        p__cxx,
        a__cxx,
        b__cxx,
        c__cxx,
        result
        );
    
    
    
    
    
    
    return __res;
}


btVoronoiSimplexSolver.compute_points!(
    io
    btVector3
    p1
    
    ,
    io
    btVector3
    p2
    
    
    )
{   
    
    CxxbtVector3Ref p1__cxx = Make_CxxbtVector3Ref(p1);
    
    CxxbtVector3Ref p2__cxx = Make_CxxbtVector3Ref(p2);
    
    this.cxx_compute_points(
        p1__cxx,
        p2__cxx
        );
    
    
    
    
}

Boolean
btVoronoiSimplexSolver.fullSimplex?(
    )
{   
    Boolean __res = 
    this.cxx_fullSimplex(
        );
    
    return __res;
}

SInt32
btVoronoiSimplexSolver.numVertices?(
    )
{   
    SInt32 __res = 
    this.cxx_numVertices(
        );
    
    return __res;
}

SInt32
btVoronoiSimplexSolver.pointOutsideOfPlane!(
    in
    btVector3
    p
    
    ,
    in
    btVector3
    a
    
    ,
    in
    btVector3
    b
    
    ,
    in
    btVector3
    c
    
    ,
    in
    btVector3
    d
    
    
    )
{   
    
    CxxbtVector3ConstRef p__cxx = Make_CxxbtVector3ConstRef(p);
    
    CxxbtVector3ConstRef a__cxx = Make_CxxbtVector3ConstRef(a);
    
    CxxbtVector3ConstRef b__cxx = Make_CxxbtVector3ConstRef(b);
    
    CxxbtVector3ConstRef c__cxx = Make_CxxbtVector3ConstRef(c);
    
    CxxbtVector3ConstRef d__cxx = Make_CxxbtVector3ConstRef(d);
    SInt32 __res = 
    this.cxx_pointOutsideOfPlane(
        p__cxx,
        a__cxx,
        b__cxx,
        c__cxx,
        d__cxx
        );
    
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVoronoiSimplexSolver] EDK[Fabric_EDK_KL_btVoronoiSimplexSolver] LIB[btVoronoiSimplexSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btVoronoiSimplexSolver.=(
    btVoronoiSimplexSolver that
    ) = "Bullet2__btVoronoiSimplexSolver__MU__simple_ass_op__b668f158b115780706973b39651c1717";


/// \dfgPresetOmit
/// \internal
btVoronoiSimplexSolver.appendDesc(io String string) {
  string += "btVoronoiSimplexSolver:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btCharacterControllerInterface(
    btCharacterControllerInterface that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btCharacterControllerInterface.cxx_delete() = "Bullet2__btCharacterControllerInterface__MU__delete__52edb5ec53372bd50b5a501d59262c5c";

//////////////////////////////////////////////////////////////////////////////
// KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_setWalkDirection!(
    CxxbtVector3ConstRef walkDirection
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_setWalkDirection__6b916f0bad3976507aa9c2fb8ecae8be";

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_setVelocityForTimeInterval!(
    CxxbtVector3ConstRef velocity,
    Float32 timeInterval
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_setVelocityForTimeInterval__5116129c26c50acb58a8c6fff370313d";

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_reset!(
    btCollisionWorld collisionWorld
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_reset__70cde843b43f3298fec707ab5e413852";

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_warp!(
    CxxbtVector3ConstRef origin
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_warp__93378a158877562c61df424c71160704";

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_preStep!(
    btCollisionWorld collisionWorld
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_preStep__e00d24368b7ca65e9b851a0bf0c1566f";

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_playerStep!(
    btCollisionWorld collisionWorld,
    Float32 dt
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_playerStep__c464214a66a1efaac48885c30d29ae68";

/// \dfgPresetOmit
/// \internal
Boolean
btCharacterControllerInterface.cxx_canJump?(
    )
 = "Bullet2__btCharacterControllerInterface__CO__meth_canJump__989234390c8e438a736d0be82407c3c4";

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_jump!(
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_jump__0d8b12c10a2987a9f0160530023c9da6";

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_jump!(
    CxxbtVector3ConstRef dir
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_jump__3afe5da19a75ebef125c1aa6b36485c0";

/// \dfgPresetOmit
/// \internal
Boolean
btCharacterControllerInterface.cxx_onGround?(
    )
 = "Bullet2__btCharacterControllerInterface__CO__meth_onGround__2a1d051084a4dc85a485e626718b6bb9";

/// \dfgPresetOmit
/// \internal

btCharacterControllerInterface.cxx_setUpInterpolate!(
    Boolean value
    )
 = "Bullet2__btCharacterControllerInterface__MU__meth_setUpInterpolate__2abaf8c0cb114b070d62e72354e3d728";


btCharacterControllerInterface.preStep!(
    in
    btCollisionWorld
    collisionWorld
    
    
    )
{   
    
    
    this.cxx_preStep(
        collisionWorld
        );
    
    
    
}


btCharacterControllerInterface.jump!(
    )
{   
    
    this.cxx_jump(
        );
    
    
}


btCharacterControllerInterface.setUpInterpolate!(
    in
    Boolean
    value
    
    
    )
{   
    
    
    this.cxx_setUpInterpolate(
        value
        );
    
    
    
}


btCharacterControllerInterface.reset!(
    in
    btCollisionWorld
    collisionWorld
    
    
    )
{   
    
    
    this.cxx_reset(
        collisionWorld
        );
    
    
    
}


btCharacterControllerInterface.setWalkDirection!(
    in
    btVector3
    walkDirection
    
    
    )
{   
    
    CxxbtVector3ConstRef walkDirection__cxx = Make_CxxbtVector3ConstRef(walkDirection);
    
    this.cxx_setWalkDirection(
        walkDirection__cxx
        );
    
    
    
}


btCharacterControllerInterface.jump!(
    in
    btVector3
    dir
    
    
    )
{   
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    
    this.cxx_jump(
        dir__cxx
        );
    
    
    
}


btCharacterControllerInterface.setVelocityForTimeInterval!(
    in
    btVector3
    velocity
    
    ,
    in
    Float32
    timeInterval
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    
    this.cxx_setVelocityForTimeInterval(
        velocity__cxx,
        timeInterval
        );
    
    
    
    
}


btCharacterControllerInterface.warp!(
    in
    btVector3
    origin
    
    
    )
{   
    
    CxxbtVector3ConstRef origin__cxx = Make_CxxbtVector3ConstRef(origin);
    
    this.cxx_warp(
        origin__cxx
        );
    
    
    
}

Boolean
btCharacterControllerInterface.onGround?(
    )
{   
    Boolean __res = 
    this.cxx_onGround(
        );
    
    return __res;
}

Boolean
btCharacterControllerInterface.canJump?(
    )
{   
    Boolean __res = 
    this.cxx_canJump(
        );
    
    return __res;
}


btCharacterControllerInterface.playerStep!(
    in
    btCollisionWorld
    collisionWorld
    
    ,
    in
    Float32
    dt
    
    
    )
{   
    
    
    
    this.cxx_playerStep(
        collisionWorld,
        dt
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btCharacterControllerInterface] EDK[Fabric_EDK_KL_btCharacterControllerInterface] LIB[btCharacterControllerInterface *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btCharacterControllerInterface.=(
    btCharacterControllerInterface that
    ) = "Bullet2__btCharacterControllerInterface__MU__simple_ass_op__3a700c2f25c12c2a6fbac8a7029fb23b";


/// \dfgPresetOmit
/// \internal
btCharacterControllerInterface.appendDesc(io String string) {
  string += "btCharacterControllerInterface:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btKinematicCharacterController() = "Bullet2__btKinematicCharacterController__MU__empty_ctor__2b52a14a4211733cede229604baa33c2";

/// \dfgPresetOmit
btKinematicCharacterController(
    btKinematicCharacterController that
    ) = "Bullet2__btKinematicCharacterController__MU__copy_ctor__76d6666c3e0269474dc0ba462e469eea";

/// \dfgPresetOmit
/// \internal
btKinematicCharacterController.__ctor(
    btPairCachingGhostObject ghostObject,
    btConvexShape convexShape,
    Float32 stepHeight
    ) = "Bullet2__btKinematicCharacterController__MU__ctor__58ab51dabb61ff577cc09054cece0339";

/// \dfgPresetOmit
btKinematicCharacterController(
    btPairCachingGhostObject ghostObject,
    btConvexShape convexShape,
    Float32 stepHeight
    ) {
    this.__ctor(
        ghostObject,
        convexShape,
        stepHeight
        );
}

/// \dfgPresetOmit
/// \internal
btKinematicCharacterController.__ctor(
    btPairCachingGhostObject ghostObject,
    btConvexShape convexShape,
    Float32 stepHeight,
    CxxbtVector3ConstRef up
    ) = "Bullet2__btKinematicCharacterController__MU__ctor__fd7a7b06acc9bdd325ae43526add82e1";

/// \dfgPresetOmit
btKinematicCharacterController(
    btPairCachingGhostObject ghostObject,
    btConvexShape convexShape,
    Float32 stepHeight,
    CxxbtVector3ConstRef up
    ) {
    this.__ctor(
        ghostObject,
        convexShape,
        stepHeight,
        up
        );
}

btKinematicCharacterController(
    in
    btPairCachingGhostObject
    ghostObject
    
    ,
    in
    btConvexShape
    convexShape
    
    ,
    in
    Float32
    stepHeight
    
    ,
    in
    btVector3
    up
    
    
    ) {
    
    
    
    
    CxxbtVector3ConstRef up__cxx = Make_CxxbtVector3ConstRef(up);
    this.__ctor(
        ghostObject,
        convexShape,
        stepHeight,
        up__cxx
        );
    
    
    
    
}

btKinematicCharacterController.cxx_delete() = "Bullet2__btKinematicCharacterController__MU__delete__65d86ed403f980ef8dc466c55ce9ffcc";

//////////////////////////////////////////////////////////////////////////////
// KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///btActionInterface interface
/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_updateAction!(
    btCollisionWorld collisionWorld,
    Float32 deltaTime
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_updateAction__bebd8f908a95d403fc2555dfac3884cb";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setUp!(
    CxxbtVector3ConstRef up
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setUp__25a0d4534e2fe1faa9d427fe3d477581";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btKinematicCharacterController.cxx_getUp!(
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_getUp__b187dad42adef69ae22efc32ff9c8603";

/// This should probably be called setPositionIncrementPerSimulatorStep.
/// This is neither a direction nor a velocity, but the amount to
///	increment the position each simulation iteration, regardless
///	of dt.
/// This call will reset any velocity set by setVelocityForTimeInterval().
/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setWalkDirection!(
    CxxbtVector3ConstRef walkDirection
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setWalkDirection__fb93cf707ed0b9cda04b59e926d77b99";

/// Caller provides a velocity with which the character should move for
///	the given time period.  After the time period, velocity is reset
///	to zero.
/// This call will reset any walk direction set by setWalkDirection().
/// Negative time intervals will result in no motion.
/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setVelocityForTimeInterval!(
    CxxbtVector3ConstRef velocity,
    Float32 timeInterval
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setVelocityForTimeInterval__8c91755298b7ff6c98dde1074b47a6fb";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setAngularVelocity!(
    CxxbtVector3ConstRef velocity
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setAngularVelocity__6ff770613430e48bf4720158b2062170";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btKinematicCharacterController.cxx_getAngularVelocity?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getAngularVelocity__ea52c632c89edda07c2e5023f5065853";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setLinearVelocity!(
    CxxbtVector3ConstRef velocity
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setLinearVelocity__adaca23def3f9e9624ba4b13966547f8";

/// \dfgPresetOmit
/// \internal
btVector3
btKinematicCharacterController.cxx_getLinearVelocity?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getLinearVelocity__8b497ac4512e87f5efd96ba3339eaaa5";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setLinearDamping!(
    Float32 d
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setLinearDamping__0422236c223cf07af45c6698a1813ab5";

/// \dfgPresetOmit
/// \internal
Float32
btKinematicCharacterController.cxx_getLinearDamping?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getLinearDamping__ec7c8f29a18e2478fd75e746f628feaa";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setAngularDamping!(
    Float32 d
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setAngularDamping__a2c4e2782a8d9d30bee81ec30f6310e7";

/// \dfgPresetOmit
/// \internal
Float32
btKinematicCharacterController.cxx_getAngularDamping?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getAngularDamping__dd9ec16f64f3293d38848b43dbef219d";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_reset!(
    btCollisionWorld collisionWorld
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_reset__fc8d625a7345fd858d48427488edbe88";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_warp!(
    CxxbtVector3ConstRef origin
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_warp__6f2d88206773e5afdfc882853c740243";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_preStep!(
    btCollisionWorld collisionWorld
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_preStep__0ae2f2e7b9326a84f174ca86e48f0e67";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_playerStep!(
    btCollisionWorld collisionWorld,
    Float32 dt
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_playerStep__10db23d0e1d20bd0e92d8928312cd1a0";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setStepHeight!(
    Float32 h
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setStepHeight__4545d9940cb166b1efbfe8c7bbcf7532";

/// \dfgPresetOmit
/// \internal
Float32
btKinematicCharacterController.cxx_getStepHeight?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getStepHeight__69d1c56622c79c6c206cefef046bfdbd";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setFallSpeed!(
    Float32 fallSpeed
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setFallSpeed__8d4dedb6a97638fdb86898be4809163f";

/// \dfgPresetOmit
/// \internal
Float32
btKinematicCharacterController.cxx_getFallSpeed?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getFallSpeed__0e5ead1fedb112dcdec3af16569a5fd2";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setJumpSpeed!(
    Float32 jumpSpeed
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setJumpSpeed__b567718bc21b7da7daece5e94755c4d3";

/// \dfgPresetOmit
/// \internal
Float32
btKinematicCharacterController.cxx_getJumpSpeed?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getJumpSpeed__9a90f049dbf0688796f0b6ec214f7721";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setMaxJumpHeight!(
    Float32 maxJumpHeight
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setMaxJumpHeight__c080ba536faf6187d200c6a468d6e007";

/// \dfgPresetOmit
/// \internal
Boolean
btKinematicCharacterController.cxx_canJump?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_canJump__6cccb907cfbb1747bf7456f3448bd4ca";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_jump!(
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_jump__10879bb0e886f1509fc147d807825412";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_jump!(
    CxxbtVector3ConstRef v
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_jump__51623a430df6188cec9f43db108d801c";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_applyImpulse!(
    CxxbtVector3ConstRef v
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_applyImpulse__9918bc84c6c4a35d9934b4194d85a2d2";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setGravity!(
    CxxbtVector3ConstRef gravity
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setGravity__e14ab1605f012ce16daa9c997145ba4e";

/// \dfgPresetOmit
/// \internal
btVector3
btKinematicCharacterController.cxx_getGravity?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getGravity__7a253284a6b48bf6dee357744f522420";

/// The max slope determines the maximum angle that the controller can walk up.
/// The slope angle is measured in radians.
/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setMaxSlope!(
    Float32 slopeRadians
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setMaxSlope__1765e58c26ff53405643f9578248be63";

/// \dfgPresetOmit
/// \internal
Float32
btKinematicCharacterController.cxx_getMaxSlope?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getMaxSlope__f3d379cb4cb7c53f14db96e9e8a020f5";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setMaxPenetrationDepth!(
    Float32 d
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setMaxPenetrationDepth__985ecc9d231111a2d28f6b5ab988dc9b";

/// \dfgPresetOmit
/// \internal
Float32
btKinematicCharacterController.cxx_getMaxPenetrationDepth?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_getMaxPenetrationDepth__6b3330bd7966b637ef91b19b31a2168d";

/// \dfgPresetOmit
/// \internal
btPairCachingGhostObject
btKinematicCharacterController.cxx_getGhostObject!(
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_getGhostObject__a04c7a4e57f378cbb9d8b7dbb27f414c";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setUseGhostSweepTest!(
    Boolean useGhostObjectSweepTest
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setUseGhostSweepTest__45ef34cd3dad2e122b8fb2089a970bab";

/// \dfgPresetOmit
/// \internal
Boolean
btKinematicCharacterController.cxx_onGround?(
    )
 = "Bullet2__btKinematicCharacterController__CO__meth_onGround__6f6ac756d936ada00ecee8a52ab23e03";

/// \dfgPresetOmit
/// \internal

btKinematicCharacterController.cxx_setUpInterpolate!(
    Boolean value
    )
 = "Bullet2__btKinematicCharacterController__MU__meth_setUpInterpolate__290b190b17d7456100775d5250e49024";


btKinematicCharacterController.playerStep!(
    in
    btCollisionWorld
    collisionWorld
    
    ,
    in
    Float32
    dt
    
    
    )
{   
    
    
    
    this.cxx_playerStep(
        collisionWorld,
        dt
        );
    
    
    
    
}


btKinematicCharacterController.setAngularDamping!(
    in
    Float32
    d
    
    
    )
{   
    
    
    this.cxx_setAngularDamping(
        d
        );
    
    
    
}


btKinematicCharacterController.applyImpulse!(
    in
    btVector3
    v
    
    
    )
{   
    
    CxxbtVector3ConstRef v__cxx = Make_CxxbtVector3ConstRef(v);
    
    this.cxx_applyImpulse(
        v__cxx
        );
    
    
    
}


btKinematicCharacterController.setUp!(
    in
    btVector3
    up
    
    
    )
{   
    
    CxxbtVector3ConstRef up__cxx = Make_CxxbtVector3ConstRef(up);
    
    this.cxx_setUp(
        up__cxx
        );
    
    
    
}

btPairCachingGhostObject
btKinematicCharacterController.getGhostObject!(
    )
{   
    btPairCachingGhostObject __res = 
    this.cxx_getGhostObject(
        );
    
    return __res;
}

Float32
btKinematicCharacterController.getMaxSlope?(
    )
{   
    Float32 __res = 
    this.cxx_getMaxSlope(
        );
    
    return __res;
}

Float32
btKinematicCharacterController.getLinearDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getLinearDamping(
        );
    
    return __res;
}

Float32
btKinematicCharacterController.getStepHeight?(
    )
{   
    Float32 __res = 
    this.cxx_getStepHeight(
        );
    
    return __res;
}

Float32
btKinematicCharacterController.getFallSpeed?(
    )
{   
    Float32 __res = 
    this.cxx_getFallSpeed(
        );
    
    return __res;
}

Float32
btKinematicCharacterController.getAngularDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getAngularDamping(
        );
    
    return __res;
}

btVector3
btKinematicCharacterController.getGravity?(
    )
{   
    btVector3 __res = 
    this.cxx_getGravity(
        );
    
    return __res;
}


btKinematicCharacterController.jump!(
    in
    btVector3
    v
    
    
    )
{   
    
    CxxbtVector3ConstRef v__cxx = Make_CxxbtVector3ConstRef(v);
    
    this.cxx_jump(
        v__cxx
        );
    
    
    
}


btKinematicCharacterController.warp!(
    in
    btVector3
    origin
    
    
    )
{   
    
    CxxbtVector3ConstRef origin__cxx = Make_CxxbtVector3ConstRef(origin);
    
    this.cxx_warp(
        origin__cxx
        );
    
    
    
}


btKinematicCharacterController.setMaxPenetrationDepth!(
    in
    Float32
    d
    
    
    )
{   
    
    
    this.cxx_setMaxPenetrationDepth(
        d
        );
    
    
    
}

btVector3
btKinematicCharacterController.getAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btKinematicCharacterController.getMaxPenetrationDepth?(
    )
{   
    Float32 __res = 
    this.cxx_getMaxPenetrationDepth(
        );
    
    return __res;
}

btVector3
btKinematicCharacterController.getLinearVelocity?(
    )
{   
    btVector3 __res = 
    this.cxx_getLinearVelocity(
        );
    
    return __res;
}

Boolean
btKinematicCharacterController.onGround?(
    )
{   
    Boolean __res = 
    this.cxx_onGround(
        );
    
    return __res;
}


btKinematicCharacterController.setUseGhostSweepTest!(
    in
    Boolean
    useGhostObjectSweepTest
    
    
    )
{   
    
    
    this.cxx_setUseGhostSweepTest(
        useGhostObjectSweepTest
        );
    
    
    
}


btKinematicCharacterController.setUpInterpolate!(
    in
    Boolean
    value
    
    
    )
{   
    
    
    this.cxx_setUpInterpolate(
        value
        );
    
    
    
}


btKinematicCharacterController.reset!(
    in
    btCollisionWorld
    collisionWorld
    
    
    )
{   
    
    
    this.cxx_reset(
        collisionWorld
        );
    
    
    
}


btKinematicCharacterController.setFallSpeed!(
    in
    Float32
    fallSpeed
    
    
    )
{   
    
    
    this.cxx_setFallSpeed(
        fallSpeed
        );
    
    
    
}

/// This should probably be called setPositionIncrementPerSimulatorStep.
/// This is neither a direction nor a velocity, but the amount to
///	increment the position each simulation iteration, regardless
///	of dt.
/// This call will reset any velocity set by setVelocityForTimeInterval().

btKinematicCharacterController.setWalkDirection!(
    in
    btVector3
    walkDirection
    
    
    )
{   
    
    CxxbtVector3ConstRef walkDirection__cxx = Make_CxxbtVector3ConstRef(walkDirection);
    
    this.cxx_setWalkDirection(
        walkDirection__cxx
        );
    
    
    
}

Float32
btKinematicCharacterController.getJumpSpeed?(
    )
{   
    Float32 __res = 
    this.cxx_getJumpSpeed(
        );
    
    return __res;
}


btKinematicCharacterController.setAngularVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_setAngularVelocity(
        velocity__cxx
        );
    
    
    
}


btKinematicCharacterController.setLinearDamping!(
    in
    Float32
    d
    
    
    )
{   
    
    
    this.cxx_setLinearDamping(
        d
        );
    
    
    
}

btVector3
btKinematicCharacterController.getUp!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getUp(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btKinematicCharacterController.preStep!(
    in
    btCollisionWorld
    collisionWorld
    
    
    )
{   
    
    
    this.cxx_preStep(
        collisionWorld
        );
    
    
    
}


btKinematicCharacterController.setJumpSpeed!(
    in
    Float32
    jumpSpeed
    
    
    )
{   
    
    
    this.cxx_setJumpSpeed(
        jumpSpeed
        );
    
    
    
}


btKinematicCharacterController.setStepHeight!(
    in
    Float32
    h
    
    
    )
{   
    
    
    this.cxx_setStepHeight(
        h
        );
    
    
    
}


btKinematicCharacterController.setLinearVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_setLinearVelocity(
        velocity__cxx
        );
    
    
    
}


btKinematicCharacterController.setMaxJumpHeight!(
    in
    Float32
    maxJumpHeight
    
    
    )
{   
    
    
    this.cxx_setMaxJumpHeight(
        maxJumpHeight
        );
    
    
    
}

/// Caller provides a velocity with which the character should move for
///	the given time period.  After the time period, velocity is reset
///	to zero.
/// This call will reset any walk direction set by setWalkDirection().
/// Negative time intervals will result in no motion.

btKinematicCharacterController.setVelocityForTimeInterval!(
    in
    btVector3
    velocity
    
    ,
    in
    Float32
    timeInterval
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    
    this.cxx_setVelocityForTimeInterval(
        velocity__cxx,
        timeInterval
        );
    
    
    
    
}


btKinematicCharacterController.setGravity!(
    in
    btVector3
    gravity
    
    
    )
{   
    
    CxxbtVector3ConstRef gravity__cxx = Make_CxxbtVector3ConstRef(gravity);
    
    this.cxx_setGravity(
        gravity__cxx
        );
    
    
    
}

/// The max slope determines the maximum angle that the controller can walk up.
/// The slope angle is measured in radians.

btKinematicCharacterController.setMaxSlope!(
    in
    Float32
    slopeRadians
    
    
    )
{   
    
    
    this.cxx_setMaxSlope(
        slopeRadians
        );
    
    
    
}

///btActionInterface interface

btKinematicCharacterController.updateAction!(
    in
    btCollisionWorld
    collisionWorld
    
    ,
    in
    Float32
    deltaTime
    
    
    )
{   
    
    
    
    this.cxx_updateAction(
        collisionWorld,
        deltaTime
        );
    
    
    
    
}

Boolean
btKinematicCharacterController.canJump?(
    )
{   
    Boolean __res = 
    this.cxx_canJump(
        );
    
    return __res;
}


btKinematicCharacterController.jump!(
    )
{   
    
    this.cxx_jump(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btKinematicCharacterController] EDK[Fabric_EDK_KL_btKinematicCharacterController] LIB[btKinematicCharacterController *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btKinematicCharacterController.=(
    btKinematicCharacterController that
    ) = "Bullet2__btKinematicCharacterController__MU__simple_ass_op__60d991c4d9c419d432e7d9661630bbdc";


/// \dfgPresetOmit
/// \internal
btKinematicCharacterController.appendDesc(io String string) {
  string += "btKinematicCharacterController:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConstraintSolver() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btConstraintSolver(
    btConstraintSolver that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btConstraintSolver.cxx_delete() = "Bullet2__btConstraintSolver__MU__delete__8049228e9118eb9295c3df6602907835";

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btConstraintSolver.cxx_prepareSolve!(
    SInt32 _arg0,
    SInt32 _arg1
    )
 = "Bullet2__btConstraintSolver__MU__meth_prepareSolve__b6760e8887a4248ac886a920c593dbf9";

///clear internal cached data and reset random seed
/// \dfgPresetOmit
/// \internal

btConstraintSolver.cxx_reset!(
    )
 = "Bullet2__btConstraintSolver__MU__meth_reset__13f674d7d1ee2481e678acac82099028";

/// \dfgPresetOmit
/// \internal
btConstraintSolverType
btConstraintSolver.cxx_getSolverType?(
    )
 = "Bullet2__btConstraintSolver__CO__meth_getSolverType__76a4d2b66df0196f3783242884652d33";

btConstraintSolverType
btConstraintSolver.getSolverType?(
    )
{   
    btConstraintSolverType __res = 
    this.cxx_getSolverType(
        );
    
    return __res;
}

///clear internal cached data and reset random seed

btConstraintSolver.reset!(
    )
{   
    
    this.cxx_reset(
        );
    
    
}


btConstraintSolver.prepareSolve!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_prepareSolve(
        _arg0,
        _arg1
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSolver] EDK[Fabric_EDK_KL_btConstraintSolver] LIB[btConstraintSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConstraintSolver.=(
    btConstraintSolver that
    ) = "Bullet2__btConstraintSolver__MU__simple_ass_op__4ccb05419d78b4dab34978cc114265d7";


/// \dfgPresetOmit
/// \internal
btConstraintSolver.appendDesc(io String string) {
  string += "btConstraintSolver:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btActionInterface() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btActionInterface(
    btActionInterface that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btActionInterface.cxx_delete() = "Bullet2__btActionInterface__MU__delete__7ae1db73a9e4dbb9e4f0540588c12de7";

//////////////////////////////////////////////////////////////////////////////
// KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btActionInterface.cxx_updateAction!(
    btCollisionWorld collisionWorld,
    Float32 deltaTimeStep
    )
 = "Bullet2__btActionInterface__MU__meth_updateAction__3e7397730dee1425d290f5999c227f51";


btActionInterface.updateAction!(
    in
    btCollisionWorld
    collisionWorld
    
    ,
    in
    Float32
    deltaTimeStep
    
    
    )
{   
    
    
    
    this.cxx_updateAction(
        collisionWorld,
        deltaTimeStep
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btActionInterface] EDK[Fabric_EDK_KL_btActionInterface] LIB[btActionInterface *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btActionInterface.=(
    btActionInterface that
    ) = "Bullet2__btActionInterface__MU__simple_ass_op__6a79ba7ba48ba354f07fc3bd264682bb";


/// \dfgPresetOmit
/// \internal
btActionInterface.appendDesc(io String string) {
  string += "btActionInterface:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDynamicsWorld() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btDynamicsWorld(
    btDynamicsWorld that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btDynamicsWorld.cxx_delete() = "Bullet2__btDynamicsWorld__MU__delete__0bb6548baa9dcf81750b331e42971fa0";

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///stepSimulation proceeds the simulation over 'timeStep', units in preferably in seconds.
///By default, Bullet will subdivide the timestep in constant substeps of each 'fixedTimeStep'.
///in order to keep the simulation real-time, the maximum number of substeps can be clamped to 'maxSubSteps'.
///You can disable subdividing the timestep/substepping by passing maxSubSteps=0 as second argument to stepSimulation, but in that case you have to keep the timeStep constant.
/// \dfgPresetOmit
/// \internal
SInt32
btDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep
    )
 = "Bullet2__btDynamicsWorld__MU__meth_stepSimulation__19095e9b4337ae345efa580eda15bacc";

/// \dfgPresetOmit
/// \internal
SInt32
btDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep,
    SInt32 maxSubSteps
    )
 = "Bullet2__btDynamicsWorld__MU__meth_stepSimulation__6bbcb0d3e011e10dbce5625a2aeb0bb8";

/// \dfgPresetOmit
/// \internal
SInt32
btDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep,
    SInt32 maxSubSteps,
    Float32 fixedTimeStep
    )
 = "Bullet2__btDynamicsWorld__MU__meth_stepSimulation__35e3f58ac0d84862bead8d77a4c7ad54";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_debugDrawWorld!(
    )
 = "Bullet2__btDynamicsWorld__MU__meth_debugDrawWorld__887b7c98556491049ce32e093ddc3b0a";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_addConstraint!(
    btTypedConstraint constraint
    )
 = "Bullet2__btDynamicsWorld__MU__meth_addConstraint__aec55535a5922ab767e33de3974d9410";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_addConstraint!(
    btTypedConstraint constraint,
    Boolean disableCollisionsBetweenLinkedBodies
    )
 = "Bullet2__btDynamicsWorld__MU__meth_addConstraint__662df946d2eb9d6f8a62d6107960d39f";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_removeConstraint!(
    btTypedConstraint constraint
    )
 = "Bullet2__btDynamicsWorld__MU__meth_removeConstraint__f86989f0293ed3f20a07e2c4e00e82e3";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_addAction!(
    btActionInterface action
    )
 = "Bullet2__btDynamicsWorld__MU__meth_addAction__8d5803d8bd8021cb930a4d3ff8be6dc5";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_removeAction!(
    btActionInterface action
    )
 = "Bullet2__btDynamicsWorld__MU__meth_removeAction__7dc8c66857c3d694489ada8ed7d22ce0";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_setGravity!(
    CxxbtVector3ConstRef gravity
    )
 = "Bullet2__btDynamicsWorld__MU__meth_setGravity__c51bc96bfb2a92ff2fb356465f1d42ec";

/// \dfgPresetOmit
/// \internal
btVector3
btDynamicsWorld.cxx_getGravity?(
    )
 = "Bullet2__btDynamicsWorld__CO__meth_getGravity__323b650054e7aa834fd80a3adcacd4c6";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_synchronizeMotionStates!(
    )
 = "Bullet2__btDynamicsWorld__MU__meth_synchronizeMotionStates__5734bad5deccb8176e946d23ff64133d";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_addRigidBody!(
    btRigidBody body
    )
 = "Bullet2__btDynamicsWorld__MU__meth_addRigidBody__be75618b8ee0b8920476689af10e4f35";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_addRigidBody!(
    btRigidBody body,
    SInt32 group,
    SInt32 mask
    )
 = "Bullet2__btDynamicsWorld__MU__meth_addRigidBody__8309963ec96057b234eb09896021ff1e";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_removeRigidBody!(
    btRigidBody body
    )
 = "Bullet2__btDynamicsWorld__MU__meth_removeRigidBody__28d812510d99def56cda4444c7042dae";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_setConstraintSolver!(
    btConstraintSolver solver
    )
 = "Bullet2__btDynamicsWorld__MU__meth_setConstraintSolver__267a02e0c15c088cc6e4ecabea4b0d79";

/// \dfgPresetOmit
/// \internal
btConstraintSolver
btDynamicsWorld.cxx_getConstraintSolver!(
    )
 = "Bullet2__btDynamicsWorld__MU__meth_getConstraintSolver__3c7a21d7bbaa2a74d11494eef1ca176f";

/// \dfgPresetOmit
/// \internal
SInt32
btDynamicsWorld.cxx_getNumConstraints?(
    )
 = "Bullet2__btDynamicsWorld__CO__meth_getNumConstraints__f726f362cdcc1d9c3ec813f5eaf66983";

/// \dfgPresetOmit
/// \internal
btTypedConstraint
btDynamicsWorld.cxx_getConstraint!(
    SInt32 index
    )
 = "Bullet2__btDynamicsWorld__MU__meth_getConstraint__a471b2a6cd2ddc32f90d64cd646e47ec";

/// \dfgPresetOmit
/// \internal
btTypedConstraint
btDynamicsWorld.cxx_getConstraint?(
    SInt32 index
    )
 = "Bullet2__btDynamicsWorld__CO__meth_getConstraint__e59539a12f0337bc986984eb8ea5ea21";

/// \dfgPresetOmit
/// \internal
btDynamicsWorldType
btDynamicsWorld.cxx_getWorldType?(
    )
 = "Bullet2__btDynamicsWorld__CO__meth_getWorldType__09e8de90fca3cb8233a1f1ba3a7aff61";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_clearForces!(
    )
 = "Bullet2__btDynamicsWorld__MU__meth_clearForces__1a41d04047b17cdf74a57b4dbdf8ade4";

/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_setWorldUserInfo!(
    Data worldUserInfo
    )
 = "Bullet2__btDynamicsWorld__MU__meth_setWorldUserInfo__96d5ddfc7ad7fa022bbd80effb781f18";

/// \dfgPresetOmit
/// \internal
Data
btDynamicsWorld.cxx_getWorldUserInfo?(
    )
 = "Bullet2__btDynamicsWorld__CO__meth_getWorldUserInfo__2c5e5c24ee00e22b5e0dcf1ac694afbf";

/// \dfgPresetOmit
/// \internal
btContactSolverInfo
btDynamicsWorld.cxx_getSolverInfo!(
    )
 = "Bullet2__btDynamicsWorld__MU__meth_getSolverInfo__bedf836c540277568dbcf9fb282f9138";

///obsolete, use addAction instead.
/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_addVehicle!(
    btActionInterface vehicle
    )
 = "Bullet2__btDynamicsWorld__MU__meth_addVehicle__1cacf9806aa6f41d3e27b4311a958598";

///obsolete, use removeAction instead
/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_removeVehicle!(
    btActionInterface vehicle
    )
 = "Bullet2__btDynamicsWorld__MU__meth_removeVehicle__e1aee3d19364da21159b20578e078350";

///obsolete, use addAction instead.
/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_addCharacter!(
    btActionInterface character
    )
 = "Bullet2__btDynamicsWorld__MU__meth_addCharacter__150e9fca9c2cdf82a6f8f52a0f7e9f8b";

///obsolete, use removeAction instead
/// \dfgPresetOmit
/// \internal

btDynamicsWorld.cxx_removeCharacter!(
    btActionInterface character
    )
 = "Bullet2__btDynamicsWorld__MU__meth_removeCharacter__872db0e067f5882413faddde496cce93";


btDynamicsWorld.removeConstraint!(
    in
    btTypedConstraint
    constraint
    
    
    )
{   
    
    
    this.cxx_removeConstraint(
        constraint
        );
    
    
    
}


btDynamicsWorld.addConstraint!(
    in
    btTypedConstraint
    constraint
    
    ,
    in
    Boolean
    disableCollisionsBetweenLinkedBodies
    
    
    )
{   
    
    
    
    this.cxx_addConstraint(
        constraint,
        disableCollisionsBetweenLinkedBodies
        );
    
    
    
    
}


btDynamicsWorld.setConstraintSolver!(
    in
    btConstraintSolver
    solver
    
    
    )
{   
    
    
    this.cxx_setConstraintSolver(
        solver
        );
    
    
    
}


btDynamicsWorld.clearForces!(
    )
{   
    
    this.cxx_clearForces(
        );
    
    
}


btDynamicsWorld.removeAction!(
    in
    btActionInterface
    action
    
    
    )
{   
    
    
    this.cxx_removeAction(
        action
        );
    
    
    
}


btDynamicsWorld.addAction!(
    in
    btActionInterface
    action
    
    
    )
{   
    
    
    this.cxx_addAction(
        action
        );
    
    
    
}


btDynamicsWorld.setGravity!(
    in
    btVector3
    gravity
    
    
    )
{   
    
    CxxbtVector3ConstRef gravity__cxx = Make_CxxbtVector3ConstRef(gravity);
    
    this.cxx_setGravity(
        gravity__cxx
        );
    
    
    
}

btDynamicsWorldType
btDynamicsWorld.getWorldType?(
    )
{   
    btDynamicsWorldType __res = 
    this.cxx_getWorldType(
        );
    
    return __res;
}

SInt32
btDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    ,
    in
    SInt32
    maxSubSteps
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep,
        maxSubSteps
        );
    
    
    
    return __res;
}

Data
btDynamicsWorld.getWorldUserInfo?(
    )
{   
    Data __res = 
    this.cxx_getWorldUserInfo(
        );
    
    return __res;
}

///obsolete, use removeAction instead

btDynamicsWorld.removeVehicle!(
    in
    btActionInterface
    vehicle
    
    
    )
{   
    
    
    this.cxx_removeVehicle(
        vehicle
        );
    
    
    
}

///stepSimulation proceeds the simulation over 'timeStep', units in preferably in seconds.
///By default, Bullet will subdivide the timestep in constant substeps of each 'fixedTimeStep'.
///in order to keep the simulation real-time, the maximum number of substeps can be clamped to 'maxSubSteps'.
///You can disable subdividing the timestep/substepping by passing maxSubSteps=0 as second argument to stepSimulation, but in that case you have to keep the timeStep constant.
SInt32
btDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep
        );
    
    
    return __res;
}

///obsolete, use addAction instead.

btDynamicsWorld.addVehicle!(
    in
    btActionInterface
    vehicle
    
    
    )
{   
    
    
    this.cxx_addVehicle(
        vehicle
        );
    
    
    
}


btDynamicsWorld.debugDrawWorld!(
    )
{   
    
    this.cxx_debugDrawWorld(
        );
    
    
}

btVector3
btDynamicsWorld.getGravity?(
    )
{   
    btVector3 __res = 
    this.cxx_getGravity(
        );
    
    return __res;
}

SInt32
btDynamicsWorld.getNumConstraints?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumConstraints(
        );
    
    return __res;
}

btConstraintSolver
btDynamicsWorld.getConstraintSolver!(
    )
{   
    btConstraintSolver __res = 
    this.cxx_getConstraintSolver(
        );
    
    return __res;
}

btTypedConstraint
btDynamicsWorld.getConstraint!(
    in
    SInt32
    index
    
    
    )
{   
    
    btTypedConstraint __res = 
    this.cxx_getConstraint(
        index
        );
    
    
    return __res;
}


btDynamicsWorld.addConstraint!(
    in
    btTypedConstraint
    constraint
    
    
    )
{   
    
    
    this.cxx_addConstraint(
        constraint
        );
    
    
    
}


btDynamicsWorld.addRigidBody!(
    in
    btRigidBody
    body
    
    ,
    in
    SInt32
    group
    
    ,
    in
    SInt32
    mask
    
    
    )
{   
    
    
    
    
    this.cxx_addRigidBody(
        body,
        group,
        mask
        );
    
    
    
    
    
}

///obsolete, use removeAction instead

btDynamicsWorld.removeCharacter!(
    in
    btActionInterface
    character
    
    
    )
{   
    
    
    this.cxx_removeCharacter(
        character
        );
    
    
    
}


btDynamicsWorld.addRigidBody!(
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    this.cxx_addRigidBody(
        body
        );
    
    
    
}


btDynamicsWorld.setWorldUserInfo!(
    in
    Data
    worldUserInfo
    
    
    )
{   
    
    
    this.cxx_setWorldUserInfo(
        worldUserInfo
        );
    
    
    
}

btContactSolverInfo
btDynamicsWorld.getSolverInfo!(
    )
{   
    btContactSolverInfo __res = 
    this.cxx_getSolverInfo(
        );
    
    return __res;
}


btDynamicsWorld.removeRigidBody!(
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    this.cxx_removeRigidBody(
        body
        );
    
    
    
}


btDynamicsWorld.synchronizeMotionStates!(
    )
{   
    
    this.cxx_synchronizeMotionStates(
        );
    
    
}

SInt32
btDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    ,
    in
    SInt32
    maxSubSteps
    
    ,
    in
    Float32
    fixedTimeStep
    
    
    )
{   
    
    
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep,
        maxSubSteps,
        fixedTimeStep
        );
    
    
    
    
    return __res;
}

///obsolete, use addAction instead.

btDynamicsWorld.addCharacter!(
    in
    btActionInterface
    character
    
    
    )
{   
    
    
    this.cxx_addCharacter(
        character
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorld] EDK[Fabric_EDK_KL_btDynamicsWorld] LIB[btDynamicsWorld *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDynamicsWorld.=(
    btDynamicsWorld that
    ) = "Bullet2__btDynamicsWorld__MU__simple_ass_op__e78a1af0872e477fb39ffbad3feb114d";


/// \dfgPresetOmit
/// \internal
btDynamicsWorld.appendDesc(io String string) {
  string += "btDynamicsWorld:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorldDoubleData] EDK[Fabric_EDK_KL_btDynamicsWorldDoubleData] LIB[btDynamicsWorldDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldDoubleData] EDK[Fabric_EDK_KL_btDynamicsWorldDoubleData] LIB[btDynamicsWorldDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldDoubleData] EDK[Fabric_EDK_KL_btDynamicsWorldDoubleData] LIB[btDynamicsWorldDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDynamicsWorldDoubleData() = "Bullet2__btDynamicsWorldDoubleData__MU__empty_ctor__3ee6f2dc6bf09ab478f32a6e90c564ee";

/// \dfgPresetOmit
btDynamicsWorldDoubleData(
    btDynamicsWorldDoubleData that
    ) = "Bullet2__btDynamicsWorldDoubleData__MU__copy_ctor__cd119fa7869ed53cf9be3bd92f4105f8";

btDynamicsWorldDoubleData.cxx_delete() = "Bullet2__btDynamicsWorldDoubleData__MU__delete__f2bf7598c141e5da9c68ddeef66b0fc4";

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldDoubleData] EDK[Fabric_EDK_KL_btDynamicsWorldDoubleData] LIB[btDynamicsWorldDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldDoubleData] EDK[Fabric_EDK_KL_btDynamicsWorldDoubleData] LIB[btDynamicsWorldDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldDoubleData] EDK[Fabric_EDK_KL_btDynamicsWorldDoubleData] LIB[btDynamicsWorldDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDynamicsWorldDoubleData.=(
    btDynamicsWorldDoubleData that
    ) = "Bullet2__btDynamicsWorldDoubleData__MU__simple_ass_op__4d1c3264cc23dea22a57fbfe2e100bf0";


/// \dfgPresetOmit
/// \internal
btDynamicsWorldDoubleData.appendDesc(io String string) {
  string += "btDynamicsWorldDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDynamicsWorldFloatData] EDK[Fabric_EDK_KL_btDynamicsWorldFloatData] LIB[btDynamicsWorldFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldFloatData] EDK[Fabric_EDK_KL_btDynamicsWorldFloatData] LIB[btDynamicsWorldFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldFloatData] EDK[Fabric_EDK_KL_btDynamicsWorldFloatData] LIB[btDynamicsWorldFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDynamicsWorldFloatData() = "Bullet2__btDynamicsWorldFloatData__MU__empty_ctor__845da7052c222da2f45f2597878401ed";

/// \dfgPresetOmit
btDynamicsWorldFloatData(
    btDynamicsWorldFloatData that
    ) = "Bullet2__btDynamicsWorldFloatData__MU__copy_ctor__d4b5859f99d4b9293b3406d9762fa3b5";

btDynamicsWorldFloatData.cxx_delete() = "Bullet2__btDynamicsWorldFloatData__MU__delete__5d63c5ff54016d8a077b334a6989c383";

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldFloatData] EDK[Fabric_EDK_KL_btDynamicsWorldFloatData] LIB[btDynamicsWorldFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldFloatData] EDK[Fabric_EDK_KL_btDynamicsWorldFloatData] LIB[btDynamicsWorldFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDynamicsWorldFloatData] EDK[Fabric_EDK_KL_btDynamicsWorldFloatData] LIB[btDynamicsWorldFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDynamicsWorldFloatData.=(
    btDynamicsWorldFloatData that
    ) = "Bullet2__btDynamicsWorldFloatData__MU__simple_ass_op__080d7f107f86fa26302fbbec833af168";


/// \dfgPresetOmit
/// \internal
btDynamicsWorldFloatData.appendDesc(io String string) {
  string += "btDynamicsWorldFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDiscreteDynamicsWorld() = "Bullet2__btDiscreteDynamicsWorld__MU__empty_ctor__c25504baf3b22ae5ba11e03c663610e3";

/// \dfgPresetOmit
btDiscreteDynamicsWorld(
    btDiscreteDynamicsWorld that
    ) = "Bullet2__btDiscreteDynamicsWorld__MU__copy_ctor__17ed5666b0c8fbcb25a7d8d0afac97aa";

/// \dfgPresetOmit
/// \internal
btDiscreteDynamicsWorld.__ctor(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) = "Bullet2__btDiscreteDynamicsWorld__MU__ctor__8c46258c235e6623957d7be66d3916b4";

///this btDiscreteDynamicsWorld constructor gets created objects from the user, and will not delete those
/// \dfgPresetOmit
btDiscreteDynamicsWorld(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) {
    this.__ctor(
        dispatcher,
        pairCache,
        constraintSolver,
        collisionConfiguration
        );
}

btDiscreteDynamicsWorld.cxx_delete() = "Bullet2__btDiscreteDynamicsWorld__MU__delete__b3fac3f04ff2cec87902f36ead9fa22c";

//////////////////////////////////////////////////////////////////////////////
// KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///if maxSubSteps > 0, it will interpolate motion between fixedTimeStep's
/// \dfgPresetOmit
/// \internal
SInt32
btDiscreteDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_stepSimulation__9fe46aaea71d3cb58c9c857fe35477f4";

/// \dfgPresetOmit
/// \internal
SInt32
btDiscreteDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep,
    SInt32 maxSubSteps
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_stepSimulation__137a5c0c5ab0032cc75d4e79a943dbb3";

/// \dfgPresetOmit
/// \internal
SInt32
btDiscreteDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep,
    SInt32 maxSubSteps,
    Float32 fixedTimeStep
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_stepSimulation__9b1aa786080ffce76992efa8db805095";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_synchronizeMotionStates!(
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_synchronizeMotionStates__54447853552902b7651e3f16eec14cdb";

///this can be useful to synchronize a single rigid body -> graphics object
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_synchronizeSingleMotionState!(
    btRigidBody body
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_synchronizeSingleMotionState__f121c6afe7f9d363a5928158b3f1dfd4";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addConstraint!(
    btTypedConstraint constraint
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addConstraint__8859388dd07215a947526d9324892987";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addConstraint!(
    btTypedConstraint constraint,
    Boolean disableCollisionsBetweenLinkedBodies
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addConstraint__452a109afdff370cb54fd491554d6726";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_removeConstraint!(
    btTypedConstraint constraint
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_removeConstraint__31273c67036ffd0a15b645436241ce1e";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addAction!(
    btActionInterface _arg0
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addAction__1876ccb1a347700646812aae34819725";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_removeAction!(
    btActionInterface _arg0
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_removeAction__cae93bc8625d2b814a2a6e2e200fac76";

/// \dfgPresetOmit
/// \internal
btSimulationIslandManager
btDiscreteDynamicsWorld.cxx_getSimulationIslandManager!(
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_getSimulationIslandManager__29be1a3663fc8409bf4f9638cd02e11a";

/// \dfgPresetOmit
/// \internal
btSimulationIslandManager
btDiscreteDynamicsWorld.cxx_getSimulationIslandManager?(
    )
 = "Bullet2__btDiscreteDynamicsWorld__CO__meth_getSimulationIslandManager__c717e012243a1171d27adfbff79f214d";

/// \dfgPresetOmit
/// \internal
btCollisionWorld
btDiscreteDynamicsWorld.cxx_getCollisionWorld!(
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_getCollisionWorld__fa5b03f2b13e8bff43393b7856faf552";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_setGravity!(
    CxxbtVector3ConstRef gravity
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_setGravity__fb22446373a5fbcd399b574310c50746";

/// \dfgPresetOmit
/// \internal
btVector3
btDiscreteDynamicsWorld.cxx_getGravity?(
    )
 = "Bullet2__btDiscreteDynamicsWorld__CO__meth_getGravity__7897774e968480bb46ea45966840a51b";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addCollisionObject!(
    btCollisionObject collisionObject
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addCollisionObject__241d6c3068c140c840b172d637d33975";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addCollisionObject!(
    btCollisionObject collisionObject,
    SInt32 collisionFilterGroup
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addCollisionObject__ac2828e711a48845a74dd156f6820cb9";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addCollisionObject!(
    btCollisionObject collisionObject,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addCollisionObject__56680676c7021365089b362c234ba449";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addRigidBody!(
    btRigidBody body
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addRigidBody__dd0b38198afb723db21c400f0281cf1c";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addRigidBody!(
    btRigidBody body,
    SInt32 group,
    SInt32 mask
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addRigidBody__87b19a4ac35ebe5afbc06fe483bb6691";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_removeRigidBody!(
    btRigidBody body
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_removeRigidBody__e284bb16659e83d75a6eac9eeba27464";

///removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btCollisionWorld::removeCollisionObject
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_removeCollisionObject!(
    btCollisionObject collisionObject
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_removeCollisionObject__e8b06b4684ea04688d877c0eb61601f0";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_debugDrawConstraint!(
    btTypedConstraint constraint
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_debugDrawConstraint__1d9d8d8567c2276bb4891383a54302b4";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_debugDrawWorld!(
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_debugDrawWorld__e06d7fa75492b092ddf9340c6831a761";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_setConstraintSolver!(
    btConstraintSolver solver
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_setConstraintSolver__d6a35b83646589c3d59a2c280d79a252";

/// \dfgPresetOmit
/// \internal
btConstraintSolver
btDiscreteDynamicsWorld.cxx_getConstraintSolver!(
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_getConstraintSolver__9e0d9433e9d20ee2e2029e6c57cdee4f";

/// \dfgPresetOmit
/// \internal
SInt32
btDiscreteDynamicsWorld.cxx_getNumConstraints?(
    )
 = "Bullet2__btDiscreteDynamicsWorld__CO__meth_getNumConstraints__d38b4007f9bbb0074217751a16059084";

/// \dfgPresetOmit
/// \internal
btTypedConstraint
btDiscreteDynamicsWorld.cxx_getConstraint!(
    SInt32 index
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_getConstraint__19fa26f2cb1e489d091203ed5498c110";

/// \dfgPresetOmit
/// \internal
btTypedConstraint
btDiscreteDynamicsWorld.cxx_getConstraint?(
    SInt32 index
    )
 = "Bullet2__btDiscreteDynamicsWorld__CO__meth_getConstraint__7d05a4713230a4de45f4a87d6ff06f86";

/// \dfgPresetOmit
/// \internal
btDynamicsWorldType
btDiscreteDynamicsWorld.cxx_getWorldType?(
    )
 = "Bullet2__btDiscreteDynamicsWorld__CO__meth_getWorldType__a4f4b80b4a4c61fcb6c7db6a8ab99349";

///the forces on each rigidbody is accumulating together with gravity. clear this after each timestep.
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_clearForces!(
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_clearForces__94af1fea2dcc93bcd25c71f08973eaba";

///apply gravity, call this once per timestep
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_applyGravity!(
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_applyGravity__79708fc1363b76361fb3bd07cc746877";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_setNumTasks!(
    SInt32 numTasks
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_setNumTasks__a5bc9d6e108242e98cc3e2d870f53c09";

///obsolete, use updateActions instead
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_updateVehicles!(
    Float32 timeStep
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_updateVehicles__6c4e8dfa5e8c5eb5ec687ee16261bbd3";

///obsolete, use addAction instead
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addVehicle!(
    btActionInterface vehicle
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addVehicle__85836865987e5571d613856d035dae43";

///obsolete, use removeAction instead
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_removeVehicle!(
    btActionInterface vehicle
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_removeVehicle__8959b998652d788b57f0abd1938afa0c";

///obsolete, use addAction instead
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_addCharacter!(
    btActionInterface character
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_addCharacter__3183faa0a847d29a44495aaf35efc896";

///obsolete, use removeAction instead
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_removeCharacter!(
    btActionInterface character
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_removeCharacter__af480c3ef5049004104f755e091966cb";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_setSynchronizeAllMotionStates!(
    Boolean synchronizeAll
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_setSynchronizeAllMotionStates__def8b870a478747498d580d4bea806bc";

/// \dfgPresetOmit
/// \internal
Boolean
btDiscreteDynamicsWorld.cxx_getSynchronizeAllMotionStates?(
    )
 = "Bullet2__btDiscreteDynamicsWorld__CO__meth_getSynchronizeAllMotionStates__fee48949c5c35d8bde686b58a6f64b36";

/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_setApplySpeculativeContactRestitution!(
    Boolean enable
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_setApplySpeculativeContactRestitution__482cdac294acfd76c5714228f613af34";

/// \dfgPresetOmit
/// \internal
Boolean
btDiscreteDynamicsWorld.cxx_getApplySpeculativeContactRestitution?(
    )
 = "Bullet2__btDiscreteDynamicsWorld__CO__meth_getApplySpeculativeContactRestitution__d99b906b5ce079deb5a03b15864c3cc8";

///Interpolate motion state between previous and current transform, instead of current and next transform.
///This can relieve discontinuities in the rendering, due to penetrations
/// \dfgPresetOmit
/// \internal

btDiscreteDynamicsWorld.cxx_setLatencyMotionStateInterpolation!(
    Boolean latencyInterpolation
    )
 = "Bullet2__btDiscreteDynamicsWorld__MU__meth_setLatencyMotionStateInterpolation__5181cc336574ac4121d891ac14546ce9";

/// \dfgPresetOmit
/// \internal
Boolean
btDiscreteDynamicsWorld.cxx_getLatencyMotionStateInterpolation?(
    )
 = "Bullet2__btDiscreteDynamicsWorld__CO__meth_getLatencyMotionStateInterpolation__a416a710cacf305656246666e4f7d2a3";


btDiscreteDynamicsWorld.setConstraintSolver!(
    in
    btConstraintSolver
    solver
    
    
    )
{   
    
    
    this.cxx_setConstraintSolver(
        solver
        );
    
    
    
}

btDynamicsWorldType
btDiscreteDynamicsWorld.getWorldType?(
    )
{   
    btDynamicsWorldType __res = 
    this.cxx_getWorldType(
        );
    
    return __res;
}


btDiscreteDynamicsWorld.setSynchronizeAllMotionStates!(
    in
    Boolean
    synchronizeAll
    
    
    )
{   
    
    
    this.cxx_setSynchronizeAllMotionStates(
        synchronizeAll
        );
    
    
    
}

///the forces on each rigidbody is accumulating together with gravity. clear this after each timestep.

btDiscreteDynamicsWorld.clearForces!(
    )
{   
    
    this.cxx_clearForces(
        );
    
    
}


btDiscreteDynamicsWorld.addCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    
    )
{   
    
    
    
    
    this.cxx_addCollisionObject(
        collisionObject,
        collisionFilterGroup,
        collisionFilterMask
        );
    
    
    
    
    
}


btDiscreteDynamicsWorld.addConstraint!(
    in
    btTypedConstraint
    constraint
    
    ,
    in
    Boolean
    disableCollisionsBetweenLinkedBodies
    
    
    )
{   
    
    
    
    this.cxx_addConstraint(
        constraint,
        disableCollisionsBetweenLinkedBodies
        );
    
    
    
    
}

///obsolete, use removeAction instead

btDiscreteDynamicsWorld.removeVehicle!(
    in
    btActionInterface
    vehicle
    
    
    )
{   
    
    
    this.cxx_removeVehicle(
        vehicle
        );
    
    
    
}


btDiscreteDynamicsWorld.removeRigidBody!(
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    this.cxx_removeRigidBody(
        body
        );
    
    
    
}

///apply gravity, call this once per timestep

btDiscreteDynamicsWorld.applyGravity!(
    )
{   
    
    this.cxx_applyGravity(
        );
    
    
}


btDiscreteDynamicsWorld.removeAction!(
    in
    btActionInterface
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAction(
        _arg0
        );
    
    
    
}


btDiscreteDynamicsWorld.addConstraint!(
    in
    btTypedConstraint
    constraint
    
    
    )
{   
    
    
    this.cxx_addConstraint(
        constraint
        );
    
    
    
}


btDiscreteDynamicsWorld.addRigidBody!(
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    this.cxx_addRigidBody(
        body
        );
    
    
    
}

///this can be useful to synchronize a single rigid body -> graphics object

btDiscreteDynamicsWorld.synchronizeSingleMotionState!(
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    this.cxx_synchronizeSingleMotionState(
        body
        );
    
    
    
}


btDiscreteDynamicsWorld.setNumTasks!(
    in
    SInt32
    numTasks
    
    
    )
{   
    
    
    this.cxx_setNumTasks(
        numTasks
        );
    
    
    
}

btCollisionWorld
btDiscreteDynamicsWorld.getCollisionWorld!(
    )
{   
    btCollisionWorld __res = 
    this.cxx_getCollisionWorld(
        );
    
    return __res;
}


btDiscreteDynamicsWorld.addCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    
    )
{   
    
    
    this.cxx_addCollisionObject(
        collisionObject
        );
    
    
    
}


btDiscreteDynamicsWorld.synchronizeMotionStates!(
    )
{   
    
    this.cxx_synchronizeMotionStates(
        );
    
    
}


btDiscreteDynamicsWorld.setGravity!(
    in
    btVector3
    gravity
    
    
    )
{   
    
    CxxbtVector3ConstRef gravity__cxx = Make_CxxbtVector3ConstRef(gravity);
    
    this.cxx_setGravity(
        gravity__cxx
        );
    
    
    
}

///obsolete, use removeAction instead

btDiscreteDynamicsWorld.removeCharacter!(
    in
    btActionInterface
    character
    
    
    )
{   
    
    
    this.cxx_removeCharacter(
        character
        );
    
    
    
}


btDiscreteDynamicsWorld.addCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    
    )
{   
    
    
    
    this.cxx_addCollisionObject(
        collisionObject,
        collisionFilterGroup
        );
    
    
    
    
}

///removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btCollisionWorld::removeCollisionObject

btDiscreteDynamicsWorld.removeCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    
    )
{   
    
    
    this.cxx_removeCollisionObject(
        collisionObject
        );
    
    
    
}


btDiscreteDynamicsWorld.debugDrawConstraint!(
    in
    btTypedConstraint
    constraint
    
    
    )
{   
    
    
    this.cxx_debugDrawConstraint(
        constraint
        );
    
    
    
}

btConstraintSolver
btDiscreteDynamicsWorld.getConstraintSolver!(
    )
{   
    btConstraintSolver __res = 
    this.cxx_getConstraintSolver(
        );
    
    return __res;
}

///obsolete, use addAction instead

btDiscreteDynamicsWorld.addCharacter!(
    in
    btActionInterface
    character
    
    
    )
{   
    
    
    this.cxx_addCharacter(
        character
        );
    
    
    
}


btDiscreteDynamicsWorld.debugDrawWorld!(
    )
{   
    
    this.cxx_debugDrawWorld(
        );
    
    
}


btDiscreteDynamicsWorld.addAction!(
    in
    btActionInterface
    _arg0
    
    
    )
{   
    
    
    this.cxx_addAction(
        _arg0
        );
    
    
    
}

///Interpolate motion state between previous and current transform, instead of current and next transform.
///This can relieve discontinuities in the rendering, due to penetrations

btDiscreteDynamicsWorld.setLatencyMotionStateInterpolation!(
    in
    Boolean
    latencyInterpolation
    
    
    )
{   
    
    
    this.cxx_setLatencyMotionStateInterpolation(
        latencyInterpolation
        );
    
    
    
}


btDiscreteDynamicsWorld.setApplySpeculativeContactRestitution!(
    in
    Boolean
    enable
    
    
    )
{   
    
    
    this.cxx_setApplySpeculativeContactRestitution(
        enable
        );
    
    
    
}


btDiscreteDynamicsWorld.removeConstraint!(
    in
    btTypedConstraint
    constraint
    
    
    )
{   
    
    
    this.cxx_removeConstraint(
        constraint
        );
    
    
    
}

SInt32
btDiscreteDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    ,
    in
    SInt32
    maxSubSteps
    
    ,
    in
    Float32
    fixedTimeStep
    
    
    )
{   
    
    
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep,
        maxSubSteps,
        fixedTimeStep
        );
    
    
    
    
    return __res;
}

Boolean
btDiscreteDynamicsWorld.getSynchronizeAllMotionStates?(
    )
{   
    Boolean __res = 
    this.cxx_getSynchronizeAllMotionStates(
        );
    
    return __res;
}

btSimulationIslandManager
btDiscreteDynamicsWorld.getSimulationIslandManager!(
    )
{   
    btSimulationIslandManager __res = 
    this.cxx_getSimulationIslandManager(
        );
    
    return __res;
}

Boolean
btDiscreteDynamicsWorld.getLatencyMotionStateInterpolation?(
    )
{   
    Boolean __res = 
    this.cxx_getLatencyMotionStateInterpolation(
        );
    
    return __res;
}

///if maxSubSteps > 0, it will interpolate motion between fixedTimeStep's
SInt32
btDiscreteDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep
        );
    
    
    return __res;
}

btVector3
btDiscreteDynamicsWorld.getGravity?(
    )
{   
    btVector3 __res = 
    this.cxx_getGravity(
        );
    
    return __res;
}

///obsolete, use addAction instead

btDiscreteDynamicsWorld.addVehicle!(
    in
    btActionInterface
    vehicle
    
    
    )
{   
    
    
    this.cxx_addVehicle(
        vehicle
        );
    
    
    
}

btTypedConstraint
btDiscreteDynamicsWorld.getConstraint!(
    in
    SInt32
    index
    
    
    )
{   
    
    btTypedConstraint __res = 
    this.cxx_getConstraint(
        index
        );
    
    
    return __res;
}

///obsolete, use updateActions instead

btDiscreteDynamicsWorld.updateVehicles!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_updateVehicles(
        timeStep
        );
    
    
    
}


btDiscreteDynamicsWorld.addRigidBody!(
    in
    btRigidBody
    body
    
    ,
    in
    SInt32
    group
    
    ,
    in
    SInt32
    mask
    
    
    )
{   
    
    
    
    
    this.cxx_addRigidBody(
        body,
        group,
        mask
        );
    
    
    
    
    
}

Boolean
btDiscreteDynamicsWorld.getApplySpeculativeContactRestitution?(
    )
{   
    Boolean __res = 
    this.cxx_getApplySpeculativeContactRestitution(
        );
    
    return __res;
}

SInt32
btDiscreteDynamicsWorld.getNumConstraints?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumConstraints(
        );
    
    return __res;
}

SInt32
btDiscreteDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    ,
    in
    SInt32
    maxSubSteps
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep,
        maxSubSteps
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDiscreteDynamicsWorld] EDK[Fabric_EDK_KL_btDiscreteDynamicsWorld] LIB[btDiscreteDynamicsWorld *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDiscreteDynamicsWorld.=(
    btDiscreteDynamicsWorld that
    ) = "Bullet2__btDiscreteDynamicsWorld__MU__simple_ass_op__aa905ce368c8aa47c0725af4842006d3";


/// \dfgPresetOmit
/// \internal
btDiscreteDynamicsWorld.appendDesc(io String string) {
  string += "btDiscreteDynamicsWorld:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSimpleDynamicsWorld() = "Bullet2__btSimpleDynamicsWorld__MU__empty_ctor__afa508972187821b4a1710388dec68ad";

/// \dfgPresetOmit
btSimpleDynamicsWorld(
    btSimpleDynamicsWorld that
    ) = "Bullet2__btSimpleDynamicsWorld__MU__copy_ctor__c078b8feeb8a6b2926d4db324b81f4f4";

/// \dfgPresetOmit
/// \internal
btSimpleDynamicsWorld.__ctor(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) = "Bullet2__btSimpleDynamicsWorld__MU__ctor__06d11cee2078f8d646e32d1240c48fe4";

///this btSimpleDynamicsWorld constructor creates dispatcher, broadphase pairCache and constraintSolver
/// \dfgPresetOmit
btSimpleDynamicsWorld(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) {
    this.__ctor(
        dispatcher,
        pairCache,
        constraintSolver,
        collisionConfiguration
        );
}

btSimpleDynamicsWorld.cxx_delete() = "Bullet2__btSimpleDynamicsWorld__MU__delete__024f74c20c412f9bf2b16ed4c16a4e3d";

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///maxSubSteps/fixedTimeStep for interpolation is currently ignored for btSimpleDynamicsWorld, use btDiscreteDynamicsWorld instead
/// \dfgPresetOmit
/// \internal
SInt32
btSimpleDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_stepSimulation__18f2d4aae4eb6e3b059d59e3c9148abe";

/// \dfgPresetOmit
/// \internal
SInt32
btSimpleDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep,
    SInt32 maxSubSteps
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_stepSimulation__848da4bb212b3bb52dc8352c235666d1";

/// \dfgPresetOmit
/// \internal
SInt32
btSimpleDynamicsWorld.cxx_stepSimulation!(
    Float32 timeStep,
    SInt32 maxSubSteps,
    Float32 fixedTimeStep
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_stepSimulation__c9322fe7953201b4a636ed775441f780";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_setGravity!(
    CxxbtVector3ConstRef gravity
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_setGravity__c3fdf7a7c1a4bb1fffa08d4f5f14a83b";

/// \dfgPresetOmit
/// \internal
btVector3
btSimpleDynamicsWorld.cxx_getGravity?(
    )
 = "Bullet2__btSimpleDynamicsWorld__CO__meth_getGravity__8f34efc8fc33e85b0ee04a82afe7b23d";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_addRigidBody!(
    btRigidBody body
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_addRigidBody__cb58a77a3742edcd30cb525777ab6510";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_addRigidBody!(
    btRigidBody body,
    SInt32 group,
    SInt32 mask
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_addRigidBody__4bca52cb4baffcb1c3d223176e365534";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_removeRigidBody!(
    btRigidBody body
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_removeRigidBody__3b3159f2c1aa58c43b3f985ba9c923d4";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_debugDrawWorld!(
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_debugDrawWorld__9c82e4217ee167f806a2e1b512c9b111";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_addAction!(
    btActionInterface action
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_addAction__be7a912d72f711692d35088efeaddd8b";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_removeAction!(
    btActionInterface action
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_removeAction__eaa915a0b1c3f0b13dbaabbb0b8b7b16";

///removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btCollisionWorld::removeCollisionObject
/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_removeCollisionObject!(
    btCollisionObject collisionObject
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_removeCollisionObject__d207272fe439bb874ff716f64f50d8be";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_updateAabbs!(
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_updateAabbs__9356aebe63f6d6745c2d680eccfc68b8";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_synchronizeMotionStates!(
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_synchronizeMotionStates__05aca7119783758a993a6e8cebbd5f45";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_setConstraintSolver!(
    btConstraintSolver solver
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_setConstraintSolver__43f28acbb6b9b3a811eb52273e273bdc";

/// \dfgPresetOmit
/// \internal
btConstraintSolver
btSimpleDynamicsWorld.cxx_getConstraintSolver!(
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_getConstraintSolver__85fa8f939d9fbac181bfadec986bc3a2";

/// \dfgPresetOmit
/// \internal
btDynamicsWorldType
btSimpleDynamicsWorld.cxx_getWorldType?(
    )
 = "Bullet2__btSimpleDynamicsWorld__CO__meth_getWorldType__e473c8aeaaf18d09d2d4c91fdf8fa222";

/// \dfgPresetOmit
/// \internal

btSimpleDynamicsWorld.cxx_clearForces!(
    )
 = "Bullet2__btSimpleDynamicsWorld__MU__meth_clearForces__5db14fce3f749031ebf4e46a84e1056b";


btSimpleDynamicsWorld.addAction!(
    in
    btActionInterface
    action
    
    
    )
{   
    
    
    this.cxx_addAction(
        action
        );
    
    
    
}


btSimpleDynamicsWorld.addRigidBody!(
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    this.cxx_addRigidBody(
        body
        );
    
    
    
}

btVector3
btSimpleDynamicsWorld.getGravity?(
    )
{   
    btVector3 __res = 
    this.cxx_getGravity(
        );
    
    return __res;
}


btSimpleDynamicsWorld.debugDrawWorld!(
    )
{   
    
    this.cxx_debugDrawWorld(
        );
    
    
}


btSimpleDynamicsWorld.removeRigidBody!(
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    this.cxx_removeRigidBody(
        body
        );
    
    
    
}


btSimpleDynamicsWorld.setGravity!(
    in
    btVector3
    gravity
    
    
    )
{   
    
    CxxbtVector3ConstRef gravity__cxx = Make_CxxbtVector3ConstRef(gravity);
    
    this.cxx_setGravity(
        gravity__cxx
        );
    
    
    
}

btConstraintSolver
btSimpleDynamicsWorld.getConstraintSolver!(
    )
{   
    btConstraintSolver __res = 
    this.cxx_getConstraintSolver(
        );
    
    return __res;
}


btSimpleDynamicsWorld.removeAction!(
    in
    btActionInterface
    action
    
    
    )
{   
    
    
    this.cxx_removeAction(
        action
        );
    
    
    
}


btSimpleDynamicsWorld.setConstraintSolver!(
    in
    btConstraintSolver
    solver
    
    
    )
{   
    
    
    this.cxx_setConstraintSolver(
        solver
        );
    
    
    
}

btDynamicsWorldType
btSimpleDynamicsWorld.getWorldType?(
    )
{   
    btDynamicsWorldType __res = 
    this.cxx_getWorldType(
        );
    
    return __res;
}

SInt32
btSimpleDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    ,
    in
    SInt32
    maxSubSteps
    
    ,
    in
    Float32
    fixedTimeStep
    
    
    )
{   
    
    
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep,
        maxSubSteps,
        fixedTimeStep
        );
    
    
    
    
    return __res;
}


btSimpleDynamicsWorld.synchronizeMotionStates!(
    )
{   
    
    this.cxx_synchronizeMotionStates(
        );
    
    
}

///maxSubSteps/fixedTimeStep for interpolation is currently ignored for btSimpleDynamicsWorld, use btDiscreteDynamicsWorld instead
SInt32
btSimpleDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep
        );
    
    
    return __res;
}


btSimpleDynamicsWorld.addRigidBody!(
    in
    btRigidBody
    body
    
    ,
    in
    SInt32
    group
    
    ,
    in
    SInt32
    mask
    
    
    )
{   
    
    
    
    
    this.cxx_addRigidBody(
        body,
        group,
        mask
        );
    
    
    
    
    
}


btSimpleDynamicsWorld.updateAabbs!(
    )
{   
    
    this.cxx_updateAabbs(
        );
    
    
}

SInt32
btSimpleDynamicsWorld.stepSimulation!(
    in
    Float32
    timeStep
    
    ,
    in
    SInt32
    maxSubSteps
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_stepSimulation(
        timeStep,
        maxSubSteps
        );
    
    
    
    return __res;
}


btSimpleDynamicsWorld.clearForces!(
    )
{   
    
    this.cxx_clearForces(
        );
    
    
}

///removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btCollisionWorld::removeCollisionObject

btSimpleDynamicsWorld.removeCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    
    )
{   
    
    
    this.cxx_removeCollisionObject(
        collisionObject
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSimpleDynamicsWorld] EDK[Fabric_EDK_KL_btSimpleDynamicsWorld] LIB[btSimpleDynamicsWorld *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSimpleDynamicsWorld.=(
    btSimpleDynamicsWorld that
    ) = "Bullet2__btSimpleDynamicsWorld__MU__simple_ass_op__1f5dc1ef0939b9ec502a8b6ec45f7e01";


/// \dfgPresetOmit
/// \internal
btSimpleDynamicsWorld.appendDesc(io String string) {
  string += "btSimpleDynamicsWorld:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btRigidBody() = "Bullet2__btRigidBody__MU__empty_ctor__525299e46bbbacd20ce9795c293864ba";

/// \dfgPresetOmit
btRigidBody(
    btRigidBody that
    ) = "Bullet2__btRigidBody__MU__copy_ctor__c09a49eb02ac9421b37be7e6221094cb";

/// \dfgPresetOmit
/// \internal
btRigidBody.__ctor(
    CxxbtRigidBody_btRigidBodyConstructionInfoConstRef constructionInfo
    ) = "Bullet2__btRigidBody__MU__ctor__aa083e21c0c66b3481c98970e37c9b15";

///btRigidBody constructor using construction info
/// \dfgPresetOmit
btRigidBody(
    CxxbtRigidBody_btRigidBodyConstructionInfoConstRef constructionInfo
    ) {
    this.__ctor(
        constructionInfo
        );
}

/// \dfgPresetOmit
/// \internal
btRigidBody.__ctor(
    Float32 mass,
    btMotionState motionState,
    btCollisionShape collisionShape
    ) = "Bullet2__btRigidBody__MU__ctor__5025eae9512db73edce930c14504c036";

///btRigidBody constructor for backwards compatibility.
// 
///To specify friction (etc) during rigid body construction, please use the other constructor (using btRigidBodyConstructionInfo)
/// \dfgPresetOmit
btRigidBody(
    Float32 mass,
    btMotionState motionState,
    btCollisionShape collisionShape
    ) {
    this.__ctor(
        mass,
        motionState,
        collisionShape
        );
}

/// \dfgPresetOmit
/// \internal
btRigidBody.__ctor(
    Float32 mass,
    btMotionState motionState,
    btCollisionShape collisionShape,
    CxxbtVector3ConstRef localInertia
    ) = "Bullet2__btRigidBody__MU__ctor__4b8cfa454d2652efdd6f51ffa96c5c0c";

/// \dfgPresetOmit
btRigidBody(
    Float32 mass,
    btMotionState motionState,
    btCollisionShape collisionShape,
    CxxbtVector3ConstRef localInertia
    ) {
    this.__ctor(
        mass,
        motionState,
        collisionShape,
        localInertia
        );
}

///btRigidBody constructor using construction info
btRigidBody(
    in
    btRigidBody_btRigidBodyConstructionInfo
    constructionInfo
    
    
    ) {
    
    CxxbtRigidBody_btRigidBodyConstructionInfoConstRef constructionInfo__cxx = Make_CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(constructionInfo);
    this.__ctor(
        constructionInfo__cxx
        );
    
}

btRigidBody(
    in
    Float32
    mass
    
    ,
    in
    btMotionState
    motionState
    
    ,
    in
    btCollisionShape
    collisionShape
    
    ,
    in
    btVector3
    localInertia
    
    
    ) {
    
    
    
    
    CxxbtVector3ConstRef localInertia__cxx = Make_CxxbtVector3ConstRef(localInertia);
    this.__ctor(
        mass,
        motionState,
        collisionShape,
        localInertia__cxx
        );
    
    
    
    
}

btRigidBody.cxx_delete() = "Bullet2__btRigidBody__MU__delete__b85ac3da9550ee0a34a57f95873bfd0b";

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_proceedToTransform!(
    CxxbtTransformConstRef newTrans
    )
 = "Bullet2__btRigidBody__MU__meth_proceedToTransform__88cc1a9c61dfd31e9cbd7a9377495922";

/// \dfgPresetOmit
/// \internal
btRigidBody
btRigidBody_Cxxupcast(
    btCollisionObject colObj
    )
 = "Bullet2__btRigidBody__ST__meth_upcast__6239802a1e0dcee94891ef83f5d06c39";

/// continuous collision detection needs prediction
/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_predictIntegratedTransform!(
    Float32 step,
    CxxbtTransformRef predictedTransform
    )
 = "Bullet2__btRigidBody__MU__meth_predictIntegratedTransform__a492efe71608afed53266a0d47de618e";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_saveKinematicState!(
    Float32 step
    )
 = "Bullet2__btRigidBody__MU__meth_saveKinematicState__c9fff09067b0d8e4e9ad1add10e67df5";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_applyGravity!(
    )
 = "Bullet2__btRigidBody__MU__meth_applyGravity__af50a45e539d020aa1271a6796f616e6";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setGravity!(
    CxxbtVector3ConstRef acceleration
    )
 = "Bullet2__btRigidBody__MU__meth_setGravity__91c0b69f1dfa69ad3f4db1494f6e002a";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getGravity?(
    )
 = "Bullet2__btRigidBody__CO__meth_getGravity__6f623ed0ad8403a66f3b5e45f4113f06";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setDamping!(
    Float32 lin_damping,
    Float32 ang_damping
    )
 = "Bullet2__btRigidBody__MU__meth_setDamping__ebaec7a7bcbfc58f17f1a971f136871f";

/// \dfgPresetOmit
/// \internal
Float32
btRigidBody.cxx_getLinearDamping?(
    )
 = "Bullet2__btRigidBody__CO__meth_getLinearDamping__185ab1c700c955f5a3f67e1959b8f92a";

/// \dfgPresetOmit
/// \internal
Float32
btRigidBody.cxx_getAngularDamping?(
    )
 = "Bullet2__btRigidBody__CO__meth_getAngularDamping__6c070426c535a6de11706776d7958aba";

/// \dfgPresetOmit
/// \internal
Float32
btRigidBody.cxx_getLinearSleepingThreshold?(
    )
 = "Bullet2__btRigidBody__CO__meth_getLinearSleepingThreshold__8a46ba8dddaf5488e339d3b08a5a0080";

/// \dfgPresetOmit
/// \internal
Float32
btRigidBody.cxx_getAngularSleepingThreshold?(
    )
 = "Bullet2__btRigidBody__CO__meth_getAngularSleepingThreshold__6501a748162b27bc1d4b0c560665785f";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_applyDamping!(
    Float32 timeStep
    )
 = "Bullet2__btRigidBody__MU__meth_applyDamping__02525560516a49c254beb6673653986d";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btRigidBody.cxx_getCollisionShape?(
    )
 = "Bullet2__btRigidBody__CO__meth_getCollisionShape__ef758ea09020e8024c011c4adcb42466";

/// \dfgPresetOmit
/// \internal
btCollisionShape
btRigidBody.cxx_getCollisionShape!(
    )
 = "Bullet2__btRigidBody__MU__meth_getCollisionShape__1b5e2e64948bd2a09b7782a1a281e3d6";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setMassProps!(
    Float32 mass,
    CxxbtVector3ConstRef inertia
    )
 = "Bullet2__btRigidBody__MU__meth_setMassProps__569ad64893fb5dcd53b589aa8df6b91e";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getLinearFactor?(
    )
 = "Bullet2__btRigidBody__CO__meth_getLinearFactor__5599ff3d714d28ce0efe6fd199023b7d";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setLinearFactor!(
    CxxbtVector3ConstRef linearFactor
    )
 = "Bullet2__btRigidBody__MU__meth_setLinearFactor__b27f06595c9ce84514d84659eeb969be";

/// \dfgPresetOmit
/// \internal
Float32
btRigidBody.cxx_getInvMass?(
    )
 = "Bullet2__btRigidBody__CO__meth_getInvMass__7bae3efb95a95e890b9a6dc2c0db64c2";

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
btRigidBody.cxx_getInvInertiaTensorWorld?(
    )
 = "Bullet2__btRigidBody__CO__meth_getInvInertiaTensorWorld__398b1506d05704c476e70bf6540bd57b";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_integrateVelocities!(
    Float32 step
    )
 = "Bullet2__btRigidBody__MU__meth_integrateVelocities__b36865df4b9a04275d673ad70c5595d1";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setCenterOfMassTransform!(
    CxxbtTransformConstRef xform
    )
 = "Bullet2__btRigidBody__MU__meth_setCenterOfMassTransform__28eaa8a51186835b4a10b189b0b36048";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_applyCentralForce!(
    CxxbtVector3ConstRef force
    )
 = "Bullet2__btRigidBody__MU__meth_applyCentralForce__f77a5cb90e584f6188f9ec489df749c4";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getTotalForce?(
    )
 = "Bullet2__btRigidBody__CO__meth_getTotalForce__9ee214ccea8a330c538a71e1660a1227";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getTotalTorque?(
    )
 = "Bullet2__btRigidBody__CO__meth_getTotalTorque__ee6475db55e6e8631b79e417d06ac15c";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getInvInertiaDiagLocal?(
    )
 = "Bullet2__btRigidBody__CO__meth_getInvInertiaDiagLocal__67f87de87b189d7ecbd0f9f8a2058254";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setInvInertiaDiagLocal!(
    CxxbtVector3ConstRef diagInvInertia
    )
 = "Bullet2__btRigidBody__MU__meth_setInvInertiaDiagLocal__bdc957a4af00096f1c595545fff306de";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setSleepingThresholds!(
    Float32 linear,
    Float32 angular
    )
 = "Bullet2__btRigidBody__MU__meth_setSleepingThresholds__796c7187628a12219212bd0dbe3c7d34";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_applyTorque!(
    CxxbtVector3ConstRef torque
    )
 = "Bullet2__btRigidBody__MU__meth_applyTorque__e4cb0b3b529f681bf2fb909f44669959";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_applyForce!(
    CxxbtVector3ConstRef force,
    CxxbtVector3ConstRef rel_pos
    )
 = "Bullet2__btRigidBody__MU__meth_applyForce__2a9f0b6904ffa0f325bee0f47ee339e5";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_applyCentralImpulse!(
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btRigidBody__MU__meth_applyCentralImpulse__06463789ea05732107e9010a1b4698bb";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_applyTorqueImpulse!(
    CxxbtVector3ConstRef torque
    )
 = "Bullet2__btRigidBody__MU__meth_applyTorqueImpulse__a11ddf5b9996122b1bf5331e55499bf0";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_applyImpulse!(
    CxxbtVector3ConstRef impulse,
    CxxbtVector3ConstRef rel_pos
    )
 = "Bullet2__btRigidBody__MU__meth_applyImpulse__94b76b57444bd2d38fbc24150969f1e7";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_clearForces!(
    )
 = "Bullet2__btRigidBody__MU__meth_clearForces__98a4a5943a97d2872829cc831f015991";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_updateInertiaTensor!(
    )
 = "Bullet2__btRigidBody__MU__meth_updateInertiaTensor__8b72329c7b539156f699c7ce3e1c18fd";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getCenterOfMassPosition?(
    )
 = "Bullet2__btRigidBody__CO__meth_getCenterOfMassPosition__1a49a3b508304a03a6a40865e95f0052";

/// \dfgPresetOmit
/// \internal
btQuaternion
btRigidBody.cxx_getOrientation?(
    )
 = "Bullet2__btRigidBody__CO__meth_getOrientation__056ad1572eecc4683d2e07f68d2dd0fc";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btRigidBody.cxx_getCenterOfMassTransform?(
    )
 = "Bullet2__btRigidBody__CO__meth_getCenterOfMassTransform__2f39d096488401d6e1e4d5fd62f48e8a";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getLinearVelocity?(
    )
 = "Bullet2__btRigidBody__CO__meth_getLinearVelocity__fb0e1e51f2b24f6ebea2499d44f30488";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getAngularVelocity?(
    )
 = "Bullet2__btRigidBody__CO__meth_getAngularVelocity__c270a90b3c8911c05f780202955f9e32";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setLinearVelocity!(
    CxxbtVector3ConstRef lin_vel
    )
 = "Bullet2__btRigidBody__MU__meth_setLinearVelocity__823128cca54ecfc5682ba7b978108c56";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setAngularVelocity!(
    CxxbtVector3ConstRef ang_vel
    )
 = "Bullet2__btRigidBody__MU__meth_setAngularVelocity__1fba6828a2a2850b8b3726e665266639";

/// \dfgPresetOmit
/// \internal
btVector3
btRigidBody.cxx_getVelocityInLocalPoint?(
    CxxbtVector3ConstRef rel_pos
    )
 = "Bullet2__btRigidBody__CO__meth_getVelocityInLocalPoint__b6a5bece3f8d1fe57d845029a1a8d8bc";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_translate!(
    CxxbtVector3ConstRef v
    )
 = "Bullet2__btRigidBody__MU__meth_translate__1c97dbf5329fee92fa9b849cb21aef39";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_getAabb?(
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btRigidBody__CO__meth_getAabb__48504c7be1b79ae7883c1f0338f481be";

/// \dfgPresetOmit
/// \internal
Float32
btRigidBody.cxx_computeImpulseDenominator?(
    CxxbtVector3ConstRef pos,
    CxxbtVector3ConstRef normal
    )
 = "Bullet2__btRigidBody__CO__meth_computeImpulseDenominator__047e1639790c60cd2ef40f769521d760";

/// \dfgPresetOmit
/// \internal
Float32
btRigidBody.cxx_computeAngularImpulseDenominator?(
    CxxbtVector3ConstRef axis
    )
 = "Bullet2__btRigidBody__CO__meth_computeAngularImpulseDenominator__259f53e35b6ae8d4039215ac034c6a50";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_updateDeactivation!(
    Float32 timeStep
    )
 = "Bullet2__btRigidBody__MU__meth_updateDeactivation__89a85e2ffc35e4d6b96a113822d625bb";

/// \dfgPresetOmit
/// \internal
Boolean
btRigidBody.cxx_wantsSleeping!(
    )
 = "Bullet2__btRigidBody__MU__meth_wantsSleeping__228209c396f0949f2bcdeea7915d73f6";

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
btRigidBody.cxx_getBroadphaseProxy?(
    )
 = "Bullet2__btRigidBody__CO__meth_getBroadphaseProxy__53ef175631891030877f9ba3c74ba221";

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
btRigidBody.cxx_getBroadphaseProxy!(
    )
 = "Bullet2__btRigidBody__MU__meth_getBroadphaseProxy__64bda33c3ef6ce52780f5d001824aded";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setNewBroadphaseProxy!(
    btBroadphaseProxy broadphaseProxy
    )
 = "Bullet2__btRigidBody__MU__meth_setNewBroadphaseProxy__2727575e9d779fb9a665d9ce8ce7099c";

/// \dfgPresetOmit
/// \internal
btMotionState
btRigidBody.cxx_getMotionState!(
    )
 = "Bullet2__btRigidBody__MU__meth_getMotionState__c6d4f403252c21851f033c2998055372";

/// \dfgPresetOmit
/// \internal
btMotionState
btRigidBody.cxx_getMotionState?(
    )
 = "Bullet2__btRigidBody__CO__meth_getMotionState__9540b4bac27ede83eab197b72392e0cc";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setMotionState!(
    btMotionState motionState
    )
 = "Bullet2__btRigidBody__MU__meth_setMotionState__08efaefad999fec2734e68cebc3a2cf9";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setAngularFactor!(
    CxxbtVector3ConstRef angFac
    )
 = "Bullet2__btRigidBody__MU__meth_setAngularFactor__58eb84d55c605a5078ce3b283196c33a";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setAngularFactor!(
    Float32 angFac
    )
 = "Bullet2__btRigidBody__MU__meth_setAngularFactor__2d3a0ed00d5a58516ed03fcd6085bef9";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btRigidBody.cxx_getAngularFactor?(
    )
 = "Bullet2__btRigidBody__CO__meth_getAngularFactor__e3ac9c46763bfc7921c29b2961ebe32c";

/// \dfgPresetOmit
/// \internal
Boolean
btRigidBody.cxx_isInWorld?(
    )
 = "Bullet2__btRigidBody__CO__meth_isInWorld__3ae9e1da9b969f36b25778718923ec52";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_addConstraintRef!(
    btTypedConstraint c
    )
 = "Bullet2__btRigidBody__MU__meth_addConstraintRef__e7aa9209ee12c1825d75bd2d2a19f8ef";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_removeConstraintRef!(
    btTypedConstraint c
    )
 = "Bullet2__btRigidBody__MU__meth_removeConstraintRef__b9a8c3d70798cf19f30e218657928276";

/// \dfgPresetOmit
/// \internal
btTypedConstraint
btRigidBody.cxx_getConstraintRef!(
    SInt32 index
    )
 = "Bullet2__btRigidBody__MU__meth_getConstraintRef__777a1a4ac221b284f82fc6b81d0bbada";

/// \dfgPresetOmit
/// \internal
SInt32
btRigidBody.cxx_getNumConstraintRefs?(
    )
 = "Bullet2__btRigidBody__CO__meth_getNumConstraintRefs__eff8deefc9b791af833fc0b5c6747b1e";

/// \dfgPresetOmit
/// \internal

btRigidBody.cxx_setFlags!(
    SInt32 flags
    )
 = "Bullet2__btRigidBody__MU__meth_setFlags__63bc4bc704a0b436b781f6d9ce095694";

/// \dfgPresetOmit
/// \internal
SInt32
btRigidBody.cxx_getFlags?(
    )
 = "Bullet2__btRigidBody__CO__meth_getFlags__deb3cd58902413f86446076eaf3b4fc9";

///perform implicit force computation in world space
/// \dfgPresetOmit
/// \internal
btVector3
btRigidBody.cxx_computeGyroscopicImpulseImplicit_World?(
    Float32 dt
    )
 = "Bullet2__btRigidBody__CO__meth_computeGyroscopicImpulseImplicit_World__daac9dd3a6ce3fe38fa74c0e7501427d";

///perform implicit force computation in body space (inertial frame)
/// \dfgPresetOmit
/// \internal
btVector3
btRigidBody.cxx_computeGyroscopicImpulseImplicit_Body?(
    Float32 step
    )
 = "Bullet2__btRigidBody__CO__meth_computeGyroscopicImpulseImplicit_Body__bd13f47ade26b8d1bc2fa05ff5a9d756";

///explicit version is best avoided, it gains energy
/// \dfgPresetOmit
/// \internal
btVector3
btRigidBody.cxx_computeGyroscopicForceExplicit?(
    Float32 maxGyroscopicForce
    )
 = "Bullet2__btRigidBody__CO__meth_computeGyroscopicForceExplicit__7a6d0d7611bbcd2b2f1e2b817cc4e921";

/// \dfgPresetOmit
/// \internal
btVector3
btRigidBody.cxx_getLocalInertia?(
    )
 = "Bullet2__btRigidBody__CO__meth_getLocalInertia__26212b5415d42311327d85eb27f29119";

///////////////////////////////////////////////
/// \dfgPresetOmit
/// \internal
SInt32
btRigidBody.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btRigidBody__CO__meth_calculateSerializeBufferSize__ac4784a62e0710aa5939570a247477bb";


btRigidBody.saveKinematicState!(
    in
    Float32
    step
    
    
    )
{   
    
    
    this.cxx_saveKinematicState(
        step
        );
    
    
    
}

SInt32
btRigidBody.getFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getFlags(
        );
    
    return __res;
}


btRigidBody.integrateVelocities!(
    in
    Float32
    step
    
    
    )
{   
    
    
    this.cxx_integrateVelocities(
        step
        );
    
    
    
}

Boolean
btRigidBody.wantsSleeping!(
    )
{   
    Boolean __res = 
    this.cxx_wantsSleeping(
        );
    
    return __res;
}


btRigidBody.applyImpulse!(
    in
    btVector3
    impulse
    
    ,
    in
    btVector3
    rel_pos
    
    
    )
{   
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    CxxbtVector3ConstRef rel_pos__cxx = Make_CxxbtVector3ConstRef(rel_pos);
    
    this.cxx_applyImpulse(
        impulse__cxx,
        rel_pos__cxx
        );
    
    
    
    
}


btRigidBody.addConstraintRef!(
    in
    btTypedConstraint
    c
    
    
    )
{   
    
    
    this.cxx_addConstraintRef(
        c
        );
    
    
    
}


btRigidBody.setGravity!(
    in
    btVector3
    acceleration
    
    
    )
{   
    
    CxxbtVector3ConstRef acceleration__cxx = Make_CxxbtVector3ConstRef(acceleration);
    
    this.cxx_setGravity(
        acceleration__cxx
        );
    
    
    
}

btMatrix3x3
btRigidBody.getInvInertiaTensorWorld?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getInvInertiaTensorWorld(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}


btRigidBody.translate!(
    in
    btVector3
    v
    
    
    )
{   
    
    CxxbtVector3ConstRef v__cxx = Make_CxxbtVector3ConstRef(v);
    
    this.cxx_translate(
        v__cxx
        );
    
    
    
}


btRigidBody.applyTorqueImpulse!(
    in
    btVector3
    torque
    
    
    )
{   
    
    CxxbtVector3ConstRef torque__cxx = Make_CxxbtVector3ConstRef(torque);
    
    this.cxx_applyTorqueImpulse(
        torque__cxx
        );
    
    
    
}

Float32
btRigidBody.computeImpulseDenominator?(
    in
    btVector3
    pos
    
    ,
    in
    btVector3
    normal
    
    
    )
{   
    
    CxxbtVector3ConstRef pos__cxx = Make_CxxbtVector3ConstRef(pos);
    
    CxxbtVector3ConstRef normal__cxx = Make_CxxbtVector3ConstRef(normal);
    Float32 __res = 
    this.cxx_computeImpulseDenominator(
        pos__cxx,
        normal__cxx
        );
    
    
    
    return __res;
}


btRigidBody.updateDeactivation!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_updateDeactivation(
        timeStep
        );
    
    
    
}


btRigidBody.applyGravity!(
    )
{   
    
    this.cxx_applyGravity(
        );
    
    
}

btVector3
btRigidBody.getLinearFactor?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLinearFactor(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btTypedConstraint
btRigidBody.getConstraintRef!(
    in
    SInt32
    index
    
    
    )
{   
    
    btTypedConstraint __res = 
    this.cxx_getConstraintRef(
        index
        );
    
    
    return __res;
}


btRigidBody.setFlags!(
    in
    SInt32
    flags
    
    
    )
{   
    
    
    this.cxx_setFlags(
        flags
        );
    
    
    
}

btVector3
btRigidBody.getCenterOfMassPosition?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getCenterOfMassPosition(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btRigidBody.setMassProps!(
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    
    )
{   
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    this.cxx_setMassProps(
        mass,
        inertia__cxx
        );
    
    
    
    
}

Float32
btRigidBody.computeAngularImpulseDenominator?(
    in
    btVector3
    axis
    
    
    )
{   
    
    CxxbtVector3ConstRef axis__cxx = Make_CxxbtVector3ConstRef(axis);
    Float32 __res = 
    this.cxx_computeAngularImpulseDenominator(
        axis__cxx
        );
    
    
    return __res;
}

btTransform
btRigidBody.getCenterOfMassTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getCenterOfMassTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btRigidBody.getInvInertiaDiagLocal?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInvInertiaDiagLocal(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btRigidBody.setAngularFactor!(
    in
    btVector3
    angFac
    
    
    )
{   
    
    CxxbtVector3ConstRef angFac__cxx = Make_CxxbtVector3ConstRef(angFac);
    
    this.cxx_setAngularFactor(
        angFac__cxx
        );
    
    
    
}

btVector3
btRigidBody.getLocalInertia?(
    )
{   
    btVector3 __res = 
    this.cxx_getLocalInertia(
        );
    
    return __res;
}

Boolean
btRigidBody.isInWorld?(
    )
{   
    Boolean __res = 
    this.cxx_isInWorld(
        );
    
    return __res;
}

btMotionState
btRigidBody.getMotionState!(
    )
{   
    btMotionState __res = 
    this.cxx_getMotionState(
        );
    
    return __res;
}


btRigidBody.setInvInertiaDiagLocal!(
    in
    btVector3
    diagInvInertia
    
    
    )
{   
    
    CxxbtVector3ConstRef diagInvInertia__cxx = Make_CxxbtVector3ConstRef(diagInvInertia);
    
    this.cxx_setInvInertiaDiagLocal(
        diagInvInertia__cxx
        );
    
    
    
}

///explicit version is best avoided, it gains energy
btVector3
btRigidBody.computeGyroscopicForceExplicit?(
    in
    Float32
    maxGyroscopicForce
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_computeGyroscopicForceExplicit(
        maxGyroscopicForce
        );
    
    
    return __res;
}

///perform implicit force computation in body space (inertial frame)
btVector3
btRigidBody.computeGyroscopicImpulseImplicit_Body?(
    in
    Float32
    step
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_computeGyroscopicImpulseImplicit_Body(
        step
        );
    
    
    return __res;
}

btVector3
btRigidBody.getVelocityInLocalPoint?(
    in
    btVector3
    rel_pos
    
    
    )
{   
    
    CxxbtVector3ConstRef rel_pos__cxx = Make_CxxbtVector3ConstRef(rel_pos);
    btVector3 __res = 
    this.cxx_getVelocityInLocalPoint(
        rel_pos__cxx
        );
    
    
    return __res;
}


btRigidBody.setLinearFactor!(
    in
    btVector3
    linearFactor
    
    
    )
{   
    
    CxxbtVector3ConstRef linearFactor__cxx = Make_CxxbtVector3ConstRef(linearFactor);
    
    this.cxx_setLinearFactor(
        linearFactor__cxx
        );
    
    
    
}


btRigidBody.setSleepingThresholds!(
    in
    Float32
    linear
    
    ,
    in
    Float32
    angular
    
    
    )
{   
    
    
    
    this.cxx_setSleepingThresholds(
        linear,
        angular
        );
    
    
    
    
}

btVector3
btRigidBody.getGravity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getGravity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btRigidBody.getAngularFactor?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAngularFactor(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btCollisionShape
btRigidBody.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

Float32
btRigidBody.getAngularDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getAngularDamping(
        );
    
    return __res;
}


btRigidBody.applyForce!(
    in
    btVector3
    force
    
    ,
    in
    btVector3
    rel_pos
    
    
    )
{   
    
    CxxbtVector3ConstRef force__cxx = Make_CxxbtVector3ConstRef(force);
    
    CxxbtVector3ConstRef rel_pos__cxx = Make_CxxbtVector3ConstRef(rel_pos);
    
    this.cxx_applyForce(
        force__cxx,
        rel_pos__cxx
        );
    
    
    
    
}


btRigidBody.removeConstraintRef!(
    in
    btTypedConstraint
    c
    
    
    )
{   
    
    
    this.cxx_removeConstraintRef(
        c
        );
    
    
    
}


btRigidBody.getAabb?(
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}


btRigidBody.clearForces!(
    )
{   
    
    this.cxx_clearForces(
        );
    
    
}

Float32
btRigidBody.getLinearDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getLinearDamping(
        );
    
    return __res;
}

btVector3
btRigidBody.getAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

///perform implicit force computation in world space
btVector3
btRigidBody.computeGyroscopicImpulseImplicit_World?(
    in
    Float32
    dt
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_computeGyroscopicImpulseImplicit_World(
        dt
        );
    
    
    return __res;
}


btRigidBody.setDamping!(
    in
    Float32
    lin_damping
    
    ,
    in
    Float32
    ang_damping
    
    
    )
{   
    
    
    
    this.cxx_setDamping(
        lin_damping,
        ang_damping
        );
    
    
    
    
}

btVector3
btRigidBody.getTotalTorque?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getTotalTorque(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btBroadphaseProxy
btRigidBody.getBroadphaseProxy?(
    )
{   
    btBroadphaseProxy __res = 
    this.cxx_getBroadphaseProxy(
        );
    
    return __res;
}

btVector3
btRigidBody.getTotalForce?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getTotalForce(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btQuaternion
btRigidBody.getOrientation?(
    )
{   
    btQuaternion __res = 
    this.cxx_getOrientation(
        );
    
    return __res;
}


btRigidBody.applyTorque!(
    in
    btVector3
    torque
    
    
    )
{   
    
    CxxbtVector3ConstRef torque__cxx = Make_CxxbtVector3ConstRef(torque);
    
    this.cxx_applyTorque(
        torque__cxx
        );
    
    
    
}


btRigidBody.setCenterOfMassTransform!(
    in
    btTransform
    xform
    
    
    )
{   
    
    CxxbtTransformConstRef xform__cxx = Make_CxxbtTransformConstRef(xform);
    
    this.cxx_setCenterOfMassTransform(
        xform__cxx
        );
    
    
    
}


btRigidBody.updateInertiaTensor!(
    )
{   
    
    this.cxx_updateInertiaTensor(
        );
    
    
}

Float32
btRigidBody.getLinearSleepingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getLinearSleepingThreshold(
        );
    
    return __res;
}

btVector3
btRigidBody.getLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btRigidBody.getAngularSleepingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getAngularSleepingThreshold(
        );
    
    return __res;
}

btRigidBody
btRigidBody_upcast(
    in
    btCollisionObject
    colObj
    
    
    )
{   
    
    btRigidBody __res = 
    btRigidBody_Cxxupcast(
        colObj
        );
    
    
    return __res;
}

SInt32
btRigidBody.getNumConstraintRefs?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumConstraintRefs(
        );
    
    return __res;
}


btRigidBody.setLinearVelocity!(
    in
    btVector3
    lin_vel
    
    
    )
{   
    
    CxxbtVector3ConstRef lin_vel__cxx = Make_CxxbtVector3ConstRef(lin_vel);
    
    this.cxx_setLinearVelocity(
        lin_vel__cxx
        );
    
    
    
}


btRigidBody.applyCentralForce!(
    in
    btVector3
    force
    
    
    )
{   
    
    CxxbtVector3ConstRef force__cxx = Make_CxxbtVector3ConstRef(force);
    
    this.cxx_applyCentralForce(
        force__cxx
        );
    
    
    
}

/// continuous collision detection needs prediction

btRigidBody.predictIntegratedTransform!(
    in
    Float32
    step
    
    ,
    io
    btTransform
    predictedTransform
    
    
    )
{   
    
    
    CxxbtTransformRef predictedTransform__cxx = Make_CxxbtTransformRef(predictedTransform);
    
    this.cxx_predictIntegratedTransform(
        step,
        predictedTransform__cxx
        );
    
    
    
    
}


btRigidBody.proceedToTransform!(
    in
    btTransform
    newTrans
    
    
    )
{   
    
    CxxbtTransformConstRef newTrans__cxx = Make_CxxbtTransformConstRef(newTrans);
    
    this.cxx_proceedToTransform(
        newTrans__cxx
        );
    
    
    
}

///////////////////////////////////////////////
SInt32
btRigidBody.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btRigidBody.applyCentralImpulse!(
    in
    btVector3
    impulse
    
    
    )
{   
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    this.cxx_applyCentralImpulse(
        impulse__cxx
        );
    
    
    
}


btRigidBody.applyDamping!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_applyDamping(
        timeStep
        );
    
    
    
}


btRigidBody.setAngularVelocity!(
    in
    btVector3
    ang_vel
    
    
    )
{   
    
    CxxbtVector3ConstRef ang_vel__cxx = Make_CxxbtVector3ConstRef(ang_vel);
    
    this.cxx_setAngularVelocity(
        ang_vel__cxx
        );
    
    
    
}


btRigidBody.setMotionState!(
    in
    btMotionState
    motionState
    
    
    )
{   
    
    
    this.cxx_setMotionState(
        motionState
        );
    
    
    
}


btRigidBody.setNewBroadphaseProxy!(
    in
    btBroadphaseProxy
    broadphaseProxy
    
    
    )
{   
    
    
    this.cxx_setNewBroadphaseProxy(
        broadphaseProxy
        );
    
    
    
}

Float32
btRigidBody.getInvMass?(
    )
{   
    Float32 __res = 
    this.cxx_getInvMass(
        );
    
    return __res;
}


btRigidBody.setAngularFactor!(
    in
    Float32
    angFac
    
    
    )
{   
    
    
    this.cxx_setAngularFactor(
        angFac
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody] EDK[Fabric_EDK_KL_btRigidBody] LIB[btRigidBody *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btRigidBody.=(
    btRigidBody that
    ) = "Bullet2__btRigidBody__MU__simple_ass_op__5c4828f1b672ce4b35c1404b43176d8f";


/// \dfgPresetOmit
/// \internal
btRigidBody.appendDesc(io String string) {
  string += "btRigidBody:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_mass()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_mass__53bc9d357fea3fd85bcfc10f2b7ee4ac";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_mass()
{
    Float32 __res = 
    this.cxx_get_m_mass();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_mass!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_mass__3f63504ca3d1c09cf3478f0576aa5cb7";

btRigidBody_btRigidBodyConstructionInfo.set_m_mass!(
    Float32 value
   )
{
    
    this.cxx_set_m_mass(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btMotionState btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_motionState()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_motionState__8ea081e0b9d26d6f24a5f56f686fb62a";

btMotionState
btRigidBody_btRigidBodyConstructionInfo.get_m_motionState()
{
    btMotionState __res = 
    this.cxx_get_m_motionState();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_motionState!(btMotionState value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_motionState__32bc405c7b651039454125870df6a7f6";

btRigidBody_btRigidBodyConstructionInfo.set_m_motionState!(
    btMotionState value
   )
{
    
    this.cxx_set_m_motionState(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btTransform btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_startWorldTransform()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_startWorldTransform__650e30363c5c199eb8da11e9691a6e80";

btTransform
btRigidBody_btRigidBodyConstructionInfo.get_m_startWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_startWorldTransform();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_startWorldTransform!(btTransform value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_startWorldTransform__1a4573320fb4b2ea8a801749061e7c05";

btRigidBody_btRigidBodyConstructionInfo.set_m_startWorldTransform!(
    btTransform value
   )
{
    
    this.cxx_set_m_startWorldTransform(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btCollisionShape btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_collisionShape()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_collisionShape__7a3a8d237b9bfffb2b829292dceec83f";

btCollisionShape
btRigidBody_btRigidBodyConstructionInfo.get_m_collisionShape()
{
    btCollisionShape __res = 
    this.cxx_get_m_collisionShape();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_collisionShape!(btCollisionShape value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_collisionShape__188009746a0b71bf02407cc1f9965bd6";

btRigidBody_btRigidBodyConstructionInfo.set_m_collisionShape!(
    btCollisionShape value
   )
{
    
    this.cxx_set_m_collisionShape(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btVector3 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_localInertia()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_localInertia__b8bc89cc2e71ec9a4482012912f1926d";

btVector3
btRigidBody_btRigidBodyConstructionInfo.get_m_localInertia()
{
    btVector3 __res = 
    this.cxx_get_m_localInertia();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_localInertia!(btVector3 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_localInertia__a9e5fa8c9d390346590092b97becdc63";

btRigidBody_btRigidBodyConstructionInfo.set_m_localInertia!(
    btVector3 value
   )
{
    
    this.cxx_set_m_localInertia(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_linearDamping()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_linearDamping__8748ea3fe667d2af36402428da374721";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_linearDamping()
{
    Float32 __res = 
    this.cxx_get_m_linearDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_linearDamping!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_linearDamping__ca4493c13f320540e99afaef4ec5649f";

btRigidBody_btRigidBodyConstructionInfo.set_m_linearDamping!(
    Float32 value
   )
{
    
    this.cxx_set_m_linearDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_angularDamping()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_angularDamping__8195ae2f4343c81293b2b22b478280e9";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_angularDamping()
{
    Float32 __res = 
    this.cxx_get_m_angularDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_angularDamping!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_angularDamping__813c0038e2f4b9f812907a5932b91117";

btRigidBody_btRigidBodyConstructionInfo.set_m_angularDamping!(
    Float32 value
   )
{
    
    this.cxx_set_m_angularDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_friction()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_friction__6251ec708ffa66ca75b0d108bef33d43";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_friction()
{
    Float32 __res = 
    this.cxx_get_m_friction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_friction!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_friction__278e26ae5fc8a9a0270bae14cfcfa81d";

btRigidBody_btRigidBodyConstructionInfo.set_m_friction!(
    Float32 value
   )
{
    
    this.cxx_set_m_friction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_rollingFriction()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_rollingFriction__3c837e8eae60faf2eebf30305cec8d2a";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_rollingFriction()
{
    Float32 __res = 
    this.cxx_get_m_rollingFriction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_rollingFriction!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_rollingFriction__b56b29b02e0253038fb1421d7bb611df";

btRigidBody_btRigidBodyConstructionInfo.set_m_rollingFriction!(
    Float32 value
   )
{
    
    this.cxx_set_m_rollingFriction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_spinningFriction()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_spinningFriction__31fa959d3e2b919d76614607aa4faef9";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_spinningFriction()
{
    Float32 __res = 
    this.cxx_get_m_spinningFriction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_spinningFriction!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_spinningFriction__aa382759dc4012d106429175df47dd99";

btRigidBody_btRigidBodyConstructionInfo.set_m_spinningFriction!(
    Float32 value
   )
{
    
    this.cxx_set_m_spinningFriction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_restitution()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_restitution__bfe89b4feed1082a1f3fa8ab3cd40584";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_restitution()
{
    Float32 __res = 
    this.cxx_get_m_restitution();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_restitution!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_restitution__3c20ebcc375e7bfe965ba5d90da2ae4d";

btRigidBody_btRigidBodyConstructionInfo.set_m_restitution!(
    Float32 value
   )
{
    
    this.cxx_set_m_restitution(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_linearSleepingThreshold()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_linearSleepingThreshold__d49da095f5e998889248cf2a0dc4442f";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_linearSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_linearSleepingThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_linearSleepingThreshold!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_linearSleepingThreshold__54853b4c3d6d8fe6c6832b4639cfa10f";

btRigidBody_btRigidBodyConstructionInfo.set_m_linearSleepingThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_linearSleepingThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_angularSleepingThreshold()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_angularSleepingThreshold__032c83b51d3f6657b96678019f732d40";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_angularSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_angularSleepingThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_angularSleepingThreshold!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_angularSleepingThreshold__d26392b7b03606ad1618c9835de7f76b";

btRigidBody_btRigidBodyConstructionInfo.set_m_angularSleepingThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_angularSleepingThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Boolean btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_additionalDamping()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_additionalDamping__6e18ecd22c4b8c2644a632fd332fb80f";

Boolean
btRigidBody_btRigidBodyConstructionInfo.get_m_additionalDamping()
{
    Boolean __res = 
    this.cxx_get_m_additionalDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_additionalDamping!(Boolean value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_additionalDamping__0eaf833ea5ec89ecfe94c2265a4c5e8d";

btRigidBody_btRigidBodyConstructionInfo.set_m_additionalDamping!(
    Boolean value
   )
{
    
    this.cxx_set_m_additionalDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_additionalDampingFactor()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_additionalDampingFactor__0c60c7b7ed7d4b92bdb5ae8dd8d6c691";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_additionalDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalDampingFactor();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_additionalDampingFactor!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_additionalDampingFactor__02e8ed2a87fec10bdfd9fc214b63cbfa";

btRigidBody_btRigidBodyConstructionInfo.set_m_additionalDampingFactor!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalDampingFactor(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_additionalLinearDampingThresholdSqr()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_additionalLinearDampingThresholdSqr__79bfe3094cead0a5bf429429cccda800";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_additionalLinearDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalLinearDampingThresholdSqr();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_additionalLinearDampingThresholdSqr!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_additionalLinearDampingThresholdSqr__232a37838bb5b28a657e5c441f0a4e73";

btRigidBody_btRigidBodyConstructionInfo.set_m_additionalLinearDampingThresholdSqr!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalLinearDampingThresholdSqr(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_additionalAngularDampingThresholdSqr()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_additionalAngularDampingThresholdSqr__c21f04666c6bceb844883447aaeca603";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_additionalAngularDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingThresholdSqr();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_additionalAngularDampingThresholdSqr!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_additionalAngularDampingThresholdSqr__31aff7ae1758aaa38afc79a83dbb529e";

btRigidBody_btRigidBodyConstructionInfo.set_m_additionalAngularDampingThresholdSqr!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalAngularDampingThresholdSqr(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btRigidBody_btRigidBodyConstructionInfo.cxx_get_m_additionalAngularDampingFactor()
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__CO__getter_m_additionalAngularDampingFactor__00e7b84164076cfb0174bce9bca51f76";

Float32
btRigidBody_btRigidBodyConstructionInfo.get_m_additionalAngularDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingFactor();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.cxx_set_m_additionalAngularDampingFactor!(Float32 value)
  = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__setter_m_additionalAngularDampingFactor__9ae701d95404d9d38dfc4324f27615e1";

btRigidBody_btRigidBodyConstructionInfo.set_m_additionalAngularDampingFactor!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalAngularDampingFactor(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btRigidBody_btRigidBodyConstructionInfo() = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__empty_ctor__92c1f365ec698031613d613ef9192227";

/// \dfgPresetOmit
btRigidBody_btRigidBodyConstructionInfo(
    btRigidBody_btRigidBodyConstructionInfo that
    ) = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__copy_ctor__164c89274a1930a91d2d02131fc2304a";

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.__ctor(
    Float32 mass,
    btMotionState motionState,
    btCollisionShape collisionShape
    ) = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__ctor__5642e28414dc9914a8ac728224ff6984";

/// \dfgPresetOmit
btRigidBody_btRigidBodyConstructionInfo(
    Float32 mass,
    btMotionState motionState,
    btCollisionShape collisionShape
    ) {
    this.__ctor(
        mass,
        motionState,
        collisionShape
        );
}

/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.__ctor(
    Float32 mass,
    btMotionState motionState,
    btCollisionShape collisionShape,
    CxxbtVector3ConstRef localInertia
    ) = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__ctor__2fbdd5c2d12ab9d2c9146b9b3c5534a0";

/// \dfgPresetOmit
btRigidBody_btRigidBodyConstructionInfo(
    Float32 mass,
    btMotionState motionState,
    btCollisionShape collisionShape,
    CxxbtVector3ConstRef localInertia
    ) {
    this.__ctor(
        mass,
        motionState,
        collisionShape,
        localInertia
        );
}

btRigidBody_btRigidBodyConstructionInfo(
    in
    Float32
    mass
    
    ,
    in
    btMotionState
    motionState
    
    ,
    in
    btCollisionShape
    collisionShape
    
    ,
    in
    btVector3
    localInertia
    
    
    ) {
    
    
    
    
    CxxbtVector3ConstRef localInertia__cxx = Make_CxxbtVector3ConstRef(localInertia);
    this.__ctor(
        mass,
        motionState,
        collisionShape,
        localInertia__cxx
        );
    
    
    
    
}

~btRigidBody_btRigidBodyConstructionInfo() = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__dtor__5c1897d1ad617abdf7d35ebc5e6ad30f";

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btRigidBody_btRigidBodyConstructionInfo.=(
    btRigidBody_btRigidBodyConstructionInfo that
    ) = "Bullet2__btRigidBody_btRigidBodyConstructionInfo__MU__simple_ass_op__a30e0a4ca9b701c02daa2167311a92e1";



/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo.appendDesc(io String string) {
  string += "btRigidBody_btRigidBodyConstructionInfo:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "m_mass:";
    string += this.cxx_get_m_mass();
    string += ",";
    string += "m_motionState:";
    string += this.cxx_get_m_motionState();
    string += ",";
    string += "m_startWorldTransform:";
    string += this.cxx_get_m_startWorldTransform();
    string += ",";
    string += "m_collisionShape:";
    string += this.cxx_get_m_collisionShape();
    string += ",";
    string += "m_localInertia:";
    string += this.cxx_get_m_localInertia();
    string += ",";
    string += "m_linearDamping:";
    string += this.cxx_get_m_linearDamping();
    string += ",";
    string += "m_angularDamping:";
    string += this.cxx_get_m_angularDamping();
    string += ",";
    string += "m_friction:";
    string += this.cxx_get_m_friction();
    string += ",";
    string += "m_rollingFriction:";
    string += this.cxx_get_m_rollingFriction();
    string += ",";
    string += "m_spinningFriction:";
    string += this.cxx_get_m_spinningFriction();
    string += ",";
    string += "m_restitution:";
    string += this.cxx_get_m_restitution();
    string += ",";
    string += "m_linearSleepingThreshold:";
    string += this.cxx_get_m_linearSleepingThreshold();
    string += ",";
    string += "m_angularSleepingThreshold:";
    string += this.cxx_get_m_angularSleepingThreshold();
    string += ",";
    string += "m_additionalDamping:";
    string += this.cxx_get_m_additionalDamping();
    string += ",";
    string += "m_additionalDampingFactor:";
    string += this.cxx_get_m_additionalDampingFactor();
    string += ",";
    string += "m_additionalLinearDampingThresholdSqr:";
    string += this.cxx_get_m_additionalLinearDampingThresholdSqr();
    string += ",";
    string += "m_additionalAngularDampingThresholdSqr:";
    string += this.cxx_get_m_additionalAngularDampingThresholdSqr();
    string += ",";
    string += "m_additionalAngularDampingFactor:";
    string += this.cxx_get_m_additionalAngularDampingFactor();
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBodyFloatData] EDK[Fabric_EDK_KL_btRigidBodyFloatData] LIB[btRigidBodyFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyFloatData] EDK[Fabric_EDK_KL_btRigidBodyFloatData] LIB[btRigidBodyFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyFloatData] EDK[Fabric_EDK_KL_btRigidBodyFloatData] LIB[btRigidBodyFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btRigidBodyFloatData() = "Bullet2__btRigidBodyFloatData__MU__empty_ctor__d561221624b903499d5603594332d300";

/// \dfgPresetOmit
btRigidBodyFloatData(
    btRigidBodyFloatData that
    ) = "Bullet2__btRigidBodyFloatData__MU__copy_ctor__baf29a2a319d5caf8e01049634c60035";

btRigidBodyFloatData.cxx_delete() = "Bullet2__btRigidBodyFloatData__MU__delete__667fd63af2007712b6a44573d8882b62";

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyFloatData] EDK[Fabric_EDK_KL_btRigidBodyFloatData] LIB[btRigidBodyFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyFloatData] EDK[Fabric_EDK_KL_btRigidBodyFloatData] LIB[btRigidBodyFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyFloatData] EDK[Fabric_EDK_KL_btRigidBodyFloatData] LIB[btRigidBodyFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btRigidBodyFloatData.=(
    btRigidBodyFloatData that
    ) = "Bullet2__btRigidBodyFloatData__MU__simple_ass_op__86952f144e319b497cf5905c01b132f7";


/// \dfgPresetOmit
/// \internal
btRigidBodyFloatData.appendDesc(io String string) {
  string += "btRigidBodyFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRigidBodyDoubleData] EDK[Fabric_EDK_KL_btRigidBodyDoubleData] LIB[btRigidBodyDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyDoubleData] EDK[Fabric_EDK_KL_btRigidBodyDoubleData] LIB[btRigidBodyDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyDoubleData] EDK[Fabric_EDK_KL_btRigidBodyDoubleData] LIB[btRigidBodyDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btRigidBodyDoubleData() = "Bullet2__btRigidBodyDoubleData__MU__empty_ctor__27ffebc086322a571159b72467d9ff2c";

/// \dfgPresetOmit
btRigidBodyDoubleData(
    btRigidBodyDoubleData that
    ) = "Bullet2__btRigidBodyDoubleData__MU__copy_ctor__528b749383b3d6514c7d3ecec8e10fa0";

btRigidBodyDoubleData.cxx_delete() = "Bullet2__btRigidBodyDoubleData__MU__delete__dda3b9d131a17fb2ba07c725a3d74e3f";

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyDoubleData] EDK[Fabric_EDK_KL_btRigidBodyDoubleData] LIB[btRigidBodyDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyDoubleData] EDK[Fabric_EDK_KL_btRigidBodyDoubleData] LIB[btRigidBodyDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRigidBodyDoubleData] EDK[Fabric_EDK_KL_btRigidBodyDoubleData] LIB[btRigidBodyDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btRigidBodyDoubleData.=(
    btRigidBodyDoubleData that
    ) = "Bullet2__btRigidBodyDoubleData__MU__simple_ass_op__718984037a53e1abe04069725052e23e";


/// \dfgPresetOmit
/// \internal
btRigidBodyDoubleData.appendDesc(io String string) {
  string += "btRigidBodyDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}





//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btJointFeedback] EDK[Fabric_EDK_KL_btJointFeedback] LIB[btJointFeedback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btJointFeedback] EDK[Fabric_EDK_KL_btJointFeedback] LIB[btJointFeedback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btJointFeedback] EDK[Fabric_EDK_KL_btJointFeedback] LIB[btJointFeedback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btJointFeedback() = "Bullet2__btJointFeedback__MU__empty_ctor__9acee665c4906bb3d9471943bd97f910";

/// \dfgPresetOmit
btJointFeedback(
    btJointFeedback that
    ) = "Bullet2__btJointFeedback__MU__copy_ctor__909061d9869434268c23a75528d419e9";

btJointFeedback.cxx_delete() = "Bullet2__btJointFeedback__MU__delete__ad68a34ac2314f049b0988da413aa69d";

//////////////////////////////////////////////////////////////////////////////
// KL[btJointFeedback] EDK[Fabric_EDK_KL_btJointFeedback] LIB[btJointFeedback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btJointFeedback] EDK[Fabric_EDK_KL_btJointFeedback] LIB[btJointFeedback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btJointFeedback] EDK[Fabric_EDK_KL_btJointFeedback] LIB[btJointFeedback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btJointFeedback.=(
    btJointFeedback that
    ) = "Bullet2__btJointFeedback__MU__simple_ass_op__5f782905e6b5d735f332371523ce0244";


/// \dfgPresetOmit
/// \internal
btJointFeedback.appendDesc(io String string) {
  string += "btJointFeedback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTypedConstraint() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btTypedConstraint(
    btTypedConstraint that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btTypedConstraint.cxx_delete() = "Bullet2__btTypedConstraint__MU__delete__d2765fa4e2f4989e8455f8ac6d6e09e3";

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btRigidBody
btTypedConstraint_CxxgetFixedBody(
    )
 = "Bullet2__btTypedConstraint__ST__meth_getFixedBody__d1ec0a4b36488a1bf0f67bcd67a9da18";

/// \dfgPresetOmit
/// \internal
SInt32
btTypedConstraint.cxx_getOverrideNumSolverIterations?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getOverrideNumSolverIterations__180c503a9dfe22a1a4631bd79d3da32c";

///override the number of constraint solver iterations used to solve this constraint
///-1 will use the default number of iterations, as specified in SolverInfo.m_numIterations
/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setOverrideNumSolverIterations!(
    SInt32 overideNumIterations
    )
 = "Bullet2__btTypedConstraint__MU__meth_setOverrideNumSolverIterations__e3e7609c5f6dbe79a7fe5586c9428e3d";

///internal method used by the constraint solver, don't use them directly
/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_buildJacobian!(
    )
 = "Bullet2__btTypedConstraint__MU__meth_buildJacobian__0d01df33e295aa7335bd2dec443e16c1";

///internal method used by the constraint solver, don't use them directly
/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btTypedConstraint__MU__meth_getInfo1__d8f028ad7be426ed415d9e46fe54a7b9";

///internal method used by the constraint solver, don't use them directly
/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btTypedConstraint__MU__meth_getInfo2__49202a5b38536ff54f40edc22e9bf4f0";

///internal method used by the constraint solver, don't use them directly
/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_internalSetAppliedImpulse!(
    Float32 appliedImpulse
    )
 = "Bullet2__btTypedConstraint__MU__meth_internalSetAppliedImpulse__d7410a0d00516f3afadf052f57de2c11";

///internal method used by the constraint solver, don't use them directly
/// \dfgPresetOmit
/// \internal
Float32
btTypedConstraint.cxx_internalGetAppliedImpulse!(
    )
 = "Bullet2__btTypedConstraint__MU__meth_internalGetAppliedImpulse__8c2a1c03b4c04d77bc8191318d308344";

/// \dfgPresetOmit
/// \internal
Float32
btTypedConstraint.cxx_getBreakingImpulseThreshold?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getBreakingImpulseThreshold__f3685a04c957f0958098e036a8776f14";

/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setBreakingImpulseThreshold!(
    Float32 threshold
    )
 = "Bullet2__btTypedConstraint__MU__meth_setBreakingImpulseThreshold__d23b8b1af9307806dc0b8cdd018c2991";

/// \dfgPresetOmit
/// \internal
Boolean
btTypedConstraint.cxx_isEnabled?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_isEnabled__db3161896f2b00ae188e9a563c2adb40";

/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setEnabled!(
    Boolean enabled
    )
 = "Bullet2__btTypedConstraint__MU__meth_setEnabled__49b99d9960a579919ce21a7fcd171317";

///internal method used by the constraint solver, don't use them directly
/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_solveConstraintObsolete!(
    btSolverBody _arg0,
    btSolverBody _arg1,
    Float32 _arg2
    )
 = "Bullet2__btTypedConstraint__MU__meth_solveConstraintObsolete__fa35040eeddc321da3eb1731be820d2e";

/// \dfgPresetOmit
/// \internal
btRigidBody
btTypedConstraint.cxx_getRigidBodyA?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getRigidBodyA__ddb19c80e5c02157b2fb6cd221515b3d";

/// \dfgPresetOmit
/// \internal
btRigidBody
btTypedConstraint.cxx_getRigidBodyB?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getRigidBodyB__4e2c8068072df735d233d325b0ab11c9";

/// \dfgPresetOmit
/// \internal
btRigidBody
btTypedConstraint.cxx_getRigidBodyA!(
    )
 = "Bullet2__btTypedConstraint__MU__meth_getRigidBodyA__8d9ff8528d9820354257d32ef7bbc54a";

/// \dfgPresetOmit
/// \internal
btRigidBody
btTypedConstraint.cxx_getRigidBodyB!(
    )
 = "Bullet2__btTypedConstraint__MU__meth_getRigidBodyB__b84169d05dbf598ac4a6896862e1debf";

/// \dfgPresetOmit
/// \internal
SInt32
btTypedConstraint.cxx_getUserConstraintType?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getUserConstraintType__1f06a84f9810c67ccf76eab905d2cb1d";

/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setUserConstraintType!(
    SInt32 userConstraintType
    )
 = "Bullet2__btTypedConstraint__MU__meth_setUserConstraintType__e30b95a939b55aaed7a2fcd087fe746a";

/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setUserConstraintId!(
    SInt32 uid
    )
 = "Bullet2__btTypedConstraint__MU__meth_setUserConstraintId__088bbceabc01ee9c0718289e6106ded6";

/// \dfgPresetOmit
/// \internal
SInt32
btTypedConstraint.cxx_getUserConstraintId?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getUserConstraintId__ddc6f19bed4a1fd4c3e9f051a3cb89db";

/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setUserConstraintPtr!(
    Data ptr
    )
 = "Bullet2__btTypedConstraint__MU__meth_setUserConstraintPtr__1f8e2705e0d6359ca9900527df2aa469";

/// \dfgPresetOmit
/// \internal
Data
btTypedConstraint.cxx_getUserConstraintPtr!(
    )
 = "Bullet2__btTypedConstraint__MU__meth_getUserConstraintPtr__02cf9a32de7620215458291d7a8f4198";

/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setJointFeedback!(
    btJointFeedback jointFeedback
    )
 = "Bullet2__btTypedConstraint__MU__meth_setJointFeedback__41daf2c1c496561da775b17fed13b444";

/// \dfgPresetOmit
/// \internal
btJointFeedback
btTypedConstraint.cxx_getJointFeedback?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getJointFeedback__de4d579f69423f4d0109359dc5c8c328";

/// \dfgPresetOmit
/// \internal
btJointFeedback
btTypedConstraint.cxx_getJointFeedback!(
    )
 = "Bullet2__btTypedConstraint__MU__meth_getJointFeedback__17602619e91a1dc57cf1b56a17a6f187";

/// \dfgPresetOmit
/// \internal
SInt32
btTypedConstraint.cxx_getUid?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getUid__c48eb1d5b27522e8ba647ed5216680bf";

/// \dfgPresetOmit
/// \internal
Boolean
btTypedConstraint.cxx_needsFeedback?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_needsFeedback__2df871bc397c0f1e0ea67563f367075d";

///enableFeedback will allow to read the applied linear and angular impulse
///use getAppliedImpulse, getAppliedLinearImpulse and getAppliedAngularImpulse to read feedback information
/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_enableFeedback!(
    Boolean needsFeedback
    )
 = "Bullet2__btTypedConstraint__MU__meth_enableFeedback__290ad1f908ccc5f9d86923ac8c9011a3";

///getAppliedImpulse is an estimated total applied impulse.
///This feedback could be used to determine breaking constraints or playing sounds.
/// \dfgPresetOmit
/// \internal
Float32
btTypedConstraint.cxx_getAppliedImpulse?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getAppliedImpulse__9450538f33115e5af8e89f9ae190b92a";

/// \dfgPresetOmit
/// \internal
btTypedConstraintType
btTypedConstraint.cxx_getConstraintType?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_getConstraintType__fa8942fa53d1674969fb0d5cda102948";

/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setDbgDrawSize!(
    Float32 dbgDrawSize
    )
 = "Bullet2__btTypedConstraint__MU__meth_setDbgDrawSize__310e52d526be87adffd77b0537398766";

/// \dfgPresetOmit
/// \internal
Float32
btTypedConstraint.cxx_getDbgDrawSize!(
    )
 = "Bullet2__btTypedConstraint__MU__meth_getDbgDrawSize__27fd221cc8ee8d3510123cd3f78f6715";

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
///If no axis is provided, it uses the default axis for this constraint.
/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value
    )
 = "Bullet2__btTypedConstraint__MU__meth_setParam__e1c9d36acbd9e246109c10ead9436d4d";

/// \dfgPresetOmit
/// \internal

btTypedConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value,
    SInt32 axis
    )
 = "Bullet2__btTypedConstraint__MU__meth_setParam__0cf8e312d76a6410e85fb14b2200c928";

///return the local value of parameter
/// \dfgPresetOmit
/// \internal
Float32
btTypedConstraint.cxx_getParam?(
    SInt32 num
    )
 = "Bullet2__btTypedConstraint__CO__meth_getParam__f7b4cd041d6570896c8e11d693dfea38";

/// \dfgPresetOmit
/// \internal
Float32
btTypedConstraint.cxx_getParam?(
    SInt32 num,
    SInt32 axis
    )
 = "Bullet2__btTypedConstraint__CO__meth_getParam__46ccebf0e4eefffc3b87eaa14be42539";

/// \dfgPresetOmit
/// \internal
SInt32
btTypedConstraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btTypedConstraint__CO__meth_calculateSerializeBufferSize__3b33214c96f5f9b49c8ea37fbcb658ca";

SInt32
btTypedConstraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btTypedConstraint.setJointFeedback!(
    in
    btJointFeedback
    jointFeedback
    
    
    )
{   
    
    
    this.cxx_setJointFeedback(
        jointFeedback
        );
    
    
    
}

Data
btTypedConstraint.getUserConstraintPtr!(
    )
{   
    Data __res = 
    this.cxx_getUserConstraintPtr(
        );
    
    return __res;
}

///getAppliedImpulse is an estimated total applied impulse.
///This feedback could be used to determine breaking constraints or playing sounds.
Float32
btTypedConstraint.getAppliedImpulse?(
    )
{   
    Float32 __res = 
    this.cxx_getAppliedImpulse(
        );
    
    return __res;
}


btTypedConstraint.setDbgDrawSize!(
    in
    Float32
    dbgDrawSize
    
    
    )
{   
    
    
    this.cxx_setDbgDrawSize(
        dbgDrawSize
        );
    
    
    
}


btTypedConstraint.setBreakingImpulseThreshold!(
    in
    Float32
    threshold
    
    
    )
{   
    
    
    this.cxx_setBreakingImpulseThreshold(
        threshold
        );
    
    
    
}

///internal method used by the constraint solver, don't use them directly

btTypedConstraint.solveConstraintObsolete!(
    in
    btSolverBody
    _arg0
    
    ,
    in
    btSolverBody
    _arg1
    
    ,
    in
    Float32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_solveConstraintObsolete(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

///internal method used by the constraint solver, don't use them directly

btTypedConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}


btTypedConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    
    
    this.cxx_setParam(
        num,
        value,
        axis
        );
    
    
    
    
    
}


btTypedConstraint.setUserConstraintType!(
    in
    SInt32
    userConstraintType
    
    
    )
{   
    
    
    this.cxx_setUserConstraintType(
        userConstraintType
        );
    
    
    
}


btTypedConstraint.setUserConstraintId!(
    in
    SInt32
    uid
    
    
    )
{   
    
    
    this.cxx_setUserConstraintId(
        uid
        );
    
    
    
}

///override the number of constraint solver iterations used to solve this constraint
///-1 will use the default number of iterations, as specified in SolverInfo.m_numIterations

btTypedConstraint.setOverrideNumSolverIterations!(
    in
    SInt32
    overideNumIterations
    
    
    )
{   
    
    
    this.cxx_setOverrideNumSolverIterations(
        overideNumIterations
        );
    
    
    
}

Boolean
btTypedConstraint.needsFeedback?(
    )
{   
    Boolean __res = 
    this.cxx_needsFeedback(
        );
    
    return __res;
}

Float32
btTypedConstraint.getDbgDrawSize!(
    )
{   
    Float32 __res = 
    this.cxx_getDbgDrawSize(
        );
    
    return __res;
}

SInt32
btTypedConstraint.getUserConstraintType?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserConstraintType(
        );
    
    return __res;
}

SInt32
btTypedConstraint.getUid?(
    )
{   
    SInt32 __res = 
    this.cxx_getUid(
        );
    
    return __res;
}

Float32
btTypedConstraint.getParam?(
    in
    SInt32
    num
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_getParam(
        num,
        axis
        );
    
    
    
    return __res;
}

///return the local value of parameter
Float32
btTypedConstraint.getParam?(
    in
    SInt32
    num
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getParam(
        num
        );
    
    
    return __res;
}

///internal method used by the constraint solver, don't use them directly

btTypedConstraint.buildJacobian!(
    )
{   
    
    this.cxx_buildJacobian(
        );
    
    
}

SInt32
btTypedConstraint.getUserConstraintId?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserConstraintId(
        );
    
    return __res;
}

///enableFeedback will allow to read the applied linear and angular impulse
///use getAppliedImpulse, getAppliedLinearImpulse and getAppliedAngularImpulse to read feedback information

btTypedConstraint.enableFeedback!(
    in
    Boolean
    needsFeedback
    
    
    )
{   
    
    
    this.cxx_enableFeedback(
        needsFeedback
        );
    
    
    
}

Boolean
btTypedConstraint.isEnabled?(
    )
{   
    Boolean __res = 
    this.cxx_isEnabled(
        );
    
    return __res;
}

btRigidBody
btTypedConstraint.getRigidBodyA?(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBodyA(
        );
    
    return __res;
}

btRigidBody
btTypedConstraint.getRigidBodyB?(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBodyB(
        );
    
    return __res;
}

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
///If no axis is provided, it uses the default axis for this constraint.

btTypedConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    
    )
{   
    
    
    
    this.cxx_setParam(
        num,
        value
        );
    
    
    
    
}

Float32
btTypedConstraint.getBreakingImpulseThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getBreakingImpulseThreshold(
        );
    
    return __res;
}

///internal method used by the constraint solver, don't use them directly

btTypedConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}

SInt32
btTypedConstraint.getOverrideNumSolverIterations?(
    )
{   
    SInt32 __res = 
    this.cxx_getOverrideNumSolverIterations(
        );
    
    return __res;
}

btTypedConstraintType
btTypedConstraint.getConstraintType?(
    )
{   
    btTypedConstraintType __res = 
    this.cxx_getConstraintType(
        );
    
    return __res;
}


btTypedConstraint.setEnabled!(
    in
    Boolean
    enabled
    
    
    )
{   
    
    
    this.cxx_setEnabled(
        enabled
        );
    
    
    
}

btJointFeedback
btTypedConstraint.getJointFeedback?(
    )
{   
    btJointFeedback __res = 
    this.cxx_getJointFeedback(
        );
    
    return __res;
}

///internal method used by the constraint solver, don't use them directly

btTypedConstraint.internalSetAppliedImpulse!(
    in
    Float32
    appliedImpulse
    
    
    )
{   
    
    
    this.cxx_internalSetAppliedImpulse(
        appliedImpulse
        );
    
    
    
}

///internal method used by the constraint solver, don't use them directly
Float32
btTypedConstraint.internalGetAppliedImpulse!(
    )
{   
    Float32 __res = 
    this.cxx_internalGetAppliedImpulse(
        );
    
    return __res;
}


btTypedConstraint.setUserConstraintPtr!(
    in
    Data
    ptr
    
    
    )
{   
    
    
    this.cxx_setUserConstraintPtr(
        ptr
        );
    
    
    
}

btRigidBody
btTypedConstraint_getFixedBody(
    )
{   
    btRigidBody __res = 
    btTypedConstraint_CxxgetFixedBody(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint] EDK[Fabric_EDK_KL_btTypedConstraint] LIB[btTypedConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTypedConstraint.=(
    btTypedConstraint that
    ) = "Bullet2__btTypedConstraint__MU__simple_ass_op__80e3e9f7b28750736d67fbddcf855774";


/// \dfgPresetOmit
/// \internal
btTypedConstraint.appendDesc(io String string) {
  string += "btTypedConstraint:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint_btConstraintInfo1] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1] LIB[btTypedConstraint::btConstraintInfo1 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo1] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1] LIB[btTypedConstraint::btConstraintInfo1 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo1] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1] LIB[btTypedConstraint::btConstraintInfo1 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTypedConstraint_btConstraintInfo1() = "Bullet2__btTypedConstraint_btConstraintInfo1__MU__empty_ctor__c8ff59ba124c9e0e85d746526d883d6f";

/// \dfgPresetOmit
btTypedConstraint_btConstraintInfo1(
    btTypedConstraint_btConstraintInfo1 that
    ) = "Bullet2__btTypedConstraint_btConstraintInfo1__MU__copy_ctor__4567427b9f6ce5ff760c299e1bc2dd0b";

btTypedConstraint_btConstraintInfo1.cxx_delete() = "Bullet2__btTypedConstraint_btConstraintInfo1__MU__delete__4419093d8a3066ce614a1874f30a613b";

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo1] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1] LIB[btTypedConstraint::btConstraintInfo1 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo1] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1] LIB[btTypedConstraint::btConstraintInfo1 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo1] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo1] LIB[btTypedConstraint::btConstraintInfo1 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTypedConstraint_btConstraintInfo1.=(
    btTypedConstraint_btConstraintInfo1 that
    ) = "Bullet2__btTypedConstraint_btConstraintInfo1__MU__simple_ass_op__93dd9bf541fd5937149ac8a5c89bcef5";


/// \dfgPresetOmit
/// \internal
btTypedConstraint_btConstraintInfo1.appendDesc(io String string) {
  string += "btTypedConstraint_btConstraintInfo1:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraint_btConstraintInfo2] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2] LIB[btTypedConstraint::btConstraintInfo2 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo2] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2] LIB[btTypedConstraint::btConstraintInfo2 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo2] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2] LIB[btTypedConstraint::btConstraintInfo2 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTypedConstraint_btConstraintInfo2() = "Bullet2__btTypedConstraint_btConstraintInfo2__MU__empty_ctor__84b2b716f7d30957fa76333f9170caaf";

/// \dfgPresetOmit
btTypedConstraint_btConstraintInfo2(
    btTypedConstraint_btConstraintInfo2 that
    ) = "Bullet2__btTypedConstraint_btConstraintInfo2__MU__copy_ctor__ac564f341433faad8f55beadfcc18ee9";

btTypedConstraint_btConstraintInfo2.cxx_delete() = "Bullet2__btTypedConstraint_btConstraintInfo2__MU__delete__ac3d8d02cdd82d87010bc214ba860f7a";

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo2] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2] LIB[btTypedConstraint::btConstraintInfo2 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo2] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2] LIB[btTypedConstraint::btConstraintInfo2 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraint_btConstraintInfo2] EDK[Fabric_EDK_KL_btTypedConstraint_btConstraintInfo2] LIB[btTypedConstraint::btConstraintInfo2 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTypedConstraint_btConstraintInfo2.=(
    btTypedConstraint_btConstraintInfo2 that
    ) = "Bullet2__btTypedConstraint_btConstraintInfo2__MU__simple_ass_op__5004003cfeee6a6b73b8adb00fd9ddac";


/// \dfgPresetOmit
/// \internal
btTypedConstraint_btConstraintInfo2.appendDesc(io String string) {
  string += "btTypedConstraint_btConstraintInfo2:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintFloatData] EDK[Fabric_EDK_KL_btTypedConstraintFloatData] LIB[btTypedConstraintFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintFloatData] EDK[Fabric_EDK_KL_btTypedConstraintFloatData] LIB[btTypedConstraintFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintFloatData] EDK[Fabric_EDK_KL_btTypedConstraintFloatData] LIB[btTypedConstraintFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTypedConstraintFloatData() = "Bullet2__btTypedConstraintFloatData__MU__empty_ctor__b09205189250f50fd64f37a4bf823e17";

/// \dfgPresetOmit
btTypedConstraintFloatData(
    btTypedConstraintFloatData that
    ) = "Bullet2__btTypedConstraintFloatData__MU__copy_ctor__a2b5559a15bf810f1ab6630abb16d5b3";

btTypedConstraintFloatData.cxx_delete() = "Bullet2__btTypedConstraintFloatData__MU__delete__8fb99020ac77037ab437b2b5da16afde";

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintFloatData] EDK[Fabric_EDK_KL_btTypedConstraintFloatData] LIB[btTypedConstraintFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintFloatData] EDK[Fabric_EDK_KL_btTypedConstraintFloatData] LIB[btTypedConstraintFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintFloatData] EDK[Fabric_EDK_KL_btTypedConstraintFloatData] LIB[btTypedConstraintFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTypedConstraintFloatData.=(
    btTypedConstraintFloatData that
    ) = "Bullet2__btTypedConstraintFloatData__MU__simple_ass_op__ccef28f8ae612f54f68ede16bd1ea49e";


/// \dfgPresetOmit
/// \internal
btTypedConstraintFloatData.appendDesc(io String string) {
  string += "btTypedConstraintFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintData] EDK[Fabric_EDK_KL_btTypedConstraintData] LIB[btTypedConstraintData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintData] EDK[Fabric_EDK_KL_btTypedConstraintData] LIB[btTypedConstraintData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintData] EDK[Fabric_EDK_KL_btTypedConstraintData] LIB[btTypedConstraintData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTypedConstraintData() = "Bullet2__btTypedConstraintData__MU__empty_ctor__970123f5d4ea2a10af5c13c31ef16656";

/// \dfgPresetOmit
btTypedConstraintData(
    btTypedConstraintData that
    ) = "Bullet2__btTypedConstraintData__MU__copy_ctor__1d59ceb2e0837d9c003e06482240ef2b";

btTypedConstraintData.cxx_delete() = "Bullet2__btTypedConstraintData__MU__delete__455ddab94c84e5d9845632bd4f047f33";

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintData] EDK[Fabric_EDK_KL_btTypedConstraintData] LIB[btTypedConstraintData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintData] EDK[Fabric_EDK_KL_btTypedConstraintData] LIB[btTypedConstraintData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintData] EDK[Fabric_EDK_KL_btTypedConstraintData] LIB[btTypedConstraintData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTypedConstraintData.=(
    btTypedConstraintData that
    ) = "Bullet2__btTypedConstraintData__MU__simple_ass_op__63b252f06feaec0fae486a39fba4f75c";


/// \dfgPresetOmit
/// \internal
btTypedConstraintData.appendDesc(io String string) {
  string += "btTypedConstraintData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTypedConstraintDoubleData] EDK[Fabric_EDK_KL_btTypedConstraintDoubleData] LIB[btTypedConstraintDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintDoubleData] EDK[Fabric_EDK_KL_btTypedConstraintDoubleData] LIB[btTypedConstraintDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintDoubleData] EDK[Fabric_EDK_KL_btTypedConstraintDoubleData] LIB[btTypedConstraintDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTypedConstraintDoubleData() = "Bullet2__btTypedConstraintDoubleData__MU__empty_ctor__24b4c0472f58d956fd23d282c137e0df";

/// \dfgPresetOmit
btTypedConstraintDoubleData(
    btTypedConstraintDoubleData that
    ) = "Bullet2__btTypedConstraintDoubleData__MU__copy_ctor__203d9d2a643285315848c6c70603c5fe";

btTypedConstraintDoubleData.cxx_delete() = "Bullet2__btTypedConstraintDoubleData__MU__delete__c927f2fc0724902b62c4f64c9909473e";

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintDoubleData] EDK[Fabric_EDK_KL_btTypedConstraintDoubleData] LIB[btTypedConstraintDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintDoubleData] EDK[Fabric_EDK_KL_btTypedConstraintDoubleData] LIB[btTypedConstraintDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTypedConstraintDoubleData] EDK[Fabric_EDK_KL_btTypedConstraintDoubleData] LIB[btTypedConstraintDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTypedConstraintDoubleData.=(
    btTypedConstraintDoubleData that
    ) = "Bullet2__btTypedConstraintDoubleData__MU__simple_ass_op__ae2dc8c0263dd1096efaa7162af50bc0";


/// \dfgPresetOmit
/// \internal
btTypedConstraintDoubleData.appendDesc(io String string) {
  string += "btTypedConstraintDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btAngularLimit(
    btAngularLimit that
    ) = "Bullet2__btAngularLimit__MU__copy_ctor__a74495dbe1074f998c8795e98e4fb78c";

/// \dfgPresetOmit
/// \internal
btAngularLimit.__ctor(
    ) = "Bullet2__btAngularLimit__MU__ctor__5332fcd63b5057ccf6a7dc1f7a6172b2";

/// Default constructor initializes limit as inactive, allowing free constraint movement
/// \dfgPresetOmit
btAngularLimit(
    ) {
    this.__ctor(
        );
}

btAngularLimit.cxx_delete() = "Bullet2__btAngularLimit__MU__delete__fa9a3df191c7cb443dfe7f8377fb8e82";

//////////////////////////////////////////////////////////////////////////////
// KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// Sets all limit's parameters.
/// When low > high limit becomes inactive.
/// When high - low > 2PI limit is ineffective too becouse no angle can exceed the limit
/// \dfgPresetOmit
/// \internal

btAngularLimit.cxx_set_!(
    Float32 low,
    Float32 high
    )
 = "Bullet2__btAngularLimit__MU__meth_set__0174d36d3e71ca8ebb563b79b176eef6";

/// \dfgPresetOmit
/// \internal

btAngularLimit.cxx_set_!(
    Float32 low,
    Float32 high,
    Float32 _softness
    )
 = "Bullet2__btAngularLimit__MU__meth_set__f20a0c1952e6317178570b61afcddf96";

/// \dfgPresetOmit
/// \internal

btAngularLimit.cxx_set_!(
    Float32 low,
    Float32 high,
    Float32 _softness,
    Float32 _biasFactor
    )
 = "Bullet2__btAngularLimit__MU__meth_set__825a46846ef46d7fa1695ac20c18fb53";

/// \dfgPresetOmit
/// \internal

btAngularLimit.cxx_set_!(
    Float32 low,
    Float32 high,
    Float32 _softness,
    Float32 _biasFactor,
    Float32 _relaxationFactor
    )
 = "Bullet2__btAngularLimit__MU__meth_set__140b46022a6c2b0ca0c8288c6baaa1c6";

/// Returns limit's softness
/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getSoftness?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getSoftness__a6a793b60b675d0d5fce626144c686a4";

/// Returns limit's bias factor
/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getBiasFactor?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getBiasFactor__dacb22b1f21cb94830a3557b072a4f83";

/// Returns limit's relaxation factor
/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getRelaxationFactor?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getRelaxationFactor__a217b7f92c8908d9eb4da110235de47c";

/// Returns correction value evaluated when test() was invoked
/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getCorrection?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getCorrection__ca42d5ad8ecb017046d781d3ba3bd210";

/// Returns sign value evaluated when test() was invoked
/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getSign?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getSign__045c8eccc623e7f84ed55167164790b9";

/// Gives half of the distance between min and max limit angle
/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getHalfRange?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getHalfRange__63dd15feda1d1ac326e38f35cf3843f5";

/// Returns true when the last test() invocation recognized limit violation
/// \dfgPresetOmit
/// \internal
Boolean
btAngularLimit.cxx_isLimit?(
    )
 = "Bullet2__btAngularLimit__CO__meth_isLimit__70642b112ce580922f93ddf5a695af1a";

/// Checks given angle against limit. If limit is active and angle doesn't fit it, the angle
/// returned is modified so it equals to the limit closest to given angle.
/// \dfgPresetOmit
/// \internal

btAngularLimit.cxx_fit?(
    CxxFloat32Ref angle
    )
 = "Bullet2__btAngularLimit__CO__meth_fit__ba11a15bddf2fab2a0da93a4bcdb3680";

/// Returns correction value multiplied by sign value
/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getError?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getError__9eba166ce9e640f3b33ee2d436fc1256";

/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getLow?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getLow__72ab9d4f27c1498c93c2436656c5611e";

/// \dfgPresetOmit
/// \internal
Float32
btAngularLimit.cxx_getHigh?(
    )
 = "Bullet2__btAngularLimit__CO__meth_getHigh__7eee25fe95fc5479f8752ce9c01e2e6b";


btAngularLimit.set!(
    in
    Float32
    low
    
    ,
    in
    Float32
    high
    
    ,
    in
    Float32
    _softness
    
    ,
    in
    Float32
    _biasFactor
    
    ,
    in
    Float32
    _relaxationFactor
    
    
    )
{   
    
    
    
    
    
    
    this.cxx_set_(
        low,
        high,
        _softness,
        _biasFactor,
        _relaxationFactor
        );
    
    
    
    
    
    
    
}


btAngularLimit.set!(
    in
    Float32
    low
    
    ,
    in
    Float32
    high
    
    ,
    in
    Float32
    _softness
    
    
    )
{   
    
    
    
    
    this.cxx_set_(
        low,
        high,
        _softness
        );
    
    
    
    
    
}


btAngularLimit.set!(
    in
    Float32
    low
    
    ,
    in
    Float32
    high
    
    ,
    in
    Float32
    _softness
    
    ,
    in
    Float32
    _biasFactor
    
    
    )
{   
    
    
    
    
    
    this.cxx_set_(
        low,
        high,
        _softness,
        _biasFactor
        );
    
    
    
    
    
    
}

/// Gives half of the distance between min and max limit angle
Float32
btAngularLimit.getHalfRange?(
    )
{   
    Float32 __res = 
    this.cxx_getHalfRange(
        );
    
    return __res;
}

/// Returns true when the last test() invocation recognized limit violation
Boolean
btAngularLimit.isLimit?(
    )
{   
    Boolean __res = 
    this.cxx_isLimit(
        );
    
    return __res;
}

/// Returns limit's bias factor
Float32
btAngularLimit.getBiasFactor?(
    )
{   
    Float32 __res = 
    this.cxx_getBiasFactor(
        );
    
    return __res;
}

Float32
btAngularLimit.getHigh?(
    )
{   
    Float32 __res = 
    this.cxx_getHigh(
        );
    
    return __res;
}

/// Returns correction value multiplied by sign value
Float32
btAngularLimit.getError?(
    )
{   
    Float32 __res = 
    this.cxx_getError(
        );
    
    return __res;
}

/// Returns limit's softness
Float32
btAngularLimit.getSoftness?(
    )
{   
    Float32 __res = 
    this.cxx_getSoftness(
        );
    
    return __res;
}

/// Returns sign value evaluated when test() was invoked
Float32
btAngularLimit.getSign?(
    )
{   
    Float32 __res = 
    this.cxx_getSign(
        );
    
    return __res;
}

/// Checks given angle against limit. If limit is active and angle doesn't fit it, the angle
/// returned is modified so it equals to the limit closest to given angle.

btAngularLimit.fit?(
    io
    Float32
    angle
    
    
    )
{   
    
    CxxFloat32Ref angle__cxx = Make_CxxFloat32Ref(angle);
    
    this.cxx_fit(
        angle__cxx
        );
    
    
    
}

/// Sets all limit's parameters.
/// When low > high limit becomes inactive.
/// When high - low > 2PI limit is ineffective too becouse no angle can exceed the limit

btAngularLimit.set!(
    in
    Float32
    low
    
    ,
    in
    Float32
    high
    
    
    )
{   
    
    
    
    this.cxx_set_(
        low,
        high
        );
    
    
    
    
}

/// Returns correction value evaluated when test() was invoked
Float32
btAngularLimit.getCorrection?(
    )
{   
    Float32 __res = 
    this.cxx_getCorrection(
        );
    
    return __res;
}

/// Returns limit's relaxation factor
Float32
btAngularLimit.getRelaxationFactor?(
    )
{   
    Float32 __res = 
    this.cxx_getRelaxationFactor(
        );
    
    return __res;
}

Float32
btAngularLimit.getLow?(
    )
{   
    Float32 __res = 
    this.cxx_getLow(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btAngularLimit] EDK[Fabric_EDK_KL_btAngularLimit] LIB[btAngularLimit *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btAngularLimit.=(
    btAngularLimit that
    ) = "Bullet2__btAngularLimit__MU__simple_ass_op__673592ce17b3539276c3efe3728bdc99";


/// \dfgPresetOmit
/// \internal
btAngularLimit.appendDesc(io String string) {
  string += "btAngularLimit:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btRotationalLimitMotor(
    btRotationalLimitMotor that
    ) = "Bullet2__btRotationalLimitMotor__MU__copy_ctor__cff4dad9bed76857b2e1b84377e753fc";

/// \dfgPresetOmit
/// \internal
btRotationalLimitMotor.__ctor(
    ) = "Bullet2__btRotationalLimitMotor__MU__ctor__3313e42fb6b54ea8e0c19eeca884c64b";

//!@}
/// \dfgPresetOmit
btRotationalLimitMotor(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btRotationalLimitMotor.__ctor(
    btRotationalLimitMotor limot
    ) = "Bullet2__btRotationalLimitMotor__MU__ctor__375c2e269b62702d080a4487a4244661";

/// \dfgPresetOmit
btRotationalLimitMotor(
    btRotationalLimitMotor limot
    ) {
    this.__ctor(
        limot
        );
}

btRotationalLimitMotor.cxx_delete() = "Bullet2__btRotationalLimitMotor__MU__delete__3923914e57ad73befa732b15d7e5dff3";

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! Is limited
/// \dfgPresetOmit
/// \internal
Boolean
btRotationalLimitMotor.cxx_isLimited?(
    )
 = "Bullet2__btRotationalLimitMotor__CO__meth_isLimited__38dce76697c153de11afdd7293765173";

//! Need apply correction
/// \dfgPresetOmit
/// \internal
Boolean
btRotationalLimitMotor.cxx_needApplyTorques?(
    )
 = "Bullet2__btRotationalLimitMotor__CO__meth_needApplyTorques__5a9501309f73b7ba737ec8d1d1639445";

//! calculates  error
// /*!
// calculates m_currentLimit and m_currentLimitError.
// */
/// \dfgPresetOmit
/// \internal
SInt32
btRotationalLimitMotor.cxx_testLimitValue!(
    Float32 test_value
    )
 = "Bullet2__btRotationalLimitMotor__MU__meth_testLimitValue__30b0a028c9d624969832522d1f418195";

//! apply the correction impulses for two bodies
/// \dfgPresetOmit
/// \internal
Float32
btRotationalLimitMotor.cxx_solveAngularLimits!(
    Float32 timeStep,
    CxxbtVector3Ref axis,
    Float32 jacDiagABInv,
    btRigidBody body0,
    btRigidBody body1
    )
 = "Bullet2__btRotationalLimitMotor__MU__meth_solveAngularLimits__d88cb8846c74e74e7dacadf783c01633";

//! Need apply correction
Boolean
btRotationalLimitMotor.needApplyTorques?(
    )
{   
    Boolean __res = 
    this.cxx_needApplyTorques(
        );
    
    return __res;
}

//! Is limited
Boolean
btRotationalLimitMotor.isLimited?(
    )
{   
    Boolean __res = 
    this.cxx_isLimited(
        );
    
    return __res;
}

//! apply the correction impulses for two bodies
Float32
btRotationalLimitMotor.solveAngularLimits!(
    in
    Float32
    timeStep
    
    ,
    io
    btVector3
    axis
    
    ,
    in
    Float32
    jacDiagABInv
    
    ,
    in
    btRigidBody
    body0
    
    ,
    in
    btRigidBody
    body1
    
    
    )
{   
    
    
    CxxbtVector3Ref axis__cxx = Make_CxxbtVector3Ref(axis);
    
    
    
    Float32 __res = 
    this.cxx_solveAngularLimits(
        timeStep,
        axis__cxx,
        jacDiagABInv,
        body0,
        body1
        );
    
    
    
    
    
    
    return __res;
}

//! calculates  error
// /*!
// calculates m_currentLimit and m_currentLimitError.
// */
SInt32
btRotationalLimitMotor.testLimitValue!(
    in
    Float32
    test_value
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_testLimitValue(
        test_value
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor] EDK[Fabric_EDK_KL_btRotationalLimitMotor] LIB[btRotationalLimitMotor *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btRotationalLimitMotor.=(
    btRotationalLimitMotor that
    ) = "Bullet2__btRotationalLimitMotor__MU__simple_ass_op__332a81148bb3769b36071227aca36182";


/// \dfgPresetOmit
/// \internal
btRotationalLimitMotor.appendDesc(io String string) {
  string += "btRotationalLimitMotor:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btTranslationalLimitMotor(
    btTranslationalLimitMotor that
    ) = "Bullet2__btTranslationalLimitMotor__MU__copy_ctor__63e7d93a3448627a569166b62c49c08e";

/// \dfgPresetOmit
/// \internal
btTranslationalLimitMotor.__ctor(
    ) = "Bullet2__btTranslationalLimitMotor__MU__ctor__2fd16b5f85c74cae6c2e62340ea45d66";

/// \dfgPresetOmit
btTranslationalLimitMotor(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btTranslationalLimitMotor.__ctor(
    btTranslationalLimitMotor other
    ) = "Bullet2__btTranslationalLimitMotor__MU__ctor__6318c2d31d4b7c29a65086152f430546";

/// \dfgPresetOmit
btTranslationalLimitMotor(
    btTranslationalLimitMotor other
    ) {
    this.__ctor(
        other
        );
}

btTranslationalLimitMotor.cxx_delete() = "Bullet2__btTranslationalLimitMotor__MU__delete__655316de18036176b0840a2bb27acbb9";

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! Test limit
// /*!
// - free means upper < lower,
// - locked means upper == lower
// - limited means upper > lower
// - limitIndex: first 3 are linear, next 3 are angular
// */
/// \dfgPresetOmit
/// \internal
Boolean
btTranslationalLimitMotor.cxx_isLimited?(
    SInt32 limitIndex
    )
 = "Bullet2__btTranslationalLimitMotor__CO__meth_isLimited__664bec7763cbbe61dfdb35c925c927fa";

/// \dfgPresetOmit
/// \internal
Boolean
btTranslationalLimitMotor.cxx_needApplyForce?(
    SInt32 limitIndex
    )
 = "Bullet2__btTranslationalLimitMotor__CO__meth_needApplyForce__661674022e653461f8f4daf44876b120";

/// \dfgPresetOmit
/// \internal
SInt32
btTranslationalLimitMotor.cxx_testLimitValue!(
    SInt32 limitIndex,
    Float32 test_value
    )
 = "Bullet2__btTranslationalLimitMotor__MU__meth_testLimitValue__a0574704d8c81574638095f0a600c8ef";

/// \dfgPresetOmit
/// \internal
Float32
btTranslationalLimitMotor.cxx_solveLinearAxis!(
    Float32 timeStep,
    Float32 jacDiagABInv,
    btRigidBody body1,
    CxxbtVector3ConstRef pointInA,
    btRigidBody body2,
    CxxbtVector3ConstRef pointInB,
    SInt32 limit_index,
    CxxbtVector3ConstRef axis_normal_on_a,
    CxxbtVector3ConstRef anchorPos
    )
 = "Bullet2__btTranslationalLimitMotor__MU__meth_solveLinearAxis__ab8a4fb3e33b2af2b2e7d4e8ed5f418a";

//! Test limit
// /*!
// - free means upper < lower,
// - locked means upper == lower
// - limited means upper > lower
// - limitIndex: first 3 are linear, next 3 are angular
// */
Boolean
btTranslationalLimitMotor.isLimited?(
    in
    SInt32
    limitIndex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isLimited(
        limitIndex
        );
    
    
    return __res;
}

Float32
btTranslationalLimitMotor.solveLinearAxis!(
    in
    Float32
    timeStep
    
    ,
    in
    Float32
    jacDiagABInv
    
    ,
    in
    btRigidBody
    body1
    
    ,
    in
    btVector3
    pointInA
    
    ,
    in
    btRigidBody
    body2
    
    ,
    in
    btVector3
    pointInB
    
    ,
    in
    SInt32
    limit_index
    
    ,
    in
    btVector3
    axis_normal_on_a
    
    ,
    in
    btVector3
    anchorPos
    
    
    )
{   
    
    
    
    
    CxxbtVector3ConstRef pointInA__cxx = Make_CxxbtVector3ConstRef(pointInA);
    
    
    CxxbtVector3ConstRef pointInB__cxx = Make_CxxbtVector3ConstRef(pointInB);
    
    
    CxxbtVector3ConstRef axis_normal_on_a__cxx = Make_CxxbtVector3ConstRef(axis_normal_on_a);
    
    CxxbtVector3ConstRef anchorPos__cxx = Make_CxxbtVector3ConstRef(anchorPos);
    Float32 __res = 
    this.cxx_solveLinearAxis(
        timeStep,
        jacDiagABInv,
        body1,
        pointInA__cxx,
        body2,
        pointInB__cxx,
        limit_index,
        axis_normal_on_a__cxx,
        anchorPos__cxx
        );
    
    
    
    
    
    
    
    
    
    
    return __res;
}

Boolean
btTranslationalLimitMotor.needApplyForce?(
    in
    SInt32
    limitIndex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_needApplyForce(
        limitIndex
        );
    
    
    return __res;
}

SInt32
btTranslationalLimitMotor.testLimitValue!(
    in
    SInt32
    limitIndex
    
    ,
    in
    Float32
    test_value
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_testLimitValue(
        limitIndex,
        test_value
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor] EDK[Fabric_EDK_KL_btTranslationalLimitMotor] LIB[btTranslationalLimitMotor *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTranslationalLimitMotor.=(
    btTranslationalLimitMotor that
    ) = "Bullet2__btTranslationalLimitMotor__MU__simple_ass_op__3dd7fa00c5bdc169f9dfb62d1c1d4fab";


/// \dfgPresetOmit
/// \internal
btTranslationalLimitMotor.appendDesc(io String string) {
  string += "btTranslationalLimitMotor:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofConstraint() = "Bullet2__btGeneric6DofConstraint__MU__empty_ctor__eb54dc2320c313e69ac2ab489661bc83";

/// \dfgPresetOmit
btGeneric6DofConstraint(
    btGeneric6DofConstraint that
    ) = "Bullet2__btGeneric6DofConstraint__MU__copy_ctor__34bee9255c10e8895c987b854edf6cf8";

/// \dfgPresetOmit
/// \internal
btGeneric6DofConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameA
    ) = "Bullet2__btGeneric6DofConstraint__MU__ctor__6c79602783620dd256cc1ce05280d726";

/// \dfgPresetOmit
btGeneric6DofConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbB,
        frameInA,
        frameInB,
        useLinearReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btGeneric6DofConstraint.__ctor(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameB
    ) = "Bullet2__btGeneric6DofConstraint__MU__ctor__e8b81e311e110e11496d960d0dd7c3a9";

/// \dfgPresetOmit
btGeneric6DofConstraint(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameB
    ) {
    this.__ctor(
        rbB,
        frameInB,
        useLinearReferenceFrameB
        );
}

btGeneric6DofConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInA
    
    ,
    in
    btTransform
    frameInB
    
    ,
    in
    Boolean
    useLinearReferenceFrameA
    
    
    ) {
    
    
    
    CxxbtTransformConstRef frameInA__cxx = Make_CxxbtTransformConstRef(frameInA);
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    
    this.__ctor(
        rbA,
        rbB,
        frameInA__cxx,
        frameInB__cxx,
        useLinearReferenceFrameA
        );
    
    
    
    
    
}

btGeneric6DofConstraint(
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInB
    
    ,
    in
    Boolean
    useLinearReferenceFrameB
    
    
    ) {
    
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    
    this.__ctor(
        rbB,
        frameInB__cxx,
        useLinearReferenceFrameB
        );
    
    
    
}

btGeneric6DofConstraint.cxx_delete() = "Bullet2__btGeneric6DofConstraint__MU__delete__7e97fd8a5bd36947fa691c0a05de9248";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! Calcs global transform of the offsets
// /*!
// Calcs the global transform for the joint offset for body A an B, and also calcs the agle differences between the bodies.
// \sa btGeneric6DofConstraint.getCalculatedTransformA , btGeneric6DofConstraint.getCalculatedTransformB, btGeneric6DofConstraint.calculateAngleInfo
// */
/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_calculateTransforms!(
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_calculateTransforms__a0a6d5e0f6744411cc7717bcce1412fa";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_calculateTransforms!(
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_calculateTransforms__d45671720360e53ebe84121665c7dda8";

//! Gets the global transform of the offset for body A
// /*!
// \sa btGeneric6DofConstraint.getFrameOffsetA, btGeneric6DofConstraint.getFrameOffsetB, btGeneric6DofConstraint.calculateAngleInfo.
// */
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btGeneric6DofConstraint.cxx_getCalculatedTransformA?(
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getCalculatedTransformA__671a200dc7effcd9ca9c63d2f3a2f2ab";

//! Gets the global transform of the offset for body B
// /*!
// \sa btGeneric6DofConstraint.getFrameOffsetA, btGeneric6DofConstraint.getFrameOffsetB, btGeneric6DofConstraint.calculateAngleInfo.
// */
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btGeneric6DofConstraint.cxx_getCalculatedTransformB?(
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getCalculatedTransformB__6c244b47570fdf041a79337b3565536d";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btGeneric6DofConstraint.cxx_getFrameOffsetA?(
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getFrameOffsetA__180bffea0018cc1eb363f0210252670e";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btGeneric6DofConstraint.cxx_getFrameOffsetB?(
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getFrameOffsetB__4ed5bf097a6949ebe6d4e6ebfb3c9264";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btGeneric6DofConstraint.cxx_getFrameOffsetA!(
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_getFrameOffsetA__674aa96bf052a2ed1cf9ed94be89d7c7";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btGeneric6DofConstraint.cxx_getFrameOffsetB!(
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_getFrameOffsetB__c99355a6f58395bcb39ef04a99f63cb6";

//! performs Jacobian calculation, and also calculates angle differences and axis
/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_buildJacobian!(
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_buildJacobian__b7c3f750e0994465472e08c69b7b9da6";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_getInfo1__f626386a81bff653a080448031b8d010";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_getInfo1NonVirtual!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_getInfo1NonVirtual__aa38fa92143c7187693bfdf8dfed2ad3";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_getInfo2__6e6a77b63268c4e509d79926f4df157e";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_getInfo2NonVirtual!(
    btTypedConstraint_btConstraintInfo2 info,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtVector3ConstRef linVelA,
    CxxbtVector3ConstRef linVelB,
    CxxbtVector3ConstRef angVelA,
    CxxbtVector3ConstRef angVelB
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_getInfo2NonVirtual__a7bb29dd6a0223f44081bc2de6bf70c3";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_updateRHS!(
    Float32 timeStep
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_updateRHS__f9ab46fa2a0e6252293f964a9f7ebf28";

//! Get the rotation axis in global coordinates
// /*!
// \pre btGeneric6DofConstraint.buildJacobian must be called previously.
// */
/// \dfgPresetOmit
/// \internal
btVector3
btGeneric6DofConstraint.cxx_getAxis?(
    SInt32 axis_index
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getAxis__5f6e3457818e5ad5f778f0dc1930154a";

//! Get the relative Euler angle
// /*!
// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
// */
/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofConstraint.cxx_getAngle?(
    SInt32 axis_index
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getAngle__0f7379f6e400088874b69105197fd18f";

//! Get the relative position of the constraint pivot
// /*!
// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
// */
/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofConstraint.cxx_getRelativePivotPosition?(
    SInt32 axis_index
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getRelativePivotPosition__87042e3e910d1ebde7e8e8b9d111c69d";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setFrames!(
    CxxbtTransformConstRef frameA,
    CxxbtTransformConstRef frameB
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setFrames__d8c6bb0671e82746b6b0c1b54fcdc898";

//! Test angular limit.
// /*!
// Calculates angular correction and returns true if limit needs to be corrected.
// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
// */
/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofConstraint.cxx_testAngularLimitMotor!(
    SInt32 axis_index
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_testAngularLimitMotor__fdc7ac78782a0279c325bad0cdada7ea";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setLinearLowerLimit!(
    CxxbtVector3ConstRef linearLower
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setLinearLowerLimit__b08d21d8ca209efe7434e4c76832108e";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_getLinearLowerLimit?(
    CxxbtVector3Ref linearLower
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getLinearLowerLimit__ae0cb3ba793aec109a3367882bcebdb0";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setLinearUpperLimit!(
    CxxbtVector3ConstRef linearUpper
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setLinearUpperLimit__1e878b871f02e101fe8d5efb1c93fe2a";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_getLinearUpperLimit?(
    CxxbtVector3Ref linearUpper
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getLinearUpperLimit__f3be73a911314e5f8d945c1fc6727196";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setAngularLowerLimit!(
    CxxbtVector3ConstRef angularLower
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setAngularLowerLimit__70fbc806cf693b2b887bc0b6e7e427f6";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_getAngularLowerLimit?(
    CxxbtVector3Ref angularLower
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getAngularLowerLimit__60c79acb05607164e3f83f67183c6375";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setAngularUpperLimit!(
    CxxbtVector3ConstRef angularUpper
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setAngularUpperLimit__e3273c643c48c6362ee4bcf1c8da85a7";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_getAngularUpperLimit?(
    CxxbtVector3Ref angularUpper
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getAngularUpperLimit__6907640dd0fba3cd55bc6f1bfa5a6b71";

//! Retrieves the angular limit informacion
/// \dfgPresetOmit
/// \internal
btRotationalLimitMotor
btGeneric6DofConstraint.cxx_getRotationalLimitMotor!(
    SInt32 index
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_getRotationalLimitMotor__abe4a939649894124d69edabb746ef41";

//! Retrieves the  limit informacion
/// \dfgPresetOmit
/// \internal
btTranslationalLimitMotor
btGeneric6DofConstraint.cxx_getTranslationalLimitMotor!(
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_getTranslationalLimitMotor__bba0020dc51cd474d97cc3214f76e836";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setLimit!(
    SInt32 axis,
    Float32 lo,
    Float32 hi
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setLimit__7f0df63d18d134f1eb2bee6d6871a75b";

//! Test limit
// /*!
// - free means upper < lower,
// - locked means upper == lower
// - limited means upper > lower
// - limitIndex: first 3 are linear, next 3 are angular
// */
/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofConstraint.cxx_isLimited?(
    SInt32 limitIndex
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_isLimited__a25718524e675edcbcc008a8210db27b";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_calcAnchorPos!(
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_calcAnchorPos__21ef3895c487f4bec5dfc121468b18b3";

/// \dfgPresetOmit
/// \internal
SInt32
btGeneric6DofConstraint.cxx_get_limit_motor_info2!(
    btRotationalLimitMotor limot,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtVector3ConstRef linVelA,
    CxxbtVector3ConstRef linVelB,
    CxxbtVector3ConstRef angVelA,
    CxxbtVector3ConstRef angVelB,
    btTypedConstraint_btConstraintInfo2 info,
    SInt32 row,
    CxxbtVector3Ref ax1,
    SInt32 rotational
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_get_limit_motor_info2__d1a22a800de400096f85aab70fb249f6";

/// \dfgPresetOmit
/// \internal
SInt32
btGeneric6DofConstraint.cxx_get_limit_motor_info2!(
    btRotationalLimitMotor limot,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtVector3ConstRef linVelA,
    CxxbtVector3ConstRef linVelB,
    CxxbtVector3ConstRef angVelA,
    CxxbtVector3ConstRef angVelB,
    btTypedConstraint_btConstraintInfo2 info,
    SInt32 row,
    CxxbtVector3Ref ax1,
    SInt32 rotational,
    SInt32 rotAllowed
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_get_limit_motor_info2__5159e1f593e48ed9843f881203281802";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofConstraint.cxx_getUseFrameOffset?(
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getUseFrameOffset__cc3974dfbaf5097856d05ec309938a81";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setUseFrameOffset!(
    Boolean frameOffsetOnOff
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setUseFrameOffset__9d351875b386614c275917efea173d2a";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofConstraint.cxx_getUseLinearReferenceFrameA?(
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getUseLinearReferenceFrameA__939fd5755213c9277296b17da5e681e4";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setUseLinearReferenceFrameA!(
    Boolean linearReferenceFrameA
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setUseLinearReferenceFrameA__0e9fc584c7020a29777bffc87445cfb6";

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
///If no axis is provided, it uses the default axis for this constraint.
/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setParam__3465fd6e7f58d3dab03a21d4aa0f9a54";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value,
    SInt32 axis
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setParam__c6b2005f072346ce0d2834cd863b45b4";

///return the local value of parameter
/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofConstraint.cxx_getParam?(
    SInt32 num
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getParam__b500f8eb8b1ac1d596ea193e697dc6b8";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofConstraint.cxx_getParam?(
    SInt32 num,
    SInt32 axis
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getParam__d0e4bc4212cd7f1d9637efb8143a57f7";

/// \dfgPresetOmit
/// \internal

btGeneric6DofConstraint.cxx_setAxis!(
    CxxbtVector3ConstRef axis1,
    CxxbtVector3ConstRef axis2
    )
 = "Bullet2__btGeneric6DofConstraint__MU__meth_setAxis__678b1396c0e83ec4d7a1684901bc6923";

/// \dfgPresetOmit
/// \internal
SInt32
btGeneric6DofConstraint.cxx_getFlags?(
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_getFlags__227baabace74e28bba5eb7aaa1241112";

/// \dfgPresetOmit
/// \internal
SInt32
btGeneric6DofConstraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btGeneric6DofConstraint__CO__meth_calculateSerializeBufferSize__f5687dcecbcb59821aa2c526fbc96a21";


btGeneric6DofConstraint.calculateTransforms!(
    )
{   
    
    this.cxx_calculateTransforms(
        );
    
    
}


btGeneric6DofConstraint.getInfo2NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btVector3
    linVelA
    
    ,
    in
    btVector3
    linVelB
    
    ,
    in
    btVector3
    angVelA
    
    ,
    in
    btVector3
    angVelB
    
    
    )
{   
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtVector3ConstRef linVelA__cxx = Make_CxxbtVector3ConstRef(linVelA);
    
    CxxbtVector3ConstRef linVelB__cxx = Make_CxxbtVector3ConstRef(linVelB);
    
    CxxbtVector3ConstRef angVelA__cxx = Make_CxxbtVector3ConstRef(angVelA);
    
    CxxbtVector3ConstRef angVelB__cxx = Make_CxxbtVector3ConstRef(angVelB);
    
    this.cxx_getInfo2NonVirtual(
        info,
        transA__cxx,
        transB__cxx,
        linVelA__cxx,
        linVelB__cxx,
        angVelA__cxx,
        angVelB__cxx
        );
    
    
    
    
    
    
    
    
    
}

//! Retrieves the angular limit informacion
btRotationalLimitMotor
btGeneric6DofConstraint.getRotationalLimitMotor!(
    in
    SInt32
    index
    
    
    )
{   
    
    btRotationalLimitMotor __res = 
    this.cxx_getRotationalLimitMotor(
        index
        );
    
    
    return __res;
}


btGeneric6DofConstraint.setLinearUpperLimit!(
    in
    btVector3
    linearUpper
    
    
    )
{   
    
    CxxbtVector3ConstRef linearUpper__cxx = Make_CxxbtVector3ConstRef(linearUpper);
    
    this.cxx_setLinearUpperLimit(
        linearUpper__cxx
        );
    
    
    
}

SInt32
btGeneric6DofConstraint.get_limit_motor_info2!(
    in
    btRotationalLimitMotor
    limot
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btVector3
    linVelA
    
    ,
    in
    btVector3
    linVelB
    
    ,
    in
    btVector3
    angVelA
    
    ,
    in
    btVector3
    angVelB
    
    ,
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    SInt32
    row
    
    ,
    io
    btVector3
    ax1
    
    ,
    in
    SInt32
    rotational
    
    ,
    in
    SInt32
    rotAllowed
    
    
    )
{   
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtVector3ConstRef linVelA__cxx = Make_CxxbtVector3ConstRef(linVelA);
    
    CxxbtVector3ConstRef linVelB__cxx = Make_CxxbtVector3ConstRef(linVelB);
    
    CxxbtVector3ConstRef angVelA__cxx = Make_CxxbtVector3ConstRef(angVelA);
    
    CxxbtVector3ConstRef angVelB__cxx = Make_CxxbtVector3ConstRef(angVelB);
    
    
    
    CxxbtVector3Ref ax1__cxx = Make_CxxbtVector3Ref(ax1);
    
    
    SInt32 __res = 
    this.cxx_get_limit_motor_info2(
        limot,
        transA__cxx,
        transB__cxx,
        linVelA__cxx,
        linVelB__cxx,
        angVelA__cxx,
        angVelB__cxx,
        info,
        row,
        ax1__cxx,
        rotational,
        rotAllowed
        );
    
    
    
    
    
    
    
    
    
    
    
    
    
    return __res;
}


btGeneric6DofConstraint.calcAnchorPos!(
    )
{   
    
    this.cxx_calcAnchorPos(
        );
    
    
}

//! Test angular limit.
// /*!
// Calculates angular correction and returns true if limit needs to be corrected.
// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
// */
Boolean
btGeneric6DofConstraint.testAngularLimitMotor!(
    in
    SInt32
    axis_index
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_testAngularLimitMotor(
        axis_index
        );
    
    
    return __res;
}


btGeneric6DofConstraint.setUseFrameOffset!(
    in
    Boolean
    frameOffsetOnOff
    
    
    )
{   
    
    
    this.cxx_setUseFrameOffset(
        frameOffsetOnOff
        );
    
    
    
}

//! Test limit
// /*!
// - free means upper < lower,
// - locked means upper == lower
// - limited means upper > lower
// - limitIndex: first 3 are linear, next 3 are angular
// */
Boolean
btGeneric6DofConstraint.isLimited?(
    in
    SInt32
    limitIndex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isLimited(
        limitIndex
        );
    
    
    return __res;
}


btGeneric6DofConstraint.getAngularLowerLimit?(
    io
    btVector3
    angularLower
    
    
    )
{   
    
    CxxbtVector3Ref angularLower__cxx = Make_CxxbtVector3Ref(angularLower);
    
    this.cxx_getAngularLowerLimit(
        angularLower__cxx
        );
    
    
    
}


btGeneric6DofConstraint.setAxis!(
    in
    btVector3
    axis1
    
    ,
    in
    btVector3
    axis2
    
    
    )
{   
    
    CxxbtVector3ConstRef axis1__cxx = Make_CxxbtVector3ConstRef(axis1);
    
    CxxbtVector3ConstRef axis2__cxx = Make_CxxbtVector3ConstRef(axis2);
    
    this.cxx_setAxis(
        axis1__cxx,
        axis2__cxx
        );
    
    
    
    
}

Boolean
btGeneric6DofConstraint.getUseLinearReferenceFrameA?(
    )
{   
    Boolean __res = 
    this.cxx_getUseLinearReferenceFrameA(
        );
    
    return __res;
}


btGeneric6DofConstraint.updateRHS!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_updateRHS(
        timeStep
        );
    
    
    
}


btGeneric6DofConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}


btGeneric6DofConstraint.setLinearLowerLimit!(
    in
    btVector3
    linearLower
    
    
    )
{   
    
    CxxbtVector3ConstRef linearLower__cxx = Make_CxxbtVector3ConstRef(linearLower);
    
    this.cxx_setLinearLowerLimit(
        linearLower__cxx
        );
    
    
    
}

btTransform
btGeneric6DofConstraint.getFrameOffsetB?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getFrameOffsetB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btGeneric6DofConstraint.setFrames!(
    in
    btTransform
    frameA
    
    ,
    in
    btTransform
    frameB
    
    
    )
{   
    
    CxxbtTransformConstRef frameA__cxx = Make_CxxbtTransformConstRef(frameA);
    
    CxxbtTransformConstRef frameB__cxx = Make_CxxbtTransformConstRef(frameB);
    
    this.cxx_setFrames(
        frameA__cxx,
        frameB__cxx
        );
    
    
    
    
}

SInt32
btGeneric6DofConstraint.getFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getFlags(
        );
    
    return __res;
}


btGeneric6DofConstraint.setAngularLowerLimit!(
    in
    btVector3
    angularLower
    
    
    )
{   
    
    CxxbtVector3ConstRef angularLower__cxx = Make_CxxbtVector3ConstRef(angularLower);
    
    this.cxx_setAngularLowerLimit(
        angularLower__cxx
        );
    
    
    
}

Float32
btGeneric6DofConstraint.getParam?(
    in
    SInt32
    num
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_getParam(
        num,
        axis
        );
    
    
    
    return __res;
}


btGeneric6DofConstraint.setLimit!(
    in
    SInt32
    axis
    
    ,
    in
    Float32
    lo
    
    ,
    in
    Float32
    hi
    
    
    )
{   
    
    
    
    
    this.cxx_setLimit(
        axis,
        lo,
        hi
        );
    
    
    
    
    
}


btGeneric6DofConstraint.setAngularUpperLimit!(
    in
    btVector3
    angularUpper
    
    
    )
{   
    
    CxxbtVector3ConstRef angularUpper__cxx = Make_CxxbtVector3ConstRef(angularUpper);
    
    this.cxx_setAngularUpperLimit(
        angularUpper__cxx
        );
    
    
    
}


btGeneric6DofConstraint.getInfo1NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1NonVirtual(
        info
        );
    
    
    
}

//! performs Jacobian calculation, and also calculates angle differences and axis

btGeneric6DofConstraint.buildJacobian!(
    )
{   
    
    this.cxx_buildJacobian(
        );
    
    
}

//! Calcs global transform of the offsets
// /*!
// Calcs the global transform for the joint offset for body A an B, and also calcs the agle differences between the bodies.
// \sa btGeneric6DofConstraint.getCalculatedTransformA , btGeneric6DofConstraint.getCalculatedTransformB, btGeneric6DofConstraint.calculateAngleInfo
// */

btGeneric6DofConstraint.calculateTransforms!(
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    
    )
{   
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    this.cxx_calculateTransforms(
        transA__cxx,
        transB__cxx
        );
    
    
    
    
}

///return the local value of parameter
Float32
btGeneric6DofConstraint.getParam?(
    in
    SInt32
    num
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getParam(
        num
        );
    
    
    return __res;
}


btGeneric6DofConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    
    
    this.cxx_setParam(
        num,
        value,
        axis
        );
    
    
    
    
    
}

SInt32
btGeneric6DofConstraint.get_limit_motor_info2!(
    in
    btRotationalLimitMotor
    limot
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btVector3
    linVelA
    
    ,
    in
    btVector3
    linVelB
    
    ,
    in
    btVector3
    angVelA
    
    ,
    in
    btVector3
    angVelB
    
    ,
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    SInt32
    row
    
    ,
    io
    btVector3
    ax1
    
    ,
    in
    SInt32
    rotational
    
    
    )
{   
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtVector3ConstRef linVelA__cxx = Make_CxxbtVector3ConstRef(linVelA);
    
    CxxbtVector3ConstRef linVelB__cxx = Make_CxxbtVector3ConstRef(linVelB);
    
    CxxbtVector3ConstRef angVelA__cxx = Make_CxxbtVector3ConstRef(angVelA);
    
    CxxbtVector3ConstRef angVelB__cxx = Make_CxxbtVector3ConstRef(angVelB);
    
    
    
    CxxbtVector3Ref ax1__cxx = Make_CxxbtVector3Ref(ax1);
    
    SInt32 __res = 
    this.cxx_get_limit_motor_info2(
        limot,
        transA__cxx,
        transB__cxx,
        linVelA__cxx,
        linVelB__cxx,
        angVelA__cxx,
        angVelB__cxx,
        info,
        row,
        ax1__cxx,
        rotational
        );
    
    
    
    
    
    
    
    
    
    
    
    
    return __res;
}

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
///If no axis is provided, it uses the default axis for this constraint.

btGeneric6DofConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    
    )
{   
    
    
    
    this.cxx_setParam(
        num,
        value
        );
    
    
    
    
}

//! Gets the global transform of the offset for body B
// /*!
// \sa btGeneric6DofConstraint.getFrameOffsetA, btGeneric6DofConstraint.getFrameOffsetB, btGeneric6DofConstraint.calculateAngleInfo.
// */
btTransform
btGeneric6DofConstraint.getCalculatedTransformB?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getCalculatedTransformB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btGeneric6DofConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}

SInt32
btGeneric6DofConstraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

//! Get the relative Euler angle
// /*!
// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
// */
Float32
btGeneric6DofConstraint.getAngle?(
    in
    SInt32
    axis_index
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getAngle(
        axis_index
        );
    
    
    return __res;
}

btTransform
btGeneric6DofConstraint.getFrameOffsetA?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getFrameOffsetA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

//! Get the relative position of the constraint pivot
// /*!
// \pre btGeneric6DofConstraint::calculateTransforms() must be called previously.
// */
Float32
btGeneric6DofConstraint.getRelativePivotPosition?(
    in
    SInt32
    axis_index
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getRelativePivotPosition(
        axis_index
        );
    
    
    return __res;
}


btGeneric6DofConstraint.getAngularUpperLimit?(
    io
    btVector3
    angularUpper
    
    
    )
{   
    
    CxxbtVector3Ref angularUpper__cxx = Make_CxxbtVector3Ref(angularUpper);
    
    this.cxx_getAngularUpperLimit(
        angularUpper__cxx
        );
    
    
    
}

//! Get the rotation axis in global coordinates
// /*!
// \pre btGeneric6DofConstraint.buildJacobian must be called previously.
// */
btVector3
btGeneric6DofConstraint.getAxis?(
    in
    SInt32
    axis_index
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_getAxis(
        axis_index
        );
    
    
    return __res;
}

//! Gets the global transform of the offset for body A
// /*!
// \sa btGeneric6DofConstraint.getFrameOffsetA, btGeneric6DofConstraint.getFrameOffsetB, btGeneric6DofConstraint.calculateAngleInfo.
// */
btTransform
btGeneric6DofConstraint.getCalculatedTransformA?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getCalculatedTransformA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

//! Retrieves the  limit informacion
btTranslationalLimitMotor
btGeneric6DofConstraint.getTranslationalLimitMotor!(
    )
{   
    btTranslationalLimitMotor __res = 
    this.cxx_getTranslationalLimitMotor(
        );
    
    return __res;
}

Boolean
btGeneric6DofConstraint.getUseFrameOffset?(
    )
{   
    Boolean __res = 
    this.cxx_getUseFrameOffset(
        );
    
    return __res;
}


btGeneric6DofConstraint.getLinearLowerLimit?(
    io
    btVector3
    linearLower
    
    
    )
{   
    
    CxxbtVector3Ref linearLower__cxx = Make_CxxbtVector3Ref(linearLower);
    
    this.cxx_getLinearLowerLimit(
        linearLower__cxx
        );
    
    
    
}


btGeneric6DofConstraint.getLinearUpperLimit?(
    io
    btVector3
    linearUpper
    
    
    )
{   
    
    CxxbtVector3Ref linearUpper__cxx = Make_CxxbtVector3Ref(linearUpper);
    
    this.cxx_getLinearUpperLimit(
        linearUpper__cxx
        );
    
    
    
}


btGeneric6DofConstraint.setUseLinearReferenceFrameA!(
    in
    Boolean
    linearReferenceFrameA
    
    
    )
{   
    
    
    this.cxx_setUseLinearReferenceFrameA(
        linearReferenceFrameA
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraint] EDK[Fabric_EDK_KL_btGeneric6DofConstraint] LIB[btGeneric6DofConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofConstraint.=(
    btGeneric6DofConstraint that
    ) = "Bullet2__btGeneric6DofConstraint__MU__simple_ass_op__12fc04fcb0591102dc9d8944980e09d6";


/// \dfgPresetOmit
/// \internal
btGeneric6DofConstraint.appendDesc(io String string) {
  string += "btGeneric6DofConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofConstraintData] LIB[btGeneric6DofConstraintData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofConstraintData] LIB[btGeneric6DofConstraintData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofConstraintData] LIB[btGeneric6DofConstraintData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofConstraintData() = "Bullet2__btGeneric6DofConstraintData__MU__empty_ctor__a3aff1b6db8af570674d5a6b5e157cea";

/// \dfgPresetOmit
btGeneric6DofConstraintData(
    btGeneric6DofConstraintData that
    ) = "Bullet2__btGeneric6DofConstraintData__MU__copy_ctor__7a3b11e4e7c16f8152eacd0b12d4ca60";

btGeneric6DofConstraintData.cxx_delete() = "Bullet2__btGeneric6DofConstraintData__MU__delete__026d88bd04e4d4bb6dc53457fbe92b58";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofConstraintData] LIB[btGeneric6DofConstraintData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofConstraintData] LIB[btGeneric6DofConstraintData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofConstraintData] LIB[btGeneric6DofConstraintData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofConstraintData.=(
    btGeneric6DofConstraintData that
    ) = "Bullet2__btGeneric6DofConstraintData__MU__simple_ass_op__d7f2837bf31501a9021df873e860276a";


/// \dfgPresetOmit
/// \internal
btGeneric6DofConstraintData.appendDesc(io String string) {
  string += "btGeneric6DofConstraintData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2] LIB[btGeneric6DofConstraintDoubleData2 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2] LIB[btGeneric6DofConstraintDoubleData2 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2] LIB[btGeneric6DofConstraintDoubleData2 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofConstraintDoubleData2() = "Bullet2__btGeneric6DofConstraintDoubleData2__MU__empty_ctor__9c75fc9b002fbe9d06aa0570a0f297bb";

/// \dfgPresetOmit
btGeneric6DofConstraintDoubleData2(
    btGeneric6DofConstraintDoubleData2 that
    ) = "Bullet2__btGeneric6DofConstraintDoubleData2__MU__copy_ctor__bc26a0f726671bb41ca6cab17ce84071";

btGeneric6DofConstraintDoubleData2.cxx_delete() = "Bullet2__btGeneric6DofConstraintDoubleData2__MU__delete__22a725395a4b9ac5dbe8e5c6b8e45e3a";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2] LIB[btGeneric6DofConstraintDoubleData2 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2] LIB[btGeneric6DofConstraintDoubleData2 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofConstraintDoubleData2] LIB[btGeneric6DofConstraintDoubleData2 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofConstraintDoubleData2.=(
    btGeneric6DofConstraintDoubleData2 that
    ) = "Bullet2__btGeneric6DofConstraintDoubleData2__MU__simple_ass_op__bf98399968fac7cf59ddd748fa974459";


/// \dfgPresetOmit
/// \internal
btGeneric6DofConstraintDoubleData2.appendDesc(io String string) {
  string += "btGeneric6DofConstraintDoubleData2:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btRotationalLimitMotor2(
    btRotationalLimitMotor2 that
    ) = "Bullet2__btRotationalLimitMotor2__MU__copy_ctor__33f316fadcc51144852b09d2cd5e1ecb";

/// \dfgPresetOmit
/// \internal
btRotationalLimitMotor2.__ctor(
    ) = "Bullet2__btRotationalLimitMotor2__MU__ctor__ae135d003ce1784dada08194c23d38cf";

/// \dfgPresetOmit
btRotationalLimitMotor2(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btRotationalLimitMotor2.__ctor(
    btRotationalLimitMotor2 limot
    ) = "Bullet2__btRotationalLimitMotor2__MU__ctor__0e1d50bdabb9ceace7fd9a440d2a7bad";

/// \dfgPresetOmit
btRotationalLimitMotor2(
    btRotationalLimitMotor2 limot
    ) {
    this.__ctor(
        limot
        );
}

btRotationalLimitMotor2.cxx_delete() = "Bullet2__btRotationalLimitMotor2__MU__delete__c49e61ad562a94dd97c054800f5b2611";

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btRotationalLimitMotor2.cxx_isLimited!(
    )
 = "Bullet2__btRotationalLimitMotor2__MU__meth_isLimited__d5d24d6b4f929608e637233f0bd28075";

/// \dfgPresetOmit
/// \internal

btRotationalLimitMotor2.cxx_testLimitValue!(
    Float32 test_value
    )
 = "Bullet2__btRotationalLimitMotor2__MU__meth_testLimitValue__d12071fc34292551f1d6214b0a318fdb";


btRotationalLimitMotor2.testLimitValue!(
    in
    Float32
    test_value
    
    
    )
{   
    
    
    this.cxx_testLimitValue(
        test_value
        );
    
    
    
}

Boolean
btRotationalLimitMotor2.isLimited!(
    )
{   
    Boolean __res = 
    this.cxx_isLimited(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRotationalLimitMotor2] EDK[Fabric_EDK_KL_btRotationalLimitMotor2] LIB[btRotationalLimitMotor2 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btRotationalLimitMotor2.=(
    btRotationalLimitMotor2 that
    ) = "Bullet2__btRotationalLimitMotor2__MU__simple_ass_op__a984f0add3fe5ebdf31e62b0c92c1abe";


/// \dfgPresetOmit
/// \internal
btRotationalLimitMotor2.appendDesc(io String string) {
  string += "btRotationalLimitMotor2:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btTranslationalLimitMotor2(
    btTranslationalLimitMotor2 that
    ) = "Bullet2__btTranslationalLimitMotor2__MU__copy_ctor__91c269854882d60b68603fec49b02551";

/// \dfgPresetOmit
/// \internal
btTranslationalLimitMotor2.__ctor(
    ) = "Bullet2__btTranslationalLimitMotor2__MU__ctor__d2dae4590c722ab842ba93942aedf6b2";

/// \dfgPresetOmit
btTranslationalLimitMotor2(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btTranslationalLimitMotor2.__ctor(
    btTranslationalLimitMotor2 other
    ) = "Bullet2__btTranslationalLimitMotor2__MU__ctor__fb949de93588c333dd132d69805e290d";

/// \dfgPresetOmit
btTranslationalLimitMotor2(
    btTranslationalLimitMotor2 other
    ) {
    this.__ctor(
        other
        );
}

btTranslationalLimitMotor2.cxx_delete() = "Bullet2__btTranslationalLimitMotor2__MU__delete__2e554c5df0447a684ef15247006daace";

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
btTranslationalLimitMotor2.cxx_isLimited!(
    SInt32 limitIndex
    )
 = "Bullet2__btTranslationalLimitMotor2__MU__meth_isLimited__e72185637eda589d8afc4adeb3bfa025";

/// \dfgPresetOmit
/// \internal

btTranslationalLimitMotor2.cxx_testLimitValue!(
    SInt32 limitIndex,
    Float32 test_value
    )
 = "Bullet2__btTranslationalLimitMotor2__MU__meth_testLimitValue__c5c476cf440696eedf72f691e22b01a0";


btTranslationalLimitMotor2.testLimitValue!(
    in
    SInt32
    limitIndex
    
    ,
    in
    Float32
    test_value
    
    
    )
{   
    
    
    
    this.cxx_testLimitValue(
        limitIndex,
        test_value
        );
    
    
    
    
}

Boolean
btTranslationalLimitMotor2.isLimited!(
    in
    SInt32
    limitIndex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isLimited(
        limitIndex
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTranslationalLimitMotor2] EDK[Fabric_EDK_KL_btTranslationalLimitMotor2] LIB[btTranslationalLimitMotor2 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTranslationalLimitMotor2.=(
    btTranslationalLimitMotor2 that
    ) = "Bullet2__btTranslationalLimitMotor2__MU__simple_ass_op__e10b43bd4aa230e606e84ff32fcc225e";


/// \dfgPresetOmit
/// \internal
btTranslationalLimitMotor2.appendDesc(io String string) {
  string += "btTranslationalLimitMotor2:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpring2Constraint() = "Bullet2__btGeneric6DofSpring2Constraint__MU__empty_ctor__c93e1115446d738f9e01bcb872fbaaab";

/// \dfgPresetOmit
btGeneric6DofSpring2Constraint(
    btGeneric6DofSpring2Constraint that
    ) = "Bullet2__btGeneric6DofSpring2Constraint__MU__copy_ctor__531defd1f691b42b7cd0debbe96ebe5b";

/// \dfgPresetOmit
/// \internal
btGeneric6DofSpring2Constraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB
    ) = "Bullet2__btGeneric6DofSpring2Constraint__MU__ctor__327a77e2d187b1445449fff09bccfed4";

/// \dfgPresetOmit
btGeneric6DofSpring2Constraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB
    ) {
    this.__ctor(
        rbA,
        rbB,
        frameInA,
        frameInB
        );
}

/// \dfgPresetOmit
/// \internal
btGeneric6DofSpring2Constraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB,
    RotateOrder rotOrder
    ) = "Bullet2__btGeneric6DofSpring2Constraint__MU__ctor__90cf3eae67902d5c1bc9851f23c61061";

/// \dfgPresetOmit
btGeneric6DofSpring2Constraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB,
    RotateOrder rotOrder
    ) {
    this.__ctor(
        rbA,
        rbB,
        frameInA,
        frameInB,
        rotOrder
        );
}

/// \dfgPresetOmit
/// \internal
btGeneric6DofSpring2Constraint.__ctor(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB
    ) = "Bullet2__btGeneric6DofSpring2Constraint__MU__ctor__48ed75755314164c732f6d9134a6fa03";

/// \dfgPresetOmit
btGeneric6DofSpring2Constraint(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB
    ) {
    this.__ctor(
        rbB,
        frameInB
        );
}

/// \dfgPresetOmit
/// \internal
btGeneric6DofSpring2Constraint.__ctor(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB,
    RotateOrder rotOrder
    ) = "Bullet2__btGeneric6DofSpring2Constraint__MU__ctor__1f973717e78653161867626c684f8697";

/// \dfgPresetOmit
btGeneric6DofSpring2Constraint(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB,
    RotateOrder rotOrder
    ) {
    this.__ctor(
        rbB,
        frameInB,
        rotOrder
        );
}

btGeneric6DofSpring2Constraint(
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInB
    
    ,
    in
    RotateOrder
    rotOrder
    
    
    ) {
    
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    
    this.__ctor(
        rbB,
        frameInB__cxx,
        rotOrder
        );
    
    
    
}

btGeneric6DofSpring2Constraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInA
    
    ,
    in
    btTransform
    frameInB
    
    
    ) {
    
    
    
    CxxbtTransformConstRef frameInA__cxx = Make_CxxbtTransformConstRef(frameInA);
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    this.__ctor(
        rbA,
        rbB,
        frameInA__cxx,
        frameInB__cxx
        );
    
    
    
    
}

btGeneric6DofSpring2Constraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInA
    
    ,
    in
    btTransform
    frameInB
    
    ,
    in
    RotateOrder
    rotOrder
    
    
    ) {
    
    
    
    CxxbtTransformConstRef frameInA__cxx = Make_CxxbtTransformConstRef(frameInA);
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    
    this.__ctor(
        rbA,
        rbB,
        frameInA__cxx,
        frameInB__cxx,
        rotOrder
        );
    
    
    
    
    
}

btGeneric6DofSpring2Constraint(
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInB
    
    
    ) {
    
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    this.__ctor(
        rbB,
        frameInB__cxx
        );
    
    
}

btGeneric6DofSpring2Constraint.cxx_delete() = "Bullet2__btGeneric6DofSpring2Constraint__MU__delete__1650748cbcdd51914151144485bd5b0e";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_buildJacobian!(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_buildJacobian__92ac5109d8a83d6f926209cd5dfd41d7";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getInfo1__d42ef019512928ff29d0ed364f98d264";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getInfo2__9d508c8f63226ea6a27bef1626119c87";

/// \dfgPresetOmit
/// \internal
SInt32
btGeneric6DofSpring2Constraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_calculateSerializeBufferSize__1db3da0cbc7dfaaae8fa064bb4a5bae1";

/// \dfgPresetOmit
/// \internal
btRotationalLimitMotor2
btGeneric6DofSpring2Constraint.cxx_getRotationalLimitMotor!(
    SInt32 index
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getRotationalLimitMotor__01b3f2e56596df15cf7dd7d4cbac0d31";

/// \dfgPresetOmit
/// \internal
btTranslationalLimitMotor2
btGeneric6DofSpring2Constraint.cxx_getTranslationalLimitMotor!(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getTranslationalLimitMotor__ea9799e8f169aa5c1a8dad304c4b945f";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_calculateTransforms!(
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_calculateTransforms__d46062bd52fe907acceda14155723a28";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_calculateTransforms!(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_calculateTransforms__dad7b939daf4832b337c962547bf29f7";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btGeneric6DofSpring2Constraint.cxx_getCalculatedTransformA?(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getCalculatedTransformA__cae1e1a2b2a70af8aa4b8e747be0ea09";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btGeneric6DofSpring2Constraint.cxx_getCalculatedTransformB?(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getCalculatedTransformB__babd3c294bc185d4cd836040c0959507";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btGeneric6DofSpring2Constraint.cxx_getFrameOffsetA?(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getFrameOffsetA__920e88b72f04fbf9b19a88166c16ff11";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btGeneric6DofSpring2Constraint.cxx_getFrameOffsetB?(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getFrameOffsetB__a221dca9a1c6e813546ef1038e190afe";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btGeneric6DofSpring2Constraint.cxx_getFrameOffsetA!(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getFrameOffsetA__2c5d2f7eaa97879c29347ac308de7755";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btGeneric6DofSpring2Constraint.cxx_getFrameOffsetB!(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getFrameOffsetB__b6bd4ec63b632f314d2bc11208884594";

/// \dfgPresetOmit
/// \internal
btVector3
btGeneric6DofSpring2Constraint.cxx_getAxis?(
    SInt32 axis_index
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getAxis__92a94a09385d61fdf7006fb2b391ee6e";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofSpring2Constraint.cxx_getAngle?(
    SInt32 axis_index
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getAngle__dace033bf7cb0be14beb63838bf82091";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofSpring2Constraint.cxx_getRelativePivotPosition?(
    SInt32 axis_index
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getRelativePivotPosition__2c05e62ce935f450f9bc6176ad75589c";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setFrames!(
    CxxbtTransformConstRef frameA,
    CxxbtTransformConstRef frameB
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setFrames__921723fc044c98dac9a67bd45d375503";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setLinearLowerLimit!(
    CxxbtVector3ConstRef linearLower
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setLinearLowerLimit__df9d879498aa8ed770114a8427cad2b1";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_getLinearLowerLimit!(
    CxxbtVector3Ref linearLower
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getLinearLowerLimit__3baf50666ad57541a99051397804e63e";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setLinearUpperLimit!(
    CxxbtVector3ConstRef linearUpper
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setLinearUpperLimit__3c665d9560557e63b5dddb6278557308";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_getLinearUpperLimit!(
    CxxbtVector3Ref linearUpper
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getLinearUpperLimit__f4aafafb36f5b20a7242386227ad0e9a";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setAngularLowerLimit!(
    CxxbtVector3ConstRef angularLower
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setAngularLowerLimit__b1f1415b25092167cef96194c3fdd1dd";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setAngularLowerLimitReversed!(
    CxxbtVector3ConstRef angularLower
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setAngularLowerLimitReversed__98ad26b3945fe555c19ee92ec7ccea2f";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_getAngularLowerLimit!(
    CxxbtVector3Ref angularLower
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getAngularLowerLimit__49a1844f8678e6c8c89adaa237d199bb";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_getAngularLowerLimitReversed!(
    CxxbtVector3Ref angularLower
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getAngularLowerLimitReversed__90e4e3abf6c7475aa84455aa52e42a20";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setAngularUpperLimit!(
    CxxbtVector3ConstRef angularUpper
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setAngularUpperLimit__598acb2c8f32110cec75b31d911bf73e";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setAngularUpperLimitReversed!(
    CxxbtVector3ConstRef angularUpper
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setAngularUpperLimitReversed__6d5a710a5ab01442667382dd6693f258";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_getAngularUpperLimit!(
    CxxbtVector3Ref angularUpper
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getAngularUpperLimit__23a2fa3d5011f090dd3a4a624d102d56";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_getAngularUpperLimitReversed!(
    CxxbtVector3Ref angularUpper
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getAngularUpperLimitReversed__b3e3dceb0c2a08c82bb52db0dcf89f2a";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setLimit!(
    SInt32 axis,
    Float32 lo,
    Float32 hi
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setLimit__1619cf2a5a3b087cc8d696184fb35966";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setLimitReversed!(
    SInt32 axis,
    Float32 lo,
    Float32 hi
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setLimitReversed__71c624fd5879bcad3b9e7129468679c8";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofSpring2Constraint.cxx_isLimited!(
    SInt32 limitIndex
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_isLimited__e3b532cf84000c62e925cc9c440f612c";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setRotationOrder!(
    RotateOrder order
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setRotationOrder__eca9169f890ad3c7626ee7d52e6ab062";

/// \dfgPresetOmit
/// \internal
RotateOrder
btGeneric6DofSpring2Constraint.cxx_getRotationOrder!(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_getRotationOrder__e2c10094bdec1508cac01b3458483612";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setAxis!(
    CxxbtVector3ConstRef axis1,
    CxxbtVector3ConstRef axis2
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setAxis__d011293df8a6287812048be46927b8d0";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setBounce!(
    SInt32 index,
    Float32 bounce
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setBounce__63e434f2c250220f223ea3166dc0acb6";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_enableMotor!(
    SInt32 index,
    Boolean onOff
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_enableMotor__88de296ce4e5ec5d778ab20d2b83342a";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setServo!(
    SInt32 index,
    Boolean onOff
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setServo__65fda4b216171150ea9ab885d478a88f";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setTargetVelocity!(
    SInt32 index,
    Float32 velocity
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setTargetVelocity__b5d5915e39dd50e041c61bd1691e721d";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setServoTarget!(
    SInt32 index,
    Float32 target
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setServoTarget__05cc0394b4f638fc420ac2ded841b9f5";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setMaxMotorForce!(
    SInt32 index,
    Float32 force
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setMaxMotorForce__a9ad66d4da5f3cccd13266528f453dbe";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_enableSpring!(
    SInt32 index,
    Boolean onOff
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_enableSpring__e470baa7707cffba7b323678580924c8";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setStiffness!(
    SInt32 index,
    Float32 stiffness
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setStiffness__19429c0033a0d85cf22321323a62a400";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setStiffness!(
    SInt32 index,
    Float32 stiffness,
    Boolean limitIfNeeded
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setStiffness__2a7f788da342015f56e569e9284ff8db";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setDamping!(
    SInt32 index,
    Float32 damping
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setDamping__7b7e5f01d49b77727baad39fa7762a64";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setDamping!(
    SInt32 index,
    Float32 damping,
    Boolean limitIfNeeded
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setDamping__487ab53952d7cdd883f64d058eb910ae";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setEquilibriumPoint!(
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setEquilibriumPoint__7ad713eee8ea64dfa8c2e0565466df32";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setEquilibriumPoint!(
    SInt32 index
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setEquilibriumPoint__a65858ba05293d9ad06e21bc5b0449a6";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setEquilibriumPoint!(
    SInt32 index,
    Float32 val
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setEquilibriumPoint__2f9e43ea5a64200b5e962e84abcfd716";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setParam!(
    SInt32 num,
    Float32 value
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setParam__29b56cabbf3ecc97c072d0257fbdf4a1";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpring2Constraint.cxx_setParam!(
    SInt32 num,
    Float32 value,
    SInt32 axis
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__MU__meth_setParam__6b2c7f381a3df3af6f1273a0d155fd63";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofSpring2Constraint.cxx_getParam?(
    SInt32 num
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getParam__f42a9795bd5ca5fd7f8d82b7c4691ec4";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofSpring2Constraint.cxx_getParam?(
    SInt32 num,
    SInt32 axis
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__CO__meth_getParam__04439b4007a3466f72169bd8782f611a";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofSpring2Constraint_CxxbtGetMatrixElem(
    CxxbtMatrix3x3ConstRef mat,
    SInt32 index
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__ST__meth_btGetMatrixElem__27068a4ebc8f357ef09f5fcc3643380d";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofSpring2Constraint_CxxmatrixToEulerXYZ(
    CxxbtMatrix3x3ConstRef mat,
    CxxbtVector3Ref xyz
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__ST__meth_matrixToEulerXYZ__f74ce79692bc374272712b016354a3e9";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofSpring2Constraint_CxxmatrixToEulerXZY(
    CxxbtMatrix3x3ConstRef mat,
    CxxbtVector3Ref xyz
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__ST__meth_matrixToEulerXZY__c13dc4c40cd1fc4af1ce119d4317c803";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofSpring2Constraint_CxxmatrixToEulerYXZ(
    CxxbtMatrix3x3ConstRef mat,
    CxxbtVector3Ref xyz
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__ST__meth_matrixToEulerYXZ__fd266206120f44cb643cd21527cf1cb4";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofSpring2Constraint_CxxmatrixToEulerYZX(
    CxxbtMatrix3x3ConstRef mat,
    CxxbtVector3Ref xyz
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__ST__meth_matrixToEulerYZX__fc1c30218cf295fa225a0397f32adc53";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofSpring2Constraint_CxxmatrixToEulerZXY(
    CxxbtMatrix3x3ConstRef mat,
    CxxbtVector3Ref xyz
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__ST__meth_matrixToEulerZXY__6ed64a769c1747ca89433aa7b3a57d01";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofSpring2Constraint_CxxmatrixToEulerZYX(
    CxxbtMatrix3x3ConstRef mat,
    CxxbtVector3Ref xyz
    )
 = "Bullet2__btGeneric6DofSpring2Constraint__ST__meth_matrixToEulerZYX__b56a2b6e4c996fe96c3d167214772e69";

btVector3
btGeneric6DofSpring2Constraint.getAxis?(
    in
    SInt32
    axis_index
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_getAxis(
        axis_index
        );
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.getAngularUpperLimit!(
    io
    btVector3
    angularUpper
    
    
    )
{   
    
    CxxbtVector3Ref angularUpper__cxx = Make_CxxbtVector3Ref(angularUpper);
    
    this.cxx_getAngularUpperLimit(
        angularUpper__cxx
        );
    
    
    
}

Float32
btGeneric6DofSpring2Constraint_btGetMatrixElem(
    in
    btMatrix3x3
    mat
    
    ,
    in
    SInt32
    index
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    
    Float32 __res = 
    btGeneric6DofSpring2Constraint_CxxbtGetMatrixElem(
        mat__cxx,
        index
        );
    
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.setLinearUpperLimit!(
    in
    btVector3
    linearUpper
    
    
    )
{   
    
    CxxbtVector3ConstRef linearUpper__cxx = Make_CxxbtVector3ConstRef(linearUpper);
    
    this.cxx_setLinearUpperLimit(
        linearUpper__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.setEquilibriumPoint!(
    )
{   
    
    this.cxx_setEquilibriumPoint(
        );
    
    
}

Boolean
btGeneric6DofSpring2Constraint.isLimited!(
    in
    SInt32
    limitIndex
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isLimited(
        limitIndex
        );
    
    
    return __res;
}

SInt32
btGeneric6DofSpring2Constraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btGeneric6DofSpring2Constraint.enableMotor!(
    in
    SInt32
    index
    
    ,
    in
    Boolean
    onOff
    
    
    )
{   
    
    
    
    this.cxx_enableMotor(
        index,
        onOff
        );
    
    
    
    
}

Boolean
btGeneric6DofSpring2Constraint_matrixToEulerXYZ(
    in
    btMatrix3x3
    mat
    
    ,
    io
    btVector3
    xyz
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    
    CxxbtVector3Ref xyz__cxx = Make_CxxbtVector3Ref(xyz);
    Boolean __res = 
    btGeneric6DofSpring2Constraint_CxxmatrixToEulerXYZ(
        mat__cxx,
        xyz__cxx
        );
    
    
    
    return __res;
}

btTransform
btGeneric6DofSpring2Constraint.getFrameOffsetA?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getFrameOffsetA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btGeneric6DofSpring2Constraint.setLinearLowerLimit!(
    in
    btVector3
    linearLower
    
    
    )
{   
    
    CxxbtVector3ConstRef linearLower__cxx = Make_CxxbtVector3ConstRef(linearLower);
    
    this.cxx_setLinearLowerLimit(
        linearLower__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.setStiffness!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    stiffness
    
    
    )
{   
    
    
    
    this.cxx_setStiffness(
        index,
        stiffness
        );
    
    
    
    
}

Boolean
btGeneric6DofSpring2Constraint_matrixToEulerYZX(
    in
    btMatrix3x3
    mat
    
    ,
    io
    btVector3
    xyz
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    
    CxxbtVector3Ref xyz__cxx = Make_CxxbtVector3Ref(xyz);
    Boolean __res = 
    btGeneric6DofSpring2Constraint_CxxmatrixToEulerYZX(
        mat__cxx,
        xyz__cxx
        );
    
    
    
    return __res;
}

btTranslationalLimitMotor2
btGeneric6DofSpring2Constraint.getTranslationalLimitMotor!(
    )
{   
    btTranslationalLimitMotor2 __res = 
    this.cxx_getTranslationalLimitMotor(
        );
    
    return __res;
}

btRotationalLimitMotor2
btGeneric6DofSpring2Constraint.getRotationalLimitMotor!(
    in
    SInt32
    index
    
    
    )
{   
    
    btRotationalLimitMotor2 __res = 
    this.cxx_getRotationalLimitMotor(
        index
        );
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.getLinearLowerLimit!(
    io
    btVector3
    linearLower
    
    
    )
{   
    
    CxxbtVector3Ref linearLower__cxx = Make_CxxbtVector3Ref(linearLower);
    
    this.cxx_getLinearLowerLimit(
        linearLower__cxx
        );
    
    
    
}

Float32
btGeneric6DofSpring2Constraint.getParam?(
    in
    SInt32
    num
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getParam(
        num
        );
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}


btGeneric6DofSpring2Constraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}

Boolean
btGeneric6DofSpring2Constraint_matrixToEulerYXZ(
    in
    btMatrix3x3
    mat
    
    ,
    io
    btVector3
    xyz
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    
    CxxbtVector3Ref xyz__cxx = Make_CxxbtVector3Ref(xyz);
    Boolean __res = 
    btGeneric6DofSpring2Constraint_CxxmatrixToEulerYXZ(
        mat__cxx,
        xyz__cxx
        );
    
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.setEquilibriumPoint!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setEquilibriumPoint(
        index
        );
    
    
    
}


btGeneric6DofSpring2Constraint.enableSpring!(
    in
    SInt32
    index
    
    ,
    in
    Boolean
    onOff
    
    
    )
{   
    
    
    
    this.cxx_enableSpring(
        index,
        onOff
        );
    
    
    
    
}

Boolean
btGeneric6DofSpring2Constraint_matrixToEulerXZY(
    in
    btMatrix3x3
    mat
    
    ,
    io
    btVector3
    xyz
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    
    CxxbtVector3Ref xyz__cxx = Make_CxxbtVector3Ref(xyz);
    Boolean __res = 
    btGeneric6DofSpring2Constraint_CxxmatrixToEulerXZY(
        mat__cxx,
        xyz__cxx
        );
    
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.buildJacobian!(
    )
{   
    
    this.cxx_buildJacobian(
        );
    
    
}


btGeneric6DofSpring2Constraint.setAngularLowerLimit!(
    in
    btVector3
    angularLower
    
    
    )
{   
    
    CxxbtVector3ConstRef angularLower__cxx = Make_CxxbtVector3ConstRef(angularLower);
    
    this.cxx_setAngularLowerLimit(
        angularLower__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.setServo!(
    in
    SInt32
    index
    
    ,
    in
    Boolean
    onOff
    
    
    )
{   
    
    
    
    this.cxx_setServo(
        index,
        onOff
        );
    
    
    
    
}

btTransform
btGeneric6DofSpring2Constraint.getCalculatedTransformB?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getCalculatedTransformB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btGeneric6DofSpring2Constraint.setDamping!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    damping
    
    ,
    in
    Boolean
    limitIfNeeded
    
    
    )
{   
    
    
    
    
    this.cxx_setDamping(
        index,
        damping,
        limitIfNeeded
        );
    
    
    
    
    
}


btGeneric6DofSpring2Constraint.setAngularLowerLimitReversed!(
    in
    btVector3
    angularLower
    
    
    )
{   
    
    CxxbtVector3ConstRef angularLower__cxx = Make_CxxbtVector3ConstRef(angularLower);
    
    this.cxx_setAngularLowerLimitReversed(
        angularLower__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.setFrames!(
    in
    btTransform
    frameA
    
    ,
    in
    btTransform
    frameB
    
    
    )
{   
    
    CxxbtTransformConstRef frameA__cxx = Make_CxxbtTransformConstRef(frameA);
    
    CxxbtTransformConstRef frameB__cxx = Make_CxxbtTransformConstRef(frameB);
    
    this.cxx_setFrames(
        frameA__cxx,
        frameB__cxx
        );
    
    
    
    
}


btGeneric6DofSpring2Constraint.getAngularLowerLimit!(
    io
    btVector3
    angularLower
    
    
    )
{   
    
    CxxbtVector3Ref angularLower__cxx = Make_CxxbtVector3Ref(angularLower);
    
    this.cxx_getAngularLowerLimit(
        angularLower__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.setRotationOrder!(
    in
    RotateOrder
    order
    
    
    )
{   
    
    
    this.cxx_setRotationOrder(
        order
        );
    
    
    
}


btGeneric6DofSpring2Constraint.setLimitReversed!(
    in
    SInt32
    axis
    
    ,
    in
    Float32
    lo
    
    ,
    in
    Float32
    hi
    
    
    )
{   
    
    
    
    
    this.cxx_setLimitReversed(
        axis,
        lo,
        hi
        );
    
    
    
    
    
}

Boolean
btGeneric6DofSpring2Constraint_matrixToEulerZXY(
    in
    btMatrix3x3
    mat
    
    ,
    io
    btVector3
    xyz
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    
    CxxbtVector3Ref xyz__cxx = Make_CxxbtVector3Ref(xyz);
    Boolean __res = 
    btGeneric6DofSpring2Constraint_CxxmatrixToEulerZXY(
        mat__cxx,
        xyz__cxx
        );
    
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.setEquilibriumPoint!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    val
    
    
    )
{   
    
    
    
    this.cxx_setEquilibriumPoint(
        index,
        val
        );
    
    
    
    
}


btGeneric6DofSpring2Constraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    
    
    this.cxx_setParam(
        num,
        value,
        axis
        );
    
    
    
    
    
}


btGeneric6DofSpring2Constraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    
    )
{   
    
    
    
    this.cxx_setParam(
        num,
        value
        );
    
    
    
    
}

Float32
btGeneric6DofSpring2Constraint.getAngle?(
    in
    SInt32
    axis_index
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getAngle(
        axis_index
        );
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.getLinearUpperLimit!(
    io
    btVector3
    linearUpper
    
    
    )
{   
    
    CxxbtVector3Ref linearUpper__cxx = Make_CxxbtVector3Ref(linearUpper);
    
    this.cxx_getLinearUpperLimit(
        linearUpper__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.calculateTransforms!(
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    
    )
{   
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    this.cxx_calculateTransforms(
        transA__cxx,
        transB__cxx
        );
    
    
    
    
}


btGeneric6DofSpring2Constraint.setLimit!(
    in
    SInt32
    axis
    
    ,
    in
    Float32
    lo
    
    ,
    in
    Float32
    hi
    
    
    )
{   
    
    
    
    
    this.cxx_setLimit(
        axis,
        lo,
        hi
        );
    
    
    
    
    
}

btTransform
btGeneric6DofSpring2Constraint.getFrameOffsetB?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getFrameOffsetB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

Boolean
btGeneric6DofSpring2Constraint_matrixToEulerZYX(
    in
    btMatrix3x3
    mat
    
    ,
    io
    btVector3
    xyz
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    
    CxxbtVector3Ref xyz__cxx = Make_CxxbtVector3Ref(xyz);
    Boolean __res = 
    btGeneric6DofSpring2Constraint_CxxmatrixToEulerZYX(
        mat__cxx,
        xyz__cxx
        );
    
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.setDamping!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    damping
    
    
    )
{   
    
    
    
    this.cxx_setDamping(
        index,
        damping
        );
    
    
    
    
}


btGeneric6DofSpring2Constraint.setTargetVelocity!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    velocity
    
    
    )
{   
    
    
    
    this.cxx_setTargetVelocity(
        index,
        velocity
        );
    
    
    
    
}

RotateOrder
btGeneric6DofSpring2Constraint.getRotationOrder!(
    )
{   
    RotateOrder __res = 
    this.cxx_getRotationOrder(
        );
    
    return __res;
}

btTransform
btGeneric6DofSpring2Constraint.getCalculatedTransformA?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getCalculatedTransformA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btGeneric6DofSpring2Constraint.setAngularUpperLimit!(
    in
    btVector3
    angularUpper
    
    
    )
{   
    
    CxxbtVector3ConstRef angularUpper__cxx = Make_CxxbtVector3ConstRef(angularUpper);
    
    this.cxx_setAngularUpperLimit(
        angularUpper__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.setAxis!(
    in
    btVector3
    axis1
    
    ,
    in
    btVector3
    axis2
    
    
    )
{   
    
    CxxbtVector3ConstRef axis1__cxx = Make_CxxbtVector3ConstRef(axis1);
    
    CxxbtVector3ConstRef axis2__cxx = Make_CxxbtVector3ConstRef(axis2);
    
    this.cxx_setAxis(
        axis1__cxx,
        axis2__cxx
        );
    
    
    
    
}

Float32
btGeneric6DofSpring2Constraint.getParam?(
    in
    SInt32
    num
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_getParam(
        num,
        axis
        );
    
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.setAngularUpperLimitReversed!(
    in
    btVector3
    angularUpper
    
    
    )
{   
    
    CxxbtVector3ConstRef angularUpper__cxx = Make_CxxbtVector3ConstRef(angularUpper);
    
    this.cxx_setAngularUpperLimitReversed(
        angularUpper__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.calculateTransforms!(
    )
{   
    
    this.cxx_calculateTransforms(
        );
    
    
}


btGeneric6DofSpring2Constraint.setMaxMotorForce!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    force
    
    
    )
{   
    
    
    
    this.cxx_setMaxMotorForce(
        index,
        force
        );
    
    
    
    
}


btGeneric6DofSpring2Constraint.setServoTarget!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    target
    
    
    )
{   
    
    
    
    this.cxx_setServoTarget(
        index,
        target
        );
    
    
    
    
}


btGeneric6DofSpring2Constraint.getAngularLowerLimitReversed!(
    io
    btVector3
    angularLower
    
    
    )
{   
    
    CxxbtVector3Ref angularLower__cxx = Make_CxxbtVector3Ref(angularLower);
    
    this.cxx_getAngularLowerLimitReversed(
        angularLower__cxx
        );
    
    
    
}


btGeneric6DofSpring2Constraint.getAngularUpperLimitReversed!(
    io
    btVector3
    angularUpper
    
    
    )
{   
    
    CxxbtVector3Ref angularUpper__cxx = Make_CxxbtVector3Ref(angularUpper);
    
    this.cxx_getAngularUpperLimitReversed(
        angularUpper__cxx
        );
    
    
    
}

Float32
btGeneric6DofSpring2Constraint.getRelativePivotPosition?(
    in
    SInt32
    axis_index
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getRelativePivotPosition(
        axis_index
        );
    
    
    return __res;
}


btGeneric6DofSpring2Constraint.setBounce!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    bounce
    
    
    )
{   
    
    
    
    this.cxx_setBounce(
        index,
        bounce
        );
    
    
    
    
}


btGeneric6DofSpring2Constraint.setStiffness!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    stiffness
    
    ,
    in
    Boolean
    limitIfNeeded
    
    
    )
{   
    
    
    
    
    this.cxx_setStiffness(
        index,
        stiffness,
        limitIfNeeded
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2Constraint] EDK[Fabric_EDK_KL_btGeneric6DofSpring2Constraint] LIB[btGeneric6DofSpring2Constraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpring2Constraint.=(
    btGeneric6DofSpring2Constraint that
    ) = "Bullet2__btGeneric6DofSpring2Constraint__MU__simple_ass_op__cea04dc73e98950fee72b37586cacf49";


/// \dfgPresetOmit
/// \internal
btGeneric6DofSpring2Constraint.appendDesc(io String string) {
  string += "btGeneric6DofSpring2Constraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2ConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData] LIB[btGeneric6DofSpring2ConstraintData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData] LIB[btGeneric6DofSpring2ConstraintData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData] LIB[btGeneric6DofSpring2ConstraintData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpring2ConstraintData() = "Bullet2__btGeneric6DofSpring2ConstraintData__MU__empty_ctor__efa607e0e11a436ce3c4cced2f954df2";

/// \dfgPresetOmit
btGeneric6DofSpring2ConstraintData(
    btGeneric6DofSpring2ConstraintData that
    ) = "Bullet2__btGeneric6DofSpring2ConstraintData__MU__copy_ctor__da507f5013498e844e4bac580c322e8b";

btGeneric6DofSpring2ConstraintData.cxx_delete() = "Bullet2__btGeneric6DofSpring2ConstraintData__MU__delete__b92ef85336c53fe44b21556059a78dc8";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData] LIB[btGeneric6DofSpring2ConstraintData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData] LIB[btGeneric6DofSpring2ConstraintData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintData] LIB[btGeneric6DofSpring2ConstraintData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpring2ConstraintData.=(
    btGeneric6DofSpring2ConstraintData that
    ) = "Bullet2__btGeneric6DofSpring2ConstraintData__MU__simple_ass_op__7141a92532bf123b0073c0a936166c2c";


/// \dfgPresetOmit
/// \internal
btGeneric6DofSpring2ConstraintData.appendDesc(io String string) {
  string += "btGeneric6DofSpring2ConstraintData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpring2ConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2] LIB[btGeneric6DofSpring2ConstraintDoubleData2 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2] LIB[btGeneric6DofSpring2ConstraintDoubleData2 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2] LIB[btGeneric6DofSpring2ConstraintDoubleData2 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpring2ConstraintDoubleData2() = "Bullet2__btGeneric6DofSpring2ConstraintDoubleData2__MU__empty_ctor__8e7901948449be8afdd417a7ea5c73da";

/// \dfgPresetOmit
btGeneric6DofSpring2ConstraintDoubleData2(
    btGeneric6DofSpring2ConstraintDoubleData2 that
    ) = "Bullet2__btGeneric6DofSpring2ConstraintDoubleData2__MU__copy_ctor__b4d44913980b9ca983f88a2c5bdb036b";

btGeneric6DofSpring2ConstraintDoubleData2.cxx_delete() = "Bullet2__btGeneric6DofSpring2ConstraintDoubleData2__MU__delete__9fe8a8e195c369e0d9eba5b2912679de";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2] LIB[btGeneric6DofSpring2ConstraintDoubleData2 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2] LIB[btGeneric6DofSpring2ConstraintDoubleData2 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpring2ConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpring2ConstraintDoubleData2] LIB[btGeneric6DofSpring2ConstraintDoubleData2 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpring2ConstraintDoubleData2.=(
    btGeneric6DofSpring2ConstraintDoubleData2 that
    ) = "Bullet2__btGeneric6DofSpring2ConstraintDoubleData2__MU__simple_ass_op__ded78116b5a4c486ba24e555c5d47858";


/// \dfgPresetOmit
/// \internal
btGeneric6DofSpring2ConstraintDoubleData2.appendDesc(io String string) {
  string += "btGeneric6DofSpring2ConstraintDoubleData2:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpringConstraint() = "Bullet2__btGeneric6DofSpringConstraint__MU__empty_ctor__05649ac853dfb5295d875e991b66695b";

/// \dfgPresetOmit
btGeneric6DofSpringConstraint(
    btGeneric6DofSpringConstraint that
    ) = "Bullet2__btGeneric6DofSpringConstraint__MU__copy_ctor__36c3a4a100a0b364bbcc578ca6a3eb12";

/// \dfgPresetOmit
/// \internal
btGeneric6DofSpringConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameA
    ) = "Bullet2__btGeneric6DofSpringConstraint__MU__ctor__6fd80077c8871ea84002a4707aaa46a4";

/// \dfgPresetOmit
btGeneric6DofSpringConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbB,
        frameInA,
        frameInB,
        useLinearReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btGeneric6DofSpringConstraint.__ctor(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameB
    ) = "Bullet2__btGeneric6DofSpringConstraint__MU__ctor__77a944377fae5034be2f353ec66c37ca";

/// \dfgPresetOmit
btGeneric6DofSpringConstraint(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameB
    ) {
    this.__ctor(
        rbB,
        frameInB,
        useLinearReferenceFrameB
        );
}

btGeneric6DofSpringConstraint(
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInB
    
    ,
    in
    Boolean
    useLinearReferenceFrameB
    
    
    ) {
    
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    
    this.__ctor(
        rbB,
        frameInB__cxx,
        useLinearReferenceFrameB
        );
    
    
    
}

btGeneric6DofSpringConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInA
    
    ,
    in
    btTransform
    frameInB
    
    ,
    in
    Boolean
    useLinearReferenceFrameA
    
    
    ) {
    
    
    
    CxxbtTransformConstRef frameInA__cxx = Make_CxxbtTransformConstRef(frameInA);
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    
    this.__ctor(
        rbA,
        rbB,
        frameInA__cxx,
        frameInB__cxx,
        useLinearReferenceFrameA
        );
    
    
    
    
    
}

btGeneric6DofSpringConstraint.cxx_delete() = "Bullet2__btGeneric6DofSpringConstraint__MU__delete__94e68047d6e1a982e60ac00363121990";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpringConstraint.cxx_enableSpring!(
    SInt32 index,
    Boolean onOff
    )
 = "Bullet2__btGeneric6DofSpringConstraint__MU__meth_enableSpring__853c63f50b98555f7a3d96ae35207849";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpringConstraint.cxx_setStiffness!(
    SInt32 index,
    Float32 stiffness
    )
 = "Bullet2__btGeneric6DofSpringConstraint__MU__meth_setStiffness__75645c8a543134f1b5b8d1c4fe346fa3";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpringConstraint.cxx_setDamping!(
    SInt32 index,
    Float32 damping
    )
 = "Bullet2__btGeneric6DofSpringConstraint__MU__meth_setDamping__ee3e577a086f2cd5f9fcc14bf3a48bfb";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpringConstraint.cxx_setEquilibriumPoint!(
    )
 = "Bullet2__btGeneric6DofSpringConstraint__MU__meth_setEquilibriumPoint__6403c0eee3e0d3dddb00ffca5049548b";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpringConstraint.cxx_setEquilibriumPoint!(
    SInt32 index
    )
 = "Bullet2__btGeneric6DofSpringConstraint__MU__meth_setEquilibriumPoint__5c774f73da7b98c7a90f1dff0c91f4f2";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpringConstraint.cxx_setEquilibriumPoint!(
    SInt32 index,
    Float32 val
    )
 = "Bullet2__btGeneric6DofSpringConstraint__MU__meth_setEquilibriumPoint__8dfd21a665acb9ac5dda2c6036cddf02";

/// \dfgPresetOmit
/// \internal
Boolean
btGeneric6DofSpringConstraint.cxx_isSpringEnabled?(
    SInt32 index
    )
 = "Bullet2__btGeneric6DofSpringConstraint__CO__meth_isSpringEnabled__a0a58fc9fb0654511e1c426972111837";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofSpringConstraint.cxx_getStiffness?(
    SInt32 index
    )
 = "Bullet2__btGeneric6DofSpringConstraint__CO__meth_getStiffness__a911709b93eb214c1939e04ba96b78e7";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofSpringConstraint.cxx_getDamping?(
    SInt32 index
    )
 = "Bullet2__btGeneric6DofSpringConstraint__CO__meth_getDamping__91701981f9f90cf9b6bfeaba768e4a62";

/// \dfgPresetOmit
/// \internal
Float32
btGeneric6DofSpringConstraint.cxx_getEquilibriumPoint?(
    SInt32 index
    )
 = "Bullet2__btGeneric6DofSpringConstraint__CO__meth_getEquilibriumPoint__2fe24151f6422ea1a460399a00d9113a";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpringConstraint.cxx_setAxis!(
    CxxbtVector3ConstRef axis1,
    CxxbtVector3ConstRef axis2
    )
 = "Bullet2__btGeneric6DofSpringConstraint__MU__meth_setAxis__451481bbccd8022ad3da6e9c839a4200";

/// \dfgPresetOmit
/// \internal

btGeneric6DofSpringConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btGeneric6DofSpringConstraint__MU__meth_getInfo2__9a0bbf894fb5136bb23f1e3b64fb5165";

/// \dfgPresetOmit
/// \internal
SInt32
btGeneric6DofSpringConstraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btGeneric6DofSpringConstraint__CO__meth_calculateSerializeBufferSize__9b9828e249a7856f0117bfd87aafb873";

SInt32
btGeneric6DofSpringConstraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btGeneric6DofSpringConstraint.setEquilibriumPoint!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    val
    
    
    )
{   
    
    
    
    this.cxx_setEquilibriumPoint(
        index,
        val
        );
    
    
    
    
}

Float32
btGeneric6DofSpringConstraint.getStiffness?(
    in
    SInt32
    index
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getStiffness(
        index
        );
    
    
    return __res;
}

Float32
btGeneric6DofSpringConstraint.getDamping?(
    in
    SInt32
    index
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getDamping(
        index
        );
    
    
    return __res;
}


btGeneric6DofSpringConstraint.setEquilibriumPoint!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setEquilibriumPoint(
        index
        );
    
    
    
}


btGeneric6DofSpringConstraint.enableSpring!(
    in
    SInt32
    index
    
    ,
    in
    Boolean
    onOff
    
    
    )
{   
    
    
    
    this.cxx_enableSpring(
        index,
        onOff
        );
    
    
    
    
}


btGeneric6DofSpringConstraint.setEquilibriumPoint!(
    )
{   
    
    this.cxx_setEquilibriumPoint(
        );
    
    
}

Float32
btGeneric6DofSpringConstraint.getEquilibriumPoint?(
    in
    SInt32
    index
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getEquilibriumPoint(
        index
        );
    
    
    return __res;
}


btGeneric6DofSpringConstraint.setAxis!(
    in
    btVector3
    axis1
    
    ,
    in
    btVector3
    axis2
    
    
    )
{   
    
    CxxbtVector3ConstRef axis1__cxx = Make_CxxbtVector3ConstRef(axis1);
    
    CxxbtVector3ConstRef axis2__cxx = Make_CxxbtVector3ConstRef(axis2);
    
    this.cxx_setAxis(
        axis1__cxx,
        axis2__cxx
        );
    
    
    
    
}

Boolean
btGeneric6DofSpringConstraint.isSpringEnabled?(
    in
    SInt32
    index
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_isSpringEnabled(
        index
        );
    
    
    return __res;
}


btGeneric6DofSpringConstraint.setStiffness!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    stiffness
    
    
    )
{   
    
    
    
    this.cxx_setStiffness(
        index,
        stiffness
        );
    
    
    
    
}


btGeneric6DofSpringConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}


btGeneric6DofSpringConstraint.setDamping!(
    in
    SInt32
    index
    
    ,
    in
    Float32
    damping
    
    
    )
{   
    
    
    
    this.cxx_setDamping(
        index,
        damping
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraint] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraint] LIB[btGeneric6DofSpringConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpringConstraint.=(
    btGeneric6DofSpringConstraint that
    ) = "Bullet2__btGeneric6DofSpringConstraint__MU__simple_ass_op__365619b12200b76f8778dda8dcafb5f8";


/// \dfgPresetOmit
/// \internal
btGeneric6DofSpringConstraint.appendDesc(io String string) {
  string += "btGeneric6DofSpringConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintData] LIB[btGeneric6DofSpringConstraintData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintData] LIB[btGeneric6DofSpringConstraintData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintData] LIB[btGeneric6DofSpringConstraintData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpringConstraintData() = "Bullet2__btGeneric6DofSpringConstraintData__MU__empty_ctor__b5c3cb8fc63e566d73962d0143c6664b";

/// \dfgPresetOmit
btGeneric6DofSpringConstraintData(
    btGeneric6DofSpringConstraintData that
    ) = "Bullet2__btGeneric6DofSpringConstraintData__MU__copy_ctor__342e9cbe79cbfd2ba7b94b6d27f4ade1";

btGeneric6DofSpringConstraintData.cxx_delete() = "Bullet2__btGeneric6DofSpringConstraintData__MU__delete__4b58d873acc62c1e8436bbb659ca5fbd";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintData] LIB[btGeneric6DofSpringConstraintData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintData] LIB[btGeneric6DofSpringConstraintData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintData] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintData] LIB[btGeneric6DofSpringConstraintData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpringConstraintData.=(
    btGeneric6DofSpringConstraintData that
    ) = "Bullet2__btGeneric6DofSpringConstraintData__MU__simple_ass_op__e059cc2b1bdf882a277b50ee1a041170";


/// \dfgPresetOmit
/// \internal
btGeneric6DofSpringConstraintData.appendDesc(io String string) {
  string += "btGeneric6DofSpringConstraintData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGeneric6DofSpringConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2] LIB[btGeneric6DofSpringConstraintDoubleData2 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2] LIB[btGeneric6DofSpringConstraintDoubleData2 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2] LIB[btGeneric6DofSpringConstraintDoubleData2 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpringConstraintDoubleData2() = "Bullet2__btGeneric6DofSpringConstraintDoubleData2__MU__empty_ctor__f9187c3c919b2307c9b6dc64042cefc2";

/// \dfgPresetOmit
btGeneric6DofSpringConstraintDoubleData2(
    btGeneric6DofSpringConstraintDoubleData2 that
    ) = "Bullet2__btGeneric6DofSpringConstraintDoubleData2__MU__copy_ctor__6a4cb171cd763ab4740482803d481af6";

btGeneric6DofSpringConstraintDoubleData2.cxx_delete() = "Bullet2__btGeneric6DofSpringConstraintDoubleData2__MU__delete__586344c635f919c906e7fe0a86e8b110";

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2] LIB[btGeneric6DofSpringConstraintDoubleData2 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2] LIB[btGeneric6DofSpringConstraintDoubleData2 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGeneric6DofSpringConstraintDoubleData2] EDK[Fabric_EDK_KL_btGeneric6DofSpringConstraintDoubleData2] LIB[btGeneric6DofSpringConstraintDoubleData2 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGeneric6DofSpringConstraintDoubleData2.=(
    btGeneric6DofSpringConstraintDoubleData2 that
    ) = "Bullet2__btGeneric6DofSpringConstraintDoubleData2__MU__simple_ass_op__6ddb84b610bf28a8ba3c9c0b25fb19de";


/// \dfgPresetOmit
/// \internal
btGeneric6DofSpringConstraintDoubleData2.appendDesc(io String string) {
  string += "btGeneric6DofSpringConstraintDoubleData2:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolverConstraint] EDK[Fabric_EDK_KL_btSolverConstraint] LIB[btSolverConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverConstraint] EDK[Fabric_EDK_KL_btSolverConstraint] LIB[btSolverConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverConstraint] EDK[Fabric_EDK_KL_btSolverConstraint] LIB[btSolverConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSolverConstraint() = "Bullet2__btSolverConstraint__MU__empty_ctor__c73c7f7a8f79a3c44e38d4c48640469c";

/// \dfgPresetOmit
btSolverConstraint(
    btSolverConstraint that
    ) = "Bullet2__btSolverConstraint__MU__copy_ctor__8a0efed33918a3c3b9af2babdbffa374";

btSolverConstraint.cxx_delete() = "Bullet2__btSolverConstraint__MU__delete__6b95700e8d5b4eb5e7ee423a76f6e70e";

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverConstraint] EDK[Fabric_EDK_KL_btSolverConstraint] LIB[btSolverConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverConstraint] EDK[Fabric_EDK_KL_btSolverConstraint] LIB[btSolverConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverConstraint] EDK[Fabric_EDK_KL_btSolverConstraint] LIB[btSolverConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSolverConstraint.=(
    btSolverConstraint that
    ) = "Bullet2__btSolverConstraint__MU__simple_ass_op__329b91a42789bc2d46ea582fff85d021";


/// \dfgPresetOmit
/// \internal
btSolverConstraint.appendDesc(io String string) {
  string += "btSolverConstraint:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}





//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////











//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConeTwistConstraint() = "Bullet2__btConeTwistConstraint__MU__empty_ctor__91c9954fa5434b4a8b8bc0c238d2d12a";

/// \dfgPresetOmit
btConeTwistConstraint(
    btConeTwistConstraint that
    ) = "Bullet2__btConeTwistConstraint__MU__copy_ctor__b20773c646793245a4cadd050aa9a73a";

/// \dfgPresetOmit
/// \internal
btConeTwistConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame
    ) = "Bullet2__btConeTwistConstraint__MU__ctor__bf105f682c22eb40321728c2a6153460";

/// \dfgPresetOmit
btConeTwistConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame
    ) {
    this.__ctor(
        rbA,
        rbB,
        rbAFrame,
        rbBFrame
        );
}

/// \dfgPresetOmit
/// \internal
btConeTwistConstraint.__ctor(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame
    ) = "Bullet2__btConeTwistConstraint__MU__ctor__b21dbad1d055dbdb88cd8a2ce9d44447";

/// \dfgPresetOmit
btConeTwistConstraint(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame
    ) {
    this.__ctor(
        rbA,
        rbAFrame
        );
}

btConeTwistConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btTransform
    rbAFrame
    
    
    ) {
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    this.__ctor(
        rbA,
        rbAFrame__cxx
        );
    
    
}

btConeTwistConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    rbAFrame
    
    ,
    in
    btTransform
    rbBFrame
    
    
    ) {
    
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    
    CxxbtTransformConstRef rbBFrame__cxx = Make_CxxbtTransformConstRef(rbBFrame);
    this.__ctor(
        rbA,
        rbB,
        rbAFrame__cxx,
        rbBFrame__cxx
        );
    
    
    
    
}

btConeTwistConstraint.cxx_delete() = "Bullet2__btConeTwistConstraint__MU__delete__8e5700abbcbfdab45e480ed635ed382f";

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_buildJacobian!(
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_buildJacobian__7c102e5511b2f1a868d0fb677a1d90ce";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_getInfo1__6c713b6a8639a820ed3428ddc1a615e8";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_getInfo1NonVirtual!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_getInfo1NonVirtual__9aa7c7baa7804e3e8c8a8232ab4f4266";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_getInfo2__781e713b41c1282c407832935ef1154f";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_getInfo2NonVirtual!(
    btTypedConstraint_btConstraintInfo2 info,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtMatrix3x3ConstRef invInertiaWorldA,
    CxxbtMatrix3x3ConstRef invInertiaWorldB
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_getInfo2NonVirtual__5d415d8829947c2d6d99ac2a6161aede";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_solveConstraintObsolete!(
    btSolverBody bodyA,
    btSolverBody bodyB,
    Float32 timeStep
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_solveConstraintObsolete__11144f7703e6ce834648bc8fb0883391";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_updateRHS!(
    Float32 timeStep
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_updateRHS__f02350af46474957cdd2b91695843649";

/// \dfgPresetOmit
/// \internal
btRigidBody
btConeTwistConstraint.cxx_getRigidBodyA?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getRigidBodyA__1cac36450ee51ed269bae545082aa99d";

/// \dfgPresetOmit
/// \internal
btRigidBody
btConeTwistConstraint.cxx_getRigidBodyB?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getRigidBodyB__ca1c760cfb4051b28f3a33b7edb0b7b2";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setAngularOnly!(
    Boolean angularOnly
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setAngularOnly__abdc75963904755e1ca3f75357ce2caa";

/// \dfgPresetOmit
/// \internal
Boolean
btConeTwistConstraint.cxx_getAngularOnly?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getAngularOnly__2a0044f82877ab254f127722e23a8472";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setLimit!(
    SInt32 limitIndex,
    Float32 limitValue
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setLimit__85703e3dba021f3fce780e5f7727bc54";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getLimit?(
    SInt32 limitIndex
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getLimit__6f5ac9e9f00084a3bf19fb5ba86f712a";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setLimit!(
    Float32 _swingSpan1,
    Float32 _swingSpan2,
    Float32 _twistSpan
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setLimit__d678d27d223ea38835afea9dae72a698";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setLimit!(
    Float32 _swingSpan1,
    Float32 _swingSpan2,
    Float32 _twistSpan,
    Float32 _softness
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setLimit__e68e7c927088b9df194a7b45fd3eb674";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setLimit!(
    Float32 _swingSpan1,
    Float32 _swingSpan2,
    Float32 _twistSpan,
    Float32 _softness,
    Float32 _biasFactor
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setLimit__bd8b170561d84ee2677e8dd0db826cb1";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setLimit!(
    Float32 _swingSpan1,
    Float32 _swingSpan2,
    Float32 _twistSpan,
    Float32 _softness,
    Float32 _biasFactor,
    Float32 _relaxationFactor
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setLimit__b64fc6bdbecd87d3e1716b3279a11869";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btConeTwistConstraint.cxx_getAFrame?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getAFrame__ee72c95551db2457fdcff92074dd8244";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btConeTwistConstraint.cxx_getBFrame?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getBFrame__4e3ba87e6b4ab3ed8c9c2bff6360a608";

/// \dfgPresetOmit
/// \internal
SInt32
btConeTwistConstraint.cxx_getSolveTwistLimit!(
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_getSolveTwistLimit__b5cc9b0969fc6f559343f653aed33caf";

/// \dfgPresetOmit
/// \internal
SInt32
btConeTwistConstraint.cxx_getSolveSwingLimit!(
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_getSolveSwingLimit__962de35f891c4933e91bbf5ad98982e8";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getTwistLimitSign!(
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_getTwistLimitSign__3502da559c74acdf38ae87e8c47307eb";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_calcAngleInfo!(
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_calcAngleInfo__e1133b2153fbfb113ae9aeed28fe9ecc";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_calcAngleInfo2!(
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtMatrix3x3ConstRef invInertiaWorldA,
    CxxbtMatrix3x3ConstRef invInertiaWorldB
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_calcAngleInfo2__760ab8f2e7e4dc20b8e3f20d75dc3d89";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getSwingSpan1?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getSwingSpan1__eb181408e876001d3e9b6aad761af35d";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getSwingSpan2?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getSwingSpan2__42aebef677263bd4126c157ad26f2379";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getTwistSpan?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getTwistSpan__032aaa4897069d81083fff85d5c32041";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getLimitSoftness?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getLimitSoftness__aadf21f8ccbf3350dcb787e61e164114";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getBiasFactor?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getBiasFactor__d0753ee3f87863c1ac6f2c2dca23e8cd";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getRelaxationFactor?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getRelaxationFactor__331240f35e975185c8db1f97ad149434";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getTwistAngle?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getTwistAngle__6bfb039739c4ff14958208c5b5c2b13e";

/// \dfgPresetOmit
/// \internal
Boolean
btConeTwistConstraint.cxx_isPastSwingLimit!(
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_isPastSwingLimit__903a7b8a84d4d2b4cdbdd475710fc829";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getDamping?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getDamping__1ab7414338de45758824662e41aa6b31";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setDamping!(
    Float32 damping
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setDamping__bc26b00ac6a34c40afa0736752f08acb";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_enableMotor!(
    Boolean b
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_enableMotor__4976db4e4b55983639e055c841437a6c";

/// \dfgPresetOmit
/// \internal
Boolean
btConeTwistConstraint.cxx_isMotorEnabled?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_isMotorEnabled__675704878a82c0bfd96d5dca50cd8def";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getMaxMotorImpulse?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getMaxMotorImpulse__c442edf2022f01c78a72bfa0d1b21927";

/// \dfgPresetOmit
/// \internal
Boolean
btConeTwistConstraint.cxx_isMaxMotorImpulseNormalized?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_isMaxMotorImpulseNormalized__19d196282f0858589de4b8aa406fb91b";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setMaxMotorImpulse!(
    Float32 maxMotorImpulse
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setMaxMotorImpulse__a1da593e610d29b523bab3d67f1ad14a";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setMaxMotorImpulseNormalized!(
    Float32 maxMotorImpulse
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setMaxMotorImpulseNormalized__a4c7b8742e5f5affb8a0fd7c58c2a21b";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getFixThresh!(
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_getFixThresh__f12905e8577e9478614672dd720899b2";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setFixThresh!(
    Float32 fixThresh
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setFixThresh__01f9e92a68d8b84ed0a547bc896ffa3b";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setMotorTarget!(
    CxxbtQuaternionConstRef q
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setMotorTarget__c43995d19aac8aa158c4a48341af986d";

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef
btConeTwistConstraint.cxx_getMotorTarget?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getMotorTarget__6da23072a25e6cae54af1bca31b1397f";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setMotorTargetInConstraintSpace!(
    CxxbtQuaternionConstRef q
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setMotorTargetInConstraintSpace__1121934019a200c5e469d4cb7dc48848";

/// \dfgPresetOmit
/// \internal
btVector3
btConeTwistConstraint.cxx_GetPointForAngle?(
    Float32 fAngleInRadians,
    Float32 fLength
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_GetPointForAngle__ed07b02f47381fa0d70b2e6d3d601156";

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
// 
///If no axis is provided, it uses the default axis for this constraint.
/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setParam__8f6e6554b0ca77f97fd45158b61af4cb";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value,
    SInt32 axis
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setParam__75c8fd6484823bdc09556a972b080b5c";

/// \dfgPresetOmit
/// \internal

btConeTwistConstraint.cxx_setFrames!(
    CxxbtTransformConstRef frameA,
    CxxbtTransformConstRef frameB
    )
 = "Bullet2__btConeTwistConstraint__MU__meth_setFrames__beaca4d4cdaa7bb053789639404e451d";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btConeTwistConstraint.cxx_getFrameOffsetA?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getFrameOffsetA__aace3382c0efc4f495ba8d2e20443b88";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btConeTwistConstraint.cxx_getFrameOffsetB?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getFrameOffsetB__3bd4d3bd2cea22ee74c9ca432a0be3a8";

///return the local value of parameter
/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getParam?(
    SInt32 num
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getParam__10397850912e4fdf4eb67f99af5b97f0";

/// \dfgPresetOmit
/// \internal
Float32
btConeTwistConstraint.cxx_getParam?(
    SInt32 num,
    SInt32 axis
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getParam__078c67231c39c3c5ebb7893f13b0583d";

/// \dfgPresetOmit
/// \internal
SInt32
btConeTwistConstraint.cxx_getFlags?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_getFlags__6079a620d24c06ec28313126c745c425";

/// \dfgPresetOmit
/// \internal
SInt32
btConeTwistConstraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btConeTwistConstraint__CO__meth_calculateSerializeBufferSize__e29b9e9dc74734f7dd8613675875a8be";


btConeTwistConstraint.setFrames!(
    in
    btTransform
    frameA
    
    ,
    in
    btTransform
    frameB
    
    
    )
{   
    
    CxxbtTransformConstRef frameA__cxx = Make_CxxbtTransformConstRef(frameA);
    
    CxxbtTransformConstRef frameB__cxx = Make_CxxbtTransformConstRef(frameB);
    
    this.cxx_setFrames(
        frameA__cxx,
        frameB__cxx
        );
    
    
    
    
}

btVector3
btConeTwistConstraint.GetPointForAngle?(
    in
    Float32
    fAngleInRadians
    
    ,
    in
    Float32
    fLength
    
    
    )
{   
    
    
    btVector3 __res = 
    this.cxx_GetPointForAngle(
        fAngleInRadians,
        fLength
        );
    
    
    
    return __res;
}

Float32
btConeTwistConstraint.getDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getDamping(
        );
    
    return __res;
}


btConeTwistConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}


btConeTwistConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}


btConeTwistConstraint.setAngularOnly!(
    in
    Boolean
    angularOnly
    
    
    )
{   
    
    
    this.cxx_setAngularOnly(
        angularOnly
        );
    
    
    
}

SInt32
btConeTwistConstraint.getSolveSwingLimit!(
    )
{   
    SInt32 __res = 
    this.cxx_getSolveSwingLimit(
        );
    
    return __res;
}

Float32
btConeTwistConstraint.getTwistSpan?(
    )
{   
    Float32 __res = 
    this.cxx_getTwistSpan(
        );
    
    return __res;
}

Float32
btConeTwistConstraint.getLimitSoftness?(
    )
{   
    Float32 __res = 
    this.cxx_getLimitSoftness(
        );
    
    return __res;
}


btConeTwistConstraint.setMaxMotorImpulseNormalized!(
    in
    Float32
    maxMotorImpulse
    
    
    )
{   
    
    
    this.cxx_setMaxMotorImpulseNormalized(
        maxMotorImpulse
        );
    
    
    
}


btConeTwistConstraint.updateRHS!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_updateRHS(
        timeStep
        );
    
    
    
}

///return the local value of parameter
Float32
btConeTwistConstraint.getParam?(
    in
    SInt32
    num
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getParam(
        num
        );
    
    
    return __res;
}

btTransform
btConeTwistConstraint.getFrameOffsetB?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getFrameOffsetB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btConeTwistConstraint.getInfo2NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btMatrix3x3
    invInertiaWorldA
    
    ,
    in
    btMatrix3x3
    invInertiaWorldB
    
    
    )
{   
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtMatrix3x3ConstRef invInertiaWorldA__cxx = Make_CxxbtMatrix3x3ConstRef(invInertiaWorldA);
    
    CxxbtMatrix3x3ConstRef invInertiaWorldB__cxx = Make_CxxbtMatrix3x3ConstRef(invInertiaWorldB);
    
    this.cxx_getInfo2NonVirtual(
        info,
        transA__cxx,
        transB__cxx,
        invInertiaWorldA__cxx,
        invInertiaWorldB__cxx
        );
    
    
    
    
    
    
    
}

Boolean
btConeTwistConstraint.isMaxMotorImpulseNormalized?(
    )
{   
    Boolean __res = 
    this.cxx_isMaxMotorImpulseNormalized(
        );
    
    return __res;
}

SInt32
btConeTwistConstraint.getSolveTwistLimit!(
    )
{   
    SInt32 __res = 
    this.cxx_getSolveTwistLimit(
        );
    
    return __res;
}


btConeTwistConstraint.setDamping!(
    in
    Float32
    damping
    
    
    )
{   
    
    
    this.cxx_setDamping(
        damping
        );
    
    
    
}


btConeTwistConstraint.setLimit!(
    in
    SInt32
    limitIndex
    
    ,
    in
    Float32
    limitValue
    
    
    )
{   
    
    
    
    this.cxx_setLimit(
        limitIndex,
        limitValue
        );
    
    
    
    
}

Float32
btConeTwistConstraint.getLimit?(
    in
    SInt32
    limitIndex
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getLimit(
        limitIndex
        );
    
    
    return __res;
}

btTransform
btConeTwistConstraint.getAFrame?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getAFrame(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btConeTwistConstraint.setMotorTarget!(
    in
    btQuaternion
    q
    
    
    )
{   
    
    CxxbtQuaternionConstRef q__cxx = Make_CxxbtQuaternionConstRef(q);
    
    this.cxx_setMotorTarget(
        q__cxx
        );
    
    
    
}

Float32
btConeTwistConstraint.getTwistAngle?(
    )
{   
    Float32 __res = 
    this.cxx_getTwistAngle(
        );
    
    return __res;
}

btQuaternion
btConeTwistConstraint.getMotorTarget?(
    )
{   
    CxxbtQuaternionConstRef __res_cxx = 
    this.cxx_getMotorTarget(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtQuaternionConstRef';
    btQuaternion __res = __res_cxx.cxx_get();
    return __res;
}


btConeTwistConstraint.setLimit!(
    in
    Float32
    _swingSpan1
    
    ,
    in
    Float32
    _swingSpan2
    
    ,
    in
    Float32
    _twistSpan
    
    
    )
{   
    
    
    
    
    this.cxx_setLimit(
        _swingSpan1,
        _swingSpan2,
        _twistSpan
        );
    
    
    
    
    
}


btConeTwistConstraint.setMaxMotorImpulse!(
    in
    Float32
    maxMotorImpulse
    
    
    )
{   
    
    
    this.cxx_setMaxMotorImpulse(
        maxMotorImpulse
        );
    
    
    
}


btConeTwistConstraint.enableMotor!(
    in
    Boolean
    b
    
    
    )
{   
    
    
    this.cxx_enableMotor(
        b
        );
    
    
    
}

Float32
btConeTwistConstraint.getBiasFactor?(
    )
{   
    Float32 __res = 
    this.cxx_getBiasFactor(
        );
    
    return __res;
}


btConeTwistConstraint.setFixThresh!(
    in
    Float32
    fixThresh
    
    
    )
{   
    
    
    this.cxx_setFixThresh(
        fixThresh
        );
    
    
    
}

btRigidBody
btConeTwistConstraint.getRigidBodyB?(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBodyB(
        );
    
    return __res;
}

Float32
btConeTwistConstraint.getRelaxationFactor?(
    )
{   
    Float32 __res = 
    this.cxx_getRelaxationFactor(
        );
    
    return __res;
}

Float32
btConeTwistConstraint.getSwingSpan2?(
    )
{   
    Float32 __res = 
    this.cxx_getSwingSpan2(
        );
    
    return __res;
}

btRigidBody
btConeTwistConstraint.getRigidBodyA?(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBodyA(
        );
    
    return __res;
}


btConeTwistConstraint.solveConstraintObsolete!(
    in
    btSolverBody
    bodyA
    
    ,
    in
    btSolverBody
    bodyB
    
    ,
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    
    
    this.cxx_solveConstraintObsolete(
        bodyA,
        bodyB,
        timeStep
        );
    
    
    
    
    
}


btConeTwistConstraint.setLimit!(
    in
    Float32
    _swingSpan1
    
    ,
    in
    Float32
    _swingSpan2
    
    ,
    in
    Float32
    _twistSpan
    
    ,
    in
    Float32
    _softness
    
    ,
    in
    Float32
    _biasFactor
    
    
    )
{   
    
    
    
    
    
    
    this.cxx_setLimit(
        _swingSpan1,
        _swingSpan2,
        _twistSpan,
        _softness,
        _biasFactor
        );
    
    
    
    
    
    
    
}

btTransform
btConeTwistConstraint.getFrameOffsetA?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getFrameOffsetA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

Boolean
btConeTwistConstraint.getAngularOnly?(
    )
{   
    Boolean __res = 
    this.cxx_getAngularOnly(
        );
    
    return __res;
}

Boolean
btConeTwistConstraint.isMotorEnabled?(
    )
{   
    Boolean __res = 
    this.cxx_isMotorEnabled(
        );
    
    return __res;
}


btConeTwistConstraint.buildJacobian!(
    )
{   
    
    this.cxx_buildJacobian(
        );
    
    
}


btConeTwistConstraint.setMotorTargetInConstraintSpace!(
    in
    btQuaternion
    q
    
    
    )
{   
    
    CxxbtQuaternionConstRef q__cxx = Make_CxxbtQuaternionConstRef(q);
    
    this.cxx_setMotorTargetInConstraintSpace(
        q__cxx
        );
    
    
    
}


btConeTwistConstraint.getInfo1NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1NonVirtual(
        info
        );
    
    
    
}


btConeTwistConstraint.calcAngleInfo2!(
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btMatrix3x3
    invInertiaWorldA
    
    ,
    in
    btMatrix3x3
    invInertiaWorldB
    
    
    )
{   
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtMatrix3x3ConstRef invInertiaWorldA__cxx = Make_CxxbtMatrix3x3ConstRef(invInertiaWorldA);
    
    CxxbtMatrix3x3ConstRef invInertiaWorldB__cxx = Make_CxxbtMatrix3x3ConstRef(invInertiaWorldB);
    
    this.cxx_calcAngleInfo2(
        transA__cxx,
        transB__cxx,
        invInertiaWorldA__cxx,
        invInertiaWorldB__cxx
        );
    
    
    
    
    
    
}


btConeTwistConstraint.setLimit!(
    in
    Float32
    _swingSpan1
    
    ,
    in
    Float32
    _swingSpan2
    
    ,
    in
    Float32
    _twistSpan
    
    ,
    in
    Float32
    _softness
    
    
    )
{   
    
    
    
    
    
    this.cxx_setLimit(
        _swingSpan1,
        _swingSpan2,
        _twistSpan,
        _softness
        );
    
    
    
    
    
    
}


btConeTwistConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    
    
    this.cxx_setParam(
        num,
        value,
        axis
        );
    
    
    
    
    
}

btTransform
btConeTwistConstraint.getBFrame?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getBFrame(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btConeTwistConstraint.getSwingSpan1?(
    )
{   
    Float32 __res = 
    this.cxx_getSwingSpan1(
        );
    
    return __res;
}

Float32
btConeTwistConstraint.getParam?(
    in
    SInt32
    num
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_getParam(
        num,
        axis
        );
    
    
    
    return __res;
}

Float32
btConeTwistConstraint.getFixThresh!(
    )
{   
    Float32 __res = 
    this.cxx_getFixThresh(
        );
    
    return __res;
}

SInt32
btConeTwistConstraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

SInt32
btConeTwistConstraint.getFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getFlags(
        );
    
    return __res;
}

Boolean
btConeTwistConstraint.isPastSwingLimit!(
    )
{   
    Boolean __res = 
    this.cxx_isPastSwingLimit(
        );
    
    return __res;
}


btConeTwistConstraint.calcAngleInfo!(
    )
{   
    
    this.cxx_calcAngleInfo(
        );
    
    
}

Float32
btConeTwistConstraint.getMaxMotorImpulse?(
    )
{   
    Float32 __res = 
    this.cxx_getMaxMotorImpulse(
        );
    
    return __res;
}

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
// 
///If no axis is provided, it uses the default axis for this constraint.

btConeTwistConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    
    )
{   
    
    
    
    this.cxx_setParam(
        num,
        value
        );
    
    
    
    
}

Float32
btConeTwistConstraint.getTwistLimitSign!(
    )
{   
    Float32 __res = 
    this.cxx_getTwistLimitSign(
        );
    
    return __res;
}


btConeTwistConstraint.setLimit!(
    in
    Float32
    _swingSpan1
    
    ,
    in
    Float32
    _swingSpan2
    
    ,
    in
    Float32
    _twistSpan
    
    ,
    in
    Float32
    _softness
    
    ,
    in
    Float32
    _biasFactor
    
    ,
    in
    Float32
    _relaxationFactor
    
    
    )
{   
    
    
    
    
    
    
    
    this.cxx_setLimit(
        _swingSpan1,
        _swingSpan2,
        _twistSpan,
        _softness,
        _biasFactor,
        _relaxationFactor
        );
    
    
    
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraint] EDK[Fabric_EDK_KL_btConeTwistConstraint] LIB[btConeTwistConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConeTwistConstraint.=(
    btConeTwistConstraint that
    ) = "Bullet2__btConeTwistConstraint__MU__simple_ass_op__45eac23599b15ce827638af7bc2032c8";


/// \dfgPresetOmit
/// \internal
btConeTwistConstraint.appendDesc(io String string) {
  string += "btConeTwistConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraintDoubleData] EDK[Fabric_EDK_KL_btConeTwistConstraintDoubleData] LIB[btConeTwistConstraintDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintDoubleData] EDK[Fabric_EDK_KL_btConeTwistConstraintDoubleData] LIB[btConeTwistConstraintDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintDoubleData] EDK[Fabric_EDK_KL_btConeTwistConstraintDoubleData] LIB[btConeTwistConstraintDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConeTwistConstraintDoubleData() = "Bullet2__btConeTwistConstraintDoubleData__MU__empty_ctor__9a996be1ce741389cb0b59e362fa30ad";

/// \dfgPresetOmit
btConeTwistConstraintDoubleData(
    btConeTwistConstraintDoubleData that
    ) = "Bullet2__btConeTwistConstraintDoubleData__MU__copy_ctor__da308b26593feb67847bb296d7a099c3";

btConeTwistConstraintDoubleData.cxx_delete() = "Bullet2__btConeTwistConstraintDoubleData__MU__delete__bcf9e39fe397e5a536ea78852fd55c2e";

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintDoubleData] EDK[Fabric_EDK_KL_btConeTwistConstraintDoubleData] LIB[btConeTwistConstraintDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintDoubleData] EDK[Fabric_EDK_KL_btConeTwistConstraintDoubleData] LIB[btConeTwistConstraintDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintDoubleData] EDK[Fabric_EDK_KL_btConeTwistConstraintDoubleData] LIB[btConeTwistConstraintDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConeTwistConstraintDoubleData.=(
    btConeTwistConstraintDoubleData that
    ) = "Bullet2__btConeTwistConstraintDoubleData__MU__simple_ass_op__37fdb4c8414f6f776d7f4ce26040bd20";


/// \dfgPresetOmit
/// \internal
btConeTwistConstraintDoubleData.appendDesc(io String string) {
  string += "btConeTwistConstraintDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConeTwistConstraintData] EDK[Fabric_EDK_KL_btConeTwistConstraintData] LIB[btConeTwistConstraintData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintData] EDK[Fabric_EDK_KL_btConeTwistConstraintData] LIB[btConeTwistConstraintData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintData] EDK[Fabric_EDK_KL_btConeTwistConstraintData] LIB[btConeTwistConstraintData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btConeTwistConstraintData() = "Bullet2__btConeTwistConstraintData__MU__empty_ctor__db26d18a3ed13be07b3ba9b7cda3fc6f";

/// \dfgPresetOmit
btConeTwistConstraintData(
    btConeTwistConstraintData that
    ) = "Bullet2__btConeTwistConstraintData__MU__copy_ctor__dfb6e5c9c2d4763ee547c5220cb8640a";

btConeTwistConstraintData.cxx_delete() = "Bullet2__btConeTwistConstraintData__MU__delete__2a44cf0653e2f95c8596006d61cddd54";

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintData] EDK[Fabric_EDK_KL_btConeTwistConstraintData] LIB[btConeTwistConstraintData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintData] EDK[Fabric_EDK_KL_btConeTwistConstraintData] LIB[btConeTwistConstraintData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConeTwistConstraintData] EDK[Fabric_EDK_KL_btConeTwistConstraintData] LIB[btConeTwistConstraintData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConeTwistConstraintData.=(
    btConeTwistConstraintData that
    ) = "Bullet2__btConeTwistConstraintData__MU__simple_ass_op__2032becaa4f69b9da2b51a02a9fe050a";


/// \dfgPresetOmit
/// \internal
btConeTwistConstraintData.appendDesc(io String string) {
  string += "btConeTwistConstraintData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btContactConstraint() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btContactConstraint(
    btContactConstraint that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btContactConstraint.cxx_delete() = "Bullet2__btContactConstraint__MU__delete__15f409cadf1a07af589461ae1f16fe93";

//////////////////////////////////////////////////////////////////////////////
// KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btContactConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btContactConstraint__MU__meth_getInfo1__95f0ce944270a84d0d81ada9c7d3c08f";

/// \dfgPresetOmit
/// \internal

btContactConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btContactConstraint__MU__meth_getInfo2__e5da89506ccbdbebe04023995efee79c";

///obsolete methods
/// \dfgPresetOmit
/// \internal

btContactConstraint.cxx_buildJacobian!(
    )
 = "Bullet2__btContactConstraint__MU__meth_buildJacobian__a658cba5d9eb893037aa1c7eb8197b6f";


btContactConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}


btContactConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}

///obsolete methods

btContactConstraint.buildJacobian!(
    )
{   
    
    this.cxx_buildJacobian(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactConstraint] EDK[Fabric_EDK_KL_btContactConstraint] LIB[btContactConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btContactConstraint.=(
    btContactConstraint that
    ) = "Bullet2__btContactConstraint__MU__simple_ass_op__509015eba463acdbf001e6e3c55f37a5";


/// \dfgPresetOmit
/// \internal
btContactConstraint.appendDesc(io String string) {
  string += "btContactConstraint:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoData] EDK[Fabric_EDK_KL_btContactSolverInfoData] LIB[btContactSolverInfoData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoData] EDK[Fabric_EDK_KL_btContactSolverInfoData] LIB[btContactSolverInfoData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_tau()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_tau__79e7207e35a8c77325f102de19230871";

Float32
btContactSolverInfoData.get_m_tau()
{
    Float32 __res = 
    this.cxx_get_m_tau();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_tau!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_tau__7f3894602afb4a69bf6eda29ee58d33b";

btContactSolverInfoData.set_m_tau!(
    Float32 value
   )
{
    
    this.cxx_set_m_tau(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_damping()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_damping__0047d0a2b6b185504418f4f1a969545a";

Float32
btContactSolverInfoData.get_m_damping()
{
    Float32 __res = 
    this.cxx_get_m_damping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_damping!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_damping__247db489cde8772ab0011f3f4a679938";

btContactSolverInfoData.set_m_damping!(
    Float32 value
   )
{
    
    this.cxx_set_m_damping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_friction()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_friction__32d307c5e43a86a416e60ed0a3c4d528";

Float32
btContactSolverInfoData.get_m_friction()
{
    Float32 __res = 
    this.cxx_get_m_friction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_friction!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_friction__9eb3f9f768710b8d566bd9d16f2c102b";

btContactSolverInfoData.set_m_friction!(
    Float32 value
   )
{
    
    this.cxx_set_m_friction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_timeStep()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_timeStep__20e5a310c9e61bfddb5c884d893cdd7a";

Float32
btContactSolverInfoData.get_m_timeStep()
{
    Float32 __res = 
    this.cxx_get_m_timeStep();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_timeStep!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_timeStep__c1234a4697aac361b44ad07643ef24b8";

btContactSolverInfoData.set_m_timeStep!(
    Float32 value
   )
{
    
    this.cxx_set_m_timeStep(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_restitution()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_restitution__49d38cf6fda6b00ddda299baaebc6dc0";

Float32
btContactSolverInfoData.get_m_restitution()
{
    Float32 __res = 
    this.cxx_get_m_restitution();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_restitution!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_restitution__615fdfd7be5339373a842143728313dc";

btContactSolverInfoData.set_m_restitution!(
    Float32 value
   )
{
    
    this.cxx_set_m_restitution(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btContactSolverInfoData.cxx_get_m_numIterations()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_numIterations__127066bb3eae85344ef69fe4eff755ec";

SInt32
btContactSolverInfoData.get_m_numIterations()
{
    SInt32 __res = 
    this.cxx_get_m_numIterations();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_numIterations!(SInt32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_numIterations__291756848245386c595b9977036174dc";

btContactSolverInfoData.set_m_numIterations!(
    SInt32 value
   )
{
    
    this.cxx_set_m_numIterations(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_maxErrorReduction()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_maxErrorReduction__d3f8127a4676b3c8a4ffa0a66a70b484";

Float32
btContactSolverInfoData.get_m_maxErrorReduction()
{
    Float32 __res = 
    this.cxx_get_m_maxErrorReduction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_maxErrorReduction!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_maxErrorReduction__a5c59f6e075720b51b0ba50872b7de72";

btContactSolverInfoData.set_m_maxErrorReduction!(
    Float32 value
   )
{
    
    this.cxx_set_m_maxErrorReduction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_sor()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_sor__94ac13d691ce647df6c457be691fcf36";

Float32
btContactSolverInfoData.get_m_sor()
{
    Float32 __res = 
    this.cxx_get_m_sor();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_sor!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_sor__fad24af44d8ee01a335102c120afcd8b";

btContactSolverInfoData.set_m_sor!(
    Float32 value
   )
{
    
    this.cxx_set_m_sor(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_erp()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_erp__0440a2b13079a4499c75b072edfae7b6";

Float32
btContactSolverInfoData.get_m_erp()
{
    Float32 __res = 
    this.cxx_get_m_erp();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_erp!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_erp__df71ba611dd132bd1ab1e462cd99555b";

btContactSolverInfoData.set_m_erp!(
    Float32 value
   )
{
    
    this.cxx_set_m_erp(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_erp2()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_erp2__6a892888465a0171a31c88cd5f8f0e75";

Float32
btContactSolverInfoData.get_m_erp2()
{
    Float32 __res = 
    this.cxx_get_m_erp2();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_erp2!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_erp2__a0c7de800e9bbc69fe6961e3798d8fd4";

btContactSolverInfoData.set_m_erp2!(
    Float32 value
   )
{
    
    this.cxx_set_m_erp2(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_globalCfm()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_globalCfm__8f3070b217e4beeba2d0332693bde3f7";

Float32
btContactSolverInfoData.get_m_globalCfm()
{
    Float32 __res = 
    this.cxx_get_m_globalCfm();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_globalCfm!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_globalCfm__98aad0b78703ebddc64bb807cde28442";

btContactSolverInfoData.set_m_globalCfm!(
    Float32 value
   )
{
    
    this.cxx_set_m_globalCfm(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btContactSolverInfoData.cxx_get_m_splitImpulse()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_splitImpulse__31be5f008464c1cccf8c33d6121b31dd";

SInt32
btContactSolverInfoData.get_m_splitImpulse()
{
    SInt32 __res = 
    this.cxx_get_m_splitImpulse();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_splitImpulse!(SInt32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_splitImpulse__6bbe5c2f459595a7b7df39e0e8889010";

btContactSolverInfoData.set_m_splitImpulse!(
    SInt32 value
   )
{
    
    this.cxx_set_m_splitImpulse(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_splitImpulsePenetrationThreshold()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_splitImpulsePenetrationThreshold__7236e89c51c5c749561996dc3563266d";

Float32
btContactSolverInfoData.get_m_splitImpulsePenetrationThreshold()
{
    Float32 __res = 
    this.cxx_get_m_splitImpulsePenetrationThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_splitImpulsePenetrationThreshold!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_splitImpulsePenetrationThreshold__ba7a82d533d2b8257c0078e913c4bdf8";

btContactSolverInfoData.set_m_splitImpulsePenetrationThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_splitImpulsePenetrationThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_splitImpulseTurnErp()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_splitImpulseTurnErp__909765ad5c6269f25355d4835bd94934";

Float32
btContactSolverInfoData.get_m_splitImpulseTurnErp()
{
    Float32 __res = 
    this.cxx_get_m_splitImpulseTurnErp();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_splitImpulseTurnErp!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_splitImpulseTurnErp__beebbeedd6a50c33ccdf1fedba0d6ada";

btContactSolverInfoData.set_m_splitImpulseTurnErp!(
    Float32 value
   )
{
    
    this.cxx_set_m_splitImpulseTurnErp(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_linearSlop()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_linearSlop__be2547cc8eef6c0aa025c65b3390ec09";

Float32
btContactSolverInfoData.get_m_linearSlop()
{
    Float32 __res = 
    this.cxx_get_m_linearSlop();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_linearSlop!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_linearSlop__d1eaa495e4126ff60342a398f3b96ad0";

btContactSolverInfoData.set_m_linearSlop!(
    Float32 value
   )
{
    
    this.cxx_set_m_linearSlop(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_warmstartingFactor()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_warmstartingFactor__d4b7c619b93f7325c7c6bbe20ee9eb90";

Float32
btContactSolverInfoData.get_m_warmstartingFactor()
{
    Float32 __res = 
    this.cxx_get_m_warmstartingFactor();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_warmstartingFactor!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_warmstartingFactor__8401ba0ec6326dca2e7d1ab29be3988b";

btContactSolverInfoData.set_m_warmstartingFactor!(
    Float32 value
   )
{
    
    this.cxx_set_m_warmstartingFactor(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btContactSolverInfoData.cxx_get_m_solverMode()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_solverMode__4a98102b655a96e0a3e036faf52088a4";

SInt32
btContactSolverInfoData.get_m_solverMode()
{
    SInt32 __res = 
    this.cxx_get_m_solverMode();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_solverMode!(SInt32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_solverMode__63dde59a9b3732baced2d22680115949";

btContactSolverInfoData.set_m_solverMode!(
    SInt32 value
   )
{
    
    this.cxx_set_m_solverMode(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btContactSolverInfoData.cxx_get_m_restingContactRestitutionThreshold()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_restingContactRestitutionThreshold__4bb177b9f47138644007b908d697fe8e";

SInt32
btContactSolverInfoData.get_m_restingContactRestitutionThreshold()
{
    SInt32 __res = 
    this.cxx_get_m_restingContactRestitutionThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_restingContactRestitutionThreshold!(SInt32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_restingContactRestitutionThreshold__89bd70a708964cbc651a8edd7bbfa4b9";

btContactSolverInfoData.set_m_restingContactRestitutionThreshold!(
    SInt32 value
   )
{
    
    this.cxx_set_m_restingContactRestitutionThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btContactSolverInfoData.cxx_get_m_minimumSolverBatchSize()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_minimumSolverBatchSize__12ef21dc4ddb0f63856d7751ce8b8569";

SInt32
btContactSolverInfoData.get_m_minimumSolverBatchSize()
{
    SInt32 __res = 
    this.cxx_get_m_minimumSolverBatchSize();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_minimumSolverBatchSize!(SInt32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_minimumSolverBatchSize__a5a9989f2267177214f9d1e1c482ffd6";

btContactSolverInfoData.set_m_minimumSolverBatchSize!(
    SInt32 value
   )
{
    
    this.cxx_set_m_minimumSolverBatchSize(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_maxGyroscopicForce()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_maxGyroscopicForce__3eec4dea063eeddaa934d28e7e513c14";

Float32
btContactSolverInfoData.get_m_maxGyroscopicForce()
{
    Float32 __res = 
    this.cxx_get_m_maxGyroscopicForce();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_maxGyroscopicForce!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_maxGyroscopicForce__5f67e5ab98c7da0a99d4b562ea382201";

btContactSolverInfoData.set_m_maxGyroscopicForce!(
    Float32 value
   )
{
    
    this.cxx_set_m_maxGyroscopicForce(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_singleAxisRollingFrictionThreshold()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_singleAxisRollingFrictionThreshold__f1d0d99c9d9f81c38602fab3323c08f2";

Float32
btContactSolverInfoData.get_m_singleAxisRollingFrictionThreshold()
{
    Float32 __res = 
    this.cxx_get_m_singleAxisRollingFrictionThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_singleAxisRollingFrictionThreshold!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_singleAxisRollingFrictionThreshold__a58d7a2e50280deea6dca2f6d6d3351c";

btContactSolverInfoData.set_m_singleAxisRollingFrictionThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_singleAxisRollingFrictionThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btContactSolverInfoData.cxx_get_m_leastSquaresResidualThreshold()
  = "Bullet2__btContactSolverInfoData__CO__getter_m_leastSquaresResidualThreshold__b0efb69b6d9c6ba403c45b36f22237e7";

Float32
btContactSolverInfoData.get_m_leastSquaresResidualThreshold()
{
    Float32 __res = 
    this.cxx_get_m_leastSquaresResidualThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.cxx_set_m_leastSquaresResidualThreshold!(Float32 value)
  = "Bullet2__btContactSolverInfoData__MU__setter_m_leastSquaresResidualThreshold__6f1980954b7a0ccafeb17e5e84e546f0";

btContactSolverInfoData.set_m_leastSquaresResidualThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_leastSquaresResidualThreshold(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoData] EDK[Fabric_EDK_KL_btContactSolverInfoData] LIB[btContactSolverInfoData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btContactSolverInfoData() = "Bullet2__btContactSolverInfoData__MU__empty_ctor__20cf418750673442f7c0c89e2211840a";

/// \dfgPresetOmit
btContactSolverInfoData(
    btContactSolverInfoData that
    ) = "Bullet2__btContactSolverInfoData__MU__copy_ctor__bed21bd7c0d86939b64c9043fc969e8b";

btContactSolverInfoData.cxx_delete() = "Bullet2__btContactSolverInfoData__MU__delete__b41a1c9909ed0c21af72f261292390d1";

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoData] EDK[Fabric_EDK_KL_btContactSolverInfoData] LIB[btContactSolverInfoData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoData] EDK[Fabric_EDK_KL_btContactSolverInfoData] LIB[btContactSolverInfoData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoData] EDK[Fabric_EDK_KL_btContactSolverInfoData] LIB[btContactSolverInfoData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btContactSolverInfoData.=(
    btContactSolverInfoData that
    ) = "Bullet2__btContactSolverInfoData__MU__simple_ass_op__92c1534d2f1821678bb9f9df8e6466d8";


/// \dfgPresetOmit
/// \internal
btContactSolverInfoData.appendDesc(io String string) {
  string += "btContactSolverInfoData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfo] EDK[Fabric_EDK_KL_btContactSolverInfo] LIB[btContactSolverInfo *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfo] EDK[Fabric_EDK_KL_btContactSolverInfo] LIB[btContactSolverInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfo] EDK[Fabric_EDK_KL_btContactSolverInfo] LIB[btContactSolverInfo *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btContactSolverInfo(
    btContactSolverInfo that
    ) = "Bullet2__btContactSolverInfo__MU__copy_ctor__34fce2bcf2572705d2ed615cd0d6f36a";

/// \dfgPresetOmit
/// \internal
btContactSolverInfo.__ctor(
    ) = "Bullet2__btContactSolverInfo__MU__ctor__ec29f5f967818b981511e77b0d456919";

/// \dfgPresetOmit
btContactSolverInfo(
    ) {
    this.__ctor(
        );
}

btContactSolverInfo.cxx_delete() = "Bullet2__btContactSolverInfo__MU__delete__05306b5ce39f80f8a201b399e6119b75";

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfo] EDK[Fabric_EDK_KL_btContactSolverInfo] LIB[btContactSolverInfo *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfo] EDK[Fabric_EDK_KL_btContactSolverInfo] LIB[btContactSolverInfo *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfo] EDK[Fabric_EDK_KL_btContactSolverInfo] LIB[btContactSolverInfo *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btContactSolverInfo.=(
    btContactSolverInfo that
    ) = "Bullet2__btContactSolverInfo__MU__simple_ass_op__99c01248e763c144adbc6711e79bdce1";


/// \dfgPresetOmit
/// \internal
btContactSolverInfo.appendDesc(io String string) {
  string += "btContactSolverInfo:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoDoubleData] EDK[Fabric_EDK_KL_btContactSolverInfoDoubleData] LIB[btContactSolverInfoDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoDoubleData] EDK[Fabric_EDK_KL_btContactSolverInfoDoubleData] LIB[btContactSolverInfoDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoDoubleData] EDK[Fabric_EDK_KL_btContactSolverInfoDoubleData] LIB[btContactSolverInfoDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btContactSolverInfoDoubleData() = "Bullet2__btContactSolverInfoDoubleData__MU__empty_ctor__145598f5ac5679425331aecb43a797c8";

/// \dfgPresetOmit
btContactSolverInfoDoubleData(
    btContactSolverInfoDoubleData that
    ) = "Bullet2__btContactSolverInfoDoubleData__MU__copy_ctor__1724ee020965ce4852ad3789e50cdb64";

btContactSolverInfoDoubleData.cxx_delete() = "Bullet2__btContactSolverInfoDoubleData__MU__delete__34ed15e011938514160a11fe7c414e93";

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoDoubleData] EDK[Fabric_EDK_KL_btContactSolverInfoDoubleData] LIB[btContactSolverInfoDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoDoubleData] EDK[Fabric_EDK_KL_btContactSolverInfoDoubleData] LIB[btContactSolverInfoDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoDoubleData] EDK[Fabric_EDK_KL_btContactSolverInfoDoubleData] LIB[btContactSolverInfoDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btContactSolverInfoDoubleData.=(
    btContactSolverInfoDoubleData that
    ) = "Bullet2__btContactSolverInfoDoubleData__MU__simple_ass_op__7e8128e634b5ac79907f4fe4e6e2f927";


/// \dfgPresetOmit
/// \internal
btContactSolverInfoDoubleData.appendDesc(io String string) {
  string += "btContactSolverInfoDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btContactSolverInfoFloatData] EDK[Fabric_EDK_KL_btContactSolverInfoFloatData] LIB[btContactSolverInfoFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoFloatData] EDK[Fabric_EDK_KL_btContactSolverInfoFloatData] LIB[btContactSolverInfoFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoFloatData] EDK[Fabric_EDK_KL_btContactSolverInfoFloatData] LIB[btContactSolverInfoFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btContactSolverInfoFloatData() = "Bullet2__btContactSolverInfoFloatData__MU__empty_ctor__147677642477722b9ed0d41d4103b091";

/// \dfgPresetOmit
btContactSolverInfoFloatData(
    btContactSolverInfoFloatData that
    ) = "Bullet2__btContactSolverInfoFloatData__MU__copy_ctor__68c2bb399aea34401ac08fd037f9bfe7";

btContactSolverInfoFloatData.cxx_delete() = "Bullet2__btContactSolverInfoFloatData__MU__delete__bc8658ae93f098820dc1cd7b6401264d";

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoFloatData] EDK[Fabric_EDK_KL_btContactSolverInfoFloatData] LIB[btContactSolverInfoFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoFloatData] EDK[Fabric_EDK_KL_btContactSolverInfoFloatData] LIB[btContactSolverInfoFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btContactSolverInfoFloatData] EDK[Fabric_EDK_KL_btContactSolverInfoFloatData] LIB[btContactSolverInfoFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btContactSolverInfoFloatData.=(
    btContactSolverInfoFloatData that
    ) = "Bullet2__btContactSolverInfoFloatData__MU__simple_ass_op__f9eee7674e5cb42d3147ce37553f59aa";


/// \dfgPresetOmit
/// \internal
btContactSolverInfoFloatData.appendDesc(io String string) {
  string += "btContactSolverInfoFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGearConstraint() = "Bullet2__btGearConstraint__MU__empty_ctor__c7055ee155cf2acb99204d1285f906c0";

/// \dfgPresetOmit
btGearConstraint(
    btGearConstraint that
    ) = "Bullet2__btGearConstraint__MU__copy_ctor__a31e94748ccc7ed35f98a5791829ec5e";

/// \dfgPresetOmit
/// \internal
btGearConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB
    ) = "Bullet2__btGearConstraint__MU__ctor__cf825f93740c6194966a434e22331d60";

/// \dfgPresetOmit
btGearConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB
    ) {
    this.__ctor(
        rbA,
        rbB,
        axisInA,
        axisInB
        );
}

/// \dfgPresetOmit
/// \internal
btGearConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB,
    Float32 ratio
    ) = "Bullet2__btGearConstraint__MU__ctor__fc38be6b6ef5f5cd17bdb8f4cb81b2ac";

/// \dfgPresetOmit
btGearConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB,
    Float32 ratio
    ) {
    this.__ctor(
        rbA,
        rbB,
        axisInA,
        axisInB,
        ratio
        );
}

btGearConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btVector3
    axisInA
    
    ,
    in
    btVector3
    axisInB
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    CxxbtVector3ConstRef axisInB__cxx = Make_CxxbtVector3ConstRef(axisInB);
    this.__ctor(
        rbA,
        rbB,
        axisInA__cxx,
        axisInB__cxx
        );
    
    
    
    
}

btGearConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btVector3
    axisInA
    
    ,
    in
    btVector3
    axisInB
    
    ,
    in
    Float32
    ratio
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    CxxbtVector3ConstRef axisInB__cxx = Make_CxxbtVector3ConstRef(axisInB);
    
    this.__ctor(
        rbA,
        rbB,
        axisInA__cxx,
        axisInB__cxx,
        ratio
        );
    
    
    
    
    
}

btGearConstraint.cxx_delete() = "Bullet2__btGearConstraint__MU__delete__843f355dc0ab996ca7a140faaa03e009";

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///internal method used by the constraint solver, don't use them directly
/// \dfgPresetOmit
/// \internal

btGearConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btGearConstraint__MU__meth_getInfo1__c5dcc13112bf8e542ecfb51bdf1da3ad";

///internal method used by the constraint solver, don't use them directly
/// \dfgPresetOmit
/// \internal

btGearConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btGearConstraint__MU__meth_getInfo2__8cfe20f4d22a97107d730f489c2f33fb";

/// \dfgPresetOmit
/// \internal

btGearConstraint.cxx_setAxisA!(
    CxxbtVector3Ref axisA
    )
 = "Bullet2__btGearConstraint__MU__meth_setAxisA__58347424cea50399d82f243d1ef4651e";

/// \dfgPresetOmit
/// \internal

btGearConstraint.cxx_setAxisB!(
    CxxbtVector3Ref axisB
    )
 = "Bullet2__btGearConstraint__MU__meth_setAxisB__b54c64681aa52639d17931f6f12dd616";

/// \dfgPresetOmit
/// \internal

btGearConstraint.cxx_setRatio!(
    Float32 ratio
    )
 = "Bullet2__btGearConstraint__MU__meth_setRatio__c9adabf4e3c745472248e33a0a95cae8";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btGearConstraint.cxx_getAxisA?(
    )
 = "Bullet2__btGearConstraint__CO__meth_getAxisA__2fb330ca71044edd9379d5dcbf8a152a";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btGearConstraint.cxx_getAxisB?(
    )
 = "Bullet2__btGearConstraint__CO__meth_getAxisB__254ecd603224de985faa0f799fb61337";

/// \dfgPresetOmit
/// \internal
Float32
btGearConstraint.cxx_getRatio?(
    )
 = "Bullet2__btGearConstraint__CO__meth_getRatio__bd6badfe6e4c40a114308982c57a0570";

/// \dfgPresetOmit
/// \internal

btGearConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value
    )
 = "Bullet2__btGearConstraint__MU__meth_setParam__f1c78ad71e062d1a840d9604dd557e5f";

/// \dfgPresetOmit
/// \internal

btGearConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value,
    SInt32 axis
    )
 = "Bullet2__btGearConstraint__MU__meth_setParam__9e58b707b69bdc09edce4ee275da67e9";

///return the local value of parameter
/// \dfgPresetOmit
/// \internal
Float32
btGearConstraint.cxx_getParam?(
    SInt32 num
    )
 = "Bullet2__btGearConstraint__CO__meth_getParam__5e3ef6b6794bf40ef193f69380c29f29";

/// \dfgPresetOmit
/// \internal
Float32
btGearConstraint.cxx_getParam?(
    SInt32 num,
    SInt32 axis
    )
 = "Bullet2__btGearConstraint__CO__meth_getParam__6ce5d350a1b1dd996c3ffe945054f951";

/// \dfgPresetOmit
/// \internal
SInt32
btGearConstraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btGearConstraint__CO__meth_calculateSerializeBufferSize__75ee8a79dc96e0d051e9bd2188726b64";


btGearConstraint.setRatio!(
    in
    Float32
    ratio
    
    
    )
{   
    
    
    this.cxx_setRatio(
        ratio
        );
    
    
    
}


btGearConstraint.setAxisB!(
    io
    btVector3
    axisB
    
    
    )
{   
    
    CxxbtVector3Ref axisB__cxx = Make_CxxbtVector3Ref(axisB);
    
    this.cxx_setAxisB(
        axisB__cxx
        );
    
    
    
}

Float32
btGearConstraint.getParam?(
    in
    SInt32
    num
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_getParam(
        num,
        axis
        );
    
    
    
    return __res;
}

btVector3
btGearConstraint.getAxisA?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAxisA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

///internal method used by the constraint solver, don't use them directly

btGearConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}

SInt32
btGearConstraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

btVector3
btGearConstraint.getAxisB?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAxisB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

///internal method used by the constraint solver, don't use them directly

btGearConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}


btGearConstraint.setAxisA!(
    io
    btVector3
    axisA
    
    
    )
{   
    
    CxxbtVector3Ref axisA__cxx = Make_CxxbtVector3Ref(axisA);
    
    this.cxx_setAxisA(
        axisA__cxx
        );
    
    
    
}


btGearConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    
    )
{   
    
    
    
    this.cxx_setParam(
        num,
        value
        );
    
    
    
    
}

///return the local value of parameter
Float32
btGearConstraint.getParam?(
    in
    SInt32
    num
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getParam(
        num
        );
    
    
    return __res;
}


btGearConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    
    
    this.cxx_setParam(
        num,
        value,
        axis
        );
    
    
    
    
    
}

Float32
btGearConstraint.getRatio?(
    )
{   
    Float32 __res = 
    this.cxx_getRatio(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraint] EDK[Fabric_EDK_KL_btGearConstraint] LIB[btGearConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGearConstraint.=(
    btGearConstraint that
    ) = "Bullet2__btGearConstraint__MU__simple_ass_op__60e8793dbca57512569b90c028e04f87";


/// \dfgPresetOmit
/// \internal
btGearConstraint.appendDesc(io String string) {
  string += "btGearConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraintFloatData] EDK[Fabric_EDK_KL_btGearConstraintFloatData] LIB[btGearConstraintFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintFloatData] EDK[Fabric_EDK_KL_btGearConstraintFloatData] LIB[btGearConstraintFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintFloatData] EDK[Fabric_EDK_KL_btGearConstraintFloatData] LIB[btGearConstraintFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGearConstraintFloatData() = "Bullet2__btGearConstraintFloatData__MU__empty_ctor__d206f2d44e1185fb6d8cfb23f8fb7709";

/// \dfgPresetOmit
btGearConstraintFloatData(
    btGearConstraintFloatData that
    ) = "Bullet2__btGearConstraintFloatData__MU__copy_ctor__2b6483cb49342f15db60f41b90ee51ed";

btGearConstraintFloatData.cxx_delete() = "Bullet2__btGearConstraintFloatData__MU__delete__95a1b7c8cd7cbcec6274171a5967be7b";

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintFloatData] EDK[Fabric_EDK_KL_btGearConstraintFloatData] LIB[btGearConstraintFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintFloatData] EDK[Fabric_EDK_KL_btGearConstraintFloatData] LIB[btGearConstraintFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintFloatData] EDK[Fabric_EDK_KL_btGearConstraintFloatData] LIB[btGearConstraintFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGearConstraintFloatData.=(
    btGearConstraintFloatData that
    ) = "Bullet2__btGearConstraintFloatData__MU__simple_ass_op__9b7f3a67a0accb84ca10de7094d40c26";


/// \dfgPresetOmit
/// \internal
btGearConstraintFloatData.appendDesc(io String string) {
  string += "btGearConstraintFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btGearConstraintDoubleData] EDK[Fabric_EDK_KL_btGearConstraintDoubleData] LIB[btGearConstraintDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintDoubleData] EDK[Fabric_EDK_KL_btGearConstraintDoubleData] LIB[btGearConstraintDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintDoubleData] EDK[Fabric_EDK_KL_btGearConstraintDoubleData] LIB[btGearConstraintDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btGearConstraintDoubleData() = "Bullet2__btGearConstraintDoubleData__MU__empty_ctor__b6706aad598c65ea31d67f3fa00315d1";

/// \dfgPresetOmit
btGearConstraintDoubleData(
    btGearConstraintDoubleData that
    ) = "Bullet2__btGearConstraintDoubleData__MU__copy_ctor__f467d1a2a19017f55c1ded8f641d7acb";

btGearConstraintDoubleData.cxx_delete() = "Bullet2__btGearConstraintDoubleData__MU__delete__74f23fae7871b7f9ff4bff26e2c71b03";

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintDoubleData] EDK[Fabric_EDK_KL_btGearConstraintDoubleData] LIB[btGearConstraintDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintDoubleData] EDK[Fabric_EDK_KL_btGearConstraintDoubleData] LIB[btGearConstraintDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btGearConstraintDoubleData] EDK[Fabric_EDK_KL_btGearConstraintDoubleData] LIB[btGearConstraintDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btGearConstraintDoubleData.=(
    btGearConstraintDoubleData that
    ) = "Bullet2__btGearConstraintDoubleData__MU__simple_ass_op__cf471d3b84d6af32c29688d166f8d84d";


/// \dfgPresetOmit
/// \internal
btGearConstraintDoubleData.appendDesc(io String string) {
  string += "btGearConstraintDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btFixedConstraint] EDK[Fabric_EDK_KL_btFixedConstraint] LIB[btFixedConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btFixedConstraint] EDK[Fabric_EDK_KL_btFixedConstraint] LIB[btFixedConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btFixedConstraint] EDK[Fabric_EDK_KL_btFixedConstraint] LIB[btFixedConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btFixedConstraint() = "Bullet2__btFixedConstraint__MU__empty_ctor__a68000e72b137fa549e3d2c819c2b2b7";

/// \dfgPresetOmit
btFixedConstraint(
    btFixedConstraint that
    ) = "Bullet2__btFixedConstraint__MU__copy_ctor__d06fdaf682ec817db7d6e7f6e522fa79";

/// \dfgPresetOmit
/// \internal
btFixedConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB
    ) = "Bullet2__btFixedConstraint__MU__ctor__802e90075b16ca2efe023b34a2ec206b";

/// \dfgPresetOmit
btFixedConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB
    ) {
    this.__ctor(
        rbA,
        rbB,
        frameInA,
        frameInB
        );
}

btFixedConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInA
    
    ,
    in
    btTransform
    frameInB
    
    
    ) {
    
    
    
    CxxbtTransformConstRef frameInA__cxx = Make_CxxbtTransformConstRef(frameInA);
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    this.__ctor(
        rbA,
        rbB,
        frameInA__cxx,
        frameInB__cxx
        );
    
    
    
    
}

btFixedConstraint.cxx_delete() = "Bullet2__btFixedConstraint__MU__delete__627f788f4c34ce8aafde3b5236160488";

//////////////////////////////////////////////////////////////////////////////
// KL[btFixedConstraint] EDK[Fabric_EDK_KL_btFixedConstraint] LIB[btFixedConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btFixedConstraint] EDK[Fabric_EDK_KL_btFixedConstraint] LIB[btFixedConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btFixedConstraint] EDK[Fabric_EDK_KL_btFixedConstraint] LIB[btFixedConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btFixedConstraint.=(
    btFixedConstraint that
    ) = "Bullet2__btFixedConstraint__MU__simple_ass_op__56e4882974881d03d8e46e38d34727a4";


/// \dfgPresetOmit
/// \internal
btFixedConstraint.appendDesc(io String string) {
  string += "btFixedConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btHinge2Constraint() = "Bullet2__btHinge2Constraint__MU__empty_ctor__90ec851b081581e6c004fb3210907012";

/// \dfgPresetOmit
btHinge2Constraint(
    btHinge2Constraint that
    ) = "Bullet2__btHinge2Constraint__MU__copy_ctor__4a02c4a7740664e9d1f15f85884ed668";

/// \dfgPresetOmit
/// \internal
btHinge2Constraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3Ref anchor,
    CxxbtVector3Ref axis1,
    CxxbtVector3Ref axis2
    ) = "Bullet2__btHinge2Constraint__MU__ctor__42a1e939b3700eae3cea06f32616c171";

/// \dfgPresetOmit
btHinge2Constraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3Ref anchor,
    CxxbtVector3Ref axis1,
    CxxbtVector3Ref axis2
    ) {
    this.__ctor(
        rbA,
        rbB,
        anchor,
        axis1,
        axis2
        );
}

btHinge2Constraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    io
    btVector3
    anchor
    
    ,
    io
    btVector3
    axis1
    
    ,
    io
    btVector3
    axis2
    
    
    ) {
    
    
    
    CxxbtVector3Ref anchor__cxx = Make_CxxbtVector3Ref(anchor);
    
    CxxbtVector3Ref axis1__cxx = Make_CxxbtVector3Ref(axis1);
    
    CxxbtVector3Ref axis2__cxx = Make_CxxbtVector3Ref(axis2);
    this.__ctor(
        rbA,
        rbB,
        anchor__cxx,
        axis1__cxx,
        axis2__cxx
        );
    
    
    
    
    
}

btHinge2Constraint.cxx_delete() = "Bullet2__btHinge2Constraint__MU__delete__f121d80b8389dda88650d27ee45152f7";

//////////////////////////////////////////////////////////////////////////////
// KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btHinge2Constraint.cxx_getAnchor!(
    )
 = "Bullet2__btHinge2Constraint__MU__meth_getAnchor__058e1982a5fae5645ceb4835fa61b61d";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btHinge2Constraint.cxx_getAnchor2!(
    )
 = "Bullet2__btHinge2Constraint__MU__meth_getAnchor2__b943f2cf7af47f43beaa1d880e3a21cb";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btHinge2Constraint.cxx_getAxis1!(
    )
 = "Bullet2__btHinge2Constraint__MU__meth_getAxis1__51c8d67a4a82c0453358ddb029b2e377";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btHinge2Constraint.cxx_getAxis2!(
    )
 = "Bullet2__btHinge2Constraint__MU__meth_getAxis2__690de7456ce1eb9d4f13377c6e215462";

/// \dfgPresetOmit
/// \internal
Float32
btHinge2Constraint.cxx_getAngle1!(
    )
 = "Bullet2__btHinge2Constraint__MU__meth_getAngle1__1d6888cec96613e5c38ddfd50fbfc260";

/// \dfgPresetOmit
/// \internal
Float32
btHinge2Constraint.cxx_getAngle2!(
    )
 = "Bullet2__btHinge2Constraint__MU__meth_getAngle2__efce20129f5b848e269e728011e8608a";

/// \dfgPresetOmit
/// \internal

btHinge2Constraint.cxx_setUpperLimit!(
    Float32 ang1max
    )
 = "Bullet2__btHinge2Constraint__MU__meth_setUpperLimit__96784a7d3f09769a56abe0794cb7f394";

/// \dfgPresetOmit
/// \internal

btHinge2Constraint.cxx_setLowerLimit!(
    Float32 ang1min
    )
 = "Bullet2__btHinge2Constraint__MU__meth_setLowerLimit__3de83b6d918a6da7f7512496f1f32823";


btHinge2Constraint.setLowerLimit!(
    in
    Float32
    ang1min
    
    
    )
{   
    
    
    this.cxx_setLowerLimit(
        ang1min
        );
    
    
    
}

Float32
btHinge2Constraint.getAngle2!(
    )
{   
    Float32 __res = 
    this.cxx_getAngle2(
        );
    
    return __res;
}

btVector3
btHinge2Constraint.getAnchor2!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnchor2(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btHinge2Constraint.setUpperLimit!(
    in
    Float32
    ang1max
    
    
    )
{   
    
    
    this.cxx_setUpperLimit(
        ang1max
        );
    
    
    
}

btVector3
btHinge2Constraint.getAxis1!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAxis1(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btHinge2Constraint.getAnchor!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnchor(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btHinge2Constraint.getAngle1!(
    )
{   
    Float32 __res = 
    this.cxx_getAngle1(
        );
    
    return __res;
}

btVector3
btHinge2Constraint.getAxis2!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAxis2(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHinge2Constraint] EDK[Fabric_EDK_KL_btHinge2Constraint] LIB[btHinge2Constraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btHinge2Constraint.=(
    btHinge2Constraint that
    ) = "Bullet2__btHinge2Constraint__MU__simple_ass_op__f8c85f61f01ac32a1439653cb3d9aad5";


/// \dfgPresetOmit
/// \internal
btHinge2Constraint.appendDesc(io String string) {
  string += "btHinge2Constraint:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btHingeConstraint() = "Bullet2__btHingeConstraint__MU__empty_ctor__70fef207cdb3a62e2bd1a874a4235b55";

/// \dfgPresetOmit
btHingeConstraint(
    btHingeConstraint that
    ) = "Bullet2__btHingeConstraint__MU__copy_ctor__ae57976fbd361d6cd70a410de4aa65b4";

/// \dfgPresetOmit
/// \internal
btHingeConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB
    ) = "Bullet2__btHingeConstraint__MU__ctor__534b68618e89e6375e7576ab64086a68";

/// \dfgPresetOmit
btHingeConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB
    ) {
    this.__ctor(
        rbA,
        rbB,
        pivotInA,
        pivotInB,
        axisInA,
        axisInB
        );
}

/// \dfgPresetOmit
/// \internal
btHingeConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB,
    Boolean useReferenceFrameA
    ) = "Bullet2__btHingeConstraint__MU__ctor__bb7b6a9521c4f2cc8e2b93653c4ad8ee";

/// \dfgPresetOmit
btHingeConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB,
    Boolean useReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbB,
        pivotInA,
        pivotInB,
        axisInA,
        axisInB,
        useReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btHingeConstraint.__ctor(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef axisInA
    ) = "Bullet2__btHingeConstraint__MU__ctor__c3d601ae346b6c1c78a63e7400ad8a12";

/// \dfgPresetOmit
btHingeConstraint(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef axisInA
    ) {
    this.__ctor(
        rbA,
        pivotInA,
        axisInA
        );
}

/// \dfgPresetOmit
/// \internal
btHingeConstraint.__ctor(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef axisInA,
    Boolean useReferenceFrameA
    ) = "Bullet2__btHingeConstraint__MU__ctor__84d5487956eadb7b057538219c15df12";

/// \dfgPresetOmit
btHingeConstraint(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef axisInA,
    Boolean useReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        pivotInA,
        axisInA,
        useReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btHingeConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame
    ) = "Bullet2__btHingeConstraint__MU__ctor__03b05474f51801bcf91ad5326ea5bbe5";

/// \dfgPresetOmit
btHingeConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame
    ) {
    this.__ctor(
        rbA,
        rbB,
        rbAFrame,
        rbBFrame
        );
}

/// \dfgPresetOmit
/// \internal
btHingeConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame,
    Boolean useReferenceFrameA
    ) = "Bullet2__btHingeConstraint__MU__ctor__5c37c30d08695aae687a15b66988e0ae";

/// \dfgPresetOmit
btHingeConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame,
    Boolean useReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbB,
        rbAFrame,
        rbBFrame,
        useReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btHingeConstraint.__ctor(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame
    ) = "Bullet2__btHingeConstraint__MU__ctor__f75e23a498e077c4441ee0df72512775";

/// \dfgPresetOmit
btHingeConstraint(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame
    ) {
    this.__ctor(
        rbA,
        rbAFrame
        );
}

/// \dfgPresetOmit
/// \internal
btHingeConstraint.__ctor(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame,
    Boolean useReferenceFrameA
    ) = "Bullet2__btHingeConstraint__MU__ctor__aa0f814403bf6556362ce73935f9af82";

/// \dfgPresetOmit
btHingeConstraint(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame,
    Boolean useReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbAFrame,
        useReferenceFrameA
        );
}

btHingeConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    ,
    in
    btVector3
    axisInA
    
    ,
    in
    btVector3
    axisInB
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    CxxbtVector3ConstRef axisInB__cxx = Make_CxxbtVector3ConstRef(axisInB);
    this.__ctor(
        rbA,
        rbB,
        pivotInA__cxx,
        pivotInB__cxx,
        axisInA__cxx,
        axisInB__cxx
        );
    
    
    
    
    
    
}

btHingeConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    axisInA
    
    
    ) {
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    this.__ctor(
        rbA,
        pivotInA__cxx,
        axisInA__cxx
        );
    
    
    
}

btHingeConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btTransform
    rbAFrame
    
    ,
    in
    Boolean
    useReferenceFrameA
    
    
    ) {
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    
    this.__ctor(
        rbA,
        rbAFrame__cxx,
        useReferenceFrameA
        );
    
    
    
}

btHingeConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btTransform
    rbAFrame
    
    
    ) {
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    this.__ctor(
        rbA,
        rbAFrame__cxx
        );
    
    
}

btHingeConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    axisInA
    
    ,
    in
    Boolean
    useReferenceFrameA
    
    
    ) {
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    this.__ctor(
        rbA,
        pivotInA__cxx,
        axisInA__cxx,
        useReferenceFrameA
        );
    
    
    
    
}

btHingeConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    rbAFrame
    
    ,
    in
    btTransform
    rbBFrame
    
    ,
    in
    Boolean
    useReferenceFrameA
    
    
    ) {
    
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    
    CxxbtTransformConstRef rbBFrame__cxx = Make_CxxbtTransformConstRef(rbBFrame);
    
    this.__ctor(
        rbA,
        rbB,
        rbAFrame__cxx,
        rbBFrame__cxx,
        useReferenceFrameA
        );
    
    
    
    
    
}

btHingeConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    rbAFrame
    
    ,
    in
    btTransform
    rbBFrame
    
    
    ) {
    
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    
    CxxbtTransformConstRef rbBFrame__cxx = Make_CxxbtTransformConstRef(rbBFrame);
    this.__ctor(
        rbA,
        rbB,
        rbAFrame__cxx,
        rbBFrame__cxx
        );
    
    
    
    
}

btHingeConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    ,
    in
    btVector3
    axisInA
    
    ,
    in
    btVector3
    axisInB
    
    ,
    in
    Boolean
    useReferenceFrameA
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    CxxbtVector3ConstRef axisInB__cxx = Make_CxxbtVector3ConstRef(axisInB);
    
    this.__ctor(
        rbA,
        rbB,
        pivotInA__cxx,
        pivotInB__cxx,
        axisInA__cxx,
        axisInB__cxx,
        useReferenceFrameA
        );
    
    
    
    
    
    
    
}

btHingeConstraint.cxx_delete() = "Bullet2__btHingeConstraint__MU__delete__2b412c8de87a270dafb489351f005d37";

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_buildJacobian!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_buildJacobian__b7c0189bd8dea5e802ec3cdc2166b374";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btHingeConstraint__MU__meth_getInfo1__0033f4dbb6f92ddfefddcd318fb48316";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_getInfo1NonVirtual!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btHingeConstraint__MU__meth_getInfo1NonVirtual__e8b82ba819e3e87c45abb30fe1f53559";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btHingeConstraint__MU__meth_getInfo2__a76555bac11d8517d5067c468df3d0a5";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_getInfo2NonVirtual!(
    btTypedConstraint_btConstraintInfo2 info,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtVector3ConstRef angVelA,
    CxxbtVector3ConstRef angVelB
    )
 = "Bullet2__btHingeConstraint__MU__meth_getInfo2NonVirtual__55e819787f037d028a9e93339c193c79";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_getInfo2Internal!(
    btTypedConstraint_btConstraintInfo2 info,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtVector3ConstRef angVelA,
    CxxbtVector3ConstRef angVelB
    )
 = "Bullet2__btHingeConstraint__MU__meth_getInfo2Internal__4197fba68b6ead87cd9d11e373fdcee4";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_getInfo2InternalUsingFrameOffset!(
    btTypedConstraint_btConstraintInfo2 info,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtVector3ConstRef angVelA,
    CxxbtVector3ConstRef angVelB
    )
 = "Bullet2__btHingeConstraint__MU__meth_getInfo2InternalUsingFrameOffset__a3902e8c2d23b009e4596d39b2ae6279";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_updateRHS!(
    Float32 timeStep
    )
 = "Bullet2__btHingeConstraint__MU__meth_updateRHS__7c9a1d37a7188a86c6e9504bf26e43d3";

/// \dfgPresetOmit
/// \internal
btRigidBody
btHingeConstraint.cxx_getRigidBodyA?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getRigidBodyA__e22545540f4277822ade8a2970f4d42c";

/// \dfgPresetOmit
/// \internal
btRigidBody
btHingeConstraint.cxx_getRigidBodyB?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getRigidBodyB__551a6200d7ee2d651dd27444b22bd631";

/// \dfgPresetOmit
/// \internal
btRigidBody
btHingeConstraint.cxx_getRigidBodyA!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getRigidBodyA__00b665dc097e0ca95ce36d51b7e1dd96";

/// \dfgPresetOmit
/// \internal
btRigidBody
btHingeConstraint.cxx_getRigidBodyB!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getRigidBodyB__bda52e50f6440a32294231cff9ef0ced";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btHingeConstraint.cxx_getFrameOffsetA!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getFrameOffsetA__540fa0a90c7bf9dad87ab7af437bea56";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btHingeConstraint.cxx_getFrameOffsetB!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getFrameOffsetB__ddf0ad88fb860a05d6b06a09a17fe3fb";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setFrames!(
    CxxbtTransformConstRef frameA,
    CxxbtTransformConstRef frameB
    )
 = "Bullet2__btHingeConstraint__MU__meth_setFrames__28cc5798265a58ece95434925ed49da2";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setAngularOnly!(
    Boolean angularOnly
    )
 = "Bullet2__btHingeConstraint__MU__meth_setAngularOnly__dbec95faa3a5aa0f1347a5e9b3547196";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_enableAngularMotor!(
    Boolean enableMotor,
    Float32 targetVelocity,
    Float32 maxMotorImpulse
    )
 = "Bullet2__btHingeConstraint__MU__meth_enableAngularMotor__9c9dac617e1a52ca10af24f44bbcd048";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_enableMotor!(
    Boolean enableMotor
    )
 = "Bullet2__btHingeConstraint__MU__meth_enableMotor__139eddf3a55495b0dff9c4bf406a599c";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setMaxMotorImpulse!(
    Float32 maxMotorImpulse
    )
 = "Bullet2__btHingeConstraint__MU__meth_setMaxMotorImpulse__f52a98d7acf23580b34f95ac49d6f961";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setMotorTargetVelocity!(
    Float32 motorTargetVelocity
    )
 = "Bullet2__btHingeConstraint__MU__meth_setMotorTargetVelocity__fda0b9062b1d7056a6fc005f447abc7e";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setMotorTarget!(
    CxxbtQuaternionConstRef qAinB,
    Float32 dt
    )
 = "Bullet2__btHingeConstraint__MU__meth_setMotorTarget__478b0c67011401e8de3ca3e4b47a8aa8";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setMotorTarget!(
    Float32 targetAngle,
    Float32 dt
    )
 = "Bullet2__btHingeConstraint__MU__meth_setMotorTarget__ea8cc75993442b4479b03422f79e85d6";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setLimit!(
    Float32 low,
    Float32 high
    )
 = "Bullet2__btHingeConstraint__MU__meth_setLimit__623a46d9f7c9290458439cb317d656b0";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setLimit!(
    Float32 low,
    Float32 high,
    Float32 _softness
    )
 = "Bullet2__btHingeConstraint__MU__meth_setLimit__16b3b9ef4486b56271be14adddeb5024";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setLimit!(
    Float32 low,
    Float32 high,
    Float32 _softness,
    Float32 _biasFactor
    )
 = "Bullet2__btHingeConstraint__MU__meth_setLimit__2e946ff2379a31d5035df5393c6bf99a";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setLimit!(
    Float32 low,
    Float32 high,
    Float32 _softness,
    Float32 _biasFactor,
    Float32 _relaxationFactor
    )
 = "Bullet2__btHingeConstraint__MU__meth_setLimit__45bdcbd02a5a3f7f58651b509fc1a99f";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getLimitSoftness?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getLimitSoftness__84718a20e81f90f66cc3f33d016d1b4c";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getLimitBiasFactor?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getLimitBiasFactor__931e843b56df69fc0642e7dd3fdfaf7a";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getLimitRelaxationFactor?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getLimitRelaxationFactor__dda4c0cfc44875392a4f25e9145ffed2";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setAxis!(
    CxxbtVector3Ref axisInA
    )
 = "Bullet2__btHingeConstraint__MU__meth_setAxis__bb7d9d39918373a3c8b2c4a23e4fce6d";

/// \dfgPresetOmit
/// \internal
Boolean
btHingeConstraint.cxx_hasLimit?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_hasLimit__7a90e73053d5346a237410f4c4f072c9";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getLowerLimit?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getLowerLimit__e79510faea5510b6689b0fcfa2315512";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getUpperLimit?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getUpperLimit__ccdc3f3a46cbd88a8722fc80362155bc";

///The getHingeAngle gives the hinge angle in range [-PI,PI]
/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getHingeAngle!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getHingeAngle__3260bd9c9ed528286fc8683c23c98a0a";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getHingeAngle!(
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB
    )
 = "Bullet2__btHingeConstraint__MU__meth_getHingeAngle__367aa0f910be0105b770800da0a3dbe7";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_testLimit!(
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB
    )
 = "Bullet2__btHingeConstraint__MU__meth_testLimit__4977d17202ac547d5e31a79e0d781487";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btHingeConstraint.cxx_getAFrame?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getAFrame__e1aef0ae0cc84f4eb04bb5e85dc52f4e";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btHingeConstraint.cxx_getBFrame?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getBFrame__2afa3a71e79ede37d195f7450edc2d1e";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btHingeConstraint.cxx_getAFrame!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getAFrame__221b386820e1480889b8b701b5f68faa";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btHingeConstraint.cxx_getBFrame!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getBFrame__5fe9e894ccf6e790bc47d6ec87123ebf";

/// \dfgPresetOmit
/// \internal
SInt32
btHingeConstraint.cxx_getSolveLimit!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getSolveLimit__4a165ff0a69072c9ce56ee2ff51adb24";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getLimitSign!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getLimitSign__f1492f660cdbf591a57f63cbc2ca0ae2";

/// \dfgPresetOmit
/// \internal
Boolean
btHingeConstraint.cxx_getAngularOnly!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getAngularOnly__b02ddc95deba75239c9d18f036e4c6e4";

/// \dfgPresetOmit
/// \internal
Boolean
btHingeConstraint.cxx_getEnableAngularMotor!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getEnableAngularMotor__624fd7657e1af57082cf6f264095b19d";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getMotorTargetVelosity!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getMotorTargetVelosity__935444b28fab9a182f7009c0a6bfdd43";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getMaxMotorImpulse!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getMaxMotorImpulse__892ca2a3455e4004192182f4d1e098bd";

/// \dfgPresetOmit
/// \internal
Boolean
btHingeConstraint.cxx_getUseFrameOffset!(
    )
 = "Bullet2__btHingeConstraint__MU__meth_getUseFrameOffset__35884dfaa76357a0672425f76b3ec387";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setUseFrameOffset!(
    Boolean frameOffsetOnOff
    )
 = "Bullet2__btHingeConstraint__MU__meth_setUseFrameOffset__eca3ae390c821a11edee75e582cd856a";

/// \dfgPresetOmit
/// \internal
Boolean
btHingeConstraint.cxx_getUseReferenceFrameA?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getUseReferenceFrameA__5b29c76c0091127d624ad37b3cb28476";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setUseReferenceFrameA!(
    Boolean useReferenceFrameA
    )
 = "Bullet2__btHingeConstraint__MU__meth_setUseReferenceFrameA__4726710908525f590c2a7a295f7de280";

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
// 
///If no axis is provided, it uses the default axis for this constraint.
/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value
    )
 = "Bullet2__btHingeConstraint__MU__meth_setParam__9bc7def134aed13bffcee341fda27976";

/// \dfgPresetOmit
/// \internal

btHingeConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value,
    SInt32 axis
    )
 = "Bullet2__btHingeConstraint__MU__meth_setParam__db561cdbafc6c5a10f96cee60e0c4426";

///return the local value of parameter
/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getParam?(
    SInt32 num
    )
 = "Bullet2__btHingeConstraint__CO__meth_getParam__3c5d20cf37c51cec08d4960d0602d7a5";

/// \dfgPresetOmit
/// \internal
Float32
btHingeConstraint.cxx_getParam?(
    SInt32 num,
    SInt32 axis
    )
 = "Bullet2__btHingeConstraint__CO__meth_getParam__07a401978549268aa9be78ffa0d1debe";

/// \dfgPresetOmit
/// \internal
SInt32
btHingeConstraint.cxx_getFlags?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_getFlags__2190af1f74df3f79cec807562e043eb1";

/// \dfgPresetOmit
/// \internal
SInt32
btHingeConstraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btHingeConstraint__CO__meth_calculateSerializeBufferSize__11e136035a13c7b28c64c088e9b0bf06";

Boolean
btHingeConstraint.getUseReferenceFrameA?(
    )
{   
    Boolean __res = 
    this.cxx_getUseReferenceFrameA(
        );
    
    return __res;
}

Float32
btHingeConstraint.getUpperLimit?(
    )
{   
    Float32 __res = 
    this.cxx_getUpperLimit(
        );
    
    return __res;
}

Float32
btHingeConstraint.getLimitRelaxationFactor?(
    )
{   
    Float32 __res = 
    this.cxx_getLimitRelaxationFactor(
        );
    
    return __res;
}

Float32
btHingeConstraint.getLimitBiasFactor?(
    )
{   
    Float32 __res = 
    this.cxx_getLimitBiasFactor(
        );
    
    return __res;
}

Float32
btHingeConstraint.getParam?(
    in
    SInt32
    num
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_getParam(
        num,
        axis
        );
    
    
    
    return __res;
}

Float32
btHingeConstraint.getLowerLimit?(
    )
{   
    Float32 __res = 
    this.cxx_getLowerLimit(
        );
    
    return __res;
}


btHingeConstraint.setUseReferenceFrameA!(
    in
    Boolean
    useReferenceFrameA
    
    
    )
{   
    
    
    this.cxx_setUseReferenceFrameA(
        useReferenceFrameA
        );
    
    
    
}


btHingeConstraint.setAxis!(
    io
    btVector3
    axisInA
    
    
    )
{   
    
    CxxbtVector3Ref axisInA__cxx = Make_CxxbtVector3Ref(axisInA);
    
    this.cxx_setAxis(
        axisInA__cxx
        );
    
    
    
}

Boolean
btHingeConstraint.hasLimit?(
    )
{   
    Boolean __res = 
    this.cxx_hasLimit(
        );
    
    return __res;
}

Float32
btHingeConstraint.getHingeAngle!(
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    
    )
{   
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    Float32 __res = 
    this.cxx_getHingeAngle(
        transA__cxx,
        transB__cxx
        );
    
    
    
    return __res;
}

Float32
btHingeConstraint.getMaxMotorImpulse!(
    )
{   
    Float32 __res = 
    this.cxx_getMaxMotorImpulse(
        );
    
    return __res;
}


btHingeConstraint.setLimit!(
    in
    Float32
    low
    
    ,
    in
    Float32
    high
    
    
    )
{   
    
    
    
    this.cxx_setLimit(
        low,
        high
        );
    
    
    
    
}

Boolean
btHingeConstraint.getUseFrameOffset!(
    )
{   
    Boolean __res = 
    this.cxx_getUseFrameOffset(
        );
    
    return __res;
}

SInt32
btHingeConstraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

SInt32
btHingeConstraint.getSolveLimit!(
    )
{   
    SInt32 __res = 
    this.cxx_getSolveLimit(
        );
    
    return __res;
}


btHingeConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    
    
    this.cxx_setParam(
        num,
        value,
        axis
        );
    
    
    
    
    
}

///The getHingeAngle gives the hinge angle in range [-PI,PI]
Float32
btHingeConstraint.getHingeAngle!(
    )
{   
    Float32 __res = 
    this.cxx_getHingeAngle(
        );
    
    return __res;
}


btHingeConstraint.setLimit!(
    in
    Float32
    low
    
    ,
    in
    Float32
    high
    
    ,
    in
    Float32
    _softness
    
    ,
    in
    Float32
    _biasFactor
    
    
    )
{   
    
    
    
    
    
    this.cxx_setLimit(
        low,
        high,
        _softness,
        _biasFactor
        );
    
    
    
    
    
    
}


btHingeConstraint.enableAngularMotor!(
    in
    Boolean
    enableMotor
    
    ,
    in
    Float32
    targetVelocity
    
    ,
    in
    Float32
    maxMotorImpulse
    
    
    )
{   
    
    
    
    
    this.cxx_enableAngularMotor(
        enableMotor,
        targetVelocity,
        maxMotorImpulse
        );
    
    
    
    
    
}


btHingeConstraint.getInfo2InternalUsingFrameOffset!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btVector3
    angVelA
    
    ,
    in
    btVector3
    angVelB
    
    
    )
{   
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtVector3ConstRef angVelA__cxx = Make_CxxbtVector3ConstRef(angVelA);
    
    CxxbtVector3ConstRef angVelB__cxx = Make_CxxbtVector3ConstRef(angVelB);
    
    this.cxx_getInfo2InternalUsingFrameOffset(
        info,
        transA__cxx,
        transB__cxx,
        angVelA__cxx,
        angVelB__cxx
        );
    
    
    
    
    
    
    
}


btHingeConstraint.getInfo1NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1NonVirtual(
        info
        );
    
    
    
}


btHingeConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}

btRigidBody
btHingeConstraint.getRigidBodyA?(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBodyA(
        );
    
    return __res;
}

Boolean
btHingeConstraint.getAngularOnly!(
    )
{   
    Boolean __res = 
    this.cxx_getAngularOnly(
        );
    
    return __res;
}


btHingeConstraint.setUseFrameOffset!(
    in
    Boolean
    frameOffsetOnOff
    
    
    )
{   
    
    
    this.cxx_setUseFrameOffset(
        frameOffsetOnOff
        );
    
    
    
}


btHingeConstraint.testLimit!(
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    
    )
{   
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    this.cxx_testLimit(
        transA__cxx,
        transB__cxx
        );
    
    
    
    
}


btHingeConstraint.getInfo2NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btVector3
    angVelA
    
    ,
    in
    btVector3
    angVelB
    
    
    )
{   
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtVector3ConstRef angVelA__cxx = Make_CxxbtVector3ConstRef(angVelA);
    
    CxxbtVector3ConstRef angVelB__cxx = Make_CxxbtVector3ConstRef(angVelB);
    
    this.cxx_getInfo2NonVirtual(
        info,
        transA__cxx,
        transB__cxx,
        angVelA__cxx,
        angVelB__cxx
        );
    
    
    
    
    
    
    
}


btHingeConstraint.setMotorTarget!(
    in
    Float32
    targetAngle
    
    ,
    in
    Float32
    dt
    
    
    )
{   
    
    
    
    this.cxx_setMotorTarget(
        targetAngle,
        dt
        );
    
    
    
    
}

Float32
btHingeConstraint.getLimitSoftness?(
    )
{   
    Float32 __res = 
    this.cxx_getLimitSoftness(
        );
    
    return __res;
}


btHingeConstraint.setFrames!(
    in
    btTransform
    frameA
    
    ,
    in
    btTransform
    frameB
    
    
    )
{   
    
    CxxbtTransformConstRef frameA__cxx = Make_CxxbtTransformConstRef(frameA);
    
    CxxbtTransformConstRef frameB__cxx = Make_CxxbtTransformConstRef(frameB);
    
    this.cxx_setFrames(
        frameA__cxx,
        frameB__cxx
        );
    
    
    
    
}

btTransform
btHingeConstraint.getFrameOffsetA!(
    )
{   
    CxxbtTransformRef __res_cxx = 
    this.cxx_getFrameOffsetA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btHingeConstraint.setLimit!(
    in
    Float32
    low
    
    ,
    in
    Float32
    high
    
    ,
    in
    Float32
    _softness
    
    ,
    in
    Float32
    _biasFactor
    
    ,
    in
    Float32
    _relaxationFactor
    
    
    )
{   
    
    
    
    
    
    
    this.cxx_setLimit(
        low,
        high,
        _softness,
        _biasFactor,
        _relaxationFactor
        );
    
    
    
    
    
    
    
}

SInt32
btHingeConstraint.getFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getFlags(
        );
    
    return __res;
}

Float32
btHingeConstraint.getMotorTargetVelosity!(
    )
{   
    Float32 __res = 
    this.cxx_getMotorTargetVelosity(
        );
    
    return __res;
}

btRigidBody
btHingeConstraint.getRigidBodyB?(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBodyB(
        );
    
    return __res;
}


btHingeConstraint.setMaxMotorImpulse!(
    in
    Float32
    maxMotorImpulse
    
    
    )
{   
    
    
    this.cxx_setMaxMotorImpulse(
        maxMotorImpulse
        );
    
    
    
}

btTransform
btHingeConstraint.getAFrame?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getAFrame(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btHingeConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}


btHingeConstraint.enableMotor!(
    in
    Boolean
    enableMotor
    
    
    )
{   
    
    
    this.cxx_enableMotor(
        enableMotor
        );
    
    
    
}

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
// 
///If no axis is provided, it uses the default axis for this constraint.

btHingeConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    
    )
{   
    
    
    
    this.cxx_setParam(
        num,
        value
        );
    
    
    
    
}

///return the local value of parameter
Float32
btHingeConstraint.getParam?(
    in
    SInt32
    num
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getParam(
        num
        );
    
    
    return __res;
}


btHingeConstraint.setMotorTargetVelocity!(
    in
    Float32
    motorTargetVelocity
    
    
    )
{   
    
    
    this.cxx_setMotorTargetVelocity(
        motorTargetVelocity
        );
    
    
    
}

Float32
btHingeConstraint.getLimitSign!(
    )
{   
    Float32 __res = 
    this.cxx_getLimitSign(
        );
    
    return __res;
}


btHingeConstraint.setMotorTarget!(
    in
    btQuaternion
    qAinB
    
    ,
    in
    Float32
    dt
    
    
    )
{   
    
    CxxbtQuaternionConstRef qAinB__cxx = Make_CxxbtQuaternionConstRef(qAinB);
    
    
    this.cxx_setMotorTarget(
        qAinB__cxx,
        dt
        );
    
    
    
    
}

Boolean
btHingeConstraint.getEnableAngularMotor!(
    )
{   
    Boolean __res = 
    this.cxx_getEnableAngularMotor(
        );
    
    return __res;
}

btTransform
btHingeConstraint.getFrameOffsetB!(
    )
{   
    CxxbtTransformRef __res_cxx = 
    this.cxx_getFrameOffsetB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btHingeConstraint.buildJacobian!(
    )
{   
    
    this.cxx_buildJacobian(
        );
    
    
}


btHingeConstraint.getInfo2Internal!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btVector3
    angVelA
    
    ,
    in
    btVector3
    angVelB
    
    
    )
{   
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtVector3ConstRef angVelA__cxx = Make_CxxbtVector3ConstRef(angVelA);
    
    CxxbtVector3ConstRef angVelB__cxx = Make_CxxbtVector3ConstRef(angVelB);
    
    this.cxx_getInfo2Internal(
        info,
        transA__cxx,
        transB__cxx,
        angVelA__cxx,
        angVelB__cxx
        );
    
    
    
    
    
    
    
}


btHingeConstraint.setLimit!(
    in
    Float32
    low
    
    ,
    in
    Float32
    high
    
    ,
    in
    Float32
    _softness
    
    
    )
{   
    
    
    
    
    this.cxx_setLimit(
        low,
        high,
        _softness
        );
    
    
    
    
    
}

btTransform
btHingeConstraint.getBFrame?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getBFrame(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btHingeConstraint.updateRHS!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_updateRHS(
        timeStep
        );
    
    
    
}


btHingeConstraint.setAngularOnly!(
    in
    Boolean
    angularOnly
    
    
    )
{   
    
    
    this.cxx_setAngularOnly(
        angularOnly
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraint] EDK[Fabric_EDK_KL_btHingeConstraint] LIB[btHingeConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btHingeConstraint.=(
    btHingeConstraint that
    ) = "Bullet2__btHingeConstraint__MU__simple_ass_op__5ea61e5be53b462eb3f234f1e127806c";


/// \dfgPresetOmit
/// \internal
btHingeConstraint.appendDesc(io String string) {
  string += "btHingeConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintDoubleData] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData] LIB[btHingeConstraintDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData] LIB[btHingeConstraintDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData] LIB[btHingeConstraintDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btHingeConstraintDoubleData() = "Bullet2__btHingeConstraintDoubleData__MU__empty_ctor__a19c4d883d7cb602ea19843c1014c317";

/// \dfgPresetOmit
btHingeConstraintDoubleData(
    btHingeConstraintDoubleData that
    ) = "Bullet2__btHingeConstraintDoubleData__MU__copy_ctor__e7e6dd0ffaba3cdf8048a17aeb6929a4";

btHingeConstraintDoubleData.cxx_delete() = "Bullet2__btHingeConstraintDoubleData__MU__delete__e2572b3063386b580cf1c34fc9ae163e";

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData] LIB[btHingeConstraintDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData] LIB[btHingeConstraintDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData] LIB[btHingeConstraintDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btHingeConstraintDoubleData.=(
    btHingeConstraintDoubleData that
    ) = "Bullet2__btHingeConstraintDoubleData__MU__simple_ass_op__4d080055feba1d8ae750c9a2ab6abf2f";


/// \dfgPresetOmit
/// \internal
btHingeConstraintDoubleData.appendDesc(io String string) {
  string += "btHingeConstraintDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btHingeAccumulatedAngleConstraint() = "Bullet2__btHingeAccumulatedAngleConstraint__MU__empty_ctor__0a8b01fec1400dba650b0b3afef33bbe";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btHingeAccumulatedAngleConstraint that
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__copy_ctor__0c3f9fb9ae209e156cc1f39d20a0bc3b";

/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__ctor__238d42590081028cebb5d8d1d933d5d6";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB
    ) {
    this.__ctor(
        rbA,
        rbB,
        pivotInA,
        pivotInB,
        axisInA,
        axisInB
        );
}

/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB,
    Boolean useReferenceFrameA
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__ctor__532e84dc3a2bc3f12a258df47743809c";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB,
    Boolean useReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbB,
        pivotInA,
        pivotInB,
        axisInA,
        axisInB,
        useReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.__ctor(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef axisInA
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__ctor__d34316ee99aad317bfde06d78db5e715";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef axisInA
    ) {
    this.__ctor(
        rbA,
        pivotInA,
        axisInA
        );
}

/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.__ctor(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef axisInA,
    Boolean useReferenceFrameA
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__ctor__f811290a92c31e08f6c5084ddd58c68b";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef axisInA,
    Boolean useReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        pivotInA,
        axisInA,
        useReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__ctor__5fcb6b6bbfc1e9dd57399fa8292d0f57";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame
    ) {
    this.__ctor(
        rbA,
        rbB,
        rbAFrame,
        rbBFrame
        );
}

/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame,
    Boolean useReferenceFrameA
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__ctor__3ac646b2e57ca0d3169c21b20023e8e8";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef rbAFrame,
    CxxbtTransformConstRef rbBFrame,
    Boolean useReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbB,
        rbAFrame,
        rbBFrame,
        useReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.__ctor(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__ctor__28ce9099bf46544e08d7aa80530573b6";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame
    ) {
    this.__ctor(
        rbA,
        rbAFrame
        );
}

/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.__ctor(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame,
    Boolean useReferenceFrameA
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__ctor__cb4d777daac76b602ea3a207b35cc3ed";

/// \dfgPresetOmit
btHingeAccumulatedAngleConstraint(
    btRigidBody rbA,
    CxxbtTransformConstRef rbAFrame,
    Boolean useReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbAFrame,
        useReferenceFrameA
        );
}

btHingeAccumulatedAngleConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btTransform
    rbAFrame
    
    
    ) {
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    this.__ctor(
        rbA,
        rbAFrame__cxx
        );
    
    
}

btHingeAccumulatedAngleConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btTransform
    rbAFrame
    
    ,
    in
    Boolean
    useReferenceFrameA
    
    
    ) {
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    
    this.__ctor(
        rbA,
        rbAFrame__cxx,
        useReferenceFrameA
        );
    
    
    
}

btHingeAccumulatedAngleConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    ,
    in
    btVector3
    axisInA
    
    ,
    in
    btVector3
    axisInB
    
    ,
    in
    Boolean
    useReferenceFrameA
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    CxxbtVector3ConstRef axisInB__cxx = Make_CxxbtVector3ConstRef(axisInB);
    
    this.__ctor(
        rbA,
        rbB,
        pivotInA__cxx,
        pivotInB__cxx,
        axisInA__cxx,
        axisInB__cxx,
        useReferenceFrameA
        );
    
    
    
    
    
    
    
}

btHingeAccumulatedAngleConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    rbAFrame
    
    ,
    in
    btTransform
    rbBFrame
    
    ,
    in
    Boolean
    useReferenceFrameA
    
    
    ) {
    
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    
    CxxbtTransformConstRef rbBFrame__cxx = Make_CxxbtTransformConstRef(rbBFrame);
    
    this.__ctor(
        rbA,
        rbB,
        rbAFrame__cxx,
        rbBFrame__cxx,
        useReferenceFrameA
        );
    
    
    
    
    
}

btHingeAccumulatedAngleConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    ,
    in
    btVector3
    axisInA
    
    ,
    in
    btVector3
    axisInB
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    CxxbtVector3ConstRef axisInB__cxx = Make_CxxbtVector3ConstRef(axisInB);
    this.__ctor(
        rbA,
        rbB,
        pivotInA__cxx,
        pivotInB__cxx,
        axisInA__cxx,
        axisInB__cxx
        );
    
    
    
    
    
    
}

btHingeAccumulatedAngleConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    axisInA
    
    
    ) {
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    this.__ctor(
        rbA,
        pivotInA__cxx,
        axisInA__cxx
        );
    
    
    
}

btHingeAccumulatedAngleConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    axisInA
    
    ,
    in
    Boolean
    useReferenceFrameA
    
    
    ) {
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    this.__ctor(
        rbA,
        pivotInA__cxx,
        axisInA__cxx,
        useReferenceFrameA
        );
    
    
    
    
}

btHingeAccumulatedAngleConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    rbAFrame
    
    ,
    in
    btTransform
    rbBFrame
    
    
    ) {
    
    
    
    CxxbtTransformConstRef rbAFrame__cxx = Make_CxxbtTransformConstRef(rbAFrame);
    
    CxxbtTransformConstRef rbBFrame__cxx = Make_CxxbtTransformConstRef(rbBFrame);
    this.__ctor(
        rbA,
        rbB,
        rbAFrame__cxx,
        rbBFrame__cxx
        );
    
    
    
    
}

btHingeAccumulatedAngleConstraint.cxx_delete() = "Bullet2__btHingeAccumulatedAngleConstraint__MU__delete__887ddb63a2ab5131f6e2b81a734e3db5";

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btHingeAccumulatedAngleConstraint.cxx_getAccumulatedHingeAngle!(
    )
 = "Bullet2__btHingeAccumulatedAngleConstraint__MU__meth_getAccumulatedHingeAngle__041b53d987f1c41336917be7e2504b37";

/// \dfgPresetOmit
/// \internal

btHingeAccumulatedAngleConstraint.cxx_setAccumulatedHingeAngle!(
    Float32 accAngle
    )
 = "Bullet2__btHingeAccumulatedAngleConstraint__MU__meth_setAccumulatedHingeAngle__8bea759d7a90170a51735cc149df636f";

/// \dfgPresetOmit
/// \internal

btHingeAccumulatedAngleConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btHingeAccumulatedAngleConstraint__MU__meth_getInfo1__adeb379a0e4391d0a939dc1659be338b";

Float32
btHingeAccumulatedAngleConstraint.getAccumulatedHingeAngle!(
    )
{   
    Float32 __res = 
    this.cxx_getAccumulatedHingeAngle(
        );
    
    return __res;
}


btHingeAccumulatedAngleConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}


btHingeAccumulatedAngleConstraint.setAccumulatedHingeAngle!(
    in
    Float32
    accAngle
    
    
    )
{   
    
    
    this.cxx_setAccumulatedHingeAngle(
        accAngle
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeAccumulatedAngleConstraint] EDK[Fabric_EDK_KL_btHingeAccumulatedAngleConstraint] LIB[btHingeAccumulatedAngleConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btHingeAccumulatedAngleConstraint.=(
    btHingeAccumulatedAngleConstraint that
    ) = "Bullet2__btHingeAccumulatedAngleConstraint__MU__simple_ass_op__3227adb00593fe2571b4d514e2cb7781";


/// \dfgPresetOmit
/// \internal
btHingeAccumulatedAngleConstraint.appendDesc(io String string) {
  string += "btHingeAccumulatedAngleConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintFloatData] EDK[Fabric_EDK_KL_btHingeConstraintFloatData] LIB[btHingeConstraintFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintFloatData] EDK[Fabric_EDK_KL_btHingeConstraintFloatData] LIB[btHingeConstraintFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintFloatData] EDK[Fabric_EDK_KL_btHingeConstraintFloatData] LIB[btHingeConstraintFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btHingeConstraintFloatData() = "Bullet2__btHingeConstraintFloatData__MU__empty_ctor__b68db34eb0be84fcc31f638a50b37f49";

/// \dfgPresetOmit
btHingeConstraintFloatData(
    btHingeConstraintFloatData that
    ) = "Bullet2__btHingeConstraintFloatData__MU__copy_ctor__a537fdb69d81325870d7be8339a32d9f";

btHingeConstraintFloatData.cxx_delete() = "Bullet2__btHingeConstraintFloatData__MU__delete__9de84e6d37b8c3689da07ccd45f322f9";

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintFloatData] EDK[Fabric_EDK_KL_btHingeConstraintFloatData] LIB[btHingeConstraintFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintFloatData] EDK[Fabric_EDK_KL_btHingeConstraintFloatData] LIB[btHingeConstraintFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintFloatData] EDK[Fabric_EDK_KL_btHingeConstraintFloatData] LIB[btHingeConstraintFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btHingeConstraintFloatData.=(
    btHingeConstraintFloatData that
    ) = "Bullet2__btHingeConstraintFloatData__MU__simple_ass_op__ac19ab74fe2f0c226c899ffdfe6fb5dd";


/// \dfgPresetOmit
/// \internal
btHingeConstraintFloatData.appendDesc(io String string) {
  string += "btHingeConstraintFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btHingeConstraintDoubleData2] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData2] LIB[btHingeConstraintDoubleData2 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData2] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData2] LIB[btHingeConstraintDoubleData2 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData2] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData2] LIB[btHingeConstraintDoubleData2 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btHingeConstraintDoubleData2() = "Bullet2__btHingeConstraintDoubleData2__MU__empty_ctor__903c7bd22991a8103ca0944a10bfb157";

/// \dfgPresetOmit
btHingeConstraintDoubleData2(
    btHingeConstraintDoubleData2 that
    ) = "Bullet2__btHingeConstraintDoubleData2__MU__copy_ctor__619bc227746448abd54bca4f3a832feb";

btHingeConstraintDoubleData2.cxx_delete() = "Bullet2__btHingeConstraintDoubleData2__MU__delete__98d6ce5948dc2d5fd7a21fddb08201b8";

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData2] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData2] LIB[btHingeConstraintDoubleData2 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData2] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData2] LIB[btHingeConstraintDoubleData2 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btHingeConstraintDoubleData2] EDK[Fabric_EDK_KL_btHingeConstraintDoubleData2] LIB[btHingeConstraintDoubleData2 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btHingeConstraintDoubleData2.=(
    btHingeConstraintDoubleData2 that
    ) = "Bullet2__btHingeConstraintDoubleData2__MU__simple_ass_op__b00003f1562874030303434bf5080012";


/// \dfgPresetOmit
/// \internal
btHingeConstraintDoubleData2.appendDesc(io String string) {
  string += "btHingeConstraintDoubleData2:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btJacobianEntry(
    btJacobianEntry that
    ) = "Bullet2__btJacobianEntry__MU__copy_ctor__ccc6ef0074caf4124244d3ae2b371856";

/// \dfgPresetOmit
/// \internal
btJacobianEntry.__ctor(
    ) = "Bullet2__btJacobianEntry__MU__ctor__39776ad8b3ea31556021dc715f68f036";

/// \dfgPresetOmit
btJacobianEntry(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btJacobianEntry.__ctor(
    CxxbtVector3ConstRef jointAxis,
    CxxbtMatrix3x3ConstRef world2A,
    CxxbtMatrix3x3ConstRef world2B,
    CxxbtVector3ConstRef inertiaInvA,
    CxxbtVector3ConstRef inertiaInvB
    ) = "Bullet2__btJacobianEntry__MU__ctor__e9cf72d35018faa5d4a301ec373c03f3";

/// \dfgPresetOmit
btJacobianEntry(
    CxxbtVector3ConstRef jointAxis,
    CxxbtMatrix3x3ConstRef world2A,
    CxxbtMatrix3x3ConstRef world2B,
    CxxbtVector3ConstRef inertiaInvA,
    CxxbtVector3ConstRef inertiaInvB
    ) {
    this.__ctor(
        jointAxis,
        world2A,
        world2B,
        inertiaInvA,
        inertiaInvB
        );
}

/// \dfgPresetOmit
/// \internal
btJacobianEntry.__ctor(
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB,
    CxxbtVector3ConstRef inertiaInvA,
    CxxbtVector3ConstRef inertiaInvB
    ) = "Bullet2__btJacobianEntry__MU__ctor__6aed5153ac9a33a6c4b9b41092d68fbe";

/// \dfgPresetOmit
btJacobianEntry(
    CxxbtVector3ConstRef axisInA,
    CxxbtVector3ConstRef axisInB,
    CxxbtVector3ConstRef inertiaInvA,
    CxxbtVector3ConstRef inertiaInvB
    ) {
    this.__ctor(
        axisInA,
        axisInB,
        inertiaInvA,
        inertiaInvB
        );
}

btJacobianEntry(
    in
    btVector3
    axisInA
    
    ,
    in
    btVector3
    axisInB
    
    ,
    in
    btVector3
    inertiaInvA
    
    ,
    in
    btVector3
    inertiaInvB
    
    
    ) {
    
    CxxbtVector3ConstRef axisInA__cxx = Make_CxxbtVector3ConstRef(axisInA);
    
    CxxbtVector3ConstRef axisInB__cxx = Make_CxxbtVector3ConstRef(axisInB);
    
    CxxbtVector3ConstRef inertiaInvA__cxx = Make_CxxbtVector3ConstRef(inertiaInvA);
    
    CxxbtVector3ConstRef inertiaInvB__cxx = Make_CxxbtVector3ConstRef(inertiaInvB);
    this.__ctor(
        axisInA__cxx,
        axisInB__cxx,
        inertiaInvA__cxx,
        inertiaInvB__cxx
        );
    
    
    
    
}

btJacobianEntry(
    in
    btVector3
    jointAxis
    
    ,
    in
    btMatrix3x3
    world2A
    
    ,
    in
    btMatrix3x3
    world2B
    
    ,
    in
    btVector3
    inertiaInvA
    
    ,
    in
    btVector3
    inertiaInvB
    
    
    ) {
    
    CxxbtVector3ConstRef jointAxis__cxx = Make_CxxbtVector3ConstRef(jointAxis);
    
    CxxbtMatrix3x3ConstRef world2A__cxx = Make_CxxbtMatrix3x3ConstRef(world2A);
    
    CxxbtMatrix3x3ConstRef world2B__cxx = Make_CxxbtMatrix3x3ConstRef(world2B);
    
    CxxbtVector3ConstRef inertiaInvA__cxx = Make_CxxbtVector3ConstRef(inertiaInvA);
    
    CxxbtVector3ConstRef inertiaInvB__cxx = Make_CxxbtVector3ConstRef(inertiaInvB);
    this.__ctor(
        jointAxis__cxx,
        world2A__cxx,
        world2B__cxx,
        inertiaInvA__cxx,
        inertiaInvB__cxx
        );
    
    
    
    
    
}

btJacobianEntry.cxx_delete() = "Bullet2__btJacobianEntry__MU__delete__16e35b0fa9bdb6be6d8ebacfabdc338d";

//////////////////////////////////////////////////////////////////////////////
// KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btJacobianEntry.cxx_getDiagonal?(
    )
 = "Bullet2__btJacobianEntry__CO__meth_getDiagonal__c4f9063b1179dc69a9696208f27f0862";

/// \dfgPresetOmit
/// \internal
Float32
btJacobianEntry.cxx_getRelativeVelocity!(
    CxxbtVector3ConstRef linvelA,
    CxxbtVector3ConstRef angvelA,
    CxxbtVector3ConstRef linvelB,
    CxxbtVector3ConstRef angvelB
    )
 = "Bullet2__btJacobianEntry__MU__meth_getRelativeVelocity__6b35fc7ecb01b6d2d3a5dc0375041ec7";

Float32
btJacobianEntry.getRelativeVelocity!(
    in
    btVector3
    linvelA
    
    ,
    in
    btVector3
    angvelA
    
    ,
    in
    btVector3
    linvelB
    
    ,
    in
    btVector3
    angvelB
    
    
    )
{   
    
    CxxbtVector3ConstRef linvelA__cxx = Make_CxxbtVector3ConstRef(linvelA);
    
    CxxbtVector3ConstRef angvelA__cxx = Make_CxxbtVector3ConstRef(angvelA);
    
    CxxbtVector3ConstRef linvelB__cxx = Make_CxxbtVector3ConstRef(linvelB);
    
    CxxbtVector3ConstRef angvelB__cxx = Make_CxxbtVector3ConstRef(angvelB);
    Float32 __res = 
    this.cxx_getRelativeVelocity(
        linvelA__cxx,
        angvelA__cxx,
        linvelB__cxx,
        angvelB__cxx
        );
    
    
    
    
    
    return __res;
}

Float32
btJacobianEntry.getDiagonal?(
    )
{   
    Float32 __res = 
    this.cxx_getDiagonal(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btJacobianEntry] EDK[Fabric_EDK_KL_btJacobianEntry] LIB[btJacobianEntry *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btJacobianEntry.=(
    btJacobianEntry that
    ) = "Bullet2__btJacobianEntry__MU__simple_ass_op__573c4012f5969ee39d5de3c156a81fa4";


/// \dfgPresetOmit
/// \internal
btJacobianEntry.appendDesc(io String string) {
  string += "btJacobianEntry:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btConstraintSetting] EDK[Fabric_EDK_KL_btConstraintSetting] LIB[btConstraintSetting *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSetting] EDK[Fabric_EDK_KL_btConstraintSetting] LIB[btConstraintSetting *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSetting] EDK[Fabric_EDK_KL_btConstraintSetting] LIB[btConstraintSetting *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btConstraintSetting(
    btConstraintSetting that
    ) = "Bullet2__btConstraintSetting__MU__copy_ctor__3a4b4eed968bf60b7dd9fd170e8d69c3";

/// \dfgPresetOmit
/// \internal
btConstraintSetting.__ctor(
    ) = "Bullet2__btConstraintSetting__MU__ctor__1bddd7a6ffd3172a62c49c9aa11834ef";

/// \dfgPresetOmit
btConstraintSetting(
    ) {
    this.__ctor(
        );
}

btConstraintSetting.cxx_delete() = "Bullet2__btConstraintSetting__MU__delete__b084ba73fdca4b4be62c264e7b790a80";

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSetting] EDK[Fabric_EDK_KL_btConstraintSetting] LIB[btConstraintSetting *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSetting] EDK[Fabric_EDK_KL_btConstraintSetting] LIB[btConstraintSetting *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btConstraintSetting] EDK[Fabric_EDK_KL_btConstraintSetting] LIB[btConstraintSetting *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btConstraintSetting.=(
    btConstraintSetting that
    ) = "Bullet2__btConstraintSetting__MU__simple_ass_op__41c636096e66aaa17dec3e8260215c42";


/// \dfgPresetOmit
/// \internal
btConstraintSetting.appendDesc(io String string) {
  string += "btConstraintSetting:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btPoint2PointConstraint() = "Bullet2__btPoint2PointConstraint__MU__empty_ctor__9209fe4e0caa67de58dc83d57faf0fef";

/// \dfgPresetOmit
btPoint2PointConstraint(
    btPoint2PointConstraint that
    ) = "Bullet2__btPoint2PointConstraint__MU__copy_ctor__d0518cc172c228c7eabda45ab465d988";

/// \dfgPresetOmit
/// \internal
btPoint2PointConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB
    ) = "Bullet2__btPoint2PointConstraint__MU__ctor__0c77504c1585a6435478940dfea1a93f";

/// \dfgPresetOmit
btPoint2PointConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB
    ) {
    this.__ctor(
        rbA,
        rbB,
        pivotInA,
        pivotInB
        );
}

/// \dfgPresetOmit
/// \internal
btPoint2PointConstraint.__ctor(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA
    ) = "Bullet2__btPoint2PointConstraint__MU__ctor__586d65253db2eefb3d037c3751477acc";

/// \dfgPresetOmit
btPoint2PointConstraint(
    btRigidBody rbA,
    CxxbtVector3ConstRef pivotInA
    ) {
    this.__ctor(
        rbA,
        pivotInA
        );
}

btPoint2PointConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btVector3
    pivotInA
    
    
    ) {
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    this.__ctor(
        rbA,
        pivotInA__cxx
        );
    
    
}

btPoint2PointConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    this.__ctor(
        rbA,
        rbB,
        pivotInA__cxx,
        pivotInB__cxx
        );
    
    
    
    
}

btPoint2PointConstraint.cxx_delete() = "Bullet2__btPoint2PointConstraint__MU__delete__3ded73b20894db1afcc54788df4f3e8b";

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_buildJacobian!(
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_buildJacobian__10db844ecb7a882c9ac638c684ca4303";

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_getInfo1__bae7c6ef56e8c26d23616bb27bf1e215";

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_getInfo1NonVirtual!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_getInfo1NonVirtual__67937fcd399621acfb4627f235d14f0f";

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_getInfo2__da6a745d34fc57a25ea0d96105bb79fb";

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_getInfo2NonVirtual!(
    btTypedConstraint_btConstraintInfo2 info,
    CxxbtTransformConstRef body0_trans,
    CxxbtTransformConstRef body1_trans
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_getInfo2NonVirtual__4c58b706eb0ecd9ddc4d004e6d3b9ba1";

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_updateRHS!(
    Float32 timeStep
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_updateRHS__9cb8ace4385ba4f975dcda3f5c963746";

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_setPivotA!(
    CxxbtVector3ConstRef pivotA
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_setPivotA__b5e757ca8c8daca0ce229b76992c7079";

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_setPivotB!(
    CxxbtVector3ConstRef pivotB
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_setPivotB__22e2499c28fe75b7327aebf1e524e4b9";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btPoint2PointConstraint.cxx_getPivotInA?(
    )
 = "Bullet2__btPoint2PointConstraint__CO__meth_getPivotInA__556fe9b7e0dd91ef1d0153ab638ca26e";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btPoint2PointConstraint.cxx_getPivotInB?(
    )
 = "Bullet2__btPoint2PointConstraint__CO__meth_getPivotInB__8e1517240a2201792f5ea1f26788661a";

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
// 
///If no axis is provided, it uses the default axis for this constraint.
/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_setParam__88cfd42ff3aebfe664cac68e5d7312bf";

/// \dfgPresetOmit
/// \internal

btPoint2PointConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value,
    SInt32 axis
    )
 = "Bullet2__btPoint2PointConstraint__MU__meth_setParam__f6406f522ea18906b9573571304f7305";

///return the local value of parameter
/// \dfgPresetOmit
/// \internal
Float32
btPoint2PointConstraint.cxx_getParam?(
    SInt32 num
    )
 = "Bullet2__btPoint2PointConstraint__CO__meth_getParam__5bb44f8e369c28c489f8bf6bd6a2e8c1";

/// \dfgPresetOmit
/// \internal
Float32
btPoint2PointConstraint.cxx_getParam?(
    SInt32 num,
    SInt32 axis
    )
 = "Bullet2__btPoint2PointConstraint__CO__meth_getParam__8a4279e8e98755fd14e9df5a4c161f09";

/// \dfgPresetOmit
/// \internal
SInt32
btPoint2PointConstraint.cxx_getFlags?(
    )
 = "Bullet2__btPoint2PointConstraint__CO__meth_getFlags__9571310577c46170d979a2027c54342e";

/// \dfgPresetOmit
/// \internal
SInt32
btPoint2PointConstraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btPoint2PointConstraint__CO__meth_calculateSerializeBufferSize__4c36ae279c3cb1be591245ae6fc44257";


btPoint2PointConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}

SInt32
btPoint2PointConstraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btPoint2PointConstraint.setPivotB!(
    in
    btVector3
    pivotB
    
    
    )
{   
    
    CxxbtVector3ConstRef pivotB__cxx = Make_CxxbtVector3ConstRef(pivotB);
    
    this.cxx_setPivotB(
        pivotB__cxx
        );
    
    
    
}

btVector3
btPoint2PointConstraint.getPivotInA?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPivotInA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btPoint2PointConstraint.getInfo2NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    btTransform
    body0_trans
    
    ,
    in
    btTransform
    body1_trans
    
    
    )
{   
    
    
    CxxbtTransformConstRef body0_trans__cxx = Make_CxxbtTransformConstRef(body0_trans);
    
    CxxbtTransformConstRef body1_trans__cxx = Make_CxxbtTransformConstRef(body1_trans);
    
    this.cxx_getInfo2NonVirtual(
        info,
        body0_trans__cxx,
        body1_trans__cxx
        );
    
    
    
    
    
}

SInt32
btPoint2PointConstraint.getFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getFlags(
        );
    
    return __res;
}


btPoint2PointConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}


btPoint2PointConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    
    
    this.cxx_setParam(
        num,
        value,
        axis
        );
    
    
    
    
    
}


btPoint2PointConstraint.setPivotA!(
    in
    btVector3
    pivotA
    
    
    )
{   
    
    CxxbtVector3ConstRef pivotA__cxx = Make_CxxbtVector3ConstRef(pivotA);
    
    this.cxx_setPivotA(
        pivotA__cxx
        );
    
    
    
}

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
// 
///If no axis is provided, it uses the default axis for this constraint.

btPoint2PointConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    
    )
{   
    
    
    
    this.cxx_setParam(
        num,
        value
        );
    
    
    
    
}


btPoint2PointConstraint.getInfo1NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1NonVirtual(
        info
        );
    
    
    
}


btPoint2PointConstraint.buildJacobian!(
    )
{   
    
    this.cxx_buildJacobian(
        );
    
    
}

btVector3
btPoint2PointConstraint.getPivotInB?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPivotInB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btPoint2PointConstraint.getParam?(
    in
    SInt32
    num
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_getParam(
        num,
        axis
        );
    
    
    
    return __res;
}

///return the local value of parameter
Float32
btPoint2PointConstraint.getParam?(
    in
    SInt32
    num
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getParam(
        num
        );
    
    
    return __res;
}


btPoint2PointConstraint.updateRHS!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_updateRHS(
        timeStep
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraint] EDK[Fabric_EDK_KL_btPoint2PointConstraint] LIB[btPoint2PointConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPoint2PointConstraint.=(
    btPoint2PointConstraint that
    ) = "Bullet2__btPoint2PointConstraint__MU__simple_ass_op__2517c09d5404949f627d2850fd948a83";


/// \dfgPresetOmit
/// \internal
btPoint2PointConstraint.appendDesc(io String string) {
  string += "btPoint2PointConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintFloatData] EDK[Fabric_EDK_KL_btPoint2PointConstraintFloatData] LIB[btPoint2PointConstraintFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintFloatData] EDK[Fabric_EDK_KL_btPoint2PointConstraintFloatData] LIB[btPoint2PointConstraintFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintFloatData] EDK[Fabric_EDK_KL_btPoint2PointConstraintFloatData] LIB[btPoint2PointConstraintFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btPoint2PointConstraintFloatData() = "Bullet2__btPoint2PointConstraintFloatData__MU__empty_ctor__6932906a5ea7a81e64910b8f2097d0a7";

/// \dfgPresetOmit
btPoint2PointConstraintFloatData(
    btPoint2PointConstraintFloatData that
    ) = "Bullet2__btPoint2PointConstraintFloatData__MU__copy_ctor__f2f8628960591aaaf5fcffa683611924";

btPoint2PointConstraintFloatData.cxx_delete() = "Bullet2__btPoint2PointConstraintFloatData__MU__delete__233ca3d8a94bb23ca20e80b89bd69d60";

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintFloatData] EDK[Fabric_EDK_KL_btPoint2PointConstraintFloatData] LIB[btPoint2PointConstraintFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintFloatData] EDK[Fabric_EDK_KL_btPoint2PointConstraintFloatData] LIB[btPoint2PointConstraintFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintFloatData] EDK[Fabric_EDK_KL_btPoint2PointConstraintFloatData] LIB[btPoint2PointConstraintFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPoint2PointConstraintFloatData.=(
    btPoint2PointConstraintFloatData that
    ) = "Bullet2__btPoint2PointConstraintFloatData__MU__simple_ass_op__be65014af5ea0b5846453ec7ef52db39";


/// \dfgPresetOmit
/// \internal
btPoint2PointConstraintFloatData.appendDesc(io String string) {
  string += "btPoint2PointConstraintFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintDoubleData2] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData2] LIB[btPoint2PointConstraintDoubleData2 *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData2] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData2] LIB[btPoint2PointConstraintDoubleData2 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData2] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData2] LIB[btPoint2PointConstraintDoubleData2 *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btPoint2PointConstraintDoubleData2() = "Bullet2__btPoint2PointConstraintDoubleData2__MU__empty_ctor__2dec70d95ca74fa8aaab1c2aeaa7079c";

/// \dfgPresetOmit
btPoint2PointConstraintDoubleData2(
    btPoint2PointConstraintDoubleData2 that
    ) = "Bullet2__btPoint2PointConstraintDoubleData2__MU__copy_ctor__1c9bc881325b034a4b6ef316a069aaa5";

btPoint2PointConstraintDoubleData2.cxx_delete() = "Bullet2__btPoint2PointConstraintDoubleData2__MU__delete__8923f0e85e8870befdfa7e0d452eb95b";

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData2] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData2] LIB[btPoint2PointConstraintDoubleData2 *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData2] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData2] LIB[btPoint2PointConstraintDoubleData2 *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData2] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData2] LIB[btPoint2PointConstraintDoubleData2 *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPoint2PointConstraintDoubleData2.=(
    btPoint2PointConstraintDoubleData2 that
    ) = "Bullet2__btPoint2PointConstraintDoubleData2__MU__simple_ass_op__e0a389f9a46d182d14388cc2c21a0477";


/// \dfgPresetOmit
/// \internal
btPoint2PointConstraintDoubleData2.appendDesc(io String string) {
  string += "btPoint2PointConstraintDoubleData2:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btPoint2PointConstraintDoubleData] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData] LIB[btPoint2PointConstraintDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData] LIB[btPoint2PointConstraintDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData] LIB[btPoint2PointConstraintDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btPoint2PointConstraintDoubleData() = "Bullet2__btPoint2PointConstraintDoubleData__MU__empty_ctor__08234e57e4245c36ba53ada72b2b77ad";

/// \dfgPresetOmit
btPoint2PointConstraintDoubleData(
    btPoint2PointConstraintDoubleData that
    ) = "Bullet2__btPoint2PointConstraintDoubleData__MU__copy_ctor__637a8840d8ac9f1196c025d50fd5379c";

btPoint2PointConstraintDoubleData.cxx_delete() = "Bullet2__btPoint2PointConstraintDoubleData__MU__delete__29a439a8662c386d299df3519262dffc";

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData] LIB[btPoint2PointConstraintDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData] LIB[btPoint2PointConstraintDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btPoint2PointConstraintDoubleData] EDK[Fabric_EDK_KL_btPoint2PointConstraintDoubleData] LIB[btPoint2PointConstraintDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btPoint2PointConstraintDoubleData.=(
    btPoint2PointConstraintDoubleData that
    ) = "Bullet2__btPoint2PointConstraintDoubleData__MU__simple_ass_op__6ff9c88cf20e51dff6ed766778e0006c";


/// \dfgPresetOmit
/// \internal
btPoint2PointConstraintDoubleData.appendDesc(io String string) {
  string += "btPoint2PointConstraintDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSequentialImpulseConstraintSolver(
    btSequentialImpulseConstraintSolver that
    ) = "Bullet2__btSequentialImpulseConstraintSolver__MU__copy_ctor__e0888d481c34b039caa62dcb55addef3";

/// \dfgPresetOmit
/// \internal
btSequentialImpulseConstraintSolver.__ctor(
    ) = "Bullet2__btSequentialImpulseConstraintSolver__MU__ctor__d97d4119a173b6e1fc18d19969745dcb";

/// \dfgPresetOmit
btSequentialImpulseConstraintSolver(
    ) {
    this.__ctor(
        );
}

btSequentialImpulseConstraintSolver.cxx_delete() = "Bullet2__btSequentialImpulseConstraintSolver__MU__delete__370b1cc8a5afd4d506f967332912acf3";

//////////////////////////////////////////////////////////////////////////////
// KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///clear internal cached data and reset random seed
/// \dfgPresetOmit
/// \internal

btSequentialImpulseConstraintSolver.cxx_reset!(
    )
 = "Bullet2__btSequentialImpulseConstraintSolver__MU__meth_reset__c40cf9b1e94f3cfa54babc56b44e9262";

/// \dfgPresetOmit
/// \internal
UInt64
btSequentialImpulseConstraintSolver.cxx_btRand2!(
    )
 = "Bullet2__btSequentialImpulseConstraintSolver__MU__meth_btRand2__bceda11694c9efafe6cee0b2c38b0613";

/// \dfgPresetOmit
/// \internal
SInt32
btSequentialImpulseConstraintSolver.cxx_btRandInt2!(
    SInt32 n
    )
 = "Bullet2__btSequentialImpulseConstraintSolver__MU__meth_btRandInt2__5f3b6e12f83c59de8ba938f39a4e8b6c";

/// \dfgPresetOmit
/// \internal

btSequentialImpulseConstraintSolver.cxx_setRandSeed!(
    UInt64 seed
    )
 = "Bullet2__btSequentialImpulseConstraintSolver__MU__meth_setRandSeed__36a4b2e362758491406e8bdf251f6b0c";

/// \dfgPresetOmit
/// \internal
UInt64
btSequentialImpulseConstraintSolver.cxx_getRandSeed?(
    )
 = "Bullet2__btSequentialImpulseConstraintSolver__CO__meth_getRandSeed__50ecfdf248aee10db52add5f4fbf24ec";

/// \dfgPresetOmit
/// \internal
btConstraintSolverType
btSequentialImpulseConstraintSolver.cxx_getSolverType?(
    )
 = "Bullet2__btSequentialImpulseConstraintSolver__CO__meth_getSolverType__e461a9abf80a46b955b2e45a1571abf4";


btSequentialImpulseConstraintSolver.setRandSeed!(
    in
    UInt64
    seed
    
    
    )
{   
    
    
    this.cxx_setRandSeed(
        seed
        );
    
    
    
}

SInt32
btSequentialImpulseConstraintSolver.btRandInt2!(
    in
    SInt32
    n
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_btRandInt2(
        n
        );
    
    
    return __res;
}

UInt64
btSequentialImpulseConstraintSolver.btRand2!(
    )
{   
    UInt64 __res = 
    this.cxx_btRand2(
        );
    
    return __res;
}

UInt64
btSequentialImpulseConstraintSolver.getRandSeed?(
    )
{   
    UInt64 __res = 
    this.cxx_getRandSeed(
        );
    
    return __res;
}

btConstraintSolverType
btSequentialImpulseConstraintSolver.getSolverType?(
    )
{   
    btConstraintSolverType __res = 
    this.cxx_getSolverType(
        );
    
    return __res;
}

///clear internal cached data and reset random seed

btSequentialImpulseConstraintSolver.reset!(
    )
{   
    
    this.cxx_reset(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSequentialImpulseConstraintSolver] EDK[Fabric_EDK_KL_btSequentialImpulseConstraintSolver] LIB[btSequentialImpulseConstraintSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSequentialImpulseConstraintSolver.=(
    btSequentialImpulseConstraintSolver that
    ) = "Bullet2__btSequentialImpulseConstraintSolver__MU__simple_ass_op__6d6253739ef21052ef4958a9f75da717";


/// \dfgPresetOmit
/// \internal
btSequentialImpulseConstraintSolver.appendDesc(io String string) {
  string += "btSequentialImpulseConstraintSolver:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btNNCGConstraintSolver(
    btNNCGConstraintSolver that
    ) = "Bullet2__btNNCGConstraintSolver__MU__copy_ctor__ed0dbe510b891444717c69dd5a5e751b";

/// \dfgPresetOmit
/// \internal
btNNCGConstraintSolver.__ctor(
    ) = "Bullet2__btNNCGConstraintSolver__MU__ctor__79e11f03a768c663f440670aacffbd99";

/// \dfgPresetOmit
btNNCGConstraintSolver(
    ) {
    this.__ctor(
        );
}

btNNCGConstraintSolver.cxx_delete() = "Bullet2__btNNCGConstraintSolver__MU__delete__08205355e205532dec377c9f5c969211";

//////////////////////////////////////////////////////////////////////////////
// KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btConstraintSolverType
btNNCGConstraintSolver.cxx_getSolverType?(
    )
 = "Bullet2__btNNCGConstraintSolver__CO__meth_getSolverType__5ac3ceb801bb45c64a47591bd213e3a4";

btConstraintSolverType
btNNCGConstraintSolver.getSolverType?(
    )
{   
    btConstraintSolverType __res = 
    this.cxx_getSolverType(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btNNCGConstraintSolver] EDK[Fabric_EDK_KL_btNNCGConstraintSolver] LIB[btNNCGConstraintSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btNNCGConstraintSolver.=(
    btNNCGConstraintSolver that
    ) = "Bullet2__btNNCGConstraintSolver__MU__simple_ass_op__a51787a8686a9dbf29ab2f94e17a9812";


/// \dfgPresetOmit
/// \internal
btNNCGConstraintSolver.appendDesc(io String string) {
  string += "btNNCGConstraintSolver:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSliderConstraint() = "Bullet2__btSliderConstraint__MU__empty_ctor__6a84d2ca477f29e8ac30750a4769bf09";

/// \dfgPresetOmit
btSliderConstraint(
    btSliderConstraint that
    ) = "Bullet2__btSliderConstraint__MU__copy_ctor__22da3a9f1905a6469b942b3e49e9b5ff";

/// \dfgPresetOmit
/// \internal
btSliderConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameA
    ) = "Bullet2__btSliderConstraint__MU__ctor__f2ccc654680ae13a684dbae83b74427b";

/// \dfgPresetOmit
btSliderConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtTransformConstRef frameInA,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameA
    ) {
    this.__ctor(
        rbA,
        rbB,
        frameInA,
        frameInB,
        useLinearReferenceFrameA
        );
}

/// \dfgPresetOmit
/// \internal
btSliderConstraint.__ctor(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameA
    ) = "Bullet2__btSliderConstraint__MU__ctor__3486063e39fb72ede241803e646ceddb";

/// \dfgPresetOmit
btSliderConstraint(
    btRigidBody rbB,
    CxxbtTransformConstRef frameInB,
    Boolean useLinearReferenceFrameA
    ) {
    this.__ctor(
        rbB,
        frameInB,
        useLinearReferenceFrameA
        );
}

btSliderConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInA
    
    ,
    in
    btTransform
    frameInB
    
    ,
    in
    Boolean
    useLinearReferenceFrameA
    
    
    ) {
    
    
    
    CxxbtTransformConstRef frameInA__cxx = Make_CxxbtTransformConstRef(frameInA);
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    
    this.__ctor(
        rbA,
        rbB,
        frameInA__cxx,
        frameInB__cxx,
        useLinearReferenceFrameA
        );
    
    
    
    
    
}

btSliderConstraint(
    in
    btRigidBody
    rbB
    
    ,
    in
    btTransform
    frameInB
    
    ,
    in
    Boolean
    useLinearReferenceFrameA
    
    
    ) {
    
    
    CxxbtTransformConstRef frameInB__cxx = Make_CxxbtTransformConstRef(frameInB);
    
    this.__ctor(
        rbB,
        frameInB__cxx,
        useLinearReferenceFrameA
        );
    
    
    
}

btSliderConstraint.cxx_delete() = "Bullet2__btSliderConstraint__MU__delete__ce42b832de7a4940a92e4e814138db29";

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_getInfo1!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btSliderConstraint__MU__meth_getInfo1__5a6fe052f8deb59214fda90550231593";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_getInfo1NonVirtual!(
    btTypedConstraint_btConstraintInfo1 info
    )
 = "Bullet2__btSliderConstraint__MU__meth_getInfo1NonVirtual__f8a2567ccb7451d6e60112f8b0a8a1e2";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_getInfo2!(
    btTypedConstraint_btConstraintInfo2 info
    )
 = "Bullet2__btSliderConstraint__MU__meth_getInfo2__86e9bf82d01db4530d0a8d4c90665cfb";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_getInfo2NonVirtual!(
    btTypedConstraint_btConstraintInfo2 info,
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB,
    CxxbtVector3ConstRef linVelA,
    CxxbtVector3ConstRef linVelB,
    Float32 rbAinvMass,
    Float32 rbBinvMass
    )
 = "Bullet2__btSliderConstraint__MU__meth_getInfo2NonVirtual__1e089ac9954ef0556f98c991a601ac99";

/// \dfgPresetOmit
/// \internal
btRigidBody
btSliderConstraint.cxx_getRigidBodyA?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getRigidBodyA__6a8e40c31e93a319c46ec2a4e68758b1";

/// \dfgPresetOmit
/// \internal
btRigidBody
btSliderConstraint.cxx_getRigidBodyB?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getRigidBodyB__5e864c220ab8a9d673b9d46c7968af66";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btSliderConstraint.cxx_getCalculatedTransformA?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getCalculatedTransformA__f1898fabac2a26ccad2cdb6ffd9f0341";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btSliderConstraint.cxx_getCalculatedTransformB?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getCalculatedTransformB__7b09ff2bf323eb5af7ee63d1535c9077";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btSliderConstraint.cxx_getFrameOffsetA?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getFrameOffsetA__7a5568ae0f87186bf2df3c2f9b95847d";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btSliderConstraint.cxx_getFrameOffsetB?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getFrameOffsetB__46500655cf2969de517c569ca89a67d1";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btSliderConstraint.cxx_getFrameOffsetA!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getFrameOffsetA__158ffbc9806c55878a8e1c24658fd537";

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
btSliderConstraint.cxx_getFrameOffsetB!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getFrameOffsetB__76b70033a19d74836781c8215dc9e26e";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getLowerLinLimit!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getLowerLinLimit__dc783b5f06d41872cc6db7916e828112";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setLowerLinLimit!(
    Float32 lowerLimit
    )
 = "Bullet2__btSliderConstraint__MU__meth_setLowerLinLimit__71fd3c7684ec155f70bf88e2d379c0db";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getUpperLinLimit!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getUpperLinLimit__7f2b7f15fa3e5059f7c6bc938aa2a601";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setUpperLinLimit!(
    Float32 upperLimit
    )
 = "Bullet2__btSliderConstraint__MU__meth_setUpperLinLimit__6ef21a957e07e8095d73c62a500358e7";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getLowerAngLimit!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getLowerAngLimit__55e9f344093d2cf427431d2affafacc9";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setLowerAngLimit!(
    Float32 lowerLimit
    )
 = "Bullet2__btSliderConstraint__MU__meth_setLowerAngLimit__cd6fbbdf3e463ce097496063b887781c";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getUpperAngLimit!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getUpperAngLimit__50849fc509f0fd13941937652ab6f4b6";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setUpperAngLimit!(
    Float32 upperLimit
    )
 = "Bullet2__btSliderConstraint__MU__meth_setUpperAngLimit__007ecbade03b0ae541ea37f9367f4389";

/// \dfgPresetOmit
/// \internal
Boolean
btSliderConstraint.cxx_getUseLinearReferenceFrameA!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getUseLinearReferenceFrameA__250cd5f55afd44c71e626d36dd999a19";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getSoftnessDirLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getSoftnessDirLin__bb4c86fc4e2ff7a7dec79f2ce82bd161";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getRestitutionDirLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getRestitutionDirLin__0b02f07c00a0e55874d0f0b2d75877e1";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getDampingDirLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getDampingDirLin__7e1bd5b4cc13b2747bc1b45aef7290bb";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getSoftnessDirAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getSoftnessDirAng__51e9073515b4fe7bd45956eb9f7dc74c";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getRestitutionDirAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getRestitutionDirAng__ea4d30fd57e5729e4ab4a8fd21d85702";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getDampingDirAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getDampingDirAng__ee0471051a90e7964296e93efea4ec94";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getSoftnessLimLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getSoftnessLimLin__be2d112664ebb07091aa4cbdb3095d69";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getRestitutionLimLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getRestitutionLimLin__39a8cafd9f3cb329635720949f395ec6";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getDampingLimLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getDampingLimLin__2dc7fb930d571fd29929db2daef06b78";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getSoftnessLimAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getSoftnessLimAng__1b68a997af689e9a083c5d4982a06056";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getRestitutionLimAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getRestitutionLimAng__cb223111ce0d318256fb6e4bf3761da2";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getDampingLimAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getDampingLimAng__514ec5d2b0f05d72f3fd570be3b0803b";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getSoftnessOrthoLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getSoftnessOrthoLin__f459e1c7ffb2f5998e4aa6c3672d102c";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getRestitutionOrthoLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getRestitutionOrthoLin__3fab6bac5cb0f3574e1134e6c3ac4eaa";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getDampingOrthoLin!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getDampingOrthoLin__155d217c8c79532874b87588edccd47c";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getSoftnessOrthoAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getSoftnessOrthoAng__f38739a8e40da68ff41d4f5c2b06e74c";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getRestitutionOrthoAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getRestitutionOrthoAng__e4871db10dfc2ad2e757025aea506482";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getDampingOrthoAng!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getDampingOrthoAng__17ecc5e859ab607a96bdcb23f0db7948";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setSoftnessDirLin!(
    Float32 softnessDirLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setSoftnessDirLin__d2d07bb9276c5733fae310371b7b4ee5";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setRestitutionDirLin!(
    Float32 restitutionDirLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setRestitutionDirLin__b24d0f5d0ab57dacd39b9fea5f47931d";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setDampingDirLin!(
    Float32 dampingDirLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setDampingDirLin__e39cdc9b89233290b19573b8e3cfb498";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setSoftnessDirAng!(
    Float32 softnessDirAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setSoftnessDirAng__c75ad0f3016c7c21f1710a045f49df7a";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setRestitutionDirAng!(
    Float32 restitutionDirAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setRestitutionDirAng__1f3717b445ed6f62ad4077c98df04203";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setDampingDirAng!(
    Float32 dampingDirAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setDampingDirAng__83959fa7e14630ed63db1fae09ace73b";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setSoftnessLimLin!(
    Float32 softnessLimLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setSoftnessLimLin__e81e767ea40554bffda7befefa316e29";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setRestitutionLimLin!(
    Float32 restitutionLimLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setRestitutionLimLin__39f871e98cd9f747386bcafcfbfa4dfa";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setDampingLimLin!(
    Float32 dampingLimLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setDampingLimLin__d227cd210da5a933b4b691d688fcb782";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setSoftnessLimAng!(
    Float32 softnessLimAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setSoftnessLimAng__4fdeca8d1215cae1acba341dcbfd4a0d";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setRestitutionLimAng!(
    Float32 restitutionLimAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setRestitutionLimAng__fc91b7b1ad11e19f09476a34ddf4f0b3";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setDampingLimAng!(
    Float32 dampingLimAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setDampingLimAng__60f0299c14f39e054691021a15edead7";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setSoftnessOrthoLin!(
    Float32 softnessOrthoLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setSoftnessOrthoLin__7785ca69227586040d20f5e1342004d5";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setRestitutionOrthoLin!(
    Float32 restitutionOrthoLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setRestitutionOrthoLin__d9569ad8896e206a18cc0543899074de";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setDampingOrthoLin!(
    Float32 dampingOrthoLin
    )
 = "Bullet2__btSliderConstraint__MU__meth_setDampingOrthoLin__6b1dc52aba354ecfcf560d2a6503767e";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setSoftnessOrthoAng!(
    Float32 softnessOrthoAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setSoftnessOrthoAng__c145b89ae80ad2c5e0932ae917501022";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setRestitutionOrthoAng!(
    Float32 restitutionOrthoAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setRestitutionOrthoAng__9659bb6200f69503beb24463dd97be3f";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setDampingOrthoAng!(
    Float32 dampingOrthoAng
    )
 = "Bullet2__btSliderConstraint__MU__meth_setDampingOrthoAng__6c1fa4c0039f54f1cb7ea94985457fe8";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setPoweredLinMotor!(
    Boolean onOff
    )
 = "Bullet2__btSliderConstraint__MU__meth_setPoweredLinMotor__3bb5715670b232f8b6aca41a5b89a6ee";

/// \dfgPresetOmit
/// \internal
Boolean
btSliderConstraint.cxx_getPoweredLinMotor!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getPoweredLinMotor__08cc6288dff7c93e5e196ac48c07f4cd";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setTargetLinMotorVelocity!(
    Float32 targetLinMotorVelocity
    )
 = "Bullet2__btSliderConstraint__MU__meth_setTargetLinMotorVelocity__99d6743ddcce7b1c173b6131630f6a94";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getTargetLinMotorVelocity!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getTargetLinMotorVelocity__1483bb44b0f9a3a1ac40a57c8da64f92";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setMaxLinMotorForce!(
    Float32 maxLinMotorForce
    )
 = "Bullet2__btSliderConstraint__MU__meth_setMaxLinMotorForce__616e0bd45ea27db59d46e9f4001b4051";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getMaxLinMotorForce!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getMaxLinMotorForce__840eaa2ecfdb47d9c5d43db4ea66fed2";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setPoweredAngMotor!(
    Boolean onOff
    )
 = "Bullet2__btSliderConstraint__MU__meth_setPoweredAngMotor__b44b844b926eac91853b2943b0478add";

/// \dfgPresetOmit
/// \internal
Boolean
btSliderConstraint.cxx_getPoweredAngMotor!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getPoweredAngMotor__de5a07e0a72f9aa6b7a9c5e2d82a437e";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setTargetAngMotorVelocity!(
    Float32 targetAngMotorVelocity
    )
 = "Bullet2__btSliderConstraint__MU__meth_setTargetAngMotorVelocity__470c66b966da81669bc44ebe903262df";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getTargetAngMotorVelocity!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getTargetAngMotorVelocity__6535c75a1fd9ea115be0bde2a1b857ce";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setMaxAngMotorForce!(
    Float32 maxAngMotorForce
    )
 = "Bullet2__btSliderConstraint__MU__meth_setMaxAngMotorForce__72c92139b55cf78b973837fec1d18ea3";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getMaxAngMotorForce!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getMaxAngMotorForce__83d110210926e2455fecb87effbba84e";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getLinearPos?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getLinearPos__fffbe9c54f07d06719c7db6b63cb4424";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getAngularPos?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getAngularPos__9457189f5b0e4b3d7b950ca02ceb1f5e";

/// \dfgPresetOmit
/// \internal
Boolean
btSliderConstraint.cxx_getSolveLinLimit!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getSolveLinLimit__47feb0613a564a3fbdc6a173493b5738";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getLinDepth!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getLinDepth__d1b60c0d9600d07be3c7fe887bcdf7d4";

/// \dfgPresetOmit
/// \internal
Boolean
btSliderConstraint.cxx_getSolveAngLimit!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getSolveAngLimit__6f0e73c02f2cdaaf52f2b30b940eb668";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getAngDepth!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getAngDepth__03425ad702030a891fe0da135b0565e3";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_calculateTransforms!(
    CxxbtTransformConstRef transA,
    CxxbtTransformConstRef transB
    )
 = "Bullet2__btSliderConstraint__MU__meth_calculateTransforms__eed63c9d614368bce5d94d6d1e14dfae";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_testLinLimits!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_testLinLimits__f531c850c2b3c8aac37a7c557fdc35e2";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_testAngLimits!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_testAngLimits__03fdbe862779a54b211ffb8237e1a424";

/// \dfgPresetOmit
/// \internal
btVector3
btSliderConstraint.cxx_getAncorInA!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getAncorInA__47629c4f293d4c69036d216134aa69c5";

/// \dfgPresetOmit
/// \internal
btVector3
btSliderConstraint.cxx_getAncorInB!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getAncorInB__c7666d1245de2899960b9ab17738b425";

/// \dfgPresetOmit
/// \internal
Boolean
btSliderConstraint.cxx_getUseFrameOffset!(
    )
 = "Bullet2__btSliderConstraint__MU__meth_getUseFrameOffset__ce2678bc5de7d6ad5655261b89c4ce72";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setUseFrameOffset!(
    Boolean frameOffsetOnOff
    )
 = "Bullet2__btSliderConstraint__MU__meth_setUseFrameOffset__9dd584469b5f53dcb99f2b2859eea084";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setFrames!(
    CxxbtTransformConstRef frameA,
    CxxbtTransformConstRef frameB
    )
 = "Bullet2__btSliderConstraint__MU__meth_setFrames__09731842bcb6d8f19240f2036e3295e3";

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
// 
///If no axis is provided, it uses the default axis for this constraint.
/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value
    )
 = "Bullet2__btSliderConstraint__MU__meth_setParam__61c479b63ccd519e6b474dd33eac95b8";

/// \dfgPresetOmit
/// \internal

btSliderConstraint.cxx_setParam!(
    SInt32 num,
    Float32 value,
    SInt32 axis
    )
 = "Bullet2__btSliderConstraint__MU__meth_setParam__76d950b877d1f367b9e5216bf9c70925";

///return the local value of parameter
/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getParam?(
    SInt32 num
    )
 = "Bullet2__btSliderConstraint__CO__meth_getParam__ff9d9370fddbdf15725f880608e67f0d";

/// \dfgPresetOmit
/// \internal
Float32
btSliderConstraint.cxx_getParam?(
    SInt32 num,
    SInt32 axis
    )
 = "Bullet2__btSliderConstraint__CO__meth_getParam__338c2de852cc99c897d21b5d494c2ab4";

/// \dfgPresetOmit
/// \internal
SInt32
btSliderConstraint.cxx_getFlags?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_getFlags__1e090bd92be1e058d2d439be172f8657";

/// \dfgPresetOmit
/// \internal
SInt32
btSliderConstraint.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btSliderConstraint__CO__meth_calculateSerializeBufferSize__76be7b313fac5322721be2fde4571d3b";


btSliderConstraint.setSoftnessDirLin!(
    in
    Float32
    softnessDirLin
    
    
    )
{   
    
    
    this.cxx_setSoftnessDirLin(
        softnessDirLin
        );
    
    
    
}

Boolean
btSliderConstraint.getUseFrameOffset!(
    )
{   
    Boolean __res = 
    this.cxx_getUseFrameOffset(
        );
    
    return __res;
}

Float32
btSliderConstraint.getRestitutionOrthoAng!(
    )
{   
    Float32 __res = 
    this.cxx_getRestitutionOrthoAng(
        );
    
    return __res;
}

Float32
btSliderConstraint.getRestitutionOrthoLin!(
    )
{   
    Float32 __res = 
    this.cxx_getRestitutionOrthoLin(
        );
    
    return __res;
}

Float32
btSliderConstraint.getDampingDirAng!(
    )
{   
    Float32 __res = 
    this.cxx_getDampingDirAng(
        );
    
    return __res;
}

Float32
btSliderConstraint.getLinDepth!(
    )
{   
    Float32 __res = 
    this.cxx_getLinDepth(
        );
    
    return __res;
}

Float32
btSliderConstraint.getSoftnessLimAng!(
    )
{   
    Float32 __res = 
    this.cxx_getSoftnessLimAng(
        );
    
    return __res;
}


btSliderConstraint.setDampingOrthoAng!(
    in
    Float32
    dampingOrthoAng
    
    
    )
{   
    
    
    this.cxx_setDampingOrthoAng(
        dampingOrthoAng
        );
    
    
    
}


btSliderConstraint.setSoftnessDirAng!(
    in
    Float32
    softnessDirAng
    
    
    )
{   
    
    
    this.cxx_setSoftnessDirAng(
        softnessDirAng
        );
    
    
    
}

Boolean
btSliderConstraint.getPoweredAngMotor!(
    )
{   
    Boolean __res = 
    this.cxx_getPoweredAngMotor(
        );
    
    return __res;
}


btSliderConstraint.setDampingDirLin!(
    in
    Float32
    dampingDirLin
    
    
    )
{   
    
    
    this.cxx_setDampingDirLin(
        dampingDirLin
        );
    
    
    
}

SInt32
btSliderConstraint.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

Boolean
btSliderConstraint.getSolveLinLimit!(
    )
{   
    Boolean __res = 
    this.cxx_getSolveLinLimit(
        );
    
    return __res;
}


btSliderConstraint.setUseFrameOffset!(
    in
    Boolean
    frameOffsetOnOff
    
    
    )
{   
    
    
    this.cxx_setUseFrameOffset(
        frameOffsetOnOff
        );
    
    
    
}


btSliderConstraint.setTargetLinMotorVelocity!(
    in
    Float32
    targetLinMotorVelocity
    
    
    )
{   
    
    
    this.cxx_setTargetLinMotorVelocity(
        targetLinMotorVelocity
        );
    
    
    
}

btVector3
btSliderConstraint.getAncorInB!(
    )
{   
    btVector3 __res = 
    this.cxx_getAncorInB(
        );
    
    return __res;
}


btSliderConstraint.setLowerAngLimit!(
    in
    Float32
    lowerLimit
    
    
    )
{   
    
    
    this.cxx_setLowerAngLimit(
        lowerLimit
        );
    
    
    
}


btSliderConstraint.getInfo1!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1(
        info
        );
    
    
    
}


btSliderConstraint.setDampingDirAng!(
    in
    Float32
    dampingDirAng
    
    
    )
{   
    
    
    this.cxx_setDampingDirAng(
        dampingDirAng
        );
    
    
    
}

Float32
btSliderConstraint.getDampingLimAng!(
    )
{   
    Float32 __res = 
    this.cxx_getDampingLimAng(
        );
    
    return __res;
}


btSliderConstraint.setLowerLinLimit!(
    in
    Float32
    lowerLimit
    
    
    )
{   
    
    
    this.cxx_setLowerLinLimit(
        lowerLimit
        );
    
    
    
}

btRigidBody
btSliderConstraint.getRigidBodyA?(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBodyA(
        );
    
    return __res;
}


btSliderConstraint.setRestitutionLimAng!(
    in
    Float32
    restitutionLimAng
    
    
    )
{   
    
    
    this.cxx_setRestitutionLimAng(
        restitutionLimAng
        );
    
    
    
}

Float32
btSliderConstraint.getDampingLimLin!(
    )
{   
    Float32 __res = 
    this.cxx_getDampingLimLin(
        );
    
    return __res;
}


btSliderConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    
    
    this.cxx_setParam(
        num,
        value,
        axis
        );
    
    
    
    
    
}

Float32
btSliderConstraint.getDampingOrthoAng!(
    )
{   
    Float32 __res = 
    this.cxx_getDampingOrthoAng(
        );
    
    return __res;
}


btSliderConstraint.setRestitutionDirLin!(
    in
    Float32
    restitutionDirLin
    
    
    )
{   
    
    
    this.cxx_setRestitutionDirLin(
        restitutionDirLin
        );
    
    
    
}

Float32
btSliderConstraint.getMaxLinMotorForce!(
    )
{   
    Float32 __res = 
    this.cxx_getMaxLinMotorForce(
        );
    
    return __res;
}

btTransform
btSliderConstraint.getFrameOffsetB?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getFrameOffsetB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

///return the local value of parameter
Float32
btSliderConstraint.getParam?(
    in
    SInt32
    num
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getParam(
        num
        );
    
    
    return __res;
}


btSliderConstraint.setUpperAngLimit!(
    in
    Float32
    upperLimit
    
    
    )
{   
    
    
    this.cxx_setUpperAngLimit(
        upperLimit
        );
    
    
    
}

Float32
btSliderConstraint.getTargetAngMotorVelocity!(
    )
{   
    Float32 __res = 
    this.cxx_getTargetAngMotorVelocity(
        );
    
    return __res;
}


btSliderConstraint.setSoftnessOrthoLin!(
    in
    Float32
    softnessOrthoLin
    
    
    )
{   
    
    
    this.cxx_setSoftnessOrthoLin(
        softnessOrthoLin
        );
    
    
    
}

btRigidBody
btSliderConstraint.getRigidBodyB?(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBodyB(
        );
    
    return __res;
}

btVector3
btSliderConstraint.getAncorInA!(
    )
{   
    btVector3 __res = 
    this.cxx_getAncorInA(
        );
    
    return __res;
}


btSliderConstraint.setMaxLinMotorForce!(
    in
    Float32
    maxLinMotorForce
    
    
    )
{   
    
    
    this.cxx_setMaxLinMotorForce(
        maxLinMotorForce
        );
    
    
    
}

Float32
btSliderConstraint.getRestitutionLimLin!(
    )
{   
    Float32 __res = 
    this.cxx_getRestitutionLimLin(
        );
    
    return __res;
}


btSliderConstraint.getInfo2!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    
    )
{   
    
    
    this.cxx_getInfo2(
        info
        );
    
    
    
}

Float32
btSliderConstraint.getSoftnessOrthoAng!(
    )
{   
    Float32 __res = 
    this.cxx_getSoftnessOrthoAng(
        );
    
    return __res;
}


btSliderConstraint.setRestitutionDirAng!(
    in
    Float32
    restitutionDirAng
    
    
    )
{   
    
    
    this.cxx_setRestitutionDirAng(
        restitutionDirAng
        );
    
    
    
}

Float32
btSliderConstraint.getSoftnessOrthoLin!(
    )
{   
    Float32 __res = 
    this.cxx_getSoftnessOrthoLin(
        );
    
    return __res;
}

Float32
btSliderConstraint.getSoftnessLimLin!(
    )
{   
    Float32 __res = 
    this.cxx_getSoftnessLimLin(
        );
    
    return __res;
}

Float32
btSliderConstraint.getMaxAngMotorForce!(
    )
{   
    Float32 __res = 
    this.cxx_getMaxAngMotorForce(
        );
    
    return __res;
}


btSliderConstraint.setRestitutionLimLin!(
    in
    Float32
    restitutionLimLin
    
    
    )
{   
    
    
    this.cxx_setRestitutionLimLin(
        restitutionLimLin
        );
    
    
    
}


btSliderConstraint.testAngLimits!(
    )
{   
    
    this.cxx_testAngLimits(
        );
    
    
}

///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
// 
///If no axis is provided, it uses the default axis for this constraint.

btSliderConstraint.setParam!(
    in
    SInt32
    num
    
    ,
    in
    Float32
    value
    
    
    )
{   
    
    
    
    this.cxx_setParam(
        num,
        value
        );
    
    
    
    
}

Float32
btSliderConstraint.getRestitutionDirAng!(
    )
{   
    Float32 __res = 
    this.cxx_getRestitutionDirAng(
        );
    
    return __res;
}

Float32
btSliderConstraint.getSoftnessDirAng!(
    )
{   
    Float32 __res = 
    this.cxx_getSoftnessDirAng(
        );
    
    return __res;
}


btSliderConstraint.setDampingLimLin!(
    in
    Float32
    dampingLimLin
    
    
    )
{   
    
    
    this.cxx_setDampingLimLin(
        dampingLimLin
        );
    
    
    
}

Float32
btSliderConstraint.getParam?(
    in
    SInt32
    num
    
    ,
    in
    SInt32
    axis
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_getParam(
        num,
        axis
        );
    
    
    
    return __res;
}

Float32
btSliderConstraint.getTargetLinMotorVelocity!(
    )
{   
    Float32 __res = 
    this.cxx_getTargetLinMotorVelocity(
        );
    
    return __res;
}

SInt32
btSliderConstraint.getFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getFlags(
        );
    
    return __res;
}

btTransform
btSliderConstraint.getCalculatedTransformB?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getCalculatedTransformB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btSliderConstraint.getInfo1NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo1
    info
    
    
    )
{   
    
    
    this.cxx_getInfo1NonVirtual(
        info
        );
    
    
    
}

Boolean
btSliderConstraint.getUseLinearReferenceFrameA!(
    )
{   
    Boolean __res = 
    this.cxx_getUseLinearReferenceFrameA(
        );
    
    return __res;
}


btSliderConstraint.setSoftnessLimLin!(
    in
    Float32
    softnessLimLin
    
    
    )
{   
    
    
    this.cxx_setSoftnessLimLin(
        softnessLimLin
        );
    
    
    
}

Float32
btSliderConstraint.getSoftnessDirLin!(
    )
{   
    Float32 __res = 
    this.cxx_getSoftnessDirLin(
        );
    
    return __res;
}


btSliderConstraint.setUpperLinLimit!(
    in
    Float32
    upperLimit
    
    
    )
{   
    
    
    this.cxx_setUpperLinLimit(
        upperLimit
        );
    
    
    
}

Float32
btSliderConstraint.getDampingOrthoLin!(
    )
{   
    Float32 __res = 
    this.cxx_getDampingOrthoLin(
        );
    
    return __res;
}

Float32
btSliderConstraint.getLinearPos?(
    )
{   
    Float32 __res = 
    this.cxx_getLinearPos(
        );
    
    return __res;
}


btSliderConstraint.calculateTransforms!(
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    
    )
{   
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    this.cxx_calculateTransforms(
        transA__cxx,
        transB__cxx
        );
    
    
    
    
}

Float32
btSliderConstraint.getLowerAngLimit!(
    )
{   
    Float32 __res = 
    this.cxx_getLowerAngLimit(
        );
    
    return __res;
}


btSliderConstraint.setRestitutionOrthoLin!(
    in
    Float32
    restitutionOrthoLin
    
    
    )
{   
    
    
    this.cxx_setRestitutionOrthoLin(
        restitutionOrthoLin
        );
    
    
    
}


btSliderConstraint.setRestitutionOrthoAng!(
    in
    Float32
    restitutionOrthoAng
    
    
    )
{   
    
    
    this.cxx_setRestitutionOrthoAng(
        restitutionOrthoAng
        );
    
    
    
}


btSliderConstraint.setPoweredLinMotor!(
    in
    Boolean
    onOff
    
    
    )
{   
    
    
    this.cxx_setPoweredLinMotor(
        onOff
        );
    
    
    
}

Float32
btSliderConstraint.getDampingDirLin!(
    )
{   
    Float32 __res = 
    this.cxx_getDampingDirLin(
        );
    
    return __res;
}

Boolean
btSliderConstraint.getPoweredLinMotor!(
    )
{   
    Boolean __res = 
    this.cxx_getPoweredLinMotor(
        );
    
    return __res;
}


btSliderConstraint.setFrames!(
    in
    btTransform
    frameA
    
    ,
    in
    btTransform
    frameB
    
    
    )
{   
    
    CxxbtTransformConstRef frameA__cxx = Make_CxxbtTransformConstRef(frameA);
    
    CxxbtTransformConstRef frameB__cxx = Make_CxxbtTransformConstRef(frameB);
    
    this.cxx_setFrames(
        frameA__cxx,
        frameB__cxx
        );
    
    
    
    
}

btTransform
btSliderConstraint.getFrameOffsetA?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getFrameOffsetA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

btTransform
btSliderConstraint.getCalculatedTransformA?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getCalculatedTransformA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btSliderConstraint.getLowerLinLimit!(
    )
{   
    Float32 __res = 
    this.cxx_getLowerLinLimit(
        );
    
    return __res;
}


btSliderConstraint.testLinLimits!(
    )
{   
    
    this.cxx_testLinLimits(
        );
    
    
}

Boolean
btSliderConstraint.getSolveAngLimit!(
    )
{   
    Boolean __res = 
    this.cxx_getSolveAngLimit(
        );
    
    return __res;
}

Float32
btSliderConstraint.getUpperAngLimit!(
    )
{   
    Float32 __res = 
    this.cxx_getUpperAngLimit(
        );
    
    return __res;
}


btSliderConstraint.setSoftnessLimAng!(
    in
    Float32
    softnessLimAng
    
    
    )
{   
    
    
    this.cxx_setSoftnessLimAng(
        softnessLimAng
        );
    
    
    
}

Float32
btSliderConstraint.getRestitutionDirLin!(
    )
{   
    Float32 __res = 
    this.cxx_getRestitutionDirLin(
        );
    
    return __res;
}


btSliderConstraint.setTargetAngMotorVelocity!(
    in
    Float32
    targetAngMotorVelocity
    
    
    )
{   
    
    
    this.cxx_setTargetAngMotorVelocity(
        targetAngMotorVelocity
        );
    
    
    
}


btSliderConstraint.setMaxAngMotorForce!(
    in
    Float32
    maxAngMotorForce
    
    
    )
{   
    
    
    this.cxx_setMaxAngMotorForce(
        maxAngMotorForce
        );
    
    
    
}


btSliderConstraint.setDampingOrthoLin!(
    in
    Float32
    dampingOrthoLin
    
    
    )
{   
    
    
    this.cxx_setDampingOrthoLin(
        dampingOrthoLin
        );
    
    
    
}


btSliderConstraint.setSoftnessOrthoAng!(
    in
    Float32
    softnessOrthoAng
    
    
    )
{   
    
    
    this.cxx_setSoftnessOrthoAng(
        softnessOrthoAng
        );
    
    
    
}


btSliderConstraint.setDampingLimAng!(
    in
    Float32
    dampingLimAng
    
    
    )
{   
    
    
    this.cxx_setDampingLimAng(
        dampingLimAng
        );
    
    
    
}


btSliderConstraint.getInfo2NonVirtual!(
    in
    btTypedConstraint_btConstraintInfo2
    info
    
    ,
    in
    btTransform
    transA
    
    ,
    in
    btTransform
    transB
    
    ,
    in
    btVector3
    linVelA
    
    ,
    in
    btVector3
    linVelB
    
    ,
    in
    Float32
    rbAinvMass
    
    ,
    in
    Float32
    rbBinvMass
    
    
    )
{   
    
    
    CxxbtTransformConstRef transA__cxx = Make_CxxbtTransformConstRef(transA);
    
    CxxbtTransformConstRef transB__cxx = Make_CxxbtTransformConstRef(transB);
    
    CxxbtVector3ConstRef linVelA__cxx = Make_CxxbtVector3ConstRef(linVelA);
    
    CxxbtVector3ConstRef linVelB__cxx = Make_CxxbtVector3ConstRef(linVelB);
    
    
    
    this.cxx_getInfo2NonVirtual(
        info,
        transA__cxx,
        transB__cxx,
        linVelA__cxx,
        linVelB__cxx,
        rbAinvMass,
        rbBinvMass
        );
    
    
    
    
    
    
    
    
    
}

Float32
btSliderConstraint.getRestitutionLimAng!(
    )
{   
    Float32 __res = 
    this.cxx_getRestitutionLimAng(
        );
    
    return __res;
}

Float32
btSliderConstraint.getAngularPos?(
    )
{   
    Float32 __res = 
    this.cxx_getAngularPos(
        );
    
    return __res;
}


btSliderConstraint.setPoweredAngMotor!(
    in
    Boolean
    onOff
    
    
    )
{   
    
    
    this.cxx_setPoweredAngMotor(
        onOff
        );
    
    
    
}

Float32
btSliderConstraint.getAngDepth!(
    )
{   
    Float32 __res = 
    this.cxx_getAngDepth(
        );
    
    return __res;
}

Float32
btSliderConstraint.getUpperLinLimit!(
    )
{   
    Float32 __res = 
    this.cxx_getUpperLinLimit(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraint] EDK[Fabric_EDK_KL_btSliderConstraint] LIB[btSliderConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSliderConstraint.=(
    btSliderConstraint that
    ) = "Bullet2__btSliderConstraint__MU__simple_ass_op__253067ee01def1e28208b22bdf16623f";


/// \dfgPresetOmit
/// \internal
btSliderConstraint.appendDesc(io String string) {
  string += "btSliderConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraintData] EDK[Fabric_EDK_KL_btSliderConstraintData] LIB[btSliderConstraintData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintData] EDK[Fabric_EDK_KL_btSliderConstraintData] LIB[btSliderConstraintData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintData] EDK[Fabric_EDK_KL_btSliderConstraintData] LIB[btSliderConstraintData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSliderConstraintData() = "Bullet2__btSliderConstraintData__MU__empty_ctor__5d530ac19db4063508d139ed96c28415";

/// \dfgPresetOmit
btSliderConstraintData(
    btSliderConstraintData that
    ) = "Bullet2__btSliderConstraintData__MU__copy_ctor__62689c9ca4a0ec013f67f016e501ddf8";

btSliderConstraintData.cxx_delete() = "Bullet2__btSliderConstraintData__MU__delete__fe40fbcb62e14b2407f9707469a85b2b";

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintData] EDK[Fabric_EDK_KL_btSliderConstraintData] LIB[btSliderConstraintData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintData] EDK[Fabric_EDK_KL_btSliderConstraintData] LIB[btSliderConstraintData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintData] EDK[Fabric_EDK_KL_btSliderConstraintData] LIB[btSliderConstraintData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSliderConstraintData.=(
    btSliderConstraintData that
    ) = "Bullet2__btSliderConstraintData__MU__simple_ass_op__b1457e3786ad4c3e946f8536d9631dd6";


/// \dfgPresetOmit
/// \internal
btSliderConstraintData.appendDesc(io String string) {
  string += "btSliderConstraintData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSliderConstraintDoubleData] EDK[Fabric_EDK_KL_btSliderConstraintDoubleData] LIB[btSliderConstraintDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintDoubleData] EDK[Fabric_EDK_KL_btSliderConstraintDoubleData] LIB[btSliderConstraintDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintDoubleData] EDK[Fabric_EDK_KL_btSliderConstraintDoubleData] LIB[btSliderConstraintDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSliderConstraintDoubleData() = "Bullet2__btSliderConstraintDoubleData__MU__empty_ctor__6e49e0e600e14970ecee9c38030b691f";

/// \dfgPresetOmit
btSliderConstraintDoubleData(
    btSliderConstraintDoubleData that
    ) = "Bullet2__btSliderConstraintDoubleData__MU__copy_ctor__847adefd1f053664317ccaac2442b3df";

btSliderConstraintDoubleData.cxx_delete() = "Bullet2__btSliderConstraintDoubleData__MU__delete__349e1c8a850e38851eddf9805592a34c";

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintDoubleData] EDK[Fabric_EDK_KL_btSliderConstraintDoubleData] LIB[btSliderConstraintDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintDoubleData] EDK[Fabric_EDK_KL_btSliderConstraintDoubleData] LIB[btSliderConstraintDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSliderConstraintDoubleData] EDK[Fabric_EDK_KL_btSliderConstraintDoubleData] LIB[btSliderConstraintDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSliderConstraintDoubleData.=(
    btSliderConstraintDoubleData that
    ) = "Bullet2__btSliderConstraintDoubleData__MU__simple_ass_op__8c8e7288d9abbc7e79f30cbecd8e58d9";


/// \dfgPresetOmit
/// \internal
btSliderConstraintDoubleData.appendDesc(io String string) {
  string += "btSliderConstraintDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolve2LinearConstraint] EDK[Fabric_EDK_KL_btSolve2LinearConstraint] LIB[btSolve2LinearConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolve2LinearConstraint] EDK[Fabric_EDK_KL_btSolve2LinearConstraint] LIB[btSolve2LinearConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolve2LinearConstraint] EDK[Fabric_EDK_KL_btSolve2LinearConstraint] LIB[btSolve2LinearConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSolve2LinearConstraint() = "Bullet2__btSolve2LinearConstraint__MU__empty_ctor__e5ad6c6a65bc88a960d4893f374bf98f";

/// \dfgPresetOmit
btSolve2LinearConstraint(
    btSolve2LinearConstraint that
    ) = "Bullet2__btSolve2LinearConstraint__MU__copy_ctor__a66989dbd3b61f3bdb00568444f05225";

/// \dfgPresetOmit
/// \internal
btSolve2LinearConstraint.__ctor(
    Float32 tau,
    Float32 damping
    ) = "Bullet2__btSolve2LinearConstraint__MU__ctor__d84c16531b8bfaa1e05ef93fe38814b5";

/// \dfgPresetOmit
btSolve2LinearConstraint(
    Float32 tau,
    Float32 damping
    ) {
    this.__ctor(
        tau,
        damping
        );
}

btSolve2LinearConstraint.cxx_delete() = "Bullet2__btSolve2LinearConstraint__MU__delete__61f71ce7b72f48aad1e9025ed305a84d";

//////////////////////////////////////////////////////////////////////////////
// KL[btSolve2LinearConstraint] EDK[Fabric_EDK_KL_btSolve2LinearConstraint] LIB[btSolve2LinearConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolve2LinearConstraint] EDK[Fabric_EDK_KL_btSolve2LinearConstraint] LIB[btSolve2LinearConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolve2LinearConstraint] EDK[Fabric_EDK_KL_btSolve2LinearConstraint] LIB[btSolve2LinearConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSolve2LinearConstraint.=(
    btSolve2LinearConstraint that
    ) = "Bullet2__btSolve2LinearConstraint__MU__simple_ass_op__c3817f2a9ec696872feaca01bf3e0c65";


/// \dfgPresetOmit
/// \internal
btSolve2LinearConstraint.appendDesc(io String string) {
  string += "btSolve2LinearConstraint:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSolverBody() = "Bullet2__btSolverBody__MU__empty_ctor__5ed157801c61147416e658329e47f875";

/// \dfgPresetOmit
btSolverBody(
    btSolverBody that
    ) = "Bullet2__btSolverBody__MU__copy_ctor__8f694128a424ba70f6e8ef598dbcc019";

btSolverBody.cxx_delete() = "Bullet2__btSolverBody__MU__delete__fd91dc2cb40ddf29855fbcd823f9cfc0";

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_setWorldTransform!(
    CxxbtTransformConstRef worldTransform
    )
 = "Bullet2__btSolverBody__MU__meth_setWorldTransform__0e03ace1cb8d7529c2d8a0adf9b1adde";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btSolverBody.cxx_getWorldTransform?(
    )
 = "Bullet2__btSolverBody__CO__meth_getWorldTransform__0ebcbc87156341986f944e1bec20e3cd";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_getVelocityInLocalPointNoDelta?(
    CxxbtVector3ConstRef rel_pos,
    CxxbtVector3Ref velocity
    )
 = "Bullet2__btSolverBody__CO__meth_getVelocityInLocalPointNoDelta__dbcab2a66eaf3a997677ead3d3be035c";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_getVelocityInLocalPointObsolete?(
    CxxbtVector3ConstRef rel_pos,
    CxxbtVector3Ref velocity
    )
 = "Bullet2__btSolverBody__CO__meth_getVelocityInLocalPointObsolete__e84801a333372556f768bf7ce83b52d8";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_getAngularVelocity?(
    CxxbtVector3Ref angVel
    )
 = "Bullet2__btSolverBody__CO__meth_getAngularVelocity__a7cab6c08996da7ffe6f567d7a808be7";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_internalApplyPushImpulse!(
    CxxbtVector3ConstRef linearComponent,
    CxxbtVector3ConstRef angularComponent,
    Float32 impulseMagnitude
    )
 = "Bullet2__btSolverBody__MU__meth_internalApplyPushImpulse__4bb830cfbe2854bd9bca5d5abd1b5f4f";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSolverBody.cxx_getDeltaLinearVelocity?(
    )
 = "Bullet2__btSolverBody__CO__meth_getDeltaLinearVelocity__0b3dbd17a6f86fb89f15518c370d5c51";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSolverBody.cxx_getDeltaAngularVelocity?(
    )
 = "Bullet2__btSolverBody__CO__meth_getDeltaAngularVelocity__b80e8c19901f3270956fbde52b8737b8";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSolverBody.cxx_getPushVelocity?(
    )
 = "Bullet2__btSolverBody__CO__meth_getPushVelocity__9e80369e009c10400b62bc4ea17b893b";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSolverBody.cxx_getTurnVelocity?(
    )
 = "Bullet2__btSolverBody__CO__meth_getTurnVelocity__8ea4c244b9ef77447a826d11c0921fbc";

////////////////////////////////////////////////
///some internal methods, don't use them
/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref
btSolverBody.cxx_internalGetDeltaLinearVelocity!(
    )
 = "Bullet2__btSolverBody__MU__meth_internalGetDeltaLinearVelocity__2beda2d8c98a8282ff98a793107c4e54";

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref
btSolverBody.cxx_internalGetDeltaAngularVelocity!(
    )
 = "Bullet2__btSolverBody__MU__meth_internalGetDeltaAngularVelocity__bdf7e252f4c53672bb127821ddaf331d";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSolverBody.cxx_internalGetAngularFactor?(
    )
 = "Bullet2__btSolverBody__CO__meth_internalGetAngularFactor__54ba66e655abbaffa36bf708b4cca6f3";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSolverBody.cxx_internalGetInvMass?(
    )
 = "Bullet2__btSolverBody__CO__meth_internalGetInvMass__ab30b419b134342c6142914f3fb18b9c";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_internalSetInvMass!(
    CxxbtVector3ConstRef invMass
    )
 = "Bullet2__btSolverBody__MU__meth_internalSetInvMass__53593d38da47634b6d9bce01522b7685";

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref
btSolverBody.cxx_internalGetPushVelocity!(
    )
 = "Bullet2__btSolverBody__MU__meth_internalGetPushVelocity__9195fe284127c7b1a74c6e4c7d186ab6";

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref
btSolverBody.cxx_internalGetTurnVelocity!(
    )
 = "Bullet2__btSolverBody__MU__meth_internalGetTurnVelocity__5e83b83fcbef40dadb190b5b9bd8854f";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_internalGetVelocityInLocalPointObsolete?(
    CxxbtVector3ConstRef rel_pos,
    CxxbtVector3Ref velocity
    )
 = "Bullet2__btSolverBody__CO__meth_internalGetVelocityInLocalPointObsolete__fa9b0f42917f4c959f456f1af47b1d72";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_internalGetAngularVelocity?(
    CxxbtVector3Ref angVel
    )
 = "Bullet2__btSolverBody__CO__meth_internalGetAngularVelocity__b3c9ab62df303a9eb923c2f096f830cc";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_writebackVelocity!(
    )
 = "Bullet2__btSolverBody__MU__meth_writebackVelocity__978b68fb700d30790b0b9c9fb4eaf895";

/// \dfgPresetOmit
/// \internal

btSolverBody.cxx_writebackVelocityAndTransform!(
    Float32 timeStep,
    Float32 splitImpulseTurnErp
    )
 = "Bullet2__btSolverBody__MU__meth_writebackVelocityAndTransform__246175d9c064db5f2485ed853e74f38c";

btVector3
btSolverBody.internalGetAngularFactor?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_internalGetAngularFactor(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btSolverBody.internalGetAngularVelocity?(
    io
    btVector3
    angVel
    
    
    )
{   
    
    CxxbtVector3Ref angVel__cxx = Make_CxxbtVector3Ref(angVel);
    
    this.cxx_internalGetAngularVelocity(
        angVel__cxx
        );
    
    
    
}


btSolverBody.getVelocityInLocalPointObsolete?(
    in
    btVector3
    rel_pos
    
    ,
    io
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef rel_pos__cxx = Make_CxxbtVector3ConstRef(rel_pos);
    
    CxxbtVector3Ref velocity__cxx = Make_CxxbtVector3Ref(velocity);
    
    this.cxx_getVelocityInLocalPointObsolete(
        rel_pos__cxx,
        velocity__cxx
        );
    
    
    
    
}


btSolverBody.getAngularVelocity?(
    io
    btVector3
    angVel
    
    
    )
{   
    
    CxxbtVector3Ref angVel__cxx = Make_CxxbtVector3Ref(angVel);
    
    this.cxx_getAngularVelocity(
        angVel__cxx
        );
    
    
    
}

btVector3
btSolverBody.getDeltaLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getDeltaLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btTransform
btSolverBody.getWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btSolverBody.writebackVelocity!(
    )
{   
    
    this.cxx_writebackVelocity(
        );
    
    
}

btVector3
btSolverBody.getPushVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPushVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btSolverBody.getVelocityInLocalPointNoDelta?(
    in
    btVector3
    rel_pos
    
    ,
    io
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef rel_pos__cxx = Make_CxxbtVector3ConstRef(rel_pos);
    
    CxxbtVector3Ref velocity__cxx = Make_CxxbtVector3Ref(velocity);
    
    this.cxx_getVelocityInLocalPointNoDelta(
        rel_pos__cxx,
        velocity__cxx
        );
    
    
    
    
}

btVector3
btSolverBody.internalGetPushVelocity!(
    )
{   
    CxxbtVector3Ref __res_cxx = 
    this.cxx_internalGetPushVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3Ref';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btSolverBody.setWorldTransform!(
    in
    btTransform
    worldTransform
    
    
    )
{   
    
    CxxbtTransformConstRef worldTransform__cxx = Make_CxxbtTransformConstRef(worldTransform);
    
    this.cxx_setWorldTransform(
        worldTransform__cxx
        );
    
    
    
}

////////////////////////////////////////////////
///some internal methods, don't use them
btVector3
btSolverBody.internalGetDeltaLinearVelocity!(
    )
{   
    CxxbtVector3Ref __res_cxx = 
    this.cxx_internalGetDeltaLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3Ref';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btSolverBody.internalGetInvMass?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_internalGetInvMass(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btSolverBody.getDeltaAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getDeltaAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btSolverBody.internalGetTurnVelocity!(
    )
{   
    CxxbtVector3Ref __res_cxx = 
    this.cxx_internalGetTurnVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3Ref';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btSolverBody.internalGetVelocityInLocalPointObsolete?(
    in
    btVector3
    rel_pos
    
    ,
    io
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef rel_pos__cxx = Make_CxxbtVector3ConstRef(rel_pos);
    
    CxxbtVector3Ref velocity__cxx = Make_CxxbtVector3Ref(velocity);
    
    this.cxx_internalGetVelocityInLocalPointObsolete(
        rel_pos__cxx,
        velocity__cxx
        );
    
    
    
    
}


btSolverBody.internalSetInvMass!(
    in
    btVector3
    invMass
    
    
    )
{   
    
    CxxbtVector3ConstRef invMass__cxx = Make_CxxbtVector3ConstRef(invMass);
    
    this.cxx_internalSetInvMass(
        invMass__cxx
        );
    
    
    
}

btVector3
btSolverBody.getTurnVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getTurnVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btSolverBody.internalApplyPushImpulse!(
    in
    btVector3
    linearComponent
    
    ,
    in
    btVector3
    angularComponent
    
    ,
    in
    Float32
    impulseMagnitude
    
    
    )
{   
    
    CxxbtVector3ConstRef linearComponent__cxx = Make_CxxbtVector3ConstRef(linearComponent);
    
    CxxbtVector3ConstRef angularComponent__cxx = Make_CxxbtVector3ConstRef(angularComponent);
    
    
    this.cxx_internalApplyPushImpulse(
        linearComponent__cxx,
        angularComponent__cxx,
        impulseMagnitude
        );
    
    
    
    
    
}

btVector3
btSolverBody.internalGetDeltaAngularVelocity!(
    )
{   
    CxxbtVector3Ref __res_cxx = 
    this.cxx_internalGetDeltaAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3Ref';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btSolverBody.writebackVelocityAndTransform!(
    in
    Float32
    timeStep
    
    ,
    in
    Float32
    splitImpulseTurnErp
    
    
    )
{   
    
    
    
    this.cxx_writebackVelocityAndTransform(
        timeStep,
        splitImpulseTurnErp
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolverBody] EDK[Fabric_EDK_KL_btSolverBody] LIB[btSolverBody *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSolverBody.=(
    btSolverBody that
    ) = "Bullet2__btSolverBody__MU__simple_ass_op__a889ba5fe023bc5ec57fafc0f8d462f3";


/// \dfgPresetOmit
/// \internal
btSolverBody.appendDesc(io String string) {
  string += "btSolverBody:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btUniversalConstraint() = "Bullet2__btUniversalConstraint__MU__empty_ctor__56f6d42a164076c5af49188d3ef21857";

/// \dfgPresetOmit
btUniversalConstraint(
    btUniversalConstraint that
    ) = "Bullet2__btUniversalConstraint__MU__copy_ctor__a2aa45147e21ab7bf707f6a886628b77";

/// \dfgPresetOmit
/// \internal
btUniversalConstraint.__ctor(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef anchor,
    CxxbtVector3ConstRef axis1,
    CxxbtVector3ConstRef axis2
    ) = "Bullet2__btUniversalConstraint__MU__ctor__25b52297e9aabcd106eead42941bf00a";

/// \dfgPresetOmit
btUniversalConstraint(
    btRigidBody rbA,
    btRigidBody rbB,
    CxxbtVector3ConstRef anchor,
    CxxbtVector3ConstRef axis1,
    CxxbtVector3ConstRef axis2
    ) {
    this.__ctor(
        rbA,
        rbB,
        anchor,
        axis1,
        axis2
        );
}

btUniversalConstraint(
    in
    btRigidBody
    rbA
    
    ,
    in
    btRigidBody
    rbB
    
    ,
    in
    btVector3
    anchor
    
    ,
    in
    btVector3
    axis1
    
    ,
    in
    btVector3
    axis2
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef anchor__cxx = Make_CxxbtVector3ConstRef(anchor);
    
    CxxbtVector3ConstRef axis1__cxx = Make_CxxbtVector3ConstRef(axis1);
    
    CxxbtVector3ConstRef axis2__cxx = Make_CxxbtVector3ConstRef(axis2);
    this.__ctor(
        rbA,
        rbB,
        anchor__cxx,
        axis1__cxx,
        axis2__cxx
        );
    
    
    
    
    
}

btUniversalConstraint.cxx_delete() = "Bullet2__btUniversalConstraint__MU__delete__15f0360752c0a1688f9b2bc8c3df02ed";

//////////////////////////////////////////////////////////////////////////////
// KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btUniversalConstraint.cxx_getAnchor!(
    )
 = "Bullet2__btUniversalConstraint__MU__meth_getAnchor__e8ca1e630ecbb5b3cc2769a09f2d45fd";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btUniversalConstraint.cxx_getAnchor2!(
    )
 = "Bullet2__btUniversalConstraint__MU__meth_getAnchor2__cbc00de146468fe2a1328043731a08c1";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btUniversalConstraint.cxx_getAxis1!(
    )
 = "Bullet2__btUniversalConstraint__MU__meth_getAxis1__3bd39d9c02c03b92cd08dca0e0c5fa91";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btUniversalConstraint.cxx_getAxis2!(
    )
 = "Bullet2__btUniversalConstraint__MU__meth_getAxis2__12e42cfdc229389019badddb4ab43d98";

/// \dfgPresetOmit
/// \internal
Float32
btUniversalConstraint.cxx_getAngle1!(
    )
 = "Bullet2__btUniversalConstraint__MU__meth_getAngle1__2b9e9c2e76ead8a63b83bf06bd17165e";

/// \dfgPresetOmit
/// \internal
Float32
btUniversalConstraint.cxx_getAngle2!(
    )
 = "Bullet2__btUniversalConstraint__MU__meth_getAngle2__5c251ffbceb2f9c87c04261ae4b7ef31";

/// \dfgPresetOmit
/// \internal

btUniversalConstraint.cxx_setUpperLimit!(
    Float32 ang1max,
    Float32 ang2max
    )
 = "Bullet2__btUniversalConstraint__MU__meth_setUpperLimit__b6b27346de9d8e072e0768a2d5356183";

/// \dfgPresetOmit
/// \internal

btUniversalConstraint.cxx_setLowerLimit!(
    Float32 ang1min,
    Float32 ang2min
    )
 = "Bullet2__btUniversalConstraint__MU__meth_setLowerLimit__44ad0e23bb0ecf2c0b881c42b6fa9bda";

/// \dfgPresetOmit
/// \internal

btUniversalConstraint.cxx_setAxis!(
    CxxbtVector3ConstRef axis1,
    CxxbtVector3ConstRef axis2
    )
 = "Bullet2__btUniversalConstraint__MU__meth_setAxis__3ae4b2f2057fc9c17f2d2feba4c668ec";

Float32
btUniversalConstraint.getAngle1!(
    )
{   
    Float32 __res = 
    this.cxx_getAngle1(
        );
    
    return __res;
}


btUniversalConstraint.setUpperLimit!(
    in
    Float32
    ang1max
    
    ,
    in
    Float32
    ang2max
    
    
    )
{   
    
    
    
    this.cxx_setUpperLimit(
        ang1max,
        ang2max
        );
    
    
    
    
}


btUniversalConstraint.setLowerLimit!(
    in
    Float32
    ang1min
    
    ,
    in
    Float32
    ang2min
    
    
    )
{   
    
    
    
    this.cxx_setLowerLimit(
        ang1min,
        ang2min
        );
    
    
    
    
}

btVector3
btUniversalConstraint.getAxis1!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAxis1(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btUniversalConstraint.getAnchor2!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnchor2(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btUniversalConstraint.getAxis2!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAxis2(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btUniversalConstraint.setAxis!(
    in
    btVector3
    axis1
    
    ,
    in
    btVector3
    axis2
    
    
    )
{   
    
    CxxbtVector3ConstRef axis1__cxx = Make_CxxbtVector3ConstRef(axis1);
    
    CxxbtVector3ConstRef axis2__cxx = Make_CxxbtVector3ConstRef(axis2);
    
    this.cxx_setAxis(
        axis1__cxx,
        axis2__cxx
        );
    
    
    
    
}

btVector3
btUniversalConstraint.getAnchor!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnchor(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btUniversalConstraint.getAngle2!(
    )
{   
    Float32 __res = 
    this.cxx_getAngle2(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btUniversalConstraint] EDK[Fabric_EDK_KL_btUniversalConstraint] LIB[btUniversalConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btUniversalConstraint.=(
    btUniversalConstraint that
    ) = "Bullet2__btUniversalConstraint__MU__simple_ass_op__c20e14e466e06ef9688f6c6f1831ee46";


/// \dfgPresetOmit
/// \internal
btUniversalConstraint.appendDesc(io String string) {
  string += "btUniversalConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btRaycastVehicle() = "Bullet2__btRaycastVehicle__MU__empty_ctor__63bc0859a541974133168aa05c9ec5db";

/// \dfgPresetOmit
btRaycastVehicle(
    btRaycastVehicle that
    ) = "Bullet2__btRaycastVehicle__MU__copy_ctor__36093963985e3e2db2b8678eefcf0bdb";

/// \dfgPresetOmit
/// \internal
btRaycastVehicle.__ctor(
    btRaycastVehicle_btVehicleTuning tuning,
    btRigidBody chassis,
    btVehicleRaycaster raycaster
    ) = "Bullet2__btRaycastVehicle__MU__ctor__54140322585dcf133109288fd3a9c311";

/// \dfgPresetOmit
btRaycastVehicle(
    btRaycastVehicle_btVehicleTuning tuning,
    btRigidBody chassis,
    btVehicleRaycaster raycaster
    ) {
    this.__ctor(
        tuning,
        chassis,
        raycaster
        );
}

btRaycastVehicle.cxx_delete() = "Bullet2__btRaycastVehicle__MU__delete__b7e61256ebee76927d579f629b785c06";

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///btActionInterface interface
/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_updateAction!(
    btCollisionWorld collisionWorld,
    Float32 step
    )
 = "Bullet2__btRaycastVehicle__MU__meth_updateAction__728ec12a609edce1ff859614ff7aef00";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btRaycastVehicle.cxx_getChassisWorldTransform?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getChassisWorldTransform__5cb82f33715de855f0c89986b90e555a";

/// \dfgPresetOmit
/// \internal
Float32
btRaycastVehicle.cxx_rayCast!(
    CxxbtWheelInfoRef wheel
    )
 = "Bullet2__btRaycastVehicle__MU__meth_rayCast__842a8ddc25680d0e0a15373fb73d9a4f";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_updateVehicle!(
    Float32 step
    )
 = "Bullet2__btRaycastVehicle__MU__meth_updateVehicle__26bc1ce7723909054b747c5808291547";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_resetSuspension!(
    )
 = "Bullet2__btRaycastVehicle__MU__meth_resetSuspension__84c6517fdf6e52d837474dfa4943e6af";

/// \dfgPresetOmit
/// \internal
Float32
btRaycastVehicle.cxx_getSteeringValue?(
    SInt32 wheel
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getSteeringValue__68c6be143b103d23336f94ec842671a9";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_setSteeringValue!(
    Float32 steering,
    SInt32 wheel
    )
 = "Bullet2__btRaycastVehicle__MU__meth_setSteeringValue__9b91bf71cbcb50f89c404528566bc45b";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_applyEngineForce!(
    Float32 force,
    SInt32 wheel
    )
 = "Bullet2__btRaycastVehicle__MU__meth_applyEngineForce__48cbfc7f374dac628d9e2ef9de6014cd";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btRaycastVehicle.cxx_getWheelTransformWS?(
    SInt32 wheelIndex
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getWheelTransformWS__c2dcc1366892ec4f37c0db282da9d4c4";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_updateWheelTransform!(
    SInt32 wheelIndex
    )
 = "Bullet2__btRaycastVehicle__MU__meth_updateWheelTransform__13976916fbb0df787643bd114661c885";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_updateWheelTransform!(
    SInt32 wheelIndex,
    Boolean interpolatedTransform
    )
 = "Bullet2__btRaycastVehicle__MU__meth_updateWheelTransform__2508bb776bf3cb85a185325faed7f2d6";

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef
btRaycastVehicle.cxx_addWheel!(
    CxxbtVector3ConstRef connectionPointCS0,
    CxxbtVector3ConstRef wheelDirectionCS0,
    CxxbtVector3ConstRef wheelAxleCS,
    Float32 suspensionRestLength,
    Float32 wheelRadius,
    btRaycastVehicle_btVehicleTuning tuning,
    Boolean isFrontWheel
    )
 = "Bullet2__btRaycastVehicle__MU__meth_addWheel__59e259f3e3669e2034a88b944643bb46";

/// \dfgPresetOmit
/// \internal
SInt32
btRaycastVehicle.cxx_getNumWheels?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getNumWheels__0e97e62707ec7fca90058010f8529237";

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef
btRaycastVehicle.cxx_getWheelInfo?(
    SInt32 index
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getWheelInfo__4451e8e47b64d4ccec832b298c695dd1";

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef
btRaycastVehicle.cxx_getWheelInfo!(
    SInt32 index
    )
 = "Bullet2__btRaycastVehicle__MU__meth_getWheelInfo__3aad0c8938d135c96259efecd89ffa4a";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_updateWheelTransformsWS!(
    CxxbtWheelInfoRef wheel
    )
 = "Bullet2__btRaycastVehicle__MU__meth_updateWheelTransformsWS__1bd7f0159da1fe311f5bd1e12a097f30";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_updateWheelTransformsWS!(
    CxxbtWheelInfoRef wheel,
    Boolean interpolatedTransform
    )
 = "Bullet2__btRaycastVehicle__MU__meth_updateWheelTransformsWS__018dac5e8a20d747283715c69b4947f5";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_setBrake!(
    Float32 brake,
    SInt32 wheelIndex
    )
 = "Bullet2__btRaycastVehicle__MU__meth_setBrake__0fb5f95304fc3cb265cccdeaf752fb49";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_setPitchControl!(
    Float32 pitch
    )
 = "Bullet2__btRaycastVehicle__MU__meth_setPitchControl__2d9ae6a317296c1305a5940fa6596dc9";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_updateSuspension!(
    Float32 deltaTime
    )
 = "Bullet2__btRaycastVehicle__MU__meth_updateSuspension__edcb68d73f5c3ed61ff62c167882045a";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_updateFriction!(
    Float32 timeStep
    )
 = "Bullet2__btRaycastVehicle__MU__meth_updateFriction__29eb86a253f8c3406335d4278d72cce6";

/// \dfgPresetOmit
/// \internal
btRigidBody
btRaycastVehicle.cxx_getRigidBody!(
    )
 = "Bullet2__btRaycastVehicle__MU__meth_getRigidBody__7bfe33b917ea77841fa1710744db15cf";

/// \dfgPresetOmit
/// \internal
btRigidBody
btRaycastVehicle.cxx_getRigidBody?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getRigidBody__589a5d14e491c9b950e9f463940c67e2";

/// \dfgPresetOmit
/// \internal
SInt32
btRaycastVehicle.cxx_getRightAxis?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getRightAxis__9160b38d73d4dc645e28ce3f31ed3adb";

/// \dfgPresetOmit
/// \internal
SInt32
btRaycastVehicle.cxx_getUpAxis?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getUpAxis__a2bb6654b9ce1fb3cb0490611c29eb3a";

/// \dfgPresetOmit
/// \internal
SInt32
btRaycastVehicle.cxx_getForwardAxis?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getForwardAxis__a24cdd64c2b3200bddea977d163f0f35";

///Worldspace forward vector
/// \dfgPresetOmit
/// \internal
btVector3
btRaycastVehicle.cxx_getForwardVector?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getForwardVector__5a2d90d968eefac0991d48279ca3cbb2";

///Velocity of vehicle (positive if velocity vector has same direction as foward vector)
/// \dfgPresetOmit
/// \internal
Float32
btRaycastVehicle.cxx_getCurrentSpeedKmHour?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getCurrentSpeedKmHour__682b54955a82df2e7d43ecb193598f9a";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_setCoordinateSystem!(
    SInt32 rightIndex,
    SInt32 upIndex,
    SInt32 forwardIndex
    )
 = "Bullet2__btRaycastVehicle__MU__meth_setCoordinateSystem__dfe538eee955d75e002aec46aa51699b";

///backwards compatibility
/// \dfgPresetOmit
/// \internal
SInt32
btRaycastVehicle.cxx_getUserConstraintType?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getUserConstraintType__2c24363f82f4f25bf877778ab5694368";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_setUserConstraintType!(
    SInt32 userConstraintType
    )
 = "Bullet2__btRaycastVehicle__MU__meth_setUserConstraintType__6b3f43554bcb0e8c4250abadf618e14c";

/// \dfgPresetOmit
/// \internal

btRaycastVehicle.cxx_setUserConstraintId!(
    SInt32 uid
    )
 = "Bullet2__btRaycastVehicle__MU__meth_setUserConstraintId__e334d2bca052c489850a1845e5cc7ecc";

/// \dfgPresetOmit
/// \internal
SInt32
btRaycastVehicle.cxx_getUserConstraintId?(
    )
 = "Bullet2__btRaycastVehicle__CO__meth_getUserConstraintId__ab3e15af20b22cf8661bcc0f18d95d54";


btRaycastVehicle.updateWheelTransform!(
    in
    SInt32
    wheelIndex
    
    ,
    in
    Boolean
    interpolatedTransform
    
    
    )
{   
    
    
    
    this.cxx_updateWheelTransform(
        wheelIndex,
        interpolatedTransform
        );
    
    
    
    
}


btRaycastVehicle.setSteeringValue!(
    in
    Float32
    steering
    
    ,
    in
    SInt32
    wheel
    
    
    )
{   
    
    
    
    this.cxx_setSteeringValue(
        steering,
        wheel
        );
    
    
    
    
}


btRaycastVehicle.setPitchControl!(
    in
    Float32
    pitch
    
    
    )
{   
    
    
    this.cxx_setPitchControl(
        pitch
        );
    
    
    
}


btRaycastVehicle.updateWheelTransformsWS!(
    io
    btWheelInfo
    wheel
    
    ,
    in
    Boolean
    interpolatedTransform
    
    
    )
{   
    
    CxxbtWheelInfoRef wheel__cxx = Make_CxxbtWheelInfoRef(wheel);
    
    
    this.cxx_updateWheelTransformsWS(
        wheel__cxx,
        interpolatedTransform
        );
    
    
    
    
}

///btActionInterface interface

btRaycastVehicle.updateAction!(
    in
    btCollisionWorld
    collisionWorld
    
    ,
    in
    Float32
    step
    
    
    )
{   
    
    
    
    this.cxx_updateAction(
        collisionWorld,
        step
        );
    
    
    
    
}

///Velocity of vehicle (positive if velocity vector has same direction as foward vector)
Float32
btRaycastVehicle.getCurrentSpeedKmHour?(
    )
{   
    Float32 __res = 
    this.cxx_getCurrentSpeedKmHour(
        );
    
    return __res;
}


btRaycastVehicle.updateFriction!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_updateFriction(
        timeStep
        );
    
    
    
}

SInt32
btRaycastVehicle.getUserConstraintId?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserConstraintId(
        );
    
    return __res;
}

///Worldspace forward vector
btVector3
btRaycastVehicle.getForwardVector?(
    )
{   
    btVector3 __res = 
    this.cxx_getForwardVector(
        );
    
    return __res;
}


btRaycastVehicle.applyEngineForce!(
    in
    Float32
    force
    
    ,
    in
    SInt32
    wheel
    
    
    )
{   
    
    
    
    this.cxx_applyEngineForce(
        force,
        wheel
        );
    
    
    
    
}


btRaycastVehicle.updateVehicle!(
    in
    Float32
    step
    
    
    )
{   
    
    
    this.cxx_updateVehicle(
        step
        );
    
    
    
}

btTransform
btRaycastVehicle.getChassisWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getChassisWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btRaycastVehicle.getForwardAxis?(
    )
{   
    SInt32 __res = 
    this.cxx_getForwardAxis(
        );
    
    return __res;
}

btRigidBody
btRaycastVehicle.getRigidBody!(
    )
{   
    btRigidBody __res = 
    this.cxx_getRigidBody(
        );
    
    return __res;
}


btRaycastVehicle.resetSuspension!(
    )
{   
    
    this.cxx_resetSuspension(
        );
    
    
}

btWheelInfo
btRaycastVehicle.getWheelInfo?(
    in
    SInt32
    index
    
    
    )
{   
    
    CxxbtWheelInfoConstRef __res_cxx = 
    this.cxx_getWheelInfo(
        index
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtWheelInfoConstRef';
    btWheelInfo __res = __res_cxx.cxx_get();
    return __res;
}


btRaycastVehicle.setCoordinateSystem!(
    in
    SInt32
    rightIndex
    
    ,
    in
    SInt32
    upIndex
    
    ,
    in
    SInt32
    forwardIndex
    
    
    )
{   
    
    
    
    
    this.cxx_setCoordinateSystem(
        rightIndex,
        upIndex,
        forwardIndex
        );
    
    
    
    
    
}


btRaycastVehicle.updateWheelTransform!(
    in
    SInt32
    wheelIndex
    
    
    )
{   
    
    
    this.cxx_updateWheelTransform(
        wheelIndex
        );
    
    
    
}

Float32
btRaycastVehicle.rayCast!(
    io
    btWheelInfo
    wheel
    
    
    )
{   
    
    CxxbtWheelInfoRef wheel__cxx = Make_CxxbtWheelInfoRef(wheel);
    Float32 __res = 
    this.cxx_rayCast(
        wheel__cxx
        );
    
    
    return __res;
}


btRaycastVehicle.setUserConstraintType!(
    in
    SInt32
    userConstraintType
    
    
    )
{   
    
    
    this.cxx_setUserConstraintType(
        userConstraintType
        );
    
    
    
}


btRaycastVehicle.updateWheelTransformsWS!(
    io
    btWheelInfo
    wheel
    
    
    )
{   
    
    CxxbtWheelInfoRef wheel__cxx = Make_CxxbtWheelInfoRef(wheel);
    
    this.cxx_updateWheelTransformsWS(
        wheel__cxx
        );
    
    
    
}

btWheelInfo
btRaycastVehicle.addWheel!(
    in
    btVector3
    connectionPointCS0
    
    ,
    in
    btVector3
    wheelDirectionCS0
    
    ,
    in
    btVector3
    wheelAxleCS
    
    ,
    in
    Float32
    suspensionRestLength
    
    ,
    in
    Float32
    wheelRadius
    
    ,
    in
    btRaycastVehicle_btVehicleTuning
    tuning
    
    ,
    in
    Boolean
    isFrontWheel
    
    
    )
{   
    
    CxxbtVector3ConstRef connectionPointCS0__cxx = Make_CxxbtVector3ConstRef(connectionPointCS0);
    
    CxxbtVector3ConstRef wheelDirectionCS0__cxx = Make_CxxbtVector3ConstRef(wheelDirectionCS0);
    
    CxxbtVector3ConstRef wheelAxleCS__cxx = Make_CxxbtVector3ConstRef(wheelAxleCS);
    
    
    
    
    CxxbtWheelInfoRef __res_cxx = 
    this.cxx_addWheel(
        connectionPointCS0__cxx,
        wheelDirectionCS0__cxx,
        wheelAxleCS__cxx,
        suspensionRestLength,
        wheelRadius,
        tuning,
        isFrontWheel
        );
    
    
    
    
    
    
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtWheelInfoRef';
    btWheelInfo __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btRaycastVehicle.getUpAxis?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpAxis(
        );
    
    return __res;
}


btRaycastVehicle.setUserConstraintId!(
    in
    SInt32
    uid
    
    
    )
{   
    
    
    this.cxx_setUserConstraintId(
        uid
        );
    
    
    
}

SInt32
btRaycastVehicle.getNumWheels?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumWheels(
        );
    
    return __res;
}

///backwards compatibility
SInt32
btRaycastVehicle.getUserConstraintType?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserConstraintType(
        );
    
    return __res;
}

SInt32
btRaycastVehicle.getRightAxis?(
    )
{   
    SInt32 __res = 
    this.cxx_getRightAxis(
        );
    
    return __res;
}


btRaycastVehicle.updateSuspension!(
    in
    Float32
    deltaTime
    
    
    )
{   
    
    
    this.cxx_updateSuspension(
        deltaTime
        );
    
    
    
}

btTransform
btRaycastVehicle.getWheelTransformWS?(
    in
    SInt32
    wheelIndex
    
    
    )
{   
    
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getWheelTransformWS(
        wheelIndex
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btRaycastVehicle.getSteeringValue?(
    in
    SInt32
    wheel
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getSteeringValue(
        wheel
        );
    
    
    return __res;
}


btRaycastVehicle.setBrake!(
    in
    Float32
    brake
    
    ,
    in
    SInt32
    wheelIndex
    
    
    )
{   
    
    
    
    this.cxx_setBrake(
        brake,
        wheelIndex
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle] EDK[Fabric_EDK_KL_btRaycastVehicle] LIB[btRaycastVehicle *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btRaycastVehicle.=(
    btRaycastVehicle that
    ) = "Bullet2__btRaycastVehicle__MU__simple_ass_op__1fcd5cf20c7e7dbdfcdf24b4b152552c";


/// \dfgPresetOmit
/// \internal
btRaycastVehicle.appendDesc(io String string) {
  string += "btRaycastVehicle:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btRaycastVehicle_btVehicleTuning] EDK[Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning] LIB[btRaycastVehicle::btVehicleTuning *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle_btVehicleTuning] EDK[Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning] LIB[btRaycastVehicle::btVehicleTuning *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle_btVehicleTuning] EDK[Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning] LIB[btRaycastVehicle::btVehicleTuning *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btRaycastVehicle_btVehicleTuning(
    btRaycastVehicle_btVehicleTuning that
    ) = "Bullet2__btRaycastVehicle_btVehicleTuning__MU__copy_ctor__e15567179bdedf779a5bf06ac01069ae";

/// \dfgPresetOmit
/// \internal
btRaycastVehicle_btVehicleTuning.__ctor(
    ) = "Bullet2__btRaycastVehicle_btVehicleTuning__MU__ctor__9696e53ef81be09c8ecac19f8971842b";

/// \dfgPresetOmit
btRaycastVehicle_btVehicleTuning(
    ) {
    this.__ctor(
        );
}

btRaycastVehicle_btVehicleTuning.cxx_delete() = "Bullet2__btRaycastVehicle_btVehicleTuning__MU__delete__0edec16a2096b2b7f4f18c91854df8e2";

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle_btVehicleTuning] EDK[Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning] LIB[btRaycastVehicle::btVehicleTuning *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle_btVehicleTuning] EDK[Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning] LIB[btRaycastVehicle::btVehicleTuning *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btRaycastVehicle_btVehicleTuning] EDK[Fabric_EDK_KL_btRaycastVehicle_btVehicleTuning] LIB[btRaycastVehicle::btVehicleTuning *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btRaycastVehicle_btVehicleTuning.=(
    btRaycastVehicle_btVehicleTuning that
    ) = "Bullet2__btRaycastVehicle_btVehicleTuning__MU__simple_ass_op__2ded0e5facc3b1ea5d648cb8e0d22bda";


/// \dfgPresetOmit
/// \internal
btRaycastVehicle_btVehicleTuning.appendDesc(io String string) {
  string += "btRaycastVehicle_btVehicleTuning:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btDefaultVehicleRaycaster() = "Bullet2__btDefaultVehicleRaycaster__MU__empty_ctor__5bc17ad2bd87adadedce1a5504441121";

/// \dfgPresetOmit
btDefaultVehicleRaycaster(
    btDefaultVehicleRaycaster that
    ) = "Bullet2__btDefaultVehicleRaycaster__MU__copy_ctor__244a6a396573161bbdd0323002044268";

/// \dfgPresetOmit
/// \internal
btDefaultVehicleRaycaster.__ctor(
    btDynamicsWorld world
    ) = "Bullet2__btDefaultVehicleRaycaster__MU__ctor__917256b0bce3fad87706938942f91cc1";

/// \dfgPresetOmit
btDefaultVehicleRaycaster(
    btDynamicsWorld world
    ) {
    this.__ctor(
        world
        );
}

btDefaultVehicleRaycaster.cxx_delete() = "Bullet2__btDefaultVehicleRaycaster__MU__delete__1791e0755cc13bcb45acb8e4a092f1e1";

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Data
btDefaultVehicleRaycaster.cxx_castRay!(
    CxxbtVector3ConstRef from,
    CxxbtVector3ConstRef to,
    btVehicleRaycaster_btVehicleRaycasterResult result
    )
 = "Bullet2__btDefaultVehicleRaycaster__MU__meth_castRay__8a39dd678f5c8f3393fcfa211718829e";

Data
btDefaultVehicleRaycaster.castRay!(
    in
    btVector3
    from
    
    ,
    in
    btVector3
    to
    
    ,
    in
    btVehicleRaycaster_btVehicleRaycasterResult
    result
    
    
    )
{   
    
    CxxbtVector3ConstRef from__cxx = Make_CxxbtVector3ConstRef(from);
    
    CxxbtVector3ConstRef to__cxx = Make_CxxbtVector3ConstRef(to);
    
    Data __res = 
    this.cxx_castRay(
        from__cxx,
        to__cxx,
        result
        );
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultVehicleRaycaster] EDK[Fabric_EDK_KL_btDefaultVehicleRaycaster] LIB[btDefaultVehicleRaycaster *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDefaultVehicleRaycaster.=(
    btDefaultVehicleRaycaster that
    ) = "Bullet2__btDefaultVehicleRaycaster__MU__simple_ass_op__806250d46e5eb083a786f3760631eb99";


/// \dfgPresetOmit
/// \internal
btDefaultVehicleRaycaster.appendDesc(io String string) {
  string += "btDefaultVehicleRaycaster:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btVehicleRaycaster() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btVehicleRaycaster(
    btVehicleRaycaster that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btVehicleRaycaster.cxx_delete() = "Bullet2__btVehicleRaycaster__MU__delete__c93289d870e387ccac52b81dd39c5e66";

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Data
btVehicleRaycaster.cxx_castRay!(
    CxxbtVector3ConstRef from,
    CxxbtVector3ConstRef to,
    btVehicleRaycaster_btVehicleRaycasterResult result
    )
 = "Bullet2__btVehicleRaycaster__MU__meth_castRay__c872b05777a06e6a21adf13fc6861b24";

Data
btVehicleRaycaster.castRay!(
    in
    btVector3
    from
    
    ,
    in
    btVector3
    to
    
    ,
    in
    btVehicleRaycaster_btVehicleRaycasterResult
    result
    
    
    )
{   
    
    CxxbtVector3ConstRef from__cxx = Make_CxxbtVector3ConstRef(from);
    
    CxxbtVector3ConstRef to__cxx = Make_CxxbtVector3ConstRef(to);
    
    Data __res = 
    this.cxx_castRay(
        from__cxx,
        to__cxx,
        result
        );
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster] EDK[Fabric_EDK_KL_btVehicleRaycaster] LIB[btVehicleRaycaster *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btVehicleRaycaster.=(
    btVehicleRaycaster that
    ) = "Bullet2__btVehicleRaycaster__MU__simple_ass_op__1ac7d455dc416aa7ae110ab823aeec34";


/// \dfgPresetOmit
/// \internal
btVehicleRaycaster.appendDesc(io String string) {
  string += "btVehicleRaycaster:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btVehicleRaycaster_btVehicleRaycasterResult] EDK[Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult] LIB[btVehicleRaycaster::btVehicleRaycasterResult *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster_btVehicleRaycasterResult] EDK[Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult] LIB[btVehicleRaycaster::btVehicleRaycasterResult *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster_btVehicleRaycasterResult] EDK[Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult] LIB[btVehicleRaycaster::btVehicleRaycasterResult *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVehicleRaycaster_btVehicleRaycasterResult(
    btVehicleRaycaster_btVehicleRaycasterResult that
    ) = "Bullet2__btVehicleRaycaster_btVehicleRaycasterResult__MU__copy_ctor__f31801160c7a78e48593a75fc877a97d";

/// \dfgPresetOmit
/// \internal
btVehicleRaycaster_btVehicleRaycasterResult.__ctor(
    ) = "Bullet2__btVehicleRaycaster_btVehicleRaycasterResult__MU__ctor__e0130c8ad996f5c354f556aa37926438";

/// \dfgPresetOmit
btVehicleRaycaster_btVehicleRaycasterResult(
    ) {
    this.__ctor(
        );
}

btVehicleRaycaster_btVehicleRaycasterResult.cxx_delete() = "Bullet2__btVehicleRaycaster_btVehicleRaycasterResult__MU__delete__ac2ec1ed75c3690a014c5821a1948a7a";

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster_btVehicleRaycasterResult] EDK[Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult] LIB[btVehicleRaycaster::btVehicleRaycasterResult *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster_btVehicleRaycasterResult] EDK[Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult] LIB[btVehicleRaycaster::btVehicleRaycasterResult *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btVehicleRaycaster_btVehicleRaycasterResult] EDK[Fabric_EDK_KL_btVehicleRaycaster_btVehicleRaycasterResult] LIB[btVehicleRaycaster::btVehicleRaycasterResult *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btVehicleRaycaster_btVehicleRaycasterResult.=(
    btVehicleRaycaster_btVehicleRaycasterResult that
    ) = "Bullet2__btVehicleRaycaster_btVehicleRaycasterResult__MU__simple_ass_op__866cf3dd774cc1da3475fad9ef5e693c";


/// \dfgPresetOmit
/// \internal
btVehicleRaycaster_btVehicleRaycasterResult.appendDesc(io String string) {
  string += "btVehicleRaycaster_btVehicleRaycasterResult:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btWheelInfoConstructionInfo() = "Bullet2__btWheelInfoConstructionInfo__MU__empty_ctor__ae35ba2565d1fc13d07e6e63040cef03";

/// \dfgPresetOmit
btWheelInfoConstructionInfo(
    btWheelInfoConstructionInfo that
    ) = "Bullet2__btWheelInfoConstructionInfo__MU__copy_ctor__d4460e37eff7a8c7cde0b1cfb90eeb2b";

~btWheelInfoConstructionInfo() = "Bullet2__btWheelInfoConstructionInfo__MU__dtor__53135f0afdeb6411df5431f2a8c3d757";

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btWheelInfoConstructionInfo.=(
    btWheelInfoConstructionInfo that
    ) = "Bullet2__btWheelInfoConstructionInfo__MU__simple_ass_op__6abd4f6036a3007881ec791c9d31a0e6";



/// \dfgPresetOmit
/// \internal
btWheelInfoConstructionInfo.appendDesc(io String string) {
  string += "btWheelInfoConstructionInfo:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btWheelInfo() = "Bullet2__btWheelInfo__MU__empty_ctor__23e533282f7815328499e84f01a07349";

/// \dfgPresetOmit
btWheelInfo(
    btWheelInfo that
    ) = "Bullet2__btWheelInfo__MU__copy_ctor__1638100ee57a5b67fa0138bee4721570";

/// \dfgPresetOmit
/// \internal
btWheelInfo.__ctor(
    CxxbtWheelInfoConstructionInfoRef ci
    ) = "Bullet2__btWheelInfo__MU__ctor__2360de7fb9a7c91de8ae68ec739446db";

/// \dfgPresetOmit
btWheelInfo(
    CxxbtWheelInfoConstructionInfoRef ci
    ) {
    this.__ctor(
        ci
        );
}

btWheelInfo(
    io
    btWheelInfoConstructionInfo
    ci
    
    
    ) {
    
    CxxbtWheelInfoConstructionInfoRef ci__cxx = Make_CxxbtWheelInfoConstructionInfoRef(ci);
    this.__ctor(
        ci__cxx
        );
    
}

~btWheelInfo() = "Bullet2__btWheelInfo__MU__dtor__464322a10bf56f672d735b5299da5586";

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btWheelInfo.cxx_getSuspensionRestLength?(
    )
 = "Bullet2__btWheelInfo__CO__meth_getSuspensionRestLength__cb7a64bedd0d2a7bf6dbb1789d8ba996";

/// \dfgPresetOmit
/// \internal

btWheelInfo.cxx_updateWheel!(
    btRigidBody chassis,
    CxxbtWheelInfo_RaycastInfoRef raycastInfo
    )
 = "Bullet2__btWheelInfo__MU__meth_updateWheel__15e769d0b04b5f463e4f54ed865e390f";

Float32
btWheelInfo.getSuspensionRestLength?(
    )
{   
    Float32 __res = 
    this.cxx_getSuspensionRestLength(
        );
    
    return __res;
}


btWheelInfo.updateWheel!(
    in
    btRigidBody
    chassis
    
    ,
    io
    btWheelInfo_RaycastInfo
    raycastInfo
    
    
    )
{   
    
    
    CxxbtWheelInfo_RaycastInfoRef raycastInfo__cxx = Make_CxxbtWheelInfo_RaycastInfoRef(raycastInfo);
    
    this.cxx_updateWheel(
        chassis,
        raycastInfo__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btWheelInfo.=(
    btWheelInfo that
    ) = "Bullet2__btWheelInfo__MU__simple_ass_op__b13da644843a84b9a511642876ede5b7";



/// \dfgPresetOmit
/// \internal
btWheelInfo.appendDesc(io String string) {
  string += "btWheelInfo:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btWheelInfo_RaycastInfo() = "Bullet2__btWheelInfo_RaycastInfo__MU__empty_ctor__669c72f9ebafbb010a57dd49ce040a64";

/// \dfgPresetOmit
btWheelInfo_RaycastInfo(
    btWheelInfo_RaycastInfo that
    ) = "Bullet2__btWheelInfo_RaycastInfo__MU__copy_ctor__03b2285066001b9314731caeff8b165d";

~btWheelInfo_RaycastInfo() = "Bullet2__btWheelInfo_RaycastInfo__MU__dtor__b5fb4b64b51cb263561157d6af434b9e";

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btWheelInfo_RaycastInfo.=(
    btWheelInfo_RaycastInfo that
    ) = "Bullet2__btWheelInfo_RaycastInfo__MU__simple_ass_op__4671e59783b3ff37785616fc447cb862";



/// \dfgPresetOmit
/// \internal
btWheelInfo_RaycastInfo.appendDesc(io String string) {
  string += "btWheelInfo_RaycastInfo:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBodySolver(
    btSoftBodySolver that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btSoftBodySolver.cxx_delete() = "Bullet2__btSoftBodySolver__MU__delete__f911a09ae2813a7317c7f72d2dfe46ae";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**
	 * Return the type of the solver.
	 */
/// \dfgPresetOmit
/// \internal
btSoftBodySolver_SolverTypes
btSoftBodySolver.cxx_getSolverType?(
    )
 = "Bullet2__btSoftBodySolver__CO__meth_getSolverType__82390a363c2648f791c39176175a0519";

/** Ensure that this solver is initialized. */
/// \dfgPresetOmit
/// \internal
Boolean
btSoftBodySolver.cxx_checkInitialized!(
    )
 = "Bullet2__btSoftBodySolver__MU__meth_checkInitialized__a5db0dcfa95940f7bfd0bc3ca5dd5f3a";

/** Copy necessary data back to the original soft body source objects. */
/// \dfgPresetOmit
/// \internal

btSoftBodySolver.cxx_copyBackToSoftBodies!(
    )
 = "Bullet2__btSoftBodySolver__MU__meth_copyBackToSoftBodies__aef83589388b7b90c57861d4ef03afec";

/// \dfgPresetOmit
/// \internal

btSoftBodySolver.cxx_copyBackToSoftBodies!(
    Boolean bMove
    )
 = "Bullet2__btSoftBodySolver__MU__meth_copyBackToSoftBodies__02ea956d75a9047ff82b30be812306e5";

/** Predict motion of soft bodies into next timestep */
/// \dfgPresetOmit
/// \internal

btSoftBodySolver.cxx_predictMotion!(
    Float32 solverdt
    )
 = "Bullet2__btSoftBodySolver__MU__meth_predictMotion__8558d89e7dac952eefd53b0e4cc5f31c";

/** Solve constraints for a set of soft bodies */
/// \dfgPresetOmit
/// \internal

btSoftBodySolver.cxx_solveConstraints!(
    Float32 solverdt
    )
 = "Bullet2__btSoftBodySolver__MU__meth_solveConstraints__ab0c43b6b3551366e37470eba7eed1e3";

/** Perform necessary per-step updates of soft bodies such as recomputing normals and bounding boxes */
/// \dfgPresetOmit
/// \internal

btSoftBodySolver.cxx_updateSoftBodies!(
    )
 = "Bullet2__btSoftBodySolver__MU__meth_updateSoftBodies__48ada62dd0a7985b5f8aa967b157193e";

/** Process a collision between two soft bodies */
/// \dfgPresetOmit
/// \internal

btSoftBodySolver.cxx_processCollision!(
    btSoftBody _arg0,
    btSoftBody _arg1
    )
 = "Bullet2__btSoftBodySolver__MU__meth_processCollision__6fa00156335f151aef04706e3e86664f";

/** Set the number of velocity constraint solver iterations this solver uses. */
/// \dfgPresetOmit
/// \internal

btSoftBodySolver.cxx_setNumberOfPositionIterations!(
    SInt32 iterations
    )
 = "Bullet2__btSoftBodySolver__MU__meth_setNumberOfPositionIterations__3ebfa3291334e82dc3d7c54fa858a9e9";

/** Get the number of velocity constraint solver iterations this solver uses. */
/// \dfgPresetOmit
/// \internal
SInt32
btSoftBodySolver.cxx_getNumberOfPositionIterations!(
    )
 = "Bullet2__btSoftBodySolver__MU__meth_getNumberOfPositionIterations__2afc25e781f342ca136b8a83a027fce5";

/** Set the number of velocity constraint solver iterations this solver uses. */
/// \dfgPresetOmit
/// \internal

btSoftBodySolver.cxx_setNumberOfVelocityIterations!(
    SInt32 iterations
    )
 = "Bullet2__btSoftBodySolver__MU__meth_setNumberOfVelocityIterations__8f50830110a79b5637751543ab135786";

/** Get the number of velocity constraint solver iterations this solver uses. */
/// \dfgPresetOmit
/// \internal
SInt32
btSoftBodySolver.cxx_getNumberOfVelocityIterations!(
    )
 = "Bullet2__btSoftBodySolver__MU__meth_getNumberOfVelocityIterations__480be4ea84bd9f0c6e43f4a76dfa953e";

/** Return the timescale that the simulation is using */
/// \dfgPresetOmit
/// \internal
Float32
btSoftBodySolver.cxx_getTimeScale!(
    )
 = "Bullet2__btSoftBodySolver__MU__meth_getTimeScale__bd214feea3e6c40355b40150d5e2b6dd";

/** Set the number of velocity constraint solver iterations this solver uses. */

btSoftBodySolver.setNumberOfVelocityIterations!(
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    this.cxx_setNumberOfVelocityIterations(
        iterations
        );
    
    
    
}

/**
	 * Return the type of the solver.
	 */
btSoftBodySolver_SolverTypes
btSoftBodySolver.getSolverType?(
    )
{   
    btSoftBodySolver_SolverTypes __res = 
    this.cxx_getSolverType(
        );
    
    return __res;
}

/** Ensure that this solver is initialized. */
Boolean
btSoftBodySolver.checkInitialized!(
    )
{   
    Boolean __res = 
    this.cxx_checkInitialized(
        );
    
    return __res;
}

/** Solve constraints for a set of soft bodies */

btSoftBodySolver.solveConstraints!(
    in
    Float32
    solverdt
    
    
    )
{   
    
    
    this.cxx_solveConstraints(
        solverdt
        );
    
    
    
}


btSoftBodySolver.copyBackToSoftBodies!(
    in
    Boolean
    bMove
    
    
    )
{   
    
    
    this.cxx_copyBackToSoftBodies(
        bMove
        );
    
    
    
}

/** Set the number of velocity constraint solver iterations this solver uses. */

btSoftBodySolver.setNumberOfPositionIterations!(
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    this.cxx_setNumberOfPositionIterations(
        iterations
        );
    
    
    
}

/** Get the number of velocity constraint solver iterations this solver uses. */
SInt32
btSoftBodySolver.getNumberOfVelocityIterations!(
    )
{   
    SInt32 __res = 
    this.cxx_getNumberOfVelocityIterations(
        );
    
    return __res;
}

/** Perform necessary per-step updates of soft bodies such as recomputing normals and bounding boxes */

btSoftBodySolver.updateSoftBodies!(
    )
{   
    
    this.cxx_updateSoftBodies(
        );
    
    
}

/** Get the number of velocity constraint solver iterations this solver uses. */
SInt32
btSoftBodySolver.getNumberOfPositionIterations!(
    )
{   
    SInt32 __res = 
    this.cxx_getNumberOfPositionIterations(
        );
    
    return __res;
}

/** Copy necessary data back to the original soft body source objects. */

btSoftBodySolver.copyBackToSoftBodies!(
    )
{   
    
    this.cxx_copyBackToSoftBodies(
        );
    
    
}

/** Process a collision between two soft bodies */

btSoftBodySolver.processCollision!(
    in
    btSoftBody
    _arg0
    
    ,
    in
    btSoftBody
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_processCollision(
        _arg0,
        _arg1
        );
    
    
    
    
}

/** Return the timescale that the simulation is using */
Float32
btSoftBodySolver.getTimeScale!(
    )
{   
    Float32 __res = 
    this.cxx_getTimeScale(
        );
    
    return __res;
}

/** Predict motion of soft bodies into next timestep */

btSoftBodySolver.predictMotion!(
    in
    Float32
    solverdt
    
    
    )
{   
    
    
    this.cxx_predictMotion(
        solverdt
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolver] EDK[Fabric_EDK_KL_btSoftBodySolver] LIB[btSoftBodySolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBodySolver.=(
    btSoftBodySolver that
    ) = "Bullet2__btSoftBodySolver__MU__simple_ass_op__d3f9e693187127b882ec51ddfd431055";


/// \dfgPresetOmit
/// \internal
btSoftBodySolver.appendDesc(io String string) {
  string += "btSoftBodySolver:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodySolverOutput] EDK[Fabric_EDK_KL_btSoftBodySolverOutput] LIB[btSoftBodySolverOutput *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolverOutput] EDK[Fabric_EDK_KL_btSoftBodySolverOutput] LIB[btSoftBodySolverOutput *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolverOutput] EDK[Fabric_EDK_KL_btSoftBodySolverOutput] LIB[btSoftBodySolverOutput *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBodySolverOutput(
    btSoftBodySolverOutput that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btSoftBodySolverOutput.cxx_delete() = "Bullet2__btSoftBodySolverOutput__MU__delete__19d723e6017dfb90d45dddbb1d3dad3e";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolverOutput] EDK[Fabric_EDK_KL_btSoftBodySolverOutput] LIB[btSoftBodySolverOutput *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolverOutput] EDK[Fabric_EDK_KL_btSoftBodySolverOutput] LIB[btSoftBodySolverOutput *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodySolverOutput] EDK[Fabric_EDK_KL_btSoftBodySolverOutput] LIB[btSoftBodySolverOutput *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBodySolverOutput.=(
    btSoftBodySolverOutput that
    ) = "Bullet2__btSoftBodySolverOutput__MU__simple_ass_op__ea04f55614a196ee3005a68aacb16ac0";


/// \dfgPresetOmit
/// \internal
btSoftBodySolverOutput.appendDesc(io String string) {
  string += "btSoftBodySolverOutput:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btDefaultSoftBodySolver(
    btDefaultSoftBodySolver that
    ) = "Bullet2__btDefaultSoftBodySolver__MU__copy_ctor__fb66666de9857050026c7e72186bf6e9";

/// \dfgPresetOmit
/// \internal
btDefaultSoftBodySolver.__ctor(
    ) = "Bullet2__btDefaultSoftBodySolver__MU__ctor__dc3680d73a0c1e87df0d4e392000bc92";

/// \dfgPresetOmit
btDefaultSoftBodySolver(
    ) {
    this.__ctor(
        );
}

btDefaultSoftBodySolver.cxx_delete() = "Bullet2__btDefaultSoftBodySolver__MU__delete__91b576fd2b4ef53403a2b0fff4d9da37";

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btSoftBodySolver_SolverTypes
btDefaultSoftBodySolver.cxx_getSolverType?(
    )
 = "Bullet2__btDefaultSoftBodySolver__CO__meth_getSolverType__7308542a282e6ae2fc7da540c951c864";

/// \dfgPresetOmit
/// \internal
Boolean
btDefaultSoftBodySolver.cxx_checkInitialized!(
    )
 = "Bullet2__btDefaultSoftBodySolver__MU__meth_checkInitialized__98e722e9cca419243ab4b0cdfa0aea87";

/// \dfgPresetOmit
/// \internal

btDefaultSoftBodySolver.cxx_updateSoftBodies!(
    )
 = "Bullet2__btDefaultSoftBodySolver__MU__meth_updateSoftBodies__3281299d6d95252e5040ef017f874577";

/// \dfgPresetOmit
/// \internal

btDefaultSoftBodySolver.cxx_copyBackToSoftBodies!(
    )
 = "Bullet2__btDefaultSoftBodySolver__MU__meth_copyBackToSoftBodies__597dea3fd9fa2a986818e54b5de897f5";

/// \dfgPresetOmit
/// \internal

btDefaultSoftBodySolver.cxx_copyBackToSoftBodies!(
    Boolean bMove
    )
 = "Bullet2__btDefaultSoftBodySolver__MU__meth_copyBackToSoftBodies__527a31356c9d44ef455ebc53e61fdae2";

/// \dfgPresetOmit
/// \internal

btDefaultSoftBodySolver.cxx_solveConstraints!(
    Float32 solverdt
    )
 = "Bullet2__btDefaultSoftBodySolver__MU__meth_solveConstraints__55ed88e80790aa55d18dab429c4321c8";

/// \dfgPresetOmit
/// \internal

btDefaultSoftBodySolver.cxx_predictMotion!(
    Float32 solverdt
    )
 = "Bullet2__btDefaultSoftBodySolver__MU__meth_predictMotion__b84d5512324e999053d0fcc4b922e65b";

/// \dfgPresetOmit
/// \internal

btDefaultSoftBodySolver.cxx_processCollision!(
    btSoftBody _arg0,
    btSoftBody _arg1
    )
 = "Bullet2__btDefaultSoftBodySolver__MU__meth_processCollision__5a229376066b99f493688a37848c30df";


btDefaultSoftBodySolver.updateSoftBodies!(
    )
{   
    
    this.cxx_updateSoftBodies(
        );
    
    
}


btDefaultSoftBodySolver.copyBackToSoftBodies!(
    )
{   
    
    this.cxx_copyBackToSoftBodies(
        );
    
    
}


btDefaultSoftBodySolver.predictMotion!(
    in
    Float32
    solverdt
    
    
    )
{   
    
    
    this.cxx_predictMotion(
        solverdt
        );
    
    
    
}


btDefaultSoftBodySolver.processCollision!(
    in
    btSoftBody
    _arg0
    
    ,
    in
    btSoftBody
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_processCollision(
        _arg0,
        _arg1
        );
    
    
    
    
}


btDefaultSoftBodySolver.solveConstraints!(
    in
    Float32
    solverdt
    
    
    )
{   
    
    
    this.cxx_solveConstraints(
        solverdt
        );
    
    
    
}


btDefaultSoftBodySolver.copyBackToSoftBodies!(
    in
    Boolean
    bMove
    
    
    )
{   
    
    
    this.cxx_copyBackToSoftBodies(
        bMove
        );
    
    
    
}

btSoftBodySolver_SolverTypes
btDefaultSoftBodySolver.getSolverType?(
    )
{   
    btSoftBodySolver_SolverTypes __res = 
    this.cxx_getSolverType(
        );
    
    return __res;
}

Boolean
btDefaultSoftBodySolver.checkInitialized!(
    )
{   
    Boolean __res = 
    this.cxx_checkInitialized(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDefaultSoftBodySolver] EDK[Fabric_EDK_KL_btDefaultSoftBodySolver] LIB[btDefaultSoftBodySolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDefaultSoftBodySolver.=(
    btDefaultSoftBodySolver that
    ) = "Bullet2__btDefaultSoftBodySolver__MU__simple_ass_op__4e85cb3e99b22be6908cda3249ad56d4";


/// \dfgPresetOmit
/// \internal
btDefaultSoftBodySolver.appendDesc(io String string) {
  string += "btDefaultSoftBodySolver:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyWorldInfo] EDK[Fabric_EDK_KL_btSoftBodyWorldInfo] LIB[btSoftBodyWorldInfo *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyWorldInfo] EDK[Fabric_EDK_KL_btSoftBodyWorldInfo] LIB[btSoftBodyWorldInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 btSoftBodyWorldInfo.cxx_get_air_density()
  = "Bullet2__btSoftBodyWorldInfo__CO__getter_air_density__f641642b5697ee07bc2db2089e852e7a";

Float32
btSoftBodyWorldInfo.get_air_density()
{
    Float32 __res = 
    this.cxx_get_air_density();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.cxx_set_air_density!(Float32 value)
  = "Bullet2__btSoftBodyWorldInfo__MU__setter_air_density__2d404ed92e1c5252f3a95bc64c9bfd9a";

btSoftBodyWorldInfo.set_air_density!(
    Float32 value
   )
{
    
    this.cxx_set_air_density(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBodyWorldInfo.cxx_get_water_density()
  = "Bullet2__btSoftBodyWorldInfo__CO__getter_water_density__c4c5776321b1edcddfe1b0e4bc249f0a";

Float32
btSoftBodyWorldInfo.get_water_density()
{
    Float32 __res = 
    this.cxx_get_water_density();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.cxx_set_water_density!(Float32 value)
  = "Bullet2__btSoftBodyWorldInfo__MU__setter_water_density__c599b8fe9bb250d4bfcaa6351749ab82";

btSoftBodyWorldInfo.set_water_density!(
    Float32 value
   )
{
    
    this.cxx_set_water_density(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBodyWorldInfo.cxx_get_water_offset()
  = "Bullet2__btSoftBodyWorldInfo__CO__getter_water_offset__817fa4d709bd1fabeaed1ddb5ddebb68";

Float32
btSoftBodyWorldInfo.get_water_offset()
{
    Float32 __res = 
    this.cxx_get_water_offset();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.cxx_set_water_offset!(Float32 value)
  = "Bullet2__btSoftBodyWorldInfo__MU__setter_water_offset__ac0f4fdf21a3482156010266dcdf19b9";

btSoftBodyWorldInfo.set_water_offset!(
    Float32 value
   )
{
    
    this.cxx_set_water_offset(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBodyWorldInfo.cxx_get_m_maxDisplacement()
  = "Bullet2__btSoftBodyWorldInfo__CO__getter_m_maxDisplacement__00a0e548bf29b1d6a14a3de521d71019";

Float32
btSoftBodyWorldInfo.get_m_maxDisplacement()
{
    Float32 __res = 
    this.cxx_get_m_maxDisplacement();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.cxx_set_m_maxDisplacement!(Float32 value)
  = "Bullet2__btSoftBodyWorldInfo__MU__setter_m_maxDisplacement__14512e9bf14c2e31fa14f1d47d1d7bca";

btSoftBodyWorldInfo.set_m_maxDisplacement!(
    Float32 value
   )
{
    
    this.cxx_set_m_maxDisplacement(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btVector3 btSoftBodyWorldInfo.cxx_get_water_normal()
  = "Bullet2__btSoftBodyWorldInfo__CO__getter_water_normal__6e5c68e1267b76d436800009b439245e";

btVector3
btSoftBodyWorldInfo.get_water_normal()
{
    btVector3 __res = 
    this.cxx_get_water_normal();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.cxx_set_water_normal!(btVector3 value)
  = "Bullet2__btSoftBodyWorldInfo__MU__setter_water_normal__4d2a8cb5473d095657e4490cdfe86d85";

btSoftBodyWorldInfo.set_water_normal!(
    btVector3 value
   )
{
    
    this.cxx_set_water_normal(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btBroadphaseInterface btSoftBodyWorldInfo.cxx_get_m_broadphase()
  = "Bullet2__btSoftBodyWorldInfo__CO__getter_m_broadphase__78e9faab0c9495dd3d277afda532bc53";

btBroadphaseInterface
btSoftBodyWorldInfo.get_m_broadphase()
{
    btBroadphaseInterface __res = 
    this.cxx_get_m_broadphase();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.cxx_set_m_broadphase!(btBroadphaseInterface value)
  = "Bullet2__btSoftBodyWorldInfo__MU__setter_m_broadphase__064cc06a1165dd39f3e19010a9dd1d64";

btSoftBodyWorldInfo.set_m_broadphase!(
    btBroadphaseInterface value
   )
{
    
    this.cxx_set_m_broadphase(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btDispatcher btSoftBodyWorldInfo.cxx_get_m_dispatcher()
  = "Bullet2__btSoftBodyWorldInfo__CO__getter_m_dispatcher__e0a793ba4eb6aeae22a590c82b1e7ec2";

btDispatcher
btSoftBodyWorldInfo.get_m_dispatcher()
{
    btDispatcher __res = 
    this.cxx_get_m_dispatcher();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.cxx_set_m_dispatcher!(btDispatcher value)
  = "Bullet2__btSoftBodyWorldInfo__MU__setter_m_dispatcher__f6f500c04640d320bc642a1b3f9e2110";

btSoftBodyWorldInfo.set_m_dispatcher!(
    btDispatcher value
   )
{
    
    this.cxx_set_m_dispatcher(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btVector3 btSoftBodyWorldInfo.cxx_get_m_gravity()
  = "Bullet2__btSoftBodyWorldInfo__CO__getter_m_gravity__a8af8d50ad2b778e650aee01a8ea3100";

btVector3
btSoftBodyWorldInfo.get_m_gravity()
{
    btVector3 __res = 
    this.cxx_get_m_gravity();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.cxx_set_m_gravity!(btVector3 value)
  = "Bullet2__btSoftBodyWorldInfo__MU__setter_m_gravity__d7399de71bb3bed6e679291f54d73b16";

btSoftBodyWorldInfo.set_m_gravity!(
    btVector3 value
   )
{
    
    this.cxx_set_m_gravity(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyWorldInfo] EDK[Fabric_EDK_KL_btSoftBodyWorldInfo] LIB[btSoftBodyWorldInfo *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBodyWorldInfo(
    btSoftBodyWorldInfo that
    ) = "Bullet2__btSoftBodyWorldInfo__MU__copy_ctor__17697d111f122f0596d6ce7370129a78";

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.__ctor(
    ) = "Bullet2__btSoftBodyWorldInfo__MU__ctor__a388d297c4680666279678fe4ad25955";

/// \dfgPresetOmit
btSoftBodyWorldInfo(
    ) {
    this.__ctor(
        );
}

btSoftBodyWorldInfo.cxx_delete() = "Bullet2__btSoftBodyWorldInfo__MU__delete__5c67099b27a1351ba3e8c7d6790a6065";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyWorldInfo] EDK[Fabric_EDK_KL_btSoftBodyWorldInfo] LIB[btSoftBodyWorldInfo *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyWorldInfo] EDK[Fabric_EDK_KL_btSoftBodyWorldInfo] LIB[btSoftBodyWorldInfo *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyWorldInfo] EDK[Fabric_EDK_KL_btSoftBodyWorldInfo] LIB[btSoftBodyWorldInfo *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBodyWorldInfo.=(
    btSoftBodyWorldInfo that
    ) = "Bullet2__btSoftBodyWorldInfo__MU__simple_ass_op__ad81068e99a90a6cc743543ce339bd1e";


/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo.appendDesc(io String string) {
  string += "btSoftBodyWorldInfo:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo btSoftBody.cxx_get_m_worldInfo()
  = "Bullet2__btSoftBody__CO__getter_m_worldInfo__a3c2742265fd9e3a3f368b017a0a484d";

btSoftBodyWorldInfo
btSoftBody.get_m_worldInfo()
{
    btSoftBodyWorldInfo __res = 
    this.cxx_get_m_worldInfo();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody.cxx_set_m_worldInfo!(btSoftBodyWorldInfo value)
  = "Bullet2__btSoftBody__MU__setter_m_worldInfo__aa0a6cb822f447fcde9df9059e95972c";

btSoftBody.set_m_worldInfo!(
    btSoftBodyWorldInfo value
   )
{
    
    this.cxx_set_m_worldInfo(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btTransform btSoftBody.cxx_get_m_initialWorldTransform()
  = "Bullet2__btSoftBody__CO__getter_m_initialWorldTransform__c517cb3f4498bafeb30bba38d6f961d9";

btTransform
btSoftBody.get_m_initialWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_initialWorldTransform();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody.cxx_set_m_initialWorldTransform!(btTransform value)
  = "Bullet2__btSoftBody__MU__setter_m_initialWorldTransform__bc5ffa78ce170b3d8c8d3c243effe9d2";

btSoftBody.set_m_initialWorldTransform!(
    btTransform value
   )
{
    
    this.cxx_set_m_initialWorldTransform(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btVector3 btSoftBody.cxx_get_m_windVelocity()
  = "Bullet2__btSoftBody__CO__getter_m_windVelocity__efbcbe76d1963e695a662eb269316287";

btVector3
btSoftBody.get_m_windVelocity()
{
    btVector3 __res = 
    this.cxx_get_m_windVelocity();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody.cxx_set_m_windVelocity!(btVector3 value)
  = "Bullet2__btSoftBody__MU__setter_m_windVelocity__14a8b953e40ebb45e208b9f549a9b2a0";

btSoftBody.set_m_windVelocity!(
    btVector3 value
   )
{
    
    this.cxx_set_m_windVelocity(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody.cxx_get_m_restLengthScale()
  = "Bullet2__btSoftBody__CO__getter_m_restLengthScale__a25ed2697f1aa4b72b99bff52452e1ad";

Float32
btSoftBody.get_m_restLengthScale()
{
    Float32 __res = 
    this.cxx_get_m_restLengthScale();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody.cxx_set_m_restLengthScale!(Float32 value)
  = "Bullet2__btSoftBody__MU__setter_m_restLengthScale__6c3117a49f61b731c77a34d44bf29add";

btSoftBody.set_m_restLengthScale!(
    Float32 value
   )
{
    
    this.cxx_set_m_restLengthScale(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody() = "Bullet2__btSoftBody__MU__empty_ctor__268132e1cac2b9c8490aabf16738ccf1";

/// \dfgPresetOmit
btSoftBody(
    btSoftBody that
    ) = "Bullet2__btSoftBody__MU__copy_ctor__a47b6967710c7f7885d461338f05adb0";

/// \dfgPresetOmit
/// \internal
btSoftBody.__ctor(
    btSoftBodyWorldInfo worldInfo,
    SInt32 node_count,
    CxxbtVector3ConstPtr x,
    CxxFloat32ConstPtr m
    ) = "Bullet2__btSoftBody__MU__ctor__d7917782c951650fc595ddf9dce29447";

/// \dfgPresetOmit
btSoftBody(
    btSoftBodyWorldInfo worldInfo,
    SInt32 node_count,
    CxxbtVector3ConstPtr x,
    CxxFloat32ConstPtr m
    ) {
    this.__ctor(
        worldInfo,
        node_count,
        x,
        m
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBody.__ctor(
    btSoftBodyWorldInfo worldInfo
    ) = "Bullet2__btSoftBody__MU__ctor__99e517945ef087952d9f2c7c7d6ea378";

/// \dfgPresetOmit
btSoftBody(
    btSoftBodyWorldInfo worldInfo
    ) {
    this.__ctor(
        worldInfo
        );
}

btSoftBody(
    in
    btSoftBodyWorldInfo
    worldInfo
    
    ,
    in
    SInt32
    node_count
    
    ,
    in
    btVector3
    x
    
    ,
    in
    Float32
    m
    
    
    ) {
    
    
    
    CxxbtVector3ConstPtr x__cxx = Make_CxxbtVector3ConstPtr(x);
    
    CxxFloat32ConstPtr m__cxx = Make_CxxFloat32ConstPtr(m);
    this.__ctor(
        worldInfo,
        node_count,
        x__cxx,
        m__cxx
        );
    
    
    
    
}

btSoftBody.cxx_delete() = "Bullet2__btSoftBody__MU__delete__a1dc27dc9b89f6903b8533d9bd9a4db0";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_initDefaults!(
    )
 = "Bullet2__btSoftBody__MU__meth_initDefaults__58d2648ac29cd1ca3121d378d72d4ee8";

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
btSoftBody.cxx_getWorldInfo!(
    )
 = "Bullet2__btSoftBody__MU__meth_getWorldInfo__71634c55ee9a7d525caa9a3240aeeb39";

///@todo: avoid internal softbody shape hack and move collision code to collision library
/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setCollisionShape!(
    btCollisionShape collisionShape
    )
 = "Bullet2__btSoftBody__MU__meth_setCollisionShape__6fec686abfaf081ae4c01349f5c9d5cc";

/// \dfgPresetOmit
/// \internal
Boolean
btSoftBody.cxx_checkLink?(
    SInt32 node0,
    SInt32 node1
    )
 = "Bullet2__btSoftBody__CO__meth_checkLink__988db723a09f54aaeea6308c648a3b0a";

/// \dfgPresetOmit
/// \internal
Boolean
btSoftBody.cxx_checkLink?(
    btSoftBody_Node node0,
    btSoftBody_Node node1
    )
 = "Bullet2__btSoftBody__CO__meth_checkLink__9b2f77a0d3d635e2074a761462ae0e77";

/// \dfgPresetOmit
/// \internal
Boolean
btSoftBody.cxx_checkFace?(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2
    )
 = "Bullet2__btSoftBody__CO__meth_checkFace__74da3eae1a1c891e544bee0ee98584a7";

/// \dfgPresetOmit
/// \internal
btSoftBody_Material
btSoftBody.cxx_appendMaterial!(
    )
 = "Bullet2__btSoftBody__MU__meth_appendMaterial__d41c56e98780d37a9ad4c2d40c8ba798";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__291ca6af5c0e9b90cfb7ee7c52d7023c";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__ae727955c2ad072d389706ae6e74ad96";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__3d8ca3db82029d333498af1c53cf84e8";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__f1f5798ec1583e802c52619d72cf4452";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1,
    btSoftBody_Node n2
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__49fd4cf7e3e3daead1a41f15bc2da481";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1,
    btSoftBody_Node n2,
    btSoftBody_Node n3
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__68079d53cf6189bd931bf76b947717ff";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Node feature
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__094d4cbc59f06890b974e561379a607f";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Link feature
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__d98619d031fef97cd78b0e91ff4132b8";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Face feature
    )
 = "Bullet2__btSoftBody__MU__meth_appendNote__1e7ddaa595f933defdba103592fc7d37";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendNode!(
    CxxbtVector3ConstRef x,
    Float32 m
    )
 = "Bullet2__btSoftBody__MU__meth_appendNode__3f8ecf223b4082fda795ce38027861d4";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__95b7f8639db8129c4a0bbbfa3b0abff2";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    SInt32 model
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__a35d13d7e471d230eeab77011026eeba";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    SInt32 model,
    btSoftBody_Material mat
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__1d800e618e77cf97142ab12c49bb6e49";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__ada29b78e6f1a991b192d24087605cf9";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1,
    btSoftBody_Material mat
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__98b906d940a36fb8c2eee72d9fe790c3";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1,
    btSoftBody_Material mat,
    Boolean bcheckexist
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__1100c96e176013e68ffaa82ffeab7220";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__0dd822678bc838191c8b095c2955559c";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    btSoftBody_Material mat
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__91f12ef4da7fea2e20e77cc64ef902f5";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    btSoftBody_Material mat,
    Boolean bcheckexist
    )
 = "Bullet2__btSoftBody__MU__meth_appendLink__601730e97dc119dbdb86f4b25dd41caf";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendFace!(
    )
 = "Bullet2__btSoftBody__MU__meth_appendFace__1fadddc36c203b156e2c329d2377c33a";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendFace!(
    SInt32 model
    )
 = "Bullet2__btSoftBody__MU__meth_appendFace__046562a11ddfec03569ef099a55dcd46";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendFace!(
    SInt32 model,
    btSoftBody_Material mat
    )
 = "Bullet2__btSoftBody__MU__meth_appendFace__498811cfe70f39feb13e794142259cbd";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendFace!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2
    )
 = "Bullet2__btSoftBody__MU__meth_appendFace__ac33731dc5f24e1eade3dc9aaf555f66";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendFace!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    btSoftBody_Material mat
    )
 = "Bullet2__btSoftBody__MU__meth_appendFace__a3a3ff0279bed71f53d40f94fae9316b";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendTetra!(
    SInt32 model,
    btSoftBody_Material mat
    )
 = "Bullet2__btSoftBody__MU__meth_appendTetra__b2040af254d72816a62943ad6cd7d142";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendTetra!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    SInt32 node3
    )
 = "Bullet2__btSoftBody__MU__meth_appendTetra__5743ae2233a4006d2bcc51245178be0f";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendTetra!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    SInt32 node3,
    btSoftBody_Material mat
    )
 = "Bullet2__btSoftBody__MU__meth_appendTetra__22eeff554b1ecc18f390df16e3bfb173";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body
    )
 = "Bullet2__btSoftBody__MU__meth_appendAnchor__7153634ea82bfeb4949ed785465b254c";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    Boolean disableCollisionBetweenLinkedBodies
    )
 = "Bullet2__btSoftBody__MU__meth_appendAnchor__88da1e2898d5813e05ac485144354868";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    Boolean disableCollisionBetweenLinkedBodies,
    Float32 influence
    )
 = "Bullet2__btSoftBody__MU__meth_appendAnchor__700120bdfe510f904ee3194ef8894457";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot
    )
 = "Bullet2__btSoftBody__MU__meth_appendAnchor__0cfe129f42a802a2ac044cacd06bf337";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot,
    Boolean disableCollisionBetweenLinkedBodies
    )
 = "Bullet2__btSoftBody__MU__meth_appendAnchor__539a0f0e6c2a8b7eb21af4626765d4b3";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot,
    Boolean disableCollisionBetweenLinkedBodies,
    Float32 influence
    )
 = "Bullet2__btSoftBody__MU__meth_appendAnchor__dc2a120e084184575706151ee40c9782";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLinearJoint!(
    btSoftBody_LJoint_Specs specs
    )
 = "Bullet2__btSoftBody__MU__meth_appendLinearJoint__5432c661a974443d2f2eae22c2ca9037";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendLinearJoint!(
    btSoftBody_LJoint_Specs specs,
    btSoftBody body
    )
 = "Bullet2__btSoftBody__MU__meth_appendLinearJoint__adbb515423f9cc298ed67df23e0517a8";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendAngularJoint!(
    btSoftBody_AJoint_Specs specs
    )
 = "Bullet2__btSoftBody__MU__meth_appendAngularJoint__75fd09b5a1693ff08c06ee8694ce303d";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_appendAngularJoint!(
    btSoftBody_AJoint_Specs specs,
    btSoftBody body
    )
 = "Bullet2__btSoftBody__MU__meth_appendAngularJoint__d4a2610be004961c056b7d48bd28597c";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_addForce!(
    CxxbtVector3ConstRef force
    )
 = "Bullet2__btSoftBody__MU__meth_addForce__097ba272e6a620ee42e0969caad9cd7c";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_addForce!(
    CxxbtVector3ConstRef force,
    SInt32 node
    )
 = "Bullet2__btSoftBody__MU__meth_addForce__1d2e61dc5d87c45be7ce08b63c71d0f3";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_addAeroForceToNode!(
    CxxbtVector3ConstRef windVelocity,
    SInt32 nodeIndex
    )
 = "Bullet2__btSoftBody__MU__meth_addAeroForceToNode__82692ab4a4a46a3c5a1f0b8d8b2ed61a";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_addAeroForceToFace!(
    CxxbtVector3ConstRef windVelocity,
    SInt32 faceIndex
    )
 = "Bullet2__btSoftBody__MU__meth_addAeroForceToFace__4fcfb91a89ba2c6254b9e9b39cf183e1";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_addVelocity!(
    CxxbtVector3ConstRef velocity
    )
 = "Bullet2__btSoftBody__MU__meth_addVelocity__63637dd084938551bd986f484c247f40";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setVelocity!(
    CxxbtVector3ConstRef velocity
    )
 = "Bullet2__btSoftBody__MU__meth_setVelocity__c3878d129254be22a57376ff20541c06";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_addVelocity!(
    CxxbtVector3ConstRef velocity,
    SInt32 node
    )
 = "Bullet2__btSoftBody__MU__meth_addVelocity__3c4675644be28e2d817246b6f66ad709";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setMass!(
    SInt32 node,
    Float32 mass
    )
 = "Bullet2__btSoftBody__MU__meth_setMass__80e99a9f4c47f3e5bec4c11013d00c7b";

/// \dfgPresetOmit
/// \internal
Float32
btSoftBody.cxx_getMass?(
    SInt32 node
    )
 = "Bullet2__btSoftBody__CO__meth_getMass__fc6f836534b0eeaa06cdae8c13936514";

/// \dfgPresetOmit
/// \internal
Float32
btSoftBody.cxx_getTotalMass?(
    )
 = "Bullet2__btSoftBody__CO__meth_getTotalMass__b60bebb8ecae49bbaab5285fb5b11bdf";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setTotalMass!(
    Float32 mass
    )
 = "Bullet2__btSoftBody__MU__meth_setTotalMass__102ab1dbaa05d8d19ad48fb3b77fb5c8";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setTotalMass!(
    Float32 mass,
    Boolean fromfaces
    )
 = "Bullet2__btSoftBody__MU__meth_setTotalMass__98f66b92509b379babab810861f5a336";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setTotalDensity!(
    Float32 density
    )
 = "Bullet2__btSoftBody__MU__meth_setTotalDensity__972118ef5c333f1492e1e6b2b1f7fc8b";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setVolumeMass!(
    Float32 mass
    )
 = "Bullet2__btSoftBody__MU__meth_setVolumeMass__14568cb65f9b93ed3afbffa64e9c6438";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setVolumeDensity!(
    Float32 density
    )
 = "Bullet2__btSoftBody__MU__meth_setVolumeDensity__2704a2965b1bf25407af83194b32a0ef";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_transform!(
    CxxbtTransformConstRef trs
    )
 = "Bullet2__btSoftBody__MU__meth_transform__c3fd5e53bcf2d5cc5edc481c058cc3b3";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_translate!(
    CxxbtVector3ConstRef trs
    )
 = "Bullet2__btSoftBody__MU__meth_translate__5adde71503b7076ad264f00c7041da3b";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_rotate!(
    CxxbtQuaternionConstRef rot
    )
 = "Bullet2__btSoftBody__MU__meth_rotate__324eadba21cc6ad756abba9c7e0ba158";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_scale!(
    CxxbtVector3ConstRef scl
    )
 = "Bullet2__btSoftBody__MU__meth_scale__fc3175e4eff39a2431b574739ebec5eb";

/// \dfgPresetOmit
/// \internal
Float32
btSoftBody.cxx_getRestLengthScale!(
    )
 = "Bullet2__btSoftBody__MU__meth_getRestLengthScale__9f6ca5479de307f12a2939881cd73504";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setRestLengthScale!(
    Float32 restLength
    )
 = "Bullet2__btSoftBody__MU__meth_setRestLengthScale__69c0b1c80a49b1e4c050d2a561fae97f";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setPose!(
    Boolean bvolume,
    Boolean bframe
    )
 = "Bullet2__btSoftBody__MU__meth_setPose__ac5aa55ddead0e020240d717c3c16ba4";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_resetLinkRestLengths!(
    )
 = "Bullet2__btSoftBody__MU__meth_resetLinkRestLengths__48c08356172b5d0fbfe6b35221df5816";

/// \dfgPresetOmit
/// \internal
Float32
btSoftBody.cxx_getVolume?(
    )
 = "Bullet2__btSoftBody__CO__meth_getVolume__9bf1a41a76afbc73bd1951e377b4f028";

/// \dfgPresetOmit
/// \internal
SInt32
btSoftBody.cxx_clusterCount?(
    )
 = "Bullet2__btSoftBody__CO__meth_clusterCount__a129f0f625afa1401c5d8fabe6ef087f";

/// \dfgPresetOmit
/// \internal
btVector3
btSoftBody_CxxclusterCom(
    btSoftBody_Cluster cluster
    )
 = "Bullet2__btSoftBody__ST__meth_clusterCom__358c96dddfab530f597c6cf92e441f6b";

/// \dfgPresetOmit
/// \internal
btVector3
btSoftBody.cxx_clusterCom?(
    SInt32 cluster
    )
 = "Bullet2__btSoftBody__CO__meth_clusterCom__d42793d120947953364969f52cfb03d1";

/// \dfgPresetOmit
/// \internal
btVector3
btSoftBody_CxxclusterVelocity(
    btSoftBody_Cluster cluster,
    CxxbtVector3ConstRef rpos
    )
 = "Bullet2__btSoftBody__ST__meth_clusterVelocity__284e5b73c18294903b0f7a6477699999";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxclusterVImpulse(
    btSoftBody_Cluster cluster,
    CxxbtVector3ConstRef rpos,
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btSoftBody__ST__meth_clusterVImpulse__222ee8c0c7a7963dfb649f85140e59a0";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxclusterDImpulse(
    btSoftBody_Cluster cluster,
    CxxbtVector3ConstRef rpos,
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btSoftBody__ST__meth_clusterDImpulse__43666f3385e5ea889076431a9d1ef12e";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxclusterImpulse(
    btSoftBody_Cluster cluster,
    CxxbtVector3ConstRef rpos,
    btSoftBody_Impulse impulse
    )
 = "Bullet2__btSoftBody__ST__meth_clusterImpulse__dc9a5cf60df716f912099af44093308e";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxclusterVAImpulse(
    btSoftBody_Cluster cluster,
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btSoftBody__ST__meth_clusterVAImpulse__65e6bab986ea4e8656a4347316eb64d6";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxclusterDAImpulse(
    btSoftBody_Cluster cluster,
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btSoftBody__ST__meth_clusterDAImpulse__4390624589448af29389cb7d48926931";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxclusterAImpulse(
    btSoftBody_Cluster cluster,
    btSoftBody_Impulse impulse
    )
 = "Bullet2__btSoftBody__ST__meth_clusterAImpulse__441bf4dc9073e2d121cdb88ac5cf5009";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxclusterDCImpulse(
    btSoftBody_Cluster cluster,
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btSoftBody__ST__meth_clusterDCImpulse__3e7be9a92d129003dd20d6f72f03ff57";

/// \dfgPresetOmit
/// \internal
SInt32
btSoftBody.cxx_generateBendingConstraints!(
    SInt32 distance
    )
 = "Bullet2__btSoftBody__MU__meth_generateBendingConstraints__b2cced69568bfb18ba9b7d3a0cfd3025";

/// \dfgPresetOmit
/// \internal
SInt32
btSoftBody.cxx_generateBendingConstraints!(
    SInt32 distance,
    btSoftBody_Material mat
    )
 = "Bullet2__btSoftBody__MU__meth_generateBendingConstraints__b07f6ec4fbd076f831fb9a023611b782";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_randomizeConstraints!(
    )
 = "Bullet2__btSoftBody__MU__meth_randomizeConstraints__aaa96983579487f500b1173a0a093829";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_releaseCluster!(
    SInt32 index
    )
 = "Bullet2__btSoftBody__MU__meth_releaseCluster__f2a5850c5632979bd044bc83ad30c309";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_releaseClusters!(
    )
 = "Bullet2__btSoftBody__MU__meth_releaseClusters__b5c74d47d213d5af05692909556fe9e5";

///generateClusters with k=0 will create a convex cluster for each tetrahedron or triangle
// 
///otherwise an approximation will be used (better performance)
/// \dfgPresetOmit
/// \internal
SInt32
btSoftBody.cxx_generateClusters!(
    SInt32 k
    )
 = "Bullet2__btSoftBody__MU__meth_generateClusters__c03e766f00ec3ef7d6d4ff5e3a9acfd8";

/// \dfgPresetOmit
/// \internal
SInt32
btSoftBody.cxx_generateClusters!(
    SInt32 k,
    SInt32 maxiterations
    )
 = "Bullet2__btSoftBody__MU__meth_generateClusters__a440d9e7febebb30da70c0c0b42bde96";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_refine!(
    btSoftBody_ImplicitFn ifn,
    Float32 accurary,
    Boolean cut
    )
 = "Bullet2__btSoftBody__MU__meth_refine__782f7a7ca5d201b966596c4ff142b452";

/// \dfgPresetOmit
/// \internal
Boolean
btSoftBody.cxx_cutLink!(
    SInt32 node0,
    SInt32 node1,
    Float32 position
    )
 = "Bullet2__btSoftBody__MU__meth_cutLink__e6b432e9cf5ffb4087cce3c8e965d9aa";

/// \dfgPresetOmit
/// \internal
Boolean
btSoftBody.cxx_cutLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    Float32 position
    )
 = "Bullet2__btSoftBody__MU__meth_cutLink__0e639d52ef4dc079d12f594f458a5cb7";

///Ray casting using rayFrom and rayTo in worldspace, (not direction!)
/// \dfgPresetOmit
/// \internal
Boolean
btSoftBody.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btSoftBody_sRayCast results
    )
 = "Bullet2__btSoftBody__MU__meth_rayTest__3d4d1e8f074cecbcfbb3e722f1da8118";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setSolver!(
    btSoftBody_eSolverPresets__ preset
    )
 = "Bullet2__btSoftBody__MU__meth_setSolver__411c4462b80d2b92702d5392c83f3393";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_predictMotion!(
    Float32 dt
    )
 = "Bullet2__btSoftBody__MU__meth_predictMotion__264f21e75476754a00c657c3c9baa98c";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_solveConstraints!(
    )
 = "Bullet2__btSoftBody__MU__meth_solveConstraints__3c3e783199a50bcb70cd2fc163b77acd";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_staticSolve!(
    SInt32 iterations
    )
 = "Bullet2__btSoftBody__MU__meth_staticSolve__bd02969ce710dd42fc0754b4b047b3a6";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxsolveCommonConstraints(
    CxxbtSoftBodyPtr bodies,
    SInt32 count,
    SInt32 iterations
    )
 = "Bullet2__btSoftBody__ST__meth_solveCommonConstraints__ea34d53e2bedeadb125ea72971c2b25b";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_integrateMotion!(
    )
 = "Bullet2__btSoftBody__MU__meth_integrateMotion__3b0428473662c29b81f51c6731b46fc3";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_defaultCollisionHandler!(
    btSoftBody psb
    )
 = "Bullet2__btSoftBody__MU__meth_defaultCollisionHandler__4e46ed952f4ef279e27918f61f4fdcc3";

/**

	 * Set a wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setWindVelocity!(
    CxxbtVector3ConstRef velocity
    )
 = "Bullet2__btSoftBody__MU__meth_setWindVelocity__d217d81ef61163c69e97e32f520bcd4e";

/**

	 * Return the wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSoftBody.cxx_getWindVelocity!(
    )
 = "Bullet2__btSoftBody__MU__meth_getWindVelocity__77b15ba35638befb8484a8497da20b80";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_setSoftBodySolver!(
    btSoftBodySolver softBodySolver
    )
 = "Bullet2__btSoftBody__MU__meth_setSoftBodySolver__bf0c9a955c3abdc553f1e269b7a04618";

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
btSoftBody.cxx_getSoftBodySolver!(
    )
 = "Bullet2__btSoftBody__MU__meth_getSoftBodySolver__3d517ef65b97f0a12dff5f50de35844f";

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
btSoftBody.cxx_getSoftBodySolver?(
    )
 = "Bullet2__btSoftBody__CO__meth_getSoftBodySolver__e3e7aeefb20804a75a26ed75a6053944";

/// \dfgPresetOmit
/// \internal
btSoftBody
btSoftBody_Cxxupcast(
    btCollisionObject colObj
    )
 = "Bullet2__btSoftBody__ST__meth_upcast__56608935a8cbeedefaac186a1d51cb3d";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_getAabb?(
    CxxbtVector3Ref aabbMin,
    CxxbtVector3Ref aabbMax
    )
 = "Bullet2__btSoftBody__CO__meth_getAabb__0de494aa3f15711a8385a4baeaf746e7";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_pointersToIndices!(
    )
 = "Bullet2__btSoftBody__MU__meth_pointersToIndices__0bdcd074c2f26ae12759aae869f990d5";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_indicesToPointers!(
    )
 = "Bullet2__btSoftBody__MU__meth_indicesToPointers__9052071c6612668a7e8d40bfe2cfb5a4";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_indicesToPointers!(
    CxxSInt32ConstPtr map
    )
 = "Bullet2__btSoftBody__MU__meth_indicesToPointers__e293e8c4c3fce2943b95ed37cdabdc06";

/// \dfgPresetOmit
/// \internal
SInt32
btSoftBody.cxx_rayTest?(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    CxxFloat32Ref mint,
    CxxbtSoftBody_eFeature__Ref feature,
    CxxSInt32Ref index,
    Boolean bcountonly
    )
 = "Bullet2__btSoftBody__CO__meth_rayTest__6a35202a2f1c47e19e7b474f2f245c1e";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_initializeFaceTree!(
    )
 = "Bullet2__btSoftBody__MU__meth_initializeFaceTree__ae9ca3782c20dc0540e2c5c4b542babe";

/// \dfgPresetOmit
/// \internal
btVector3
btSoftBody.cxx_evaluateCom?(
    )
 = "Bullet2__btSoftBody__CO__meth_evaluateCom__347ce38b3cece8ddd84f20a27f30255f";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_updateNormals!(
    )
 = "Bullet2__btSoftBody__MU__meth_updateNormals__413dc55c82ea24af4f5724e1c1805617";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_updateBounds!(
    )
 = "Bullet2__btSoftBody__MU__meth_updateBounds__2345411a4ade025c0062e25decc16ad3";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_updatePose!(
    )
 = "Bullet2__btSoftBody__MU__meth_updatePose__96443793655cb7de6d1bd83d6b176456";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_updateConstants!(
    )
 = "Bullet2__btSoftBody__MU__meth_updateConstants__e532fdaedb46b7ce676132806d7e66d6";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_updateLinkConstants!(
    )
 = "Bullet2__btSoftBody__MU__meth_updateLinkConstants__5849151a2ce85f16dd9a47f7ad42d25b";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_updateArea!(
    )
 = "Bullet2__btSoftBody__MU__meth_updateArea__43cc8709f5c06f89ec57f3a3ab6f24da";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_updateArea!(
    Boolean averageArea
    )
 = "Bullet2__btSoftBody__MU__meth_updateArea__50dfc9bc486606bfde59f1d1b1a46d0a";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_initializeClusters!(
    )
 = "Bullet2__btSoftBody__MU__meth_initializeClusters__3aa8439e0234f8421e022bc01c2df525";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_updateClusters!(
    )
 = "Bullet2__btSoftBody__MU__meth_updateClusters__5483027db16ba149d7bfb3007ea42087";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_cleanupClusters!(
    )
 = "Bullet2__btSoftBody__MU__meth_cleanupClusters__a32016a0dbf48f59f1dbf6f258f02b93";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_prepareClusters!(
    SInt32 iterations
    )
 = "Bullet2__btSoftBody__MU__meth_prepareClusters__d913dace44a5d6b78f8ee9554a0bca73";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_solveClusters!(
    Float32 sor
    )
 = "Bullet2__btSoftBody__MU__meth_solveClusters__eb0999ec71fb0238610cc5bf3c07ac6d";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_applyClusters!(
    Boolean drift
    )
 = "Bullet2__btSoftBody__MU__meth_applyClusters__ad0da45cb9a9803d9cd1e982422e1afd";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_dampClusters!(
    )
 = "Bullet2__btSoftBody__MU__meth_dampClusters__57eaca2de354d315897437df5e001ec2";

/// \dfgPresetOmit
/// \internal

btSoftBody.cxx_applyForces!(
    )
 = "Bullet2__btSoftBody__MU__meth_applyForces__1db80d61458078473127329184695828";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxPSolve_Anchors(
    btSoftBody psb,
    Float32 kst,
    Float32 ti
    )
 = "Bullet2__btSoftBody__ST__meth_PSolve_Anchors__0feec16a1087b9e5060dfc4ed214ce07";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxPSolve_RContacts(
    btSoftBody psb,
    Float32 kst,
    Float32 ti
    )
 = "Bullet2__btSoftBody__ST__meth_PSolve_RContacts__bf87d2766903f61624d9ebf4d4e7db8b";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxPSolve_SContacts(
    btSoftBody psb,
    Float32 _arg1,
    Float32 ti
    )
 = "Bullet2__btSoftBody__ST__meth_PSolve_SContacts__4df08541fd239bf80f5b282b8834b51f";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxPSolve_Links(
    btSoftBody psb,
    Float32 kst,
    Float32 ti
    )
 = "Bullet2__btSoftBody__ST__meth_PSolve_Links__62b06cb63d02a2e5229cc13d149d306a";

/// \dfgPresetOmit
/// \internal

btSoftBody_CxxVSolve_Links(
    btSoftBody psb,
    Float32 kst
    )
 = "Bullet2__btSoftBody__ST__meth_VSolve_Links__a51fa5753a4125b6b1b1da01dd51fd73";

/// \dfgPresetOmit
/// \internal
SInt32
btSoftBody.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btSoftBody__CO__meth_calculateSerializeBufferSize__5620273c2d28a4c4cc21c26721511ce4";


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Link
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}


btSoftBody.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    ,
    in
    Boolean
    bcheckexist
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
    
    
    
    
    
    
}

btSoftBodySolver
btSoftBody.getSoftBodySolver!(
    )
{   
    btSoftBodySolver __res = 
    this.cxx_getSoftBodySolver(
        );
    
    return __res;
}


btSoftBody.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendAnchor(
        node,
        body
        );
    
    
    
    
}


btSoftBody.releaseCluster!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_releaseCluster(
        index
        );
    
    
    
}


btSoftBody_clusterDImpulse(
    in
    btSoftBody_Cluster
    cluster
    
    ,
    in
    btVector3
    rpos
    
    ,
    in
    btVector3
    impulse
    
    
    )
{   
    
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    btSoftBody_CxxclusterDImpulse(
        cluster,
        rpos__cxx,
        impulse__cxx
        );
    
    
    
    
    
}


btSoftBody.integrateMotion!(
    )
{   
    
    this.cxx_integrateMotion(
        );
    
    
}


btSoftBody.addVelocity!(
    in
    btVector3
    velocity
    
    ,
    in
    SInt32
    node
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    
    this.cxx_addVelocity(
        velocity__cxx,
        node
        );
    
    
    
    
}


btSoftBody.resetLinkRestLengths!(
    )
{   
    
    this.cxx_resetLinkRestLengths(
        );
    
    
}


btSoftBody.appendFace!(
    )
{   
    
    this.cxx_appendFace(
        );
    
    
}


btSoftBody.updateNormals!(
    )
{   
    
    this.cxx_updateNormals(
        );
    
    
}


btSoftBody.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        node0,
        node1
        );
    
    
    
    
}

btVector3
btSoftBody.clusterCom?(
    in
    SInt32
    cluster
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_clusterCom(
        cluster
        );
    
    
    return __res;
}


btSoftBody.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat
        );
    
    
    
    
    
}


btSoftBody.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    ,
    in
    Boolean
    bcheckexist
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
    
    
    
    
    
    
}


btSoftBody.appendTetra!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    SInt32
    node3
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    
    
    this.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3,
        mat
        );
    
    
    
    
    
    
    
}


btSoftBody_clusterAImpulse(
    in
    btSoftBody_Cluster
    cluster
    
    ,
    in
    btSoftBody_Impulse
    impulse
    
    
    )
{   
    
    
    
    btSoftBody_CxxclusterAImpulse(
        cluster,
        impulse
        );
    
    
    
    
}


btSoftBody.setVolumeDensity!(
    in
    Float32
    density
    
    
    )
{   
    
    
    this.cxx_setVolumeDensity(
        density
        );
    
    
    
}


btSoftBody.updatePose!(
    )
{   
    
    this.cxx_updatePose(
        );
    
    
}

Boolean
btSoftBody.checkFace?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_checkFace(
        node0,
        node1,
        node2
        );
    
    
    
    
    return __res;
}

Float32
btSoftBody.getRestLengthScale!(
    )
{   
    Float32 __res = 
    this.cxx_getRestLengthScale(
        );
    
    return __res;
}

Boolean
btSoftBody.checkLink?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}


btSoftBody.addForce!(
    in
    btVector3
    force
    
    
    )
{   
    
    CxxbtVector3ConstRef force__cxx = Make_CxxbtVector3ConstRef(force);
    
    this.cxx_addForce(
        force__cxx
        );
    
    
    
}


btSoftBody.setSoftBodySolver!(
    in
    btSoftBodySolver
    softBodySolver
    
    
    )
{   
    
    
    this.cxx_setSoftBodySolver(
        softBodySolver
        );
    
    
    
}


btSoftBody.appendLinearJoint!(
    in
    btSoftBody_LJoint_Specs
    specs
    
    ,
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendLinearJoint(
        specs,
        body
        );
    
    
    
    
}


btSoftBody.setVolumeMass!(
    in
    Float32
    mass
    
    
    )
{   
    
    
    this.cxx_setVolumeMass(
        mass
        );
    
    
    
}

SInt32
btSoftBody.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}


btSoftBody.appendLink!(
    in
    SInt32
    model
    
    
    )
{   
    
    
    this.cxx_appendLink(
        model
        );
    
    
    
}


btSoftBody.setMass!(
    in
    SInt32
    node
    
    ,
    in
    Float32
    mass
    
    
    )
{   
    
    
    
    this.cxx_setMass(
        node,
        mass
        );
    
    
    
    
}


btSoftBody.initDefaults!(
    )
{   
    
    this.cxx_initDefaults(
        );
    
    
}


btSoftBody.solveClusters!(
    in
    Float32
    sor
    
    
    )
{   
    
    
    this.cxx_solveClusters(
        sor
        );
    
    
    
}


btSoftBody.pointersToIndices!(
    )
{   
    
    this.cxx_pointersToIndices(
        );
    
    
}


btSoftBody.addVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_addVelocity(
        velocity__cxx
        );
    
    
    
}


btSoftBody.setSolver!(
    in
    btSoftBody_eSolverPresets__
    preset
    
    
    )
{   
    
    
    this.cxx_setSolver(
        preset
        );
    
    
    
}


btSoftBody.appendLink!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        model,
        mat
        );
    
    
    
    
}


btSoftBody.prepareClusters!(
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    this.cxx_prepareClusters(
        iterations
        );
    
    
    
}


btSoftBody.refine!(
    in
    btSoftBody_ImplicitFn
    ifn
    
    ,
    in
    Float32
    accurary
    
    ,
    in
    Boolean
    cut
    
    
    )
{   
    
    
    
    
    this.cxx_refine(
        ifn,
        accurary,
        cut
        );
    
    
    
    
    
}


btSoftBody_PSolve_RContacts(
    in
    btSoftBody
    psb
    
    ,
    in
    Float32
    kst
    
    ,
    in
    Float32
    ti
    
    
    )
{   
    
    
    
    
    btSoftBody_CxxPSolve_RContacts(
        psb,
        kst,
        ti
        );
    
    
    
    
    
}


btSoftBody.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat
        );
    
    
    
    
    
}


btSoftBody.appendNode!(
    in
    btVector3
    x
    
    ,
    in
    Float32
    m
    
    
    )
{   
    
    CxxbtVector3ConstRef x__cxx = Make_CxxbtVector3ConstRef(x);
    
    
    this.cxx_appendNode(
        x__cxx,
        m
        );
    
    
    
    
}


btSoftBody.updateLinkConstants!(
    )
{   
    
    this.cxx_updateLinkConstants(
        );
    
    
}


btSoftBody.setTotalMass!(
    in
    Float32
    mass
    
    ,
    in
    Boolean
    fromfaces
    
    
    )
{   
    
    
    
    this.cxx_setTotalMass(
        mass,
        fromfaces
        );
    
    
    
    
}


btSoftBody.applyForces!(
    )
{   
    
    this.cxx_applyForces(
        );
    
    
}


btSoftBody.appendFace!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    
    )
{   
    
    
    
    
    this.cxx_appendFace(
        node0,
        node1,
        node2
        );
    
    
    
    
    
}


btSoftBody_solveCommonConstraints(
    io
    btSoftBody
    bodies
    
    ,
    in
    SInt32
    count
    
    ,
    in
    SInt32
    iterations
    
    
    )
{   
    
    CxxbtSoftBodyPtr bodies__cxx = Make_CxxbtSoftBodyPtr(bodies);
    
    
    
    btSoftBody_CxxsolveCommonConstraints(
        bodies__cxx,
        count,
        iterations
        );
    
    
    
    
    
}


btSoftBody.setPose!(
    in
    Boolean
    bvolume
    
    ,
    in
    Boolean
    bframe
    
    
    )
{   
    
    
    
    this.cxx_setPose(
        bvolume,
        bframe
        );
    
    
    
    
}


btSoftBody.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    
    )
{   
    
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies
        );
    
    
    
    
    
}


btSoftBody.appendLink!(
    )
{   
    
    this.cxx_appendLink(
        );
    
    
}


btSoftBody.appendFace!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendFace(
        node0,
        node1,
        node2,
        mat
        );
    
    
    
    
    
    
}


btSoftBody.appendAngularJoint!(
    in
    btSoftBody_AJoint_Specs
    specs
    
    ,
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendAngularJoint(
        specs,
        body
        );
    
    
    
    
}

/**

	 * Set a wind velocity for interaction with the air.

	 */

btSoftBody.setWindVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_setWindVelocity(
        velocity__cxx
        );
    
    
    
}


btSoftBody.transform!(
    in
    btTransform
    trs
    
    
    )
{   
    
    CxxbtTransformConstRef trs__cxx = Make_CxxbtTransformConstRef(trs);
    
    this.cxx_transform(
        trs__cxx
        );
    
    
    
}


btSoftBody.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    ,
    in
    Float32
    influence
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx,
        disableCollisionBetweenLinkedBodies,
        influence
        );
    
    
    
    
    
    
    
}

SInt32
btSoftBody.generateBendingConstraints!(
    in
    SInt32
    distance
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_generateBendingConstraints(
        distance,
        mat
        );
    
    
    
    return __res;
}

Boolean
btSoftBody.cutLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    Float32
    position
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_cutLink(
        node0,
        node1,
        position
        );
    
    
    
    
    return __res;
}

/**

	 * Return the wind velocity for interaction with the air.

	 */
btVector3
btSoftBody.getWindVelocity!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getWindVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btSoftBody.updateConstants!(
    )
{   
    
    this.cxx_updateConstants(
        );
    
    
}


btSoftBody.cleanupClusters!(
    )
{   
    
    this.cxx_cleanupClusters(
        );
    
    
}


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Face
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}

btSoftBodyWorldInfo
btSoftBody.getWorldInfo!(
    )
{   
    btSoftBodyWorldInfo __res = 
    this.cxx_getWorldInfo(
        );
    
    return __res;
}


btSoftBody.translate!(
    in
    btVector3
    trs
    
    
    )
{   
    
    CxxbtVector3ConstRef trs__cxx = Make_CxxbtVector3ConstRef(trs);
    
    this.cxx_translate(
        trs__cxx
        );
    
    
    
}


btSoftBody.initializeFaceTree!(
    )
{   
    
    this.cxx_initializeFaceTree(
        );
    
    
}


btSoftBody.staticSolve!(
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    this.cxx_staticSolve(
        iterations
        );
    
    
    
}


btSoftBody.updateClusters!(
    )
{   
    
    this.cxx_updateClusters(
        );
    
    
}


btSoftBody.getAabb?(
    io
    btVector3
    aabbMin
    
    ,
    io
    btVector3
    aabbMax
    
    
    )
{   
    
    CxxbtVector3Ref aabbMin__cxx = Make_CxxbtVector3Ref(aabbMin);
    
    CxxbtVector3Ref aabbMax__cxx = Make_CxxbtVector3Ref(aabbMax);
    
    this.cxx_getAabb(
        aabbMin__cxx,
        aabbMax__cxx
        );
    
    
    
    
}


btSoftBody_clusterDCImpulse(
    in
    btSoftBody_Cluster
    cluster
    
    ,
    in
    btVector3
    impulse
    
    
    )
{   
    
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    btSoftBody_CxxclusterDCImpulse(
        cluster,
        impulse__cxx
        );
    
    
    
    
}


btSoftBody.appendTetra!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    SInt32
    node3
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3
        );
    
    
    
    
    
    
}


btSoftBody.randomizeConstraints!(
    )
{   
    
    this.cxx_randomizeConstraints(
        );
    
    
}


btSoftBody_clusterDAImpulse(
    in
    btSoftBody_Cluster
    cluster
    
    ,
    in
    btVector3
    impulse
    
    
    )
{   
    
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    btSoftBody_CxxclusterDAImpulse(
        cluster,
        impulse__cxx
        );
    
    
    
    
}


btSoftBody.indicesToPointers!(
    )
{   
    
    this.cxx_indicesToPointers(
        );
    
    
}


btSoftBody_VSolve_Links(
    in
    btSoftBody
    psb
    
    ,
    in
    Float32
    kst
    
    
    )
{   
    
    
    
    btSoftBody_CxxVSolve_Links(
        psb,
        kst
        );
    
    
    
    
}


btSoftBody_clusterVAImpulse(
    in
    btSoftBody_Cluster
    cluster
    
    ,
    in
    btVector3
    impulse
    
    
    )
{   
    
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    btSoftBody_CxxclusterVAImpulse(
        cluster,
        impulse__cxx
        );
    
    
    
    
}


btSoftBody.updateBounds!(
    )
{   
    
    this.cxx_updateBounds(
        );
    
    
}


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    ,
    in
    btSoftBody_Node
    n2
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1,
        n2
        );
    
    
    
    
    
    
    
    
}


btSoftBody.initializeClusters!(
    )
{   
    
    this.cxx_initializeClusters(
        );
    
    
}

SInt32
btSoftBody.generateClusters!(
    in
    SInt32
    k
    
    ,
    in
    SInt32
    maxiterations
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_generateClusters(
        k,
        maxiterations
        );
    
    
    
    return __res;
}


btSoftBody.updateArea!(
    in
    Boolean
    averageArea
    
    
    )
{   
    
    
    this.cxx_updateArea(
        averageArea
        );
    
    
    
}


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0
        );
    
    
    
    
    
    
}


btSoftBody.defaultCollisionHandler!(
    in
    btSoftBody
    psb
    
    
    )
{   
    
    
    this.cxx_defaultCollisionHandler(
        psb
        );
    
    
    
}


btSoftBody.setTotalDensity!(
    in
    Float32
    density
    
    
    )
{   
    
    
    this.cxx_setTotalDensity(
        density
        );
    
    
    
}


btSoftBody_clusterImpulse(
    in
    btSoftBody_Cluster
    cluster
    
    ,
    in
    btVector3
    rpos
    
    ,
    in
    btSoftBody_Impulse
    impulse
    
    
    )
{   
    
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    
    
    btSoftBody_CxxclusterImpulse(
        cluster,
        rpos__cxx,
        impulse
        );
    
    
    
    
    
}


btSoftBody.dampClusters!(
    )
{   
    
    this.cxx_dampClusters(
        );
    
    
}


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx
        );
    
    
    
    
    
}


btSoftBody_clusterVImpulse(
    in
    btSoftBody_Cluster
    cluster
    
    ,
    in
    btVector3
    rpos
    
    ,
    in
    btVector3
    impulse
    
    
    )
{   
    
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    btSoftBody_CxxclusterVImpulse(
        cluster,
        rpos__cxx,
        impulse__cxx
        );
    
    
    
    
    
}


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Node
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}

Boolean
btSoftBody.checkLink?(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

btVector3
btSoftBody.evaluateCom?(
    )
{   
    btVector3 __res = 
    this.cxx_evaluateCom(
        );
    
    return __res;
}


btSoftBody.addForce!(
    in
    btVector3
    force
    
    ,
    in
    SInt32
    node
    
    
    )
{   
    
    CxxbtVector3ConstRef force__cxx = Make_CxxbtVector3ConstRef(force);
    
    
    this.cxx_addForce(
        force__cxx,
        node
        );
    
    
    
    
}


btSoftBody_PSolve_Anchors(
    in
    btSoftBody
    psb
    
    ,
    in
    Float32
    kst
    
    ,
    in
    Float32
    ti
    
    
    )
{   
    
    
    
    
    btSoftBody_CxxPSolve_Anchors(
        psb,
        kst,
        ti
        );
    
    
    
    
    
}


btSoftBody.applyClusters!(
    in
    Boolean
    drift
    
    
    )
{   
    
    
    this.cxx_applyClusters(
        drift
        );
    
    
    
}


btSoftBody.indicesToPointers!(
    in
    SInt32
    map
    
    
    )
{   
    
    CxxSInt32ConstPtr map__cxx = Make_CxxSInt32ConstPtr(map);
    
    this.cxx_indicesToPointers(
        map__cxx
        );
    
    
    
}

btSoftBody
btSoftBody_upcast(
    in
    btCollisionObject
    colObj
    
    
    )
{   
    
    btSoftBody __res = 
    btSoftBody_Cxxupcast(
        colObj
        );
    
    
    return __res;
}


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    ,
    in
    btSoftBody_Node
    n2
    
    ,
    in
    btSoftBody_Node
    n3
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1,
        n2,
        n3
        );
    
    
    
    
    
    
    
    
    
}

btSoftBody_Material
btSoftBody.appendMaterial!(
    )
{   
    btSoftBody_Material __res = 
    this.cxx_appendMaterial(
        );
    
    return __res;
}


btSoftBody.updateArea!(
    )
{   
    
    this.cxx_updateArea(
        );
    
    
}


btSoftBody.setRestLengthScale!(
    in
    Float32
    restLength
    
    
    )
{   
    
    
    this.cxx_setRestLengthScale(
        restLength
        );
    
    
    
}


btSoftBody.predictMotion!(
    in
    Float32
    dt
    
    
    )
{   
    
    
    this.cxx_predictMotion(
        dt
        );
    
    
    
}


btSoftBody.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx,
        disableCollisionBetweenLinkedBodies
        );
    
    
    
    
    
    
}


btSoftBody.setTotalMass!(
    in
    Float32
    mass
    
    
    )
{   
    
    
    this.cxx_setTotalMass(
        mass
        );
    
    
    
}


btSoftBody.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    ,
    in
    Float32
    influence
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies,
        influence
        );
    
    
    
    
    
    
}

///@todo: avoid internal softbody shape hack and move collision code to collision library

btSoftBody.setCollisionShape!(
    in
    btCollisionShape
    collisionShape
    
    
    )
{   
    
    
    this.cxx_setCollisionShape(
        collisionShape
        );
    
    
    
}

SInt32
btSoftBody.clusterCount?(
    )
{   
    SInt32 __res = 
    this.cxx_clusterCount(
        );
    
    return __res;
}


btSoftBody.addAeroForceToFace!(
    in
    btVector3
    windVelocity
    
    ,
    in
    SInt32
    faceIndex
    
    
    )
{   
    
    CxxbtVector3ConstRef windVelocity__cxx = Make_CxxbtVector3ConstRef(windVelocity);
    
    
    this.cxx_addAeroForceToFace(
        windVelocity__cxx,
        faceIndex
        );
    
    
    
    
}


btSoftBody.addAeroForceToNode!(
    in
    btVector3
    windVelocity
    
    ,
    in
    SInt32
    nodeIndex
    
    
    )
{   
    
    CxxbtVector3ConstRef windVelocity__cxx = Make_CxxbtVector3ConstRef(windVelocity);
    
    
    this.cxx_addAeroForceToNode(
        windVelocity__cxx,
        nodeIndex
        );
    
    
    
    
}

Float32
btSoftBody.getTotalMass?(
    )
{   
    Float32 __res = 
    this.cxx_getTotalMass(
        );
    
    return __res;
}

///Ray casting using rayFrom and rayTo in worldspace, (not direction!)
Boolean
btSoftBody.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btSoftBody_sRayCast
    results
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    Boolean __res = 
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        results
        );
    
    
    
    
    return __res;
}

///generateClusters with k=0 will create a convex cluster for each tetrahedron or triangle
// 
///otherwise an approximation will be used (better performance)
SInt32
btSoftBody.generateClusters!(
    in
    SInt32
    k
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_generateClusters(
        k
        );
    
    
    return __res;
}

Boolean
btSoftBody.cutLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    Float32
    position
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_cutLink(
        node0,
        node1,
        position
        );
    
    
    
    
    return __res;
}


btSoftBody.appendAngularJoint!(
    in
    btSoftBody_AJoint_Specs
    specs
    
    
    )
{   
    
    
    this.cxx_appendAngularJoint(
        specs
        );
    
    
    
}


btSoftBody.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        node0,
        node1
        );
    
    
    
    
}


btSoftBody.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx
        );
    
    
    
    
    
}

btVector3
btSoftBody_clusterVelocity(
    in
    btSoftBody_Cluster
    cluster
    
    ,
    in
    btVector3
    rpos
    
    
    )
{   
    
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    btVector3 __res = 
    btSoftBody_CxxclusterVelocity(
        cluster,
        rpos__cxx
        );
    
    
    
    return __res;
}


btSoftBody.setVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_setVelocity(
        velocity__cxx
        );
    
    
    
}


btSoftBody.appendFace!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendFace(
        model,
        mat
        );
    
    
    
    
}

SInt32
btSoftBody.generateBendingConstraints!(
    in
    SInt32
    distance
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_generateBendingConstraints(
        distance
        );
    
    
    return __res;
}


btSoftBody.releaseClusters!(
    )
{   
    
    this.cxx_releaseClusters(
        );
    
    
}


btSoftBody_PSolve_SContacts(
    in
    btSoftBody
    psb
    
    ,
    in
    Float32
    _arg1
    
    ,
    in
    Float32
    ti
    
    
    )
{   
    
    
    
    
    btSoftBody_CxxPSolve_SContacts(
        psb,
        _arg1,
        ti
        );
    
    
    
    
    
}

btVector3
btSoftBody_clusterCom(
    in
    btSoftBody_Cluster
    cluster
    
    
    )
{   
    
    btVector3 __res = 
    btSoftBody_CxxclusterCom(
        cluster
        );
    
    
    return __res;
}


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx
        );
    
    
    
    
}

SInt32
btSoftBody.rayTest?(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    io
    Float32
    mint
    
    ,
    io
    btSoftBody_eFeature__
    feature
    
    ,
    io
    SInt32
    index
    
    ,
    in
    Boolean
    bcountonly
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    CxxFloat32Ref mint__cxx = Make_CxxFloat32Ref(mint);
    
    CxxbtSoftBody_eFeature__Ref feature__cxx = Make_CxxbtSoftBody_eFeature__Ref(feature);
    
    CxxSInt32Ref index__cxx = Make_CxxSInt32Ref(index);
    
    SInt32 __res = 
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        mint__cxx,
        feature__cxx,
        index__cxx,
        bcountonly
        );
    
    
    
    
    
    
    
    return __res;
}

Float32
btSoftBody.getMass?(
    in
    SInt32
    node
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getMass(
        node
        );
    
    
    return __res;
}


btSoftBody.appendTetra!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendTetra(
        model,
        mat
        );
    
    
    
    
}


btSoftBody.appendFace!(
    in
    SInt32
    model
    
    
    )
{   
    
    
    this.cxx_appendFace(
        model
        );
    
    
    
}


btSoftBody_PSolve_Links(
    in
    btSoftBody
    psb
    
    ,
    in
    Float32
    kst
    
    ,
    in
    Float32
    ti
    
    
    )
{   
    
    
    
    
    btSoftBody_CxxPSolve_Links(
        psb,
        kst,
        ti
        );
    
    
    
    
    
}


btSoftBody.solveConstraints!(
    )
{   
    
    this.cxx_solveConstraints(
        );
    
    
}


btSoftBody.appendLinearJoint!(
    in
    btSoftBody_LJoint_Specs
    specs
    
    
    )
{   
    
    
    this.cxx_appendLinearJoint(
        specs
        );
    
    
    
}

Float32
btSoftBody.getVolume?(
    )
{   
    Float32 __res = 
    this.cxx_getVolume(
        );
    
    return __res;
}


btSoftBody.scale!(
    in
    btVector3
    scl
    
    
    )
{   
    
    CxxbtVector3ConstRef scl__cxx = Make_CxxbtVector3ConstRef(scl);
    
    this.cxx_scale(
        scl__cxx
        );
    
    
    
}


btSoftBody.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1
        );
    
    
    
    
    
    
    
}


btSoftBody.rotate!(
    in
    btQuaternion
    rot
    
    
    )
{   
    
    CxxbtQuaternionConstRef rot__cxx = Make_CxxbtQuaternionConstRef(rot);
    
    this.cxx_rotate(
        rot__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody.=(
    btSoftBody that
    ) = "Bullet2__btSoftBody__MU__simple_ass_op__af1a4e94f4a4c1671c6fd6071fb0afe9";


/// \dfgPresetOmit
/// \internal
btSoftBody.appendDesc(io String string) {
  string += "btSoftBody:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eAeroModel] EDK[Fabric_EDK_KL_btSoftBody_eAeroModel] LIB[btSoftBody::eAeroModel *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eAeroModel] EDK[Fabric_EDK_KL_btSoftBody_eAeroModel] LIB[btSoftBody::eAeroModel *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eAeroModel] EDK[Fabric_EDK_KL_btSoftBody_eAeroModel] LIB[btSoftBody::eAeroModel *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_eAeroModel() = "Bullet2__btSoftBody_eAeroModel__MU__empty_ctor__7cabc9c8da0c2b61d5326505a5baa36a";

/// \dfgPresetOmit
btSoftBody_eAeroModel(
    btSoftBody_eAeroModel that
    ) = "Bullet2__btSoftBody_eAeroModel__MU__copy_ctor__6669bfb27c6b4539aadd9a62c3cde75f";

btSoftBody_eAeroModel.cxx_delete() = "Bullet2__btSoftBody_eAeroModel__MU__delete__9434980a304e9e052879cec606674b3e";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eAeroModel] EDK[Fabric_EDK_KL_btSoftBody_eAeroModel] LIB[btSoftBody::eAeroModel *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eAeroModel] EDK[Fabric_EDK_KL_btSoftBody_eAeroModel] LIB[btSoftBody::eAeroModel *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eAeroModel] EDK[Fabric_EDK_KL_btSoftBody_eAeroModel] LIB[btSoftBody::eAeroModel *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_eAeroModel.=(
    btSoftBody_eAeroModel that
    ) = "Bullet2__btSoftBody_eAeroModel__MU__simple_ass_op__10bec5990ed063f71fa175c58a71d1df";


/// \dfgPresetOmit
/// \internal
btSoftBody_eAeroModel.appendDesc(io String string) {
  string += "btSoftBody_eAeroModel:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eVSolver] EDK[Fabric_EDK_KL_btSoftBody_eVSolver] LIB[btSoftBody::eVSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eVSolver] EDK[Fabric_EDK_KL_btSoftBody_eVSolver] LIB[btSoftBody::eVSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eVSolver] EDK[Fabric_EDK_KL_btSoftBody_eVSolver] LIB[btSoftBody::eVSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_eVSolver() = "Bullet2__btSoftBody_eVSolver__MU__empty_ctor__c4559f1e91163564e3ed666e4c847ee2";

/// \dfgPresetOmit
btSoftBody_eVSolver(
    btSoftBody_eVSolver that
    ) = "Bullet2__btSoftBody_eVSolver__MU__copy_ctor__be032d3cdf6e6ab16c672869eae1b058";

btSoftBody_eVSolver.cxx_delete() = "Bullet2__btSoftBody_eVSolver__MU__delete__2319a078aa516547ab09d14eea49abb2";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eVSolver] EDK[Fabric_EDK_KL_btSoftBody_eVSolver] LIB[btSoftBody::eVSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eVSolver] EDK[Fabric_EDK_KL_btSoftBody_eVSolver] LIB[btSoftBody::eVSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eVSolver] EDK[Fabric_EDK_KL_btSoftBody_eVSolver] LIB[btSoftBody::eVSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_eVSolver.=(
    btSoftBody_eVSolver that
    ) = "Bullet2__btSoftBody_eVSolver__MU__simple_ass_op__cb1957316d1356243e2a57d6ae1c2ec4";


/// \dfgPresetOmit
/// \internal
btSoftBody_eVSolver.appendDesc(io String string) {
  string += "btSoftBody_eVSolver:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_ePSolver] EDK[Fabric_EDK_KL_btSoftBody_ePSolver] LIB[btSoftBody::ePSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ePSolver] EDK[Fabric_EDK_KL_btSoftBody_ePSolver] LIB[btSoftBody::ePSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ePSolver] EDK[Fabric_EDK_KL_btSoftBody_ePSolver] LIB[btSoftBody::ePSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_ePSolver() = "Bullet2__btSoftBody_ePSolver__MU__empty_ctor__35463bf8e7c0dd12144db07c72c9dc3f";

/// \dfgPresetOmit
btSoftBody_ePSolver(
    btSoftBody_ePSolver that
    ) = "Bullet2__btSoftBody_ePSolver__MU__copy_ctor__8841c93e5b89c9f94e2b390744bbc69b";

btSoftBody_ePSolver.cxx_delete() = "Bullet2__btSoftBody_ePSolver__MU__delete__001f0a5338dcffa20c82c5986db5178d";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ePSolver] EDK[Fabric_EDK_KL_btSoftBody_ePSolver] LIB[btSoftBody::ePSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ePSolver] EDK[Fabric_EDK_KL_btSoftBody_ePSolver] LIB[btSoftBody::ePSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ePSolver] EDK[Fabric_EDK_KL_btSoftBody_ePSolver] LIB[btSoftBody::ePSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_ePSolver.=(
    btSoftBody_ePSolver that
    ) = "Bullet2__btSoftBody_ePSolver__MU__simple_ass_op__913110f5b33031cfb0aedfcc937bbc24";


/// \dfgPresetOmit
/// \internal
btSoftBody_ePSolver.appendDesc(io String string) {
  string += "btSoftBody_ePSolver:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eSolverPresets] EDK[Fabric_EDK_KL_btSoftBody_eSolverPresets] LIB[btSoftBody::eSolverPresets *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eSolverPresets] EDK[Fabric_EDK_KL_btSoftBody_eSolverPresets] LIB[btSoftBody::eSolverPresets *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eSolverPresets] EDK[Fabric_EDK_KL_btSoftBody_eSolverPresets] LIB[btSoftBody::eSolverPresets *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_eSolverPresets() = "Bullet2__btSoftBody_eSolverPresets__MU__empty_ctor__f428919cc44369c47550f744e37e6ec4";

/// \dfgPresetOmit
btSoftBody_eSolverPresets(
    btSoftBody_eSolverPresets that
    ) = "Bullet2__btSoftBody_eSolverPresets__MU__copy_ctor__6ecef760e271a9ae871605baa322fe81";

btSoftBody_eSolverPresets.cxx_delete() = "Bullet2__btSoftBody_eSolverPresets__MU__delete__eb829675ff23a685c9c80de66c8ce888";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eSolverPresets] EDK[Fabric_EDK_KL_btSoftBody_eSolverPresets] LIB[btSoftBody::eSolverPresets *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eSolverPresets] EDK[Fabric_EDK_KL_btSoftBody_eSolverPresets] LIB[btSoftBody::eSolverPresets *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eSolverPresets] EDK[Fabric_EDK_KL_btSoftBody_eSolverPresets] LIB[btSoftBody::eSolverPresets *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_eSolverPresets.=(
    btSoftBody_eSolverPresets that
    ) = "Bullet2__btSoftBody_eSolverPresets__MU__simple_ass_op__36fceceeeafe6eef19be68fa96daeb1a";


/// \dfgPresetOmit
/// \internal
btSoftBody_eSolverPresets.appendDesc(io String string) {
  string += "btSoftBody_eSolverPresets:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_eFeature] EDK[Fabric_EDK_KL_btSoftBody_eFeature] LIB[btSoftBody::eFeature *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eFeature] EDK[Fabric_EDK_KL_btSoftBody_eFeature] LIB[btSoftBody::eFeature *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eFeature] EDK[Fabric_EDK_KL_btSoftBody_eFeature] LIB[btSoftBody::eFeature *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_eFeature() = "Bullet2__btSoftBody_eFeature__MU__empty_ctor__b22cddb992995d246fdb33bfac3005fd";

/// \dfgPresetOmit
btSoftBody_eFeature(
    btSoftBody_eFeature that
    ) = "Bullet2__btSoftBody_eFeature__MU__copy_ctor__44f00912c8ff5da0901906195b7fdb48";

btSoftBody_eFeature.cxx_delete() = "Bullet2__btSoftBody_eFeature__MU__delete__7547430ea737ed6fe880d15290984478";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eFeature] EDK[Fabric_EDK_KL_btSoftBody_eFeature] LIB[btSoftBody::eFeature *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eFeature] EDK[Fabric_EDK_KL_btSoftBody_eFeature] LIB[btSoftBody::eFeature *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_eFeature] EDK[Fabric_EDK_KL_btSoftBody_eFeature] LIB[btSoftBody::eFeature *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_eFeature.=(
    btSoftBody_eFeature that
    ) = "Bullet2__btSoftBody_eFeature__MU__simple_ass_op__cc16093070f22c6480d60c93ff8c17c5";


/// \dfgPresetOmit
/// \internal
btSoftBody_eFeature.appendDesc(io String string) {
  string += "btSoftBody_eFeature:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_fCollision] EDK[Fabric_EDK_KL_btSoftBody_fCollision] LIB[btSoftBody::fCollision *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fCollision] EDK[Fabric_EDK_KL_btSoftBody_fCollision] LIB[btSoftBody::fCollision *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fCollision] EDK[Fabric_EDK_KL_btSoftBody_fCollision] LIB[btSoftBody::fCollision *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_fCollision() = "Bullet2__btSoftBody_fCollision__MU__empty_ctor__6e78b555a3fc9517924b3f87dd4ddefa";

/// \dfgPresetOmit
btSoftBody_fCollision(
    btSoftBody_fCollision that
    ) = "Bullet2__btSoftBody_fCollision__MU__copy_ctor__2eb674ed27ef8221e43b413d16c9a191";

btSoftBody_fCollision.cxx_delete() = "Bullet2__btSoftBody_fCollision__MU__delete__f16c0860cfd5c3eb32d9772cccf5416d";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fCollision] EDK[Fabric_EDK_KL_btSoftBody_fCollision] LIB[btSoftBody::fCollision *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fCollision] EDK[Fabric_EDK_KL_btSoftBody_fCollision] LIB[btSoftBody::fCollision *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fCollision] EDK[Fabric_EDK_KL_btSoftBody_fCollision] LIB[btSoftBody::fCollision *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_fCollision.=(
    btSoftBody_fCollision that
    ) = "Bullet2__btSoftBody_fCollision__MU__simple_ass_op__df5298dac308167d0b87b98e3e9fbb34";


/// \dfgPresetOmit
/// \internal
btSoftBody_fCollision.appendDesc(io String string) {
  string += "btSoftBody_fCollision:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_fMaterial] EDK[Fabric_EDK_KL_btSoftBody_fMaterial] LIB[btSoftBody::fMaterial *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fMaterial] EDK[Fabric_EDK_KL_btSoftBody_fMaterial] LIB[btSoftBody::fMaterial *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fMaterial] EDK[Fabric_EDK_KL_btSoftBody_fMaterial] LIB[btSoftBody::fMaterial *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_fMaterial() = "Bullet2__btSoftBody_fMaterial__MU__empty_ctor__65965a05bb28f09be03122eccd2c0847";

/// \dfgPresetOmit
btSoftBody_fMaterial(
    btSoftBody_fMaterial that
    ) = "Bullet2__btSoftBody_fMaterial__MU__copy_ctor__4ebc693dac2f598f344a934afcf8e851";

btSoftBody_fMaterial.cxx_delete() = "Bullet2__btSoftBody_fMaterial__MU__delete__aca3ef6779dc8d755b06efc3bf1e37fa";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fMaterial] EDK[Fabric_EDK_KL_btSoftBody_fMaterial] LIB[btSoftBody::fMaterial *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fMaterial] EDK[Fabric_EDK_KL_btSoftBody_fMaterial] LIB[btSoftBody::fMaterial *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_fMaterial] EDK[Fabric_EDK_KL_btSoftBody_fMaterial] LIB[btSoftBody::fMaterial *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_fMaterial.=(
    btSoftBody_fMaterial that
    ) = "Bullet2__btSoftBody_fMaterial__MU__simple_ass_op__d1f4d7c8b0c8e9d790c9eb4751db9186";


/// \dfgPresetOmit
/// \internal
btSoftBody_fMaterial.appendDesc(io String string) {
  string += "btSoftBody_fMaterial:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sRayCast] EDK[Fabric_EDK_KL_btSoftBody_sRayCast] LIB[btSoftBody::sRayCast *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sRayCast] EDK[Fabric_EDK_KL_btSoftBody_sRayCast] LIB[btSoftBody::sRayCast *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sRayCast] EDK[Fabric_EDK_KL_btSoftBody_sRayCast] LIB[btSoftBody::sRayCast *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_sRayCast() = "Bullet2__btSoftBody_sRayCast__MU__empty_ctor__0ebe2cdf3f62f8cdbfb58a128eb6d86f";

/// \dfgPresetOmit
btSoftBody_sRayCast(
    btSoftBody_sRayCast that
    ) = "Bullet2__btSoftBody_sRayCast__MU__copy_ctor__c1f9a56010fbc0eb4913470c5aca7bf9";

btSoftBody_sRayCast.cxx_delete() = "Bullet2__btSoftBody_sRayCast__MU__delete__b0935a7d81559144973a32159a57f4f1";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sRayCast] EDK[Fabric_EDK_KL_btSoftBody_sRayCast] LIB[btSoftBody::sRayCast *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sRayCast] EDK[Fabric_EDK_KL_btSoftBody_sRayCast] LIB[btSoftBody::sRayCast *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sRayCast] EDK[Fabric_EDK_KL_btSoftBody_sRayCast] LIB[btSoftBody::sRayCast *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_sRayCast.=(
    btSoftBody_sRayCast that
    ) = "Bullet2__btSoftBody_sRayCast__MU__simple_ass_op__3dec095bacf88c1f6a825986f220a421";


/// \dfgPresetOmit
/// \internal
btSoftBody_sRayCast.appendDesc(io String string) {
  string += "btSoftBody_sRayCast:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_ImplicitFn() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btSoftBody_ImplicitFn(
    btSoftBody_ImplicitFn that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btSoftBody_ImplicitFn.cxx_delete() = "Bullet2__btSoftBody_ImplicitFn__MU__delete__18a86e625a2fc16cc94a2a524f2ebe7e";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btSoftBody_ImplicitFn.cxx_Eval!(
    CxxbtVector3ConstRef x
    )
 = "Bullet2__btSoftBody_ImplicitFn__MU__meth_Eval__cb99be641a3c3fcec7c7be46752a079a";

Float32
btSoftBody_ImplicitFn.Eval!(
    in
    btVector3
    x
    
    
    )
{   
    
    CxxbtVector3ConstRef x__cxx = Make_CxxbtVector3ConstRef(x);
    Float32 __res = 
    this.cxx_Eval(
        x__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_ImplicitFn] EDK[Fabric_EDK_KL_btSoftBody_ImplicitFn] LIB[btSoftBody::ImplicitFn *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_ImplicitFn.=(
    btSoftBody_ImplicitFn that
    ) = "Bullet2__btSoftBody_ImplicitFn__MU__simple_ass_op__c3b862d25e5918a5f5ad374aba8a8211";


/// \dfgPresetOmit
/// \internal
btSoftBody_ImplicitFn.appendDesc(io String string) {
  string += "btSoftBody_ImplicitFn:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_Float32] EDK[Fabric_EDK_KL_btAlignedObjectArray_Float32] LIB[btAlignedObjectArray< btScalar >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32ConstPtr] EDK[CxxbtAlignedObjectArray_Float32ConstPtr] LIB[btAlignedObjectArray< btScalar > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32ConstPtr] EDK[CxxbtAlignedObjectArray_Float32ConstPtr] LIB[btAlignedObjectArray< btScalar > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstPtr.cxx_size on null CxxbtAlignedObjectArray_Float32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstPtr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstPtr.cxx_capacity on null CxxbtAlignedObjectArray_Float32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstPtr.cxx_findBinarySearch?(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstPtr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_Float32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstPtr.cxx_findLinearSearch?(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstPtr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_Float32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstPtr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstPtr.findBinarySearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstPtr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstPtr.findLinearSearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32ConstPtr] EDK[CxxbtAlignedObjectArray_Float32ConstPtr] LIB[btAlignedObjectArray< btScalar > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
Float32
CxxbtAlignedObjectArray_Float32ConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstPtr.cxx_getAtIndex on null CxxbtAlignedObjectArray_Float32ConstPtr";
    return this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32Ptr] EDK[CxxbtAlignedObjectArray_Float32MutablePtr] LIB[btAlignedObjectArray< btScalar > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32Ptr] EDK[CxxbtAlignedObjectArray_Float32MutablePtr] LIB[btAlignedObjectArray< btScalar > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ptr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_size on null CxxbtAlignedObjectArray_Float32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_clear on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_pop_back on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_resize on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_push_back!(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_push_back on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ptr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_capacity on null CxxbtAlignedObjectArray_Float32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_reserve on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_swap on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ptr.cxx_findBinarySearch?(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_Float32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ptr.cxx_findLinearSearch?(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_Float32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_removeAtIndex on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_remove!(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_remove on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_Float32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_copyFromArray on null CxxbtAlignedObjectArray_Float32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ptr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ptr.findBinarySearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.copyFromArray!(
    in
    btAlignedObjectArray_Float32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_Float32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_Float32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ptr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.remove!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ptr.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ptr.findLinearSearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32Ptr] EDK[CxxbtAlignedObjectArray_Float32MutablePtr] LIB[btAlignedObjectArray< btScalar > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
Float32
CxxbtAlignedObjectArray_Float32Ptr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_getAtIndex on null CxxbtAlignedObjectArray_Float32Ptr";
    return this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32Ptr] EDK[CxxbtAlignedObjectArray_Float32MutablePtr] LIB[btAlignedObjectArray< btScalar > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_Float32Ptr.cxx_setAtIndex!(
    UInt64 index,
    Float32 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_setAtIndex on null CxxbtAlignedObjectArray_Float32Ptr";
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32ConstRef] EDK[CxxbtAlignedObjectArray_Float32ConstRef] LIB[btAlignedObjectArray< btScalar > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32ConstRef] EDK[CxxbtAlignedObjectArray_Float32ConstRef] LIB[btAlignedObjectArray< btScalar > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32ConstRef] EDK[CxxbtAlignedObjectArray_Float32ConstRef] LIB[btAlignedObjectArray< btScalar > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstRef.cxx_size on null CxxbtAlignedObjectArray_Float32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstRef.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstRef.cxx_capacity on null CxxbtAlignedObjectArray_Float32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstRef.cxx_findBinarySearch?(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstRef.cxx_findBinarySearch on null CxxbtAlignedObjectArray_Float32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstRef.cxx_findLinearSearch?(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstRef.cxx_findLinearSearch on null CxxbtAlignedObjectArray_Float32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstRef.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstRef.findLinearSearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstRef.findBinarySearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32ConstRef.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32ConstRef] EDK[CxxbtAlignedObjectArray_Float32ConstRef] LIB[btAlignedObjectArray< btScalar > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
Float32
CxxbtAlignedObjectArray_Float32ConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32ConstRef.cxx_getAtIndex on null CxxbtAlignedObjectArray_Float32ConstRef";
    return this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32Ref] EDK[CxxbtAlignedObjectArray_Float32MutableRef] LIB[btAlignedObjectArray< btScalar > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32Ref] EDK[CxxbtAlignedObjectArray_Float32MutableRef] LIB[btAlignedObjectArray< btScalar > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ref.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_size on null CxxbtAlignedObjectArray_Float32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_clear on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_pop_back on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_resize on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_push_back!(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_push_back on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ref.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_capacity on null CxxbtAlignedObjectArray_Float32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_reserve on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_swap on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ref.cxx_findBinarySearch?(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_findBinarySearch on null CxxbtAlignedObjectArray_Float32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ref.cxx_findLinearSearch?(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_findLinearSearch on null CxxbtAlignedObjectArray_Float32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_removeAtIndex on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_remove!(
    CxxFloat32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_remove on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_Float32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_copyFromArray on null CxxbtAlignedObjectArray_Float32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ref.findBinarySearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ref.findLinearSearch?(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.remove!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    CxxFloat32ConstRef _arg0__cxx = Make_CxxFloat32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ref.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Float32Ref.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.copyFromArray!(
    in
    btAlignedObjectArray_Float32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_Float32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_Float32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Float32Ref.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32Ref] EDK[CxxbtAlignedObjectArray_Float32MutableRef] LIB[btAlignedObjectArray< btScalar > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
Float32
CxxbtAlignedObjectArray_Float32Ref.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_getAtIndex on null CxxbtAlignedObjectArray_Float32Ref";
    return this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Float32Ref] EDK[CxxbtAlignedObjectArray_Float32MutableRef] LIB[btAlignedObjectArray< btScalar > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_Float32Ref.cxx_setAtIndex!(
    UInt64 index,
    Float32 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_setAtIndex on null CxxbtAlignedObjectArray_Float32Ref";
    this.ptr.data()->{ btAlignedObjectArray_Float32 }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxbtAlignedObjectArray_Float32ConstPtr
// CxxbtAlignedObjectArray_Float32Ptr
// CxxbtAlignedObjectArray_Float32ConstRef
// CxxbtAlignedObjectArray_Float32Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstPtr(btAlignedObjectArray_Float32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstPtr(btAlignedObjectArray_Float32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Float32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstPtr(btAlignedObjectArray_Float32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstPtr Make_CxxbtAlignedObjectArray_Float32ConstPtr(btAlignedObjectArray_Float32 value) {
  return CxxbtAlignedObjectArray_Float32ConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ptr(btAlignedObjectArray_Float32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ptr(btAlignedObjectArray_Float32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Float32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ptr(btAlignedObjectArray_Float32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ptr Make_CxxbtAlignedObjectArray_Float32Ptr(btAlignedObjectArray_Float32 value) {
  return CxxbtAlignedObjectArray_Float32Ptr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef(btAlignedObjectArray_Float32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef(btAlignedObjectArray_Float32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Float32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef(btAlignedObjectArray_Float32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef Make_CxxbtAlignedObjectArray_Float32ConstRef(btAlignedObjectArray_Float32 value) {
  return CxxbtAlignedObjectArray_Float32ConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref(btAlignedObjectArray_Float32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref(btAlignedObjectArray_Float32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Float32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref(btAlignedObjectArray_Float32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref Make_CxxbtAlignedObjectArray_Float32Ref(btAlignedObjectArray_Float32 value) {
  return CxxbtAlignedObjectArray_Float32Ref(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtAlignedObjectArray_Float32ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtAlignedObjectArray_Float32ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtAlignedObjectArray_Float32ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef CxxbtAlignedObjectArray_Float32ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Float32ConstPtr.cxx_getAt on null CxxbtAlignedObjectArray_Float32ConstPtr";
  return CxxbtAlignedObjectArray_Float32ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Float32()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef CxxbtAlignedObjectArray_Float32ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtAlignedObjectArray_Float32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref CxxbtAlignedObjectArray_Float32Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_getAt on null CxxbtAlignedObjectArray_Float32Ptr";
  return CxxbtAlignedObjectArray_Float32Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Float32()));
}

/// Same as for CxxbtAlignedObjectArray_Float32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref CxxbtAlignedObjectArray_Float32Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ptr.cxx_setAt(Index i, btAlignedObjectArray_Float32 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Float32Ptr.cxx_setAt on null CxxbtAlignedObjectArray_Float32Ptr";
  this.ptr.offset(i)->{ btAlignedObjectArray_Float32 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef(CxxbtAlignedObjectArray_Float32ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef.=(CxxbtAlignedObjectArray_Float32ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btAlignedObjectArray_Float32 value
/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Float32 CxxbtAlignedObjectArray_Float32ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Float32ConstRef.cxx_get on null CxxbtAlignedObjectArray_Float32ConstRef";
  return this.ptr.data()->{ btAlignedObjectArray_Float32 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref.cxx_set(btAlignedObjectArray_Float32 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Float32Ref.cxx_set on null CxxbtAlignedObjectArray_Float32Ref";
  this.ptr.data()->{ btAlignedObjectArray_Float32 } = value;
}

/// Assignment of btAlignedObjectArray_Float32
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref.=(btAlignedObjectArray_Float32 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Float32Ref.appendDesc(io String s) {
  s += this.cxx_get();
}







//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_Vec3] EDK[Fabric_EDK_KL_btAlignedObjectArray_Vec3] LIB[btAlignedObjectArray< btVector3 >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3ConstPtr] EDK[CxxbtAlignedObjectArray_Vec3ConstPtr] LIB[btAlignedObjectArray< btVector3 > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3ConstPtr] EDK[CxxbtAlignedObjectArray_Vec3ConstPtr] LIB[btAlignedObjectArray< btVector3 > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_size on null CxxbtAlignedObjectArray_Vec3ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_capacity on null CxxbtAlignedObjectArray_Vec3ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_findBinarySearch?(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_Vec3ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_findLinearSearch?(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_Vec3ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstPtr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstPtr.findLinearSearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstPtr.findBinarySearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstPtr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3ConstPtr] EDK[CxxbtAlignedObjectArray_Vec3ConstPtr] LIB[btAlignedObjectArray< btVector3 > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVector3
CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_getAtIndex on null CxxbtAlignedObjectArray_Vec3ConstPtr";
    return this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3Ptr] EDK[CxxbtAlignedObjectArray_Vec3MutablePtr] LIB[btAlignedObjectArray< btVector3 > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3Ptr] EDK[CxxbtAlignedObjectArray_Vec3MutablePtr] LIB[btAlignedObjectArray< btVector3 > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ptr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_size on null CxxbtAlignedObjectArray_Vec3Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_clear on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_pop_back on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_resize on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_push_back!(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_push_back on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ptr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_capacity on null CxxbtAlignedObjectArray_Vec3Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_reserve on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_swap on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ptr.cxx_findBinarySearch?(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_Vec3Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ptr.cxx_findLinearSearch?(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_Vec3Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_removeAtIndex on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_remove!(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_remove on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_Vec3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_copyFromArray on null CxxbtAlignedObjectArray_Vec3Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.remove!(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ptr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.push_back!(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.copyFromArray!(
    in
    btAlignedObjectArray_Vec3
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_Vec3ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_Vec3ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ptr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ptr.findBinarySearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ptr.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ptr.findLinearSearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3Ptr] EDK[CxxbtAlignedObjectArray_Vec3MutablePtr] LIB[btAlignedObjectArray< btVector3 > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVector3
CxxbtAlignedObjectArray_Vec3Ptr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_getAtIndex on null CxxbtAlignedObjectArray_Vec3Ptr";
    return this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3Ptr] EDK[CxxbtAlignedObjectArray_Vec3MutablePtr] LIB[btAlignedObjectArray< btVector3 > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_Vec3Ptr.cxx_setAtIndex!(
    UInt64 index,
    btVector3 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_setAtIndex on null CxxbtAlignedObjectArray_Vec3Ptr";
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3ConstRef] EDK[CxxbtAlignedObjectArray_Vec3ConstRef] LIB[btAlignedObjectArray< btVector3 > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3ConstRef] EDK[CxxbtAlignedObjectArray_Vec3ConstRef] LIB[btAlignedObjectArray< btVector3 > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3ConstRef] EDK[CxxbtAlignedObjectArray_Vec3ConstRef] LIB[btAlignedObjectArray< btVector3 > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstRef.cxx_size on null CxxbtAlignedObjectArray_Vec3ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstRef.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstRef.cxx_capacity on null CxxbtAlignedObjectArray_Vec3ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstRef.cxx_findBinarySearch?(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstRef.cxx_findBinarySearch on null CxxbtAlignedObjectArray_Vec3ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstRef.cxx_findLinearSearch?(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstRef.cxx_findLinearSearch on null CxxbtAlignedObjectArray_Vec3ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstRef.findLinearSearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstRef.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstRef.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3ConstRef.findBinarySearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3ConstRef] EDK[CxxbtAlignedObjectArray_Vec3ConstRef] LIB[btAlignedObjectArray< btVector3 > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVector3
CxxbtAlignedObjectArray_Vec3ConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3ConstRef.cxx_getAtIndex on null CxxbtAlignedObjectArray_Vec3ConstRef";
    return this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3Ref] EDK[CxxbtAlignedObjectArray_Vec3MutableRef] LIB[btAlignedObjectArray< btVector3 > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3Ref] EDK[CxxbtAlignedObjectArray_Vec3MutableRef] LIB[btAlignedObjectArray< btVector3 > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ref.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_size on null CxxbtAlignedObjectArray_Vec3Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_clear on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_pop_back on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_resize on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_push_back!(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_push_back on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ref.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_capacity on null CxxbtAlignedObjectArray_Vec3Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_reserve on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_swap on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ref.cxx_findBinarySearch?(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_findBinarySearch on null CxxbtAlignedObjectArray_Vec3Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ref.cxx_findLinearSearch?(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_findLinearSearch on null CxxbtAlignedObjectArray_Vec3Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_removeAtIndex on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_remove!(
    CxxbtVector3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_remove on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_Vec3ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_copyFromArray on null CxxbtAlignedObjectArray_Vec3Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ref.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.push_back!(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ref.findBinarySearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ref.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.remove!(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.copyFromArray!(
    in
    btAlignedObjectArray_Vec3
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_Vec3ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_Vec3ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_Vec3Ref.findLinearSearch?(
    in
    btVector3
    _arg0
    
    
    )
{   
    
    CxxbtVector3ConstRef _arg0__cxx = Make_CxxbtVector3ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_Vec3Ref.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3Ref] EDK[CxxbtAlignedObjectArray_Vec3MutableRef] LIB[btAlignedObjectArray< btVector3 > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btVector3
CxxbtAlignedObjectArray_Vec3Ref.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_getAtIndex on null CxxbtAlignedObjectArray_Vec3Ref";
    return this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_Vec3Ref] EDK[CxxbtAlignedObjectArray_Vec3MutableRef] LIB[btAlignedObjectArray< btVector3 > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_Vec3Ref.cxx_setAtIndex!(
    UInt64 index,
    btVector3 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_setAtIndex on null CxxbtAlignedObjectArray_Vec3Ref";
    this.ptr.data()->{ btAlignedObjectArray_Vec3 }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxbtAlignedObjectArray_Vec3ConstPtr
// CxxbtAlignedObjectArray_Vec3Ptr
// CxxbtAlignedObjectArray_Vec3ConstRef
// CxxbtAlignedObjectArray_Vec3Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstPtr(btAlignedObjectArray_Vec3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstPtr(btAlignedObjectArray_Vec3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Vec3());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstPtr(btAlignedObjectArray_Vec3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstPtr Make_CxxbtAlignedObjectArray_Vec3ConstPtr(btAlignedObjectArray_Vec3 value) {
  return CxxbtAlignedObjectArray_Vec3ConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ptr(btAlignedObjectArray_Vec3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ptr(btAlignedObjectArray_Vec3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Vec3());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ptr(btAlignedObjectArray_Vec3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ptr Make_CxxbtAlignedObjectArray_Vec3Ptr(btAlignedObjectArray_Vec3 value) {
  return CxxbtAlignedObjectArray_Vec3Ptr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef(btAlignedObjectArray_Vec3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef(btAlignedObjectArray_Vec3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Vec3());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef(btAlignedObjectArray_Vec3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef Make_CxxbtAlignedObjectArray_Vec3ConstRef(btAlignedObjectArray_Vec3 value) {
  return CxxbtAlignedObjectArray_Vec3ConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref(btAlignedObjectArray_Vec3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref(btAlignedObjectArray_Vec3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Vec3());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref(btAlignedObjectArray_Vec3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref Make_CxxbtAlignedObjectArray_Vec3Ref(btAlignedObjectArray_Vec3 value) {
  return CxxbtAlignedObjectArray_Vec3Ref(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtAlignedObjectArray_Vec3ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtAlignedObjectArray_Vec3ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_getAt on null CxxbtAlignedObjectArray_Vec3ConstPtr";
  return CxxbtAlignedObjectArray_Vec3ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Vec3()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef CxxbtAlignedObjectArray_Vec3ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtAlignedObjectArray_Vec3ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref CxxbtAlignedObjectArray_Vec3Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_getAt on null CxxbtAlignedObjectArray_Vec3Ptr";
  return CxxbtAlignedObjectArray_Vec3Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_Vec3()));
}

/// Same as for CxxbtAlignedObjectArray_Vec3ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref CxxbtAlignedObjectArray_Vec3Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ptr.cxx_setAt(Index i, btAlignedObjectArray_Vec3 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Vec3Ptr.cxx_setAt on null CxxbtAlignedObjectArray_Vec3Ptr";
  this.ptr.offset(i)->{ btAlignedObjectArray_Vec3 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef(CxxbtAlignedObjectArray_Vec3ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef.=(CxxbtAlignedObjectArray_Vec3ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btAlignedObjectArray_Vec3 value
/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3 CxxbtAlignedObjectArray_Vec3ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Vec3ConstRef.cxx_get on null CxxbtAlignedObjectArray_Vec3ConstRef";
  return this.ptr.data()->{ btAlignedObjectArray_Vec3 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref.cxx_set(btAlignedObjectArray_Vec3 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_Vec3Ref.cxx_set on null CxxbtAlignedObjectArray_Vec3Ref";
  this.ptr.data()->{ btAlignedObjectArray_Vec3 } = value;
}

/// Assignment of btAlignedObjectArray_Vec3
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref.=(btAlignedObjectArray_Vec3 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_Vec3Ref.appendDesc(io String s) {
  s += this.cxx_get();
}






//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sCti] EDK[Fabric_EDK_KL_btSoftBody_sCti] LIB[btSoftBody::sCti *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sCti] EDK[Fabric_EDK_KL_btSoftBody_sCti] LIB[btSoftBody::sCti *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sCti] EDK[Fabric_EDK_KL_btSoftBody_sCti] LIB[btSoftBody::sCti *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_sCti() = "Bullet2__btSoftBody_sCti__MU__empty_ctor__1d6c2af957b2e8fabe6c10fdc493090e";

/// \dfgPresetOmit
btSoftBody_sCti(
    btSoftBody_sCti that
    ) = "Bullet2__btSoftBody_sCti__MU__copy_ctor__74841dbc8a77f165785b64f9f8852b2c";

btSoftBody_sCti.cxx_delete() = "Bullet2__btSoftBody_sCti__MU__delete__4fbd144944ad8d3a0b7202abb58b809b";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sCti] EDK[Fabric_EDK_KL_btSoftBody_sCti] LIB[btSoftBody::sCti *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sCti] EDK[Fabric_EDK_KL_btSoftBody_sCti] LIB[btSoftBody::sCti *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sCti] EDK[Fabric_EDK_KL_btSoftBody_sCti] LIB[btSoftBody::sCti *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_sCti.=(
    btSoftBody_sCti that
    ) = "Bullet2__btSoftBody_sCti__MU__simple_ass_op__66c94be8f0730c203efc044a38f7b142";


/// \dfgPresetOmit
/// \internal
btSoftBody_sCti.appendDesc(io String string) {
  string += "btSoftBody_sCti:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_sMedium] EDK[Fabric_EDK_KL_btSoftBody_sMedium] LIB[btSoftBody::sMedium *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sMedium] EDK[Fabric_EDK_KL_btSoftBody_sMedium] LIB[btSoftBody::sMedium *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sMedium] EDK[Fabric_EDK_KL_btSoftBody_sMedium] LIB[btSoftBody::sMedium *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_sMedium() = "Bullet2__btSoftBody_sMedium__MU__empty_ctor__cceaa4587dce39aee9e89633244dcae3";

/// \dfgPresetOmit
btSoftBody_sMedium(
    btSoftBody_sMedium that
    ) = "Bullet2__btSoftBody_sMedium__MU__copy_ctor__8d153a57a7befca3b7bd2ff8c2f20663";

btSoftBody_sMedium.cxx_delete() = "Bullet2__btSoftBody_sMedium__MU__delete__622159d5618fad93a22f722ce491b35a";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sMedium] EDK[Fabric_EDK_KL_btSoftBody_sMedium] LIB[btSoftBody::sMedium *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sMedium] EDK[Fabric_EDK_KL_btSoftBody_sMedium] LIB[btSoftBody::sMedium *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_sMedium] EDK[Fabric_EDK_KL_btSoftBody_sMedium] LIB[btSoftBody::sMedium *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_sMedium.=(
    btSoftBody_sMedium that
    ) = "Bullet2__btSoftBody_sMedium__MU__simple_ass_op__1b735318c439a53ff70c426a0505a9d5";


/// \dfgPresetOmit
/// \internal
btSoftBody_sMedium.appendDesc(io String string) {
  string += "btSoftBody_sMedium:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Element] EDK[Fabric_EDK_KL_btSoftBody_Element] LIB[btSoftBody::Element *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Element] EDK[Fabric_EDK_KL_btSoftBody_Element] LIB[btSoftBody::Element *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Element] EDK[Fabric_EDK_KL_btSoftBody_Element] LIB[btSoftBody::Element *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBody_Element(
    btSoftBody_Element that
    ) = "Bullet2__btSoftBody_Element__MU__copy_ctor__de78b37193592bfbb3ab9be687be950f";

/// \dfgPresetOmit
/// \internal
btSoftBody_Element.__ctor(
    ) = "Bullet2__btSoftBody_Element__MU__ctor__93042a6f6410156a7d011e997745e8c9";

/// \dfgPresetOmit
btSoftBody_Element(
    ) {
    this.__ctor(
        );
}

btSoftBody_Element.cxx_delete() = "Bullet2__btSoftBody_Element__MU__delete__3b852a488829697ac0be861732d2d71f";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Element] EDK[Fabric_EDK_KL_btSoftBody_Element] LIB[btSoftBody::Element *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Element] EDK[Fabric_EDK_KL_btSoftBody_Element] LIB[btSoftBody::Element *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Element] EDK[Fabric_EDK_KL_btSoftBody_Element] LIB[btSoftBody::Element *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Element.=(
    btSoftBody_Element that
    ) = "Bullet2__btSoftBody_Element__MU__simple_ass_op__26dfa976a505ddd730de6a1d56339252";


/// \dfgPresetOmit
/// \internal
btSoftBody_Element.appendDesc(io String string) {
  string += "btSoftBody_Element:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Material] EDK[Fabric_EDK_KL_btSoftBody_Material] LIB[btSoftBody::Material *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Material] EDK[Fabric_EDK_KL_btSoftBody_Material] LIB[btSoftBody::Material *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Material.cxx_get_m_kLST()
  = "Bullet2__btSoftBody_Material__CO__getter_m_kLST__03f0b62d2594449d5ac4f918d75e56e4";

Float32
btSoftBody_Material.get_m_kLST()
{
    Float32 __res = 
    this.cxx_get_m_kLST();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Material.cxx_set_m_kLST!(Float32 value)
  = "Bullet2__btSoftBody_Material__MU__setter_m_kLST__a348fa43cb250c616ab25d063eb00985";

btSoftBody_Material.set_m_kLST!(
    Float32 value
   )
{
    
    this.cxx_set_m_kLST(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Material.cxx_get_m_kAST()
  = "Bullet2__btSoftBody_Material__CO__getter_m_kAST__dcc93f670742c78d70acce3c66771ddb";

Float32
btSoftBody_Material.get_m_kAST()
{
    Float32 __res = 
    this.cxx_get_m_kAST();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Material.cxx_set_m_kAST!(Float32 value)
  = "Bullet2__btSoftBody_Material__MU__setter_m_kAST__518f84010f12f701fee64d35bf3e2444";

btSoftBody_Material.set_m_kAST!(
    Float32 value
   )
{
    
    this.cxx_set_m_kAST(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Material.cxx_get_m_kVST()
  = "Bullet2__btSoftBody_Material__CO__getter_m_kVST__313dbbf77e66ae08cbccad6494ae2842";

Float32
btSoftBody_Material.get_m_kVST()
{
    Float32 __res = 
    this.cxx_get_m_kVST();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Material.cxx_set_m_kVST!(Float32 value)
  = "Bullet2__btSoftBody_Material__MU__setter_m_kVST__fe46023dbdc41c11412338f5cb786b91";

btSoftBody_Material.set_m_kVST!(
    Float32 value
   )
{
    
    this.cxx_set_m_kVST(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btSoftBody_Material.cxx_get_m_flags()
  = "Bullet2__btSoftBody_Material__CO__getter_m_flags__560b74ca217a5cae8b7778fd0c471f8e";

SInt32
btSoftBody_Material.get_m_flags()
{
    SInt32 __res = 
    this.cxx_get_m_flags();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Material.cxx_set_m_flags!(SInt32 value)
  = "Bullet2__btSoftBody_Material__MU__setter_m_flags__02288499d4f363b79a7df33ac28313e8";

btSoftBody_Material.set_m_flags!(
    SInt32 value
   )
{
    
    this.cxx_set_m_flags(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Material] EDK[Fabric_EDK_KL_btSoftBody_Material] LIB[btSoftBody::Material *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Material() = "Bullet2__btSoftBody_Material__MU__empty_ctor__8554245e862be49b155a48b417e10a62";

/// \dfgPresetOmit
btSoftBody_Material(
    btSoftBody_Material that
    ) = "Bullet2__btSoftBody_Material__MU__copy_ctor__90bef0b926ecfb1729bbe2b8a934d99d";

btSoftBody_Material.cxx_delete() = "Bullet2__btSoftBody_Material__MU__delete__64417b8b1cdad589cf7547dfb268267e";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Material] EDK[Fabric_EDK_KL_btSoftBody_Material] LIB[btSoftBody::Material *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Material] EDK[Fabric_EDK_KL_btSoftBody_Material] LIB[btSoftBody::Material *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Material] EDK[Fabric_EDK_KL_btSoftBody_Material] LIB[btSoftBody::Material *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Material.=(
    btSoftBody_Material that
    ) = "Bullet2__btSoftBody_Material__MU__simple_ass_op__93dff6b58b6292f3a8b6d0a3f5373d81";


/// \dfgPresetOmit
/// \internal
btSoftBody_Material.appendDesc(io String string) {
  string += "btSoftBody_Material:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Feature] EDK[Fabric_EDK_KL_btSoftBody_Feature] LIB[btSoftBody::Feature *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Feature] EDK[Fabric_EDK_KL_btSoftBody_Feature] LIB[btSoftBody::Feature *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Feature] EDK[Fabric_EDK_KL_btSoftBody_Feature] LIB[btSoftBody::Feature *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Feature() = "Bullet2__btSoftBody_Feature__MU__empty_ctor__6fe66a6fc9f6966d8cc7eb843ac5832c";

/// \dfgPresetOmit
btSoftBody_Feature(
    btSoftBody_Feature that
    ) = "Bullet2__btSoftBody_Feature__MU__copy_ctor__59189d3a6df2604305e1fe87fa10de61";

btSoftBody_Feature.cxx_delete() = "Bullet2__btSoftBody_Feature__MU__delete__bf4532b1d01ac0cb14c90314897dc739";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Feature] EDK[Fabric_EDK_KL_btSoftBody_Feature] LIB[btSoftBody::Feature *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Feature] EDK[Fabric_EDK_KL_btSoftBody_Feature] LIB[btSoftBody::Feature *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Feature] EDK[Fabric_EDK_KL_btSoftBody_Feature] LIB[btSoftBody::Feature *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Feature.=(
    btSoftBody_Feature that
    ) = "Bullet2__btSoftBody_Feature__MU__simple_ass_op__68e2703f06e3aac0f3cad75abcb00921";


/// \dfgPresetOmit
/// \internal
btSoftBody_Feature.appendDesc(io String string) {
  string += "btSoftBody_Feature:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Node] EDK[Fabric_EDK_KL_btSoftBody_Node] LIB[btSoftBody::Node *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Node] EDK[Fabric_EDK_KL_btSoftBody_Node] LIB[btSoftBody::Node *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Node] EDK[Fabric_EDK_KL_btSoftBody_Node] LIB[btSoftBody::Node *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Node() = "Bullet2__btSoftBody_Node__MU__empty_ctor__426fadb2a3d0723d9575b1c0bfba2700";

/// \dfgPresetOmit
btSoftBody_Node(
    btSoftBody_Node that
    ) = "Bullet2__btSoftBody_Node__MU__copy_ctor__4575e101ceeb904d25ed9e46cd6ac4ad";

btSoftBody_Node.cxx_delete() = "Bullet2__btSoftBody_Node__MU__delete__e43a288a415a23d48e20e7573fad42b8";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Node] EDK[Fabric_EDK_KL_btSoftBody_Node] LIB[btSoftBody::Node *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Node] EDK[Fabric_EDK_KL_btSoftBody_Node] LIB[btSoftBody::Node *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Node] EDK[Fabric_EDK_KL_btSoftBody_Node] LIB[btSoftBody::Node *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Node.=(
    btSoftBody_Node that
    ) = "Bullet2__btSoftBody_Node__MU__simple_ass_op__867134449d1076c5e866ae983dfe7705";


/// \dfgPresetOmit
/// \internal
btSoftBody_Node.appendDesc(io String string) {
  string += "btSoftBody_Node:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Link] EDK[Fabric_EDK_KL_btSoftBody_Link] LIB[btSoftBody::Link *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Link] EDK[Fabric_EDK_KL_btSoftBody_Link] LIB[btSoftBody::Link *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Link] EDK[Fabric_EDK_KL_btSoftBody_Link] LIB[btSoftBody::Link *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Link() = "Bullet2__btSoftBody_Link__MU__empty_ctor__c0de5890a60a2b42d44735d0a13ebd1c";

/// \dfgPresetOmit
btSoftBody_Link(
    btSoftBody_Link that
    ) = "Bullet2__btSoftBody_Link__MU__copy_ctor__e57a643ed1674b011bdd283b3a3f331e";

btSoftBody_Link.cxx_delete() = "Bullet2__btSoftBody_Link__MU__delete__d9ffdb49f91aaf4588961433070d7c31";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Link] EDK[Fabric_EDK_KL_btSoftBody_Link] LIB[btSoftBody::Link *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Link] EDK[Fabric_EDK_KL_btSoftBody_Link] LIB[btSoftBody::Link *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Link] EDK[Fabric_EDK_KL_btSoftBody_Link] LIB[btSoftBody::Link *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Link.=(
    btSoftBody_Link that
    ) = "Bullet2__btSoftBody_Link__MU__simple_ass_op__612f9204febb99e049f2b5460d61d357";


/// \dfgPresetOmit
/// \internal
btSoftBody_Link.appendDesc(io String string) {
  string += "btSoftBody_Link:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Face] EDK[Fabric_EDK_KL_btSoftBody_Face] LIB[btSoftBody::Face *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Face] EDK[Fabric_EDK_KL_btSoftBody_Face] LIB[btSoftBody::Face *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Face] EDK[Fabric_EDK_KL_btSoftBody_Face] LIB[btSoftBody::Face *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Face() = "Bullet2__btSoftBody_Face__MU__empty_ctor__070c4f7cb4407bc2ce9329ce9f4f518e";

/// \dfgPresetOmit
btSoftBody_Face(
    btSoftBody_Face that
    ) = "Bullet2__btSoftBody_Face__MU__copy_ctor__26b392f6daf7f55eccc736abf30b6880";

btSoftBody_Face.cxx_delete() = "Bullet2__btSoftBody_Face__MU__delete__5c18befaf12348d4e85ffca1fee4bca8";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Face] EDK[Fabric_EDK_KL_btSoftBody_Face] LIB[btSoftBody::Face *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Face] EDK[Fabric_EDK_KL_btSoftBody_Face] LIB[btSoftBody::Face *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Face] EDK[Fabric_EDK_KL_btSoftBody_Face] LIB[btSoftBody::Face *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Face.=(
    btSoftBody_Face that
    ) = "Bullet2__btSoftBody_Face__MU__simple_ass_op__26d083125c7ac0346e3148bb5fc5a1e2";


/// \dfgPresetOmit
/// \internal
btSoftBody_Face.appendDesc(io String string) {
  string += "btSoftBody_Face:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Tetra] EDK[Fabric_EDK_KL_btSoftBody_Tetra] LIB[btSoftBody::Tetra *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Tetra] EDK[Fabric_EDK_KL_btSoftBody_Tetra] LIB[btSoftBody::Tetra *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Tetra] EDK[Fabric_EDK_KL_btSoftBody_Tetra] LIB[btSoftBody::Tetra *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Tetra() = "Bullet2__btSoftBody_Tetra__MU__empty_ctor__f53a8d4e0965d61d850dc1438c9ae109";

/// \dfgPresetOmit
btSoftBody_Tetra(
    btSoftBody_Tetra that
    ) = "Bullet2__btSoftBody_Tetra__MU__copy_ctor__982082eaf6759e7274127e0dc554768d";

btSoftBody_Tetra.cxx_delete() = "Bullet2__btSoftBody_Tetra__MU__delete__dbc4c855854138c34eb49abe3ee20e00";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Tetra] EDK[Fabric_EDK_KL_btSoftBody_Tetra] LIB[btSoftBody::Tetra *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Tetra] EDK[Fabric_EDK_KL_btSoftBody_Tetra] LIB[btSoftBody::Tetra *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Tetra] EDK[Fabric_EDK_KL_btSoftBody_Tetra] LIB[btSoftBody::Tetra *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Tetra.=(
    btSoftBody_Tetra that
    ) = "Bullet2__btSoftBody_Tetra__MU__simple_ass_op__d2183472415210578b4da5261085a3bc";


/// \dfgPresetOmit
/// \internal
btSoftBody_Tetra.appendDesc(io String string) {
  string += "btSoftBody_Tetra:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_RContact] EDK[Fabric_EDK_KL_btSoftBody_RContact] LIB[btSoftBody::RContact *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RContact] EDK[Fabric_EDK_KL_btSoftBody_RContact] LIB[btSoftBody::RContact *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RContact] EDK[Fabric_EDK_KL_btSoftBody_RContact] LIB[btSoftBody::RContact *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_RContact() = "Bullet2__btSoftBody_RContact__MU__empty_ctor__4cf2d5b7598e882d3c28c320df431614";

/// \dfgPresetOmit
btSoftBody_RContact(
    btSoftBody_RContact that
    ) = "Bullet2__btSoftBody_RContact__MU__copy_ctor__2c8333322c67239bba75327b4ff889be";

btSoftBody_RContact.cxx_delete() = "Bullet2__btSoftBody_RContact__MU__delete__59672a29c392cb1265803cbc67573303";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RContact] EDK[Fabric_EDK_KL_btSoftBody_RContact] LIB[btSoftBody::RContact *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RContact] EDK[Fabric_EDK_KL_btSoftBody_RContact] LIB[btSoftBody::RContact *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RContact] EDK[Fabric_EDK_KL_btSoftBody_RContact] LIB[btSoftBody::RContact *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_RContact.=(
    btSoftBody_RContact that
    ) = "Bullet2__btSoftBody_RContact__MU__simple_ass_op__05ee709a31beba3012eb2f39d9ac14d2";


/// \dfgPresetOmit
/// \internal
btSoftBody_RContact.appendDesc(io String string) {
  string += "btSoftBody_RContact:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_SContact] EDK[Fabric_EDK_KL_btSoftBody_SContact] LIB[btSoftBody::SContact *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SContact] EDK[Fabric_EDK_KL_btSoftBody_SContact] LIB[btSoftBody::SContact *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SContact] EDK[Fabric_EDK_KL_btSoftBody_SContact] LIB[btSoftBody::SContact *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_SContact() = "Bullet2__btSoftBody_SContact__MU__empty_ctor__9eda5904e8861851a0d8448967a702c1";

/// \dfgPresetOmit
btSoftBody_SContact(
    btSoftBody_SContact that
    ) = "Bullet2__btSoftBody_SContact__MU__copy_ctor__40fa4658a51b70e70923c32378676523";

btSoftBody_SContact.cxx_delete() = "Bullet2__btSoftBody_SContact__MU__delete__603cc2d49755dde0ceb1458d6c50ff04";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SContact] EDK[Fabric_EDK_KL_btSoftBody_SContact] LIB[btSoftBody::SContact *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SContact] EDK[Fabric_EDK_KL_btSoftBody_SContact] LIB[btSoftBody::SContact *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SContact] EDK[Fabric_EDK_KL_btSoftBody_SContact] LIB[btSoftBody::SContact *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_SContact.=(
    btSoftBody_SContact that
    ) = "Bullet2__btSoftBody_SContact__MU__simple_ass_op__a5caeb09ad4c4a623e3533f8e73327f3";


/// \dfgPresetOmit
/// \internal
btSoftBody_SContact.appendDesc(io String string) {
  string += "btSoftBody_SContact:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Anchor] EDK[Fabric_EDK_KL_btSoftBody_Anchor] LIB[btSoftBody::Anchor *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Anchor] EDK[Fabric_EDK_KL_btSoftBody_Anchor] LIB[btSoftBody::Anchor *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Anchor] EDK[Fabric_EDK_KL_btSoftBody_Anchor] LIB[btSoftBody::Anchor *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Anchor() = "Bullet2__btSoftBody_Anchor__MU__empty_ctor__44284a05fb2391c446b24df860a7abda";

/// \dfgPresetOmit
btSoftBody_Anchor(
    btSoftBody_Anchor that
    ) = "Bullet2__btSoftBody_Anchor__MU__copy_ctor__7c099759ded59ff1299edeb5e984497d";

btSoftBody_Anchor.cxx_delete() = "Bullet2__btSoftBody_Anchor__MU__delete__df1f2f94f1f79e61c7fd5b51fb092650";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Anchor] EDK[Fabric_EDK_KL_btSoftBody_Anchor] LIB[btSoftBody::Anchor *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Anchor] EDK[Fabric_EDK_KL_btSoftBody_Anchor] LIB[btSoftBody::Anchor *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Anchor] EDK[Fabric_EDK_KL_btSoftBody_Anchor] LIB[btSoftBody::Anchor *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Anchor.=(
    btSoftBody_Anchor that
    ) = "Bullet2__btSoftBody_Anchor__MU__simple_ass_op__feae3c5a010e772f2edfa1a8e99ee438";


/// \dfgPresetOmit
/// \internal
btSoftBody_Anchor.appendDesc(io String string) {
  string += "btSoftBody_Anchor:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Note] EDK[Fabric_EDK_KL_btSoftBody_Note] LIB[btSoftBody::Note *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Note] EDK[Fabric_EDK_KL_btSoftBody_Note] LIB[btSoftBody::Note *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Note] EDK[Fabric_EDK_KL_btSoftBody_Note] LIB[btSoftBody::Note *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Note() = "Bullet2__btSoftBody_Note__MU__empty_ctor__3ac19da617df0ecb0b0cb819fc9919e4";

/// \dfgPresetOmit
btSoftBody_Note(
    btSoftBody_Note that
    ) = "Bullet2__btSoftBody_Note__MU__copy_ctor__01effa2b665c74c5e69884694cee6d57";

btSoftBody_Note.cxx_delete() = "Bullet2__btSoftBody_Note__MU__delete__a83138fea45cab0319d1f10e9bb5163c";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Note] EDK[Fabric_EDK_KL_btSoftBody_Note] LIB[btSoftBody::Note *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Note] EDK[Fabric_EDK_KL_btSoftBody_Note] LIB[btSoftBody::Note *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Note] EDK[Fabric_EDK_KL_btSoftBody_Note] LIB[btSoftBody::Note *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Note.=(
    btSoftBody_Note that
    ) = "Bullet2__btSoftBody_Note__MU__simple_ass_op__882ec1b3108e3f86d81cc1cb52538d37";


/// \dfgPresetOmit
/// \internal
btSoftBody_Note.appendDesc(io String string) {
  string += "btSoftBody_Note:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Pose] EDK[Fabric_EDK_KL_btSoftBody_Pose] LIB[btSoftBody::Pose *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Pose] EDK[Fabric_EDK_KL_btSoftBody_Pose] LIB[btSoftBody::Pose *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Pose] EDK[Fabric_EDK_KL_btSoftBody_Pose] LIB[btSoftBody::Pose *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Pose() = "Bullet2__btSoftBody_Pose__MU__empty_ctor__f83e66fd3db105dd5405d1d37104a06f";

/// \dfgPresetOmit
btSoftBody_Pose(
    btSoftBody_Pose that
    ) = "Bullet2__btSoftBody_Pose__MU__copy_ctor__9cdbaf979f50af71d82b3edd835a0159";

btSoftBody_Pose.cxx_delete() = "Bullet2__btSoftBody_Pose__MU__delete__4e69c173ab0c38e68aaca81f1aa2b440";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Pose] EDK[Fabric_EDK_KL_btSoftBody_Pose] LIB[btSoftBody::Pose *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Pose] EDK[Fabric_EDK_KL_btSoftBody_Pose] LIB[btSoftBody::Pose *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Pose] EDK[Fabric_EDK_KL_btSoftBody_Pose] LIB[btSoftBody::Pose *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Pose.=(
    btSoftBody_Pose that
    ) = "Bullet2__btSoftBody_Pose__MU__simple_ass_op__2e468e04164ee457821e9f849f0bad6f";


/// \dfgPresetOmit
/// \internal
btSoftBody_Pose.appendDesc(io String string) {
  string += "btSoftBody_Pose:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Cluster] EDK[Fabric_EDK_KL_btSoftBody_Cluster] LIB[btSoftBody::Cluster *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Cluster] EDK[Fabric_EDK_KL_btSoftBody_Cluster] LIB[btSoftBody::Cluster *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Cluster] EDK[Fabric_EDK_KL_btSoftBody_Cluster] LIB[btSoftBody::Cluster *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBody_Cluster(
    btSoftBody_Cluster that
    ) = "Bullet2__btSoftBody_Cluster__MU__copy_ctor__1c5cc167f3193f44ba222190538133a1";

/// \dfgPresetOmit
/// \internal
btSoftBody_Cluster.__ctor(
    ) = "Bullet2__btSoftBody_Cluster__MU__ctor__19685f50fa12f06ac121614813cce4d6";

/// \dfgPresetOmit
btSoftBody_Cluster(
    ) {
    this.__ctor(
        );
}

btSoftBody_Cluster.cxx_delete() = "Bullet2__btSoftBody_Cluster__MU__delete__2571edb2a63b443e9e9697fd3522c86f";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Cluster] EDK[Fabric_EDK_KL_btSoftBody_Cluster] LIB[btSoftBody::Cluster *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Cluster] EDK[Fabric_EDK_KL_btSoftBody_Cluster] LIB[btSoftBody::Cluster *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Cluster] EDK[Fabric_EDK_KL_btSoftBody_Cluster] LIB[btSoftBody::Cluster *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Cluster.=(
    btSoftBody_Cluster that
    ) = "Bullet2__btSoftBody_Cluster__MU__simple_ass_op__e464b148c9cde0c1daa589ad65a4e5c8";


/// \dfgPresetOmit
/// \internal
btSoftBody_Cluster.appendDesc(io String string) {
  string += "btSoftBody_Cluster:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Impulse] EDK[Fabric_EDK_KL_btSoftBody_Impulse] LIB[btSoftBody::Impulse *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Impulse] EDK[Fabric_EDK_KL_btSoftBody_Impulse] LIB[btSoftBody::Impulse *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Impulse] EDK[Fabric_EDK_KL_btSoftBody_Impulse] LIB[btSoftBody::Impulse *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBody_Impulse(
    btSoftBody_Impulse that
    ) = "Bullet2__btSoftBody_Impulse__MU__copy_ctor__ad08f1b5247c6d6442cfa9f52f97b2e6";

/// \dfgPresetOmit
/// \internal
btSoftBody_Impulse.__ctor(
    ) = "Bullet2__btSoftBody_Impulse__MU__ctor__b796aa81fd8db90d692dcc1e581cb589";

/// \dfgPresetOmit
btSoftBody_Impulse(
    ) {
    this.__ctor(
        );
}

btSoftBody_Impulse.cxx_delete() = "Bullet2__btSoftBody_Impulse__MU__delete__793d8a4762a770629c950c98f667e962";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Impulse] EDK[Fabric_EDK_KL_btSoftBody_Impulse] LIB[btSoftBody::Impulse *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Impulse] EDK[Fabric_EDK_KL_btSoftBody_Impulse] LIB[btSoftBody::Impulse *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Impulse] EDK[Fabric_EDK_KL_btSoftBody_Impulse] LIB[btSoftBody::Impulse *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Impulse.=(
    btSoftBody_Impulse that
    ) = "Bullet2__btSoftBody_Impulse__MU__simple_ass_op__31e7a246765532293ce593ca49ca8634";


/// \dfgPresetOmit
/// \internal
btSoftBody_Impulse.appendDesc(io String string) {
  string += "btSoftBody_Impulse:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBody_Body(
    btSoftBody_Body that
    ) = "Bullet2__btSoftBody_Body__MU__copy_ctor__3d6b883ca6660fe66155e7bf93ac274b";

/// \dfgPresetOmit
/// \internal
btSoftBody_Body.__ctor(
    ) = "Bullet2__btSoftBody_Body__MU__ctor__dd9eb387202af1d5bbc8de3beac3a511";

/// \dfgPresetOmit
btSoftBody_Body(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Body.__ctor(
    btSoftBody_Cluster p
    ) = "Bullet2__btSoftBody_Body__MU__ctor__446248184d47c79507390b50383eeb05";

/// \dfgPresetOmit
btSoftBody_Body(
    btSoftBody_Cluster p
    ) {
    this.__ctor(
        p
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Body.__ctor(
    btCollisionObject colObj
    ) = "Bullet2__btSoftBody_Body__MU__ctor__7c60508e0d56c6af4e55df2b9634d15f";

/// \dfgPresetOmit
btSoftBody_Body(
    btCollisionObject colObj
    ) {
    this.__ctor(
        colObj
        );
}

btSoftBody_Body.cxx_delete() = "Bullet2__btSoftBody_Body__MU__delete__92c48ef646ce2bc29323831116729451";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftBody_Body.cxx_activate?(
    )
 = "Bullet2__btSoftBody_Body__CO__meth_activate__8e198ae8ae7baed916ef1037f9a807b0";

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
btSoftBody_Body.cxx_invWorldInertia?(
    )
 = "Bullet2__btSoftBody_Body__CO__meth_invWorldInertia__d50a1ab5e053281ac96272b221e81542";

/// \dfgPresetOmit
/// \internal
Float32
btSoftBody_Body.cxx_invMass?(
    )
 = "Bullet2__btSoftBody_Body__CO__meth_invMass__a4df09c15856ac71a42405570356f193";

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
btSoftBody_Body.cxx_xform?(
    )
 = "Bullet2__btSoftBody_Body__CO__meth_xform__ea050fbd6f4352f26c7c48305b501ab8";

/// \dfgPresetOmit
/// \internal
btVector3
btSoftBody_Body.cxx_linearVelocity?(
    )
 = "Bullet2__btSoftBody_Body__CO__meth_linearVelocity__dd979b8f4e34310c83f836266bfe181d";

/// \dfgPresetOmit
/// \internal
btVector3
btSoftBody_Body.cxx_angularVelocity?(
    CxxbtVector3ConstRef rpos
    )
 = "Bullet2__btSoftBody_Body__CO__meth_angularVelocity__75bdf74136d7d77e908318646bf17486";

/// \dfgPresetOmit
/// \internal
btVector3
btSoftBody_Body.cxx_angularVelocity?(
    )
 = "Bullet2__btSoftBody_Body__CO__meth_angularVelocity__2750c6c4f7851cc54f7ecf7820e825c4";

/// \dfgPresetOmit
/// \internal
btVector3
btSoftBody_Body.cxx_velocity?(
    CxxbtVector3ConstRef rpos
    )
 = "Bullet2__btSoftBody_Body__CO__meth_velocity__1ea1733db01a2bf7647be40f5c1c4bb7";

/// \dfgPresetOmit
/// \internal

btSoftBody_Body.cxx_applyVImpulse?(
    CxxbtVector3ConstRef impulse,
    CxxbtVector3ConstRef rpos
    )
 = "Bullet2__btSoftBody_Body__CO__meth_applyVImpulse__13d18304ac561ae45bbb7b7f74bb72da";

/// \dfgPresetOmit
/// \internal

btSoftBody_Body.cxx_applyDImpulse?(
    CxxbtVector3ConstRef impulse,
    CxxbtVector3ConstRef rpos
    )
 = "Bullet2__btSoftBody_Body__CO__meth_applyDImpulse__4c6f5b62a2cf3ad7ca4f6a5ebcdd3ce9";

/// \dfgPresetOmit
/// \internal

btSoftBody_Body.cxx_applyImpulse?(
    btSoftBody_Impulse impulse,
    CxxbtVector3ConstRef rpos
    )
 = "Bullet2__btSoftBody_Body__CO__meth_applyImpulse__41d5d1f9ec005a1331e2df202ef8db70";

/// \dfgPresetOmit
/// \internal

btSoftBody_Body.cxx_applyVAImpulse?(
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btSoftBody_Body__CO__meth_applyVAImpulse__0fbf5da87838c9d00551cf1ef396d9f4";

/// \dfgPresetOmit
/// \internal

btSoftBody_Body.cxx_applyDAImpulse?(
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btSoftBody_Body__CO__meth_applyDAImpulse__143819c417c982501ef4a9587ed2bafb";

/// \dfgPresetOmit
/// \internal

btSoftBody_Body.cxx_applyAImpulse?(
    btSoftBody_Impulse impulse
    )
 = "Bullet2__btSoftBody_Body__CO__meth_applyAImpulse__31cdeffe162430afbf6b93379f8e06d0";

/// \dfgPresetOmit
/// \internal

btSoftBody_Body.cxx_applyDCImpulse?(
    CxxbtVector3ConstRef impulse
    )
 = "Bullet2__btSoftBody_Body__CO__meth_applyDCImpulse__0311b0b637ed28da710599817f25c43d";

btVector3
btSoftBody_Body.linearVelocity?(
    )
{   
    btVector3 __res = 
    this.cxx_linearVelocity(
        );
    
    return __res;
}


btSoftBody_Body.applyDAImpulse?(
    in
    btVector3
    impulse
    
    
    )
{   
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    this.cxx_applyDAImpulse(
        impulse__cxx
        );
    
    
    
}


btSoftBody_Body.applyVAImpulse?(
    in
    btVector3
    impulse
    
    
    )
{   
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    this.cxx_applyVAImpulse(
        impulse__cxx
        );
    
    
    
}

btVector3
btSoftBody_Body.velocity?(
    in
    btVector3
    rpos
    
    
    )
{   
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    btVector3 __res = 
    this.cxx_velocity(
        rpos__cxx
        );
    
    
    return __res;
}

btVector3
btSoftBody_Body.angularVelocity?(
    in
    btVector3
    rpos
    
    
    )
{   
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    btVector3 __res = 
    this.cxx_angularVelocity(
        rpos__cxx
        );
    
    
    return __res;
}

Float32
btSoftBody_Body.invMass?(
    )
{   
    Float32 __res = 
    this.cxx_invMass(
        );
    
    return __res;
}


btSoftBody_Body.applyVImpulse?(
    in
    btVector3
    impulse
    
    ,
    in
    btVector3
    rpos
    
    
    )
{   
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    
    this.cxx_applyVImpulse(
        impulse__cxx,
        rpos__cxx
        );
    
    
    
    
}


btSoftBody_Body.applyDCImpulse?(
    in
    btVector3
    impulse
    
    
    )
{   
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    this.cxx_applyDCImpulse(
        impulse__cxx
        );
    
    
    
}


btSoftBody_Body.applyDImpulse?(
    in
    btVector3
    impulse
    
    ,
    in
    btVector3
    rpos
    
    
    )
{   
    
    CxxbtVector3ConstRef impulse__cxx = Make_CxxbtVector3ConstRef(impulse);
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    
    this.cxx_applyDImpulse(
        impulse__cxx,
        rpos__cxx
        );
    
    
    
    
}

btMatrix3x3
btSoftBody_Body.invWorldInertia?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_invWorldInertia(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}


btSoftBody_Body.applyImpulse?(
    in
    btSoftBody_Impulse
    impulse
    
    ,
    in
    btVector3
    rpos
    
    
    )
{   
    
    
    CxxbtVector3ConstRef rpos__cxx = Make_CxxbtVector3ConstRef(rpos);
    
    this.cxx_applyImpulse(
        impulse,
        rpos__cxx
        );
    
    
    
    
}

btVector3
btSoftBody_Body.angularVelocity?(
    )
{   
    btVector3 __res = 
    this.cxx_angularVelocity(
        );
    
    return __res;
}

btTransform
btSoftBody_Body.xform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_xform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}


btSoftBody_Body.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}


btSoftBody_Body.applyAImpulse?(
    in
    btSoftBody_Impulse
    impulse
    
    
    )
{   
    
    
    this.cxx_applyAImpulse(
        impulse
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Body] EDK[Fabric_EDK_KL_btSoftBody_Body] LIB[btSoftBody::Body *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Body.=(
    btSoftBody_Body that
    ) = "Bullet2__btSoftBody_Body__MU__simple_ass_op__e3d44871e5aecff51bb152ff6d98ca06";


/// \dfgPresetOmit
/// \internal
btSoftBody_Body.appendDesc(io String string) {
  string += "btSoftBody_Body:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBody_Joint(
    btSoftBody_Joint that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btSoftBody_Joint.cxx_delete() = "Bullet2__btSoftBody_Joint__MU__delete__ebfea39bebcb7cd77348fc9b5c7be482";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftBody_Joint.cxx_Prepare!(
    Float32 dt,
    SInt32 iterations
    )
 = "Bullet2__btSoftBody_Joint__MU__meth_Prepare__4ed8c6225cc80b28df6856957e2ab60a";

/// \dfgPresetOmit
/// \internal

btSoftBody_Joint.cxx_Solve!(
    Float32 dt,
    Float32 sor
    )
 = "Bullet2__btSoftBody_Joint__MU__meth_Solve__147c1c569876647f95737cc50d4a66d6";

/// \dfgPresetOmit
/// \internal

btSoftBody_Joint.cxx_Terminate!(
    Float32 dt
    )
 = "Bullet2__btSoftBody_Joint__MU__meth_Terminate__e0690f01511e5baa98d8960eede34dbb";

/// \dfgPresetOmit
/// \internal
btSoftBody_Joint_eType__
btSoftBody_Joint.cxx_Type?(
    )
 = "Bullet2__btSoftBody_Joint__CO__meth_Type__9f4486fb119d4190c208e9ca215ff1bd";


btSoftBody_Joint.Solve!(
    in
    Float32
    dt
    
    ,
    in
    Float32
    sor
    
    
    )
{   
    
    
    
    this.cxx_Solve(
        dt,
        sor
        );
    
    
    
    
}


btSoftBody_Joint.Prepare!(
    in
    Float32
    dt
    
    ,
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    
    this.cxx_Prepare(
        dt,
        iterations
        );
    
    
    
    
}

btSoftBody_Joint_eType__
btSoftBody_Joint.Type_?(
    )
{   
    btSoftBody_Joint_eType__ __res = 
    this.cxx_Type(
        );
    
    return __res;
}


btSoftBody_Joint.Terminate!(
    in
    Float32
    dt
    
    
    )
{   
    
    
    this.cxx_Terminate(
        dt
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint] EDK[Fabric_EDK_KL_btSoftBody_Joint] LIB[btSoftBody::Joint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Joint.=(
    btSoftBody_Joint that
    ) = "Bullet2__btSoftBody_Joint__MU__simple_ass_op__33e96c4b0e5d41cd384245a7b1114b1b";


/// \dfgPresetOmit
/// \internal
btSoftBody_Joint.appendDesc(io String string) {
  string += "btSoftBody_Joint:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint_eType] EDK[Fabric_EDK_KL_btSoftBody_Joint_eType] LIB[btSoftBody::Joint::eType *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_eType] EDK[Fabric_EDK_KL_btSoftBody_Joint_eType] LIB[btSoftBody::Joint::eType *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_eType] EDK[Fabric_EDK_KL_btSoftBody_Joint_eType] LIB[btSoftBody::Joint::eType *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Joint_eType() = "Bullet2__btSoftBody_Joint_eType__MU__empty_ctor__819c230a607ac7facd73fba6e9132cef";

/// \dfgPresetOmit
btSoftBody_Joint_eType(
    btSoftBody_Joint_eType that
    ) = "Bullet2__btSoftBody_Joint_eType__MU__copy_ctor__fca5b1128068654d1b5dfb4ec6c13daf";

btSoftBody_Joint_eType.cxx_delete() = "Bullet2__btSoftBody_Joint_eType__MU__delete__10fc6fbacdd78e93ac53ae62fee410e7";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_eType] EDK[Fabric_EDK_KL_btSoftBody_Joint_eType] LIB[btSoftBody::Joint::eType *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_eType] EDK[Fabric_EDK_KL_btSoftBody_Joint_eType] LIB[btSoftBody::Joint::eType *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_eType] EDK[Fabric_EDK_KL_btSoftBody_Joint_eType] LIB[btSoftBody::Joint::eType *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Joint_eType.=(
    btSoftBody_Joint_eType that
    ) = "Bullet2__btSoftBody_Joint_eType__MU__simple_ass_op__9f4e61fa9f5549375557ce24e3254955";


/// \dfgPresetOmit
/// \internal
btSoftBody_Joint_eType.appendDesc(io String string) {
  string += "btSoftBody_Joint_eType:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Joint_Specs] EDK[Fabric_EDK_KL_btSoftBody_Joint_Specs] LIB[btSoftBody::Joint::Specs *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_Specs] EDK[Fabric_EDK_KL_btSoftBody_Joint_Specs] LIB[btSoftBody::Joint::Specs *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_Specs] EDK[Fabric_EDK_KL_btSoftBody_Joint_Specs] LIB[btSoftBody::Joint::Specs *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBody_Joint_Specs(
    btSoftBody_Joint_Specs that
    ) = "Bullet2__btSoftBody_Joint_Specs__MU__copy_ctor__c9e8b749d68ea5392a095f6476175a5a";

/// \dfgPresetOmit
/// \internal
btSoftBody_Joint_Specs.__ctor(
    ) = "Bullet2__btSoftBody_Joint_Specs__MU__ctor__c74f9ac405db206f5199d2f4dae709cb";

/// \dfgPresetOmit
btSoftBody_Joint_Specs(
    ) {
    this.__ctor(
        );
}

btSoftBody_Joint_Specs.cxx_delete() = "Bullet2__btSoftBody_Joint_Specs__MU__delete__c012bd0bdb5c16287df1270d75b74aaf";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_Specs] EDK[Fabric_EDK_KL_btSoftBody_Joint_Specs] LIB[btSoftBody::Joint::Specs *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_Specs] EDK[Fabric_EDK_KL_btSoftBody_Joint_Specs] LIB[btSoftBody::Joint::Specs *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Joint_Specs] EDK[Fabric_EDK_KL_btSoftBody_Joint_Specs] LIB[btSoftBody::Joint::Specs *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Joint_Specs.=(
    btSoftBody_Joint_Specs that
    ) = "Bullet2__btSoftBody_Joint_Specs__MU__simple_ass_op__1827eb1952e9cb413fe0746dc8dbd727";


/// \dfgPresetOmit
/// \internal
btSoftBody_Joint_Specs.appendDesc(io String string) {
  string += "btSoftBody_Joint_Specs:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_LJoint() = "Bullet2__btSoftBody_LJoint__MU__empty_ctor__f851bb8adbe53e0d338d051f1ba1fbba";

/// \dfgPresetOmit
btSoftBody_LJoint(
    btSoftBody_LJoint that
    ) = "Bullet2__btSoftBody_LJoint__MU__copy_ctor__354ba5ea3701bc1c6735e858eac4b88b";

btSoftBody_LJoint.cxx_delete() = "Bullet2__btSoftBody_LJoint__MU__delete__75598b07cbcafe4b41eae93f17744ce9";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftBody_LJoint.cxx_Prepare!(
    Float32 dt,
    SInt32 iterations
    )
 = "Bullet2__btSoftBody_LJoint__MU__meth_Prepare__4989b2f54dc4650db556dc1e94a7659e";

/// \dfgPresetOmit
/// \internal

btSoftBody_LJoint.cxx_Solve!(
    Float32 dt,
    Float32 sor
    )
 = "Bullet2__btSoftBody_LJoint__MU__meth_Solve__1163134b30363411b08cc18117e8eb71";

/// \dfgPresetOmit
/// \internal

btSoftBody_LJoint.cxx_Terminate!(
    Float32 dt
    )
 = "Bullet2__btSoftBody_LJoint__MU__meth_Terminate__b7c34e648a818cb0c91b3091b3a61b75";


btSoftBody_LJoint.Terminate!(
    in
    Float32
    dt
    
    
    )
{   
    
    
    this.cxx_Terminate(
        dt
        );
    
    
    
}


btSoftBody_LJoint.Prepare!(
    in
    Float32
    dt
    
    ,
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    
    this.cxx_Prepare(
        dt,
        iterations
        );
    
    
    
    
}


btSoftBody_LJoint.Solve!(
    in
    Float32
    dt
    
    ,
    in
    Float32
    sor
    
    
    )
{   
    
    
    
    this.cxx_Solve(
        dt,
        sor
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint] EDK[Fabric_EDK_KL_btSoftBody_LJoint] LIB[btSoftBody::LJoint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_LJoint.=(
    btSoftBody_LJoint that
    ) = "Bullet2__btSoftBody_LJoint__MU__simple_ass_op__6f5601c6d491af1fe0dc7431d904ed2d";


/// \dfgPresetOmit
/// \internal
btSoftBody_LJoint.appendDesc(io String string) {
  string += "btSoftBody_LJoint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_LJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_LJoint_Specs] LIB[btSoftBody::LJoint::Specs *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_LJoint_Specs] LIB[btSoftBody::LJoint::Specs *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_LJoint_Specs] LIB[btSoftBody::LJoint::Specs *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_LJoint_Specs() = "Bullet2__btSoftBody_LJoint_Specs__MU__empty_ctor__687b71795b8d04cd16ceecd763a11ddc";

/// \dfgPresetOmit
btSoftBody_LJoint_Specs(
    btSoftBody_LJoint_Specs that
    ) = "Bullet2__btSoftBody_LJoint_Specs__MU__copy_ctor__013f7153dee8a03f4122a6c7540a8000";

btSoftBody_LJoint_Specs.cxx_delete() = "Bullet2__btSoftBody_LJoint_Specs__MU__delete__304baff271abd426bad0d064451e496c";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_LJoint_Specs] LIB[btSoftBody::LJoint::Specs *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_LJoint_Specs] LIB[btSoftBody::LJoint::Specs *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_LJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_LJoint_Specs] LIB[btSoftBody::LJoint::Specs *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_LJoint_Specs.=(
    btSoftBody_LJoint_Specs that
    ) = "Bullet2__btSoftBody_LJoint_Specs__MU__simple_ass_op__771b415f2477a89435b8db5e05296a97";


/// \dfgPresetOmit
/// \internal
btSoftBody_LJoint_Specs.appendDesc(io String string) {
  string += "btSoftBody_LJoint_Specs:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_AJoint() = "Bullet2__btSoftBody_AJoint__MU__empty_ctor__d03bcc5344b182db0d122e5fbfc02a0c";

/// \dfgPresetOmit
btSoftBody_AJoint(
    btSoftBody_AJoint that
    ) = "Bullet2__btSoftBody_AJoint__MU__copy_ctor__39ccb35ae91fd9ee024230cde8d338fc";

btSoftBody_AJoint.cxx_delete() = "Bullet2__btSoftBody_AJoint__MU__delete__e27598c040744f445f644580845d6fec";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftBody_AJoint.cxx_Prepare!(
    Float32 dt,
    SInt32 iterations
    )
 = "Bullet2__btSoftBody_AJoint__MU__meth_Prepare__9f43ae646ba3408e73420f296f790a85";

/// \dfgPresetOmit
/// \internal

btSoftBody_AJoint.cxx_Solve!(
    Float32 dt,
    Float32 sor
    )
 = "Bullet2__btSoftBody_AJoint__MU__meth_Solve__046c312ed93ec1c3d61ccd2a6bd1309f";

/// \dfgPresetOmit
/// \internal

btSoftBody_AJoint.cxx_Terminate!(
    Float32 dt
    )
 = "Bullet2__btSoftBody_AJoint__MU__meth_Terminate__54ff23a13d826287fcf9b6a4c26243b0";


btSoftBody_AJoint.Solve!(
    in
    Float32
    dt
    
    ,
    in
    Float32
    sor
    
    
    )
{   
    
    
    
    this.cxx_Solve(
        dt,
        sor
        );
    
    
    
    
}


btSoftBody_AJoint.Prepare!(
    in
    Float32
    dt
    
    ,
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    
    this.cxx_Prepare(
        dt,
        iterations
        );
    
    
    
    
}


btSoftBody_AJoint.Terminate!(
    in
    Float32
    dt
    
    
    )
{   
    
    
    this.cxx_Terminate(
        dt
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint] EDK[Fabric_EDK_KL_btSoftBody_AJoint] LIB[btSoftBody::AJoint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_AJoint.=(
    btSoftBody_AJoint that
    ) = "Bullet2__btSoftBody_AJoint__MU__simple_ass_op__5d270041be35071bb34ad01a09b0575f";


/// \dfgPresetOmit
/// \internal
btSoftBody_AJoint.appendDesc(io String string) {
  string += "btSoftBody_AJoint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_AJoint_IControl() = "Bullet2__btSoftBody_AJoint_IControl__MU__empty_ctor__0c4557feed607ecfaeafdf9c91871f95";

/// \dfgPresetOmit
btSoftBody_AJoint_IControl(
    btSoftBody_AJoint_IControl that
    ) = "Bullet2__btSoftBody_AJoint_IControl__MU__copy_ctor__e37fc59916e847f1d46c6e6d6b1123a3";

btSoftBody_AJoint_IControl.cxx_delete() = "Bullet2__btSoftBody_AJoint_IControl__MU__delete__cf27d792089561c4624b119c10227403";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftBody_AJoint_IControl.cxx_Prepare!(
    btSoftBody_AJoint _arg0
    )
 = "Bullet2__btSoftBody_AJoint_IControl__MU__meth_Prepare__6bd2c342b646f01dcc86d87fbb611eaa";

/// \dfgPresetOmit
/// \internal
Float32
btSoftBody_AJoint_IControl.cxx_Speed!(
    btSoftBody_AJoint _arg0,
    Float32 current
    )
 = "Bullet2__btSoftBody_AJoint_IControl__MU__meth_Speed__184d2f6ddf9b788aca881849c24439ef";

/// \dfgPresetOmit
/// \internal
btSoftBody_AJoint_IControl
btSoftBody_AJoint_IControl_CxxDefault(
    )
 = "Bullet2__btSoftBody_AJoint_IControl__ST__meth_Default__04ddabcf89314ac9b3b58f70ead58582";

Float32
btSoftBody_AJoint_IControl.Speed!(
    in
    btSoftBody_AJoint
    _arg0
    
    ,
    in
    Float32
    current
    
    
    )
{   
    
    
    Float32 __res = 
    this.cxx_Speed(
        _arg0,
        current
        );
    
    
    
    return __res;
}


btSoftBody_AJoint_IControl.Prepare!(
    in
    btSoftBody_AJoint
    _arg0
    
    
    )
{   
    
    
    this.cxx_Prepare(
        _arg0
        );
    
    
    
}

btSoftBody_AJoint_IControl
btSoftBody_AJoint_IControl_Default(
    )
{   
    btSoftBody_AJoint_IControl __res = 
    btSoftBody_AJoint_IControl_CxxDefault(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_IControl] EDK[Fabric_EDK_KL_btSoftBody_AJoint_IControl] LIB[btSoftBody::AJoint::IControl *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_AJoint_IControl.=(
    btSoftBody_AJoint_IControl that
    ) = "Bullet2__btSoftBody_AJoint_IControl__MU__simple_ass_op__51aae8db9c62c8c597ea1459ad8fcff1";


/// \dfgPresetOmit
/// \internal
btSoftBody_AJoint_IControl.appendDesc(io String string) {
  string += "btSoftBody_AJoint_IControl:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_AJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_AJoint_Specs] LIB[btSoftBody::AJoint::Specs *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_AJoint_Specs] LIB[btSoftBody::AJoint::Specs *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_AJoint_Specs] LIB[btSoftBody::AJoint::Specs *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSoftBody_AJoint_Specs(
    btSoftBody_AJoint_Specs that
    ) = "Bullet2__btSoftBody_AJoint_Specs__MU__copy_ctor__453c6758f25a32eefd1e6a393bbc2e26";

/// \dfgPresetOmit
/// \internal
btSoftBody_AJoint_Specs.__ctor(
    ) = "Bullet2__btSoftBody_AJoint_Specs__MU__ctor__0a46370023692c31487c3537dace9c66";

/// \dfgPresetOmit
btSoftBody_AJoint_Specs(
    ) {
    this.__ctor(
        );
}

btSoftBody_AJoint_Specs.cxx_delete() = "Bullet2__btSoftBody_AJoint_Specs__MU__delete__882552b10f4e6abc664a2ea423457afa";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_AJoint_Specs] LIB[btSoftBody::AJoint::Specs *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_AJoint_Specs] LIB[btSoftBody::AJoint::Specs *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_AJoint_Specs] EDK[Fabric_EDK_KL_btSoftBody_AJoint_Specs] LIB[btSoftBody::AJoint::Specs *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_AJoint_Specs.=(
    btSoftBody_AJoint_Specs that
    ) = "Bullet2__btSoftBody_AJoint_Specs__MU__simple_ass_op__7988722ca296fa585a4d579863947dab";


/// \dfgPresetOmit
/// \internal
btSoftBody_AJoint_Specs.appendDesc(io String string) {
  string += "btSoftBody_AJoint_Specs:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_CJoint() = "Bullet2__btSoftBody_CJoint__MU__empty_ctor__df3315d8aabc2c273f49509421a6de39";

/// \dfgPresetOmit
btSoftBody_CJoint(
    btSoftBody_CJoint that
    ) = "Bullet2__btSoftBody_CJoint__MU__copy_ctor__e7399c7c72e6078ea3d5c202bd2e2732";

btSoftBody_CJoint.cxx_delete() = "Bullet2__btSoftBody_CJoint__MU__delete__a2521d29ae874db377b37f17939550bb";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftBody_CJoint.cxx_Prepare!(
    Float32 dt,
    SInt32 iterations
    )
 = "Bullet2__btSoftBody_CJoint__MU__meth_Prepare__65a0c4c2c09c5a191f7d6bb85ad165a0";

/// \dfgPresetOmit
/// \internal

btSoftBody_CJoint.cxx_Solve!(
    Float32 dt,
    Float32 sor
    )
 = "Bullet2__btSoftBody_CJoint__MU__meth_Solve__939675ef58acf7bbcc009cc645ebeae8";

/// \dfgPresetOmit
/// \internal

btSoftBody_CJoint.cxx_Terminate!(
    Float32 dt
    )
 = "Bullet2__btSoftBody_CJoint__MU__meth_Terminate__73f91154acf84421be26e019a59399bf";


btSoftBody_CJoint.Terminate!(
    in
    Float32
    dt
    
    
    )
{   
    
    
    this.cxx_Terminate(
        dt
        );
    
    
    
}


btSoftBody_CJoint.Solve!(
    in
    Float32
    dt
    
    ,
    in
    Float32
    sor
    
    
    )
{   
    
    
    
    this.cxx_Solve(
        dt,
        sor
        );
    
    
    
    
}


btSoftBody_CJoint.Prepare!(
    in
    Float32
    dt
    
    ,
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    
    this.cxx_Prepare(
        dt,
        iterations
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_CJoint] EDK[Fabric_EDK_KL_btSoftBody_CJoint] LIB[btSoftBody::CJoint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_CJoint.=(
    btSoftBody_CJoint that
    ) = "Bullet2__btSoftBody_CJoint__MU__simple_ass_op__9cd1d98407f61239c3308622ea7211b5";


/// \dfgPresetOmit
/// \internal
btSoftBody_CJoint.appendDesc(io String string) {
  string += "btSoftBody_CJoint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_Config] EDK[Fabric_EDK_KL_btSoftBody_Config] LIB[btSoftBody::Config *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Config] EDK[Fabric_EDK_KL_btSoftBody_Config] LIB[btSoftBody::Config *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btSoftBody_eAeroModel__ btSoftBody_Config.cxx_get_aeromodel()
  = "Bullet2__btSoftBody_Config__CO__getter_aeromodel__5df54506bcd2910b7c2440266933b89a";

btSoftBody_eAeroModel__
btSoftBody_Config.get_aeromodel()
{
    btSoftBody_eAeroModel__ __res = 
    this.cxx_get_aeromodel();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_aeromodel!(btSoftBody_eAeroModel__ value)
  = "Bullet2__btSoftBody_Config__MU__setter_aeromodel__e33d36f6990489eb01b0cbea9ff03c5e";

btSoftBody_Config.set_aeromodel!(
    btSoftBody_eAeroModel__ value
   )
{
    
    this.cxx_set_aeromodel(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kVCF()
  = "Bullet2__btSoftBody_Config__CO__getter_kVCF__a65d848a85e559fe1d78183f2b5d25a9";

Float32
btSoftBody_Config.get_kVCF()
{
    Float32 __res = 
    this.cxx_get_kVCF();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kVCF!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kVCF__43c92fd255b7ca5e7e68cb0e284a55b9";

btSoftBody_Config.set_kVCF!(
    Float32 value
   )
{
    
    this.cxx_set_kVCF(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kDP()
  = "Bullet2__btSoftBody_Config__CO__getter_kDP__41552547c3d9efc7982a3a82154fa1ba";

Float32
btSoftBody_Config.get_kDP()
{
    Float32 __res = 
    this.cxx_get_kDP();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kDP!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kDP__15d6cb03317b22a53beadc3ad75646ba";

btSoftBody_Config.set_kDP!(
    Float32 value
   )
{
    
    this.cxx_set_kDP(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kDG()
  = "Bullet2__btSoftBody_Config__CO__getter_kDG__2b02ae01c94d9c1ef709798c4e469241";

Float32
btSoftBody_Config.get_kDG()
{
    Float32 __res = 
    this.cxx_get_kDG();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kDG!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kDG__f8919bc3c6f08c9b9c5ed9910dd13479";

btSoftBody_Config.set_kDG!(
    Float32 value
   )
{
    
    this.cxx_set_kDG(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kLF()
  = "Bullet2__btSoftBody_Config__CO__getter_kLF__e9e66688336c268a21bfb012a65f5541";

Float32
btSoftBody_Config.get_kLF()
{
    Float32 __res = 
    this.cxx_get_kLF();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kLF!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kLF__f0e1d22f6f2d77950449dc3290867c14";

btSoftBody_Config.set_kLF!(
    Float32 value
   )
{
    
    this.cxx_set_kLF(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kPR()
  = "Bullet2__btSoftBody_Config__CO__getter_kPR__2fd6e96b56ea33a2d3d921d0e424bf59";

Float32
btSoftBody_Config.get_kPR()
{
    Float32 __res = 
    this.cxx_get_kPR();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kPR!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kPR__39bda54d7b1bfd39823bca913ef6eee5";

btSoftBody_Config.set_kPR!(
    Float32 value
   )
{
    
    this.cxx_set_kPR(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kVC()
  = "Bullet2__btSoftBody_Config__CO__getter_kVC__177ab966fe71d6b9730aae0b5b8cea89";

Float32
btSoftBody_Config.get_kVC()
{
    Float32 __res = 
    this.cxx_get_kVC();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kVC!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kVC__067f2c06996e09d2b715a53bf2c127e5";

btSoftBody_Config.set_kVC!(
    Float32 value
   )
{
    
    this.cxx_set_kVC(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kDF()
  = "Bullet2__btSoftBody_Config__CO__getter_kDF__605b68c0ba1a437f808cbdd89c090058";

Float32
btSoftBody_Config.get_kDF()
{
    Float32 __res = 
    this.cxx_get_kDF();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kDF!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kDF__1214480e5e2d64ccd6a6170c9e1b7351";

btSoftBody_Config.set_kDF!(
    Float32 value
   )
{
    
    this.cxx_set_kDF(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kMT()
  = "Bullet2__btSoftBody_Config__CO__getter_kMT__d76137b18f5358f0c099612394fff522";

Float32
btSoftBody_Config.get_kMT()
{
    Float32 __res = 
    this.cxx_get_kMT();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kMT!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kMT__faf0b80ebb930fb0c5085a7863ab6072";

btSoftBody_Config.set_kMT!(
    Float32 value
   )
{
    
    this.cxx_set_kMT(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kCHR()
  = "Bullet2__btSoftBody_Config__CO__getter_kCHR__64f5e9c041e3840ef458977aac4e0293";

Float32
btSoftBody_Config.get_kCHR()
{
    Float32 __res = 
    this.cxx_get_kCHR();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kCHR!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kCHR__524d1c02cf8d26dc5b078c585f427b21";

btSoftBody_Config.set_kCHR!(
    Float32 value
   )
{
    
    this.cxx_set_kCHR(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kKHR()
  = "Bullet2__btSoftBody_Config__CO__getter_kKHR__8fb766dda98963e3d5aa371e7e470b81";

Float32
btSoftBody_Config.get_kKHR()
{
    Float32 __res = 
    this.cxx_get_kKHR();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kKHR!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kKHR__7b8bfde4f324f4f00e3784d038aec00b";

btSoftBody_Config.set_kKHR!(
    Float32 value
   )
{
    
    this.cxx_set_kKHR(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kSHR()
  = "Bullet2__btSoftBody_Config__CO__getter_kSHR__7071f2225e399a72b5ec16e3fdd5a125";

Float32
btSoftBody_Config.get_kSHR()
{
    Float32 __res = 
    this.cxx_get_kSHR();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kSHR!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kSHR__087103ef8d003a2f5d28d38f2c7cd6e9";

btSoftBody_Config.set_kSHR!(
    Float32 value
   )
{
    
    this.cxx_set_kSHR(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kAHR()
  = "Bullet2__btSoftBody_Config__CO__getter_kAHR__0b7d2e6da9cd55e97a85d3068a895fd7";

Float32
btSoftBody_Config.get_kAHR()
{
    Float32 __res = 
    this.cxx_get_kAHR();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kAHR!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kAHR__fdc9866dcda36197d57478da1b5c965b";

btSoftBody_Config.set_kAHR!(
    Float32 value
   )
{
    
    this.cxx_set_kAHR(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kSRHR_CL()
  = "Bullet2__btSoftBody_Config__CO__getter_kSRHR_CL__329cb9f5d6b27b5b15a3d642607d0a45";

Float32
btSoftBody_Config.get_kSRHR_CL()
{
    Float32 __res = 
    this.cxx_get_kSRHR_CL();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kSRHR_CL!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kSRHR_CL__f4b052c87b55dde82f7294e3bf68de52";

btSoftBody_Config.set_kSRHR_CL!(
    Float32 value
   )
{
    
    this.cxx_set_kSRHR_CL(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kSKHR_CL()
  = "Bullet2__btSoftBody_Config__CO__getter_kSKHR_CL__09fcb8c842a1b65fb73aec5918fe94ea";

Float32
btSoftBody_Config.get_kSKHR_CL()
{
    Float32 __res = 
    this.cxx_get_kSKHR_CL();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kSKHR_CL!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kSKHR_CL__e5f16394da574b3eea4d22a3de2fbe08";

btSoftBody_Config.set_kSKHR_CL!(
    Float32 value
   )
{
    
    this.cxx_set_kSKHR_CL(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kSSHR_CL()
  = "Bullet2__btSoftBody_Config__CO__getter_kSSHR_CL__9e155902d8fbbf5a8964470aa4412d3c";

Float32
btSoftBody_Config.get_kSSHR_CL()
{
    Float32 __res = 
    this.cxx_get_kSSHR_CL();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kSSHR_CL!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kSSHR_CL__dd6231ece1c35895b834b2b6401409db";

btSoftBody_Config.set_kSSHR_CL!(
    Float32 value
   )
{
    
    this.cxx_set_kSSHR_CL(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kSR_SPLT_CL()
  = "Bullet2__btSoftBody_Config__CO__getter_kSR_SPLT_CL__6a3c9daa621d9b83a903dd2a44bfe757";

Float32
btSoftBody_Config.get_kSR_SPLT_CL()
{
    Float32 __res = 
    this.cxx_get_kSR_SPLT_CL();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kSR_SPLT_CL!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kSR_SPLT_CL__8a9aca016e2afa2423858811f793075e";

btSoftBody_Config.set_kSR_SPLT_CL!(
    Float32 value
   )
{
    
    this.cxx_set_kSR_SPLT_CL(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kSK_SPLT_CL()
  = "Bullet2__btSoftBody_Config__CO__getter_kSK_SPLT_CL__91f989d5bb05bfbb7dc06f49d47b70d6";

Float32
btSoftBody_Config.get_kSK_SPLT_CL()
{
    Float32 __res = 
    this.cxx_get_kSK_SPLT_CL();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kSK_SPLT_CL!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kSK_SPLT_CL__a0a2162e62a0d4f6f20f5abf0aed071d";

btSoftBody_Config.set_kSK_SPLT_CL!(
    Float32 value
   )
{
    
    this.cxx_set_kSK_SPLT_CL(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_kSS_SPLT_CL()
  = "Bullet2__btSoftBody_Config__CO__getter_kSS_SPLT_CL__53007cfd74f99a93ce51c0af4a871759";

Float32
btSoftBody_Config.get_kSS_SPLT_CL()
{
    Float32 __res = 
    this.cxx_get_kSS_SPLT_CL();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_kSS_SPLT_CL!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_kSS_SPLT_CL__5bcc2fd2cd88ceee4bfcefc27ff97b0a";

btSoftBody_Config.set_kSS_SPLT_CL!(
    Float32 value
   )
{
    
    this.cxx_set_kSS_SPLT_CL(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_maxvolume()
  = "Bullet2__btSoftBody_Config__CO__getter_maxvolume__0170902516f12f0b7e4da7dd6105fc7c";

Float32
btSoftBody_Config.get_maxvolume()
{
    Float32 __res = 
    this.cxx_get_maxvolume();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_maxvolume!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_maxvolume__da2fd1bf4dc26e6f1e3ef634de4498ab";

btSoftBody_Config.set_maxvolume!(
    Float32 value
   )
{
    
    this.cxx_set_maxvolume(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 btSoftBody_Config.cxx_get_timescale()
  = "Bullet2__btSoftBody_Config__CO__getter_timescale__4046d9cbf0363229eb3f84fdda107f31";

Float32
btSoftBody_Config.get_timescale()
{
    Float32 __res = 
    this.cxx_get_timescale();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_timescale!(Float32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_timescale__5bf0535e56f669cd4479eac5ee6416e7";

btSoftBody_Config.set_timescale!(
    Float32 value
   )
{
    
    this.cxx_set_timescale(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btSoftBody_Config.cxx_get_viterations()
  = "Bullet2__btSoftBody_Config__CO__getter_viterations__5d71fdc67cc734ee45fe3e56656a614a";

SInt32
btSoftBody_Config.get_viterations()
{
    SInt32 __res = 
    this.cxx_get_viterations();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_viterations!(SInt32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_viterations__6b5a43c7c76ad3da8dd7e41d5aaf25ae";

btSoftBody_Config.set_viterations!(
    SInt32 value
   )
{
    
    this.cxx_set_viterations(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btSoftBody_Config.cxx_get_piterations()
  = "Bullet2__btSoftBody_Config__CO__getter_piterations__866b167237bc5d4e6f99fc370655f354";

SInt32
btSoftBody_Config.get_piterations()
{
    SInt32 __res = 
    this.cxx_get_piterations();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_piterations!(SInt32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_piterations__744e7fdd51085d0c825e46e78b9014c1";

btSoftBody_Config.set_piterations!(
    SInt32 value
   )
{
    
    this.cxx_set_piterations(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btSoftBody_Config.cxx_get_diterations()
  = "Bullet2__btSoftBody_Config__CO__getter_diterations__28b80feb5836f91aba87d66f80b0ed67";

SInt32
btSoftBody_Config.get_diterations()
{
    SInt32 __res = 
    this.cxx_get_diterations();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_diterations!(SInt32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_diterations__c3c496e431fbf6aa992ce93f65a0260c";

btSoftBody_Config.set_diterations!(
    SInt32 value
   )
{
    
    this.cxx_set_diterations(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btSoftBody_Config.cxx_get_citerations()
  = "Bullet2__btSoftBody_Config__CO__getter_citerations__1587859315ed565ce43c2d9c43dbee24";

SInt32
btSoftBody_Config.get_citerations()
{
    SInt32 __res = 
    this.cxx_get_citerations();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_citerations!(SInt32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_citerations__3689eb82acf317cbe477e76d9641d180";

btSoftBody_Config.set_citerations!(
    SInt32 value
   )
{
    
    this.cxx_set_citerations(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
SInt32 btSoftBody_Config.cxx_get_collisions()
  = "Bullet2__btSoftBody_Config__CO__getter_collisions__f1202cfb5b39c4fe53cb8dd0a7c69341";

SInt32
btSoftBody_Config.get_collisions()
{
    SInt32 __res = 
    this.cxx_get_collisions();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Config.cxx_set_collisions!(SInt32 value)
  = "Bullet2__btSoftBody_Config__MU__setter_collisions__4978aed3087e5e759030d529cf9cb5e4";

btSoftBody_Config.set_collisions!(
    SInt32 value
   )
{
    
    this.cxx_set_collisions(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Config] EDK[Fabric_EDK_KL_btSoftBody_Config] LIB[btSoftBody::Config *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Config() = "Bullet2__btSoftBody_Config__MU__empty_ctor__dbe7f2d30a9700f33cb6e392240daf8c";

/// \dfgPresetOmit
btSoftBody_Config(
    btSoftBody_Config that
    ) = "Bullet2__btSoftBody_Config__MU__copy_ctor__119c406b1125147e6d26fd434e6c0eba";

btSoftBody_Config.cxx_delete() = "Bullet2__btSoftBody_Config__MU__delete__c5d76ee20a35f4cfa4586d45ee78899f";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Config] EDK[Fabric_EDK_KL_btSoftBody_Config] LIB[btSoftBody::Config *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Config] EDK[Fabric_EDK_KL_btSoftBody_Config] LIB[btSoftBody::Config *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_Config] EDK[Fabric_EDK_KL_btSoftBody_Config] LIB[btSoftBody::Config *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_Config.=(
    btSoftBody_Config that
    ) = "Bullet2__btSoftBody_Config__MU__simple_ass_op__4a6d82a6c44597df96fa019c89721d7d";


/// \dfgPresetOmit
/// \internal
btSoftBody_Config.appendDesc(io String string) {
  string += "btSoftBody_Config:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_SolverState] EDK[Fabric_EDK_KL_btSoftBody_SolverState] LIB[btSoftBody::SolverState *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SolverState] EDK[Fabric_EDK_KL_btSoftBody_SolverState] LIB[btSoftBody::SolverState *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SolverState] EDK[Fabric_EDK_KL_btSoftBody_SolverState] LIB[btSoftBody::SolverState *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_SolverState() = "Bullet2__btSoftBody_SolverState__MU__empty_ctor__41445cff378896ad0840851a97705a42";

/// \dfgPresetOmit
btSoftBody_SolverState(
    btSoftBody_SolverState that
    ) = "Bullet2__btSoftBody_SolverState__MU__copy_ctor__8729fababcf92b393c542f10eb1203a5";

btSoftBody_SolverState.cxx_delete() = "Bullet2__btSoftBody_SolverState__MU__delete__26df4bcff7f445f82bf33bbea6412c34";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SolverState] EDK[Fabric_EDK_KL_btSoftBody_SolverState] LIB[btSoftBody::SolverState *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SolverState] EDK[Fabric_EDK_KL_btSoftBody_SolverState] LIB[btSoftBody::SolverState *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_SolverState] EDK[Fabric_EDK_KL_btSoftBody_SolverState] LIB[btSoftBody::SolverState *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_SolverState.=(
    btSoftBody_SolverState that
    ) = "Bullet2__btSoftBody_SolverState__MU__simple_ass_op__ef0f870a1aa035a10f6109fe9fe354be";


/// \dfgPresetOmit
/// \internal
btSoftBody_SolverState.appendDesc(io String string) {
  string += "btSoftBody_SolverState:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBody_RayFromToCaster] EDK[Fabric_EDK_KL_btSoftBody_RayFromToCaster] LIB[btSoftBody::RayFromToCaster *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RayFromToCaster] EDK[Fabric_EDK_KL_btSoftBody_RayFromToCaster] LIB[btSoftBody::RayFromToCaster *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RayFromToCaster] EDK[Fabric_EDK_KL_btSoftBody_RayFromToCaster] LIB[btSoftBody::RayFromToCaster *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBody_RayFromToCaster() = "Bullet2__btSoftBody_RayFromToCaster__MU__empty_ctor__285e6705ec2098cd802c83953828794b";

/// \dfgPresetOmit
btSoftBody_RayFromToCaster(
    btSoftBody_RayFromToCaster that
    ) = "Bullet2__btSoftBody_RayFromToCaster__MU__copy_ctor__d31bfec5d7c6b109def206a4790445fd";

btSoftBody_RayFromToCaster.cxx_delete() = "Bullet2__btSoftBody_RayFromToCaster__MU__delete__00e0a383c24a0b912156a25cd3df61b6";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RayFromToCaster] EDK[Fabric_EDK_KL_btSoftBody_RayFromToCaster] LIB[btSoftBody::RayFromToCaster *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RayFromToCaster] EDK[Fabric_EDK_KL_btSoftBody_RayFromToCaster] LIB[btSoftBody::RayFromToCaster *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBody_RayFromToCaster] EDK[Fabric_EDK_KL_btSoftBody_RayFromToCaster] LIB[btSoftBody::RayFromToCaster *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBody_RayFromToCaster.=(
    btSoftBody_RayFromToCaster that
    ) = "Bullet2__btSoftBody_RayFromToCaster__MU__simple_ass_op__8f4d7532df80943b2967e4909319deaa";


/// \dfgPresetOmit
/// \internal
btSoftBody_RayFromToCaster.appendDesc(io String string) {
  string += "btSoftBody_RayFromToCaster:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftRigidCollisionAlgorithm() = "Bullet2__btSoftRigidCollisionAlgorithm__MU__empty_ctor__77c13095bdd5470a2a35f4edc9feec99";

/// \dfgPresetOmit
btSoftRigidCollisionAlgorithm(
    btSoftRigidCollisionAlgorithm that
    ) = "Bullet2__btSoftRigidCollisionAlgorithm__MU__copy_ctor__cba5842bfe660f4cbeb060ff40b62580";

btSoftRigidCollisionAlgorithm.cxx_delete() = "Bullet2__btSoftRigidCollisionAlgorithm__MU__delete__851c792026a73c8d8913654cdfaadedd";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btSoftRigidCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btSoftRigidCollisionAlgorithm__MU__meth_calculateTimeOfImpact__541ac30140dd4f366bdfbaebea5528dc";

Float32
btSoftRigidCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm] LIB[btSoftRigidCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftRigidCollisionAlgorithm.=(
    btSoftRigidCollisionAlgorithm that
    ) = "Bullet2__btSoftRigidCollisionAlgorithm__MU__simple_ass_op__36000317cfd80b596c55fd87d4396d2b";


/// \dfgPresetOmit
/// \internal
btSoftRigidCollisionAlgorithm.appendDesc(io String string) {
  string += "btSoftRigidCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc] LIB[btSoftRigidCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc] LIB[btSoftRigidCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc] LIB[btSoftRigidCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftRigidCollisionAlgorithm_CreateFunc() = "Bullet2__btSoftRigidCollisionAlgorithm_CreateFunc__MU__empty_ctor__d37f6aa3a803fb1716e5d3bf7f81f2c1";

/// \dfgPresetOmit
btSoftRigidCollisionAlgorithm_CreateFunc(
    btSoftRigidCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSoftRigidCollisionAlgorithm_CreateFunc__MU__copy_ctor__f1715e8eac8ef709ee62a2033c282a8c";

btSoftRigidCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btSoftRigidCollisionAlgorithm_CreateFunc__MU__delete__bfffe2303e2452435e2e0eb2a915fa50";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc] LIB[btSoftRigidCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc] LIB[btSoftRigidCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftRigidCollisionAlgorithm_CreateFunc] LIB[btSoftRigidCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftRigidCollisionAlgorithm_CreateFunc.=(
    btSoftRigidCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSoftRigidCollisionAlgorithm_CreateFunc__MU__simple_ass_op__29223d612b01d5be9050c6a1d60768e2";


/// \dfgPresetOmit
/// \internal
btSoftRigidCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btSoftRigidCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftSoftCollisionAlgorithm() = "Bullet2__btSoftSoftCollisionAlgorithm__MU__empty_ctor__170863ac6a867d4c737b9eaffa820155";

/// \dfgPresetOmit
btSoftSoftCollisionAlgorithm(
    btSoftSoftCollisionAlgorithm that
    ) = "Bullet2__btSoftSoftCollisionAlgorithm__MU__copy_ctor__9894c64cb53b5b21831e84399a7e67a0";

/// \dfgPresetOmit
/// \internal
btSoftSoftCollisionAlgorithm.__ctor(
    btCollisionAlgorithmConstructionInfo ci
    ) = "Bullet2__btSoftSoftCollisionAlgorithm__MU__ctor__2754f492213ac116b5335fe957726bc1";

/// \dfgPresetOmit
btSoftSoftCollisionAlgorithm(
    btCollisionAlgorithmConstructionInfo ci
    ) {
    this.__ctor(
        ci
        );
}

btSoftSoftCollisionAlgorithm.cxx_delete() = "Bullet2__btSoftSoftCollisionAlgorithm__MU__delete__42c6625bdd0c315fcaaa846d467631e8";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btSoftSoftCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btSoftSoftCollisionAlgorithm__MU__meth_calculateTimeOfImpact__2e135301291519bbe23dcdeda1221b24";

Float32
btSoftSoftCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm] LIB[btSoftSoftCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftSoftCollisionAlgorithm.=(
    btSoftSoftCollisionAlgorithm that
    ) = "Bullet2__btSoftSoftCollisionAlgorithm__MU__simple_ass_op__fb1948cfe1a33b49ca9d784c2e949552";


/// \dfgPresetOmit
/// \internal
btSoftSoftCollisionAlgorithm.appendDesc(io String string) {
  string += "btSoftSoftCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftSoftCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc] LIB[btSoftSoftCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc] LIB[btSoftSoftCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc] LIB[btSoftSoftCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftSoftCollisionAlgorithm_CreateFunc() = "Bullet2__btSoftSoftCollisionAlgorithm_CreateFunc__MU__empty_ctor__04e9f0f5c71594ac2104ecf09f689948";

/// \dfgPresetOmit
btSoftSoftCollisionAlgorithm_CreateFunc(
    btSoftSoftCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSoftSoftCollisionAlgorithm_CreateFunc__MU__copy_ctor__d5b81d0dad31d01f526dbad0def8b4a9";

btSoftSoftCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btSoftSoftCollisionAlgorithm_CreateFunc__MU__delete__e3d17664da2d8521be5aad27cc5228c5";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc] LIB[btSoftSoftCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc] LIB[btSoftSoftCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftSoftCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftSoftCollisionAlgorithm_CreateFunc] LIB[btSoftSoftCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftSoftCollisionAlgorithm_CreateFunc.=(
    btSoftSoftCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSoftSoftCollisionAlgorithm_CreateFunc__MU__simple_ass_op__afbd8d9f4b0c72006152583039395f2b";


/// \dfgPresetOmit
/// \internal
btSoftSoftCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btSoftSoftCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btTriIndex() = "Bullet2__btTriIndex__MU__empty_ctor__cb191f18a32ffbf4c04900f83b6d41ca";

/// \dfgPresetOmit
btTriIndex(
    btTriIndex that
    ) = "Bullet2__btTriIndex__MU__copy_ctor__388f6b7459a3775a6d2a23e2a04fe501";

/// \dfgPresetOmit
/// \internal
btTriIndex.__ctor(
    SInt32 partId,
    SInt32 triangleIndex,
    btCollisionShape shape
    ) = "Bullet2__btTriIndex__MU__ctor__b6ea1a2abbdcc5a7439da0287ffb30e0";

/// \dfgPresetOmit
btTriIndex(
    SInt32 partId,
    SInt32 triangleIndex,
    btCollisionShape shape
    ) {
    this.__ctor(
        partId,
        triangleIndex,
        shape
        );
}

btTriIndex.cxx_delete() = "Bullet2__btTriIndex__MU__delete__c3b94681c10e285ccfed15673ec937d4";

//////////////////////////////////////////////////////////////////////////////
// KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
btTriIndex.cxx_getTriangleIndex?(
    )
 = "Bullet2__btTriIndex__CO__meth_getTriangleIndex__90c0edb2a03e76a6d36d35ce9072ea18";

/// \dfgPresetOmit
/// \internal
SInt32
btTriIndex.cxx_getPartId?(
    )
 = "Bullet2__btTriIndex__CO__meth_getPartId__05a22f5c0a96628282c50fd11dc74ff4";

/// \dfgPresetOmit
/// \internal
SInt32
btTriIndex.cxx_getUid?(
    )
 = "Bullet2__btTriIndex__CO__meth_getUid__571f3b307b5fa5d1c2f54ae82466cb1c";

SInt32
btTriIndex.getTriangleIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getTriangleIndex(
        );
    
    return __res;
}

SInt32
btTriIndex.getPartId?(
    )
{   
    SInt32 __res = 
    this.cxx_getPartId(
        );
    
    return __res;
}

SInt32
btTriIndex.getUid?(
    )
{   
    SInt32 __res = 
    this.cxx_getUid(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btTriIndex] EDK[Fabric_EDK_KL_btTriIndex] LIB[btTriIndex *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btTriIndex.=(
    btTriIndex that
    ) = "Bullet2__btTriIndex__MU__simple_ass_op__21eb937091e1da23843dfdfac91384de";


/// \dfgPresetOmit
/// \internal
btTriIndex.appendDesc(io String string) {
  string += "btTriIndex:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBodyTriangleCallback() = "Bullet2__btSoftBodyTriangleCallback__MU__empty_ctor__36311adbcd81d70afeec87bbda60ed0e";

/// \dfgPresetOmit
btSoftBodyTriangleCallback(
    btSoftBodyTriangleCallback that
    ) = "Bullet2__btSoftBodyTriangleCallback__MU__copy_ctor__2ad656302d49f85e5006e7624ff8f6a5";

btSoftBodyTriangleCallback.cxx_delete() = "Bullet2__btSoftBodyTriangleCallback__MU__delete__bc85ec0bd2ab32a9c483197f86d98dc7";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftBodyTriangleCallback.cxx_processTriangle!(
    CxxbtVector3Ptr triangle,
    SInt32 partId,
    SInt32 triangleIndex
    )
 = "Bullet2__btSoftBodyTriangleCallback__MU__meth_processTriangle__03a4e8b22840384fc0b8fcb0f7d96426";

/// \dfgPresetOmit
/// \internal

btSoftBodyTriangleCallback.cxx_clearCache!(
    )
 = "Bullet2__btSoftBodyTriangleCallback__MU__meth_clearCache__9dfffddb94cc3191c693d30001b1d041";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSoftBodyTriangleCallback.cxx_getAabbMin?(
    )
 = "Bullet2__btSoftBodyTriangleCallback__CO__meth_getAabbMin__d073b74550478be8c463f37c5be79141";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btSoftBodyTriangleCallback.cxx_getAabbMax?(
    )
 = "Bullet2__btSoftBodyTriangleCallback__CO__meth_getAabbMax__4de537b0d554ac2d8af9b1ad691f61af";

btVector3
btSoftBodyTriangleCallback.getAabbMax?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAabbMax(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btSoftBodyTriangleCallback.processTriangle!(
    io
    btVector3
    triangle
    
    ,
    in
    SInt32
    partId
    
    ,
    in
    SInt32
    triangleIndex
    
    
    )
{   
    
    CxxbtVector3Ptr triangle__cxx = Make_CxxbtVector3Ptr(triangle);
    
    
    
    this.cxx_processTriangle(
        triangle__cxx,
        partId,
        triangleIndex
        );
    
    
    
    
    
}


btSoftBodyTriangleCallback.clearCache!(
    )
{   
    
    this.cxx_clearCache(
        );
    
    
}

btVector3
btSoftBodyTriangleCallback.getAabbMin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAabbMin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyTriangleCallback] EDK[Fabric_EDK_KL_btSoftBodyTriangleCallback] LIB[btSoftBodyTriangleCallback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBodyTriangleCallback.=(
    btSoftBodyTriangleCallback that
    ) = "Bullet2__btSoftBodyTriangleCallback__MU__simple_ass_op__53e00f0dee1b84f978a77230384c638b";


/// \dfgPresetOmit
/// \internal
btSoftBodyTriangleCallback.appendDesc(io String string) {
  string += "btSoftBodyTriangleCallback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBodyConcaveCollisionAlgorithm() = "Bullet2__btSoftBodyConcaveCollisionAlgorithm__MU__empty_ctor__cf7826294325ee39c092d94f68c7a3bb";

/// \dfgPresetOmit
btSoftBodyConcaveCollisionAlgorithm(
    btSoftBodyConcaveCollisionAlgorithm that
    ) = "Bullet2__btSoftBodyConcaveCollisionAlgorithm__MU__copy_ctor__158403c018b143ae7afd76b1f2e68210";

btSoftBodyConcaveCollisionAlgorithm.cxx_delete() = "Bullet2__btSoftBodyConcaveCollisionAlgorithm__MU__delete__868a6441cb3d9080eaabb2205450e19f";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btSoftBodyConcaveCollisionAlgorithm.cxx_calculateTimeOfImpact!(
    btCollisionObject body0,
    btCollisionObject body1,
    CxxbtDispatcherInfoConstRef dispatchInfo,
    btManifoldResult resultOut
    )
 = "Bullet2__btSoftBodyConcaveCollisionAlgorithm__MU__meth_calculateTimeOfImpact__26e4372124449a33ef86cb6280fc8997";

/// \dfgPresetOmit
/// \internal

btSoftBodyConcaveCollisionAlgorithm.cxx_clearCache!(
    )
 = "Bullet2__btSoftBodyConcaveCollisionAlgorithm__MU__meth_clearCache__aa3d93c068b6bc797bb9c1adf8434386";

Float32
btSoftBodyConcaveCollisionAlgorithm.calculateTimeOfImpact!(
    in
    btCollisionObject
    body0
    
    ,
    in
    btCollisionObject
    body1
    
    ,
    in
    btDispatcherInfo
    dispatchInfo
    
    ,
    in
    btManifoldResult
    resultOut
    
    
    )
{   
    
    
    
    CxxbtDispatcherInfoConstRef dispatchInfo__cxx = Make_CxxbtDispatcherInfoConstRef(dispatchInfo);
    
    Float32 __res = 
    this.cxx_calculateTimeOfImpact(
        body0,
        body1,
        dispatchInfo__cxx,
        resultOut
        );
    
    
    
    
    
    return __res;
}


btSoftBodyConcaveCollisionAlgorithm.clearCache!(
    )
{   
    
    this.cxx_clearCache(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm] LIB[btSoftBodyConcaveCollisionAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBodyConcaveCollisionAlgorithm.=(
    btSoftBodyConcaveCollisionAlgorithm that
    ) = "Bullet2__btSoftBodyConcaveCollisionAlgorithm__MU__simple_ass_op__25685d38a628e369e09e6aadd727fa8c";


/// \dfgPresetOmit
/// \internal
btSoftBodyConcaveCollisionAlgorithm.appendDesc(io String string) {
  string += "btSoftBodyConcaveCollisionAlgorithm:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::CreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::CreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::CreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBodyConcaveCollisionAlgorithm_CreateFunc() = "Bullet2__btSoftBodyConcaveCollisionAlgorithm_CreateFunc__MU__empty_ctor__b937686803f2b9dfa23676ec7af4b5bc";

/// \dfgPresetOmit
btSoftBodyConcaveCollisionAlgorithm_CreateFunc(
    btSoftBodyConcaveCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSoftBodyConcaveCollisionAlgorithm_CreateFunc__MU__copy_ctor__0d99837097847ebf7a9d510954c9faf5";

btSoftBodyConcaveCollisionAlgorithm_CreateFunc.cxx_delete() = "Bullet2__btSoftBodyConcaveCollisionAlgorithm_CreateFunc__MU__delete__8d82ad91d3f184e367978f6ba88bc757";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::CreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::CreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_CreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_CreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::CreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBodyConcaveCollisionAlgorithm_CreateFunc.=(
    btSoftBodyConcaveCollisionAlgorithm_CreateFunc that
    ) = "Bullet2__btSoftBodyConcaveCollisionAlgorithm_CreateFunc__MU__simple_ass_op__c22034d1ec09a4efe52591916320bad1";


/// \dfgPresetOmit
/// \internal
btSoftBodyConcaveCollisionAlgorithm_CreateFunc.appendDesc(io String string) {
  string += "btSoftBodyConcaveCollisionAlgorithm_CreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc() = "Bullet2__btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc__MU__empty_ctor__9fdef871a596f36fe93380133e80e5b6";

/// \dfgPresetOmit
btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc(
    btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc that
    ) = "Bullet2__btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc__MU__copy_ctor__e67fb161b6f3e0ebd0e15430ce47f3c8";

btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc.cxx_delete() = "Bullet2__btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc__MU__delete__93f95023a89d2d3fbc6588ceb4087a79";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] EDK[Fabric_EDK_KL_btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc] LIB[btSoftBodyConcaveCollisionAlgorithm::SwappedCreateFunc *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc.=(
    btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc that
    ) = "Bullet2__btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc__MU__simple_ass_op__e96a6ca8a34e636ecb88ece2b0613f6d";


/// \dfgPresetOmit
/// \internal
btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc.appendDesc(io String string) {
  string += "btSoftBodyConcaveCollisionAlgorithm_SwappedCreateFunc:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftBodyRigidBodyCollisionConfiguration() = "Bullet2__btSoftBodyRigidBodyCollisionConfiguration__MU__empty_ctor__0bb2ffb35fb3f82bd74eaf54c6e2eff6";

/// \dfgPresetOmit
btSoftBodyRigidBodyCollisionConfiguration(
    btSoftBodyRigidBodyCollisionConfiguration that
    ) = "Bullet2__btSoftBodyRigidBodyCollisionConfiguration__MU__copy_ctor__7fc872bafe7e1cb1bbf51f5917a708e7";

/// \dfgPresetOmit
/// \internal
btSoftBodyRigidBodyCollisionConfiguration.__ctor(
    ) = "Bullet2__btSoftBodyRigidBodyCollisionConfiguration__MU__ctor__6676f0a00b4bfe24a3a4279b850b3bcc";

/// \dfgPresetOmit
btSoftBodyRigidBodyCollisionConfiguration(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodyRigidBodyCollisionConfiguration.__ctor(
    btDefaultCollisionConstructionInfo constructionInfo
    ) = "Bullet2__btSoftBodyRigidBodyCollisionConfiguration__MU__ctor__acfe26cb730b3c2b99d7aa82b7a59c17";

/// \dfgPresetOmit
btSoftBodyRigidBodyCollisionConfiguration(
    btDefaultCollisionConstructionInfo constructionInfo
    ) {
    this.__ctor(
        constructionInfo
        );
}

btSoftBodyRigidBodyCollisionConfiguration.cxx_delete() = "Bullet2__btSoftBodyRigidBodyCollisionConfiguration__MU__delete__677c0f86d22950b0f713842adf7a179c";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Methods
//////////////////////////////////////////////////////////////////////////////

///creation of soft-soft and soft-rigid, and otherwise fallback to base class implementation
/// \dfgPresetOmit
/// \internal
btCollisionAlgorithmCreateFunc
btSoftBodyRigidBodyCollisionConfiguration.cxx_getCollisionAlgorithmCreateFunc!(
    SInt32 proxyType0,
    SInt32 proxyType1
    )
 = "Bullet2__btSoftBodyRigidBodyCollisionConfiguration__MU__meth_getCollisionAlgorithmCreateFunc__bf3a5a0b58f2ac49325e9eff366a313b";

///creation of soft-soft and soft-rigid, and otherwise fallback to base class implementation
btCollisionAlgorithmCreateFunc
btSoftBodyRigidBodyCollisionConfiguration.getCollisionAlgorithmCreateFunc!(
    in
    SInt32
    proxyType0
    
    ,
    in
    SInt32
    proxyType1
    
    
    )
{   
    
    
    btCollisionAlgorithmCreateFunc __res = 
    this.cxx_getCollisionAlgorithmCreateFunc(
        proxyType0,
        proxyType1
        );
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftBodyRigidBodyCollisionConfiguration] EDK[Fabric_EDK_KL_btSoftBodyRigidBodyCollisionConfiguration] LIB[btSoftBodyRigidBodyCollisionConfiguration *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftBodyRigidBodyCollisionConfiguration.=(
    btSoftBodyRigidBodyCollisionConfiguration that
    ) = "Bullet2__btSoftBodyRigidBodyCollisionConfiguration__MU__simple_ass_op__6e4ce9e1ece2141955b2586b827ec086";


/// \dfgPresetOmit
/// \internal
btSoftBodyRigidBodyCollisionConfiguration.appendDesc(io String string) {
  string += "btSoftBodyRigidBodyCollisionConfiguration:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftRigidDynamicsWorld() = "Bullet2__btSoftRigidDynamicsWorld__MU__empty_ctor__fd9fa541ebae2fd3ff283cedabdc4d36";

/// \dfgPresetOmit
btSoftRigidDynamicsWorld(
    btSoftRigidDynamicsWorld that
    ) = "Bullet2__btSoftRigidDynamicsWorld__MU__copy_ctor__0517e491470fb9ae6787f19579da8b2c";

/// \dfgPresetOmit
/// \internal
btSoftRigidDynamicsWorld.__ctor(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) = "Bullet2__btSoftRigidDynamicsWorld__MU__ctor__113263dfddaa955215f8bb8c79039cfa";

/// \dfgPresetOmit
btSoftRigidDynamicsWorld(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) {
    this.__ctor(
        dispatcher,
        pairCache,
        constraintSolver,
        collisionConfiguration
        );
}

/// \dfgPresetOmit
/// \internal
btSoftRigidDynamicsWorld.__ctor(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration,
    btSoftBodySolver softBodySolver
    ) = "Bullet2__btSoftRigidDynamicsWorld__MU__ctor__c4aca3a421127e45581243dc24d42e7b";

/// \dfgPresetOmit
btSoftRigidDynamicsWorld(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration,
    btSoftBodySolver softBodySolver
    ) {
    this.__ctor(
        dispatcher,
        pairCache,
        constraintSolver,
        collisionConfiguration,
        softBodySolver
        );
}

btSoftRigidDynamicsWorld.cxx_delete() = "Bullet2__btSoftRigidDynamicsWorld__MU__delete__3905fe19c83c0f01d29bce6cc1cb589a";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld.cxx_debugDrawWorld!(
    )
 = "Bullet2__btSoftRigidDynamicsWorld__MU__meth_debugDrawWorld__8a29a29ffae02a7c8bc9d904b66d0b8c";

/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld.cxx_addSoftBody!(
    btSoftBody body
    )
 = "Bullet2__btSoftRigidDynamicsWorld__MU__meth_addSoftBody__db366bb1061119e1cb02e6d9874130ca";

/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld.cxx_addSoftBody!(
    btSoftBody body,
    SInt32 collisionFilterGroup
    )
 = "Bullet2__btSoftRigidDynamicsWorld__MU__meth_addSoftBody__7fe07d7eb090e1810a8aa7872b1b550a";

/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld.cxx_addSoftBody!(
    btSoftBody body,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    )
 = "Bullet2__btSoftRigidDynamicsWorld__MU__meth_addSoftBody__cf24474ae52a5771a136c932fc56eb3a";

/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld.cxx_removeSoftBody!(
    btSoftBody body
    )
 = "Bullet2__btSoftRigidDynamicsWorld__MU__meth_removeSoftBody__21d1f0a79b44611cba930f06f425a0b8";

///removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btDiscreteDynamicsWorld::removeCollisionObject
/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld.cxx_removeCollisionObject!(
    btCollisionObject collisionObject
    )
 = "Bullet2__btSoftRigidDynamicsWorld__MU__meth_removeCollisionObject__46ad365a8e1b7683d3fe069864a28cd0";

/// \dfgPresetOmit
/// \internal
SInt32
btSoftRigidDynamicsWorld.cxx_getDrawFlags?(
    )
 = "Bullet2__btSoftRigidDynamicsWorld__CO__meth_getDrawFlags__04fff3fea943fe03b0f26be5a3f0c11b";

/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld.cxx_setDrawFlags!(
    SInt32 f
    )
 = "Bullet2__btSoftRigidDynamicsWorld__MU__meth_setDrawFlags__aaccccc6cf2e5f11c7892a7603b535bf";

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
btSoftRigidDynamicsWorld.cxx_getWorldInfo!(
    )
 = "Bullet2__btSoftRigidDynamicsWorld__MU__meth_getWorldInfo__88c96ca741046b0480c59b8bd31e8c24";

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
btSoftRigidDynamicsWorld.cxx_getWorldInfo?(
    )
 = "Bullet2__btSoftRigidDynamicsWorld__CO__meth_getWorldInfo__b30807800def67702b4b4f26da479929";

/// \dfgPresetOmit
/// \internal
btDynamicsWorldType
btSoftRigidDynamicsWorld.cxx_getWorldType?(
    )
 = "Bullet2__btSoftRigidDynamicsWorld__CO__meth_getWorldType__3e8879febeab96e61a5e0a3b25dd4f5a";

/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld.cxx_rayTest?(
    CxxbtVector3ConstRef rayFromWorld,
    CxxbtVector3ConstRef rayToWorld,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btSoftRigidDynamicsWorld__CO__meth_rayTest__db46cf389901287ddb5bd1eae2e89ded";

/// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
/// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
/// This allows more customization.
/// \dfgPresetOmit
/// \internal

btSoftRigidDynamicsWorld_CxxrayTestSingle(
    CxxbtTransformConstRef rayFromTrans,
    CxxbtTransformConstRef rayToTrans,
    btCollisionObject collisionObject,
    btCollisionShape collisionShape,
    CxxbtTransformConstRef colObjWorldTransform,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btSoftRigidDynamicsWorld__ST__meth_rayTestSingle__b944aaf97455aa2654dd83fa34e60576";

SInt32
btSoftRigidDynamicsWorld.getDrawFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getDrawFlags(
        );
    
    return __res;
}

btDynamicsWorldType
btSoftRigidDynamicsWorld.getWorldType?(
    )
{   
    btDynamicsWorldType __res = 
    this.cxx_getWorldType(
        );
    
    return __res;
}

btSoftBodyWorldInfo
btSoftRigidDynamicsWorld.getWorldInfo!(
    )
{   
    btSoftBodyWorldInfo __res = 
    this.cxx_getWorldInfo(
        );
    
    return __res;
}


btSoftRigidDynamicsWorld.rayTest?(
    in
    btVector3
    rayFromWorld
    
    ,
    in
    btVector3
    rayToWorld
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFromWorld__cxx = Make_CxxbtVector3ConstRef(rayFromWorld);
    
    CxxbtVector3ConstRef rayToWorld__cxx = Make_CxxbtVector3ConstRef(rayToWorld);
    
    
    this.cxx_rayTest(
        rayFromWorld__cxx,
        rayToWorld__cxx,
        resultCallback
        );
    
    
    
    
    
}


btSoftRigidDynamicsWorld.addSoftBody!(
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    this.cxx_addSoftBody(
        body
        );
    
    
    
}


btSoftRigidDynamicsWorld.setDrawFlags!(
    in
    SInt32
    f
    
    
    )
{   
    
    
    this.cxx_setDrawFlags(
        f
        );
    
    
    
}


btSoftRigidDynamicsWorld.addSoftBody!(
    in
    btSoftBody
    body
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    
    )
{   
    
    
    
    
    this.cxx_addSoftBody(
        body,
        collisionFilterGroup,
        collisionFilterMask
        );
    
    
    
    
    
}


btSoftRigidDynamicsWorld.addSoftBody!(
    in
    btSoftBody
    body
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    
    )
{   
    
    
    
    this.cxx_addSoftBody(
        body,
        collisionFilterGroup
        );
    
    
    
    
}


btSoftRigidDynamicsWorld.debugDrawWorld!(
    )
{   
    
    this.cxx_debugDrawWorld(
        );
    
    
}

///removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btDiscreteDynamicsWorld::removeCollisionObject

btSoftRigidDynamicsWorld.removeCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    
    )
{   
    
    
    this.cxx_removeCollisionObject(
        collisionObject
        );
    
    
    
}

/// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
/// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
/// This allows more customization.

btSoftRigidDynamicsWorld_rayTestSingle(
    in
    btTransform
    rayFromTrans
    
    ,
    in
    btTransform
    rayToTrans
    
    ,
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    btCollisionShape
    collisionShape
    
    ,
    in
    btTransform
    colObjWorldTransform
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtTransformConstRef rayFromTrans__cxx = Make_CxxbtTransformConstRef(rayFromTrans);
    
    CxxbtTransformConstRef rayToTrans__cxx = Make_CxxbtTransformConstRef(rayToTrans);
    
    
    
    CxxbtTransformConstRef colObjWorldTransform__cxx = Make_CxxbtTransformConstRef(colObjWorldTransform);
    
    
    btSoftRigidDynamicsWorld_CxxrayTestSingle(
        rayFromTrans__cxx,
        rayToTrans__cxx,
        collisionObject,
        collisionShape,
        colObjWorldTransform__cxx,
        resultCallback
        );
    
    
    
    
    
    
    
    
}


btSoftRigidDynamicsWorld.removeSoftBody!(
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    this.cxx_removeSoftBody(
        body
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftRigidDynamicsWorld] EDK[Fabric_EDK_KL_btSoftRigidDynamicsWorld] LIB[btSoftRigidDynamicsWorld *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftRigidDynamicsWorld.=(
    btSoftRigidDynamicsWorld that
    ) = "Bullet2__btSoftRigidDynamicsWorld__MU__simple_ass_op__33d9f0de00331dd2220d8732750e30ac";


/// \dfgPresetOmit
/// \internal
btSoftRigidDynamicsWorld.appendDesc(io String string) {
  string += "btSoftRigidDynamicsWorld:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBody() = "Bullet2__btMultiBody__MU__empty_ctor__b59dc2057d9011c1cd0b292477ccf00b";

/// \dfgPresetOmit
btMultiBody(
    btMultiBody that
    ) = "Bullet2__btMultiBody__MU__copy_ctor__d1cd3da291b766be5edcdf6ac51961f5";

/// \dfgPresetOmit
/// \internal
btMultiBody.__ctor(
    SInt32 n_links,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    Boolean fixedBase,
    Boolean canSleep
    ) = "Bullet2__btMultiBody__MU__ctor__a4b0cdb1a4f8596bb92340b4d2b703dc";

/// \dfgPresetOmit
btMultiBody(
    SInt32 n_links,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    Boolean fixedBase,
    Boolean canSleep
    ) {
    this.__ctor(
        n_links,
        mass,
        inertia,
        fixedBase,
        canSleep
        );
}

/// \dfgPresetOmit
/// \internal
btMultiBody.__ctor(
    SInt32 n_links,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    Boolean fixedBase,
    Boolean canSleep,
    Boolean deprecatedMultiDof
    ) = "Bullet2__btMultiBody__MU__ctor__3bfacec26fce71aa27798336394b6020";

/// \dfgPresetOmit
btMultiBody(
    SInt32 n_links,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    Boolean fixedBase,
    Boolean canSleep,
    Boolean deprecatedMultiDof
    ) {
    this.__ctor(
        n_links,
        mass,
        inertia,
        fixedBase,
        canSleep,
        deprecatedMultiDof
        );
}

btMultiBody(
    in
    SInt32
    n_links
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    Boolean
    fixedBase
    
    ,
    in
    Boolean
    canSleep
    
    ,
    in
    Boolean
    deprecatedMultiDof
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    
    this.__ctor(
        n_links,
        mass,
        inertia__cxx,
        fixedBase,
        canSleep,
        deprecatedMultiDof
        );
    
    
    
    
    
    
}

btMultiBody(
    in
    SInt32
    n_links
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    Boolean
    fixedBase
    
    ,
    in
    Boolean
    canSleep
    
    
    ) {
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    this.__ctor(
        n_links,
        mass,
        inertia__cxx,
        fixedBase,
        canSleep
        );
    
    
    
    
    
}

btMultiBody.cxx_delete() = "Bullet2__btMultiBody__MU__delete__087f30744edf6852758747c57d36c961";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupFixed!(
    SInt32 linkIndex,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parent,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef parentComToThisPivotOffset,
    CxxbtVector3ConstRef thisPivotToThisComOffset
    )
 = "Bullet2__btMultiBody__MU__meth_setupFixed__4443df3c7a9ef9ed4ea9ab1e45929a3c";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupFixed!(
    SInt32 linkIndex,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parent,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef parentComToThisPivotOffset,
    CxxbtVector3ConstRef thisPivotToThisComOffset,
    Boolean deprecatedDisableParentCollision
    )
 = "Bullet2__btMultiBody__MU__meth_setupFixed__0b1277dd276ec70db16284f71813bd91";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupPrismatic!(
    SInt32 i,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parent,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef jointAxis,
    CxxbtVector3ConstRef parentComToThisPivotOffset,
    CxxbtVector3ConstRef thisPivotToThisComOffset,
    Boolean disableParentCollision
    )
 = "Bullet2__btMultiBody__MU__meth_setupPrismatic__d9b5de7dc0cd56fac2db29916ddba5a4";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupRevolute!(
    SInt32 linkIndex,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parentIndex,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef jointAxis,
    CxxbtVector3ConstRef parentComToThisPivotOffset,
    CxxbtVector3ConstRef thisPivotToThisComOffset
    )
 = "Bullet2__btMultiBody__MU__meth_setupRevolute__d6734e1c2675a5900024736218d013e1";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupRevolute!(
    SInt32 linkIndex,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parentIndex,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef jointAxis,
    CxxbtVector3ConstRef parentComToThisPivotOffset,
    CxxbtVector3ConstRef thisPivotToThisComOffset,
    Boolean disableParentCollision
    )
 = "Bullet2__btMultiBody__MU__meth_setupRevolute__a6ee601e2e34c61b9e74a8553c346743";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupSpherical!(
    SInt32 linkIndex,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parent,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef parentComToThisPivotOffset,
    CxxbtVector3ConstRef thisPivotToThisComOffset
    )
 = "Bullet2__btMultiBody__MU__meth_setupSpherical__9b74c707d5397e36f483ff05f685507c";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupSpherical!(
    SInt32 linkIndex,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parent,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef parentComToThisPivotOffset,
    CxxbtVector3ConstRef thisPivotToThisComOffset,
    Boolean disableParentCollision
    )
 = "Bullet2__btMultiBody__MU__meth_setupSpherical__e851e26578a6100f2e2df1abee342c37";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupPlanar!(
    SInt32 i,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parent,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef rotationAxis,
    CxxbtVector3ConstRef parentComToThisComOffset
    )
 = "Bullet2__btMultiBody__MU__meth_setupPlanar__8990429b20080fad6a4ab10fcdce70f5";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setupPlanar!(
    SInt32 i,
    Float32 mass,
    CxxbtVector3ConstRef inertia,
    SInt32 parent,
    CxxbtQuaternionConstRef rotParentToThis,
    CxxbtVector3ConstRef rotationAxis,
    CxxbtVector3ConstRef parentComToThisComOffset,
    Boolean disableParentCollision
    )
 = "Bullet2__btMultiBody__MU__meth_setupPlanar__a3a21c85f9b861f5905e48cf01fce863";

/// \dfgPresetOmit
/// \internal
btMultibodyLink
btMultiBody.cxx_getLink?(
    SInt32 index
    )
 = "Bullet2__btMultiBody__CO__meth_getLink__19d4912e17b7b2e1df0a7af0592752f3";

/// \dfgPresetOmit
/// \internal
btMultibodyLink
btMultiBody.cxx_getLink!(
    SInt32 index
    )
 = "Bullet2__btMultiBody__MU__meth_getLink__a6a70ea441bc426873c8a41fab38d58a";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setBaseCollider!(
    btMultiBodyLinkCollider collider
    )
 = "Bullet2__btMultiBody__MU__meth_setBaseCollider__8cb4d24944ac8895b1410f73db563fb1";

/// \dfgPresetOmit
/// \internal
btMultiBodyLinkCollider
btMultiBody.cxx_getBaseCollider?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseCollider__fa45fb3ee2442ef56869c06502522635";

/// \dfgPresetOmit
/// \internal
btMultiBodyLinkCollider
btMultiBody.cxx_getBaseCollider!(
    )
 = "Bullet2__btMultiBody__MU__meth_getBaseCollider__e7145841dc1ee362f3edd06e69b70031";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBody.cxx_getParent?(
    SInt32 link_num
    )
 = "Bullet2__btMultiBody__CO__meth_getParent__39f2bd465d53f8ebd746f67f0ec1009f";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBody.cxx_getNumLinks?(
    )
 = "Bullet2__btMultiBody__CO__meth_getNumLinks__4c449cad085ae0ee88ede2743f559f8f";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBody.cxx_getNumDofs?(
    )
 = "Bullet2__btMultiBody__CO__meth_getNumDofs__d36c1bd6469c270200246043e566080f";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBody.cxx_getNumPosVars?(
    )
 = "Bullet2__btMultiBody__CO__meth_getNumPosVars__c6d34e7b8aa94eab1aaab4a644a4b541";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getBaseMass?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseMass__12f6ddbc70afb502e6fcf8d5ed6ae5da";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBody.cxx_getBaseInertia?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseInertia__00e6f717f0ee09c0d5f96d997fe09739";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getLinkMass?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getLinkMass__da91f3ec93e653d82f6d162f0cf8ceaf";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBody.cxx_getLinkInertia?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getLinkInertia__6dea3b34c9764319318d06d4f004b76c";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setBaseMass!(
    Float32 mass
    )
 = "Bullet2__btMultiBody__MU__meth_setBaseMass__3493905c0ed722bc10246f367a897c18";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setBaseInertia!(
    CxxbtVector3ConstRef inertia
    )
 = "Bullet2__btMultiBody__MU__meth_setBaseInertia__eceb973ff283dea895e43c1312246298";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBody.cxx_getBasePos?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBasePos__677f472303af2726d5712d5bab831dc6";

/// \dfgPresetOmit
/// \internal
btVector3
btMultiBody.cxx_getBaseVel?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseVel__575c2de43443e3e8e49b800c9af3a7c2";

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef
btMultiBody.cxx_getWorldToBaseRot?(
    )
 = "Bullet2__btMultiBody__CO__meth_getWorldToBaseRot__a878986b5771657e56c09e8145419baf";

/// \dfgPresetOmit
/// \internal
btVector3
btMultiBody.cxx_getBaseOmega?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseOmega__78934b3ee41c318136cb70af925b0de7";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setBasePos!(
    CxxbtVector3ConstRef pos
    )
 = "Bullet2__btMultiBody__MU__meth_setBasePos__1deb1cd7636551dc61bbd42ddfe5077c";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setBaseWorldTransform!(
    CxxbtTransformConstRef tr
    )
 = "Bullet2__btMultiBody__MU__meth_setBaseWorldTransform__25b5536f54eb9856dcf9de6350c0e6bb";

/// \dfgPresetOmit
/// \internal
btTransform
btMultiBody.cxx_getBaseWorldTransform?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseWorldTransform__307eecfe0107fa305f6fa46efb907d80";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setBaseVel!(
    CxxbtVector3ConstRef vel
    )
 = "Bullet2__btMultiBody__MU__meth_setBaseVel__f9434b9f1d15cec98fdde0b9ab96110d";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setWorldToBaseRot!(
    CxxbtQuaternionConstRef rot
    )
 = "Bullet2__btMultiBody__MU__meth_setWorldToBaseRot__43cbf0f1af85eb47b6b6b429d75a5704";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setBaseOmega!(
    CxxbtVector3ConstRef omega
    )
 = "Bullet2__btMultiBody__MU__meth_setBaseOmega__95f9f45aa84082e3b8c6b6ea61fb615a";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getJointPos?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getJointPos__9d563cf293801ecd1e109bbfda1863a4";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getJointVel?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getJointVel__a6b48c11ea8fd0e9a3b663a68c4a5a4c";

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr
btMultiBody.cxx_getJointVelMultiDof!(
    SInt32 i
    )
 = "Bullet2__btMultiBody__MU__meth_getJointVelMultiDof__28f853af8ce9c35ef39bb8f3aadcaef6";

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr
btMultiBody.cxx_getJointPosMultiDof!(
    SInt32 i
    )
 = "Bullet2__btMultiBody__MU__meth_getJointPosMultiDof__7f761c7d41323c32ee4251f8b53ad4c2";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr
btMultiBody.cxx_getJointVelMultiDof?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getJointVelMultiDof__75858437d6ace05e4c8e1d449d25cae6";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr
btMultiBody.cxx_getJointPosMultiDof?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getJointPosMultiDof__bf19062aac8991b2aef18a5cdbc8c741";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setJointPos!(
    SInt32 i,
    Float32 q
    )
 = "Bullet2__btMultiBody__MU__meth_setJointPos__25c14544db12f1fffec04d1880ee7e3f";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setJointVel!(
    SInt32 i,
    Float32 qdot
    )
 = "Bullet2__btMultiBody__MU__meth_setJointVel__73cb0bf3e56d27cd04fa5bb210308baa";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setJointPosMultiDof!(
    SInt32 i,
    CxxFloat32Ptr q
    )
 = "Bullet2__btMultiBody__MU__meth_setJointPosMultiDof__f74d0f4e54f119a2a4906976f7e6919b";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setJointVelMultiDof!(
    SInt32 i,
    CxxFloat32Ptr qdot
    )
 = "Bullet2__btMultiBody__MU__meth_setJointVelMultiDof__d936306af17691ce66d79aca3cd682ad";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr
btMultiBody.cxx_getVelocityVector?(
    )
 = "Bullet2__btMultiBody__CO__meth_getVelocityVector__ae03ce06ce9b346d79b07ff2f37c2324";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBody.cxx_getRVector?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getRVector__64435b0c5af610ac2ba4e3d83eecf14b";

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef
btMultiBody.cxx_getParentToLocalRot?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getParentToLocalRot__d8dfe938b0ee39174f66c0dd2e749de2";

/// \dfgPresetOmit
/// \internal
btVector3
btMultiBody.cxx_localPosToWorld?(
    SInt32 i,
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btMultiBody__CO__meth_localPosToWorld__4558bee6a87bbea8dadee7ccc425f3ce";

/// \dfgPresetOmit
/// \internal
btVector3
btMultiBody.cxx_localDirToWorld?(
    SInt32 i,
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btMultiBody__CO__meth_localDirToWorld__5d3fc370af8377eb88e9bef427e1d4b3";

/// \dfgPresetOmit
/// \internal
btVector3
btMultiBody.cxx_worldPosToLocal?(
    SInt32 i,
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btMultiBody__CO__meth_worldPosToLocal__1e8578e08a504deac36dd9c9b4486d39";

/// \dfgPresetOmit
/// \internal
btVector3
btMultiBody.cxx_worldDirToLocal?(
    SInt32 i,
    CxxbtVector3ConstRef vec
    )
 = "Bullet2__btMultiBody__CO__meth_worldDirToLocal__398ea1288ddc30d21a7c4adf6224def6";

/// \dfgPresetOmit
/// \internal
btMatrix3x3
btMultiBody.cxx_localFrameToWorld?(
    SInt32 i,
    CxxbtMatrix3x3ConstRef mat
    )
 = "Bullet2__btMultiBody__CO__meth_localFrameToWorld__b561649fcaa389de177ba856aea7e66f";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getKineticEnergy?(
    )
 = "Bullet2__btMultiBody__CO__meth_getKineticEnergy__e1ed653b7ebf3c521c73db312777906b";

/// \dfgPresetOmit
/// \internal
btVector3
btMultiBody.cxx_getAngularMomentum?(
    )
 = "Bullet2__btMultiBody__CO__meth_getAngularMomentum__44a09b145a362b996a09b90d22f3609c";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_clearForcesAndTorques!(
    )
 = "Bullet2__btMultiBody__MU__meth_clearForcesAndTorques__f027aa47e5616586cc1685aa900b0dce";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_clearConstraintForces!(
    )
 = "Bullet2__btMultiBody__MU__meth_clearConstraintForces__bcad9424981acd96af5f9da2d56c5291";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_clearVelocities!(
    )
 = "Bullet2__btMultiBody__MU__meth_clearVelocities__f04ffdc88c8d568e51c1e57fb13ee87c";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addBaseForce!(
    CxxbtVector3ConstRef f
    )
 = "Bullet2__btMultiBody__MU__meth_addBaseForce__6ad97ebf18a8720d71fed14b6927c5d7";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addBaseTorque!(
    CxxbtVector3ConstRef t
    )
 = "Bullet2__btMultiBody__MU__meth_addBaseTorque__283d639b66804eb380b8f06af71593a5";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addLinkForce!(
    SInt32 i,
    CxxbtVector3ConstRef f
    )
 = "Bullet2__btMultiBody__MU__meth_addLinkForce__89d213be6e1772be903c1058055c4653";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addLinkTorque!(
    SInt32 i,
    CxxbtVector3ConstRef t
    )
 = "Bullet2__btMultiBody__MU__meth_addLinkTorque__68da0ebca6359e04ecb51584a9e3708c";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addBaseConstraintForce!(
    CxxbtVector3ConstRef f
    )
 = "Bullet2__btMultiBody__MU__meth_addBaseConstraintForce__1fb067623eb26936f0bca8e143702f4d";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addBaseConstraintTorque!(
    CxxbtVector3ConstRef t
    )
 = "Bullet2__btMultiBody__MU__meth_addBaseConstraintTorque__863fa86a319c6961a884ea8f41174e51";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addLinkConstraintForce!(
    SInt32 i,
    CxxbtVector3ConstRef f
    )
 = "Bullet2__btMultiBody__MU__meth_addLinkConstraintForce__99d9bceb29d0659568300668207c8bd9";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addLinkConstraintTorque!(
    SInt32 i,
    CxxbtVector3ConstRef t
    )
 = "Bullet2__btMultiBody__MU__meth_addLinkConstraintTorque__6af01c3433406068097496d01cc6c2df";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addJointTorque!(
    SInt32 i,
    Float32 Q
    )
 = "Bullet2__btMultiBody__MU__meth_addJointTorque__4dafee7e47c279a9feb89af34b9e9cfe";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addJointTorqueMultiDof!(
    SInt32 i,
    SInt32 dof,
    Float32 Q
    )
 = "Bullet2__btMultiBody__MU__meth_addJointTorqueMultiDof__bc19a5fa50307e3802b0328cd9d5c15b";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_addJointTorqueMultiDof!(
    SInt32 i,
    CxxFloat32ConstPtr Q
    )
 = "Bullet2__btMultiBody__MU__meth_addJointTorqueMultiDof__d9ec0485ed04bbd9ca4d8741e6e780e0";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBody.cxx_getBaseForce?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseForce__9b2cd24f28ff5559c648da8b6a488a3b";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBody.cxx_getBaseTorque?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseTorque__cbb20d4de70368269a58d34bf7fd516d";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBody.cxx_getLinkForce?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getLinkForce__1045ac4a831e952037a899fffb2b7888";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBody.cxx_getLinkTorque?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getLinkTorque__be37537532bd5d3192f35fa8cd3fbf46";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getJointTorque?(
    SInt32 i
    )
 = "Bullet2__btMultiBody__CO__meth_getJointTorque__058213432f59a182a0d6007d7ca3ddb7";

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr
btMultiBody.cxx_getJointTorqueMultiDof!(
    SInt32 i
    )
 = "Bullet2__btMultiBody__MU__meth_getJointTorqueMultiDof__dd1f43436f20153f7943c72827a96f4a";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_calcAccelerationDeltasMultiDof?(
    CxxFloat32ConstPtr force,
    CxxFloat32Ptr output,
    CxxbtAlignedObjectArray_Float32Ref scratch_r,
    CxxbtAlignedObjectArray_Vec3Ref scratch_v
    )
 = "Bullet2__btMultiBody__CO__meth_calcAccelerationDeltasMultiDof__f96c309eb7dff471b5f9e91e89a12f2d";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_applyDeltaVeeMultiDof2!(
    CxxFloat32ConstPtr delta_vee,
    Float32 multiplier
    )
 = "Bullet2__btMultiBody__MU__meth_applyDeltaVeeMultiDof2__89a8486ef394fef8f5a3a359db280620";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_processDeltaVeeMultiDof2!(
    )
 = "Bullet2__btMultiBody__MU__meth_processDeltaVeeMultiDof2__0ca1acbe011603f25851127b98a48451";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_applyDeltaVeeMultiDof!(
    CxxFloat32ConstPtr delta_vee,
    Float32 multiplier
    )
 = "Bullet2__btMultiBody__MU__meth_applyDeltaVeeMultiDof__172cd23682af340d81ea1c111cae59d7";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_stepPositionsMultiDof!(
    Float32 dt
    )
 = "Bullet2__btMultiBody__MU__meth_stepPositionsMultiDof__97d5cf0b284239936b8e4f1014687f19";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_stepPositionsMultiDof!(
    Float32 dt,
    CxxFloat32Ptr pq
    )
 = "Bullet2__btMultiBody__MU__meth_stepPositionsMultiDof__237306acb4e0d8bb84f30262356141e7";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_stepPositionsMultiDof!(
    Float32 dt,
    CxxFloat32Ptr pq,
    CxxFloat32Ptr pqd
    )
 = "Bullet2__btMultiBody__MU__meth_stepPositionsMultiDof__4242e3f5f1c6446491f79278c4a7271c";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setCanSleep!(
    Boolean canSleep
    )
 = "Bullet2__btMultiBody__MU__meth_setCanSleep__ac84f4a055653f115c472eea366d1898";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_getCanSleep?(
    )
 = "Bullet2__btMultiBody__CO__meth_getCanSleep__af982ae13150b6854da46a86be6372ee";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_isAwake?(
    )
 = "Bullet2__btMultiBody__CO__meth_isAwake__5f48e4053c89eeadd7a2b02f94a4f442";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_wakeUp!(
    )
 = "Bullet2__btMultiBody__MU__meth_wakeUp__a1509ba266f007ea8b401ecee83f1d29";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_goToSleep!(
    )
 = "Bullet2__btMultiBody__MU__meth_goToSleep__3e8be8a3137b5683961c1aff203deecc";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_checkMotionAndSleepIfRequired!(
    Float32 timestep
    )
 = "Bullet2__btMultiBody__MU__meth_checkMotionAndSleepIfRequired__e2609d88b8f7d978ddf165699ca14d35";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_hasFixedBase?(
    )
 = "Bullet2__btMultiBody__CO__meth_hasFixedBase__ebecd21eea4eb5fcab4087924c86af3a";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBody.cxx_getCompanionId?(
    )
 = "Bullet2__btMultiBody__CO__meth_getCompanionId__3eff2c7df846c8b602aa38a4144b0101";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setCompanionId!(
    SInt32 id
    )
 = "Bullet2__btMultiBody__MU__meth_setCompanionId__fd542cbe3ffa82dc68ac4cb66ef85ecd";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setNumLinks!(
    SInt32 numLinks
    )
 = "Bullet2__btMultiBody__MU__meth_setNumLinks__e603fde5623eaf724afd6db54b0d7103";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getLinearDamping?(
    )
 = "Bullet2__btMultiBody__CO__meth_getLinearDamping__b2ae0cb8f31c1f37422dd02990f96af6";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setLinearDamping!(
    Float32 damp
    )
 = "Bullet2__btMultiBody__MU__meth_setLinearDamping__7f3f15334b77a2885a22adc89685dbb1";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getAngularDamping?(
    )
 = "Bullet2__btMultiBody__CO__meth_getAngularDamping__159273c58a8c224d97b2844b0de6836f";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setAngularDamping!(
    Float32 damp
    )
 = "Bullet2__btMultiBody__MU__meth_setAngularDamping__c4b623e61a524c73a526f38ac91215bb";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_getUseGyroTerm?(
    )
 = "Bullet2__btMultiBody__CO__meth_getUseGyroTerm__261fc30b7ae0d2cf9f6af45b71751351";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setUseGyroTerm!(
    Boolean useGyro
    )
 = "Bullet2__btMultiBody__MU__meth_setUseGyroTerm__859dcf1fc17157627df5c6cfe1e2a8ef";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getMaxCoordinateVelocity?(
    )
 = "Bullet2__btMultiBody__CO__meth_getMaxCoordinateVelocity__813d7b1ff583d26ae025efa2f4c29764";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setMaxCoordinateVelocity!(
    Float32 maxVel
    )
 = "Bullet2__btMultiBody__MU__meth_setMaxCoordinateVelocity__114ea376fb2b0c474822a46c89c51431";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBody.cxx_getMaxAppliedImpulse?(
    )
 = "Bullet2__btMultiBody__CO__meth_getMaxAppliedImpulse__6229bae5a7ab44bc31588353da125894";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setMaxAppliedImpulse!(
    Float32 maxImp
    )
 = "Bullet2__btMultiBody__MU__meth_setMaxAppliedImpulse__4f8ded9dcf43c942c92c5bdafbbfe340";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setHasSelfCollision!(
    Boolean hasSelfCollision
    )
 = "Bullet2__btMultiBody__MU__meth_setHasSelfCollision__5a854ceab66f07f621638ba3b3c11e38";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_hasSelfCollision?(
    )
 = "Bullet2__btMultiBody__CO__meth_hasSelfCollision__c557883770535309c2189264752c761b";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_finalizeMultiDof!(
    )
 = "Bullet2__btMultiBody__MU__meth_finalizeMultiDof__ca3dc55f3ab84000bce45497099dc2cd";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_useRK4Integration!(
    Boolean use
    )
 = "Bullet2__btMultiBody__MU__meth_useRK4Integration__ea0d204b863cafa880db67804b61bb7e";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_isUsingRK4Integration?(
    )
 = "Bullet2__btMultiBody__CO__meth_isUsingRK4Integration__02eedb52661d65047cab43a624594c9d";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_useGlobalVelocities!(
    Boolean use
    )
 = "Bullet2__btMultiBody__MU__meth_useGlobalVelocities__2917334ab7d8bb7e3817916031c1c621";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_isUsingGlobalVelocities?(
    )
 = "Bullet2__btMultiBody__CO__meth_isUsingGlobalVelocities__c8fabc29bdc88522be79da69d8e78ffe";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_isPosUpdated?(
    )
 = "Bullet2__btMultiBody__CO__meth_isPosUpdated__2a331408438e5a0e25c648c62d80a73b";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setPosUpdated!(
    Boolean updated
    )
 = "Bullet2__btMultiBody__MU__meth_setPosUpdated__f06649d3ea6664ffe45a1139c8de4325";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBody.cxx_internalNeedsJointFeedback?(
    )
 = "Bullet2__btMultiBody__CO__meth_internalNeedsJointFeedback__8cb6a4ee75f7109a84672f5325db39d9";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_compTreeLinkVelocities?(
    CxxbtVector3Ptr omega,
    CxxbtVector3Ptr vel
    )
 = "Bullet2__btMultiBody__CO__meth_compTreeLinkVelocities__c2da5f9ceff52faa7d4eb5d6799d8f65";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBody.cxx_calculateSerializeBufferSize?(
    )
 = "Bullet2__btMultiBody__CO__meth_calculateSerializeBufferSize__51a5cbf49c024144a4170e8941299a70";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
btMultiBody.cxx_getBaseName?(
    )
 = "Bullet2__btMultiBody__CO__meth_getBaseName__7d09833a6508edeea3bd476881ae55e3";

///memory of setBaseName needs to be manager by user
/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setBaseName!(
    CxxCharConstPtr name
    )
 = "Bullet2__btMultiBody__MU__meth_setBaseName__fbdc9e333f9c84616fca1d33bc8168c5";

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
btMultiBody.cxx_getUserPointer?(
    )
 = "Bullet2__btMultiBody__CO__meth_getUserPointer__72ce83a52920816d2885065192be4c89";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBody.cxx_getUserIndex?(
    )
 = "Bullet2__btMultiBody__CO__meth_getUserIndex__c32325bd0b5efffaa3e5805283e9aff1";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBody.cxx_getUserIndex2?(
    )
 = "Bullet2__btMultiBody__CO__meth_getUserIndex2__5b7893b0fc63d48682d00d370ef83e15";

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setUserPointer!(
    Data userPointer
    )
 = "Bullet2__btMultiBody__MU__meth_setUserPointer__64af6fe8413509c0ab0bd58b3def60d7";

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setUserIndex!(
    SInt32 index
    )
 = "Bullet2__btMultiBody__MU__meth_setUserIndex__bfd98af87b999c065340c3c9beb8ad55";

/// \dfgPresetOmit
/// \internal

btMultiBody.cxx_setUserIndex2!(
    SInt32 index
    )
 = "Bullet2__btMultiBody__MU__meth_setUserIndex2__e6883c152898ec80b0526ce6f2beb32e";

///users can point to their objects, userPointer is not used by Bullet
Data
btMultiBody.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

Boolean
btMultiBody.getUseGyroTerm?(
    )
{   
    Boolean __res = 
    this.cxx_getUseGyroTerm(
        );
    
    return __res;
}

btVector3
btMultiBody.getBaseForce?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getBaseForce(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btMultiBody.getLinkTorque?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLinkTorque(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btMultiBody.getJointTorque?(
    in
    SInt32
    i
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getJointTorque(
        i
        );
    
    
    return __res;
}


btMultiBody.addLinkTorque!(
    in
    SInt32
    i
    
    ,
    in
    btVector3
    t
    
    
    )
{   
    
    
    CxxbtVector3ConstRef t__cxx = Make_CxxbtVector3ConstRef(t);
    
    this.cxx_addLinkTorque(
        i,
        t__cxx
        );
    
    
    
    
}

btVector3
btMultiBody.localDirToWorld?(
    in
    SInt32
    i
    
    ,
    in
    btVector3
    vec
    
    
    )
{   
    
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localDirToWorld(
        i,
        vec__cxx
        );
    
    
    
    return __res;
}

btQuaternion
btMultiBody.getParentToLocalRot?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtQuaternionConstRef __res_cxx = 
    this.cxx_getParentToLocalRot(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtQuaternionConstRef';
    btQuaternion __res = __res_cxx.cxx_get();
    return __res;
}

String
btMultiBody.getBaseName?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_getBaseName(
        );
    
    return __res;
}


btMultiBody.setBasePos!(
    in
    btVector3
    pos
    
    
    )
{   
    
    CxxbtVector3ConstRef pos__cxx = Make_CxxbtVector3ConstRef(pos);
    
    this.cxx_setBasePos(
        pos__cxx
        );
    
    
    
}


btMultiBody.addLinkConstraintForce!(
    in
    SInt32
    i
    
    ,
    in
    btVector3
    f
    
    
    )
{   
    
    
    CxxbtVector3ConstRef f__cxx = Make_CxxbtVector3ConstRef(f);
    
    this.cxx_addLinkConstraintForce(
        i,
        f__cxx
        );
    
    
    
    
}


btMultiBody.addJointTorqueMultiDof!(
    in
    SInt32
    i
    
    ,
    in
    Float32
    Q
    
    
    )
{   
    
    
    CxxFloat32ConstPtr Q__cxx = Make_CxxFloat32ConstPtr(Q);
    
    this.cxx_addJointTorqueMultiDof(
        i,
        Q__cxx
        );
    
    
    
    
}


btMultiBody.useGlobalVelocities!(
    in
    Boolean
    use
    
    
    )
{   
    
    
    this.cxx_useGlobalVelocities(
        use
        );
    
    
    
}

btMultiBodyLinkCollider
btMultiBody.getBaseCollider?(
    )
{   
    btMultiBodyLinkCollider __res = 
    this.cxx_getBaseCollider(
        );
    
    return __res;
}


btMultiBody.clearForcesAndTorques!(
    )
{   
    
    this.cxx_clearForcesAndTorques(
        );
    
    
}


btMultiBody.setUseGyroTerm!(
    in
    Boolean
    useGyro
    
    
    )
{   
    
    
    this.cxx_setUseGyroTerm(
        useGyro
        );
    
    
    
}

Boolean
btMultiBody.isUsingGlobalVelocities?(
    )
{   
    Boolean __res = 
    this.cxx_isUsingGlobalVelocities(
        );
    
    return __res;
}


btMultiBody.setCanSleep!(
    in
    Boolean
    canSleep
    
    
    )
{   
    
    
    this.cxx_setCanSleep(
        canSleep
        );
    
    
    
}


btMultiBody.calcAccelerationDeltasMultiDof?(
    in
    Float32
    force
    
    ,
    io
    Float32
    output
    
    ,
    io
    btAlignedObjectArray_Float32
    scratch_r
    
    ,
    io
    btAlignedObjectArray_Vec3
    scratch_v
    
    
    )
{   
    
    CxxFloat32ConstPtr force__cxx = Make_CxxFloat32ConstPtr(force);
    
    CxxFloat32Ptr output__cxx = Make_CxxFloat32Ptr(output);
    
    CxxbtAlignedObjectArray_Float32Ref scratch_r__cxx = Make_CxxbtAlignedObjectArray_Float32Ref(scratch_r);
    
    CxxbtAlignedObjectArray_Vec3Ref scratch_v__cxx = Make_CxxbtAlignedObjectArray_Vec3Ref(scratch_v);
    
    this.cxx_calcAccelerationDeltasMultiDof(
        force__cxx,
        output__cxx,
        scratch_r__cxx,
        scratch_v__cxx
        );
    
    
    
    
    
    
}


btMultiBody.setBaseOmega!(
    in
    btVector3
    omega
    
    
    )
{   
    
    CxxbtVector3ConstRef omega__cxx = Make_CxxbtVector3ConstRef(omega);
    
    this.cxx_setBaseOmega(
        omega__cxx
        );
    
    
    
}

btVector3
btMultiBody.getAngularMomentum?(
    )
{   
    btVector3 __res = 
    this.cxx_getAngularMomentum(
        );
    
    return __res;
}

Boolean
btMultiBody.isPosUpdated?(
    )
{   
    Boolean __res = 
    this.cxx_isPosUpdated(
        );
    
    return __res;
}

Boolean
btMultiBody.internalNeedsJointFeedback?(
    )
{   
    Boolean __res = 
    this.cxx_internalNeedsJointFeedback(
        );
    
    return __res;
}


btMultiBody.setWorldToBaseRot!(
    in
    btQuaternion
    rot
    
    
    )
{   
    
    CxxbtQuaternionConstRef rot__cxx = Make_CxxbtQuaternionConstRef(rot);
    
    this.cxx_setWorldToBaseRot(
        rot__cxx
        );
    
    
    
}

SInt32
btMultiBody.getNumLinks?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumLinks(
        );
    
    return __res;
}


btMultiBody.finalizeMultiDof!(
    )
{   
    
    this.cxx_finalizeMultiDof(
        );
    
    
}


btMultiBody.checkMotionAndSleepIfRequired!(
    in
    Float32
    timestep
    
    
    )
{   
    
    
    this.cxx_checkMotionAndSleepIfRequired(
        timestep
        );
    
    
    
}

Float32
btMultiBody.getMaxAppliedImpulse?(
    )
{   
    Float32 __res = 
    this.cxx_getMaxAppliedImpulse(
        );
    
    return __res;
}


btMultiBody.addJointTorque!(
    in
    SInt32
    i
    
    ,
    in
    Float32
    Q
    
    
    )
{   
    
    
    
    this.cxx_addJointTorque(
        i,
        Q
        );
    
    
    
    
}


btMultiBody.setBaseInertia!(
    in
    btVector3
    inertia
    
    
    )
{   
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    this.cxx_setBaseInertia(
        inertia__cxx
        );
    
    
    
}


btMultiBody.setBaseVel!(
    in
    btVector3
    vel
    
    
    )
{   
    
    CxxbtVector3ConstRef vel__cxx = Make_CxxbtVector3ConstRef(vel);
    
    this.cxx_setBaseVel(
        vel__cxx
        );
    
    
    
}


btMultiBody.setLinearDamping!(
    in
    Float32
    damp
    
    
    )
{   
    
    
    this.cxx_setLinearDamping(
        damp
        );
    
    
    
}


btMultiBody.clearConstraintForces!(
    )
{   
    
    this.cxx_clearConstraintForces(
        );
    
    
}

btVector3
btMultiBody.getLinkForce?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLinkForce(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btMultiBody.getLinkInertia?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getLinkInertia(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

Float32
btMultiBody.getVelocityVector?(
    )
{   
    CxxFloat32ConstPtr __res_cxx = 
    this.cxx_getVelocityVector(
        );
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32ConstPtr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btMultiBody.stepPositionsMultiDof!(
    in
    Float32
    dt
    
    ,
    io
    Float32
    pq
    
    
    )
{   
    
    
    CxxFloat32Ptr pq__cxx = Make_CxxFloat32Ptr(pq);
    
    this.cxx_stepPositionsMultiDof(
        dt,
        pq__cxx
        );
    
    
    
    
}


btMultiBody.applyDeltaVeeMultiDof2!(
    in
    Float32
    delta_vee
    
    ,
    in
    Float32
    multiplier
    
    
    )
{   
    
    CxxFloat32ConstPtr delta_vee__cxx = Make_CxxFloat32ConstPtr(delta_vee);
    
    
    this.cxx_applyDeltaVeeMultiDof2(
        delta_vee__cxx,
        multiplier
        );
    
    
    
    
}

SInt32
btMultiBody.getNumPosVars?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumPosVars(
        );
    
    return __res;
}

SInt32
btMultiBody.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

SInt32
btMultiBody.calculateSerializeBufferSize?(
    )
{   
    SInt32 __res = 
    this.cxx_calculateSerializeBufferSize(
        );
    
    return __res;
}

btVector3
btMultiBody.getBaseVel?(
    )
{   
    btVector3 __res = 
    this.cxx_getBaseVel(
        );
    
    return __res;
}

Boolean
btMultiBody.hasFixedBase?(
    )
{   
    Boolean __res = 
    this.cxx_hasFixedBase(
        );
    
    return __res;
}


btMultiBody.setJointPos!(
    in
    SInt32
    i
    
    ,
    in
    Float32
    q
    
    
    )
{   
    
    
    
    this.cxx_setJointPos(
        i,
        q
        );
    
    
    
    
}

Float32
btMultiBody.getJointVelMultiDof!(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxFloat32Ptr __res_cxx = 
    this.cxx_getJointVelMultiDof(
        i
        );
    
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32Ptr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

btVector3
btMultiBody.getBaseInertia?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getBaseInertia(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBody.setupRevolute!(
    in
    SInt32
    linkIndex
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parentIndex
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    jointAxis
    
    ,
    in
    btVector3
    parentComToThisPivotOffset
    
    ,
    in
    btVector3
    thisPivotToThisComOffset
    
    ,
    in
    Boolean
    disableParentCollision
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef jointAxis__cxx = Make_CxxbtVector3ConstRef(jointAxis);
    
    CxxbtVector3ConstRef parentComToThisPivotOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisPivotOffset);
    
    CxxbtVector3ConstRef thisPivotToThisComOffset__cxx = Make_CxxbtVector3ConstRef(thisPivotToThisComOffset);
    
    
    this.cxx_setupRevolute(
        linkIndex,
        mass,
        inertia__cxx,
        parentIndex,
        rotParentToThis__cxx,
        jointAxis__cxx,
        parentComToThisPivotOffset__cxx,
        thisPivotToThisComOffset__cxx,
        disableParentCollision
        );
    
    
    
    
    
    
    
    
    
    
    
}

Float32
btMultiBody.getLinkMass?(
    in
    SInt32
    i
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getLinkMass(
        i
        );
    
    
    return __res;
}


btMultiBody.setUserIndex2!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex2(
        index
        );
    
    
    
}


btMultiBody.setupRevolute!(
    in
    SInt32
    linkIndex
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parentIndex
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    jointAxis
    
    ,
    in
    btVector3
    parentComToThisPivotOffset
    
    ,
    in
    btVector3
    thisPivotToThisComOffset
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef jointAxis__cxx = Make_CxxbtVector3ConstRef(jointAxis);
    
    CxxbtVector3ConstRef parentComToThisPivotOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisPivotOffset);
    
    CxxbtVector3ConstRef thisPivotToThisComOffset__cxx = Make_CxxbtVector3ConstRef(thisPivotToThisComOffset);
    
    this.cxx_setupRevolute(
        linkIndex,
        mass,
        inertia__cxx,
        parentIndex,
        rotParentToThis__cxx,
        jointAxis__cxx,
        parentComToThisPivotOffset__cxx,
        thisPivotToThisComOffset__cxx
        );
    
    
    
    
    
    
    
    
    
    
}


btMultiBody.setPosUpdated!(
    in
    Boolean
    updated
    
    
    )
{   
    
    
    this.cxx_setPosUpdated(
        updated
        );
    
    
    
}

Boolean
btMultiBody.isUsingRK4Integration?(
    )
{   
    Boolean __res = 
    this.cxx_isUsingRK4Integration(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet

btMultiBody.setUserIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex(
        index
        );
    
    
    
}


btMultiBody.setJointVel!(
    in
    SInt32
    i
    
    ,
    in
    Float32
    qdot
    
    
    )
{   
    
    
    
    this.cxx_setJointVel(
        i,
        qdot
        );
    
    
    
    
}


btMultiBody.addLinkForce!(
    in
    SInt32
    i
    
    ,
    in
    btVector3
    f
    
    
    )
{   
    
    
    CxxbtVector3ConstRef f__cxx = Make_CxxbtVector3ConstRef(f);
    
    this.cxx_addLinkForce(
        i,
        f__cxx
        );
    
    
    
    
}

SInt32
btMultiBody.getParent?(
    in
    SInt32
    link_num
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_getParent(
        link_num
        );
    
    
    return __res;
}

Float32
btMultiBody.getJointPosMultiDof!(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxFloat32Ptr __res_cxx = 
    this.cxx_getJointPosMultiDof(
        i
        );
    
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32Ptr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btMultiBody.setBaseMass!(
    in
    Float32
    mass
    
    
    )
{   
    
    
    this.cxx_setBaseMass(
        mass
        );
    
    
    
}

SInt32
btMultiBody.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

btVector3
btMultiBody.worldPosToLocal?(
    in
    SInt32
    i
    
    ,
    in
    btVector3
    vec
    
    
    )
{   
    
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_worldPosToLocal(
        i,
        vec__cxx
        );
    
    
    
    return __res;
}

SInt32
btMultiBody.getNumDofs?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumDofs(
        );
    
    return __res;
}

btVector3
btMultiBody.getBaseOmega?(
    )
{   
    btVector3 __res = 
    this.cxx_getBaseOmega(
        );
    
    return __res;
}

btVector3
btMultiBody.getRVector?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getRVector(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBody.setupSpherical!(
    in
    SInt32
    linkIndex
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parent
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    parentComToThisPivotOffset
    
    ,
    in
    btVector3
    thisPivotToThisComOffset
    
    ,
    in
    Boolean
    disableParentCollision
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef parentComToThisPivotOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisPivotOffset);
    
    CxxbtVector3ConstRef thisPivotToThisComOffset__cxx = Make_CxxbtVector3ConstRef(thisPivotToThisComOffset);
    
    
    this.cxx_setupSpherical(
        linkIndex,
        mass,
        inertia__cxx,
        parent,
        rotParentToThis__cxx,
        parentComToThisPivotOffset__cxx,
        thisPivotToThisComOffset__cxx,
        disableParentCollision
        );
    
    
    
    
    
    
    
    
    
    
}

btTransform
btMultiBody.getBaseWorldTransform?(
    )
{   
    btTransform __res = 
    this.cxx_getBaseWorldTransform(
        );
    
    return __res;
}

btVector3
btMultiBody.getBasePos?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getBasePos(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBody.stepPositionsMultiDof!(
    in
    Float32
    dt
    
    ,
    io
    Float32
    pq
    
    ,
    io
    Float32
    pqd
    
    
    )
{   
    
    
    CxxFloat32Ptr pq__cxx = Make_CxxFloat32Ptr(pq);
    
    CxxFloat32Ptr pqd__cxx = Make_CxxFloat32Ptr(pqd);
    
    this.cxx_stepPositionsMultiDof(
        dt,
        pq__cxx,
        pqd__cxx
        );
    
    
    
    
    
}

btVector3
btMultiBody.worldDirToLocal?(
    in
    SInt32
    i
    
    ,
    in
    btVector3
    vec
    
    
    )
{   
    
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_worldDirToLocal(
        i,
        vec__cxx
        );
    
    
    
    return __res;
}

btVector3
btMultiBody.localPosToWorld?(
    in
    SInt32
    i
    
    ,
    in
    btVector3
    vec
    
    
    )
{   
    
    
    CxxbtVector3ConstRef vec__cxx = Make_CxxbtVector3ConstRef(vec);
    btVector3 __res = 
    this.cxx_localPosToWorld(
        i,
        vec__cxx
        );
    
    
    
    return __res;
}

Boolean
btMultiBody.getCanSleep?(
    )
{   
    Boolean __res = 
    this.cxx_getCanSleep(
        );
    
    return __res;
}


btMultiBody.useRK4Integration!(
    in
    Boolean
    use
    
    
    )
{   
    
    
    this.cxx_useRK4Integration(
        use
        );
    
    
    
}


btMultiBody.addBaseTorque!(
    in
    btVector3
    t
    
    
    )
{   
    
    CxxbtVector3ConstRef t__cxx = Make_CxxbtVector3ConstRef(t);
    
    this.cxx_addBaseTorque(
        t__cxx
        );
    
    
    
}


btMultiBody.setMaxCoordinateVelocity!(
    in
    Float32
    maxVel
    
    
    )
{   
    
    
    this.cxx_setMaxCoordinateVelocity(
        maxVel
        );
    
    
    
}


btMultiBody.setupFixed!(
    in
    SInt32
    linkIndex
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parent
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    parentComToThisPivotOffset
    
    ,
    in
    btVector3
    thisPivotToThisComOffset
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef parentComToThisPivotOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisPivotOffset);
    
    CxxbtVector3ConstRef thisPivotToThisComOffset__cxx = Make_CxxbtVector3ConstRef(thisPivotToThisComOffset);
    
    this.cxx_setupFixed(
        linkIndex,
        mass,
        inertia__cxx,
        parent,
        rotParentToThis__cxx,
        parentComToThisPivotOffset__cxx,
        thisPivotToThisComOffset__cxx
        );
    
    
    
    
    
    
    
    
    
}

///users can point to their objects, userPointer is not used by Bullet

btMultiBody.setUserPointer!(
    in
    Data
    userPointer
    
    
    )
{   
    
    
    this.cxx_setUserPointer(
        userPointer
        );
    
    
    
}


btMultiBody.setupSpherical!(
    in
    SInt32
    linkIndex
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parent
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    parentComToThisPivotOffset
    
    ,
    in
    btVector3
    thisPivotToThisComOffset
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef parentComToThisPivotOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisPivotOffset);
    
    CxxbtVector3ConstRef thisPivotToThisComOffset__cxx = Make_CxxbtVector3ConstRef(thisPivotToThisComOffset);
    
    this.cxx_setupSpherical(
        linkIndex,
        mass,
        inertia__cxx,
        parent,
        rotParentToThis__cxx,
        parentComToThisPivotOffset__cxx,
        thisPivotToThisComOffset__cxx
        );
    
    
    
    
    
    
    
    
    
}


btMultiBody.addBaseForce!(
    in
    btVector3
    f
    
    
    )
{   
    
    CxxbtVector3ConstRef f__cxx = Make_CxxbtVector3ConstRef(f);
    
    this.cxx_addBaseForce(
        f__cxx
        );
    
    
    
}


btMultiBody.clearVelocities!(
    )
{   
    
    this.cxx_clearVelocities(
        );
    
    
}


btMultiBody.addLinkConstraintTorque!(
    in
    SInt32
    i
    
    ,
    in
    btVector3
    t
    
    
    )
{   
    
    
    CxxbtVector3ConstRef t__cxx = Make_CxxbtVector3ConstRef(t);
    
    this.cxx_addLinkConstraintTorque(
        i,
        t__cxx
        );
    
    
    
    
}


btMultiBody.setupPlanar!(
    in
    SInt32
    i
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parent
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    rotationAxis
    
    ,
    in
    btVector3
    parentComToThisComOffset
    
    ,
    in
    Boolean
    disableParentCollision
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef rotationAxis__cxx = Make_CxxbtVector3ConstRef(rotationAxis);
    
    CxxbtVector3ConstRef parentComToThisComOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisComOffset);
    
    
    this.cxx_setupPlanar(
        i,
        mass,
        inertia__cxx,
        parent,
        rotParentToThis__cxx,
        rotationAxis__cxx,
        parentComToThisComOffset__cxx,
        disableParentCollision
        );
    
    
    
    
    
    
    
    
    
    
}


btMultiBody.setNumLinks!(
    in
    SInt32
    numLinks
    
    
    )
{   
    
    
    this.cxx_setNumLinks(
        numLinks
        );
    
    
    
}


btMultiBody.setupPrismatic!(
    in
    SInt32
    i
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parent
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    jointAxis
    
    ,
    in
    btVector3
    parentComToThisPivotOffset
    
    ,
    in
    btVector3
    thisPivotToThisComOffset
    
    ,
    in
    Boolean
    disableParentCollision
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef jointAxis__cxx = Make_CxxbtVector3ConstRef(jointAxis);
    
    CxxbtVector3ConstRef parentComToThisPivotOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisPivotOffset);
    
    CxxbtVector3ConstRef thisPivotToThisComOffset__cxx = Make_CxxbtVector3ConstRef(thisPivotToThisComOffset);
    
    
    this.cxx_setupPrismatic(
        i,
        mass,
        inertia__cxx,
        parent,
        rotParentToThis__cxx,
        jointAxis__cxx,
        parentComToThisPivotOffset__cxx,
        thisPivotToThisComOffset__cxx,
        disableParentCollision
        );
    
    
    
    
    
    
    
    
    
    
    
}

///memory of setBaseName needs to be manager by user

btMultiBody.setBaseName!(
    in
    String
    name
    
    
    )
{   
    CxxCharConstPtr name__cxx = CxxCharConstPtr(name);
    
    this.cxx_setBaseName(
        name__cxx
        );
    
    
    
}

Boolean
btMultiBody.isAwake?(
    )
{   
    Boolean __res = 
    this.cxx_isAwake(
        );
    
    return __res;
}


btMultiBody.setMaxAppliedImpulse!(
    in
    Float32
    maxImp
    
    
    )
{   
    
    
    this.cxx_setMaxAppliedImpulse(
        maxImp
        );
    
    
    
}


btMultiBody.addBaseConstraintForce!(
    in
    btVector3
    f
    
    
    )
{   
    
    CxxbtVector3ConstRef f__cxx = Make_CxxbtVector3ConstRef(f);
    
    this.cxx_addBaseConstraintForce(
        f__cxx
        );
    
    
    
}

btMatrix3x3
btMultiBody.localFrameToWorld?(
    in
    SInt32
    i
    
    ,
    in
    btMatrix3x3
    mat
    
    
    )
{   
    
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    btMatrix3x3 __res = 
    this.cxx_localFrameToWorld(
        i,
        mat__cxx
        );
    
    
    
    return __res;
}

Float32
btMultiBody.getLinearDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getLinearDamping(
        );
    
    return __res;
}

Boolean
btMultiBody.hasSelfCollision?(
    )
{   
    Boolean __res = 
    this.cxx_hasSelfCollision(
        );
    
    return __res;
}


btMultiBody.addBaseConstraintTorque!(
    in
    btVector3
    t
    
    
    )
{   
    
    CxxbtVector3ConstRef t__cxx = Make_CxxbtVector3ConstRef(t);
    
    this.cxx_addBaseConstraintTorque(
        t__cxx
        );
    
    
    
}

btQuaternion
btMultiBody.getWorldToBaseRot?(
    )
{   
    CxxbtQuaternionConstRef __res_cxx = 
    this.cxx_getWorldToBaseRot(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtQuaternionConstRef';
    btQuaternion __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBody.goToSleep!(
    )
{   
    
    this.cxx_goToSleep(
        );
    
    
}


btMultiBody.setHasSelfCollision!(
    in
    Boolean
    hasSelfCollision
    
    
    )
{   
    
    
    this.cxx_setHasSelfCollision(
        hasSelfCollision
        );
    
    
    
}


btMultiBody.setupFixed!(
    in
    SInt32
    linkIndex
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parent
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    parentComToThisPivotOffset
    
    ,
    in
    btVector3
    thisPivotToThisComOffset
    
    ,
    in
    Boolean
    deprecatedDisableParentCollision
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef parentComToThisPivotOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisPivotOffset);
    
    CxxbtVector3ConstRef thisPivotToThisComOffset__cxx = Make_CxxbtVector3ConstRef(thisPivotToThisComOffset);
    
    
    this.cxx_setupFixed(
        linkIndex,
        mass,
        inertia__cxx,
        parent,
        rotParentToThis__cxx,
        parentComToThisPivotOffset__cxx,
        thisPivotToThisComOffset__cxx,
        deprecatedDisableParentCollision
        );
    
    
    
    
    
    
    
    
    
    
}


btMultiBody.stepPositionsMultiDof!(
    in
    Float32
    dt
    
    
    )
{   
    
    
    this.cxx_stepPositionsMultiDof(
        dt
        );
    
    
    
}

Float32
btMultiBody.getMaxCoordinateVelocity?(
    )
{   
    Float32 __res = 
    this.cxx_getMaxCoordinateVelocity(
        );
    
    return __res;
}


btMultiBody.compTreeLinkVelocities?(
    io
    btVector3
    omega
    
    ,
    io
    btVector3
    vel
    
    
    )
{   
    
    CxxbtVector3Ptr omega__cxx = Make_CxxbtVector3Ptr(omega);
    
    CxxbtVector3Ptr vel__cxx = Make_CxxbtVector3Ptr(vel);
    
    this.cxx_compTreeLinkVelocities(
        omega__cxx,
        vel__cxx
        );
    
    
    
    
}


btMultiBody.applyDeltaVeeMultiDof!(
    in
    Float32
    delta_vee
    
    ,
    in
    Float32
    multiplier
    
    
    )
{   
    
    CxxFloat32ConstPtr delta_vee__cxx = Make_CxxFloat32ConstPtr(delta_vee);
    
    
    this.cxx_applyDeltaVeeMultiDof(
        delta_vee__cxx,
        multiplier
        );
    
    
    
    
}

btVector3
btMultiBody.getBaseTorque?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getBaseTorque(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBody.setCompanionId!(
    in
    SInt32
    id
    
    
    )
{   
    
    
    this.cxx_setCompanionId(
        id
        );
    
    
    
}


btMultiBody.wakeUp!(
    )
{   
    
    this.cxx_wakeUp(
        );
    
    
}

Float32
btMultiBody.getBaseMass?(
    )
{   
    Float32 __res = 
    this.cxx_getBaseMass(
        );
    
    return __res;
}

btMultibodyLink
btMultiBody.getLink?(
    in
    SInt32
    index
    
    
    )
{   
    
    btMultibodyLink __res = 
    this.cxx_getLink(
        index
        );
    
    
    return __res;
}

SInt32
btMultiBody.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}


btMultiBody.addJointTorqueMultiDof!(
    in
    SInt32
    i
    
    ,
    in
    SInt32
    dof
    
    ,
    in
    Float32
    Q
    
    
    )
{   
    
    
    
    
    this.cxx_addJointTorqueMultiDof(
        i,
        dof,
        Q
        );
    
    
    
    
    
}


btMultiBody.setJointPosMultiDof!(
    in
    SInt32
    i
    
    ,
    io
    Float32
    q
    
    
    )
{   
    
    
    CxxFloat32Ptr q__cxx = Make_CxxFloat32Ptr(q);
    
    this.cxx_setJointPosMultiDof(
        i,
        q__cxx
        );
    
    
    
    
}


btMultiBody.setAngularDamping!(
    in
    Float32
    damp
    
    
    )
{   
    
    
    this.cxx_setAngularDamping(
        damp
        );
    
    
    
}


btMultiBody.setBaseWorldTransform!(
    in
    btTransform
    tr
    
    
    )
{   
    
    CxxbtTransformConstRef tr__cxx = Make_CxxbtTransformConstRef(tr);
    
    this.cxx_setBaseWorldTransform(
        tr__cxx
        );
    
    
    
}


btMultiBody.setJointVelMultiDof!(
    in
    SInt32
    i
    
    ,
    io
    Float32
    qdot
    
    
    )
{   
    
    
    CxxFloat32Ptr qdot__cxx = Make_CxxFloat32Ptr(qdot);
    
    this.cxx_setJointVelMultiDof(
        i,
        qdot__cxx
        );
    
    
    
    
}

Float32
btMultiBody.getJointTorqueMultiDof!(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxFloat32Ptr __res_cxx = 
    this.cxx_getJointTorqueMultiDof(
        i
        );
    
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32Ptr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

Float32
btMultiBody.getKineticEnergy?(
    )
{   
    Float32 __res = 
    this.cxx_getKineticEnergy(
        );
    
    return __res;
}


btMultiBody.processDeltaVeeMultiDof2!(
    )
{   
    
    this.cxx_processDeltaVeeMultiDof2(
        );
    
    
}


btMultiBody.setupPlanar!(
    in
    SInt32
    i
    
    ,
    in
    Float32
    mass
    
    ,
    in
    btVector3
    inertia
    
    ,
    in
    SInt32
    parent
    
    ,
    in
    btQuaternion
    rotParentToThis
    
    ,
    in
    btVector3
    rotationAxis
    
    ,
    in
    btVector3
    parentComToThisComOffset
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef inertia__cxx = Make_CxxbtVector3ConstRef(inertia);
    
    
    CxxbtQuaternionConstRef rotParentToThis__cxx = Make_CxxbtQuaternionConstRef(rotParentToThis);
    
    CxxbtVector3ConstRef rotationAxis__cxx = Make_CxxbtVector3ConstRef(rotationAxis);
    
    CxxbtVector3ConstRef parentComToThisComOffset__cxx = Make_CxxbtVector3ConstRef(parentComToThisComOffset);
    
    this.cxx_setupPlanar(
        i,
        mass,
        inertia__cxx,
        parent,
        rotParentToThis__cxx,
        rotationAxis__cxx,
        parentComToThisComOffset__cxx
        );
    
    
    
    
    
    
    
    
    
}

Float32
btMultiBody.getJointVel?(
    in
    SInt32
    i
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getJointVel(
        i
        );
    
    
    return __res;
}

Float32
btMultiBody.getJointPos?(
    in
    SInt32
    i
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getJointPos(
        i
        );
    
    
    return __res;
}


btMultiBody.setBaseCollider!(
    in
    btMultiBodyLinkCollider
    collider
    
    
    )
{   
    
    
    this.cxx_setBaseCollider(
        collider
        );
    
    
    
}

Float32
btMultiBody.getAngularDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getAngularDamping(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBody] EDK[Fabric_EDK_KL_btMultiBody] LIB[btMultiBody *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBody.=(
    btMultiBody that
    ) = "Bullet2__btMultiBody__MU__simple_ass_op__e05bd5cb409a8480da29ada86a6bd2f5";


/// \dfgPresetOmit
/// \internal
btMultiBody.appendDesc(io String string) {
  string += "btMultiBody:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkDoubleData] EDK[Fabric_EDK_KL_btMultiBodyLinkDoubleData] LIB[btMultiBodyLinkDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkDoubleData] EDK[Fabric_EDK_KL_btMultiBodyLinkDoubleData] LIB[btMultiBodyLinkDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkDoubleData] EDK[Fabric_EDK_KL_btMultiBodyLinkDoubleData] LIB[btMultiBodyLinkDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyLinkDoubleData() = "Bullet2__btMultiBodyLinkDoubleData__MU__empty_ctor__8d9e1b2852ff26bdb6a8d487bff0526d";

/// \dfgPresetOmit
btMultiBodyLinkDoubleData(
    btMultiBodyLinkDoubleData that
    ) = "Bullet2__btMultiBodyLinkDoubleData__MU__copy_ctor__dc204142794713f5be3273873b12b6d2";

btMultiBodyLinkDoubleData.cxx_delete() = "Bullet2__btMultiBodyLinkDoubleData__MU__delete__2de2a25a40190478b9bf9171e7d7a1f1";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkDoubleData] EDK[Fabric_EDK_KL_btMultiBodyLinkDoubleData] LIB[btMultiBodyLinkDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkDoubleData] EDK[Fabric_EDK_KL_btMultiBodyLinkDoubleData] LIB[btMultiBodyLinkDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkDoubleData] EDK[Fabric_EDK_KL_btMultiBodyLinkDoubleData] LIB[btMultiBodyLinkDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyLinkDoubleData.=(
    btMultiBodyLinkDoubleData that
    ) = "Bullet2__btMultiBodyLinkDoubleData__MU__simple_ass_op__f9fcfaaa242b5889bb023e5f2b725a17";


/// \dfgPresetOmit
/// \internal
btMultiBodyLinkDoubleData.appendDesc(io String string) {
  string += "btMultiBodyLinkDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkFloatData] EDK[Fabric_EDK_KL_btMultiBodyLinkFloatData] LIB[btMultiBodyLinkFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkFloatData] EDK[Fabric_EDK_KL_btMultiBodyLinkFloatData] LIB[btMultiBodyLinkFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkFloatData] EDK[Fabric_EDK_KL_btMultiBodyLinkFloatData] LIB[btMultiBodyLinkFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyLinkFloatData() = "Bullet2__btMultiBodyLinkFloatData__MU__empty_ctor__fc788a2b53d439a5831cbdc0913a249a";

/// \dfgPresetOmit
btMultiBodyLinkFloatData(
    btMultiBodyLinkFloatData that
    ) = "Bullet2__btMultiBodyLinkFloatData__MU__copy_ctor__4f293d2f553fbc0e5fa574b07c9e3bf5";

btMultiBodyLinkFloatData.cxx_delete() = "Bullet2__btMultiBodyLinkFloatData__MU__delete__7d48fc92bb94a80ae8a45b709ce6b223";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkFloatData] EDK[Fabric_EDK_KL_btMultiBodyLinkFloatData] LIB[btMultiBodyLinkFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkFloatData] EDK[Fabric_EDK_KL_btMultiBodyLinkFloatData] LIB[btMultiBodyLinkFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkFloatData] EDK[Fabric_EDK_KL_btMultiBodyLinkFloatData] LIB[btMultiBodyLinkFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyLinkFloatData.=(
    btMultiBodyLinkFloatData that
    ) = "Bullet2__btMultiBodyLinkFloatData__MU__simple_ass_op__d32f37fa872012a61b43bd2d1fbcee82";


/// \dfgPresetOmit
/// \internal
btMultiBodyLinkFloatData.appendDesc(io String string) {
  string += "btMultiBodyLinkFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyDoubleData] EDK[Fabric_EDK_KL_btMultiBodyDoubleData] LIB[btMultiBodyDoubleData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDoubleData] EDK[Fabric_EDK_KL_btMultiBodyDoubleData] LIB[btMultiBodyDoubleData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDoubleData] EDK[Fabric_EDK_KL_btMultiBodyDoubleData] LIB[btMultiBodyDoubleData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyDoubleData() = "Bullet2__btMultiBodyDoubleData__MU__empty_ctor__48e292fea05ea4eb0826bd231553734b";

/// \dfgPresetOmit
btMultiBodyDoubleData(
    btMultiBodyDoubleData that
    ) = "Bullet2__btMultiBodyDoubleData__MU__copy_ctor__9ec14b2bccc1446db1fd7873cd13dcfa";

btMultiBodyDoubleData.cxx_delete() = "Bullet2__btMultiBodyDoubleData__MU__delete__a2b2e868908a302d2a77c476bfc96700";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDoubleData] EDK[Fabric_EDK_KL_btMultiBodyDoubleData] LIB[btMultiBodyDoubleData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDoubleData] EDK[Fabric_EDK_KL_btMultiBodyDoubleData] LIB[btMultiBodyDoubleData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDoubleData] EDK[Fabric_EDK_KL_btMultiBodyDoubleData] LIB[btMultiBodyDoubleData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyDoubleData.=(
    btMultiBodyDoubleData that
    ) = "Bullet2__btMultiBodyDoubleData__MU__simple_ass_op__710be3c377342b3bc0e9219cbb8851e1";


/// \dfgPresetOmit
/// \internal
btMultiBodyDoubleData.appendDesc(io String string) {
  string += "btMultiBodyDoubleData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyFloatData] EDK[Fabric_EDK_KL_btMultiBodyFloatData] LIB[btMultiBodyFloatData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFloatData] EDK[Fabric_EDK_KL_btMultiBodyFloatData] LIB[btMultiBodyFloatData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFloatData] EDK[Fabric_EDK_KL_btMultiBodyFloatData] LIB[btMultiBodyFloatData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyFloatData() = "Bullet2__btMultiBodyFloatData__MU__empty_ctor__4156350bde94378acc442670c6141feb";

/// \dfgPresetOmit
btMultiBodyFloatData(
    btMultiBodyFloatData that
    ) = "Bullet2__btMultiBodyFloatData__MU__copy_ctor__512650bb0715a6745135842a196348ae";

btMultiBodyFloatData.cxx_delete() = "Bullet2__btMultiBodyFloatData__MU__delete__7f70ebcc611fa04b5fae193c0621fc26";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFloatData] EDK[Fabric_EDK_KL_btMultiBodyFloatData] LIB[btMultiBodyFloatData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFloatData] EDK[Fabric_EDK_KL_btMultiBodyFloatData] LIB[btMultiBodyFloatData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFloatData] EDK[Fabric_EDK_KL_btMultiBodyFloatData] LIB[btMultiBodyFloatData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyFloatData.=(
    btMultiBodyFloatData that
    ) = "Bullet2__btMultiBodyFloatData__MU__simple_ass_op__ecb97f40aba791ecdde9a957e70e31ad";


/// \dfgPresetOmit
/// \internal
btMultiBodyFloatData.appendDesc(io String string) {
  string += "btMultiBodyFloatData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJacobianData] EDK[Fabric_EDK_KL_btMultiBodyJacobianData] LIB[btMultiBodyJacobianData *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJacobianData] EDK[Fabric_EDK_KL_btMultiBodyJacobianData] LIB[btMultiBodyJacobianData *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJacobianData] EDK[Fabric_EDK_KL_btMultiBodyJacobianData] LIB[btMultiBodyJacobianData *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyJacobianData() = "Bullet2__btMultiBodyJacobianData__MU__empty_ctor__b20bd91462092a4744bd88d072050c41";

/// \dfgPresetOmit
btMultiBodyJacobianData(
    btMultiBodyJacobianData that
    ) = "Bullet2__btMultiBodyJacobianData__MU__copy_ctor__bc80e3cfade6049f4c567c2337340c9e";

btMultiBodyJacobianData.cxx_delete() = "Bullet2__btMultiBodyJacobianData__MU__delete__67493c9612cbc9dd3008d52392cdd13a";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJacobianData] EDK[Fabric_EDK_KL_btMultiBodyJacobianData] LIB[btMultiBodyJacobianData *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJacobianData] EDK[Fabric_EDK_KL_btMultiBodyJacobianData] LIB[btMultiBodyJacobianData *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJacobianData] EDK[Fabric_EDK_KL_btMultiBodyJacobianData] LIB[btMultiBodyJacobianData *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyJacobianData.=(
    btMultiBodyJacobianData that
    ) = "Bullet2__btMultiBodyJacobianData__MU__simple_ass_op__8d863985f6d7eb2c37c9c0c7ab5cadff";


/// \dfgPresetOmit
/// \internal
btMultiBodyJacobianData.appendDesc(io String string) {
  string += "btMultiBodyJacobianData:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyConstraint() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btMultiBodyConstraint(
    btMultiBodyConstraint that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btMultiBodyConstraint.cxx_delete() = "Bullet2__btMultiBodyConstraint__MU__delete__e878db5161a113bb18caac9eac39098d";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultiBodyConstraint.cxx_updateJacobianSizes!(
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_updateJacobianSizes__0f1d1d6771291f3d2d8cd4c175917bfa";

/// \dfgPresetOmit
/// \internal

btMultiBodyConstraint.cxx_allocateJacobiansMultiDof!(
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_allocateJacobiansMultiDof__423eb8bf6f140c0984638d7a0ceddc80";

/// \dfgPresetOmit
/// \internal

btMultiBodyConstraint.cxx_setFrameInB!(
    CxxbtMatrix3x3ConstRef frameInB
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_setFrameInB__a0dd8b2788a407dbe0993d7cea06d892";

/// \dfgPresetOmit
/// \internal

btMultiBodyConstraint.cxx_setPivotInB!(
    CxxbtVector3ConstRef pivotInB
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_setPivotInB__b55c984cd797e9876fcd9a40bbb50e01";

/// \dfgPresetOmit
/// \internal

btMultiBodyConstraint.cxx_finalizeMultiDof!(
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_finalizeMultiDof__b3d50c98f1efeb6abab9d1436afcd09e";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyConstraint.cxx_getIslandIdA?(
    )
 = "Bullet2__btMultiBodyConstraint__CO__meth_getIslandIdA__7493f2d96e69890bb139772aa5732221";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyConstraint.cxx_getIslandIdB?(
    )
 = "Bullet2__btMultiBodyConstraint__CO__meth_getIslandIdB__9aea2316525e6cf413e8b8470072eed1";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyConstraint.cxx_getNumRows?(
    )
 = "Bullet2__btMultiBodyConstraint__CO__meth_getNumRows__1f1752b5c80f44965278c78cddb8183c";

/// \dfgPresetOmit
/// \internal
btMultiBody
btMultiBodyConstraint.cxx_getMultiBodyA!(
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_getMultiBodyA__19c286a9700ed2f776de7368418b1e42";

/// \dfgPresetOmit
/// \internal
btMultiBody
btMultiBodyConstraint.cxx_getMultiBodyB!(
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_getMultiBodyB__272c5b33575ddc3b83360ae221a3959d";

/// \dfgPresetOmit
/// \internal

btMultiBodyConstraint.cxx_internalSetAppliedImpulse!(
    SInt32 dof,
    Float32 appliedImpulse
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_internalSetAppliedImpulse__83ac28fa7f4c83c9a3a1deeab42a3ea8";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBodyConstraint.cxx_getAppliedImpulse!(
    SInt32 dof
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_getAppliedImpulse__c7437ad2f7868699cc045dbdd3163543";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBodyConstraint.cxx_getPosition?(
    SInt32 row
    )
 = "Bullet2__btMultiBodyConstraint__CO__meth_getPosition__26a8532b47fc200fc98e80196bd6d517";

/// \dfgPresetOmit
/// \internal

btMultiBodyConstraint.cxx_setPosition!(
    SInt32 row,
    Float32 pos
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_setPosition__d89aab06082f90cb75d4372c74176ec3";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBodyConstraint.cxx_isUnilateral?(
    )
 = "Bullet2__btMultiBodyConstraint__CO__meth_isUnilateral__420b33e025b88c6fb2ac72751f598dff";

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr
btMultiBodyConstraint.cxx_jacobianA!(
    SInt32 row
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_jacobianA__14a9a99b67e9fb4feab560d1109f292f";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr
btMultiBodyConstraint.cxx_jacobianA?(
    SInt32 row
    )
 = "Bullet2__btMultiBodyConstraint__CO__meth_jacobianA__f160e350cdb07f00200fd13c6d9d5073";

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr
btMultiBodyConstraint.cxx_jacobianB!(
    SInt32 row
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_jacobianB__e76870dbe15c72e2373e0f20b8ff3d0d";

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr
btMultiBodyConstraint.cxx_jacobianB?(
    SInt32 row
    )
 = "Bullet2__btMultiBodyConstraint__CO__meth_jacobianB__a6c5b3b55ccae305796b579a8c82ed04";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBodyConstraint.cxx_getMaxAppliedImpulse?(
    )
 = "Bullet2__btMultiBodyConstraint__CO__meth_getMaxAppliedImpulse__a5f10cc6c7134a5284162332a3cd2af7";

/// \dfgPresetOmit
/// \internal

btMultiBodyConstraint.cxx_setMaxAppliedImpulse!(
    Float32 maxImp
    )
 = "Bullet2__btMultiBodyConstraint__MU__meth_setMaxAppliedImpulse__c99d9db38d631916c16b546d34a4b38f";


btMultiBodyConstraint.updateJacobianSizes!(
    )
{   
    
    this.cxx_updateJacobianSizes(
        );
    
    
}


btMultiBodyConstraint.setMaxAppliedImpulse!(
    in
    Float32
    maxImp
    
    
    )
{   
    
    
    this.cxx_setMaxAppliedImpulse(
        maxImp
        );
    
    
    
}


btMultiBodyConstraint.internalSetAppliedImpulse!(
    in
    SInt32
    dof
    
    ,
    in
    Float32
    appliedImpulse
    
    
    )
{   
    
    
    
    this.cxx_internalSetAppliedImpulse(
        dof,
        appliedImpulse
        );
    
    
    
    
}

Float32
btMultiBodyConstraint.jacobianB!(
    in
    SInt32
    row
    
    
    )
{   
    
    CxxFloat32Ptr __res_cxx = 
    this.cxx_jacobianB(
        row
        );
    
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32Ptr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btMultiBodyConstraint.finalizeMultiDof!(
    )
{   
    
    this.cxx_finalizeMultiDof(
        );
    
    
}


btMultiBodyConstraint.allocateJacobiansMultiDof!(
    )
{   
    
    this.cxx_allocateJacobiansMultiDof(
        );
    
    
}


btMultiBodyConstraint.setPosition!(
    in
    SInt32
    row
    
    ,
    in
    Float32
    pos
    
    
    )
{   
    
    
    
    this.cxx_setPosition(
        row,
        pos
        );
    
    
    
    
}

Float32
btMultiBodyConstraint.getMaxAppliedImpulse?(
    )
{   
    Float32 __res = 
    this.cxx_getMaxAppliedImpulse(
        );
    
    return __res;
}

btMultiBody
btMultiBodyConstraint.getMultiBodyA!(
    )
{   
    btMultiBody __res = 
    this.cxx_getMultiBodyA(
        );
    
    return __res;
}

Boolean
btMultiBodyConstraint.isUnilateral?(
    )
{   
    Boolean __res = 
    this.cxx_isUnilateral(
        );
    
    return __res;
}

Float32
btMultiBodyConstraint.getPosition?(
    in
    SInt32
    row
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getPosition(
        row
        );
    
    
    return __res;
}


btMultiBodyConstraint.setPivotInB!(
    in
    btVector3
    pivotInB
    
    
    )
{   
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    this.cxx_setPivotInB(
        pivotInB__cxx
        );
    
    
    
}

btMultiBody
btMultiBodyConstraint.getMultiBodyB!(
    )
{   
    btMultiBody __res = 
    this.cxx_getMultiBodyB(
        );
    
    return __res;
}

SInt32
btMultiBodyConstraint.getIslandIdA?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdA(
        );
    
    return __res;
}

Float32
btMultiBodyConstraint.jacobianA!(
    in
    SInt32
    row
    
    
    )
{   
    
    CxxFloat32Ptr __res_cxx = 
    this.cxx_jacobianA(
        row
        );
    
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxFloat32Ptr';
    Float32 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


btMultiBodyConstraint.setFrameInB!(
    in
    btMatrix3x3
    frameInB
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef frameInB__cxx = Make_CxxbtMatrix3x3ConstRef(frameInB);
    
    this.cxx_setFrameInB(
        frameInB__cxx
        );
    
    
    
}

SInt32
btMultiBodyConstraint.getIslandIdB?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdB(
        );
    
    return __res;
}

SInt32
btMultiBodyConstraint.getNumRows?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumRows(
        );
    
    return __res;
}

Float32
btMultiBodyConstraint.getAppliedImpulse!(
    in
    SInt32
    dof
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getAppliedImpulse(
        dof
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraint] EDK[Fabric_EDK_KL_btMultiBodyConstraint] LIB[btMultiBodyConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyConstraint.=(
    btMultiBodyConstraint that
    ) = "Bullet2__btMultiBodyConstraint__MU__simple_ass_op__e3e1b27df5efaca3e3ec94f71f9339d9";


/// \dfgPresetOmit
/// \internal
btMultiBodyConstraint.appendDesc(io String string) {
  string += "btMultiBodyConstraint:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyConstraintSolver() = "Bullet2__btMultiBodyConstraintSolver__MU__empty_ctor__874e5ea269ec7d32460c42b46b167437";

/// \dfgPresetOmit
btMultiBodyConstraintSolver(
    btMultiBodyConstraintSolver that
    ) = "Bullet2__btMultiBodyConstraintSolver__MU__copy_ctor__5327cf6a9ed9db9832324d365b1d92db";

btMultiBodyConstraintSolver.cxx_delete() = "Bullet2__btMultiBodyConstraintSolver__MU__delete__767fcd789340c9d961d8ed83e3925d50";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
btMultiBodyConstraintSolver.cxx_solveGroupCacheFriendlyFinish!(
    CxxbtCollisionObjectPtr bodies,
    SInt32 numBodies,
    btContactSolverInfo infoGlobal
    )
 = "Bullet2__btMultiBodyConstraintSolver__MU__meth_solveGroupCacheFriendlyFinish__cad13391f30603a35d3f2c780439cb63";

Float32
btMultiBodyConstraintSolver.solveGroupCacheFriendlyFinish!(
    io
    btCollisionObject
    bodies
    
    ,
    in
    SInt32
    numBodies
    
    ,
    in
    btContactSolverInfo
    infoGlobal
    
    
    )
{   
    
    CxxbtCollisionObjectPtr bodies__cxx = Make_CxxbtCollisionObjectPtr(bodies);
    
    
    Float32 __res = 
    this.cxx_solveGroupCacheFriendlyFinish(
        bodies__cxx,
        numBodies,
        infoGlobal
        );
    
    
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyConstraintSolver] EDK[Fabric_EDK_KL_btMultiBodyConstraintSolver] LIB[btMultiBodyConstraintSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyConstraintSolver.=(
    btMultiBodyConstraintSolver that
    ) = "Bullet2__btMultiBodyConstraintSolver__MU__simple_ass_op__94478f1a87f810c39ad66ac5031c4bcc";


/// \dfgPresetOmit
/// \internal
btMultiBodyConstraintSolver.appendDesc(io String string) {
  string += "btMultiBodyConstraintSolver:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyDynamicsWorld() = "Bullet2__btMultiBodyDynamicsWorld__MU__empty_ctor__d90533aa34250d4bfc85fc2e14566d11";

/// \dfgPresetOmit
btMultiBodyDynamicsWorld(
    btMultiBodyDynamicsWorld that
    ) = "Bullet2__btMultiBodyDynamicsWorld__MU__copy_ctor__3d3998004bb519b0d52d2619857122e7";

/// \dfgPresetOmit
/// \internal
btMultiBodyDynamicsWorld.__ctor(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btMultiBodyConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) = "Bullet2__btMultiBodyDynamicsWorld__MU__ctor__63b2d64983f0daba9011cb598e292c81";

/// \dfgPresetOmit
btMultiBodyDynamicsWorld(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btMultiBodyConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) {
    this.__ctor(
        dispatcher,
        pairCache,
        constraintSolver,
        collisionConfiguration
        );
}

btMultiBodyDynamicsWorld.cxx_delete() = "Bullet2__btMultiBodyDynamicsWorld__MU__delete__76d040699504a216c31219c7fe0c307a";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_addMultiBody!(
    btMultiBody body
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_addMultiBody__e341f318839f56774f6645f04e01bab4";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_addMultiBody!(
    btMultiBody body,
    SInt32 group
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_addMultiBody__5afd8ac94f63bcf385e180e5f7b29e14";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_addMultiBody!(
    btMultiBody body,
    SInt32 group,
    SInt32 mask
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_addMultiBody__496ee7a7472be16f98ac1304b5a67f02";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_removeMultiBody!(
    btMultiBody body
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_removeMultiBody__f7270e1e06ff9aae9d23b715b09b9e88";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyDynamicsWorld.cxx_getNumMultibodies?(
    )
 = "Bullet2__btMultiBodyDynamicsWorld__CO__meth_getNumMultibodies__8cdbabb3cc04125930932e42b3c4bf16";

/// \dfgPresetOmit
/// \internal
btMultiBody
btMultiBodyDynamicsWorld.cxx_getMultiBody!(
    SInt32 mbIndex
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_getMultiBody__f49ab566a698d20d2bdf387775f8899f";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_addMultiBodyConstraint!(
    btMultiBodyConstraint constraint
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_addMultiBodyConstraint__029c106505064e01f87cb612776bf914";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyDynamicsWorld.cxx_getNumMultiBodyConstraints?(
    )
 = "Bullet2__btMultiBodyDynamicsWorld__CO__meth_getNumMultiBodyConstraints__75426a084a57fdb195f2522a39264fb5";

/// \dfgPresetOmit
/// \internal
btMultiBodyConstraint
btMultiBodyDynamicsWorld.cxx_getMultiBodyConstraint!(
    SInt32 constraintIndex
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_getMultiBodyConstraint__6d3c63d3ca4b9006721f15a711b93897";

/// \dfgPresetOmit
/// \internal
btMultiBodyConstraint
btMultiBodyDynamicsWorld.cxx_getMultiBodyConstraint?(
    SInt32 constraintIndex
    )
 = "Bullet2__btMultiBodyDynamicsWorld__CO__meth_getMultiBodyConstraint__379dc834dc02719091eee8dc876afa90";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_removeMultiBodyConstraint!(
    btMultiBodyConstraint constraint
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_removeMultiBodyConstraint__80e36525ea5d2b99fa3eca65c99bff11";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_integrateTransforms!(
    Float32 timeStep
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_integrateTransforms__82336ddcc51b75068a203b55940fe404";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_debugDrawWorld!(
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_debugDrawWorld__c6ad5d848744bdde85aca9916cb3ff13";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_debugDrawMultiBodyConstraint!(
    btMultiBodyConstraint constraint
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_debugDrawMultiBodyConstraint__a49cdf9d9796c8976e496c13fac45b1e";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_forwardKinematics!(
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_forwardKinematics__89aaba3a5ded1e3f9d9cd614632bb79b";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_clearForces!(
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_clearForces__a5acf45dbe2bef7d4b5f16d1be9a2367";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_clearMultiBodyConstraintForces!(
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_clearMultiBodyConstraintForces__cce48633e3884855185d0d4f345ddaaa";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_clearMultiBodyForces!(
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_clearMultiBodyForces__752a53cba93519f3a658ea837b8c2ecd";

/// \dfgPresetOmit
/// \internal

btMultiBodyDynamicsWorld.cxx_applyGravity!(
    )
 = "Bullet2__btMultiBodyDynamicsWorld__MU__meth_applyGravity__ed58ecdec873bebb0de9c0a91bbbde97";


btMultiBodyDynamicsWorld.clearMultiBodyForces!(
    )
{   
    
    this.cxx_clearMultiBodyForces(
        );
    
    
}


btMultiBodyDynamicsWorld.removeMultiBody!(
    in
    btMultiBody
    body
    
    
    )
{   
    
    
    this.cxx_removeMultiBody(
        body
        );
    
    
    
}

btMultiBody
btMultiBodyDynamicsWorld.getMultiBody!(
    in
    SInt32
    mbIndex
    
    
    )
{   
    
    btMultiBody __res = 
    this.cxx_getMultiBody(
        mbIndex
        );
    
    
    return __res;
}


btMultiBodyDynamicsWorld.applyGravity!(
    )
{   
    
    this.cxx_applyGravity(
        );
    
    
}


btMultiBodyDynamicsWorld.addMultiBodyConstraint!(
    in
    btMultiBodyConstraint
    constraint
    
    
    )
{   
    
    
    this.cxx_addMultiBodyConstraint(
        constraint
        );
    
    
    
}


btMultiBodyDynamicsWorld.integrateTransforms!(
    in
    Float32
    timeStep
    
    
    )
{   
    
    
    this.cxx_integrateTransforms(
        timeStep
        );
    
    
    
}


btMultiBodyDynamicsWorld.clearMultiBodyConstraintForces!(
    )
{   
    
    this.cxx_clearMultiBodyConstraintForces(
        );
    
    
}


btMultiBodyDynamicsWorld.debugDrawMultiBodyConstraint!(
    in
    btMultiBodyConstraint
    constraint
    
    
    )
{   
    
    
    this.cxx_debugDrawMultiBodyConstraint(
        constraint
        );
    
    
    
}

SInt32
btMultiBodyDynamicsWorld.getNumMultiBodyConstraints?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumMultiBodyConstraints(
        );
    
    return __res;
}


btMultiBodyDynamicsWorld.addMultiBody!(
    in
    btMultiBody
    body
    
    ,
    in
    SInt32
    group
    
    
    )
{   
    
    
    
    this.cxx_addMultiBody(
        body,
        group
        );
    
    
    
    
}

btMultiBodyConstraint
btMultiBodyDynamicsWorld.getMultiBodyConstraint!(
    in
    SInt32
    constraintIndex
    
    
    )
{   
    
    btMultiBodyConstraint __res = 
    this.cxx_getMultiBodyConstraint(
        constraintIndex
        );
    
    
    return __res;
}


btMultiBodyDynamicsWorld.addMultiBody!(
    in
    btMultiBody
    body
    
    
    )
{   
    
    
    this.cxx_addMultiBody(
        body
        );
    
    
    
}


btMultiBodyDynamicsWorld.clearForces!(
    )
{   
    
    this.cxx_clearForces(
        );
    
    
}


btMultiBodyDynamicsWorld.removeMultiBodyConstraint!(
    in
    btMultiBodyConstraint
    constraint
    
    
    )
{   
    
    
    this.cxx_removeMultiBodyConstraint(
        constraint
        );
    
    
    
}


btMultiBodyDynamicsWorld.addMultiBody!(
    in
    btMultiBody
    body
    
    ,
    in
    SInt32
    group
    
    ,
    in
    SInt32
    mask
    
    
    )
{   
    
    
    
    
    this.cxx_addMultiBody(
        body,
        group,
        mask
        );
    
    
    
    
    
}


btMultiBodyDynamicsWorld.forwardKinematics!(
    )
{   
    
    this.cxx_forwardKinematics(
        );
    
    
}


btMultiBodyDynamicsWorld.debugDrawWorld!(
    )
{   
    
    this.cxx_debugDrawWorld(
        );
    
    
}

SInt32
btMultiBodyDynamicsWorld.getNumMultibodies?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumMultibodies(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btMultiBodyDynamicsWorld] LIB[btMultiBodyDynamicsWorld *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyDynamicsWorld.=(
    btMultiBodyDynamicsWorld that
    ) = "Bullet2__btMultiBodyDynamicsWorld__MU__simple_ass_op__4d26fec6a6d64e18fbb4b35d18f2e143";


/// \dfgPresetOmit
/// \internal
btMultiBodyDynamicsWorld.appendDesc(io String string) {
  string += "btMultiBodyDynamicsWorld:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyFixedConstraint() = "Bullet2__btMultiBodyFixedConstraint__MU__empty_ctor__d47897f10b4b75c548bf7aa03826ace6";

/// \dfgPresetOmit
btMultiBodyFixedConstraint(
    btMultiBodyFixedConstraint that
    ) = "Bullet2__btMultiBodyFixedConstraint__MU__copy_ctor__01d93ed9de547da2d039c0dbd4807eaa";

/// \dfgPresetOmit
/// \internal
btMultiBodyFixedConstraint.__ctor(
    btMultiBody body,
    SInt32 link,
    btRigidBody bodyB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtMatrix3x3ConstRef frameInA,
    CxxbtMatrix3x3ConstRef frameInB
    ) = "Bullet2__btMultiBodyFixedConstraint__MU__ctor__66df4bab344e3406bf3e2ce2b41685f9";

/// \dfgPresetOmit
btMultiBodyFixedConstraint(
    btMultiBody body,
    SInt32 link,
    btRigidBody bodyB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtMatrix3x3ConstRef frameInA,
    CxxbtMatrix3x3ConstRef frameInB
    ) {
    this.__ctor(
        body,
        link,
        bodyB,
        pivotInA,
        pivotInB,
        frameInA,
        frameInB
        );
}

/// \dfgPresetOmit
/// \internal
btMultiBodyFixedConstraint.__ctor(
    btMultiBody bodyA,
    SInt32 linkA,
    btMultiBody bodyB,
    SInt32 linkB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtMatrix3x3ConstRef frameInA,
    CxxbtMatrix3x3ConstRef frameInB
    ) = "Bullet2__btMultiBodyFixedConstraint__MU__ctor__bc64829906059795f1922ff60ce2594c";

/// \dfgPresetOmit
btMultiBodyFixedConstraint(
    btMultiBody bodyA,
    SInt32 linkA,
    btMultiBody bodyB,
    SInt32 linkB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtMatrix3x3ConstRef frameInA,
    CxxbtMatrix3x3ConstRef frameInB
    ) {
    this.__ctor(
        bodyA,
        linkA,
        bodyB,
        linkB,
        pivotInA,
        pivotInB,
        frameInA,
        frameInB
        );
}

btMultiBodyFixedConstraint(
    in
    btMultiBody
    body
    
    ,
    in
    SInt32
    link
    
    ,
    in
    btRigidBody
    bodyB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    ,
    in
    btMatrix3x3
    frameInA
    
    ,
    in
    btMatrix3x3
    frameInB
    
    
    ) {
    
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    CxxbtMatrix3x3ConstRef frameInA__cxx = Make_CxxbtMatrix3x3ConstRef(frameInA);
    
    CxxbtMatrix3x3ConstRef frameInB__cxx = Make_CxxbtMatrix3x3ConstRef(frameInB);
    this.__ctor(
        body,
        link,
        bodyB,
        pivotInA__cxx,
        pivotInB__cxx,
        frameInA__cxx,
        frameInB__cxx
        );
    
    
    
    
    
    
    
}

btMultiBodyFixedConstraint(
    in
    btMultiBody
    bodyA
    
    ,
    in
    SInt32
    linkA
    
    ,
    in
    btMultiBody
    bodyB
    
    ,
    in
    SInt32
    linkB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    ,
    in
    btMatrix3x3
    frameInA
    
    ,
    in
    btMatrix3x3
    frameInB
    
    
    ) {
    
    
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    CxxbtMatrix3x3ConstRef frameInA__cxx = Make_CxxbtMatrix3x3ConstRef(frameInA);
    
    CxxbtMatrix3x3ConstRef frameInB__cxx = Make_CxxbtMatrix3x3ConstRef(frameInB);
    this.__ctor(
        bodyA,
        linkA,
        bodyB,
        linkB,
        pivotInA__cxx,
        pivotInB__cxx,
        frameInA__cxx,
        frameInB__cxx
        );
    
    
    
    
    
    
    
    
}

btMultiBodyFixedConstraint.cxx_delete() = "Bullet2__btMultiBodyFixedConstraint__MU__delete__19c00814048b42617347013b66fb93a4";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultiBodyFixedConstraint.cxx_finalizeMultiDof!(
    )
 = "Bullet2__btMultiBodyFixedConstraint__MU__meth_finalizeMultiDof__60db20dc495b7969175c76d18d362e26";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyFixedConstraint.cxx_getIslandIdA?(
    )
 = "Bullet2__btMultiBodyFixedConstraint__CO__meth_getIslandIdA__cd1b4775350789380eb31f1df12ab57e";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyFixedConstraint.cxx_getIslandIdB?(
    )
 = "Bullet2__btMultiBodyFixedConstraint__CO__meth_getIslandIdB__a0a92dbaa32bdf81e5c16a2240607d0e";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBodyFixedConstraint.cxx_getPivotInA?(
    )
 = "Bullet2__btMultiBodyFixedConstraint__CO__meth_getPivotInA__419ddda3729bb5b789873eeb96df34d4";

/// \dfgPresetOmit
/// \internal

btMultiBodyFixedConstraint.cxx_setPivotInA!(
    CxxbtVector3ConstRef pivotInA
    )
 = "Bullet2__btMultiBodyFixedConstraint__MU__meth_setPivotInA__1c984eb9cc10017835df1ffee2eee6ed";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBodyFixedConstraint.cxx_getPivotInB?(
    )
 = "Bullet2__btMultiBodyFixedConstraint__CO__meth_getPivotInB__514c4cf39e70fc92792347b118b17ace";

/// \dfgPresetOmit
/// \internal

btMultiBodyFixedConstraint.cxx_setPivotInB!(
    CxxbtVector3ConstRef pivotInB
    )
 = "Bullet2__btMultiBodyFixedConstraint__MU__meth_setPivotInB__741c87e756abe758c6bee6547491e8a7";

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
btMultiBodyFixedConstraint.cxx_getFrameInA?(
    )
 = "Bullet2__btMultiBodyFixedConstraint__CO__meth_getFrameInA__863c40fe0af14dd0eaa061b1283a53ad";

/// \dfgPresetOmit
/// \internal

btMultiBodyFixedConstraint.cxx_setFrameInA!(
    CxxbtMatrix3x3ConstRef frameInA
    )
 = "Bullet2__btMultiBodyFixedConstraint__MU__meth_setFrameInA__3cddc0eb8c919c60ac88deeb1da543c5";

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
btMultiBodyFixedConstraint.cxx_getFrameInB?(
    )
 = "Bullet2__btMultiBodyFixedConstraint__CO__meth_getFrameInB__553e85ef806bf2f7bebc029b9a739f00";

/// \dfgPresetOmit
/// \internal

btMultiBodyFixedConstraint.cxx_setFrameInB!(
    CxxbtMatrix3x3ConstRef frameInB
    )
 = "Bullet2__btMultiBodyFixedConstraint__MU__meth_setFrameInB__cfa8cbb36a2f98fc23c9147557ecdfed";

SInt32
btMultiBodyFixedConstraint.getIslandIdB?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdB(
        );
    
    return __res;
}

btMatrix3x3
btMultiBodyFixedConstraint.getFrameInB?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getFrameInB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btMultiBodyFixedConstraint.getPivotInA?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPivotInA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBodyFixedConstraint.setFrameInB!(
    in
    btMatrix3x3
    frameInB
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef frameInB__cxx = Make_CxxbtMatrix3x3ConstRef(frameInB);
    
    this.cxx_setFrameInB(
        frameInB__cxx
        );
    
    
    
}

btMatrix3x3
btMultiBodyFixedConstraint.getFrameInA?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getFrameInA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBodyFixedConstraint.setFrameInA!(
    in
    btMatrix3x3
    frameInA
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef frameInA__cxx = Make_CxxbtMatrix3x3ConstRef(frameInA);
    
    this.cxx_setFrameInA(
        frameInA__cxx
        );
    
    
    
}

SInt32
btMultiBodyFixedConstraint.getIslandIdA?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdA(
        );
    
    return __res;
}

btVector3
btMultiBodyFixedConstraint.getPivotInB?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPivotInB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBodyFixedConstraint.setPivotInA!(
    in
    btVector3
    pivotInA
    
    
    )
{   
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    this.cxx_setPivotInA(
        pivotInA__cxx
        );
    
    
    
}


btMultiBodyFixedConstraint.setPivotInB!(
    in
    btVector3
    pivotInB
    
    
    )
{   
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    this.cxx_setPivotInB(
        pivotInB__cxx
        );
    
    
    
}


btMultiBodyFixedConstraint.finalizeMultiDof!(
    )
{   
    
    this.cxx_finalizeMultiDof(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyFixedConstraint] EDK[Fabric_EDK_KL_btMultiBodyFixedConstraint] LIB[btMultiBodyFixedConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyFixedConstraint.=(
    btMultiBodyFixedConstraint that
    ) = "Bullet2__btMultiBodyFixedConstraint__MU__simple_ass_op__7ddcf7056194bfb3c647587d81bfc422";


/// \dfgPresetOmit
/// \internal
btMultiBodyFixedConstraint.appendDesc(io String string) {
  string += "btMultiBodyFixedConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointFeedback] EDK[Fabric_EDK_KL_btMultiBodyJointFeedback] LIB[btMultiBodyJointFeedback *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointFeedback] EDK[Fabric_EDK_KL_btMultiBodyJointFeedback] LIB[btMultiBodyJointFeedback *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointFeedback] EDK[Fabric_EDK_KL_btMultiBodyJointFeedback] LIB[btMultiBodyJointFeedback *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyJointFeedback() = "Bullet2__btMultiBodyJointFeedback__MU__empty_ctor__ab6692cf28abf6babe698dcb9fd2efc6";

/// \dfgPresetOmit
btMultiBodyJointFeedback(
    btMultiBodyJointFeedback that
    ) = "Bullet2__btMultiBodyJointFeedback__MU__copy_ctor__905c281e8e71d49aa4e817424b0ffbf4";

btMultiBodyJointFeedback.cxx_delete() = "Bullet2__btMultiBodyJointFeedback__MU__delete__3f2671bf9ea4813c5f4a785d6e58d807";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointFeedback] EDK[Fabric_EDK_KL_btMultiBodyJointFeedback] LIB[btMultiBodyJointFeedback *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointFeedback] EDK[Fabric_EDK_KL_btMultiBodyJointFeedback] LIB[btMultiBodyJointFeedback *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointFeedback] EDK[Fabric_EDK_KL_btMultiBodyJointFeedback] LIB[btMultiBodyJointFeedback *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyJointFeedback.=(
    btMultiBodyJointFeedback that
    ) = "Bullet2__btMultiBodyJointFeedback__MU__simple_ass_op__ef396cf767286f10992d389b3da9a936";


/// \dfgPresetOmit
/// \internal
btMultiBodyJointFeedback.appendDesc(io String string) {
  string += "btMultiBodyJointFeedback:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyJointLimitConstraint() = "Bullet2__btMultiBodyJointLimitConstraint__MU__empty_ctor__8c9fc86a2f702d2ca5f08ce46567f107";

/// \dfgPresetOmit
btMultiBodyJointLimitConstraint(
    btMultiBodyJointLimitConstraint that
    ) = "Bullet2__btMultiBodyJointLimitConstraint__MU__copy_ctor__d5071ca5c63b2da1a43e66db07681484";

/// \dfgPresetOmit
/// \internal
btMultiBodyJointLimitConstraint.__ctor(
    btMultiBody body,
    SInt32 link,
    Float32 lower,
    Float32 upper
    ) = "Bullet2__btMultiBodyJointLimitConstraint__MU__ctor__215a27ec5f80e3694291c2d7f9517cc1";

/// \dfgPresetOmit
btMultiBodyJointLimitConstraint(
    btMultiBody body,
    SInt32 link,
    Float32 lower,
    Float32 upper
    ) {
    this.__ctor(
        body,
        link,
        lower,
        upper
        );
}

btMultiBodyJointLimitConstraint.cxx_delete() = "Bullet2__btMultiBodyJointLimitConstraint__MU__delete__cce0da5bcacd8ad591849a73a980a3aa";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultiBodyJointLimitConstraint.cxx_finalizeMultiDof!(
    )
 = "Bullet2__btMultiBodyJointLimitConstraint__MU__meth_finalizeMultiDof__8e223d3749d2213cb938553c84695525";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyJointLimitConstraint.cxx_getIslandIdA?(
    )
 = "Bullet2__btMultiBodyJointLimitConstraint__CO__meth_getIslandIdA__12856854a03c493ca3d19a07152b1f56";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyJointLimitConstraint.cxx_getIslandIdB?(
    )
 = "Bullet2__btMultiBodyJointLimitConstraint__CO__meth_getIslandIdB__952e134c7def6f3053df0afa98e77604";

SInt32
btMultiBodyJointLimitConstraint.getIslandIdB?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdB(
        );
    
    return __res;
}


btMultiBodyJointLimitConstraint.finalizeMultiDof!(
    )
{   
    
    this.cxx_finalizeMultiDof(
        );
    
    
}

SInt32
btMultiBodyJointLimitConstraint.getIslandIdA?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdA(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointLimitConstraint] EDK[Fabric_EDK_KL_btMultiBodyJointLimitConstraint] LIB[btMultiBodyJointLimitConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyJointLimitConstraint.=(
    btMultiBodyJointLimitConstraint that
    ) = "Bullet2__btMultiBodyJointLimitConstraint__MU__simple_ass_op__d1fc4e59f34a84f9d9596f1e142c59bd";


/// \dfgPresetOmit
/// \internal
btMultiBodyJointLimitConstraint.appendDesc(io String string) {
  string += "btMultiBodyJointLimitConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyJointMotor() = "Bullet2__btMultiBodyJointMotor__MU__empty_ctor__ac8d85ed5913635fed6af783b9c6b6e3";

/// \dfgPresetOmit
btMultiBodyJointMotor(
    btMultiBodyJointMotor that
    ) = "Bullet2__btMultiBodyJointMotor__MU__copy_ctor__3e67d9e341acdd6242325cac4c2460f8";

/// \dfgPresetOmit
/// \internal
btMultiBodyJointMotor.__ctor(
    btMultiBody body,
    SInt32 link,
    Float32 desiredVelocity,
    Float32 maxMotorImpulse
    ) = "Bullet2__btMultiBodyJointMotor__MU__ctor__1401fade1f8234dff79aa67eee08c7ff";

/// \dfgPresetOmit
btMultiBodyJointMotor(
    btMultiBody body,
    SInt32 link,
    Float32 desiredVelocity,
    Float32 maxMotorImpulse
    ) {
    this.__ctor(
        body,
        link,
        desiredVelocity,
        maxMotorImpulse
        );
}

/// \dfgPresetOmit
/// \internal
btMultiBodyJointMotor.__ctor(
    btMultiBody body,
    SInt32 link,
    SInt32 linkDoF,
    Float32 desiredVelocity,
    Float32 maxMotorImpulse
    ) = "Bullet2__btMultiBodyJointMotor__MU__ctor__0e2f0ee5138826c9746fa524cf44272d";

/// \dfgPresetOmit
btMultiBodyJointMotor(
    btMultiBody body,
    SInt32 link,
    SInt32 linkDoF,
    Float32 desiredVelocity,
    Float32 maxMotorImpulse
    ) {
    this.__ctor(
        body,
        link,
        linkDoF,
        desiredVelocity,
        maxMotorImpulse
        );
}

btMultiBodyJointMotor.cxx_delete() = "Bullet2__btMultiBodyJointMotor__MU__delete__37fbc9364440b26a0d6df83bee35b969";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultiBodyJointMotor.cxx_finalizeMultiDof!(
    )
 = "Bullet2__btMultiBodyJointMotor__MU__meth_finalizeMultiDof__0665e7439815b840470a43c12b361327";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyJointMotor.cxx_getIslandIdA?(
    )
 = "Bullet2__btMultiBodyJointMotor__CO__meth_getIslandIdA__bea67cae6ae8085f4d1f8c225f642593";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyJointMotor.cxx_getIslandIdB?(
    )
 = "Bullet2__btMultiBodyJointMotor__CO__meth_getIslandIdB__ba0193194bc0b7ccbab08fc756d77fb6";

/// \dfgPresetOmit
/// \internal

btMultiBodyJointMotor.cxx_setVelocityTarget!(
    Float32 velTarget
    )
 = "Bullet2__btMultiBodyJointMotor__MU__meth_setVelocityTarget__5005fcde7e32fd4f7ec7587cab76f754";

/// \dfgPresetOmit
/// \internal

btMultiBodyJointMotor.cxx_setVelocityTarget!(
    Float32 velTarget,
    Float32 kd
    )
 = "Bullet2__btMultiBodyJointMotor__MU__meth_setVelocityTarget__6092c28b38484f42913620ee1250c761";

/// \dfgPresetOmit
/// \internal

btMultiBodyJointMotor.cxx_setPositionTarget!(
    Float32 posTarget
    )
 = "Bullet2__btMultiBodyJointMotor__MU__meth_setPositionTarget__6113fd8700236c40c080f09a2a2d62cc";

/// \dfgPresetOmit
/// \internal

btMultiBodyJointMotor.cxx_setPositionTarget!(
    Float32 posTarget,
    Float32 kp
    )
 = "Bullet2__btMultiBodyJointMotor__MU__meth_setPositionTarget__86f403bf7ee6e642f6cc2699589a4e5d";

/// \dfgPresetOmit
/// \internal

btMultiBodyJointMotor.cxx_setErp!(
    Float32 erp
    )
 = "Bullet2__btMultiBodyJointMotor__MU__meth_setErp__5a8fbea4efb77d383eedf55409e65349";

/// \dfgPresetOmit
/// \internal
Float32
btMultiBodyJointMotor.cxx_getErp?(
    )
 = "Bullet2__btMultiBodyJointMotor__CO__meth_getErp__aa215c18f49a914a13ed4cefbbf9471f";

/// \dfgPresetOmit
/// \internal

btMultiBodyJointMotor.cxx_setRhsClamp!(
    Float32 rhsClamp
    )
 = "Bullet2__btMultiBodyJointMotor__MU__meth_setRhsClamp__da7ff9dc26925f4e84425fccb68d3f75";


btMultiBodyJointMotor.setVelocityTarget!(
    in
    Float32
    velTarget
    
    ,
    in
    Float32
    kd
    
    
    )
{   
    
    
    
    this.cxx_setVelocityTarget(
        velTarget,
        kd
        );
    
    
    
    
}


btMultiBodyJointMotor.setErp!(
    in
    Float32
    erp
    
    
    )
{   
    
    
    this.cxx_setErp(
        erp
        );
    
    
    
}


btMultiBodyJointMotor.setRhsClamp!(
    in
    Float32
    rhsClamp
    
    
    )
{   
    
    
    this.cxx_setRhsClamp(
        rhsClamp
        );
    
    
    
}

SInt32
btMultiBodyJointMotor.getIslandIdA?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdA(
        );
    
    return __res;
}


btMultiBodyJointMotor.finalizeMultiDof!(
    )
{   
    
    this.cxx_finalizeMultiDof(
        );
    
    
}

SInt32
btMultiBodyJointMotor.getIslandIdB?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdB(
        );
    
    return __res;
}


btMultiBodyJointMotor.setVelocityTarget!(
    in
    Float32
    velTarget
    
    
    )
{   
    
    
    this.cxx_setVelocityTarget(
        velTarget
        );
    
    
    
}


btMultiBodyJointMotor.setPositionTarget!(
    in
    Float32
    posTarget
    
    
    )
{   
    
    
    this.cxx_setPositionTarget(
        posTarget
        );
    
    
    
}

Float32
btMultiBodyJointMotor.getErp?(
    )
{   
    Float32 __res = 
    this.cxx_getErp(
        );
    
    return __res;
}


btMultiBodyJointMotor.setPositionTarget!(
    in
    Float32
    posTarget
    
    ,
    in
    Float32
    kp
    
    
    )
{   
    
    
    
    this.cxx_setPositionTarget(
        posTarget,
        kp
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyJointMotor] EDK[Fabric_EDK_KL_btMultiBodyJointMotor] LIB[btMultiBodyJointMotor *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyJointMotor.=(
    btMultiBodyJointMotor that
    ) = "Bullet2__btMultiBodyJointMotor__MU__simple_ass_op__bf7a41f25a73ca1a17c65eb1675adb5b";


/// \dfgPresetOmit
/// \internal
btMultiBodyJointMotor.appendDesc(io String string) {
  string += "btMultiBodyJointMotor:MANAGED";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btMultibodyLink(
    btMultibodyLink that
    ) = "Bullet2__btMultibodyLink__MU__copy_ctor__58ed09745acf52cead640cde41cf939c";

/// \dfgPresetOmit
/// \internal
btMultibodyLink.__ctor(
    ) = "Bullet2__btMultibodyLink__MU__ctor__907dfe48ab2fbca89e289554ceae016a";

/// \dfgPresetOmit
btMultibodyLink(
    ) {
    this.__ctor(
        );
}

btMultibodyLink.cxx_delete() = "Bullet2__btMultibodyLink__MU__delete__9d6301f87e881448c4b83566b21916c8";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultibodyLink.cxx_setAxisTop!(
    SInt32 dof,
    CxxbtVector3ConstRef axis
    )
 = "Bullet2__btMultibodyLink__MU__meth_setAxisTop__f3dae3a337e0ebc89468c6789150b96b";

/// \dfgPresetOmit
/// \internal

btMultibodyLink.cxx_setAxisBottom!(
    SInt32 dof,
    CxxbtVector3ConstRef axis
    )
 = "Bullet2__btMultibodyLink__MU__meth_setAxisBottom__4413cde61002fafc4ce07cf7348bb9ef";

/// \dfgPresetOmit
/// \internal

btMultibodyLink.cxx_setAxisTop!(
    SInt32 dof,
    CxxFloat32ConstRef x,
    CxxFloat32ConstRef y,
    CxxFloat32ConstRef z
    )
 = "Bullet2__btMultibodyLink__MU__meth_setAxisTop__870a1272108cbf86792d5ab96a5c2b4e";

/// \dfgPresetOmit
/// \internal

btMultibodyLink.cxx_setAxisBottom!(
    SInt32 dof,
    CxxFloat32ConstRef x,
    CxxFloat32ConstRef y,
    CxxFloat32ConstRef z
    )
 = "Bullet2__btMultibodyLink__MU__meth_setAxisBottom__f15335d32bff7ed6bf9fc41d5234e884";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultibodyLink.cxx_getAxisTop?(
    SInt32 dof
    )
 = "Bullet2__btMultibodyLink__CO__meth_getAxisTop__9231f384f49a187b1ceef694fa42a83f";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultibodyLink.cxx_getAxisBottom?(
    SInt32 dof
    )
 = "Bullet2__btMultibodyLink__CO__meth_getAxisBottom__fbde1504d1d9569c486767fb9f451747";

/// \dfgPresetOmit
/// \internal

btMultibodyLink.cxx_updateCacheMultiDof!(
    )
 = "Bullet2__btMultibodyLink__MU__meth_updateCacheMultiDof__2199095ce39f95049e840600cb4bb77b";

/// \dfgPresetOmit
/// \internal

btMultibodyLink.cxx_updateCacheMultiDof!(
    CxxFloat32Ptr pq
    )
 = "Bullet2__btMultibodyLink__MU__meth_updateCacheMultiDof__b35db6f7512e5f786c5f29297bd74590";


btMultibodyLink.setAxisTop!(
    in
    SInt32
    dof
    
    ,
    in
    Float32
    x
    
    ,
    in
    Float32
    y
    
    ,
    in
    Float32
    z
    
    
    )
{   
    
    
    CxxFloat32ConstRef x__cxx = Make_CxxFloat32ConstRef(x);
    
    CxxFloat32ConstRef y__cxx = Make_CxxFloat32ConstRef(y);
    
    CxxFloat32ConstRef z__cxx = Make_CxxFloat32ConstRef(z);
    
    this.cxx_setAxisTop(
        dof,
        x__cxx,
        y__cxx,
        z__cxx
        );
    
    
    
    
    
    
}


btMultibodyLink.setAxisTop!(
    in
    SInt32
    dof
    
    ,
    in
    btVector3
    axis
    
    
    )
{   
    
    
    CxxbtVector3ConstRef axis__cxx = Make_CxxbtVector3ConstRef(axis);
    
    this.cxx_setAxisTop(
        dof,
        axis__cxx
        );
    
    
    
    
}


btMultibodyLink.setAxisBottom!(
    in
    SInt32
    dof
    
    ,
    in
    Float32
    x
    
    ,
    in
    Float32
    y
    
    ,
    in
    Float32
    z
    
    
    )
{   
    
    
    CxxFloat32ConstRef x__cxx = Make_CxxFloat32ConstRef(x);
    
    CxxFloat32ConstRef y__cxx = Make_CxxFloat32ConstRef(y);
    
    CxxFloat32ConstRef z__cxx = Make_CxxFloat32ConstRef(z);
    
    this.cxx_setAxisBottom(
        dof,
        x__cxx,
        y__cxx,
        z__cxx
        );
    
    
    
    
    
    
}

btVector3
btMultibodyLink.getAxisBottom?(
    in
    SInt32
    dof
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAxisBottom(
        dof
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultibodyLink.updateCacheMultiDof!(
    )
{   
    
    this.cxx_updateCacheMultiDof(
        );
    
    
}


btMultibodyLink.updateCacheMultiDof!(
    io
    Float32
    pq
    
    
    )
{   
    
    CxxFloat32Ptr pq__cxx = Make_CxxFloat32Ptr(pq);
    
    this.cxx_updateCacheMultiDof(
        pq__cxx
        );
    
    
    
}

btVector3
btMultibodyLink.getAxisTop?(
    in
    SInt32
    dof
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAxisTop(
        dof
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultibodyLink.setAxisBottom!(
    in
    SInt32
    dof
    
    ,
    in
    btVector3
    axis
    
    
    )
{   
    
    
    CxxbtVector3ConstRef axis__cxx = Make_CxxbtVector3ConstRef(axis);
    
    this.cxx_setAxisBottom(
        dof,
        axis__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultibodyLink] EDK[Fabric_EDK_KL_btMultibodyLink] LIB[btMultibodyLink *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultibodyLink.=(
    btMultibodyLink that
    ) = "Bullet2__btMultibodyLink__MU__simple_ass_op__b1e56d0b042c725c2d52f7117075ebe3";


/// \dfgPresetOmit
/// \internal
btMultibodyLink.appendDesc(io String string) {
  string += "btMultibodyLink:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyLinkCollider() = "Bullet2__btMultiBodyLinkCollider__MU__empty_ctor__5c27b07765c3e46893d5fbb4c21a118b";

/// \dfgPresetOmit
btMultiBodyLinkCollider(
    btMultiBodyLinkCollider that
    ) = "Bullet2__btMultiBodyLinkCollider__MU__copy_ctor__08019137480249213da86c2eed222821";

/// \dfgPresetOmit
/// \internal
btMultiBodyLinkCollider.__ctor(
    btMultiBody multiBody,
    SInt32 link
    ) = "Bullet2__btMultiBodyLinkCollider__MU__ctor__cb27b6c95dfa8441437a92c76950073c";

/// \dfgPresetOmit
btMultiBodyLinkCollider(
    btMultiBody multiBody,
    SInt32 link
    ) {
    this.__ctor(
        multiBody,
        link
        );
}

btMultiBodyLinkCollider.cxx_delete() = "Bullet2__btMultiBodyLinkCollider__MU__delete__9924acab8e17af95103f276f8cbf7068";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btMultiBodyLinkCollider
btMultiBodyLinkCollider_Cxxupcast(
    btCollisionObject colObj
    )
 = "Bullet2__btMultiBodyLinkCollider__ST__meth_upcast__428d029f0e18491af4b5b0977bbb36a2";

/// \dfgPresetOmit
/// \internal
Boolean
btMultiBodyLinkCollider.cxx_checkCollideWithOverride?(
    btCollisionObject co
    )
 = "Bullet2__btMultiBodyLinkCollider__CO__meth_checkCollideWithOverride__ded3247499d5f25bf6272a625b791833";

Boolean
btMultiBodyLinkCollider.checkCollideWithOverride?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWithOverride(
        co
        );
    
    
    return __res;
}

btMultiBodyLinkCollider
btMultiBodyLinkCollider_upcast(
    in
    btCollisionObject
    colObj
    
    
    )
{   
    
    btMultiBodyLinkCollider __res = 
    btMultiBodyLinkCollider_Cxxupcast(
        colObj
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyLinkCollider] EDK[Fabric_EDK_KL_btMultiBodyLinkCollider] LIB[btMultiBodyLinkCollider *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyLinkCollider.=(
    btMultiBodyLinkCollider that
    ) = "Bullet2__btMultiBodyLinkCollider__MU__simple_ass_op__d269f1c3765d8ca39ae0134768918211";


/// \dfgPresetOmit
/// \internal
btMultiBodyLinkCollider.appendDesc(io String string) {
  string += "btMultiBodyLinkCollider:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodyPoint2Point() = "Bullet2__btMultiBodyPoint2Point__MU__empty_ctor__3a87cf004bab4a67e07e5d262a5eded2";

/// \dfgPresetOmit
btMultiBodyPoint2Point(
    btMultiBodyPoint2Point that
    ) = "Bullet2__btMultiBodyPoint2Point__MU__copy_ctor__bed36b3d548f8c532c7b83a1a4c271a4";

/// \dfgPresetOmit
/// \internal
btMultiBodyPoint2Point.__ctor(
    btMultiBody body,
    SInt32 link,
    btRigidBody bodyB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB
    ) = "Bullet2__btMultiBodyPoint2Point__MU__ctor__a3c80e7b619ff799bc1c04b970822fb5";

/// \dfgPresetOmit
btMultiBodyPoint2Point(
    btMultiBody body,
    SInt32 link,
    btRigidBody bodyB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB
    ) {
    this.__ctor(
        body,
        link,
        bodyB,
        pivotInA,
        pivotInB
        );
}

/// \dfgPresetOmit
/// \internal
btMultiBodyPoint2Point.__ctor(
    btMultiBody bodyA,
    SInt32 linkA,
    btMultiBody bodyB,
    SInt32 linkB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB
    ) = "Bullet2__btMultiBodyPoint2Point__MU__ctor__fad678afe489629836474a09b1b9d59c";

/// \dfgPresetOmit
btMultiBodyPoint2Point(
    btMultiBody bodyA,
    SInt32 linkA,
    btMultiBody bodyB,
    SInt32 linkB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB
    ) {
    this.__ctor(
        bodyA,
        linkA,
        bodyB,
        linkB,
        pivotInA,
        pivotInB
        );
}

btMultiBodyPoint2Point(
    in
    btMultiBody
    body
    
    ,
    in
    SInt32
    link
    
    ,
    in
    btRigidBody
    bodyB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    
    ) {
    
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    this.__ctor(
        body,
        link,
        bodyB,
        pivotInA__cxx,
        pivotInB__cxx
        );
    
    
    
    
    
}

btMultiBodyPoint2Point(
    in
    btMultiBody
    bodyA
    
    ,
    in
    SInt32
    linkA
    
    ,
    in
    btMultiBody
    bodyB
    
    ,
    in
    SInt32
    linkB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    
    ) {
    
    
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    this.__ctor(
        bodyA,
        linkA,
        bodyB,
        linkB,
        pivotInA__cxx,
        pivotInB__cxx
        );
    
    
    
    
    
    
}

btMultiBodyPoint2Point.cxx_delete() = "Bullet2__btMultiBodyPoint2Point__MU__delete__27cd0c368e7d0bac10f7dd5391e67bc9";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultiBodyPoint2Point.cxx_finalizeMultiDof!(
    )
 = "Bullet2__btMultiBodyPoint2Point__MU__meth_finalizeMultiDof__26f92a55e0a5ce2b9f0f4933e151b5af";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyPoint2Point.cxx_getIslandIdA?(
    )
 = "Bullet2__btMultiBodyPoint2Point__CO__meth_getIslandIdA__3d8a066cf9fcb384ec9f47ee133c1953";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodyPoint2Point.cxx_getIslandIdB?(
    )
 = "Bullet2__btMultiBodyPoint2Point__CO__meth_getIslandIdB__2d560bacf41454014dce24cd53dee1ec";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBodyPoint2Point.cxx_getPivotInB?(
    )
 = "Bullet2__btMultiBodyPoint2Point__CO__meth_getPivotInB__271875e8d69ef02ebc343ea199a85d53";

/// \dfgPresetOmit
/// \internal

btMultiBodyPoint2Point.cxx_setPivotInB!(
    CxxbtVector3ConstRef pivotInB
    )
 = "Bullet2__btMultiBodyPoint2Point__MU__meth_setPivotInB__37dae78c7eb45bcce9a9d02a2d328b53";

btVector3
btMultiBodyPoint2Point.getPivotInB?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPivotInB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btMultiBodyPoint2Point.getIslandIdA?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdA(
        );
    
    return __res;
}


btMultiBodyPoint2Point.finalizeMultiDof!(
    )
{   
    
    this.cxx_finalizeMultiDof(
        );
    
    
}


btMultiBodyPoint2Point.setPivotInB!(
    in
    btVector3
    pivotInB
    
    
    )
{   
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    this.cxx_setPivotInB(
        pivotInB__cxx
        );
    
    
    
}

SInt32
btMultiBodyPoint2Point.getIslandIdB?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdB(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodyPoint2Point] EDK[Fabric_EDK_KL_btMultiBodyPoint2Point] LIB[btMultiBodyPoint2Point *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodyPoint2Point.=(
    btMultiBodyPoint2Point that
    ) = "Bullet2__btMultiBodyPoint2Point__MU__simple_ass_op__303dd29b30e60e2c0e2b86447b99311b";


/// \dfgPresetOmit
/// \internal
btMultiBodyPoint2Point.appendDesc(io String string) {
  string += "btMultiBodyPoint2Point:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMultiBodySliderConstraint() = "Bullet2__btMultiBodySliderConstraint__MU__empty_ctor__eb4467a8d56049e7682c29fd2192c33a";

/// \dfgPresetOmit
btMultiBodySliderConstraint(
    btMultiBodySliderConstraint that
    ) = "Bullet2__btMultiBodySliderConstraint__MU__copy_ctor__4a9a340ac3b9acb5f4e19db5710f2282";

/// \dfgPresetOmit
/// \internal
btMultiBodySliderConstraint.__ctor(
    btMultiBody body,
    SInt32 link,
    btRigidBody bodyB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtMatrix3x3ConstRef frameInA,
    CxxbtMatrix3x3ConstRef frameInB,
    CxxbtVector3ConstRef jointAxis
    ) = "Bullet2__btMultiBodySliderConstraint__MU__ctor__86328e0b6bc66e7e1475f787875eadd8";

/// \dfgPresetOmit
btMultiBodySliderConstraint(
    btMultiBody body,
    SInt32 link,
    btRigidBody bodyB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtMatrix3x3ConstRef frameInA,
    CxxbtMatrix3x3ConstRef frameInB,
    CxxbtVector3ConstRef jointAxis
    ) {
    this.__ctor(
        body,
        link,
        bodyB,
        pivotInA,
        pivotInB,
        frameInA,
        frameInB,
        jointAxis
        );
}

/// \dfgPresetOmit
/// \internal
btMultiBodySliderConstraint.__ctor(
    btMultiBody bodyA,
    SInt32 linkA,
    btMultiBody bodyB,
    SInt32 linkB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtMatrix3x3ConstRef frameInA,
    CxxbtMatrix3x3ConstRef frameInB,
    CxxbtVector3ConstRef jointAxis
    ) = "Bullet2__btMultiBodySliderConstraint__MU__ctor__1564531b9694b0a598cf3b8abe8723b4";

/// \dfgPresetOmit
btMultiBodySliderConstraint(
    btMultiBody bodyA,
    SInt32 linkA,
    btMultiBody bodyB,
    SInt32 linkB,
    CxxbtVector3ConstRef pivotInA,
    CxxbtVector3ConstRef pivotInB,
    CxxbtMatrix3x3ConstRef frameInA,
    CxxbtMatrix3x3ConstRef frameInB,
    CxxbtVector3ConstRef jointAxis
    ) {
    this.__ctor(
        bodyA,
        linkA,
        bodyB,
        linkB,
        pivotInA,
        pivotInB,
        frameInA,
        frameInB,
        jointAxis
        );
}

btMultiBodySliderConstraint(
    in
    btMultiBody
    bodyA
    
    ,
    in
    SInt32
    linkA
    
    ,
    in
    btMultiBody
    bodyB
    
    ,
    in
    SInt32
    linkB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    ,
    in
    btMatrix3x3
    frameInA
    
    ,
    in
    btMatrix3x3
    frameInB
    
    ,
    in
    btVector3
    jointAxis
    
    
    ) {
    
    
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    CxxbtMatrix3x3ConstRef frameInA__cxx = Make_CxxbtMatrix3x3ConstRef(frameInA);
    
    CxxbtMatrix3x3ConstRef frameInB__cxx = Make_CxxbtMatrix3x3ConstRef(frameInB);
    
    CxxbtVector3ConstRef jointAxis__cxx = Make_CxxbtVector3ConstRef(jointAxis);
    this.__ctor(
        bodyA,
        linkA,
        bodyB,
        linkB,
        pivotInA__cxx,
        pivotInB__cxx,
        frameInA__cxx,
        frameInB__cxx,
        jointAxis__cxx
        );
    
    
    
    
    
    
    
    
    
}

btMultiBodySliderConstraint(
    in
    btMultiBody
    body
    
    ,
    in
    SInt32
    link
    
    ,
    in
    btRigidBody
    bodyB
    
    ,
    in
    btVector3
    pivotInA
    
    ,
    in
    btVector3
    pivotInB
    
    ,
    in
    btMatrix3x3
    frameInA
    
    ,
    in
    btMatrix3x3
    frameInB
    
    ,
    in
    btVector3
    jointAxis
    
    
    ) {
    
    
    
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    CxxbtMatrix3x3ConstRef frameInA__cxx = Make_CxxbtMatrix3x3ConstRef(frameInA);
    
    CxxbtMatrix3x3ConstRef frameInB__cxx = Make_CxxbtMatrix3x3ConstRef(frameInB);
    
    CxxbtVector3ConstRef jointAxis__cxx = Make_CxxbtVector3ConstRef(jointAxis);
    this.__ctor(
        body,
        link,
        bodyB,
        pivotInA__cxx,
        pivotInB__cxx,
        frameInA__cxx,
        frameInB__cxx,
        jointAxis__cxx
        );
    
    
    
    
    
    
    
    
}

btMultiBodySliderConstraint.cxx_delete() = "Bullet2__btMultiBodySliderConstraint__MU__delete__c53f9ed40092ee9d83e661c411486d85";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMultiBodySliderConstraint.cxx_finalizeMultiDof!(
    )
 = "Bullet2__btMultiBodySliderConstraint__MU__meth_finalizeMultiDof__5d1591bca0c8292b1d2cfb04c8b6b21e";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodySliderConstraint.cxx_getIslandIdA?(
    )
 = "Bullet2__btMultiBodySliderConstraint__CO__meth_getIslandIdA__d4ff3f6e2c061790f89e4c5452484b22";

/// \dfgPresetOmit
/// \internal
SInt32
btMultiBodySliderConstraint.cxx_getIslandIdB?(
    )
 = "Bullet2__btMultiBodySliderConstraint__CO__meth_getIslandIdB__06ceb655430a46dcbc03ffd9a8f6afed";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBodySliderConstraint.cxx_getPivotInA?(
    )
 = "Bullet2__btMultiBodySliderConstraint__CO__meth_getPivotInA__1dfb49f63deec8363718c9b17ad2f0d2";

/// \dfgPresetOmit
/// \internal

btMultiBodySliderConstraint.cxx_setPivotInA!(
    CxxbtVector3ConstRef pivotInA
    )
 = "Bullet2__btMultiBodySliderConstraint__MU__meth_setPivotInA__74a61a11ba2fbf3dbaad5ed9d904b008";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBodySliderConstraint.cxx_getPivotInB?(
    )
 = "Bullet2__btMultiBodySliderConstraint__CO__meth_getPivotInB__080fed2c4bc9a9a481eb71fa241b0c16";

/// \dfgPresetOmit
/// \internal

btMultiBodySliderConstraint.cxx_setPivotInB!(
    CxxbtVector3ConstRef pivotInB
    )
 = "Bullet2__btMultiBodySliderConstraint__MU__meth_setPivotInB__fe61926d539c077dbc85b615d4999901";

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
btMultiBodySliderConstraint.cxx_getFrameInA?(
    )
 = "Bullet2__btMultiBodySliderConstraint__CO__meth_getFrameInA__e4581bb687500d9d551c573cac2b27e8";

/// \dfgPresetOmit
/// \internal

btMultiBodySliderConstraint.cxx_setFrameInA!(
    CxxbtMatrix3x3ConstRef frameInA
    )
 = "Bullet2__btMultiBodySliderConstraint__MU__meth_setFrameInA__a8a793c4fd3685b46e970525a8bdd326";

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
btMultiBodySliderConstraint.cxx_getFrameInB?(
    )
 = "Bullet2__btMultiBodySliderConstraint__CO__meth_getFrameInB__e5e48b52a761532c82b80f6bc1c50394";

/// \dfgPresetOmit
/// \internal

btMultiBodySliderConstraint.cxx_setFrameInB!(
    CxxbtMatrix3x3ConstRef frameInB
    )
 = "Bullet2__btMultiBodySliderConstraint__MU__meth_setFrameInB__5b25698255af976e7d5c9d40e15500bb";

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
btMultiBodySliderConstraint.cxx_getJointAxis?(
    )
 = "Bullet2__btMultiBodySliderConstraint__CO__meth_getJointAxis__e7feac1bbb7e559a2ec497773e3a98f7";

/// \dfgPresetOmit
/// \internal

btMultiBodySliderConstraint.cxx_setJointAxis!(
    CxxbtVector3ConstRef jointAxis
    )
 = "Bullet2__btMultiBodySliderConstraint__MU__meth_setJointAxis__2dae4fa79b5206509caa1a25b8ab35e5";


btMultiBodySliderConstraint.setPivotInB!(
    in
    btVector3
    pivotInB
    
    
    )
{   
    
    CxxbtVector3ConstRef pivotInB__cxx = Make_CxxbtVector3ConstRef(pivotInB);
    
    this.cxx_setPivotInB(
        pivotInB__cxx
        );
    
    
    
}


btMultiBodySliderConstraint.setPivotInA!(
    in
    btVector3
    pivotInA
    
    
    )
{   
    
    CxxbtVector3ConstRef pivotInA__cxx = Make_CxxbtVector3ConstRef(pivotInA);
    
    this.cxx_setPivotInA(
        pivotInA__cxx
        );
    
    
    
}

btMatrix3x3
btMultiBodySliderConstraint.getFrameInB?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getFrameInB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}

SInt32
btMultiBodySliderConstraint.getIslandIdA?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdA(
        );
    
    return __res;
}


btMultiBodySliderConstraint.setFrameInA!(
    in
    btMatrix3x3
    frameInA
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef frameInA__cxx = Make_CxxbtMatrix3x3ConstRef(frameInA);
    
    this.cxx_setFrameInA(
        frameInA__cxx
        );
    
    
    
}

btVector3
btMultiBodySliderConstraint.getPivotInB?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPivotInB(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBodySliderConstraint.finalizeMultiDof!(
    )
{   
    
    this.cxx_finalizeMultiDof(
        );
    
    
}


btMultiBodySliderConstraint.setFrameInB!(
    in
    btMatrix3x3
    frameInB
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef frameInB__cxx = Make_CxxbtMatrix3x3ConstRef(frameInB);
    
    this.cxx_setFrameInB(
        frameInB__cxx
        );
    
    
    
}

SInt32
btMultiBodySliderConstraint.getIslandIdB?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandIdB(
        );
    
    return __res;
}

btVector3
btMultiBodySliderConstraint.getJointAxis?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getJointAxis(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btVector3
btMultiBodySliderConstraint.getPivotInA?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getPivotInA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

btMatrix3x3
btMultiBodySliderConstraint.getFrameInA?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getFrameInA(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}


btMultiBodySliderConstraint.setJointAxis!(
    in
    btVector3
    jointAxis
    
    
    )
{   
    
    CxxbtVector3ConstRef jointAxis__cxx = Make_CxxbtVector3ConstRef(jointAxis);
    
    this.cxx_setJointAxis(
        jointAxis__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySliderConstraint] EDK[Fabric_EDK_KL_btMultiBodySliderConstraint] LIB[btMultiBodySliderConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodySliderConstraint.=(
    btMultiBodySliderConstraint that
    ) = "Bullet2__btMultiBodySliderConstraint__MU__simple_ass_op__a7caa66ef11eaac296b2c740b5fd7c6f";


/// \dfgPresetOmit
/// \internal
btMultiBodySliderConstraint.appendDesc(io String string) {
  string += "btMultiBodySliderConstraint:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMultiBodySolverConstraint] EDK[Fabric_EDK_KL_btMultiBodySolverConstraint] LIB[btMultiBodySolverConstraint *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySolverConstraint] EDK[Fabric_EDK_KL_btMultiBodySolverConstraint] LIB[btMultiBodySolverConstraint *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySolverConstraint] EDK[Fabric_EDK_KL_btMultiBodySolverConstraint] LIB[btMultiBodySolverConstraint *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btMultiBodySolverConstraint(
    btMultiBodySolverConstraint that
    ) = "Bullet2__btMultiBodySolverConstraint__MU__copy_ctor__ce97f335bf18784497b0688dca58a9c1";

/// \dfgPresetOmit
/// \internal
btMultiBodySolverConstraint.__ctor(
    ) = "Bullet2__btMultiBodySolverConstraint__MU__ctor__6b0a3f3e531cbab6a22e94558e9a0f34";

/// \dfgPresetOmit
btMultiBodySolverConstraint(
    ) {
    this.__ctor(
        );
}

btMultiBodySolverConstraint.cxx_delete() = "Bullet2__btMultiBodySolverConstraint__MU__delete__f6c1574e4177cf4210cc46655c563f18";

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySolverConstraint] EDK[Fabric_EDK_KL_btMultiBodySolverConstraint] LIB[btMultiBodySolverConstraint *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySolverConstraint] EDK[Fabric_EDK_KL_btMultiBodySolverConstraint] LIB[btMultiBodySolverConstraint *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMultiBodySolverConstraint] EDK[Fabric_EDK_KL_btMultiBodySolverConstraint] LIB[btMultiBodySolverConstraint *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMultiBodySolverConstraint.=(
    btMultiBodySolverConstraint that
    ) = "Bullet2__btMultiBodySolverConstraint__MU__simple_ass_op__68cf4275c1687db6292d0ade7b3af0de";


/// \dfgPresetOmit
/// \internal
btMultiBodySolverConstraint.appendDesc(io String string) {
  string += "btMultiBodySolverConstraint:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}




//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btSoftMultiBodyDynamicsWorld() = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__empty_ctor__891f6c4d56546ccc19b5020eca780625";

/// \dfgPresetOmit
btSoftMultiBodyDynamicsWorld(
    btSoftMultiBodyDynamicsWorld that
    ) = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__copy_ctor__ca826800e99aff000742bcbfe813d167";

/// \dfgPresetOmit
/// \internal
btSoftMultiBodyDynamicsWorld.__ctor(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btMultiBodyConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__ctor__6e558f65eb7e886322267daef302a4f1";

/// \dfgPresetOmit
btSoftMultiBodyDynamicsWorld(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btMultiBodyConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration
    ) {
    this.__ctor(
        dispatcher,
        pairCache,
        constraintSolver,
        collisionConfiguration
        );
}

/// \dfgPresetOmit
/// \internal
btSoftMultiBodyDynamicsWorld.__ctor(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btMultiBodyConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration,
    btSoftBodySolver softBodySolver
    ) = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__ctor__a8fb491df4ca670200b1ef0fc94a73ef";

/// \dfgPresetOmit
btSoftMultiBodyDynamicsWorld(
    btDispatcher dispatcher,
    btBroadphaseInterface pairCache,
    btMultiBodyConstraintSolver constraintSolver,
    btCollisionConfiguration collisionConfiguration,
    btSoftBodySolver softBodySolver
    ) {
    this.__ctor(
        dispatcher,
        pairCache,
        constraintSolver,
        collisionConfiguration,
        softBodySolver
        );
}

btSoftMultiBodyDynamicsWorld.cxx_delete() = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__delete__38cec23abdd09e61002633b6e51ef721";

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld.cxx_debugDrawWorld!(
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__meth_debugDrawWorld__8795bfe5f1af43af0713fca0eb8d65e0";

/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld.cxx_addSoftBody!(
    btSoftBody body
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__meth_addSoftBody__12f6a2ee7f9d3a137a76822f4fb826be";

/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld.cxx_addSoftBody!(
    btSoftBody body,
    SInt32 collisionFilterGroup
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__meth_addSoftBody__653042662db56da60cadd16f8f2a0063";

/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld.cxx_addSoftBody!(
    btSoftBody body,
    SInt32 collisionFilterGroup,
    SInt32 collisionFilterMask
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__meth_addSoftBody__fcd1df7e3f2ceca58a837bf3e135aacc";

/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld.cxx_removeSoftBody!(
    btSoftBody body
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__meth_removeSoftBody__df57ca5ea001306e845a30122fd488eb";

///removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btDiscreteDynamicsWorld::removeCollisionObject
/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld.cxx_removeCollisionObject!(
    btCollisionObject collisionObject
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__meth_removeCollisionObject__80798915c47fcfd889eda24c2c39313f";

/// \dfgPresetOmit
/// \internal
SInt32
btSoftMultiBodyDynamicsWorld.cxx_getDrawFlags?(
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__CO__meth_getDrawFlags__71c502872b2cb1a06f9a5502f7de267c";

/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld.cxx_setDrawFlags!(
    SInt32 f
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__meth_setDrawFlags__16bf9561cb4e91a5270f18f77bb4c697";

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
btSoftMultiBodyDynamicsWorld.cxx_getWorldInfo!(
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__meth_getWorldInfo__a2b66ffa1b61a4b4d8186d67ee369801";

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
btSoftMultiBodyDynamicsWorld.cxx_getWorldInfo?(
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__CO__meth_getWorldInfo__2905fb86dbf07037b1ec0ec131a7b793";

/// \dfgPresetOmit
/// \internal
btDynamicsWorldType
btSoftMultiBodyDynamicsWorld.cxx_getWorldType?(
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__CO__meth_getWorldType__70fb234db1aaa8206738ab44b6fd28c3";

/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld.cxx_rayTest?(
    CxxbtVector3ConstRef rayFromWorld,
    CxxbtVector3ConstRef rayToWorld,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__CO__meth_rayTest__1e53e6a7a60cc089d307a5b06b6d0289";

/// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
/// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
/// This allows more customization.
/// \dfgPresetOmit
/// \internal

btSoftMultiBodyDynamicsWorld_CxxrayTestSingle(
    CxxbtTransformConstRef rayFromTrans,
    CxxbtTransformConstRef rayToTrans,
    btCollisionObject collisionObject,
    btCollisionShape collisionShape,
    CxxbtTransformConstRef colObjWorldTransform,
    btCollisionWorld_RayResultCallback resultCallback
    )
 = "Bullet2__btSoftMultiBodyDynamicsWorld__ST__meth_rayTestSingle__21641eb9e624f05011343130f8636088";

btDynamicsWorldType
btSoftMultiBodyDynamicsWorld.getWorldType?(
    )
{   
    btDynamicsWorldType __res = 
    this.cxx_getWorldType(
        );
    
    return __res;
}

/// rayTestSingle performs a raycast call and calls the resultCallback. It is used internally by rayTest.
/// In a future implementation, we consider moving the ray test as a virtual method in btCollisionShape.
/// This allows more customization.

btSoftMultiBodyDynamicsWorld_rayTestSingle(
    in
    btTransform
    rayFromTrans
    
    ,
    in
    btTransform
    rayToTrans
    
    ,
    in
    btCollisionObject
    collisionObject
    
    ,
    in
    btCollisionShape
    collisionShape
    
    ,
    in
    btTransform
    colObjWorldTransform
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtTransformConstRef rayFromTrans__cxx = Make_CxxbtTransformConstRef(rayFromTrans);
    
    CxxbtTransformConstRef rayToTrans__cxx = Make_CxxbtTransformConstRef(rayToTrans);
    
    
    
    CxxbtTransformConstRef colObjWorldTransform__cxx = Make_CxxbtTransformConstRef(colObjWorldTransform);
    
    
    btSoftMultiBodyDynamicsWorld_CxxrayTestSingle(
        rayFromTrans__cxx,
        rayToTrans__cxx,
        collisionObject,
        collisionShape,
        colObjWorldTransform__cxx,
        resultCallback
        );
    
    
    
    
    
    
    
    
}


btSoftMultiBodyDynamicsWorld.addSoftBody!(
    in
    btSoftBody
    body
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    
    )
{   
    
    
    
    this.cxx_addSoftBody(
        body,
        collisionFilterGroup
        );
    
    
    
    
}

SInt32
btSoftMultiBodyDynamicsWorld.getDrawFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getDrawFlags(
        );
    
    return __res;
}


btSoftMultiBodyDynamicsWorld.addSoftBody!(
    in
    btSoftBody
    body
    
    ,
    in
    SInt32
    collisionFilterGroup
    
    ,
    in
    SInt32
    collisionFilterMask
    
    
    )
{   
    
    
    
    
    this.cxx_addSoftBody(
        body,
        collisionFilterGroup,
        collisionFilterMask
        );
    
    
    
    
    
}


btSoftMultiBodyDynamicsWorld.rayTest?(
    in
    btVector3
    rayFromWorld
    
    ,
    in
    btVector3
    rayToWorld
    
    ,
    in
    btCollisionWorld_RayResultCallback
    resultCallback
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFromWorld__cxx = Make_CxxbtVector3ConstRef(rayFromWorld);
    
    CxxbtVector3ConstRef rayToWorld__cxx = Make_CxxbtVector3ConstRef(rayToWorld);
    
    
    this.cxx_rayTest(
        rayFromWorld__cxx,
        rayToWorld__cxx,
        resultCallback
        );
    
    
    
    
    
}


btSoftMultiBodyDynamicsWorld.addSoftBody!(
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    this.cxx_addSoftBody(
        body
        );
    
    
    
}

///removeCollisionObject will first check if it is a rigid body, if so call removeRigidBody otherwise call btDiscreteDynamicsWorld::removeCollisionObject

btSoftMultiBodyDynamicsWorld.removeCollisionObject!(
    in
    btCollisionObject
    collisionObject
    
    
    )
{   
    
    
    this.cxx_removeCollisionObject(
        collisionObject
        );
    
    
    
}


btSoftMultiBodyDynamicsWorld.setDrawFlags!(
    in
    SInt32
    f
    
    
    )
{   
    
    
    this.cxx_setDrawFlags(
        f
        );
    
    
    
}


btSoftMultiBodyDynamicsWorld.removeSoftBody!(
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    this.cxx_removeSoftBody(
        body
        );
    
    
    
}

btSoftBodyWorldInfo
btSoftMultiBodyDynamicsWorld.getWorldInfo!(
    )
{   
    btSoftBodyWorldInfo __res = 
    this.cxx_getWorldInfo(
        );
    
    return __res;
}


btSoftMultiBodyDynamicsWorld.debugDrawWorld!(
    )
{   
    
    this.cxx_debugDrawWorld(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSoftMultiBodyDynamicsWorld] EDK[Fabric_EDK_KL_btSoftMultiBodyDynamicsWorld] LIB[btSoftMultiBodyDynamicsWorld *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSoftMultiBodyDynamicsWorld.=(
    btSoftMultiBodyDynamicsWorld that
    ) = "Bullet2__btSoftMultiBodyDynamicsWorld__MU__simple_ass_op__59cf4982e8ea0b7cc07c5fb223b5dea8";


/// \dfgPresetOmit
/// \internal
btSoftMultiBodyDynamicsWorld.appendDesc(io String string) {
  string += "btSoftMultiBodyDynamicsWorld:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMLCPSolverInterface] EDK[Fabric_EDK_KL_btMLCPSolverInterface] LIB[btMLCPSolverInterface *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolverInterface] EDK[Fabric_EDK_KL_btMLCPSolverInterface] LIB[btMLCPSolverInterface *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolverInterface] EDK[Fabric_EDK_KL_btMLCPSolverInterface] LIB[btMLCPSolverInterface *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMLCPSolverInterface() {
    // abstract types are empty by default.
}

/// \dfgPresetOmit
btMLCPSolverInterface(
    btMLCPSolverInterface that
    ) {
    this.cpp_ptr = that.cpp_ptr;
}
btMLCPSolverInterface.cxx_delete() = "Bullet2__btMLCPSolverInterface__MU__delete__9b70bb4b12837a65ec25b6eb75f7e750";

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolverInterface] EDK[Fabric_EDK_KL_btMLCPSolverInterface] LIB[btMLCPSolverInterface *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolverInterface] EDK[Fabric_EDK_KL_btMLCPSolverInterface] LIB[btMLCPSolverInterface *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolverInterface] EDK[Fabric_EDK_KL_btMLCPSolverInterface] LIB[btMLCPSolverInterface *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMLCPSolverInterface.=(
    btMLCPSolverInterface that
    ) = "Bullet2__btMLCPSolverInterface__MU__simple_ass_op__a2bf481924d614df2c39b6250aa34469";


/// \dfgPresetOmit
/// \internal
btMLCPSolverInterface.appendDesc(io String string) {
  string += "btMLCPSolverInterface:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btDantzigSolver] EDK[Fabric_EDK_KL_btDantzigSolver] LIB[btDantzigSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDantzigSolver] EDK[Fabric_EDK_KL_btDantzigSolver] LIB[btDantzigSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDantzigSolver] EDK[Fabric_EDK_KL_btDantzigSolver] LIB[btDantzigSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btDantzigSolver(
    btDantzigSolver that
    ) = "Bullet2__btDantzigSolver__MU__copy_ctor__3f9a73a044d06b7b95ced44430e2fe8e";

/// \dfgPresetOmit
/// \internal
btDantzigSolver.__ctor(
    ) = "Bullet2__btDantzigSolver__MU__ctor__909ee4c6e68150a05919df335a17c2ed";

/// \dfgPresetOmit
btDantzigSolver(
    ) {
    this.__ctor(
        );
}

btDantzigSolver.cxx_delete() = "Bullet2__btDantzigSolver__MU__delete__c22da038c143f7c8fb21ecf33d6d6568";

//////////////////////////////////////////////////////////////////////////////
// KL[btDantzigSolver] EDK[Fabric_EDK_KL_btDantzigSolver] LIB[btDantzigSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDantzigSolver] EDK[Fabric_EDK_KL_btDantzigSolver] LIB[btDantzigSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btDantzigSolver] EDK[Fabric_EDK_KL_btDantzigSolver] LIB[btDantzigSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btDantzigSolver.=(
    btDantzigSolver that
    ) = "Bullet2__btDantzigSolver__MU__simple_ass_op__70b61419c962264c1ee9b1e244bfe91d";


/// \dfgPresetOmit
/// \internal
btDantzigSolver.appendDesc(io String string) {
  string += "btDantzigSolver:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btLemkeAlgorithm() = "Bullet2__btLemkeAlgorithm__MU__empty_ctor__3afd7cc78b37f97225dda6df60a5438d";

/// \dfgPresetOmit
btLemkeAlgorithm(
    btLemkeAlgorithm that
    ) = "Bullet2__btLemkeAlgorithm__MU__copy_ctor__f7d8659cd935448e936c3ea688a7ea08";

btLemkeAlgorithm.cxx_delete() = "Bullet2__btLemkeAlgorithm__MU__delete__6118b4cb2fddaa5096652832b3f41613";

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**

   * \brief return info of solution process

   */
/// \dfgPresetOmit
/// \internal
SInt32
btLemkeAlgorithm.cxx_getInfo!(
    )
 = "Bullet2__btLemkeAlgorithm__MU__meth_getInfo__894df756776c7966169739ea9a203f8d";

/**

   * \brief get the number of steps until the solution was found

   */
/// \dfgPresetOmit
/// \internal
SInt32
btLemkeAlgorithm.cxx_getSteps!(
    )
 = "Bullet2__btLemkeAlgorithm__MU__meth_getSteps__eef82f03cb90bdddc362cad34d802847";

/**

   * \brief get the number of steps until the solution was found

   */
SInt32
btLemkeAlgorithm.getSteps!(
    )
{   
    SInt32 __res = 
    this.cxx_getSteps(
        );
    
    return __res;
}

/**

   * \brief return info of solution process

   */
SInt32
btLemkeAlgorithm.getInfo!(
    )
{   
    SInt32 __res = 
    this.cxx_getInfo(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeAlgorithm] EDK[Fabric_EDK_KL_btLemkeAlgorithm] LIB[btLemkeAlgorithm *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btLemkeAlgorithm.=(
    btLemkeAlgorithm that
    ) = "Bullet2__btLemkeAlgorithm__MU__simple_ass_op__9ad3283bbffa0d75fec7b3fca205ab51";


/// \dfgPresetOmit
/// \internal
btLemkeAlgorithm.appendDesc(io String string) {
  string += "btLemkeAlgorithm:MANAGED";
  if (!this.cpp_ptr)
    string += " (null)";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btLemkeSolver] EDK[Fabric_EDK_KL_btLemkeSolver] LIB[btLemkeSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeSolver] EDK[Fabric_EDK_KL_btLemkeSolver] LIB[btLemkeSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeSolver] EDK[Fabric_EDK_KL_btLemkeSolver] LIB[btLemkeSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btLemkeSolver(
    btLemkeSolver that
    ) = "Bullet2__btLemkeSolver__MU__copy_ctor__57e5d9b7e4484b22a53637a1330cb727";

/// \dfgPresetOmit
/// \internal
btLemkeSolver.__ctor(
    ) = "Bullet2__btLemkeSolver__MU__ctor__f557d01144ee99245e76c58cccbf74f6";

/// \dfgPresetOmit
btLemkeSolver(
    ) {
    this.__ctor(
        );
}

btLemkeSolver.cxx_delete() = "Bullet2__btLemkeSolver__MU__delete__f77e9f3c2fc3dc7a3adda791f3112a2a";

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeSolver] EDK[Fabric_EDK_KL_btLemkeSolver] LIB[btLemkeSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeSolver] EDK[Fabric_EDK_KL_btLemkeSolver] LIB[btLemkeSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btLemkeSolver] EDK[Fabric_EDK_KL_btLemkeSolver] LIB[btLemkeSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btLemkeSolver.=(
    btLemkeSolver that
    ) = "Bullet2__btLemkeSolver__MU__simple_ass_op__b5da37cb1b71117405c67a9b7fc1e7d3";


/// \dfgPresetOmit
/// \internal
btLemkeSolver.appendDesc(io String string) {
  string += "btLemkeSolver:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

btMLCPSolver() = "Bullet2__btMLCPSolver__MU__empty_ctor__33746f40f2ae3477e8c3fb40cf9c08df";

/// \dfgPresetOmit
btMLCPSolver(
    btMLCPSolver that
    ) = "Bullet2__btMLCPSolver__MU__copy_ctor__300db7123d782d0d89728907c80d8dbe";

/// \dfgPresetOmit
/// \internal
btMLCPSolver.__ctor(
    btMLCPSolverInterface solver
    ) = "Bullet2__btMLCPSolver__MU__ctor__9bdfa679392336c9c86510c918943215";

/// \dfgPresetOmit
btMLCPSolver(
    btMLCPSolverInterface solver
    ) {
    this.__ctor(
        solver
        );
}

btMLCPSolver.cxx_delete() = "Bullet2__btMLCPSolver__MU__delete__819fa1ddc59bb450f75a18ebca30cb01";

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

btMLCPSolver.cxx_setMLCPSolver!(
    btMLCPSolverInterface solver
    )
 = "Bullet2__btMLCPSolver__MU__meth_setMLCPSolver__49351e469d01e34f074daaa323b83324";

/// \dfgPresetOmit
/// \internal
SInt32
btMLCPSolver.cxx_getNumFallbacks?(
    )
 = "Bullet2__btMLCPSolver__CO__meth_getNumFallbacks__5c9a30b908665ba2829bb6b271dfdea4";

/// \dfgPresetOmit
/// \internal

btMLCPSolver.cxx_setNumFallbacks!(
    SInt32 num
    )
 = "Bullet2__btMLCPSolver__MU__meth_setNumFallbacks__48542f75df98e3cfe3d4cd21749fd800";

/// \dfgPresetOmit
/// \internal
btConstraintSolverType
btMLCPSolver.cxx_getSolverType?(
    )
 = "Bullet2__btMLCPSolver__CO__meth_getSolverType__20aaabb1bca048f485ff503aa684f799";


btMLCPSolver.setMLCPSolver!(
    in
    btMLCPSolverInterface
    solver
    
    
    )
{   
    
    
    this.cxx_setMLCPSolver(
        solver
        );
    
    
    
}


btMLCPSolver.setNumFallbacks!(
    in
    SInt32
    num
    
    
    )
{   
    
    
    this.cxx_setNumFallbacks(
        num
        );
    
    
    
}

SInt32
btMLCPSolver.getNumFallbacks?(
    )
{   
    SInt32 __res = 
    this.cxx_getNumFallbacks(
        );
    
    return __res;
}

btConstraintSolverType
btMLCPSolver.getSolverType?(
    )
{   
    btConstraintSolverType __res = 
    this.cxx_getSolverType(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btMLCPSolver] EDK[Fabric_EDK_KL_btMLCPSolver] LIB[btMLCPSolver *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btMLCPSolver.=(
    btMLCPSolver that
    ) = "Bullet2__btMLCPSolver__MU__simple_ass_op__894d3184b5d6181928adfd7f31c98b1c";


/// \dfgPresetOmit
/// \internal
btMLCPSolver.appendDesc(io String string) {
  string += "btMLCPSolver:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// Managed KL[btSolveProjectedGaussSeidel] EDK[Fabric_EDK_KL_btSolveProjectedGaussSeidel] LIB[btSolveProjectedGaussSeidel *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolveProjectedGaussSeidel] EDK[Fabric_EDK_KL_btSolveProjectedGaussSeidel] LIB[btSolveProjectedGaussSeidel *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolveProjectedGaussSeidel] EDK[Fabric_EDK_KL_btSolveProjectedGaussSeidel] LIB[btSolveProjectedGaussSeidel *]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
btSolveProjectedGaussSeidel(
    btSolveProjectedGaussSeidel that
    ) = "Bullet2__btSolveProjectedGaussSeidel__MU__copy_ctor__f1679eaeb20350584b0a594e23feba77";

/// \dfgPresetOmit
/// \internal
btSolveProjectedGaussSeidel.__ctor(
    ) = "Bullet2__btSolveProjectedGaussSeidel__MU__ctor__a68e7f72584a6a1975165e1cda920bea";

/// \dfgPresetOmit
btSolveProjectedGaussSeidel(
    ) {
    this.__ctor(
        );
}

btSolveProjectedGaussSeidel.cxx_delete() = "Bullet2__btSolveProjectedGaussSeidel__MU__delete__52e1aa5363005ccbc9e666829a4ce3d6";

//////////////////////////////////////////////////////////////////////////////
// KL[btSolveProjectedGaussSeidel] EDK[Fabric_EDK_KL_btSolveProjectedGaussSeidel] LIB[btSolveProjectedGaussSeidel *]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolveProjectedGaussSeidel] EDK[Fabric_EDK_KL_btSolveProjectedGaussSeidel] LIB[btSolveProjectedGaussSeidel *]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[btSolveProjectedGaussSeidel] EDK[Fabric_EDK_KL_btSolveProjectedGaussSeidel] LIB[btSolveProjectedGaussSeidel *]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

btSolveProjectedGaussSeidel.=(
    btSolveProjectedGaussSeidel that
    ) = "Bullet2__btSolveProjectedGaussSeidel__MU__simple_ass_op__a20438a889bc77eb6ac1af9ba610fe61";


/// \dfgPresetOmit
/// \internal
btSolveProjectedGaussSeidel.appendDesc(io String string) {
  string += "btSolveProjectedGaussSeidel:MANAGED";
}



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btQuaternion] EDK[Fabric_EDK_KL_btQuaternion] LIB[btQuaternion]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionConstPtr] EDK[CxxbtQuaternionConstPtr] LIB[btQuaternion const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionConstPtr] EDK[CxxbtQuaternionConstPtr] LIB[btQuaternion const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtQuaternionConstPtr.cxx_getAxis?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtQuaternionConstPtr.cxx_getAxis on null CxxbtQuaternionConstPtr";
    return
    this.ptr.data()->{ btQuaternion }.cxx_getAxis(
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtQuaternionConstPtr.cxx_getW?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtQuaternionConstPtr.cxx_getW on null CxxbtQuaternionConstPtr";
    return
    this.ptr.data()->{ btQuaternion }.cxx_getW(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtQuaternionConstPtr.getW?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getW(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtQuaternionConstPtr.getAxis?(
    )
{   
    btVector3 __res = 
    this.cxx_getAxis(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionPtr] EDK[CxxbtQuaternionMutablePtr] LIB[btQuaternion *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionPtr] EDK[CxxbtQuaternionMutablePtr] LIB[btQuaternion *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtQuaternionPtr.cxx_getAxis?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtQuaternionPtr.cxx_getAxis on null CxxbtQuaternionPtr";
    return
    this.ptr.data()->{ btQuaternion }.cxx_getAxis(
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtQuaternionPtr.cxx_getW?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtQuaternionPtr.cxx_getW on null CxxbtQuaternionPtr";
    return
    this.ptr.data()->{ btQuaternion }.cxx_getW(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtQuaternionPtr.getAxis?(
    )
{   
    btVector3 __res = 
    this.cxx_getAxis(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtQuaternionPtr.getW?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getW(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionConstRef] EDK[CxxbtQuaternionConstRef] LIB[btQuaternion const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionConstRef] EDK[CxxbtQuaternionConstRef] LIB[btQuaternion const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionConstRef] EDK[CxxbtQuaternionConstRef] LIB[btQuaternion const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtQuaternionConstRef.cxx_getAxis?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtQuaternionConstRef.cxx_getAxis on null CxxbtQuaternionConstRef";
    return
    this.ptr.data()->{ btQuaternion }.cxx_getAxis(
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtQuaternionConstRef.cxx_getW?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtQuaternionConstRef.cxx_getW on null CxxbtQuaternionConstRef";
    return
    this.ptr.data()->{ btQuaternion }.cxx_getW(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtQuaternionConstRef.getAxis?(
    )
{   
    btVector3 __res = 
    this.cxx_getAxis(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtQuaternionConstRef.getW?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getW(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionRef] EDK[CxxbtQuaternionMutableRef] LIB[btQuaternion &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtQuaternionRef] EDK[CxxbtQuaternionMutableRef] LIB[btQuaternion &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtQuaternionRef.cxx_getAxis?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtQuaternionRef.cxx_getAxis on null CxxbtQuaternionRef";
    return
    this.ptr.data()->{ btQuaternion }.cxx_getAxis(
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtQuaternionRef.cxx_getW?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtQuaternionRef.cxx_getW on null CxxbtQuaternionRef";
    return
    this.ptr.data()->{ btQuaternion }.cxx_getW(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtQuaternionRef.getW?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getW(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtQuaternionRef.getAxis?(
    )
{   
    btVector3 __res = 
    this.cxx_getAxis(
        );
    
    return __res;
}



////////////////////////////////////////////////////////////////////////
// CxxbtQuaternionConstPtr
// CxxbtQuaternionPtr
// CxxbtQuaternionConstRef
// CxxbtQuaternionRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstPtr(btQuaternion array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstPtr(btQuaternion array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btQuaternion());
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstPtr(btQuaternion value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstPtr Make_CxxbtQuaternionConstPtr(btQuaternion value) {
  return CxxbtQuaternionConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionPtr(btQuaternion array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionPtr(btQuaternion array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btQuaternion());
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionPtr(btQuaternion value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionPtr Make_CxxbtQuaternionPtr(btQuaternion value) {
  return CxxbtQuaternionPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef(btQuaternion array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef(btQuaternion array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btQuaternion());
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef(btQuaternion value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef Make_CxxbtQuaternionConstRef(btQuaternion value) {
  return CxxbtQuaternionConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef(btQuaternion array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef(btQuaternion array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btQuaternion());
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef(btQuaternion value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef Make_CxxbtQuaternionRef(btQuaternion value) {
  return CxxbtQuaternionRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtQuaternionConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtQuaternionConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtQuaternionConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef CxxbtQuaternionConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtQuaternionConstPtr.cxx_getAt on null CxxbtQuaternionConstPtr";
  return CxxbtQuaternionConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btQuaternion()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef CxxbtQuaternionConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtQuaternionConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef CxxbtQuaternionPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtQuaternionPtr.cxx_getAt on null CxxbtQuaternionPtr";
  return CxxbtQuaternionRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btQuaternion()));
}

/// Same as for CxxbtQuaternionConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef CxxbtQuaternionPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionPtr.cxx_setAt(Index i, btQuaternion v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtQuaternionPtr.cxx_setAt on null CxxbtQuaternionPtr";
  this.ptr.offset(i)->{ btQuaternion } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef(CxxbtQuaternionConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef.=(CxxbtQuaternionConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btQuaternion value
/// \dfgPresetOmit
/// \internal
btQuaternion CxxbtQuaternionConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtQuaternionConstRef.cxx_get on null CxxbtQuaternionConstRef";
  return this.ptr.data()->{ btQuaternion };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef.cxx_set(btQuaternion value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtQuaternionRef.cxx_set on null CxxbtQuaternionRef";
  this.ptr.data()->{ btQuaternion } = value;
}

/// Assignment of btQuaternion
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef.=(btQuaternion value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtQuaternionRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btVector3] EDK[Fabric_EDK_KL_btVector3] LIB[btVector3]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3ConstPtr] EDK[CxxbtVector3ConstPtr] LIB[btVector3 const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3ConstPtr] EDK[CxxbtVector3ConstPtr] LIB[btVector3 const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3ConstPtr.cxx_getX?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3ConstPtr.cxx_getX on null CxxbtVector3ConstPtr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getX(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3ConstPtr.cxx_getY?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3ConstPtr.cxx_getY on null CxxbtVector3ConstPtr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getY(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3ConstPtr.cxx_getZ?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3ConstPtr.cxx_getZ on null CxxbtVector3ConstPtr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getZ(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3ConstPtr.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3ConstPtr.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3ConstPtr.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3Ptr] EDK[CxxbtVector3MutablePtr] LIB[btVector3 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3Ptr] EDK[CxxbtVector3MutablePtr] LIB[btVector3 *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3Ptr.cxx_getX?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3Ptr.cxx_getX on null CxxbtVector3Ptr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getX(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3Ptr.cxx_getY?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3Ptr.cxx_getY on null CxxbtVector3Ptr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getY(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3Ptr.cxx_getZ?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3Ptr.cxx_getZ on null CxxbtVector3Ptr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getZ(
        );
}

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3Ptr.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3Ptr.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3Ptr.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3ConstRef] EDK[CxxbtVector3ConstRef] LIB[btVector3 const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3ConstRef] EDK[CxxbtVector3ConstRef] LIB[btVector3 const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3ConstRef] EDK[CxxbtVector3ConstRef] LIB[btVector3 const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3ConstRef.cxx_getX?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3ConstRef.cxx_getX on null CxxbtVector3ConstRef";
    return
    this.ptr.data()->{ btVector3 }.cxx_getX(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3ConstRef.cxx_getY?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3ConstRef.cxx_getY on null CxxbtVector3ConstRef";
    return
    this.ptr.data()->{ btVector3 }.cxx_getY(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3ConstRef.cxx_getZ?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3ConstRef.cxx_getZ on null CxxbtVector3ConstRef";
    return
    this.ptr.data()->{ btVector3 }.cxx_getZ(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3ConstRef.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3ConstRef.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3ConstRef.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3Ref] EDK[CxxbtVector3MutableRef] LIB[btVector3 &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector3Ref] EDK[CxxbtVector3MutableRef] LIB[btVector3 &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3Ref.cxx_getX?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3Ref.cxx_getX on null CxxbtVector3Ref";
    return
    this.ptr.data()->{ btVector3 }.cxx_getX(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3Ref.cxx_getY?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3Ref.cxx_getY on null CxxbtVector3Ref";
    return
    this.ptr.data()->{ btVector3 }.cxx_getY(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector3Ref.cxx_getZ?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector3Ref.cxx_getZ on null CxxbtVector3Ref";
    return
    this.ptr.data()->{ btVector3 }.cxx_getZ(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3Ref.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3Ref.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector3Ref.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}



////////////////////////////////////////////////////////////////////////
// CxxbtVector3ConstPtr
// CxxbtVector3Ptr
// CxxbtVector3ConstRef
// CxxbtVector3Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr(btVector3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr(btVector3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btVector3());
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr(btVector3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr Make_CxxbtVector3ConstPtr(btVector3 value) {
  return CxxbtVector3ConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr(btVector3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr(btVector3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btVector3());
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr(btVector3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr Make_CxxbtVector3Ptr(btVector3 value) {
  return CxxbtVector3Ptr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef(btVector3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef(btVector3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btVector3());
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef(btVector3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef Make_CxxbtVector3ConstRef(btVector3 value) {
  return CxxbtVector3ConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref(btVector3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref(btVector3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btVector3());
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref(btVector3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref Make_CxxbtVector3Ref(btVector3 value) {
  return CxxbtVector3Ref(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtVector3ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtVector3ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtVector3ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef CxxbtVector3ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector3ConstPtr.cxx_getAt on null CxxbtVector3ConstPtr";
  return CxxbtVector3ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btVector3()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef CxxbtVector3ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtVector3ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref CxxbtVector3Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector3Ptr.cxx_getAt on null CxxbtVector3Ptr";
  return CxxbtVector3Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btVector3()));
}

/// Same as for CxxbtVector3ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref CxxbtVector3Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtVector3Ptr.cxx_setAt(Index i, btVector3 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector3Ptr.cxx_setAt on null CxxbtVector3Ptr";
  this.ptr.offset(i)->{ btVector3 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef(CxxbtVector3ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef.=(CxxbtVector3ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btVector3 value
/// \dfgPresetOmit
/// \internal
btVector3 CxxbtVector3ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector3ConstRef.cxx_get on null CxxbtVector3ConstRef";
  return this.ptr.data()->{ btVector3 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref.cxx_set(btVector3 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector3Ref.cxx_set on null CxxbtVector3Ref";
  this.ptr.data()->{ btVector3 } = value;
}

/// Assignment of btVector3
/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref.=(btVector3 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtVector3Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btMatrix3x3] EDK[Fabric_EDK_KL_btMatrix3x3] LIB[btMatrix3x3]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3ConstPtr] EDK[CxxbtMatrix3x3ConstPtr] LIB[btMatrix3x3 const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3ConstPtr] EDK[CxxbtMatrix3x3ConstPtr] LIB[btMatrix3x3 const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtMatrix3x3ConstPtr.cxx_getRow?(
    SInt32 i
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtMatrix3x3ConstPtr.cxx_getRow on null CxxbtMatrix3x3ConstPtr";
    return
    this.ptr.data()->{ btMatrix3x3 }.cxx_getRow(
        i
        );
}

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtMatrix3x3ConstPtr.getRow?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getRow(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3Ptr] EDK[CxxbtMatrix3x3MutablePtr] LIB[btMatrix3x3 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3Ptr] EDK[CxxbtMatrix3x3MutablePtr] LIB[btMatrix3x3 *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtMatrix3x3Ptr.cxx_getRow?(
    SInt32 i
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtMatrix3x3Ptr.cxx_getRow on null CxxbtMatrix3x3Ptr";
    return
    this.ptr.data()->{ btMatrix3x3 }.cxx_getRow(
        i
        );
}

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtMatrix3x3Ptr.getRow?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getRow(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3ConstRef] EDK[CxxbtMatrix3x3ConstRef] LIB[btMatrix3x3 const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3ConstRef] EDK[CxxbtMatrix3x3ConstRef] LIB[btMatrix3x3 const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3ConstRef] EDK[CxxbtMatrix3x3ConstRef] LIB[btMatrix3x3 const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtMatrix3x3ConstRef.cxx_getRow?(
    SInt32 i
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtMatrix3x3ConstRef.cxx_getRow on null CxxbtMatrix3x3ConstRef";
    return
    this.ptr.data()->{ btMatrix3x3 }.cxx_getRow(
        i
        );
}

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtMatrix3x3ConstRef.getRow?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getRow(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3Ref] EDK[CxxbtMatrix3x3MutableRef] LIB[btMatrix3x3 &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtMatrix3x3Ref] EDK[CxxbtMatrix3x3MutableRef] LIB[btMatrix3x3 &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtMatrix3x3Ref.cxx_getRow?(
    SInt32 i
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtMatrix3x3Ref.cxx_getRow on null CxxbtMatrix3x3Ref";
    return
    this.ptr.data()->{ btMatrix3x3 }.cxx_getRow(
        i
        );
}

/** @brief Get a row of the matrix as a vector 

	*  @param i Row number 0 indexed */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtMatrix3x3Ref.getRow?(
    in
    SInt32
    i
    
    
    )
{   
    
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getRow(
        i
        );
    
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}



////////////////////////////////////////////////////////////////////////
// CxxbtMatrix3x3ConstPtr
// CxxbtMatrix3x3Ptr
// CxxbtMatrix3x3ConstRef
// CxxbtMatrix3x3Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstPtr(btMatrix3x3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstPtr(btMatrix3x3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btMatrix3x3());
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstPtr(btMatrix3x3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstPtr Make_CxxbtMatrix3x3ConstPtr(btMatrix3x3 value) {
  return CxxbtMatrix3x3ConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ptr(btMatrix3x3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ptr(btMatrix3x3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btMatrix3x3());
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ptr(btMatrix3x3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ptr Make_CxxbtMatrix3x3Ptr(btMatrix3x3 value) {
  return CxxbtMatrix3x3Ptr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef(btMatrix3x3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef(btMatrix3x3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btMatrix3x3());
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef(btMatrix3x3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef Make_CxxbtMatrix3x3ConstRef(btMatrix3x3 value) {
  return CxxbtMatrix3x3ConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref(btMatrix3x3 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref(btMatrix3x3 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btMatrix3x3());
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref(btMatrix3x3 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref Make_CxxbtMatrix3x3Ref(btMatrix3x3 value) {
  return CxxbtMatrix3x3Ref(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtMatrix3x3ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtMatrix3x3ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtMatrix3x3ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef CxxbtMatrix3x3ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtMatrix3x3ConstPtr.cxx_getAt on null CxxbtMatrix3x3ConstPtr";
  return CxxbtMatrix3x3ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btMatrix3x3()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef CxxbtMatrix3x3ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtMatrix3x3ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref CxxbtMatrix3x3Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtMatrix3x3Ptr.cxx_getAt on null CxxbtMatrix3x3Ptr";
  return CxxbtMatrix3x3Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btMatrix3x3()));
}

/// Same as for CxxbtMatrix3x3ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref CxxbtMatrix3x3Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ptr.cxx_setAt(Index i, btMatrix3x3 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtMatrix3x3Ptr.cxx_setAt on null CxxbtMatrix3x3Ptr";
  this.ptr.offset(i)->{ btMatrix3x3 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef(CxxbtMatrix3x3ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef.=(CxxbtMatrix3x3ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btMatrix3x3 value
/// \dfgPresetOmit
/// \internal
btMatrix3x3 CxxbtMatrix3x3ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtMatrix3x3ConstRef.cxx_get on null CxxbtMatrix3x3ConstRef";
  return this.ptr.data()->{ btMatrix3x3 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref.cxx_set(btMatrix3x3 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtMatrix3x3Ref.cxx_set on null CxxbtMatrix3x3Ref";
  this.ptr.data()->{ btMatrix3x3 } = value;
}

/// Assignment of btMatrix3x3
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref.=(btMatrix3x3 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btTransform] EDK[Fabric_EDK_KL_btTransform] LIB[btTransform]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformConstPtr] EDK[CxxbtTransformConstPtr] LIB[btTransform const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformConstPtr] EDK[CxxbtTransformConstPtr] LIB[btTransform const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
CxxbtTransformConstPtr.cxx_getBasis?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstPtr.cxx_getBasis on null CxxbtTransformConstPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_getBasis(
        );
}

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtTransformConstPtr.cxx_getOrigin?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstPtr.cxx_getOrigin on null CxxbtTransformConstPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_getOrigin(
        );
}

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
CxxbtTransformConstPtr.cxx_getRotation?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstPtr.cxx_getRotation on null CxxbtTransformConstPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_getRotation(
        );
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformConstPtr.cxx_getOpenGLMatrix?(
    CxxFloat32Ptr m
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstPtr.cxx_getOpenGLMatrix on null CxxbtTransformConstPtr";
    
    this.ptr.data()->{ btTransform }.cxx_getOpenGLMatrix(
        m
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformConstPtr.cxx_invXform?(
    CxxbtVector3ConstRef inVec
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstPtr.cxx_invXform on null CxxbtTransformConstPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_invXform(
        inVec
        );
}

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformConstPtr.cxx_inverse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstPtr.cxx_inverse on null CxxbtTransformConstPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_inverse(
        );
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformConstPtr.cxx_inverseTimes?(
    CxxbtTransformConstRef t
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstPtr.cxx_inverseTimes on null CxxbtTransformConstPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_inverseTimes(
        t
        );
}

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
btMatrix3x3
CxxbtTransformConstPtr.getBasis?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getBasis(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformConstPtr.invXform?(
    in
    btVector3
    inVec
    
    
    )
{   
    
    CxxbtVector3ConstRef inVec__cxx = Make_CxxbtVector3ConstRef(inVec);
    btVector3 __res = 
    this.cxx_invXform(
        inVec__cxx
        );
    
    
    return __res;
}

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformConstPtr.getOrigin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getOrigin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformConstPtr.getOpenGLMatrix?(
    io
    Float32
    m
    
    
    )
{   
    
    CxxFloat32Ptr m__cxx = Make_CxxFloat32Ptr(m);
    
    this.cxx_getOpenGLMatrix(
        m__cxx
        );
    
    
    
}

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformConstPtr.inverse?(
    )
{   
    btTransform __res = 
    this.cxx_inverse(
        );
    
    return __res;
}

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
CxxbtTransformConstPtr.getRotation?(
    )
{   
    btQuaternion __res = 
    this.cxx_getRotation(
        );
    
    return __res;
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformConstPtr.inverseTimes?(
    in
    btTransform
    t
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    btTransform __res = 
    this.cxx_inverseTimes(
        t__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformConstPtr] EDK[CxxbtTransformConstPtr] LIB[btTransform const *]
// Call Operators
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the transform of the vector */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformConstPtr.cxx_call?(
    CxxbtVector3ConstRef x
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstPtr.cxx_call on null CxxbtTransformConstPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_call(
        x
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformPtr] EDK[CxxbtTransformMutablePtr] LIB[btTransform *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformPtr] EDK[CxxbtTransformMutablePtr] LIB[btTransform *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Set the current transform as the value of the product of two transforms

   * @param t1 Transform 1

   * @param t2 Transform 2

   * This = Transform1 * Transform2 */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.cxx_mult!(
    CxxbtTransformConstRef t1,
    CxxbtTransformConstRef t2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_mult on null CxxbtTransformPtr";
    
    this.ptr.data()->{ btTransform }.cxx_mult(
        t1,
        t2
        );
}

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
CxxbtTransformPtr.cxx_getBasis?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_getBasis on null CxxbtTransformPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_getBasis(
        );
}

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtTransformPtr.cxx_getOrigin?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_getOrigin on null CxxbtTransformPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_getOrigin(
        );
}

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
CxxbtTransformPtr.cxx_getRotation?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_getRotation on null CxxbtTransformPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_getRotation(
        );
}

/**@brief Set from an array 

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.cxx_setFromOpenGLMatrix!(
    CxxFloat32ConstPtr m
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_setFromOpenGLMatrix on null CxxbtTransformPtr";
    
    this.ptr.data()->{ btTransform }.cxx_setFromOpenGLMatrix(
        m
        );
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.cxx_getOpenGLMatrix?(
    CxxFloat32Ptr m
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_getOpenGLMatrix on null CxxbtTransformPtr";
    
    this.ptr.data()->{ btTransform }.cxx_getOpenGLMatrix(
        m
        );
}

/**@brief Set the translational element

   * @param origin The vector to set the translation to */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.cxx_setOrigin!(
    CxxbtVector3ConstRef origin
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_setOrigin on null CxxbtTransformPtr";
    
    this.ptr.data()->{ btTransform }.cxx_setOrigin(
        origin
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformPtr.cxx_invXform?(
    CxxbtVector3ConstRef inVec
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_invXform on null CxxbtTransformPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_invXform(
        inVec
        );
}

/**@brief Set the rotational element by btMatrix3x3 */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.cxx_setBasis!(
    CxxbtMatrix3x3ConstRef basis
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_setBasis on null CxxbtTransformPtr";
    
    this.ptr.data()->{ btTransform }.cxx_setBasis(
        basis
        );
}

/**@brief Set the rotational element by btQuaternion */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.cxx_setRotation!(
    CxxbtQuaternionConstRef q
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_setRotation on null CxxbtTransformPtr";
    
    this.ptr.data()->{ btTransform }.cxx_setRotation(
        q
        );
}

/**@brief Set this transformation to the identity */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.cxx_setIdentity!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_setIdentity on null CxxbtTransformPtr";
    
    this.ptr.data()->{ btTransform }.cxx_setIdentity(
        );
}

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformPtr.cxx_inverse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_inverse on null CxxbtTransformPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_inverse(
        );
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformPtr.cxx_inverseTimes?(
    CxxbtTransformConstRef t
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_inverseTimes on null CxxbtTransformPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_inverseTimes(
        t
        );
}

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
CxxbtTransformPtr.getRotation?(
    )
{   
    btQuaternion __res = 
    this.cxx_getRotation(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformPtr.invXform?(
    in
    btVector3
    inVec
    
    
    )
{   
    
    CxxbtVector3ConstRef inVec__cxx = Make_CxxbtVector3ConstRef(inVec);
    btVector3 __res = 
    this.cxx_invXform(
        inVec__cxx
        );
    
    
    return __res;
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.getOpenGLMatrix?(
    io
    Float32
    m
    
    
    )
{   
    
    CxxFloat32Ptr m__cxx = Make_CxxFloat32Ptr(m);
    
    this.cxx_getOpenGLMatrix(
        m__cxx
        );
    
    
    
}

/**@brief Set the rotational element by btQuaternion */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.setRotation!(
    in
    btQuaternion
    q
    
    
    )
{   
    
    CxxbtQuaternionConstRef q__cxx = Make_CxxbtQuaternionConstRef(q);
    
    this.cxx_setRotation(
        q__cxx
        );
    
    
    
}

/**@brief Set the current transform as the value of the product of two transforms

   * @param t1 Transform 1

   * @param t2 Transform 2

   * This = Transform1 * Transform2 */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.mult!(
    in
    btTransform
    t1
    
    ,
    in
    btTransform
    t2
    
    
    )
{   
    
    CxxbtTransformConstRef t1__cxx = Make_CxxbtTransformConstRef(t1);
    
    CxxbtTransformConstRef t2__cxx = Make_CxxbtTransformConstRef(t2);
    
    this.cxx_mult(
        t1__cxx,
        t2__cxx
        );
    
    
    
    
}

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
btMatrix3x3
CxxbtTransformPtr.getBasis?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getBasis(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Set from an array 

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.setFromOpenGLMatrix!(
    in
    Float32
    m
    
    
    )
{   
    
    CxxFloat32ConstPtr m__cxx = Make_CxxFloat32ConstPtr(m);
    
    this.cxx_setFromOpenGLMatrix(
        m__cxx
        );
    
    
    
}

/**@brief Set the translational element

   * @param origin The vector to set the translation to */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.setOrigin!(
    in
    btVector3
    origin
    
    
    )
{   
    
    CxxbtVector3ConstRef origin__cxx = Make_CxxbtVector3ConstRef(origin);
    
    this.cxx_setOrigin(
        origin__cxx
        );
    
    
    
}

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformPtr.getOrigin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getOrigin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformPtr.inverse?(
    )
{   
    btTransform __res = 
    this.cxx_inverse(
        );
    
    return __res;
}

/**@brief Set the rotational element by btMatrix3x3 */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.setBasis!(
    in
    btMatrix3x3
    basis
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef basis__cxx = Make_CxxbtMatrix3x3ConstRef(basis);
    
    this.cxx_setBasis(
        basis__cxx
        );
    
    
    
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformPtr.inverseTimes?(
    in
    btTransform
    t
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    btTransform __res = 
    this.cxx_inverseTimes(
        t__cxx
        );
    
    
    return __res;
}

/**@brief Set this transformation to the identity */
/// \dfgPresetOmit
/// \internal

CxxbtTransformPtr.setIdentity!(
    )
{   
    
    this.cxx_setIdentity(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformPtr] EDK[CxxbtTransformMutablePtr] LIB[btTransform *]
// Call Operators
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the transform of the vector */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformPtr.cxx_call?(
    CxxbtVector3ConstRef x
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformPtr.cxx_call on null CxxbtTransformPtr";
    return
    this.ptr.data()->{ btTransform }.cxx_call(
        x
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformConstRef] EDK[CxxbtTransformConstRef] LIB[btTransform const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformConstRef] EDK[CxxbtTransformConstRef] LIB[btTransform const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformConstRef] EDK[CxxbtTransformConstRef] LIB[btTransform const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
CxxbtTransformConstRef.cxx_getBasis?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstRef.cxx_getBasis on null CxxbtTransformConstRef";
    return
    this.ptr.data()->{ btTransform }.cxx_getBasis(
        );
}

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtTransformConstRef.cxx_getOrigin?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstRef.cxx_getOrigin on null CxxbtTransformConstRef";
    return
    this.ptr.data()->{ btTransform }.cxx_getOrigin(
        );
}

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
CxxbtTransformConstRef.cxx_getRotation?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstRef.cxx_getRotation on null CxxbtTransformConstRef";
    return
    this.ptr.data()->{ btTransform }.cxx_getRotation(
        );
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformConstRef.cxx_getOpenGLMatrix?(
    CxxFloat32Ptr m
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstRef.cxx_getOpenGLMatrix on null CxxbtTransformConstRef";
    
    this.ptr.data()->{ btTransform }.cxx_getOpenGLMatrix(
        m
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformConstRef.cxx_invXform?(
    CxxbtVector3ConstRef inVec
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstRef.cxx_invXform on null CxxbtTransformConstRef";
    return
    this.ptr.data()->{ btTransform }.cxx_invXform(
        inVec
        );
}

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformConstRef.cxx_inverse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstRef.cxx_inverse on null CxxbtTransformConstRef";
    return
    this.ptr.data()->{ btTransform }.cxx_inverse(
        );
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformConstRef.cxx_inverseTimes?(
    CxxbtTransformConstRef t
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstRef.cxx_inverseTimes on null CxxbtTransformConstRef";
    return
    this.ptr.data()->{ btTransform }.cxx_inverseTimes(
        t
        );
}

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
CxxbtTransformConstRef.getRotation?(
    )
{   
    btQuaternion __res = 
    this.cxx_getRotation(
        );
    
    return __res;
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformConstRef.getOpenGLMatrix?(
    io
    Float32
    m
    
    
    )
{   
    
    CxxFloat32Ptr m__cxx = Make_CxxFloat32Ptr(m);
    
    this.cxx_getOpenGLMatrix(
        m__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformConstRef.invXform?(
    in
    btVector3
    inVec
    
    
    )
{   
    
    CxxbtVector3ConstRef inVec__cxx = Make_CxxbtVector3ConstRef(inVec);
    btVector3 __res = 
    this.cxx_invXform(
        inVec__cxx
        );
    
    
    return __res;
}

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformConstRef.inverse?(
    )
{   
    btTransform __res = 
    this.cxx_inverse(
        );
    
    return __res;
}

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformConstRef.getOrigin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getOrigin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
btMatrix3x3
CxxbtTransformConstRef.getBasis?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getBasis(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformConstRef.inverseTimes?(
    in
    btTransform
    t
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    btTransform __res = 
    this.cxx_inverseTimes(
        t__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformConstRef] EDK[CxxbtTransformConstRef] LIB[btTransform const &]
// Call Operators
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the transform of the vector */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformConstRef.cxx_call?(
    CxxbtVector3ConstRef x
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformConstRef.cxx_call on null CxxbtTransformConstRef";
    return
    this.ptr.data()->{ btTransform }.cxx_call(
        x
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformRef] EDK[CxxbtTransformMutableRef] LIB[btTransform &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformRef] EDK[CxxbtTransformMutableRef] LIB[btTransform &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Set the current transform as the value of the product of two transforms

   * @param t1 Transform 1

   * @param t2 Transform 2

   * This = Transform1 * Transform2 */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.cxx_mult!(
    CxxbtTransformConstRef t1,
    CxxbtTransformConstRef t2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_mult on null CxxbtTransformRef";
    
    this.ptr.data()->{ btTransform }.cxx_mult(
        t1,
        t2
        );
}

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
CxxbtMatrix3x3ConstRef
CxxbtTransformRef.cxx_getBasis?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_getBasis on null CxxbtTransformRef";
    return
    this.ptr.data()->{ btTransform }.cxx_getBasis(
        );
}

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtTransformRef.cxx_getOrigin?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_getOrigin on null CxxbtTransformRef";
    return
    this.ptr.data()->{ btTransform }.cxx_getOrigin(
        );
}

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
CxxbtTransformRef.cxx_getRotation?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_getRotation on null CxxbtTransformRef";
    return
    this.ptr.data()->{ btTransform }.cxx_getRotation(
        );
}

/**@brief Set from an array 

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.cxx_setFromOpenGLMatrix!(
    CxxFloat32ConstPtr m
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_setFromOpenGLMatrix on null CxxbtTransformRef";
    
    this.ptr.data()->{ btTransform }.cxx_setFromOpenGLMatrix(
        m
        );
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.cxx_getOpenGLMatrix?(
    CxxFloat32Ptr m
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_getOpenGLMatrix on null CxxbtTransformRef";
    
    this.ptr.data()->{ btTransform }.cxx_getOpenGLMatrix(
        m
        );
}

/**@brief Set the translational element

   * @param origin The vector to set the translation to */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.cxx_setOrigin!(
    CxxbtVector3ConstRef origin
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_setOrigin on null CxxbtTransformRef";
    
    this.ptr.data()->{ btTransform }.cxx_setOrigin(
        origin
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformRef.cxx_invXform?(
    CxxbtVector3ConstRef inVec
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_invXform on null CxxbtTransformRef";
    return
    this.ptr.data()->{ btTransform }.cxx_invXform(
        inVec
        );
}

/**@brief Set the rotational element by btMatrix3x3 */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.cxx_setBasis!(
    CxxbtMatrix3x3ConstRef basis
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_setBasis on null CxxbtTransformRef";
    
    this.ptr.data()->{ btTransform }.cxx_setBasis(
        basis
        );
}

/**@brief Set the rotational element by btQuaternion */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.cxx_setRotation!(
    CxxbtQuaternionConstRef q
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_setRotation on null CxxbtTransformRef";
    
    this.ptr.data()->{ btTransform }.cxx_setRotation(
        q
        );
}

/**@brief Set this transformation to the identity */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.cxx_setIdentity!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_setIdentity on null CxxbtTransformRef";
    
    this.ptr.data()->{ btTransform }.cxx_setIdentity(
        );
}

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformRef.cxx_inverse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_inverse on null CxxbtTransformRef";
    return
    this.ptr.data()->{ btTransform }.cxx_inverse(
        );
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformRef.cxx_inverseTimes?(
    CxxbtTransformConstRef t
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_inverseTimes on null CxxbtTransformRef";
    return
    this.ptr.data()->{ btTransform }.cxx_inverseTimes(
        t
        );
}

/**@brief Return a quaternion representing the rotation */
/// \dfgPresetOmit
/// \internal
btQuaternion
CxxbtTransformRef.getRotation?(
    )
{   
    btQuaternion __res = 
    this.cxx_getRotation(
        );
    
    return __res;
}

/**@brief Set the translational element

   * @param origin The vector to set the translation to */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.setOrigin!(
    in
    btVector3
    origin
    
    
    )
{   
    
    CxxbtVector3ConstRef origin__cxx = Make_CxxbtVector3ConstRef(origin);
    
    this.cxx_setOrigin(
        origin__cxx
        );
    
    
    
}

/**@brief Fill an array representation

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.getOpenGLMatrix?(
    io
    Float32
    m
    
    
    )
{   
    
    CxxFloat32Ptr m__cxx = Make_CxxFloat32Ptr(m);
    
    this.cxx_getOpenGLMatrix(
        m__cxx
        );
    
    
    
}

/**@brief Set from an array 

   * @param m A pointer to a 16 element array (12 rotation(row major padded on the right by 1), and 3 translation */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.setFromOpenGLMatrix!(
    in
    Float32
    m
    
    
    )
{   
    
    CxxFloat32ConstPtr m__cxx = Make_CxxFloat32ConstPtr(m);
    
    this.cxx_setFromOpenGLMatrix(
        m__cxx
        );
    
    
    
}

/**@brief Set this transformation to the identity */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.setIdentity!(
    )
{   
    
    this.cxx_setIdentity(
        );
    
    
}

/**@brief Set the rotational element by btMatrix3x3 */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.setBasis!(
    in
    btMatrix3x3
    basis
    
    
    )
{   
    
    CxxbtMatrix3x3ConstRef basis__cxx = Make_CxxbtMatrix3x3ConstRef(basis);
    
    this.cxx_setBasis(
        basis__cxx
        );
    
    
    
}

/**@brief Return the basis matrix for the rotation */
/// \dfgPresetOmit
/// \internal
btMatrix3x3
CxxbtTransformRef.getBasis?(
    )
{   
    CxxbtMatrix3x3ConstRef __res_cxx = 
    this.cxx_getBasis(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtMatrix3x3ConstRef';
    btMatrix3x3 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the inverse of this transform times the other transform

   * @param t The other transform 

   * return this.inverse() * the other */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformRef.inverseTimes?(
    in
    btTransform
    t
    
    
    )
{   
    
    CxxbtTransformConstRef t__cxx = Make_CxxbtTransformConstRef(t);
    btTransform __res = 
    this.cxx_inverseTimes(
        t__cxx
        );
    
    
    return __res;
}

/**@brief Return the inverse of this transform */
/// \dfgPresetOmit
/// \internal
btTransform
CxxbtTransformRef.inverse?(
    )
{   
    btTransform __res = 
    this.cxx_inverse(
        );
    
    return __res;
}

/**@brief Set the current transform as the value of the product of two transforms

   * @param t1 Transform 1

   * @param t2 Transform 2

   * This = Transform1 * Transform2 */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.mult!(
    in
    btTransform
    t1
    
    ,
    in
    btTransform
    t2
    
    
    )
{   
    
    CxxbtTransformConstRef t1__cxx = Make_CxxbtTransformConstRef(t1);
    
    CxxbtTransformConstRef t2__cxx = Make_CxxbtTransformConstRef(t2);
    
    this.cxx_mult(
        t1__cxx,
        t2__cxx
        );
    
    
    
    
}

/**@brief Set the rotational element by btQuaternion */
/// \dfgPresetOmit
/// \internal

CxxbtTransformRef.setRotation!(
    in
    btQuaternion
    q
    
    
    )
{   
    
    CxxbtQuaternionConstRef q__cxx = Make_CxxbtQuaternionConstRef(q);
    
    this.cxx_setRotation(
        q__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformRef.invXform?(
    in
    btVector3
    inVec
    
    
    )
{   
    
    CxxbtVector3ConstRef inVec__cxx = Make_CxxbtVector3ConstRef(inVec);
    btVector3 __res = 
    this.cxx_invXform(
        inVec__cxx
        );
    
    
    return __res;
}

/**@brief Return the origin vector translation */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformRef.getOrigin?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getOrigin(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtTransformRef] EDK[CxxbtTransformMutableRef] LIB[btTransform &]
// Call Operators
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the transform of the vector */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtTransformRef.cxx_call?(
    CxxbtVector3ConstRef x
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtTransformRef.cxx_call on null CxxbtTransformRef";
    return
    this.ptr.data()->{ btTransform }.cxx_call(
        x
        );
}



////////////////////////////////////////////////////////////////////////
// CxxbtTransformConstPtr
// CxxbtTransformPtr
// CxxbtTransformConstRef
// CxxbtTransformRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstPtr(btTransform array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstPtr(btTransform array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btTransform());
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstPtr(btTransform value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstPtr Make_CxxbtTransformConstPtr(btTransform value) {
  return CxxbtTransformConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformPtr(btTransform array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformPtr(btTransform array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btTransform());
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformPtr(btTransform value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformPtr Make_CxxbtTransformPtr(btTransform value) {
  return CxxbtTransformPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef(btTransform array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef(btTransform array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btTransform());
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef(btTransform value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef Make_CxxbtTransformConstRef(btTransform value) {
  return CxxbtTransformConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef(btTransform array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef(btTransform array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btTransform());
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef(btTransform value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef Make_CxxbtTransformRef(btTransform value) {
  return CxxbtTransformRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtTransformConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtTransformConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtTransformConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef CxxbtTransformConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtTransformConstPtr.cxx_getAt on null CxxbtTransformConstPtr";
  return CxxbtTransformConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btTransform()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef CxxbtTransformConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtTransformConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtTransformRef CxxbtTransformPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtTransformPtr.cxx_getAt on null CxxbtTransformPtr";
  return CxxbtTransformRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btTransform()));
}

/// Same as for CxxbtTransformConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtTransformRef CxxbtTransformPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtTransformPtr.cxx_setAt(Index i, btTransform v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtTransformPtr.cxx_setAt on null CxxbtTransformPtr";
  this.ptr.offset(i)->{ btTransform } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef(CxxbtTransformConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef.=(CxxbtTransformConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btTransform value
/// \dfgPresetOmit
/// \internal
btTransform CxxbtTransformConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtTransformConstRef.cxx_get on null CxxbtTransformConstRef";
  return this.ptr.data()->{ btTransform };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtTransformRef.cxx_set(btTransform value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtTransformRef.cxx_set on null CxxbtTransformRef";
  this.ptr.data()->{ btTransform } = value;
}

/// Assignment of btTransform
/// \dfgPresetOmit
/// \internal
CxxbtTransformRef.=(btTransform value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtTransformRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// BinOp KL[==] C++[==]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////
Boolean
==(
    CxxbtTransformConstRef t1,
    CxxbtTransformConstRef t2
    ) = "Bullet2_bin_op_EQ_3ec8b48d47d34d03646ab9546c646fe8";



//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btAabbSupport] C++[btAabbSupport]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtAabbSupport(
    CxxbtVector3ConstRef halfExtents,
    CxxbtVector3ConstRef supportDir
    ) = "Bullet2_btAabbSupport_46fce728b15e9e1ef68ccd6cb54f1240";

btVector3
btAabbSupport(
    in
    btVector3
    halfExtents
    
    ,
    in
    btVector3
    supportDir
    
    
    )
{
    
    CxxbtVector3ConstRef halfExtents__cxx = Make_CxxbtVector3ConstRef(halfExtents);
    
    CxxbtVector3ConstRef supportDir__cxx = Make_CxxbtVector3ConstRef(supportDir);
    btVector3 __res = 
    CxxbtAabbSupport(
        halfExtents__cxx,
        supportDir__cxx
        );
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_SInt32] EDK[Fabric_EDK_KL_btAlignedObjectArray_SInt32] LIB[btAlignedObjectArray< int >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32ConstPtr] EDK[CxxbtAlignedObjectArray_SInt32ConstPtr] LIB[btAlignedObjectArray< int > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32ConstPtr] EDK[CxxbtAlignedObjectArray_SInt32ConstPtr] LIB[btAlignedObjectArray< int > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_size on null CxxbtAlignedObjectArray_SInt32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_capacity on null CxxbtAlignedObjectArray_SInt32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_findBinarySearch?(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_SInt32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_findLinearSearch?(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_SInt32ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.findBinarySearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.findLinearSearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32ConstPtr] EDK[CxxbtAlignedObjectArray_SInt32ConstPtr] LIB[btAlignedObjectArray< int > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
SInt32
CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_getAtIndex on null CxxbtAlignedObjectArray_SInt32ConstPtr";
    return this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32Ptr] EDK[CxxbtAlignedObjectArray_SInt32MutablePtr] LIB[btAlignedObjectArray< int > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32Ptr] EDK[CxxbtAlignedObjectArray_SInt32MutablePtr] LIB[btAlignedObjectArray< int > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_size on null CxxbtAlignedObjectArray_SInt32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_clear on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_pop_back on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_resize on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_push_back!(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_push_back on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_capacity on null CxxbtAlignedObjectArray_SInt32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_reserve on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_swap on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.cxx_findBinarySearch?(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_SInt32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.cxx_findLinearSearch?(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_SInt32Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_removeAtIndex on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_remove!(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_remove on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_SInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_copyFromArray on null CxxbtAlignedObjectArray_SInt32Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.remove!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.copyFromArray!(
    in
    btAlignedObjectArray_SInt32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_SInt32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_SInt32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.findLinearSearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.findBinarySearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ptr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32Ptr] EDK[CxxbtAlignedObjectArray_SInt32MutablePtr] LIB[btAlignedObjectArray< int > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
SInt32
CxxbtAlignedObjectArray_SInt32Ptr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_getAtIndex on null CxxbtAlignedObjectArray_SInt32Ptr";
    return this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32Ptr] EDK[CxxbtAlignedObjectArray_SInt32MutablePtr] LIB[btAlignedObjectArray< int > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_SInt32Ptr.cxx_setAtIndex!(
    UInt64 index,
    SInt32 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_setAtIndex on null CxxbtAlignedObjectArray_SInt32Ptr";
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32ConstRef] EDK[CxxbtAlignedObjectArray_SInt32ConstRef] LIB[btAlignedObjectArray< int > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32ConstRef] EDK[CxxbtAlignedObjectArray_SInt32ConstRef] LIB[btAlignedObjectArray< int > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32ConstRef] EDK[CxxbtAlignedObjectArray_SInt32ConstRef] LIB[btAlignedObjectArray< int > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstRef.cxx_size on null CxxbtAlignedObjectArray_SInt32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstRef.cxx_capacity on null CxxbtAlignedObjectArray_SInt32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.cxx_findBinarySearch?(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstRef.cxx_findBinarySearch on null CxxbtAlignedObjectArray_SInt32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.cxx_findLinearSearch?(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstRef.cxx_findLinearSearch on null CxxbtAlignedObjectArray_SInt32ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.findLinearSearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.findBinarySearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32ConstRef] EDK[CxxbtAlignedObjectArray_SInt32ConstRef] LIB[btAlignedObjectArray< int > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
SInt32
CxxbtAlignedObjectArray_SInt32ConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32ConstRef.cxx_getAtIndex on null CxxbtAlignedObjectArray_SInt32ConstRef";
    return this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32Ref] EDK[CxxbtAlignedObjectArray_SInt32MutableRef] LIB[btAlignedObjectArray< int > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32Ref] EDK[CxxbtAlignedObjectArray_SInt32MutableRef] LIB[btAlignedObjectArray< int > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ref.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_size on null CxxbtAlignedObjectArray_SInt32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_clear on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_pop_back on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_resize on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_push_back!(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_push_back on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ref.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_capacity on null CxxbtAlignedObjectArray_SInt32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_reserve on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_swap on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ref.cxx_findBinarySearch?(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_findBinarySearch on null CxxbtAlignedObjectArray_SInt32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ref.cxx_findLinearSearch?(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_findLinearSearch on null CxxbtAlignedObjectArray_SInt32Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_removeAtIndex on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_remove!(
    CxxSInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_remove on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_SInt32ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_copyFromArray on null CxxbtAlignedObjectArray_SInt32Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ref.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.copyFromArray!(
    in
    btAlignedObjectArray_SInt32
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_SInt32ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_SInt32ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ref.findBinarySearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ref.findLinearSearch?(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.remove!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    CxxSInt32ConstRef _arg0__cxx = Make_CxxSInt32ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_SInt32Ref.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_SInt32Ref.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32Ref] EDK[CxxbtAlignedObjectArray_SInt32MutableRef] LIB[btAlignedObjectArray< int > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
SInt32
CxxbtAlignedObjectArray_SInt32Ref.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_getAtIndex on null CxxbtAlignedObjectArray_SInt32Ref";
    return this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_SInt32Ref] EDK[CxxbtAlignedObjectArray_SInt32MutableRef] LIB[btAlignedObjectArray< int > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_SInt32Ref.cxx_setAtIndex!(
    UInt64 index,
    SInt32 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_setAtIndex on null CxxbtAlignedObjectArray_SInt32Ref";
    this.ptr.data()->{ btAlignedObjectArray_SInt32 }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxbtAlignedObjectArray_SInt32ConstPtr
// CxxbtAlignedObjectArray_SInt32Ptr
// CxxbtAlignedObjectArray_SInt32ConstRef
// CxxbtAlignedObjectArray_SInt32Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstPtr(btAlignedObjectArray_SInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstPtr(btAlignedObjectArray_SInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_SInt32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstPtr(btAlignedObjectArray_SInt32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstPtr Make_CxxbtAlignedObjectArray_SInt32ConstPtr(btAlignedObjectArray_SInt32 value) {
  return CxxbtAlignedObjectArray_SInt32ConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ptr(btAlignedObjectArray_SInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ptr(btAlignedObjectArray_SInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_SInt32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ptr(btAlignedObjectArray_SInt32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ptr Make_CxxbtAlignedObjectArray_SInt32Ptr(btAlignedObjectArray_SInt32 value) {
  return CxxbtAlignedObjectArray_SInt32Ptr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef(btAlignedObjectArray_SInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef(btAlignedObjectArray_SInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_SInt32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef(btAlignedObjectArray_SInt32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef Make_CxxbtAlignedObjectArray_SInt32ConstRef(btAlignedObjectArray_SInt32 value) {
  return CxxbtAlignedObjectArray_SInt32ConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref(btAlignedObjectArray_SInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref(btAlignedObjectArray_SInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_SInt32());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref(btAlignedObjectArray_SInt32 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref Make_CxxbtAlignedObjectArray_SInt32Ref(btAlignedObjectArray_SInt32 value) {
  return CxxbtAlignedObjectArray_SInt32Ref(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtAlignedObjectArray_SInt32ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtAlignedObjectArray_SInt32ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_getAt on null CxxbtAlignedObjectArray_SInt32ConstPtr";
  return CxxbtAlignedObjectArray_SInt32ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_SInt32()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef CxxbtAlignedObjectArray_SInt32ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtAlignedObjectArray_SInt32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref CxxbtAlignedObjectArray_SInt32Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_getAt on null CxxbtAlignedObjectArray_SInt32Ptr";
  return CxxbtAlignedObjectArray_SInt32Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_SInt32()));
}

/// Same as for CxxbtAlignedObjectArray_SInt32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref CxxbtAlignedObjectArray_SInt32Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ptr.cxx_setAt(Index i, btAlignedObjectArray_SInt32 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_SInt32Ptr.cxx_setAt on null CxxbtAlignedObjectArray_SInt32Ptr";
  this.ptr.offset(i)->{ btAlignedObjectArray_SInt32 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef(CxxbtAlignedObjectArray_SInt32ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef.=(CxxbtAlignedObjectArray_SInt32ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btAlignedObjectArray_SInt32 value
/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_SInt32 CxxbtAlignedObjectArray_SInt32ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_SInt32ConstRef.cxx_get on null CxxbtAlignedObjectArray_SInt32ConstRef";
  return this.ptr.data()->{ btAlignedObjectArray_SInt32 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref.cxx_set(btAlignedObjectArray_SInt32 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_SInt32Ref.cxx_set on null CxxbtAlignedObjectArray_SInt32Ref";
  this.ptr.data()->{ btAlignedObjectArray_SInt32 } = value;
}

/// Assignment of btAlignedObjectArray_SInt32
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref.=(btAlignedObjectArray_SInt32 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_SInt32Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAlignedObjectArray_UInt16] EDK[Fabric_EDK_KL_btAlignedObjectArray_UInt16] LIB[btAlignedObjectArray< unsigned short >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16ConstPtr] EDK[CxxbtAlignedObjectArray_UInt16ConstPtr] LIB[btAlignedObjectArray< unsigned short > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16ConstPtr] EDK[CxxbtAlignedObjectArray_UInt16ConstPtr] LIB[btAlignedObjectArray< unsigned short > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_size on null CxxbtAlignedObjectArray_UInt16ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_capacity on null CxxbtAlignedObjectArray_UInt16ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_findBinarySearch?(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_UInt16ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_findLinearSearch?(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_UInt16ConstPtr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstPtr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstPtr.findLinearSearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstPtr.findBinarySearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstPtr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16ConstPtr] EDK[CxxbtAlignedObjectArray_UInt16ConstPtr] LIB[btAlignedObjectArray< unsigned short > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt16
CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_getAtIndex on null CxxbtAlignedObjectArray_UInt16ConstPtr";
    return this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16Ptr] EDK[CxxbtAlignedObjectArray_UInt16MutablePtr] LIB[btAlignedObjectArray< unsigned short > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16Ptr] EDK[CxxbtAlignedObjectArray_UInt16MutablePtr] LIB[btAlignedObjectArray< unsigned short > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ptr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_size on null CxxbtAlignedObjectArray_UInt16Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_clear on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_pop_back on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_resize on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_push_back!(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_push_back on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ptr.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_capacity on null CxxbtAlignedObjectArray_UInt16Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_reserve on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_swap on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ptr.cxx_findBinarySearch?(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_findBinarySearch on null CxxbtAlignedObjectArray_UInt16Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ptr.cxx_findLinearSearch?(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_findLinearSearch on null CxxbtAlignedObjectArray_UInt16Ptr";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_removeAtIndex on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_remove!(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_remove on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_UInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_copyFromArray on null CxxbtAlignedObjectArray_UInt16Ptr";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ptr.findLinearSearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ptr.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ptr.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.remove!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ptr.findBinarySearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ptr.copyFromArray!(
    in
    btAlignedObjectArray_UInt16
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_UInt16ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_UInt16ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16Ptr] EDK[CxxbtAlignedObjectArray_UInt16MutablePtr] LIB[btAlignedObjectArray< unsigned short > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt16
CxxbtAlignedObjectArray_UInt16Ptr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_getAtIndex on null CxxbtAlignedObjectArray_UInt16Ptr";
    return this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16Ptr] EDK[CxxbtAlignedObjectArray_UInt16MutablePtr] LIB[btAlignedObjectArray< unsigned short > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_UInt16Ptr.cxx_setAtIndex!(
    UInt64 index,
    UInt16 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_setAtIndex on null CxxbtAlignedObjectArray_UInt16Ptr";
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16ConstRef] EDK[CxxbtAlignedObjectArray_UInt16ConstRef] LIB[btAlignedObjectArray< unsigned short > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16ConstRef] EDK[CxxbtAlignedObjectArray_UInt16ConstRef] LIB[btAlignedObjectArray< unsigned short > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16ConstRef] EDK[CxxbtAlignedObjectArray_UInt16ConstRef] LIB[btAlignedObjectArray< unsigned short > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstRef.cxx_size on null CxxbtAlignedObjectArray_UInt16ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstRef.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstRef.cxx_capacity on null CxxbtAlignedObjectArray_UInt16ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstRef.cxx_findBinarySearch?(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstRef.cxx_findBinarySearch on null CxxbtAlignedObjectArray_UInt16ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstRef.cxx_findLinearSearch?(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstRef.cxx_findLinearSearch on null CxxbtAlignedObjectArray_UInt16ConstRef";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstRef.findBinarySearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstRef.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstRef.findLinearSearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16ConstRef.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16ConstRef] EDK[CxxbtAlignedObjectArray_UInt16ConstRef] LIB[btAlignedObjectArray< unsigned short > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt16
CxxbtAlignedObjectArray_UInt16ConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16ConstRef.cxx_getAtIndex on null CxxbtAlignedObjectArray_UInt16ConstRef";
    return this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16Ref] EDK[CxxbtAlignedObjectArray_UInt16MutableRef] LIB[btAlignedObjectArray< unsigned short > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16Ref] EDK[CxxbtAlignedObjectArray_UInt16MutableRef] LIB[btAlignedObjectArray< unsigned short > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ref.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_size on null CxxbtAlignedObjectArray_UInt16Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_clear on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_pop_back on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_resizeNoInitialize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_resizeNoInitialize on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_resizeNoInitialize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_resize!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_resize on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_resize(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_push_back!(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_push_back on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ref.cxx_capacity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_capacity on null CxxbtAlignedObjectArray_UInt16Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_capacity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_reserve!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_reserve on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_swap!(
    SInt32 _arg0,
    SInt32 _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_swap on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_swap(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ref.cxx_findBinarySearch?(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_findBinarySearch on null CxxbtAlignedObjectArray_UInt16Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_findBinarySearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ref.cxx_findLinearSearch?(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_findLinearSearch on null CxxbtAlignedObjectArray_UInt16Ref";
    return
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_findLinearSearch(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_removeAtIndex!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_removeAtIndex on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_removeAtIndex(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_remove!(
    CxxUInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_remove on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_remove(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_initializeFromBuffer!(
    Data _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_initializeFromBuffer on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.cxx_copyFromArray!(
    CxxbtAlignedObjectArray_UInt16ConstRef _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_copyFromArray on null CxxbtAlignedObjectArray_UInt16Ref";
    
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_copyFromArray(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.remove!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    
    this.cxx_remove(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ref.capacity?(
    )
{   
    SInt32 __res = 
    this.cxx_capacity(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.removeAtIndex!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_removeAtIndex(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.copyFromArray!(
    in
    btAlignedObjectArray_UInt16
    _arg0
    
    
    )
{   
    
    CxxbtAlignedObjectArray_UInt16ConstRef _arg0__cxx = Make_CxxbtAlignedObjectArray_UInt16ConstRef(_arg0);
    
    this.cxx_copyFromArray(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ref.size?(
    )
{   
    SInt32 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.initializeFromBuffer!(
    in
    Data
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{   
    
    
    
    
    this.cxx_initializeFromBuffer(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.resize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.swap!(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{   
    
    
    
    this.cxx_swap(
        _arg0,
        _arg1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ref.findBinarySearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findBinarySearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.resizeNoInitialize!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_resizeNoInitialize(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtAlignedObjectArray_UInt16Ref.findLinearSearch?(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    CxxUInt16ConstRef _arg0__cxx = Make_CxxUInt16ConstRef(_arg0);
    SInt32 __res = 
    this.cxx_findLinearSearch(
        _arg0__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.reserve!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAlignedObjectArray_UInt16Ref.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16Ref] EDK[CxxbtAlignedObjectArray_UInt16MutableRef] LIB[btAlignedObjectArray< unsigned short > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
UInt16
CxxbtAlignedObjectArray_UInt16Ref.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_getAtIndex on null CxxbtAlignedObjectArray_UInt16Ref";
    return this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAlignedObjectArray_UInt16Ref] EDK[CxxbtAlignedObjectArray_UInt16MutableRef] LIB[btAlignedObjectArray< unsigned short > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxbtAlignedObjectArray_UInt16Ref.cxx_setAtIndex!(
    UInt64 index,
    UInt16 value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_setAtIndex on null CxxbtAlignedObjectArray_UInt16Ref";
    this.ptr.data()->{ btAlignedObjectArray_UInt16 }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxbtAlignedObjectArray_UInt16ConstPtr
// CxxbtAlignedObjectArray_UInt16Ptr
// CxxbtAlignedObjectArray_UInt16ConstRef
// CxxbtAlignedObjectArray_UInt16Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstPtr(btAlignedObjectArray_UInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstPtr(btAlignedObjectArray_UInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt16());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstPtr(btAlignedObjectArray_UInt16 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstPtr Make_CxxbtAlignedObjectArray_UInt16ConstPtr(btAlignedObjectArray_UInt16 value) {
  return CxxbtAlignedObjectArray_UInt16ConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ptr(btAlignedObjectArray_UInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ptr(btAlignedObjectArray_UInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt16());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ptr(btAlignedObjectArray_UInt16 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ptr Make_CxxbtAlignedObjectArray_UInt16Ptr(btAlignedObjectArray_UInt16 value) {
  return CxxbtAlignedObjectArray_UInt16Ptr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef(btAlignedObjectArray_UInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef(btAlignedObjectArray_UInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt16());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef(btAlignedObjectArray_UInt16 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef Make_CxxbtAlignedObjectArray_UInt16ConstRef(btAlignedObjectArray_UInt16 value) {
  return CxxbtAlignedObjectArray_UInt16ConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref(btAlignedObjectArray_UInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref(btAlignedObjectArray_UInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt16());
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref(btAlignedObjectArray_UInt16 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref Make_CxxbtAlignedObjectArray_UInt16Ref(btAlignedObjectArray_UInt16 value) {
  return CxxbtAlignedObjectArray_UInt16Ref(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtAlignedObjectArray_UInt16ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtAlignedObjectArray_UInt16ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_getAt on null CxxbtAlignedObjectArray_UInt16ConstPtr";
  return CxxbtAlignedObjectArray_UInt16ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt16()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef CxxbtAlignedObjectArray_UInt16ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtAlignedObjectArray_UInt16ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref CxxbtAlignedObjectArray_UInt16Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_getAt on null CxxbtAlignedObjectArray_UInt16Ptr";
  return CxxbtAlignedObjectArray_UInt16Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAlignedObjectArray_UInt16()));
}

/// Same as for CxxbtAlignedObjectArray_UInt16ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref CxxbtAlignedObjectArray_UInt16Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ptr.cxx_setAt(Index i, btAlignedObjectArray_UInt16 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt16Ptr.cxx_setAt on null CxxbtAlignedObjectArray_UInt16Ptr";
  this.ptr.offset(i)->{ btAlignedObjectArray_UInt16 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef(CxxbtAlignedObjectArray_UInt16ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef.=(CxxbtAlignedObjectArray_UInt16ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btAlignedObjectArray_UInt16 value
/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt16 CxxbtAlignedObjectArray_UInt16ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt16ConstRef.cxx_get on null CxxbtAlignedObjectArray_UInt16ConstRef";
  return this.ptr.data()->{ btAlignedObjectArray_UInt16 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref.cxx_set(btAlignedObjectArray_UInt16 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAlignedObjectArray_UInt16Ref.cxx_set on null CxxbtAlignedObjectArray_UInt16Ref";
  this.ptr.data()->{ btAlignedObjectArray_UInt16 } = value;
}

/// Assignment of btAlignedObjectArray_UInt16
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref.=(btAlignedObjectArray_UInt16 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAlignedObjectArray_UInt16Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btCollisionObject] EDK[Fabric_EDK_KL_btCollisionObject] LIB[btCollisionObject *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectConstPtr] EDK[CxxbtCollisionObjectConstPtr] LIB[btCollisionObject * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectConstPtr] EDK[CxxbtCollisionObjectConstPtr] LIB[btCollisionObject * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_mergesSimulationIslands?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_mergesSimulationIslands on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_mergesSimulationIslands(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectConstPtr.cxx_getAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getAnisotropicFriction on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_hasAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_hasAnisotropicFriction on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_hasAnisotropicFriction on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        frictionMode
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getContactProcessingThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getContactProcessingThreshold on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactProcessingThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_isStaticObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_isStaticObject on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_isKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_isKinematicObject on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_isStaticOrKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_isStaticOrKinematicObject on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticOrKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_hasContactResponse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_hasContactResponse on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasContactResponse(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectConstPtr.cxx_getCollisionShape?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getCollisionShape on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectConstPtr.cxx_internalGetExtensionPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_internalGetExtensionPointer on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_internalGetExtensionPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getActivationState?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getActivationState on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getActivationState(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstPtr.cxx_setActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_setActivationState on null CxxbtCollisionObjectConstPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getDeactivationTime?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getDeactivationTime on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getDeactivationTime(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstPtr.cxx_forceActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_forceActivationState on null CxxbtCollisionObjectConstPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_forceActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstPtr.cxx_activate?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_activate on null CxxbtCollisionObjectConstPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstPtr.cxx_activate?(
    Boolean forceActivation
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_activate on null CxxbtCollisionObjectConstPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        forceActivation
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_isActive?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_isActive on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isActive(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getRestitution?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getRestitution on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRestitution(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getFriction on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getRollingFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getRollingFriction on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRollingFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getSpinningFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getSpinningFriction on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getSpinningFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getContactStiffness?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getContactStiffness on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactStiffness(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getContactDamping?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getContactDamping on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactDamping(
        );
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getInternalType?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getInternalType on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInternalType(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtCollisionObjectConstPtr.cxx_getWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getWorldTransform on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtCollisionObjectConstPtr.cxx_getBroadphaseHandle?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getBroadphaseHandle on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtCollisionObjectConstPtr.cxx_getInterpolationWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getInterpolationWorldTransform on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectConstPtr.cxx_getInterpolationLinearVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getInterpolationLinearVelocity on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationLinearVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectConstPtr.cxx_getInterpolationAngularVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getInterpolationAngularVelocity on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationAngularVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getIslandTag?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getIslandTag on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getIslandTag(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getCompanionId?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getCompanionId on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCompanionId(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getWorldArrayIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getWorldArrayIndex on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldArrayIndex(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getHitFraction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getHitFraction on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getHitFraction(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getCollisionFlags?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getCollisionFlags on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionFlags(
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getCcdSweptSphereRadius?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getCcdSweptSphereRadius on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSweptSphereRadius(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getCcdMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getCcdMotionThreshold on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdMotionThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.cxx_getCcdSquareMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getCcdSquareMotionThreshold on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSquareMotionThreshold(
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectConstPtr.cxx_getUserPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getUserPointer on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getUserIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getUserIndex on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getUserIndex2?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getUserIndex2 on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex2(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.cxx_getUpdateRevisionInternal?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getUpdateRevisionInternal on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUpdateRevisionInternal(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_getCustomDebugColor on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.cxx_checkCollideWith?(
    btCollisionObject co
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstPtr.cxx_checkCollideWith on null CxxbtCollisionObjectConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_checkCollideWith(
        co
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstPtr.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstPtr.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectConstPtr.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstPtr.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectConstPtr.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectConstPtr.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectConstPtr.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtCollisionObjectConstPtr.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstPtr.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectConstPtr.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstPtr.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstPtr.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstPtr.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectConstPtr.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectPtr] EDK[CxxbtCollisionObjectMutablePtr] LIB[btCollisionObject * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectPtr] EDK[CxxbtCollisionObjectMutablePtr] LIB[btCollisionObject * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_mergesSimulationIslands?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_mergesSimulationIslands on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_mergesSimulationIslands(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectPtr.cxx_getAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getAnisotropicFriction on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setAnisotropicFriction on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setAnisotropicFriction(
        anisotropicFriction
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction,
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setAnisotropicFriction on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setAnisotropicFriction(
        anisotropicFriction,
        frictionMode
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_hasAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_hasAnisotropicFriction on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_hasAnisotropicFriction on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        frictionMode
        );
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setContactProcessingThreshold!(
    Float32 contactProcessingThreshold
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setContactProcessingThreshold on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getContactProcessingThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getContactProcessingThreshold on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactProcessingThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_isStaticObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_isStaticObject on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_isKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_isKinematicObject on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_isStaticOrKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_isStaticOrKinematicObject on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticOrKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_hasContactResponse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_hasContactResponse on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasContactResponse(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectPtr.cxx_getCollisionShape?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getCollisionShape on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectPtr.cxx_getCollisionShape!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getCollisionShape on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setIgnoreCollisionCheck!(
    btCollisionObject co,
    Boolean ignoreCollisionCheck
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setIgnoreCollisionCheck on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectPtr.cxx_internalGetExtensionPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_internalGetExtensionPointer on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_internalGetExtensionPointer(
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_internalSetExtensionPointer!(
    Data pointer
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_internalSetExtensionPointer on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_internalSetExtensionPointer(
        pointer
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getActivationState?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getActivationState on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getActivationState(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setActivationState on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setDeactivationTime!(
    Float32 time
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setDeactivationTime on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setDeactivationTime(
        time
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getDeactivationTime?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getDeactivationTime on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getDeactivationTime(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_forceActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_forceActivationState on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_forceActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_activate?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_activate on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_activate?(
    Boolean forceActivation
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_activate on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        forceActivation
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_isActive?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_isActive on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isActive(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setRestitution!(
    Float32 rest
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setRestitution on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setRestitution(
        rest
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getRestitution?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getRestitution on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRestitution(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setFriction on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getFriction on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setRollingFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setRollingFriction on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setRollingFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getRollingFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getRollingFriction on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRollingFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setSpinningFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setSpinningFriction on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setSpinningFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getSpinningFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getSpinningFriction on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getSpinningFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setContactStiffnessAndDamping!(
    Float32 stiffness,
    Float32 damping
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setContactStiffnessAndDamping on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getContactStiffness?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getContactStiffness on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactStiffness(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getContactDamping?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getContactDamping on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactDamping(
        );
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getInternalType?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getInternalType on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInternalType(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
CxxbtCollisionObjectPtr.cxx_getWorldTransform!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getWorldTransform on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtCollisionObjectPtr.cxx_getWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getWorldTransform on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setWorldTransform!(
    CxxbtTransformConstRef worldTrans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setWorldTransform on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setWorldTransform(
        worldTrans
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtCollisionObjectPtr.cxx_getBroadphaseHandle!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getBroadphaseHandle on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtCollisionObjectPtr.cxx_getBroadphaseHandle?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getBroadphaseHandle on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setBroadphaseHandle!(
    btBroadphaseProxy handle
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setBroadphaseHandle on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setBroadphaseHandle(
        handle
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtCollisionObjectPtr.cxx_getInterpolationWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getInterpolationWorldTransform on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
CxxbtCollisionObjectPtr.cxx_getInterpolationWorldTransform!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getInterpolationWorldTransform on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setInterpolationWorldTransform!(
    CxxbtTransformConstRef trans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setInterpolationWorldTransform on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationWorldTransform(
        trans
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setInterpolationLinearVelocity!(
    CxxbtVector3ConstRef linvel
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setInterpolationLinearVelocity on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationLinearVelocity(
        linvel
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setInterpolationAngularVelocity!(
    CxxbtVector3ConstRef angvel
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setInterpolationAngularVelocity on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationAngularVelocity(
        angvel
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectPtr.cxx_getInterpolationLinearVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getInterpolationLinearVelocity on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationLinearVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectPtr.cxx_getInterpolationAngularVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getInterpolationAngularVelocity on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationAngularVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getIslandTag?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getIslandTag on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getIslandTag(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setIslandTag!(
    SInt32 tag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setIslandTag on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setIslandTag(
        tag
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getCompanionId?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getCompanionId on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCompanionId(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setCompanionId!(
    SInt32 id
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setCompanionId on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCompanionId(
        id
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getWorldArrayIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getWorldArrayIndex on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldArrayIndex(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setWorldArrayIndex!(
    SInt32 ix
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setWorldArrayIndex on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setWorldArrayIndex(
        ix
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getHitFraction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getHitFraction on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getHitFraction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setHitFraction!(
    Float32 hitFraction
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setHitFraction on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setHitFraction(
        hitFraction
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getCollisionFlags?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getCollisionFlags on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionFlags(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setCollisionFlags!(
    SInt32 flags
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setCollisionFlags on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCollisionFlags(
        flags
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getCcdSweptSphereRadius?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getCcdSweptSphereRadius on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSweptSphereRadius(
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setCcdSweptSphereRadius!(
    Float32 radius
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setCcdSweptSphereRadius on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCcdSweptSphereRadius(
        radius
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getCcdMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getCcdMotionThreshold on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdMotionThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.cxx_getCcdSquareMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getCcdSquareMotionThreshold on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSquareMotionThreshold(
        );
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setCcdMotionThreshold!(
    Float32 ccdMotionThreshold
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setCcdMotionThreshold on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectPtr.cxx_getUserPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getUserPointer on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getUserIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getUserIndex on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getUserIndex2?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getUserIndex2 on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex2(
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setUserPointer!(
    Data userPointer
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setUserPointer on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserPointer(
        userPointer
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setUserIndex!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setUserIndex on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserIndex(
        index
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setUserIndex2!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setUserIndex2 on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserIndex2(
        index
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.cxx_getUpdateRevisionInternal?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getUpdateRevisionInternal on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUpdateRevisionInternal(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_setCustomDebugColor!(
    CxxbtVector3ConstRef colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_setCustomDebugColor on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.cxx_removeCustomDebugColor!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_removeCustomDebugColor on null CxxbtCollisionObjectPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_removeCustomDebugColor(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_getCustomDebugColor on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.cxx_checkCollideWith?(
    btCollisionObject co
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectPtr.cxx_checkCollideWith on null CxxbtCollisionObjectPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_checkCollideWith(
        co
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setCompanionId!(
    in
    SInt32
    id
    
    
    )
{   
    
    
    this.cxx_setCompanionId(
        id
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx
        );
    
    
    
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setCcdSweptSphereRadius!(
    in
    Float32
    radius
    
    
    )
{   
    
    
    this.cxx_setCcdSweptSphereRadius(
        radius
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setCcdMotionThreshold!(
    in
    Float32
    ccdMotionThreshold
    
    
    )
{   
    
    
    this.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setInterpolationLinearVelocity!(
    in
    btVector3
    linvel
    
    
    )
{   
    
    CxxbtVector3ConstRef linvel__cxx = Make_CxxbtVector3ConstRef(linvel);
    
    this.cxx_setInterpolationLinearVelocity(
        linvel__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectPtr.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setCustomDebugColor!(
    in
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3ConstRef colorRGB__cxx = Make_CxxbtVector3ConstRef(colorRGB);
    
    this.cxx_setCustomDebugColor(
        colorRGB__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setWorldArrayIndex!(
    in
    SInt32
    ix
    
    
    )
{   
    
    
    this.cxx_setWorldArrayIndex(
        ix
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setInterpolationWorldTransform!(
    in
    btTransform
    trans
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    this.cxx_setInterpolationWorldTransform(
        trans__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setUserIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex(
        index
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setHitFraction!(
    in
    Float32
    hitFraction
    
    
    )
{   
    
    
    this.cxx_setHitFraction(
        hitFraction
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setSpinningFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setSpinningFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectPtr.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setIslandTag!(
    in
    SInt32
    tag
    
    
    )
{   
    
    
    this.cxx_setIslandTag(
        tag
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setDeactivationTime!(
    in
    Float32
    time
    
    
    )
{   
    
    
    this.cxx_setDeactivationTime(
        time
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setContactStiffnessAndDamping!(
    in
    Float32
    stiffness
    
    ,
    in
    Float32
    damping
    
    
    )
{   
    
    
    
    this.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectPtr.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.internalSetExtensionPointer!(
    in
    Data
    pointer
    
    
    )
{   
    
    
    this.cxx_internalSetExtensionPointer(
        pointer
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectPtr.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtCollisionObjectPtr.getWorldTransform!(
    )
{   
    CxxbtTransformRef __res_cxx = 
    this.cxx_getWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setBroadphaseHandle!(
    in
    btBroadphaseProxy
    handle
    
    
    )
{   
    
    
    this.cxx_setBroadphaseHandle(
        handle
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setRollingFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setRollingFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setInterpolationAngularVelocity!(
    in
    btVector3
    angvel
    
    
    )
{   
    
    CxxbtVector3ConstRef angvel__cxx = Make_CxxbtVector3ConstRef(angvel);
    
    this.cxx_setInterpolationAngularVelocity(
        angvel__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectPtr.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setUserIndex2!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex2(
        index
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtCollisionObjectPtr.getBroadphaseHandle!(
    )
{   
    btBroadphaseProxy __res = 
    this.cxx_getBroadphaseHandle(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    ,
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx,
        frictionMode
        );
    
    
    
    
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectPtr.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setRestitution!(
    in
    Float32
    rest
    
    
    )
{   
    
    
    this.cxx_setRestitution(
        rest
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setWorldTransform!(
    in
    btTransform
    worldTrans
    
    
    )
{   
    
    CxxbtTransformConstRef worldTrans__cxx = Make_CxxbtTransformConstRef(worldTrans);
    
    this.cxx_setWorldTransform(
        worldTrans__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.removeCustomDebugColor!(
    )
{   
    
    this.cxx_removeCustomDebugColor(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setCollisionFlags!(
    in
    SInt32
    flags
    
    
    )
{   
    
    
    this.cxx_setCollisionFlags(
        flags
        );
    
    
    
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setUserPointer!(
    in
    Data
    userPointer
    
    
    )
{   
    
    
    this.cxx_setUserPointer(
        userPointer
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setIgnoreCollisionCheck!(
    in
    btCollisionObject
    co
    
    ,
    in
    Boolean
    ignoreCollisionCheck
    
    
    )
{   
    
    
    
    this.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
    
    
    
    
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectPtr.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setContactProcessingThreshold!(
    in
    Float32
    contactProcessingThreshold
    
    
    )
{   
    
    
    this.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtCollisionObjectPtr.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectPtr.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectPtr.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectPtr.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectConstRef] EDK[CxxbtCollisionObjectConstRef] LIB[btCollisionObject * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectConstRef] EDK[CxxbtCollisionObjectConstRef] LIB[btCollisionObject * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectConstRef] EDK[CxxbtCollisionObjectConstRef] LIB[btCollisionObject * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_mergesSimulationIslands?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_mergesSimulationIslands on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_mergesSimulationIslands(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectConstRef.cxx_getAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getAnisotropicFriction on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_hasAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_hasAnisotropicFriction on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_hasAnisotropicFriction on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        frictionMode
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getContactProcessingThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getContactProcessingThreshold on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactProcessingThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_isStaticObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_isStaticObject on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_isKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_isKinematicObject on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_isStaticOrKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_isStaticOrKinematicObject on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticOrKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_hasContactResponse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_hasContactResponse on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasContactResponse(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectConstRef.cxx_getCollisionShape?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getCollisionShape on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectConstRef.cxx_internalGetExtensionPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_internalGetExtensionPointer on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_internalGetExtensionPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getActivationState?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getActivationState on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getActivationState(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstRef.cxx_setActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_setActivationState on null CxxbtCollisionObjectConstRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getDeactivationTime?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getDeactivationTime on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getDeactivationTime(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstRef.cxx_forceActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_forceActivationState on null CxxbtCollisionObjectConstRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_forceActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstRef.cxx_activate?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_activate on null CxxbtCollisionObjectConstRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstRef.cxx_activate?(
    Boolean forceActivation
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_activate on null CxxbtCollisionObjectConstRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        forceActivation
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_isActive?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_isActive on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isActive(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getRestitution?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getRestitution on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRestitution(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getFriction on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getRollingFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getRollingFriction on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRollingFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getSpinningFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getSpinningFriction on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getSpinningFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getContactStiffness?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getContactStiffness on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactStiffness(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getContactDamping?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getContactDamping on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactDamping(
        );
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getInternalType?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getInternalType on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInternalType(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtCollisionObjectConstRef.cxx_getWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getWorldTransform on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtCollisionObjectConstRef.cxx_getBroadphaseHandle?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getBroadphaseHandle on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtCollisionObjectConstRef.cxx_getInterpolationWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getInterpolationWorldTransform on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectConstRef.cxx_getInterpolationLinearVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getInterpolationLinearVelocity on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationLinearVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectConstRef.cxx_getInterpolationAngularVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getInterpolationAngularVelocity on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationAngularVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getIslandTag?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getIslandTag on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getIslandTag(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getCompanionId?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getCompanionId on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCompanionId(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getWorldArrayIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getWorldArrayIndex on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldArrayIndex(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getHitFraction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getHitFraction on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getHitFraction(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getCollisionFlags?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getCollisionFlags on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionFlags(
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getCcdSweptSphereRadius?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getCcdSweptSphereRadius on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSweptSphereRadius(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getCcdMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getCcdMotionThreshold on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdMotionThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.cxx_getCcdSquareMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getCcdSquareMotionThreshold on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSquareMotionThreshold(
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectConstRef.cxx_getUserPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getUserPointer on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getUserIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getUserIndex on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getUserIndex2?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getUserIndex2 on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex2(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.cxx_getUpdateRevisionInternal?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getUpdateRevisionInternal on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUpdateRevisionInternal(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_getCustomDebugColor on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.cxx_checkCollideWith?(
    btCollisionObject co
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectConstRef.cxx_checkCollideWith on null CxxbtCollisionObjectConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_checkCollideWith(
        co
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstRef.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstRef.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectConstRef.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectConstRef.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstRef.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtCollisionObjectConstRef.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectConstRef.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectConstRef.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectConstRef.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectConstRef.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectConstRef.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectConstRef.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectConstRef.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectConstRef.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectRef] EDK[CxxbtCollisionObjectMutableRef] LIB[btCollisionObject * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtCollisionObjectRef] EDK[CxxbtCollisionObjectMutableRef] LIB[btCollisionObject * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_mergesSimulationIslands?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_mergesSimulationIslands on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_mergesSimulationIslands(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectRef.cxx_getAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getAnisotropicFriction on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setAnisotropicFriction on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setAnisotropicFriction(
        anisotropicFriction
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction,
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setAnisotropicFriction on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setAnisotropicFriction(
        anisotropicFriction,
        frictionMode
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_hasAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_hasAnisotropicFriction on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_hasAnisotropicFriction on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        frictionMode
        );
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setContactProcessingThreshold!(
    Float32 contactProcessingThreshold
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setContactProcessingThreshold on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getContactProcessingThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getContactProcessingThreshold on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactProcessingThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_isStaticObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_isStaticObject on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_isKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_isKinematicObject on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_isStaticOrKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_isStaticOrKinematicObject on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticOrKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_hasContactResponse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_hasContactResponse on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasContactResponse(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectRef.cxx_getCollisionShape?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getCollisionShape on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectRef.cxx_getCollisionShape!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getCollisionShape on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setIgnoreCollisionCheck!(
    btCollisionObject co,
    Boolean ignoreCollisionCheck
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setIgnoreCollisionCheck on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectRef.cxx_internalGetExtensionPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_internalGetExtensionPointer on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_internalGetExtensionPointer(
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_internalSetExtensionPointer!(
    Data pointer
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_internalSetExtensionPointer on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_internalSetExtensionPointer(
        pointer
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getActivationState?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getActivationState on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getActivationState(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setActivationState on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setDeactivationTime!(
    Float32 time
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setDeactivationTime on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setDeactivationTime(
        time
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getDeactivationTime?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getDeactivationTime on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getDeactivationTime(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_forceActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_forceActivationState on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_forceActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_activate?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_activate on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_activate?(
    Boolean forceActivation
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_activate on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        forceActivation
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_isActive?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_isActive on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isActive(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setRestitution!(
    Float32 rest
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setRestitution on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setRestitution(
        rest
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getRestitution?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getRestitution on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRestitution(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setFriction on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getFriction on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setRollingFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setRollingFriction on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setRollingFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getRollingFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getRollingFriction on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRollingFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setSpinningFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setSpinningFriction on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setSpinningFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getSpinningFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getSpinningFriction on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getSpinningFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setContactStiffnessAndDamping!(
    Float32 stiffness,
    Float32 damping
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setContactStiffnessAndDamping on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getContactStiffness?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getContactStiffness on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactStiffness(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getContactDamping?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getContactDamping on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactDamping(
        );
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getInternalType?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getInternalType on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInternalType(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
CxxbtCollisionObjectRef.cxx_getWorldTransform!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getWorldTransform on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtCollisionObjectRef.cxx_getWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getWorldTransform on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setWorldTransform!(
    CxxbtTransformConstRef worldTrans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setWorldTransform on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setWorldTransform(
        worldTrans
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtCollisionObjectRef.cxx_getBroadphaseHandle!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getBroadphaseHandle on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtCollisionObjectRef.cxx_getBroadphaseHandle?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getBroadphaseHandle on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setBroadphaseHandle!(
    btBroadphaseProxy handle
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setBroadphaseHandle on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setBroadphaseHandle(
        handle
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtCollisionObjectRef.cxx_getInterpolationWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getInterpolationWorldTransform on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
CxxbtCollisionObjectRef.cxx_getInterpolationWorldTransform!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getInterpolationWorldTransform on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setInterpolationWorldTransform!(
    CxxbtTransformConstRef trans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setInterpolationWorldTransform on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationWorldTransform(
        trans
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setInterpolationLinearVelocity!(
    CxxbtVector3ConstRef linvel
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setInterpolationLinearVelocity on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationLinearVelocity(
        linvel
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setInterpolationAngularVelocity!(
    CxxbtVector3ConstRef angvel
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setInterpolationAngularVelocity on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationAngularVelocity(
        angvel
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectRef.cxx_getInterpolationLinearVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getInterpolationLinearVelocity on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationLinearVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtCollisionObjectRef.cxx_getInterpolationAngularVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getInterpolationAngularVelocity on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationAngularVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getIslandTag?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getIslandTag on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getIslandTag(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setIslandTag!(
    SInt32 tag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setIslandTag on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setIslandTag(
        tag
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getCompanionId?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getCompanionId on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCompanionId(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setCompanionId!(
    SInt32 id
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setCompanionId on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCompanionId(
        id
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getWorldArrayIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getWorldArrayIndex on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldArrayIndex(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setWorldArrayIndex!(
    SInt32 ix
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setWorldArrayIndex on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setWorldArrayIndex(
        ix
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getHitFraction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getHitFraction on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getHitFraction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setHitFraction!(
    Float32 hitFraction
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setHitFraction on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setHitFraction(
        hitFraction
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getCollisionFlags?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getCollisionFlags on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionFlags(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setCollisionFlags!(
    SInt32 flags
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setCollisionFlags on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCollisionFlags(
        flags
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getCcdSweptSphereRadius?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getCcdSweptSphereRadius on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSweptSphereRadius(
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setCcdSweptSphereRadius!(
    Float32 radius
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setCcdSweptSphereRadius on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCcdSweptSphereRadius(
        radius
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getCcdMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getCcdMotionThreshold on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdMotionThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.cxx_getCcdSquareMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getCcdSquareMotionThreshold on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSquareMotionThreshold(
        );
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setCcdMotionThreshold!(
    Float32 ccdMotionThreshold
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setCcdMotionThreshold on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectRef.cxx_getUserPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getUserPointer on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getUserIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getUserIndex on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getUserIndex2?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getUserIndex2 on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex2(
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setUserPointer!(
    Data userPointer
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setUserPointer on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserPointer(
        userPointer
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setUserIndex!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setUserIndex on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserIndex(
        index
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setUserIndex2!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setUserIndex2 on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserIndex2(
        index
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.cxx_getUpdateRevisionInternal?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getUpdateRevisionInternal on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUpdateRevisionInternal(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_setCustomDebugColor!(
    CxxbtVector3ConstRef colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_setCustomDebugColor on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.cxx_removeCustomDebugColor!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_removeCustomDebugColor on null CxxbtCollisionObjectRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_removeCustomDebugColor(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_getCustomDebugColor on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.cxx_checkCollideWith?(
    btCollisionObject co
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtCollisionObjectRef.cxx_checkCollideWith on null CxxbtCollisionObjectRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_checkCollideWith(
        co
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.internalSetExtensionPointer!(
    in
    Data
    pointer
    
    
    )
{   
    
    
    this.cxx_internalSetExtensionPointer(
        pointer
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setRestitution!(
    in
    Float32
    rest
    
    
    )
{   
    
    
    this.cxx_setRestitution(
        rest
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setBroadphaseHandle!(
    in
    btBroadphaseProxy
    handle
    
    
    )
{   
    
    
    this.cxx_setBroadphaseHandle(
        handle
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setCompanionId!(
    in
    SInt32
    id
    
    
    )
{   
    
    
    this.cxx_setCompanionId(
        id
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtCollisionObjectRef.getBroadphaseHandle!(
    )
{   
    btBroadphaseProxy __res = 
    this.cxx_getBroadphaseHandle(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setIslandTag!(
    in
    SInt32
    tag
    
    
    )
{   
    
    
    this.cxx_setIslandTag(
        tag
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtCollisionObjectRef.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setContactStiffnessAndDamping!(
    in
    Float32
    stiffness
    
    ,
    in
    Float32
    damping
    
    
    )
{   
    
    
    
    this.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setRollingFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setRollingFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setWorldTransform!(
    in
    btTransform
    worldTrans
    
    
    )
{   
    
    CxxbtTransformConstRef worldTrans__cxx = Make_CxxbtTransformConstRef(worldTrans);
    
    this.cxx_setWorldTransform(
        worldTrans__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectRef.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setInterpolationAngularVelocity!(
    in
    btVector3
    angvel
    
    
    )
{   
    
    CxxbtVector3ConstRef angvel__cxx = Make_CxxbtVector3ConstRef(angvel);
    
    this.cxx_setInterpolationAngularVelocity(
        angvel__cxx
        );
    
    
    
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setCcdSweptSphereRadius!(
    in
    Float32
    radius
    
    
    )
{   
    
    
    this.cxx_setCcdSweptSphereRadius(
        radius
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtCollisionObjectRef.getWorldTransform!(
    )
{   
    CxxbtTransformRef __res_cxx = 
    this.cxx_getWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setWorldArrayIndex!(
    in
    SInt32
    ix
    
    
    )
{   
    
    
    this.cxx_setWorldArrayIndex(
        ix
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setInterpolationLinearVelocity!(
    in
    btVector3
    linvel
    
    
    )
{   
    
    CxxbtVector3ConstRef linvel__cxx = Make_CxxbtVector3ConstRef(linvel);
    
    this.cxx_setInterpolationLinearVelocity(
        linvel__cxx
        );
    
    
    
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setCcdMotionThreshold!(
    in
    Float32
    ccdMotionThreshold
    
    
    )
{   
    
    
    this.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setCollisionFlags!(
    in
    SInt32
    flags
    
    
    )
{   
    
    
    this.cxx_setCollisionFlags(
        flags
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setIgnoreCollisionCheck!(
    in
    btCollisionObject
    co
    
    ,
    in
    Boolean
    ignoreCollisionCheck
    
    
    )
{   
    
    
    
    this.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setCustomDebugColor!(
    in
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3ConstRef colorRGB__cxx = Make_CxxbtVector3ConstRef(colorRGB);
    
    this.cxx_setCustomDebugColor(
        colorRGB__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setSpinningFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setSpinningFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtCollisionObjectRef.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setUserIndex2!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex2(
        index
        );
    
    
    
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setContactProcessingThreshold!(
    in
    Float32
    contactProcessingThreshold
    
    
    )
{   
    
    
    this.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtCollisionObjectRef.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setInterpolationWorldTransform!(
    in
    btTransform
    trans
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    this.cxx_setInterpolationWorldTransform(
        trans__cxx
        );
    
    
    
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.removeCustomDebugColor!(
    )
{   
    
    this.cxx_removeCustomDebugColor(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    ,
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx,
        frictionMode
        );
    
    
    
    
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setUserIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex(
        index
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setHitFraction!(
    in
    Float32
    hitFraction
    
    
    )
{   
    
    
    this.cxx_setHitFraction(
        hitFraction
        );
    
    
    
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectRef.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtCollisionObjectRef.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCollisionObjectRef.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectRef.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtCollisionObjectRef.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setUserPointer!(
    in
    Data
    userPointer
    
    
    )
{   
    
    
    this.cxx_setUserPointer(
        userPointer
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtCollisionObjectRef.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtCollisionObjectRef.setDeactivationTime!(
    in
    Float32
    time
    
    
    )
{   
    
    
    this.cxx_setDeactivationTime(
        time
        );
    
    
    
}



////////////////////////////////////////////////////////////////////////
// CxxbtCollisionObjectConstPtr
// CxxbtCollisionObjectPtr
// CxxbtCollisionObjectConstRef
// CxxbtCollisionObjectRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstPtr(btCollisionObject array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstPtr(btCollisionObject array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btCollisionObject());
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstPtr(btCollisionObject value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstPtr Make_CxxbtCollisionObjectConstPtr(btCollisionObject value) {
  return CxxbtCollisionObjectConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectPtr(btCollisionObject array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectPtr(btCollisionObject array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btCollisionObject());
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectPtr(btCollisionObject value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectPtr Make_CxxbtCollisionObjectPtr(btCollisionObject value) {
  return CxxbtCollisionObjectPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef(btCollisionObject array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef(btCollisionObject array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btCollisionObject());
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef(btCollisionObject value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef Make_CxxbtCollisionObjectConstRef(btCollisionObject value) {
  return CxxbtCollisionObjectConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef(btCollisionObject array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef(btCollisionObject array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btCollisionObject());
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef(btCollisionObject value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef Make_CxxbtCollisionObjectRef(btCollisionObject value) {
  return CxxbtCollisionObjectRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtCollisionObjectConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtCollisionObjectConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtCollisionObjectConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef CxxbtCollisionObjectConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtCollisionObjectConstPtr.cxx_getAt on null CxxbtCollisionObjectConstPtr";
  return CxxbtCollisionObjectConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btCollisionObject()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef CxxbtCollisionObjectConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtCollisionObjectConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef CxxbtCollisionObjectPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtCollisionObjectPtr.cxx_getAt on null CxxbtCollisionObjectPtr";
  return CxxbtCollisionObjectRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btCollisionObject()));
}

/// Same as for CxxbtCollisionObjectConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef CxxbtCollisionObjectPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectPtr.cxx_setAt(Index i, btCollisionObject v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtCollisionObjectPtr.cxx_setAt on null CxxbtCollisionObjectPtr";
  this.ptr.offset(i)->{ btCollisionObject } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef(CxxbtCollisionObjectConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef.=(CxxbtCollisionObjectConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btCollisionObject value
/// \dfgPresetOmit
/// \internal
btCollisionObject CxxbtCollisionObjectConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtCollisionObjectConstRef.cxx_get on null CxxbtCollisionObjectConstRef";
  return this.ptr.data()->{ btCollisionObject };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef.cxx_set(btCollisionObject value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtCollisionObjectRef.cxx_set on null CxxbtCollisionObjectRef";
  this.ptr.data()->{ btCollisionObject } = value;
}

/// Assignment of btCollisionObject
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef.=(btCollisionObject value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[HullDesc] EDK[Fabric_EDK_KL_HullDesc] LIB[HullDesc]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescConstPtr] EDK[CxxHullDescConstPtr] LIB[HullDesc const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstPtr.cxx_get_mFlags()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstPtr.cxx_get_mFlags on null CxxHullDescConstPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mFlags();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstPtr.get_mFlags()
{
    UInt32 __res = 
    this.cxx_get_mFlags();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstPtr.cxx_get_mVcount()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstPtr.cxx_get_mVcount on null CxxHullDescConstPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVcount();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstPtr.get_mVcount()
{
    UInt32 __res = 
    this.cxx_get_mVcount();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr CxxHullDescConstPtr.cxx_get_mVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstPtr.cxx_get_mVertices on null CxxHullDescConstPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVertices();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxHullDescConstPtr.get_mVertices()
{
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_get_mVertices();
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstPtr.cxx_get_mVertexStride()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstPtr.cxx_get_mVertexStride on null CxxHullDescConstPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVertexStride();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstPtr.get_mVertexStride()
{
    UInt32 __res = 
    this.cxx_get_mVertexStride();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxHullDescConstPtr.cxx_get_mNormalEpsilon()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstPtr.cxx_get_mNormalEpsilon on null CxxHullDescConstPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mNormalEpsilon();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxHullDescConstPtr.get_mNormalEpsilon()
{
    Float32 __res = 
    this.cxx_get_mNormalEpsilon();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstPtr.cxx_get_mMaxVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstPtr.cxx_get_mMaxVertices on null CxxHullDescConstPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mMaxVertices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstPtr.get_mMaxVertices()
{
    UInt32 __res = 
    this.cxx_get_mMaxVertices();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstPtr.cxx_get_mMaxFaces()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstPtr.cxx_get_mMaxFaces on null CxxHullDescConstPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mMaxFaces();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstPtr.get_mMaxFaces()
{
    UInt32 __res = 
    this.cxx_get_mMaxFaces();
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescConstPtr] EDK[CxxHullDescConstPtr] LIB[HullDesc const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullDescConstPtr.cxx_HasHullFlag?(
    HullFlag flag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstPtr.cxx_HasHullFlag on null CxxHullDescConstPtr";
    return
    this.ptr.data()->{ HullDesc }.cxx_HasHullFlag(
        flag
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullDescConstPtr.HasHullFlag?(
    in
    HullFlag
    flag
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_HasHullFlag(
        flag
        );
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescPtr] EDK[CxxHullDescMutablePtr] LIB[HullDesc *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescPtr.cxx_get_mFlags()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_get_mFlags on null CxxHullDescPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mFlags();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescPtr.get_mFlags()
{
    UInt32 __res = 
    this.cxx_get_mFlags();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.cxx_set_mFlags!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_set_mFlags on null CxxHullDescPtr";
    this.ptr.data()->{ HullDesc }.cxx_set_mFlags(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.set_mFlags!(
    UInt32 value
   )
{
    
    this.cxx_set_mFlags(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescPtr.cxx_get_mVcount()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_get_mVcount on null CxxHullDescPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVcount();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescPtr.get_mVcount()
{
    UInt32 __res = 
    this.cxx_get_mVcount();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.cxx_set_mVcount!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_set_mVcount on null CxxHullDescPtr";
    this.ptr.data()->{ HullDesc }.cxx_set_mVcount(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.set_mVcount!(
    UInt32 value
   )
{
    
    this.cxx_set_mVcount(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr CxxHullDescPtr.cxx_get_mVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_get_mVertices on null CxxHullDescPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVertices();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxHullDescPtr.get_mVertices()
{
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_get_mVertices();
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.cxx_set_mVertices!(CxxbtVector3ConstPtr value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_set_mVertices on null CxxHullDescPtr";
    this.ptr.data()->{ HullDesc }.cxx_set_mVertices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.set_mVertices!(
    btVector3 value
   )
{
    
    CxxbtVector3ConstPtr value__cxx = Make_CxxbtVector3ConstPtr(value);
    this.cxx_set_mVertices(
        value__cxx
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescPtr.cxx_get_mVertexStride()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_get_mVertexStride on null CxxHullDescPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVertexStride();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescPtr.get_mVertexStride()
{
    UInt32 __res = 
    this.cxx_get_mVertexStride();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.cxx_set_mVertexStride!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_set_mVertexStride on null CxxHullDescPtr";
    this.ptr.data()->{ HullDesc }.cxx_set_mVertexStride(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.set_mVertexStride!(
    UInt32 value
   )
{
    
    this.cxx_set_mVertexStride(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxHullDescPtr.cxx_get_mNormalEpsilon()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_get_mNormalEpsilon on null CxxHullDescPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mNormalEpsilon();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxHullDescPtr.get_mNormalEpsilon()
{
    Float32 __res = 
    this.cxx_get_mNormalEpsilon();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.cxx_set_mNormalEpsilon!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_set_mNormalEpsilon on null CxxHullDescPtr";
    this.ptr.data()->{ HullDesc }.cxx_set_mNormalEpsilon(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.set_mNormalEpsilon!(
    Float32 value
   )
{
    
    this.cxx_set_mNormalEpsilon(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescPtr.cxx_get_mMaxVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_get_mMaxVertices on null CxxHullDescPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mMaxVertices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescPtr.get_mMaxVertices()
{
    UInt32 __res = 
    this.cxx_get_mMaxVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.cxx_set_mMaxVertices!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_set_mMaxVertices on null CxxHullDescPtr";
    this.ptr.data()->{ HullDesc }.cxx_set_mMaxVertices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.set_mMaxVertices!(
    UInt32 value
   )
{
    
    this.cxx_set_mMaxVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescPtr.cxx_get_mMaxFaces()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_get_mMaxFaces on null CxxHullDescPtr";
    return this.ptr.data()->{ HullDesc }.cxx_get_mMaxFaces();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescPtr.get_mMaxFaces()
{
    UInt32 __res = 
    this.cxx_get_mMaxFaces();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.cxx_set_mMaxFaces!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_set_mMaxFaces on null CxxHullDescPtr";
    this.ptr.data()->{ HullDesc }.cxx_set_mMaxFaces(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.set_mMaxFaces!(
    UInt32 value
   )
{
    
    this.cxx_set_mMaxFaces(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescPtr] EDK[CxxHullDescMutablePtr] LIB[HullDesc *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullDescPtr.cxx_HasHullFlag?(
    HullFlag flag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_HasHullFlag on null CxxHullDescPtr";
    return
    this.ptr.data()->{ HullDesc }.cxx_HasHullFlag(
        flag
        );
}

/// \dfgPresetOmit
/// \internal

CxxHullDescPtr.cxx_SetHullFlag!(
    HullFlag flag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_SetHullFlag on null CxxHullDescPtr";
    
    this.ptr.data()->{ HullDesc }.cxx_SetHullFlag(
        flag
        );
}

/// \dfgPresetOmit
/// \internal

CxxHullDescPtr.cxx_ClearHullFlag!(
    HullFlag flag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescPtr.cxx_ClearHullFlag on null CxxHullDescPtr";
    
    this.ptr.data()->{ HullDesc }.cxx_ClearHullFlag(
        flag
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullDescPtr.HasHullFlag?(
    in
    HullFlag
    flag
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_HasHullFlag(
        flag
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxHullDescPtr.SetHullFlag!(
    in
    HullFlag
    flag
    
    
    )
{   
    
    
    this.cxx_SetHullFlag(
        flag
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxHullDescPtr.ClearHullFlag!(
    in
    HullFlag
    flag
    
    
    )
{   
    
    
    this.cxx_ClearHullFlag(
        flag
        );
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescConstRef] EDK[CxxHullDescConstRef] LIB[HullDesc const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstRef.cxx_get_mFlags()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstRef.cxx_get_mFlags on null CxxHullDescConstRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mFlags();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstRef.get_mFlags()
{
    UInt32 __res = 
    this.cxx_get_mFlags();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstRef.cxx_get_mVcount()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstRef.cxx_get_mVcount on null CxxHullDescConstRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVcount();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstRef.get_mVcount()
{
    UInt32 __res = 
    this.cxx_get_mVcount();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr CxxHullDescConstRef.cxx_get_mVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstRef.cxx_get_mVertices on null CxxHullDescConstRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVertices();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxHullDescConstRef.get_mVertices()
{
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_get_mVertices();
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstRef.cxx_get_mVertexStride()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstRef.cxx_get_mVertexStride on null CxxHullDescConstRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVertexStride();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstRef.get_mVertexStride()
{
    UInt32 __res = 
    this.cxx_get_mVertexStride();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxHullDescConstRef.cxx_get_mNormalEpsilon()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstRef.cxx_get_mNormalEpsilon on null CxxHullDescConstRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mNormalEpsilon();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxHullDescConstRef.get_mNormalEpsilon()
{
    Float32 __res = 
    this.cxx_get_mNormalEpsilon();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstRef.cxx_get_mMaxVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstRef.cxx_get_mMaxVertices on null CxxHullDescConstRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mMaxVertices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstRef.get_mMaxVertices()
{
    UInt32 __res = 
    this.cxx_get_mMaxVertices();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescConstRef.cxx_get_mMaxFaces()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstRef.cxx_get_mMaxFaces on null CxxHullDescConstRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mMaxFaces();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescConstRef.get_mMaxFaces()
{
    UInt32 __res = 
    this.cxx_get_mMaxFaces();
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescConstRef] EDK[CxxHullDescConstRef] LIB[HullDesc const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescConstRef] EDK[CxxHullDescConstRef] LIB[HullDesc const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullDescConstRef.cxx_HasHullFlag?(
    HullFlag flag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescConstRef.cxx_HasHullFlag on null CxxHullDescConstRef";
    return
    this.ptr.data()->{ HullDesc }.cxx_HasHullFlag(
        flag
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullDescConstRef.HasHullFlag?(
    in
    HullFlag
    flag
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_HasHullFlag(
        flag
        );
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescRef] EDK[CxxHullDescMutableRef] LIB[HullDesc &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescRef.cxx_get_mFlags()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_get_mFlags on null CxxHullDescRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mFlags();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescRef.get_mFlags()
{
    UInt32 __res = 
    this.cxx_get_mFlags();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.cxx_set_mFlags!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_set_mFlags on null CxxHullDescRef";
    this.ptr.data()->{ HullDesc }.cxx_set_mFlags(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.set_mFlags!(
    UInt32 value
   )
{
    
    this.cxx_set_mFlags(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescRef.cxx_get_mVcount()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_get_mVcount on null CxxHullDescRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVcount();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescRef.get_mVcount()
{
    UInt32 __res = 
    this.cxx_get_mVcount();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.cxx_set_mVcount!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_set_mVcount on null CxxHullDescRef";
    this.ptr.data()->{ HullDesc }.cxx_set_mVcount(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.set_mVcount!(
    UInt32 value
   )
{
    
    this.cxx_set_mVcount(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstPtr CxxHullDescRef.cxx_get_mVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_get_mVertices on null CxxHullDescRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVertices();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxHullDescRef.get_mVertices()
{
    CxxbtVector3ConstPtr __res_cxx = 
    this.cxx_get_mVertices();
    if (Fabric_Guarded && !__res_cxx.cxx_isValid())
      throw 'Call of cxx_deref() on null CxxbtVector3ConstPtr';
    btVector3 __res = __res_cxx.cxx_deref().cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.cxx_set_mVertices!(CxxbtVector3ConstPtr value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_set_mVertices on null CxxHullDescRef";
    this.ptr.data()->{ HullDesc }.cxx_set_mVertices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.set_mVertices!(
    btVector3 value
   )
{
    
    CxxbtVector3ConstPtr value__cxx = Make_CxxbtVector3ConstPtr(value);
    this.cxx_set_mVertices(
        value__cxx
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescRef.cxx_get_mVertexStride()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_get_mVertexStride on null CxxHullDescRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mVertexStride();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescRef.get_mVertexStride()
{
    UInt32 __res = 
    this.cxx_get_mVertexStride();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.cxx_set_mVertexStride!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_set_mVertexStride on null CxxHullDescRef";
    this.ptr.data()->{ HullDesc }.cxx_set_mVertexStride(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.set_mVertexStride!(
    UInt32 value
   )
{
    
    this.cxx_set_mVertexStride(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxHullDescRef.cxx_get_mNormalEpsilon()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_get_mNormalEpsilon on null CxxHullDescRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mNormalEpsilon();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxHullDescRef.get_mNormalEpsilon()
{
    Float32 __res = 
    this.cxx_get_mNormalEpsilon();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.cxx_set_mNormalEpsilon!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_set_mNormalEpsilon on null CxxHullDescRef";
    this.ptr.data()->{ HullDesc }.cxx_set_mNormalEpsilon(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.set_mNormalEpsilon!(
    Float32 value
   )
{
    
    this.cxx_set_mNormalEpsilon(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescRef.cxx_get_mMaxVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_get_mMaxVertices on null CxxHullDescRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mMaxVertices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescRef.get_mMaxVertices()
{
    UInt32 __res = 
    this.cxx_get_mMaxVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.cxx_set_mMaxVertices!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_set_mMaxVertices on null CxxHullDescRef";
    this.ptr.data()->{ HullDesc }.cxx_set_mMaxVertices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.set_mMaxVertices!(
    UInt32 value
   )
{
    
    this.cxx_set_mMaxVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullDescRef.cxx_get_mMaxFaces()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_get_mMaxFaces on null CxxHullDescRef";
    return this.ptr.data()->{ HullDesc }.cxx_get_mMaxFaces();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullDescRef.get_mMaxFaces()
{
    UInt32 __res = 
    this.cxx_get_mMaxFaces();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.cxx_set_mMaxFaces!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_set_mMaxFaces on null CxxHullDescRef";
    this.ptr.data()->{ HullDesc }.cxx_set_mMaxFaces(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef.set_mMaxFaces!(
    UInt32 value
   )
{
    
    this.cxx_set_mMaxFaces(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullDescRef] EDK[CxxHullDescMutableRef] LIB[HullDesc &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullDescRef.cxx_HasHullFlag?(
    HullFlag flag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_HasHullFlag on null CxxHullDescRef";
    return
    this.ptr.data()->{ HullDesc }.cxx_HasHullFlag(
        flag
        );
}

/// \dfgPresetOmit
/// \internal

CxxHullDescRef.cxx_SetHullFlag!(
    HullFlag flag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_SetHullFlag on null CxxHullDescRef";
    
    this.ptr.data()->{ HullDesc }.cxx_SetHullFlag(
        flag
        );
}

/// \dfgPresetOmit
/// \internal

CxxHullDescRef.cxx_ClearHullFlag!(
    HullFlag flag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullDescRef.cxx_ClearHullFlag on null CxxHullDescRef";
    
    this.ptr.data()->{ HullDesc }.cxx_ClearHullFlag(
        flag
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullDescRef.HasHullFlag?(
    in
    HullFlag
    flag
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_HasHullFlag(
        flag
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxHullDescRef.ClearHullFlag!(
    in
    HullFlag
    flag
    
    
    )
{   
    
    
    this.cxx_ClearHullFlag(
        flag
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxHullDescRef.SetHullFlag!(
    in
    HullFlag
    flag
    
    
    )
{   
    
    
    this.cxx_SetHullFlag(
        flag
        );
    
    
    
}



////////////////////////////////////////////////////////////////////////
// CxxHullDescConstPtr
// CxxHullDescPtr
// CxxHullDescConstRef
// CxxHullDescRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxHullDescConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstPtr(HullDesc array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstPtr(HullDesc array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_HullDesc());
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstPtr(HullDesc value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstPtr Make_CxxHullDescConstPtr(HullDesc value) {
  return CxxHullDescConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr(HullDesc array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr(HullDesc array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_HullDesc());
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr(HullDesc value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxHullDescPtr Make_CxxHullDescPtr(HullDesc value) {
  return CxxHullDescPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef(HullDesc array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef(HullDesc array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_HullDesc());
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef(HullDesc value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef Make_CxxHullDescConstRef(HullDesc value) {
  return CxxHullDescConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef(HullDesc array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef(HullDesc array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_HullDesc());
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef(HullDesc value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxHullDescRef Make_CxxHullDescRef(HullDesc value) {
  return CxxHullDescRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxHullDescConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxHullDescConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxHullDescConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef CxxHullDescConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullDescConstPtr.cxx_getAt on null CxxHullDescConstPtr";
  return CxxHullDescConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_HullDesc()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef CxxHullDescConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxHullDescConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxHullDescConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxHullDescRef CxxHullDescPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullDescPtr.cxx_getAt on null CxxHullDescPtr";
  return CxxHullDescRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_HullDesc()));
}

/// Same as for CxxHullDescConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxHullDescRef CxxHullDescPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxHullDescPtr.cxx_setAt(Index i, HullDesc v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullDescPtr.cxx_setAt on null CxxHullDescPtr";
  this.ptr.offset(i)->{ HullDesc } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef(CxxHullDescConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef.=(CxxHullDescConstRef that) {
  this.ptr = that.ptr;
}

/// Get the HullDesc value
/// \dfgPresetOmit
/// \internal
HullDesc CxxHullDescConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullDescConstRef.cxx_get on null CxxHullDescConstRef";
  return this.ptr.data()->{ HullDesc };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxHullDescConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxHullDescRef.cxx_set(HullDesc value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullDescRef.cxx_set on null CxxHullDescRef";
  this.ptr.data()->{ HullDesc } = value;
}

/// Assignment of HullDesc
/// \dfgPresetOmit
/// \internal
CxxHullDescRef.=(HullDesc value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxHullDescRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[HullResult] EDK[Fabric_EDK_KL_HullResult] LIB[HullResult]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullResultConstPtr] EDK[CxxHullResultConstPtr] LIB[HullResult const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean CxxHullResultConstPtr.cxx_get_mPolygons()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstPtr.cxx_get_mPolygons on null CxxHullResultConstPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_mPolygons();
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullResultConstPtr.get_mPolygons()
{
    Boolean __res = 
    this.cxx_get_mPolygons();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultConstPtr.cxx_get_mNumOutputVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstPtr.cxx_get_mNumOutputVertices on null CxxHullResultConstPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumOutputVertices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultConstPtr.get_mNumOutputVertices()
{
    UInt32 __res = 
    this.cxx_get_mNumOutputVertices();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3 CxxHullResultConstPtr.cxx_get_m_OutputVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstPtr.cxx_get_m_OutputVertices on null CxxHullResultConstPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_m_OutputVertices();
}

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3
CxxHullResultConstPtr.get_m_OutputVertices()
{
    btAlignedObjectArray_Vec3 __res = 
    this.cxx_get_m_OutputVertices();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultConstPtr.cxx_get_mNumFaces()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstPtr.cxx_get_mNumFaces on null CxxHullResultConstPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumFaces();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultConstPtr.get_mNumFaces()
{
    UInt32 __res = 
    this.cxx_get_mNumFaces();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultConstPtr.cxx_get_mNumIndices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstPtr.cxx_get_mNumIndices on null CxxHullResultConstPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumIndices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultConstPtr.get_mNumIndices()
{
    UInt32 __res = 
    this.cxx_get_mNumIndices();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32 CxxHullResultConstPtr.cxx_get_m_Indices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstPtr.cxx_get_m_Indices on null CxxHullResultConstPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_m_Indices();
}

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32
CxxHullResultConstPtr.get_m_Indices()
{
    btAlignedObjectArray_UInt32 __res = 
    this.cxx_get_m_Indices();
    
    return __res;
}



//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullResultPtr] EDK[CxxHullResultMutablePtr] LIB[HullResult *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean CxxHullResultPtr.cxx_get_mPolygons()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_get_mPolygons on null CxxHullResultPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_mPolygons();
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullResultPtr.get_mPolygons()
{
    Boolean __res = 
    this.cxx_get_mPolygons();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.cxx_set_mPolygons!(Boolean value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_set_mPolygons on null CxxHullResultPtr";
    this.ptr.data()->{ HullResult }.cxx_set_mPolygons(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.set_mPolygons!(
    Boolean value
   )
{
    
    this.cxx_set_mPolygons(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultPtr.cxx_get_mNumOutputVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_get_mNumOutputVertices on null CxxHullResultPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumOutputVertices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultPtr.get_mNumOutputVertices()
{
    UInt32 __res = 
    this.cxx_get_mNumOutputVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.cxx_set_mNumOutputVertices!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_set_mNumOutputVertices on null CxxHullResultPtr";
    this.ptr.data()->{ HullResult }.cxx_set_mNumOutputVertices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.set_mNumOutputVertices!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumOutputVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3 CxxHullResultPtr.cxx_get_m_OutputVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_get_m_OutputVertices on null CxxHullResultPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_m_OutputVertices();
}

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3
CxxHullResultPtr.get_m_OutputVertices()
{
    btAlignedObjectArray_Vec3 __res = 
    this.cxx_get_m_OutputVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.cxx_set_m_OutputVertices!(btAlignedObjectArray_Vec3 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_set_m_OutputVertices on null CxxHullResultPtr";
    this.ptr.data()->{ HullResult }.cxx_set_m_OutputVertices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.set_m_OutputVertices!(
    btAlignedObjectArray_Vec3 value
   )
{
    
    this.cxx_set_m_OutputVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultPtr.cxx_get_mNumFaces()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_get_mNumFaces on null CxxHullResultPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumFaces();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultPtr.get_mNumFaces()
{
    UInt32 __res = 
    this.cxx_get_mNumFaces();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.cxx_set_mNumFaces!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_set_mNumFaces on null CxxHullResultPtr";
    this.ptr.data()->{ HullResult }.cxx_set_mNumFaces(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.set_mNumFaces!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumFaces(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultPtr.cxx_get_mNumIndices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_get_mNumIndices on null CxxHullResultPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumIndices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultPtr.get_mNumIndices()
{
    UInt32 __res = 
    this.cxx_get_mNumIndices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.cxx_set_mNumIndices!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_set_mNumIndices on null CxxHullResultPtr";
    this.ptr.data()->{ HullResult }.cxx_set_mNumIndices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.set_mNumIndices!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumIndices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32 CxxHullResultPtr.cxx_get_m_Indices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_get_m_Indices on null CxxHullResultPtr";
    return this.ptr.data()->{ HullResult }.cxx_get_m_Indices();
}

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32
CxxHullResultPtr.get_m_Indices()
{
    btAlignedObjectArray_UInt32 __res = 
    this.cxx_get_m_Indices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.cxx_set_m_Indices!(btAlignedObjectArray_UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultPtr.cxx_set_m_Indices on null CxxHullResultPtr";
    this.ptr.data()->{ HullResult }.cxx_set_m_Indices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.set_m_Indices!(
    btAlignedObjectArray_UInt32 value
   )
{
    
    this.cxx_set_m_Indices(
        value
        );
    
}



//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullResultConstRef] EDK[CxxHullResultConstRef] LIB[HullResult const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean CxxHullResultConstRef.cxx_get_mPolygons()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstRef.cxx_get_mPolygons on null CxxHullResultConstRef";
    return this.ptr.data()->{ HullResult }.cxx_get_mPolygons();
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullResultConstRef.get_mPolygons()
{
    Boolean __res = 
    this.cxx_get_mPolygons();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultConstRef.cxx_get_mNumOutputVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstRef.cxx_get_mNumOutputVertices on null CxxHullResultConstRef";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumOutputVertices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultConstRef.get_mNumOutputVertices()
{
    UInt32 __res = 
    this.cxx_get_mNumOutputVertices();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3 CxxHullResultConstRef.cxx_get_m_OutputVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstRef.cxx_get_m_OutputVertices on null CxxHullResultConstRef";
    return this.ptr.data()->{ HullResult }.cxx_get_m_OutputVertices();
}

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3
CxxHullResultConstRef.get_m_OutputVertices()
{
    btAlignedObjectArray_Vec3 __res = 
    this.cxx_get_m_OutputVertices();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultConstRef.cxx_get_mNumFaces()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstRef.cxx_get_mNumFaces on null CxxHullResultConstRef";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumFaces();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultConstRef.get_mNumFaces()
{
    UInt32 __res = 
    this.cxx_get_mNumFaces();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultConstRef.cxx_get_mNumIndices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstRef.cxx_get_mNumIndices on null CxxHullResultConstRef";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumIndices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultConstRef.get_mNumIndices()
{
    UInt32 __res = 
    this.cxx_get_mNumIndices();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32 CxxHullResultConstRef.cxx_get_m_Indices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultConstRef.cxx_get_m_Indices on null CxxHullResultConstRef";
    return this.ptr.data()->{ HullResult }.cxx_get_m_Indices();
}

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32
CxxHullResultConstRef.get_m_Indices()
{
    btAlignedObjectArray_UInt32 __res = 
    this.cxx_get_m_Indices();
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullResultConstRef] EDK[CxxHullResultConstRef] LIB[HullResult const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxHullResultRef] EDK[CxxHullResultMutableRef] LIB[HullResult &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean CxxHullResultRef.cxx_get_mPolygons()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_get_mPolygons on null CxxHullResultRef";
    return this.ptr.data()->{ HullResult }.cxx_get_mPolygons();
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxHullResultRef.get_mPolygons()
{
    Boolean __res = 
    this.cxx_get_mPolygons();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.cxx_set_mPolygons!(Boolean value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_set_mPolygons on null CxxHullResultRef";
    this.ptr.data()->{ HullResult }.cxx_set_mPolygons(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.set_mPolygons!(
    Boolean value
   )
{
    
    this.cxx_set_mPolygons(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultRef.cxx_get_mNumOutputVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_get_mNumOutputVertices on null CxxHullResultRef";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumOutputVertices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultRef.get_mNumOutputVertices()
{
    UInt32 __res = 
    this.cxx_get_mNumOutputVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.cxx_set_mNumOutputVertices!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_set_mNumOutputVertices on null CxxHullResultRef";
    this.ptr.data()->{ HullResult }.cxx_set_mNumOutputVertices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.set_mNumOutputVertices!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumOutputVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3 CxxHullResultRef.cxx_get_m_OutputVertices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_get_m_OutputVertices on null CxxHullResultRef";
    return this.ptr.data()->{ HullResult }.cxx_get_m_OutputVertices();
}

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_Vec3
CxxHullResultRef.get_m_OutputVertices()
{
    btAlignedObjectArray_Vec3 __res = 
    this.cxx_get_m_OutputVertices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.cxx_set_m_OutputVertices!(btAlignedObjectArray_Vec3 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_set_m_OutputVertices on null CxxHullResultRef";
    this.ptr.data()->{ HullResult }.cxx_set_m_OutputVertices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.set_m_OutputVertices!(
    btAlignedObjectArray_Vec3 value
   )
{
    
    this.cxx_set_m_OutputVertices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultRef.cxx_get_mNumFaces()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_get_mNumFaces on null CxxHullResultRef";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumFaces();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultRef.get_mNumFaces()
{
    UInt32 __res = 
    this.cxx_get_mNumFaces();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.cxx_set_mNumFaces!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_set_mNumFaces on null CxxHullResultRef";
    this.ptr.data()->{ HullResult }.cxx_set_mNumFaces(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.set_mNumFaces!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumFaces(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
UInt32 CxxHullResultRef.cxx_get_mNumIndices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_get_mNumIndices on null CxxHullResultRef";
    return this.ptr.data()->{ HullResult }.cxx_get_mNumIndices();
}

/// \dfgPresetOmit
/// \internal
UInt32
CxxHullResultRef.get_mNumIndices()
{
    UInt32 __res = 
    this.cxx_get_mNumIndices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.cxx_set_mNumIndices!(UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_set_mNumIndices on null CxxHullResultRef";
    this.ptr.data()->{ HullResult }.cxx_set_mNumIndices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.set_mNumIndices!(
    UInt32 value
   )
{
    
    this.cxx_set_mNumIndices(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32 CxxHullResultRef.cxx_get_m_Indices()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_get_m_Indices on null CxxHullResultRef";
    return this.ptr.data()->{ HullResult }.cxx_get_m_Indices();
}

/// \dfgPresetOmit
/// \internal
btAlignedObjectArray_UInt32
CxxHullResultRef.get_m_Indices()
{
    btAlignedObjectArray_UInt32 __res = 
    this.cxx_get_m_Indices();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.cxx_set_m_Indices!(btAlignedObjectArray_UInt32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxHullResultRef.cxx_set_m_Indices on null CxxHullResultRef";
    this.ptr.data()->{ HullResult }.cxx_set_m_Indices(value);
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef.set_m_Indices!(
    btAlignedObjectArray_UInt32 value
   )
{
    
    this.cxx_set_m_Indices(
        value
        );
    
}




////////////////////////////////////////////////////////////////////////
// CxxHullResultConstPtr
// CxxHullResultPtr
// CxxHullResultConstRef
// CxxHullResultRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxHullResultConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstPtr(HullResult array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstPtr(HullResult array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_HullResult());
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstPtr(HullResult value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstPtr Make_CxxHullResultConstPtr(HullResult value) {
  return CxxHullResultConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr(HullResult array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr(HullResult array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_HullResult());
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr(HullResult value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxHullResultPtr Make_CxxHullResultPtr(HullResult value) {
  return CxxHullResultPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef(HullResult array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef(HullResult array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_HullResult());
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef(HullResult value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef Make_CxxHullResultConstRef(HullResult value) {
  return CxxHullResultConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef(HullResult array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef(HullResult array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_HullResult());
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef(HullResult value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxHullResultRef Make_CxxHullResultRef(HullResult value) {
  return CxxHullResultRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxHullResultConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxHullResultConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxHullResultConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef CxxHullResultConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullResultConstPtr.cxx_getAt on null CxxHullResultConstPtr";
  return CxxHullResultConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_HullResult()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef CxxHullResultConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxHullResultConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxHullResultConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxHullResultRef CxxHullResultPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullResultPtr.cxx_getAt on null CxxHullResultPtr";
  return CxxHullResultRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_HullResult()));
}

/// Same as for CxxHullResultConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxHullResultRef CxxHullResultPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxHullResultPtr.cxx_setAt(Index i, HullResult v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullResultPtr.cxx_setAt on null CxxHullResultPtr";
  this.ptr.offset(i)->{ HullResult } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef(CxxHullResultConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef.=(CxxHullResultConstRef that) {
  this.ptr = that.ptr;
}

/// Get the HullResult value
/// \dfgPresetOmit
/// \internal
HullResult CxxHullResultConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullResultConstRef.cxx_get on null CxxHullResultConstRef";
  return this.ptr.data()->{ HullResult };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxHullResultConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxHullResultRef.cxx_set(HullResult value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxHullResultRef.cxx_set on null CxxHullResultRef";
  this.ptr.data()->{ HullResult } = value;
}

/// Assignment of HullResult
/// \dfgPresetOmit
/// \internal
CxxHullResultRef.=(HullResult value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxHullResultRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[polarDecompose] C++[polarDecompose]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/**
 * This functions decomposes the matrix 'a' into two parts: an orthogonal matrix
 * 'u' and a symmetric, positive-definite matrix 'h'. If the number of
 * iterations returned by this function is equal to
 * btPolarDecomposition::DEFAULT_MAX_ITERATIONS, the algorithm has failed to
 * converge.
 *
 * @param a - the original matrix
 * @param u - the resulting orthogonal matrix
 * @param h - the resulting symmetric matrix
 *
 * @return the number of iterations performed by the algorithm.
 */
/// \dfgPresetOmit
/// \internal
UInt32
CxxpolarDecompose(
    CxxbtMatrix3x3ConstRef a,
    CxxbtMatrix3x3Ref u,
    CxxbtMatrix3x3Ref h
    ) = "Bullet2_polarDecompose_e191c0d8b19aa3888abd785dee857788";

/**
 * This functions decomposes the matrix 'a' into two parts: an orthogonal matrix
 * 'u' and a symmetric, positive-definite matrix 'h'. If the number of
 * iterations returned by this function is equal to
 * btPolarDecomposition::DEFAULT_MAX_ITERATIONS, the algorithm has failed to
 * converge.
 *
 * @param a - the original matrix
 * @param u - the resulting orthogonal matrix
 * @param h - the resulting symmetric matrix
 *
 * @return the number of iterations performed by the algorithm.
 */
UInt32
polarDecompose(
    in
    btMatrix3x3
    a
    
    ,
    io
    btMatrix3x3
    u
    
    ,
    io
    btMatrix3x3
    h
    
    
    )
{
    
    CxxbtMatrix3x3ConstRef a__cxx = Make_CxxbtMatrix3x3ConstRef(a);
    
    CxxbtMatrix3x3Ref u__cxx = Make_CxxbtMatrix3x3Ref(u);
    
    CxxbtMatrix3x3Ref h__cxx = Make_CxxbtMatrix3x3Ref(h);
    UInt32 __res = 
    CxxpolarDecompose(
        a__cxx,
        u__cxx,
        h__cxx
        );
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btConvexPolyhedron] EDK[Fabric_EDK_KL_btConvexPolyhedron] LIB[btConvexPolyhedron]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronConstPtr] EDK[CxxbtConvexPolyhedronConstPtr] LIB[btConvexPolyhedron const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronConstPtr] EDK[CxxbtConvexPolyhedronConstPtr] LIB[btConvexPolyhedron const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtConvexPolyhedronConstPtr.cxx_testContainment?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronConstPtr.cxx_testContainment on null CxxbtConvexPolyhedronConstPtr";
    return
    this.ptr.data()->{ btConvexPolyhedron }.cxx_testContainment(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronConstPtr.cxx_project?(
    CxxbtTransformConstRef trans,
    CxxbtVector3ConstRef dir,
    CxxFloat32Ref minProj,
    CxxFloat32Ref maxProj,
    CxxbtVector3Ref witnesPtMin,
    CxxbtVector3Ref witnesPtMax
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronConstPtr.cxx_project on null CxxbtConvexPolyhedronConstPtr";
    
    this.ptr.data()->{ btConvexPolyhedron }.cxx_project(
        trans,
        dir,
        minProj,
        maxProj,
        witnesPtMin,
        witnesPtMax
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronConstPtr.project?(
    in
    btTransform
    trans
    
    ,
    in
    btVector3
    dir
    
    ,
    io
    Float32
    minProj
    
    ,
    io
    Float32
    maxProj
    
    ,
    io
    btVector3
    witnesPtMin
    
    ,
    io
    btVector3
    witnesPtMax
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    
    CxxFloat32Ref minProj__cxx = Make_CxxFloat32Ref(minProj);
    
    CxxFloat32Ref maxProj__cxx = Make_CxxFloat32Ref(maxProj);
    
    CxxbtVector3Ref witnesPtMin__cxx = Make_CxxbtVector3Ref(witnesPtMin);
    
    CxxbtVector3Ref witnesPtMax__cxx = Make_CxxbtVector3Ref(witnesPtMax);
    
    this.cxx_project(
        trans__cxx,
        dir__cxx,
        minProj__cxx,
        maxProj__cxx,
        witnesPtMin__cxx,
        witnesPtMax__cxx
        );
    
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtConvexPolyhedronConstPtr.testContainment?(
    )
{   
    Boolean __res = 
    this.cxx_testContainment(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronPtr] EDK[CxxbtConvexPolyhedronMutablePtr] LIB[btConvexPolyhedron *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronPtr] EDK[CxxbtConvexPolyhedronMutablePtr] LIB[btConvexPolyhedron *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronPtr.cxx_initialize!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronPtr.cxx_initialize on null CxxbtConvexPolyhedronPtr";
    
    this.ptr.data()->{ btConvexPolyhedron }.cxx_initialize(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtConvexPolyhedronPtr.cxx_testContainment?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronPtr.cxx_testContainment on null CxxbtConvexPolyhedronPtr";
    return
    this.ptr.data()->{ btConvexPolyhedron }.cxx_testContainment(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronPtr.cxx_project?(
    CxxbtTransformConstRef trans,
    CxxbtVector3ConstRef dir,
    CxxFloat32Ref minProj,
    CxxFloat32Ref maxProj,
    CxxbtVector3Ref witnesPtMin,
    CxxbtVector3Ref witnesPtMax
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronPtr.cxx_project on null CxxbtConvexPolyhedronPtr";
    
    this.ptr.data()->{ btConvexPolyhedron }.cxx_project(
        trans,
        dir,
        minProj,
        maxProj,
        witnesPtMin,
        witnesPtMax
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronPtr.initialize!(
    )
{   
    
    this.cxx_initialize(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronPtr.project?(
    in
    btTransform
    trans
    
    ,
    in
    btVector3
    dir
    
    ,
    io
    Float32
    minProj
    
    ,
    io
    Float32
    maxProj
    
    ,
    io
    btVector3
    witnesPtMin
    
    ,
    io
    btVector3
    witnesPtMax
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    
    CxxFloat32Ref minProj__cxx = Make_CxxFloat32Ref(minProj);
    
    CxxFloat32Ref maxProj__cxx = Make_CxxFloat32Ref(maxProj);
    
    CxxbtVector3Ref witnesPtMin__cxx = Make_CxxbtVector3Ref(witnesPtMin);
    
    CxxbtVector3Ref witnesPtMax__cxx = Make_CxxbtVector3Ref(witnesPtMax);
    
    this.cxx_project(
        trans__cxx,
        dir__cxx,
        minProj__cxx,
        maxProj__cxx,
        witnesPtMin__cxx,
        witnesPtMax__cxx
        );
    
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtConvexPolyhedronPtr.testContainment?(
    )
{   
    Boolean __res = 
    this.cxx_testContainment(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronConstRef] EDK[CxxbtConvexPolyhedronConstRef] LIB[btConvexPolyhedron const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronConstRef] EDK[CxxbtConvexPolyhedronConstRef] LIB[btConvexPolyhedron const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronConstRef] EDK[CxxbtConvexPolyhedronConstRef] LIB[btConvexPolyhedron const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtConvexPolyhedronConstRef.cxx_testContainment?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronConstRef.cxx_testContainment on null CxxbtConvexPolyhedronConstRef";
    return
    this.ptr.data()->{ btConvexPolyhedron }.cxx_testContainment(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronConstRef.cxx_project?(
    CxxbtTransformConstRef trans,
    CxxbtVector3ConstRef dir,
    CxxFloat32Ref minProj,
    CxxFloat32Ref maxProj,
    CxxbtVector3Ref witnesPtMin,
    CxxbtVector3Ref witnesPtMax
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronConstRef.cxx_project on null CxxbtConvexPolyhedronConstRef";
    
    this.ptr.data()->{ btConvexPolyhedron }.cxx_project(
        trans,
        dir,
        minProj,
        maxProj,
        witnesPtMin,
        witnesPtMax
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronConstRef.project?(
    in
    btTransform
    trans
    
    ,
    in
    btVector3
    dir
    
    ,
    io
    Float32
    minProj
    
    ,
    io
    Float32
    maxProj
    
    ,
    io
    btVector3
    witnesPtMin
    
    ,
    io
    btVector3
    witnesPtMax
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    
    CxxFloat32Ref minProj__cxx = Make_CxxFloat32Ref(minProj);
    
    CxxFloat32Ref maxProj__cxx = Make_CxxFloat32Ref(maxProj);
    
    CxxbtVector3Ref witnesPtMin__cxx = Make_CxxbtVector3Ref(witnesPtMin);
    
    CxxbtVector3Ref witnesPtMax__cxx = Make_CxxbtVector3Ref(witnesPtMax);
    
    this.cxx_project(
        trans__cxx,
        dir__cxx,
        minProj__cxx,
        maxProj__cxx,
        witnesPtMin__cxx,
        witnesPtMax__cxx
        );
    
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtConvexPolyhedronConstRef.testContainment?(
    )
{   
    Boolean __res = 
    this.cxx_testContainment(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronRef] EDK[CxxbtConvexPolyhedronMutableRef] LIB[btConvexPolyhedron &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtConvexPolyhedronRef] EDK[CxxbtConvexPolyhedronMutableRef] LIB[btConvexPolyhedron &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronRef.cxx_initialize!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronRef.cxx_initialize on null CxxbtConvexPolyhedronRef";
    
    this.ptr.data()->{ btConvexPolyhedron }.cxx_initialize(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtConvexPolyhedronRef.cxx_testContainment?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronRef.cxx_testContainment on null CxxbtConvexPolyhedronRef";
    return
    this.ptr.data()->{ btConvexPolyhedron }.cxx_testContainment(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronRef.cxx_project?(
    CxxbtTransformConstRef trans,
    CxxbtVector3ConstRef dir,
    CxxFloat32Ref minProj,
    CxxFloat32Ref maxProj,
    CxxbtVector3Ref witnesPtMin,
    CxxbtVector3Ref witnesPtMax
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtConvexPolyhedronRef.cxx_project on null CxxbtConvexPolyhedronRef";
    
    this.ptr.data()->{ btConvexPolyhedron }.cxx_project(
        trans,
        dir,
        minProj,
        maxProj,
        witnesPtMin,
        witnesPtMax
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronRef.project?(
    in
    btTransform
    trans
    
    ,
    in
    btVector3
    dir
    
    ,
    io
    Float32
    minProj
    
    ,
    io
    Float32
    maxProj
    
    ,
    io
    btVector3
    witnesPtMin
    
    ,
    io
    btVector3
    witnesPtMax
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    CxxbtVector3ConstRef dir__cxx = Make_CxxbtVector3ConstRef(dir);
    
    CxxFloat32Ref minProj__cxx = Make_CxxFloat32Ref(minProj);
    
    CxxFloat32Ref maxProj__cxx = Make_CxxFloat32Ref(maxProj);
    
    CxxbtVector3Ref witnesPtMin__cxx = Make_CxxbtVector3Ref(witnesPtMin);
    
    CxxbtVector3Ref witnesPtMax__cxx = Make_CxxbtVector3Ref(witnesPtMax);
    
    this.cxx_project(
        trans__cxx,
        dir__cxx,
        minProj__cxx,
        maxProj__cxx,
        witnesPtMin__cxx,
        witnesPtMax__cxx
        );
    
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtConvexPolyhedronRef.initialize!(
    )
{   
    
    this.cxx_initialize(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtConvexPolyhedronRef.testContainment?(
    )
{   
    Boolean __res = 
    this.cxx_testContainment(
        );
    
    return __res;
}



////////////////////////////////////////////////////////////////////////
// CxxbtConvexPolyhedronConstPtr
// CxxbtConvexPolyhedronPtr
// CxxbtConvexPolyhedronConstRef
// CxxbtConvexPolyhedronRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstPtr(btConvexPolyhedron array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstPtr(btConvexPolyhedron array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btConvexPolyhedron());
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstPtr(btConvexPolyhedron value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstPtr Make_CxxbtConvexPolyhedronConstPtr(btConvexPolyhedron value) {
  return CxxbtConvexPolyhedronConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronPtr(btConvexPolyhedron array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronPtr(btConvexPolyhedron array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btConvexPolyhedron());
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronPtr(btConvexPolyhedron value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronPtr Make_CxxbtConvexPolyhedronPtr(btConvexPolyhedron value) {
  return CxxbtConvexPolyhedronPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef(btConvexPolyhedron array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef(btConvexPolyhedron array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btConvexPolyhedron());
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef(btConvexPolyhedron value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef Make_CxxbtConvexPolyhedronConstRef(btConvexPolyhedron value) {
  return CxxbtConvexPolyhedronConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef(btConvexPolyhedron array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef(btConvexPolyhedron array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btConvexPolyhedron());
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef(btConvexPolyhedron value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef Make_CxxbtConvexPolyhedronRef(btConvexPolyhedron value) {
  return CxxbtConvexPolyhedronRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtConvexPolyhedronConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtConvexPolyhedronConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtConvexPolyhedronConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef CxxbtConvexPolyhedronConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtConvexPolyhedronConstPtr.cxx_getAt on null CxxbtConvexPolyhedronConstPtr";
  return CxxbtConvexPolyhedronConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btConvexPolyhedron()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef CxxbtConvexPolyhedronConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtConvexPolyhedronConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef CxxbtConvexPolyhedronPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtConvexPolyhedronPtr.cxx_getAt on null CxxbtConvexPolyhedronPtr";
  return CxxbtConvexPolyhedronRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btConvexPolyhedron()));
}

/// Same as for CxxbtConvexPolyhedronConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef CxxbtConvexPolyhedronPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronPtr.cxx_setAt(Index i, btConvexPolyhedron v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtConvexPolyhedronPtr.cxx_setAt on null CxxbtConvexPolyhedronPtr";
  this.ptr.offset(i)->{ btConvexPolyhedron } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef(CxxbtConvexPolyhedronConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef.=(CxxbtConvexPolyhedronConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btConvexPolyhedron value
/// \dfgPresetOmit
/// \internal
btConvexPolyhedron CxxbtConvexPolyhedronConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtConvexPolyhedronConstRef.cxx_get on null CxxbtConvexPolyhedronConstRef";
  return this.ptr.data()->{ btConvexPolyhedron };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef.cxx_set(btConvexPolyhedron value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtConvexPolyhedronRef.cxx_set on null CxxbtConvexPolyhedronRef";
  this.ptr.data()->{ btConvexPolyhedron } = value;
}

/// Assignment of btConvexPolyhedron
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef.=(btConvexPolyhedron value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtConvexPolyhedronRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btVector4] EDK[Fabric_EDK_KL_btVector4] LIB[btVector4]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstPtr] EDK[CxxbtVector4ConstPtr] LIB[btVector4 const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstPtr] EDK[CxxbtVector4ConstPtr] LIB[btVector4 const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4ConstPtr.cxx_getX?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4ConstPtr.cxx_getX on null CxxbtVector4ConstPtr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getX(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4ConstPtr.cxx_getY?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4ConstPtr.cxx_getY on null CxxbtVector4ConstPtr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getY(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4ConstPtr.cxx_getZ?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4ConstPtr.cxx_getZ on null CxxbtVector4ConstPtr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getZ(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstPtr.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstPtr.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstPtr.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstPtr] EDK[CxxbtVector4ConstPtr] LIB[btVector4 const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstPtr] EDK[CxxbtVector4ConstPtr] LIB[btVector4 const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstPtr.cxx_getW?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4ConstPtr.cxx_getW on null CxxbtVector4ConstPtr";
    return
    this.ptr.data()->{ btVector4 }.cxx_getW(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstPtr.getW?(
    )
{   
    Float32 __res = 
    this.cxx_getW(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4Ptr] EDK[CxxbtVector4MutablePtr] LIB[btVector4 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4Ptr] EDK[CxxbtVector4MutablePtr] LIB[btVector4 *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4Ptr.cxx_getX?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4Ptr.cxx_getX on null CxxbtVector4Ptr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getX(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4Ptr.cxx_getY?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4Ptr.cxx_getY on null CxxbtVector4Ptr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getY(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4Ptr.cxx_getZ?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4Ptr.cxx_getZ on null CxxbtVector4Ptr";
    return
    this.ptr.data()->{ btVector3 }.cxx_getZ(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ptr.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ptr.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ptr.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4Ptr] EDK[CxxbtVector4MutablePtr] LIB[btVector4 *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4Ptr] EDK[CxxbtVector4MutablePtr] LIB[btVector4 *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ptr.cxx_getW?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4Ptr.cxx_getW on null CxxbtVector4Ptr";
    return
    this.ptr.data()->{ btVector4 }.cxx_getW(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ptr.getW?(
    )
{   
    Float32 __res = 
    this.cxx_getW(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstRef] EDK[CxxbtVector4ConstRef] LIB[btVector4 const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstRef] EDK[CxxbtVector4ConstRef] LIB[btVector4 const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4ConstRef.cxx_getX?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4ConstRef.cxx_getX on null CxxbtVector4ConstRef";
    return
    this.ptr.data()->{ btVector3 }.cxx_getX(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4ConstRef.cxx_getY?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4ConstRef.cxx_getY on null CxxbtVector4ConstRef";
    return
    this.ptr.data()->{ btVector3 }.cxx_getY(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4ConstRef.cxx_getZ?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4ConstRef.cxx_getZ on null CxxbtVector4ConstRef";
    return
    this.ptr.data()->{ btVector3 }.cxx_getZ(
        );
}

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstRef.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstRef.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstRef.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstRef] EDK[CxxbtVector4ConstRef] LIB[btVector4 const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstRef] EDK[CxxbtVector4ConstRef] LIB[btVector4 const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4ConstRef] EDK[CxxbtVector4ConstRef] LIB[btVector4 const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstRef.cxx_getW?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4ConstRef.cxx_getW on null CxxbtVector4ConstRef";
    return
    this.ptr.data()->{ btVector4 }.cxx_getW(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4ConstRef.getW?(
    )
{   
    Float32 __res = 
    this.cxx_getW(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4Ref] EDK[CxxbtVector4MutableRef] LIB[btVector4 &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4Ref] EDK[CxxbtVector4MutableRef] LIB[btVector4 &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4Ref.cxx_getX?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4Ref.cxx_getX on null CxxbtVector4Ref";
    return
    this.ptr.data()->{ btVector3 }.cxx_getX(
        );
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4Ref.cxx_getY?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4Ref.cxx_getY on null CxxbtVector4Ref";
    return
    this.ptr.data()->{ btVector3 }.cxx_getY(
        );
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef
CxxbtVector4Ref.cxx_getZ?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4Ref.cxx_getZ on null CxxbtVector4Ref";
    return
    this.ptr.data()->{ btVector3 }.cxx_getZ(
        );
}

/**@brief Return the x value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ref.getX?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getX(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the y value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ref.getY?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getY(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}

/**@brief Return the z value */
/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ref.getZ?(
    )
{   
    CxxFloat32ConstRef __res_cxx = 
    this.cxx_getZ(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxFloat32ConstRef';
    Float32 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4Ref] EDK[CxxbtVector4MutableRef] LIB[btVector4 &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtVector4Ref] EDK[CxxbtVector4MutableRef] LIB[btVector4 &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ref.cxx_getW?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtVector4Ref.cxx_getW on null CxxbtVector4Ref";
    return
    this.ptr.data()->{ btVector4 }.cxx_getW(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtVector4Ref.getW?(
    )
{   
    Float32 __res = 
    this.cxx_getW(
        );
    
    return __res;
}



////////////////////////////////////////////////////////////////////////
// CxxbtVector4ConstPtr
// CxxbtVector4Ptr
// CxxbtVector4ConstRef
// CxxbtVector4Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstPtr(btVector4 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstPtr(btVector4 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btVector4());
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstPtr(btVector4 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstPtr Make_CxxbtVector4ConstPtr(btVector4 value) {
  return CxxbtVector4ConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ptr(btVector4 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ptr(btVector4 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btVector4());
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ptr(btVector4 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ptr Make_CxxbtVector4Ptr(btVector4 value) {
  return CxxbtVector4Ptr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef(btVector4 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef(btVector4 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btVector4());
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef(btVector4 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef Make_CxxbtVector4ConstRef(btVector4 value) {
  return CxxbtVector4ConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref(btVector4 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref(btVector4 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btVector4());
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref(btVector4 value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref Make_CxxbtVector4Ref(btVector4 value) {
  return CxxbtVector4Ref(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtVector4ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtVector4ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtVector4ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef CxxbtVector4ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector4ConstPtr.cxx_getAt on null CxxbtVector4ConstPtr";
  return CxxbtVector4ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btVector4()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef CxxbtVector4ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtVector4ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref CxxbtVector4Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector4Ptr.cxx_getAt on null CxxbtVector4Ptr";
  return CxxbtVector4Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btVector4()));
}

/// Same as for CxxbtVector4ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref CxxbtVector4Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtVector4Ptr.cxx_setAt(Index i, btVector4 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector4Ptr.cxx_setAt on null CxxbtVector4Ptr";
  this.ptr.offset(i)->{ btVector4 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef(CxxbtVector4ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef.=(CxxbtVector4ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btVector4 value
/// \dfgPresetOmit
/// \internal
btVector4 CxxbtVector4ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector4ConstRef.cxx_get on null CxxbtVector4ConstRef";
  return this.ptr.data()->{ btVector4 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtVector4ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref.cxx_set(btVector4 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtVector4Ref.cxx_set on null CxxbtVector4Ref";
  this.ptr.data()->{ btVector4 } = value;
}

/// Assignment of btVector4
/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref.=(btVector4 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtVector4Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[PHY_ScalarType] EDK[_Kludge_EDK_PHY_ScalarType] LIB[PHY_ScalarType]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxPHY_ScalarTypeConstPtr
// CxxPHY_ScalarTypePtr
// CxxPHY_ScalarTypeConstRef
// CxxPHY_ScalarTypeRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstPtr(PHY_ScalarType array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstPtr(PHY_ScalarType array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize__Kludge_EDK_PHY_ScalarType());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxPHY_ScalarTypeConstPtr permits CxxPHY_ScalarTypeConstPtr {
  private Data ptr;
  private PHY_ScalarType value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxPHY_ScalarTypeConstPtr(PHY_ScalarType value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxPHY_ScalarTypeConstPtr(io PHY_ScalarType value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstPtr(Make_CxxPHY_ScalarTypeConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypePtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypePtr(PHY_ScalarType array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypePtr(PHY_ScalarType array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize__Kludge_EDK_PHY_ScalarType());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxPHY_ScalarTypePtr permits CxxPHY_ScalarTypePtr {
  private Data ptr;
  private PHY_ScalarType value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxPHY_ScalarTypePtr(PHY_ScalarType value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxPHY_ScalarTypePtr(io PHY_ScalarType value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypePtr(Make_CxxPHY_ScalarTypePtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef(PHY_ScalarType array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef(PHY_ScalarType array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize__Kludge_EDK_PHY_ScalarType());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxPHY_ScalarTypeConstRef permits CxxPHY_ScalarTypeConstRef {
  private Data ptr;
  private PHY_ScalarType value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxPHY_ScalarTypeConstRef(PHY_ScalarType value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxPHY_ScalarTypeConstRef(io PHY_ScalarType value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef(Make_CxxPHY_ScalarTypeConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef(PHY_ScalarType array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef(PHY_ScalarType array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize__Kludge_EDK_PHY_ScalarType());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxPHY_ScalarTypeRef permits CxxPHY_ScalarTypeRef {
  private Data ptr;
  private PHY_ScalarType value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxPHY_ScalarTypeRef(PHY_ScalarType value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxPHY_ScalarTypeRef(io PHY_ScalarType value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef(Make_CxxPHY_ScalarTypeRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxPHY_ScalarTypeConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxPHY_ScalarTypeConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxPHY_ScalarTypeConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef CxxPHY_ScalarTypeConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxPHY_ScalarTypeConstPtr.cxx_getAt on null CxxPHY_ScalarTypeConstPtr";
  return CxxPHY_ScalarTypeConstRef(this.ptr.offset(index * __CxxSize__Kludge_EDK_PHY_ScalarType()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef CxxPHY_ScalarTypeConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxPHY_ScalarTypeConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef CxxPHY_ScalarTypePtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxPHY_ScalarTypePtr.cxx_getAt on null CxxPHY_ScalarTypePtr";
  return CxxPHY_ScalarTypeRef(this.ptr.offset(index * __CxxSize__Kludge_EDK_PHY_ScalarType()));
}

/// Same as for CxxPHY_ScalarTypeConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef CxxPHY_ScalarTypePtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypePtr.cxx_setAt(Index i, PHY_ScalarType v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxPHY_ScalarTypePtr.cxx_setAt on null CxxPHY_ScalarTypePtr";
  this.ptr.offset(i)->{ PHY_ScalarType } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef(CxxPHY_ScalarTypeConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef.=(CxxPHY_ScalarTypeConstRef that) {
  this.ptr = that.ptr;
}

/// Get the PHY_ScalarType value
/// \dfgPresetOmit
/// \internal
PHY_ScalarType CxxPHY_ScalarTypeConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxPHY_ScalarTypeConstRef.cxx_get on null CxxPHY_ScalarTypeConstRef";
  return this.ptr->{ PHY_ScalarType };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxPHY_ScalarTypeConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef.cxx_set(PHY_ScalarType value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxPHY_ScalarTypeRef.cxx_set on null CxxPHY_ScalarTypeRef";
  this.ptr->{ PHY_ScalarType } = value;
}

/// Assignment of PHY_ScalarType
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef.=(PHY_ScalarType value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxPHY_ScalarTypeRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// BinOp KL[==] C++[==]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////
Boolean
==(
    btCompoundShapeChild c1,
    btCompoundShapeChild c2
    ) = "Bullet2_bin_op_EQ_5ddd326b25ea91ec24776268f2fa718b";



//////////////////////////////////////////////////////////////////////////////
//
// BinOp KL[==] C++[==]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////
Boolean
==(
    btBroadphasePair a,
    btBroadphasePair b
    ) = "Bullet2_bin_op_EQ_b6bf4d361d95acb9247bd73b958cee70";



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btDispatcherInfo] EDK[Fabric_EDK_KL_btDispatcherInfo] LIB[btDispatcherInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtDispatcherInfoConstPtr] EDK[CxxbtDispatcherInfoConstPtr] LIB[btDispatcherInfo const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtDispatcherInfoPtr] EDK[CxxbtDispatcherInfoMutablePtr] LIB[btDispatcherInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtDispatcherInfoConstRef] EDK[CxxbtDispatcherInfoConstRef] LIB[btDispatcherInfo const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtDispatcherInfoConstRef] EDK[CxxbtDispatcherInfoConstRef] LIB[btDispatcherInfo const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtDispatcherInfoRef] EDK[CxxbtDispatcherInfoMutableRef] LIB[btDispatcherInfo &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////
// CxxbtDispatcherInfoConstPtr
// CxxbtDispatcherInfoPtr
// CxxbtDispatcherInfoConstRef
// CxxbtDispatcherInfoRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstPtr(btDispatcherInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstPtr(btDispatcherInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btDispatcherInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstPtr(btDispatcherInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstPtr Make_CxxbtDispatcherInfoConstPtr(btDispatcherInfo value) {
  return CxxbtDispatcherInfoConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoPtr(btDispatcherInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoPtr(btDispatcherInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btDispatcherInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoPtr(btDispatcherInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoPtr Make_CxxbtDispatcherInfoPtr(btDispatcherInfo value) {
  return CxxbtDispatcherInfoPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef(btDispatcherInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef(btDispatcherInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btDispatcherInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef(btDispatcherInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef Make_CxxbtDispatcherInfoConstRef(btDispatcherInfo value) {
  return CxxbtDispatcherInfoConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef(btDispatcherInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef(btDispatcherInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btDispatcherInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef(btDispatcherInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef Make_CxxbtDispatcherInfoRef(btDispatcherInfo value) {
  return CxxbtDispatcherInfoRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtDispatcherInfoConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtDispatcherInfoConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtDispatcherInfoConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef CxxbtDispatcherInfoConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtDispatcherInfoConstPtr.cxx_getAt on null CxxbtDispatcherInfoConstPtr";
  return CxxbtDispatcherInfoConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btDispatcherInfo()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef CxxbtDispatcherInfoConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtDispatcherInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef CxxbtDispatcherInfoPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtDispatcherInfoPtr.cxx_getAt on null CxxbtDispatcherInfoPtr";
  return CxxbtDispatcherInfoRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btDispatcherInfo()));
}

/// Same as for CxxbtDispatcherInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef CxxbtDispatcherInfoPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoPtr.cxx_setAt(Index i, btDispatcherInfo v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtDispatcherInfoPtr.cxx_setAt on null CxxbtDispatcherInfoPtr";
  this.ptr.offset(i)->{ btDispatcherInfo } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef(CxxbtDispatcherInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef.=(CxxbtDispatcherInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btDispatcherInfo value
/// \dfgPresetOmit
/// \internal
btDispatcherInfo CxxbtDispatcherInfoConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtDispatcherInfoConstRef.cxx_get on null CxxbtDispatcherInfoConstRef";
  return this.ptr.data()->{ btDispatcherInfo };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef.cxx_set(btDispatcherInfo value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtDispatcherInfoRef.cxx_set on null CxxbtDispatcherInfoRef";
  this.ptr.data()->{ btDispatcherInfo } = value;
}

/// Assignment of btDispatcherInfo
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef.=(btDispatcherInfo value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtDispatcherInfoRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_mat3_dot_col] C++[bt_mat3_dot_col]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//! Returns the dot product between a vec3f and the col of a matrix
/// \dfgPresetOmit
/// \internal
Float32
Cxxbt_mat3_dot_col(
    CxxbtMatrix3x3ConstRef mat,
    CxxbtVector3ConstRef vec3,
    SInt32 colindex
    ) = "Bullet2_bt_mat3_dot_col_b98c3d83f240f9b65dd2190a3e9f51c3";

//! Returns the dot product between a vec3f and the col of a matrix
Float32
bt_mat3_dot_col(
    in
    btMatrix3x3
    mat
    
    ,
    in
    btVector3
    vec3
    
    ,
    in
    SInt32
    colindex
    
    
    )
{
    
    CxxbtMatrix3x3ConstRef mat__cxx = Make_CxxbtMatrix3x3ConstRef(mat);
    
    CxxbtVector3ConstRef vec3__cxx = Make_CxxbtVector3ConstRef(vec3);
    
    Float32 __res = 
    Cxxbt_mat3_dot_col(
        mat__cxx,
        vec3__cxx,
        colindex
        );
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btAABB] EDK[Fabric_EDK_KL_btAABB] LIB[btAABB]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBConstPtr] EDK[CxxbtAABBConstPtr] LIB[btAABB const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBConstPtr] EDK[CxxbtAABBConstPtr] LIB[btAABB const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

CxxbtAABBConstPtr.cxx_get_center_extend?(
    CxxbtVector3Ref center,
    CxxbtVector3Ref extend
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_get_center_extend on null CxxbtAABBConstPtr";
    
    this.ptr.data()->{ btAABB }.cxx_get_center_extend(
        center,
        extend
        );
}

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

CxxbtAABBConstPtr.cxx_find_intersection?(
    CxxbtAABBConstRef other,
    CxxbtAABBRef intersection
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_find_intersection on null CxxbtAABBConstPtr";
    
    this.ptr.data()->{ btAABB }.cxx_find_intersection(
        other,
        intersection
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.cxx_has_collision?(
    CxxbtAABBConstRef other
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_has_collision on null CxxbtAABBConstPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_has_collision(
        other
        );
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.cxx_collide_ray?(
    CxxbtVector3ConstRef vorigin,
    CxxbtVector3ConstRef vdir
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_collide_ray on null CxxbtAABBConstPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_ray(
        vorigin,
        vdir
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBConstPtr.cxx_projection_interval?(
    CxxbtVector3ConstRef direction,
    CxxFloat32Ref vmin,
    CxxFloat32Ref vmax
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_projection_interval on null CxxbtAABBConstPtr";
    
    this.ptr.data()->{ btAABB }.cxx_projection_interval(
        direction,
        vmin,
        vmax
        );
}

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
CxxbtAABBConstPtr.cxx_plane_classify?(
    CxxbtVector4ConstRef plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_plane_classify on null CxxbtAABBConstPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_plane_classify(
        plane
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.cxx_overlapping_trans_conservative?(
    CxxbtAABBConstRef box,
    CxxbtTransformRef trans1_to_0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_overlapping_trans_conservative on null CxxbtAABBConstPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_conservative(
        box,
        trans1_to_0
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.cxx_overlapping_trans_conservative2?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE trans1_to_0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_overlapping_trans_conservative2 on null CxxbtAABBConstPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_conservative2(
        box,
        trans1_to_0
        );
}

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.cxx_overlapping_trans_cache?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE transcache,
    Boolean fulltest
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_overlapping_trans_cache on null CxxbtAABBConstPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_cache(
        box,
        transcache,
        fulltest
        );
}

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.cxx_collide_plane?(
    CxxbtVector4ConstRef plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_collide_plane on null CxxbtAABBConstPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_plane(
        plane
        );
}

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.cxx_collide_triangle_exact?(
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2,
    CxxbtVector3ConstRef p3,
    CxxbtVector4ConstRef triangle_plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstPtr.cxx_collide_triangle_exact on null CxxbtAABBConstPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_triangle_exact(
        p1,
        p2,
        p3,
        triangle_plane
        );
}

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
CxxbtAABBConstPtr.plane_classify?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    eBT_PLANE_INTERSECTION_TYPE __res = 
    this.cxx_plane_classify(
        plane__cxx
        );
    
    
    return __res;
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.collide_ray?(
    in
    btVector3
    vorigin
    
    ,
    in
    btVector3
    vdir
    
    
    )
{   
    
    CxxbtVector3ConstRef vorigin__cxx = Make_CxxbtVector3ConstRef(vorigin);
    
    CxxbtVector3ConstRef vdir__cxx = Make_CxxbtVector3ConstRef(vdir);
    Boolean __res = 
    this.cxx_collide_ray(
        vorigin__cxx,
        vdir__cxx
        );
    
    
    
    return __res;
}

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

CxxbtAABBConstPtr.get_center_extend?(
    io
    btVector3
    center
    
    ,
    io
    btVector3
    extend
    
    
    )
{   
    
    CxxbtVector3Ref center__cxx = Make_CxxbtVector3Ref(center);
    
    CxxbtVector3Ref extend__cxx = Make_CxxbtVector3Ref(extend);
    
    this.cxx_get_center_extend(
        center__cxx,
        extend__cxx
        );
    
    
    
    
}

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.collide_plane?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    Boolean __res = 
    this.cxx_collide_plane(
        plane__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.overlapping_trans_conservative?(
    in
    btAABB
    box
    
    ,
    io
    btTransform
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtTransformRef trans1_to_0__cxx = Make_CxxbtTransformRef(trans1_to_0);
    Boolean __res = 
    this.cxx_overlapping_trans_conservative(
        box__cxx,
        trans1_to_0__cxx
        );
    
    
    
    return __res;
}

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.overlapping_trans_cache?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    transcache
    
    ,
    in
    Boolean
    fulltest
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    
    Boolean __res = 
    this.cxx_overlapping_trans_cache(
        box__cxx,
        transcache,
        fulltest
        );
    
    
    
    
    return __res;
}

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.collide_triangle_exact?(
    in
    btVector3
    p1
    
    ,
    in
    btVector3
    p2
    
    ,
    in
    btVector3
    p3
    
    ,
    in
    btVector4
    triangle_plane
    
    
    )
{   
    
    CxxbtVector3ConstRef p1__cxx = Make_CxxbtVector3ConstRef(p1);
    
    CxxbtVector3ConstRef p2__cxx = Make_CxxbtVector3ConstRef(p2);
    
    CxxbtVector3ConstRef p3__cxx = Make_CxxbtVector3ConstRef(p3);
    
    CxxbtVector4ConstRef triangle_plane__cxx = Make_CxxbtVector4ConstRef(triangle_plane);
    Boolean __res = 
    this.cxx_collide_triangle_exact(
        p1__cxx,
        p2__cxx,
        p3__cxx,
        triangle_plane__cxx
        );
    
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.overlapping_trans_conservative2?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    Boolean __res = 
    this.cxx_overlapping_trans_conservative2(
        box__cxx,
        trans1_to_0
        );
    
    
    
    return __res;
}

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

CxxbtAABBConstPtr.find_intersection?(
    in
    btAABB
    other
    
    ,
    io
    btAABB
    intersection
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    CxxbtAABBRef intersection__cxx = Make_CxxbtAABBRef(intersection);
    
    this.cxx_find_intersection(
        other__cxx,
        intersection__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstPtr.has_collision?(
    in
    btAABB
    other
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    Boolean __res = 
    this.cxx_has_collision(
        other__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBConstPtr.projection_interval?(
    in
    btVector3
    direction
    
    ,
    io
    Float32
    vmin
    
    ,
    io
    Float32
    vmax
    
    
    )
{   
    
    CxxbtVector3ConstRef direction__cxx = Make_CxxbtVector3ConstRef(direction);
    
    CxxFloat32Ref vmin__cxx = Make_CxxFloat32Ref(vmin);
    
    CxxFloat32Ref vmax__cxx = Make_CxxFloat32Ref(vmax);
    
    this.cxx_projection_interval(
        direction__cxx,
        vmin__cxx,
        vmax__cxx
        );
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBPtr] EDK[CxxbtAABBMutablePtr] LIB[btAABB *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBPtr] EDK[CxxbtAABBMutablePtr] LIB[btAABB *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_invalidate!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_invalidate on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_invalidate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_increment_margin!(
    Float32 margin
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_increment_margin on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_increment_margin(
        margin
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_copy_with_margin!(
    CxxbtAABBConstRef other,
    Float32 margin
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_copy_with_margin on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_copy_with_margin(
        other,
        margin
        );
}

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_appy_transform!(
    CxxbtTransformConstRef trans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_appy_transform on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_appy_transform(
        trans
        );
}

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_appy_transform_trans_cache!(
    BT_BOX_BOX_TRANSFORM_CACHE trans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_appy_transform_trans_cache on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_appy_transform_trans_cache(
        trans
        );
}

//! Merges a Box
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_merge!(
    CxxbtAABBConstRef box
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_merge on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_merge(
        box
        );
}

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_get_center_extend?(
    CxxbtVector3Ref center,
    CxxbtVector3Ref extend
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_get_center_extend on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_get_center_extend(
        center,
        extend
        );
}

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_find_intersection?(
    CxxbtAABBConstRef other,
    CxxbtAABBRef intersection
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_find_intersection on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_find_intersection(
        other,
        intersection
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.cxx_has_collision?(
    CxxbtAABBConstRef other
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_has_collision on null CxxbtAABBPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_has_collision(
        other
        );
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.cxx_collide_ray?(
    CxxbtVector3ConstRef vorigin,
    CxxbtVector3ConstRef vdir
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_collide_ray on null CxxbtAABBPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_ray(
        vorigin,
        vdir
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.cxx_projection_interval?(
    CxxbtVector3ConstRef direction,
    CxxFloat32Ref vmin,
    CxxFloat32Ref vmax
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_projection_interval on null CxxbtAABBPtr";
    
    this.ptr.data()->{ btAABB }.cxx_projection_interval(
        direction,
        vmin,
        vmax
        );
}

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
CxxbtAABBPtr.cxx_plane_classify?(
    CxxbtVector4ConstRef plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_plane_classify on null CxxbtAABBPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_plane_classify(
        plane
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.cxx_overlapping_trans_conservative?(
    CxxbtAABBConstRef box,
    CxxbtTransformRef trans1_to_0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_overlapping_trans_conservative on null CxxbtAABBPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_conservative(
        box,
        trans1_to_0
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.cxx_overlapping_trans_conservative2?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE trans1_to_0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_overlapping_trans_conservative2 on null CxxbtAABBPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_conservative2(
        box,
        trans1_to_0
        );
}

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.cxx_overlapping_trans_cache?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE transcache,
    Boolean fulltest
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_overlapping_trans_cache on null CxxbtAABBPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_cache(
        box,
        transcache,
        fulltest
        );
}

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.cxx_collide_plane?(
    CxxbtVector4ConstRef plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_collide_plane on null CxxbtAABBPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_plane(
        plane
        );
}

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.cxx_collide_triangle_exact?(
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2,
    CxxbtVector3ConstRef p3,
    CxxbtVector4ConstRef triangle_plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBPtr.cxx_collide_triangle_exact on null CxxbtAABBPtr";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_triangle_exact(
        p1,
        p2,
        p3,
        triangle_plane
        );
}

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
CxxbtAABBPtr.plane_classify?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    eBT_PLANE_INTERSECTION_TYPE __res = 
    this.cxx_plane_classify(
        plane__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.has_collision?(
    in
    btAABB
    other
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    Boolean __res = 
    this.cxx_has_collision(
        other__cxx
        );
    
    
    return __res;
}

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.appy_transform_trans_cache!(
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    trans
    
    
    )
{   
    
    
    this.cxx_appy_transform_trans_cache(
        trans
        );
    
    
    
}

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.appy_transform!(
    in
    btTransform
    trans
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    this.cxx_appy_transform(
        trans__cxx
        );
    
    
    
}

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.overlapping_trans_cache?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    transcache
    
    ,
    in
    Boolean
    fulltest
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    
    Boolean __res = 
    this.cxx_overlapping_trans_cache(
        box__cxx,
        transcache,
        fulltest
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.increment_margin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_increment_margin(
        margin
        );
    
    
    
}

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.get_center_extend?(
    io
    btVector3
    center
    
    ,
    io
    btVector3
    extend
    
    
    )
{   
    
    CxxbtVector3Ref center__cxx = Make_CxxbtVector3Ref(center);
    
    CxxbtVector3Ref extend__cxx = Make_CxxbtVector3Ref(extend);
    
    this.cxx_get_center_extend(
        center__cxx,
        extend__cxx
        );
    
    
    
    
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.collide_ray?(
    in
    btVector3
    vorigin
    
    ,
    in
    btVector3
    vdir
    
    
    )
{   
    
    CxxbtVector3ConstRef vorigin__cxx = Make_CxxbtVector3ConstRef(vorigin);
    
    CxxbtVector3ConstRef vdir__cxx = Make_CxxbtVector3ConstRef(vdir);
    Boolean __res = 
    this.cxx_collide_ray(
        vorigin__cxx,
        vdir__cxx
        );
    
    
    
    return __res;
}

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.find_intersection?(
    in
    btAABB
    other
    
    ,
    io
    btAABB
    intersection
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    CxxbtAABBRef intersection__cxx = Make_CxxbtAABBRef(intersection);
    
    this.cxx_find_intersection(
        other__cxx,
        intersection__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.overlapping_trans_conservative?(
    in
    btAABB
    box
    
    ,
    io
    btTransform
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtTransformRef trans1_to_0__cxx = Make_CxxbtTransformRef(trans1_to_0);
    Boolean __res = 
    this.cxx_overlapping_trans_conservative(
        box__cxx,
        trans1_to_0__cxx
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.projection_interval?(
    in
    btVector3
    direction
    
    ,
    io
    Float32
    vmin
    
    ,
    io
    Float32
    vmax
    
    
    )
{   
    
    CxxbtVector3ConstRef direction__cxx = Make_CxxbtVector3ConstRef(direction);
    
    CxxFloat32Ref vmin__cxx = Make_CxxFloat32Ref(vmin);
    
    CxxFloat32Ref vmax__cxx = Make_CxxFloat32Ref(vmax);
    
    this.cxx_projection_interval(
        direction__cxx,
        vmin__cxx,
        vmax__cxx
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.invalidate!(
    )
{   
    
    this.cxx_invalidate(
        );
    
    
}

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.collide_triangle_exact?(
    in
    btVector3
    p1
    
    ,
    in
    btVector3
    p2
    
    ,
    in
    btVector3
    p3
    
    ,
    in
    btVector4
    triangle_plane
    
    
    )
{   
    
    CxxbtVector3ConstRef p1__cxx = Make_CxxbtVector3ConstRef(p1);
    
    CxxbtVector3ConstRef p2__cxx = Make_CxxbtVector3ConstRef(p2);
    
    CxxbtVector3ConstRef p3__cxx = Make_CxxbtVector3ConstRef(p3);
    
    CxxbtVector4ConstRef triangle_plane__cxx = Make_CxxbtVector4ConstRef(triangle_plane);
    Boolean __res = 
    this.cxx_collide_triangle_exact(
        p1__cxx,
        p2__cxx,
        p3__cxx,
        triangle_plane__cxx
        );
    
    
    
    
    
    return __res;
}

//! Merges a Box
/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.merge!(
    in
    btAABB
    box
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    this.cxx_merge(
        box__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.overlapping_trans_conservative2?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    Boolean __res = 
    this.cxx_overlapping_trans_conservative2(
        box__cxx,
        trans1_to_0
        );
    
    
    
    return __res;
}

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBPtr.collide_plane?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    Boolean __res = 
    this.cxx_collide_plane(
        plane__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBPtr.copy_with_margin!(
    in
    btAABB
    other
    
    ,
    in
    Float32
    margin
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    
    this.cxx_copy_with_margin(
        other__cxx,
        margin
        );
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBConstRef] EDK[CxxbtAABBConstRef] LIB[btAABB const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBConstRef] EDK[CxxbtAABBConstRef] LIB[btAABB const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBConstRef] EDK[CxxbtAABBConstRef] LIB[btAABB const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

CxxbtAABBConstRef.cxx_get_center_extend?(
    CxxbtVector3Ref center,
    CxxbtVector3Ref extend
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_get_center_extend on null CxxbtAABBConstRef";
    
    this.ptr.data()->{ btAABB }.cxx_get_center_extend(
        center,
        extend
        );
}

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

CxxbtAABBConstRef.cxx_find_intersection?(
    CxxbtAABBConstRef other,
    CxxbtAABBRef intersection
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_find_intersection on null CxxbtAABBConstRef";
    
    this.ptr.data()->{ btAABB }.cxx_find_intersection(
        other,
        intersection
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.cxx_has_collision?(
    CxxbtAABBConstRef other
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_has_collision on null CxxbtAABBConstRef";
    return
    this.ptr.data()->{ btAABB }.cxx_has_collision(
        other
        );
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.cxx_collide_ray?(
    CxxbtVector3ConstRef vorigin,
    CxxbtVector3ConstRef vdir
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_collide_ray on null CxxbtAABBConstRef";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_ray(
        vorigin,
        vdir
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBConstRef.cxx_projection_interval?(
    CxxbtVector3ConstRef direction,
    CxxFloat32Ref vmin,
    CxxFloat32Ref vmax
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_projection_interval on null CxxbtAABBConstRef";
    
    this.ptr.data()->{ btAABB }.cxx_projection_interval(
        direction,
        vmin,
        vmax
        );
}

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
CxxbtAABBConstRef.cxx_plane_classify?(
    CxxbtVector4ConstRef plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_plane_classify on null CxxbtAABBConstRef";
    return
    this.ptr.data()->{ btAABB }.cxx_plane_classify(
        plane
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.cxx_overlapping_trans_conservative?(
    CxxbtAABBConstRef box,
    CxxbtTransformRef trans1_to_0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_overlapping_trans_conservative on null CxxbtAABBConstRef";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_conservative(
        box,
        trans1_to_0
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.cxx_overlapping_trans_conservative2?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE trans1_to_0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_overlapping_trans_conservative2 on null CxxbtAABBConstRef";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_conservative2(
        box,
        trans1_to_0
        );
}

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.cxx_overlapping_trans_cache?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE transcache,
    Boolean fulltest
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_overlapping_trans_cache on null CxxbtAABBConstRef";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_cache(
        box,
        transcache,
        fulltest
        );
}

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.cxx_collide_plane?(
    CxxbtVector4ConstRef plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_collide_plane on null CxxbtAABBConstRef";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_plane(
        plane
        );
}

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.cxx_collide_triangle_exact?(
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2,
    CxxbtVector3ConstRef p3,
    CxxbtVector4ConstRef triangle_plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBConstRef.cxx_collide_triangle_exact on null CxxbtAABBConstRef";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_triangle_exact(
        p1,
        p2,
        p3,
        triangle_plane
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.has_collision?(
    in
    btAABB
    other
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    Boolean __res = 
    this.cxx_has_collision(
        other__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.overlapping_trans_conservative?(
    in
    btAABB
    box
    
    ,
    io
    btTransform
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtTransformRef trans1_to_0__cxx = Make_CxxbtTransformRef(trans1_to_0);
    Boolean __res = 
    this.cxx_overlapping_trans_conservative(
        box__cxx,
        trans1_to_0__cxx
        );
    
    
    
    return __res;
}

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.overlapping_trans_cache?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    transcache
    
    ,
    in
    Boolean
    fulltest
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    
    Boolean __res = 
    this.cxx_overlapping_trans_cache(
        box__cxx,
        transcache,
        fulltest
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBConstRef.projection_interval?(
    in
    btVector3
    direction
    
    ,
    io
    Float32
    vmin
    
    ,
    io
    Float32
    vmax
    
    
    )
{   
    
    CxxbtVector3ConstRef direction__cxx = Make_CxxbtVector3ConstRef(direction);
    
    CxxFloat32Ref vmin__cxx = Make_CxxFloat32Ref(vmin);
    
    CxxFloat32Ref vmax__cxx = Make_CxxFloat32Ref(vmax);
    
    this.cxx_projection_interval(
        direction__cxx,
        vmin__cxx,
        vmax__cxx
        );
    
    
    
    
    
}

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

CxxbtAABBConstRef.get_center_extend?(
    io
    btVector3
    center
    
    ,
    io
    btVector3
    extend
    
    
    )
{   
    
    CxxbtVector3Ref center__cxx = Make_CxxbtVector3Ref(center);
    
    CxxbtVector3Ref extend__cxx = Make_CxxbtVector3Ref(extend);
    
    this.cxx_get_center_extend(
        center__cxx,
        extend__cxx
        );
    
    
    
    
}

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.collide_plane?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    Boolean __res = 
    this.cxx_collide_plane(
        plane__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.overlapping_trans_conservative2?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    Boolean __res = 
    this.cxx_overlapping_trans_conservative2(
        box__cxx,
        trans1_to_0
        );
    
    
    
    return __res;
}

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.collide_triangle_exact?(
    in
    btVector3
    p1
    
    ,
    in
    btVector3
    p2
    
    ,
    in
    btVector3
    p3
    
    ,
    in
    btVector4
    triangle_plane
    
    
    )
{   
    
    CxxbtVector3ConstRef p1__cxx = Make_CxxbtVector3ConstRef(p1);
    
    CxxbtVector3ConstRef p2__cxx = Make_CxxbtVector3ConstRef(p2);
    
    CxxbtVector3ConstRef p3__cxx = Make_CxxbtVector3ConstRef(p3);
    
    CxxbtVector4ConstRef triangle_plane__cxx = Make_CxxbtVector4ConstRef(triangle_plane);
    Boolean __res = 
    this.cxx_collide_triangle_exact(
        p1__cxx,
        p2__cxx,
        p3__cxx,
        triangle_plane__cxx
        );
    
    
    
    
    
    return __res;
}

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

CxxbtAABBConstRef.find_intersection?(
    in
    btAABB
    other
    
    ,
    io
    btAABB
    intersection
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    CxxbtAABBRef intersection__cxx = Make_CxxbtAABBRef(intersection);
    
    this.cxx_find_intersection(
        other__cxx,
        intersection__cxx
        );
    
    
    
    
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBConstRef.collide_ray?(
    in
    btVector3
    vorigin
    
    ,
    in
    btVector3
    vdir
    
    
    )
{   
    
    CxxbtVector3ConstRef vorigin__cxx = Make_CxxbtVector3ConstRef(vorigin);
    
    CxxbtVector3ConstRef vdir__cxx = Make_CxxbtVector3ConstRef(vdir);
    Boolean __res = 
    this.cxx_collide_ray(
        vorigin__cxx,
        vdir__cxx
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
CxxbtAABBConstRef.plane_classify?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    eBT_PLANE_INTERSECTION_TYPE __res = 
    this.cxx_plane_classify(
        plane__cxx
        );
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBRef] EDK[CxxbtAABBMutableRef] LIB[btAABB &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtAABBRef] EDK[CxxbtAABBMutableRef] LIB[btAABB &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_invalidate!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_invalidate on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_invalidate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_increment_margin!(
    Float32 margin
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_increment_margin on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_increment_margin(
        margin
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_copy_with_margin!(
    CxxbtAABBConstRef other,
    Float32 margin
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_copy_with_margin on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_copy_with_margin(
        other,
        margin
        );
}

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_appy_transform!(
    CxxbtTransformConstRef trans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_appy_transform on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_appy_transform(
        trans
        );
}

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_appy_transform_trans_cache!(
    BT_BOX_BOX_TRANSFORM_CACHE trans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_appy_transform_trans_cache on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_appy_transform_trans_cache(
        trans
        );
}

//! Merges a Box
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_merge!(
    CxxbtAABBConstRef box
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_merge on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_merge(
        box
        );
}

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_get_center_extend?(
    CxxbtVector3Ref center,
    CxxbtVector3Ref extend
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_get_center_extend on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_get_center_extend(
        center,
        extend
        );
}

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_find_intersection?(
    CxxbtAABBConstRef other,
    CxxbtAABBRef intersection
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_find_intersection on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_find_intersection(
        other,
        intersection
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.cxx_has_collision?(
    CxxbtAABBConstRef other
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_has_collision on null CxxbtAABBRef";
    return
    this.ptr.data()->{ btAABB }.cxx_has_collision(
        other
        );
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.cxx_collide_ray?(
    CxxbtVector3ConstRef vorigin,
    CxxbtVector3ConstRef vdir
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_collide_ray on null CxxbtAABBRef";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_ray(
        vorigin,
        vdir
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.cxx_projection_interval?(
    CxxbtVector3ConstRef direction,
    CxxFloat32Ref vmin,
    CxxFloat32Ref vmax
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_projection_interval on null CxxbtAABBRef";
    
    this.ptr.data()->{ btAABB }.cxx_projection_interval(
        direction,
        vmin,
        vmax
        );
}

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
CxxbtAABBRef.cxx_plane_classify?(
    CxxbtVector4ConstRef plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_plane_classify on null CxxbtAABBRef";
    return
    this.ptr.data()->{ btAABB }.cxx_plane_classify(
        plane
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.cxx_overlapping_trans_conservative?(
    CxxbtAABBConstRef box,
    CxxbtTransformRef trans1_to_0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_overlapping_trans_conservative on null CxxbtAABBRef";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_conservative(
        box,
        trans1_to_0
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.cxx_overlapping_trans_conservative2?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE trans1_to_0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_overlapping_trans_conservative2 on null CxxbtAABBRef";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_conservative2(
        box,
        trans1_to_0
        );
}

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.cxx_overlapping_trans_cache?(
    CxxbtAABBConstRef box,
    BT_BOX_BOX_TRANSFORM_CACHE transcache,
    Boolean fulltest
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_overlapping_trans_cache on null CxxbtAABBRef";
    return
    this.ptr.data()->{ btAABB }.cxx_overlapping_trans_cache(
        box,
        transcache,
        fulltest
        );
}

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.cxx_collide_plane?(
    CxxbtVector4ConstRef plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_collide_plane on null CxxbtAABBRef";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_plane(
        plane
        );
}

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.cxx_collide_triangle_exact?(
    CxxbtVector3ConstRef p1,
    CxxbtVector3ConstRef p2,
    CxxbtVector3ConstRef p3,
    CxxbtVector4ConstRef triangle_plane
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtAABBRef.cxx_collide_triangle_exact on null CxxbtAABBRef";
    return
    this.ptr.data()->{ btAABB }.cxx_collide_triangle_exact(
        p1,
        p2,
        p3,
        triangle_plane
        );
}

/// \dfgPresetOmit
/// \internal
eBT_PLANE_INTERSECTION_TYPE
CxxbtAABBRef.plane_classify?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    eBT_PLANE_INTERSECTION_TYPE __res = 
    this.cxx_plane_classify(
        plane__cxx
        );
    
    
    return __res;
}

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.appy_transform!(
    in
    btTransform
    trans
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    this.cxx_appy_transform(
        trans__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.has_collision?(
    in
    btAABB
    other
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    Boolean __res = 
    this.cxx_has_collision(
        other__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.overlapping_trans_conservative?(
    in
    btAABB
    box
    
    ,
    io
    btTransform
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    CxxbtTransformRef trans1_to_0__cxx = Make_CxxbtTransformRef(trans1_to_0);
    Boolean __res = 
    this.cxx_overlapping_trans_conservative(
        box__cxx,
        trans1_to_0__cxx
        );
    
    
    
    return __res;
}

//! test for a triangle, with edges
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.collide_triangle_exact?(
    in
    btVector3
    p1
    
    ,
    in
    btVector3
    p2
    
    ,
    in
    btVector3
    p3
    
    ,
    in
    btVector4
    triangle_plane
    
    
    )
{   
    
    CxxbtVector3ConstRef p1__cxx = Make_CxxbtVector3ConstRef(p1);
    
    CxxbtVector3ConstRef p2__cxx = Make_CxxbtVector3ConstRef(p2);
    
    CxxbtVector3ConstRef p3__cxx = Make_CxxbtVector3ConstRef(p3);
    
    CxxbtVector4ConstRef triangle_plane__cxx = Make_CxxbtVector4ConstRef(triangle_plane);
    Boolean __res = 
    this.cxx_collide_triangle_exact(
        p1__cxx,
        p2__cxx,
        p3__cxx,
        triangle_plane__cxx
        );
    
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.overlapping_trans_conservative2?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    trans1_to_0
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    Boolean __res = 
    this.cxx_overlapping_trans_conservative2(
        box__cxx,
        trans1_to_0
        );
    
    
    
    return __res;
}

//! transcache is the transformation cache from box to this AABB
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.overlapping_trans_cache?(
    in
    btAABB
    box
    
    ,
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    transcache
    
    ,
    in
    Boolean
    fulltest
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    
    Boolean __res = 
    this.cxx_overlapping_trans_cache(
        box__cxx,
        transcache,
        fulltest
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.invalidate!(
    )
{   
    
    this.cxx_invalidate(
        );
    
    
}

//! Gets the extend and center
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.get_center_extend?(
    io
    btVector3
    center
    
    ,
    io
    btVector3
    extend
    
    
    )
{   
    
    CxxbtVector3Ref center__cxx = Make_CxxbtVector3Ref(center);
    
    CxxbtVector3Ref extend__cxx = Make_CxxbtVector3Ref(extend);
    
    this.cxx_get_center_extend(
        center__cxx,
        extend__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.increment_margin!(
    in
    Float32
    margin
    
    
    )
{   
    
    
    this.cxx_increment_margin(
        margin
        );
    
    
    
}

//! Simple test for planes.
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.collide_plane?(
    in
    btVector4
    plane
    
    
    )
{   
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    Boolean __res = 
    this.cxx_collide_plane(
        plane__cxx
        );
    
    
    return __res;
}

//! Finds the intersecting box between this box and the other.
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.find_intersection?(
    in
    btAABB
    other
    
    ,
    io
    btAABB
    intersection
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    CxxbtAABBRef intersection__cxx = Make_CxxbtAABBRef(intersection);
    
    this.cxx_find_intersection(
        other__cxx,
        intersection__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.projection_interval?(
    in
    btVector3
    direction
    
    ,
    io
    Float32
    vmin
    
    ,
    io
    Float32
    vmax
    
    
    )
{   
    
    CxxbtVector3ConstRef direction__cxx = Make_CxxbtVector3ConstRef(direction);
    
    CxxFloat32Ref vmin__cxx = Make_CxxFloat32Ref(vmin);
    
    CxxFloat32Ref vmax__cxx = Make_CxxFloat32Ref(vmax);
    
    this.cxx_projection_interval(
        direction__cxx,
        vmin__cxx,
        vmax__cxx
        );
    
    
    
    
    
}

//! Merges a Box
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.merge!(
    in
    btAABB
    box
    
    
    )
{   
    
    CxxbtAABBConstRef box__cxx = Make_CxxbtAABBConstRef(box);
    
    this.cxx_merge(
        box__cxx
        );
    
    
    
}

/*! \brief Finds the Ray intersection parameter.
	\param aabb Aligned box
	\param vorigin A vec3f with the origin of the ray
	\param vdir A vec3f with the direction of the ray
	*/
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtAABBRef.collide_ray?(
    in
    btVector3
    vorigin
    
    ,
    in
    btVector3
    vdir
    
    
    )
{   
    
    CxxbtVector3ConstRef vorigin__cxx = Make_CxxbtVector3ConstRef(vorigin);
    
    CxxbtVector3ConstRef vdir__cxx = Make_CxxbtVector3ConstRef(vdir);
    Boolean __res = 
    this.cxx_collide_ray(
        vorigin__cxx,
        vdir__cxx
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.copy_with_margin!(
    in
    btAABB
    other
    
    ,
    in
    Float32
    margin
    
    
    )
{   
    
    CxxbtAABBConstRef other__cxx = Make_CxxbtAABBConstRef(other);
    
    
    this.cxx_copy_with_margin(
        other__cxx,
        margin
        );
    
    
    
    
}

//! Apply a transform to an AABB
/// \dfgPresetOmit
/// \internal

CxxbtAABBRef.appy_transform_trans_cache!(
    in
    BT_BOX_BOX_TRANSFORM_CACHE
    trans
    
    
    )
{   
    
    
    this.cxx_appy_transform_trans_cache(
        trans
        );
    
    
    
}



////////////////////////////////////////////////////////////////////////
// CxxbtAABBConstPtr
// CxxbtAABBPtr
// CxxbtAABBConstRef
// CxxbtAABBRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstPtr(btAABB array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstPtr(btAABB array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAABB());
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstPtr(btAABB value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstPtr Make_CxxbtAABBConstPtr(btAABB value) {
  return CxxbtAABBConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBPtr(btAABB array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBPtr(btAABB array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAABB());
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBPtr(btAABB value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBPtr Make_CxxbtAABBPtr(btAABB value) {
  return CxxbtAABBPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef(btAABB array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef(btAABB array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAABB());
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef(btAABB value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef Make_CxxbtAABBConstRef(btAABB value) {
  return CxxbtAABBConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBRef(btAABB array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBRef(btAABB array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btAABB());
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBRef(btAABB value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtAABBRef Make_CxxbtAABBRef(btAABB value) {
  return CxxbtAABBRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtAABBConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtAABBConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtAABBConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef CxxbtAABBConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAABBConstPtr.cxx_getAt on null CxxbtAABBConstPtr";
  return CxxbtAABBConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAABB()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef CxxbtAABBConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtAABBConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtAABBConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAABBRef CxxbtAABBPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAABBPtr.cxx_getAt on null CxxbtAABBPtr";
  return CxxbtAABBRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btAABB()));
}

/// Same as for CxxbtAABBConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtAABBRef CxxbtAABBPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtAABBPtr.cxx_setAt(Index i, btAABB v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAABBPtr.cxx_setAt on null CxxbtAABBPtr";
  this.ptr.offset(i)->{ btAABB } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef(CxxbtAABBConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef.=(CxxbtAABBConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btAABB value
/// \dfgPresetOmit
/// \internal
btAABB CxxbtAABBConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAABBConstRef.cxx_get on null CxxbtAABBConstRef";
  return this.ptr.data()->{ btAABB };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAABBConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtAABBRef.cxx_set(btAABB value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtAABBRef.cxx_set on null CxxbtAABBRef";
  this.ptr.data()->{ btAABB } = value;
}

/// Assignment of btAABB
/// \dfgPresetOmit
/// \internal
CxxbtAABBRef.=(btAABB value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtAABBRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btCompareTransformsEqual] C++[btCompareTransformsEqual]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//! Compairison of transformation objects
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtCompareTransformsEqual(
    CxxbtTransformConstRef t1,
    CxxbtTransformConstRef t2
    ) = "Bullet2_btCompareTransformsEqual_3f07a2cdb0df9aa0e470221386301a92";

//! Compairison of transformation objects
Boolean
btCompareTransformsEqual(
    in
    btTransform
    t1
    
    ,
    in
    btTransform
    t2
    
    
    )
{
    
    CxxbtTransformConstRef t1__cxx = Make_CxxbtTransformConstRef(t1);
    
    CxxbtTransformConstRef t2__cxx = Make_CxxbtTransformConstRef(t2);
    Boolean __res = 
    CxxbtCompareTransformsEqual(
        t1__cxx,
        t2__cxx
        );
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_distance_point_plane] C++[bt_distance_point_plane]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
Cxxbt_distance_point_plane(
    CxxbtVector4ConstRef plane,
    CxxbtVector3ConstRef point
    ) = "Bullet2_bt_distance_point_plane_a128d322825118c80421be0260f94e44";

Float32
bt_distance_point_plane(
    in
    btVector4
    plane
    
    ,
    in
    btVector3
    point
    
    
    )
{
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    Float32 __res = 
    Cxxbt_distance_point_plane(
        plane__cxx,
        point__cxx
        );
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_vec_blend] C++[bt_vec_blend]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/*! Vector blending
Takes two vectors a, b, blends them together*/
/// \dfgPresetOmit
/// \internal

Cxxbt_vec_blend(
    CxxbtVector3Ref vr,
    CxxbtVector3ConstRef va,
    CxxbtVector3ConstRef vb,
    Float32 blend_factor
    ) = "Bullet2_bt_vec_blend_544b08e2230ce42cc5fd77b25c0b14db";

/*! Vector blending
Takes two vectors a, b, blends them together*/

bt_vec_blend(
    io
    btVector3
    vr
    
    ,
    in
    btVector3
    va
    
    ,
    in
    btVector3
    vb
    
    ,
    in
    Float32
    blend_factor
    
    
    )
{
    
    CxxbtVector3Ref vr__cxx = Make_CxxbtVector3Ref(vr);
    
    CxxbtVector3ConstRef va__cxx = Make_CxxbtVector3ConstRef(va);
    
    CxxbtVector3ConstRef vb__cxx = Make_CxxbtVector3ConstRef(vb);
    
    
    Cxxbt_vec_blend(
        vr__cxx,
        va__cxx,
        vb__cxx,
        blend_factor
        );
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_plane_clip_polygon_collect] C++[bt_plane_clip_polygon_collect]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//! This function calcs the distance from a 3D plane
/// \dfgPresetOmit
/// \internal

Cxxbt_plane_clip_polygon_collect(
    CxxbtVector3ConstRef point0,
    CxxbtVector3ConstRef point1,
    Float32 dist0,
    Float32 dist1,
    CxxbtVector3Ptr clipped,
    CxxSInt32Ref clipped_count
    ) = "Bullet2_bt_plane_clip_polygon_collect_499ba51ccaabb57927c3919d96ac09eb";

//! This function calcs the distance from a 3D plane

bt_plane_clip_polygon_collect(
    in
    btVector3
    point0
    
    ,
    in
    btVector3
    point1
    
    ,
    in
    Float32
    dist0
    
    ,
    in
    Float32
    dist1
    
    ,
    io
    btVector3
    clipped
    
    ,
    io
    SInt32
    clipped_count
    
    
    )
{
    
    CxxbtVector3ConstRef point0__cxx = Make_CxxbtVector3ConstRef(point0);
    
    CxxbtVector3ConstRef point1__cxx = Make_CxxbtVector3ConstRef(point1);
    
    
    
    CxxbtVector3Ptr clipped__cxx = Make_CxxbtVector3Ptr(clipped);
    
    CxxSInt32Ref clipped_count__cxx = Make_CxxSInt32Ref(clipped_count);
    
    Cxxbt_plane_clip_polygon_collect(
        point0__cxx,
        point1__cxx,
        dist0,
        dist1,
        clipped__cxx,
        clipped_count__cxx
        );
    
    
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_plane_clip_polygon] C++[bt_plane_clip_polygon]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//! Clips a polygon by a plane
// /*!
// *\return The count of the clipped counts
// */
/// \dfgPresetOmit
/// \internal
SInt32
Cxxbt_plane_clip_polygon(
    CxxbtVector4ConstRef plane,
    CxxbtVector3ConstPtr polygon_points,
    SInt32 polygon_point_count,
    CxxbtVector3Ptr clipped
    ) = "Bullet2_bt_plane_clip_polygon_9f522e9586f875fd07344b4bb320b371";

//! Clips a polygon by a plane
// /*!
// *\return The count of the clipped counts
// */
SInt32
bt_plane_clip_polygon(
    in
    btVector4
    plane
    
    ,
    in
    btVector3
    polygon_points
    
    ,
    in
    SInt32
    polygon_point_count
    
    ,
    io
    btVector3
    clipped
    
    
    )
{
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    
    CxxbtVector3ConstPtr polygon_points__cxx = Make_CxxbtVector3ConstPtr(polygon_points);
    
    
    CxxbtVector3Ptr clipped__cxx = Make_CxxbtVector3Ptr(clipped);
    SInt32 __res = 
    Cxxbt_plane_clip_polygon(
        plane__cxx,
        polygon_points__cxx,
        polygon_point_count,
        clipped__cxx
        );
    
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_plane_clip_triangle] C++[bt_plane_clip_triangle]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//! Clips a polygon by a plane
// /*!
// *\param clipped must be an array of 16 points.
// *\return The count of the clipped counts
// */
/// \dfgPresetOmit
/// \internal
SInt32
Cxxbt_plane_clip_triangle(
    CxxbtVector4ConstRef plane,
    CxxbtVector3ConstRef point0,
    CxxbtVector3ConstRef point1,
    CxxbtVector3ConstRef point2,
    CxxbtVector3Ptr clipped
    ) = "Bullet2_bt_plane_clip_triangle_928a7043e34750dd063cdace5b0f8b80";

//! Clips a polygon by a plane
// /*!
// *\param clipped must be an array of 16 points.
// *\return The count of the clipped counts
// */
SInt32
bt_plane_clip_triangle(
    in
    btVector4
    plane
    
    ,
    in
    btVector3
    point0
    
    ,
    in
    btVector3
    point1
    
    ,
    in
    btVector3
    point2
    
    ,
    io
    btVector3
    clipped
    
    
    )
{
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    
    CxxbtVector3ConstRef point0__cxx = Make_CxxbtVector3ConstRef(point0);
    
    CxxbtVector3ConstRef point1__cxx = Make_CxxbtVector3ConstRef(point1);
    
    CxxbtVector3ConstRef point2__cxx = Make_CxxbtVector3ConstRef(point2);
    
    CxxbtVector3Ptr clipped__cxx = Make_CxxbtVector3Ptr(clipped);
    SInt32 __res = 
    Cxxbt_plane_clip_triangle(
        plane__cxx,
        point0__cxx,
        point1__cxx,
        point2__cxx,
        clipped__cxx
        );
    
    
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btCreateCompoundFromGimpactShape] C++[btCreateCompoundFromGimpactShape]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btCompoundShape
CxxbtCreateCompoundFromGimpactShape(
    btGImpactMeshShape gimpactMesh,
    Float32 depth
    ) = "Bullet2_btCreateCompoundFromGimpactShape_bc107774ac2bb9aa8fd70004927fe7ba";

btCompoundShape
btCreateCompoundFromGimpactShape(
    in
    btGImpactMeshShape
    gimpactMesh
    
    ,
    in
    Float32
    depth
    
    
    )
{
    
    
    btCompoundShape __res = 
    CxxbtCreateCompoundFromGimpactShape(
        gimpactMesh,
        depth
        );
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btPoolAlloc] C++[btPoolAlloc]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Data
CxxbtPoolAlloc(
    UInt64 size
    ) = "Bullet2_btPoolAlloc_b0722262c77bbf168caaed8ddbc02631";

Data
btPoolAlloc(
    in
    UInt64
    size
    
    
    )
{
    
    Data __res = 
    CxxbtPoolAlloc(
        size
        );
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btPoolRealloc] C++[btPoolRealloc]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Data
CxxbtPoolRealloc(
    Data ptr,
    UInt64 oldsize,
    UInt64 newsize
    ) = "Bullet2_btPoolRealloc_a3aaff304fd1e88447a609e8a7ccebd0";

Data
btPoolRealloc(
    in
    Data
    ptr
    
    ,
    in
    UInt64
    oldsize
    
    ,
    in
    UInt64
    newsize
    
    
    )
{
    
    
    
    Data __res = 
    CxxbtPoolRealloc(
        ptr,
        oldsize,
        newsize
        );
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btPoolFree] C++[btPoolFree]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtPoolFree(
    Data ptr
    ) = "Bullet2_btPoolFree_f9aada94b4befb6e16c9c06175bea83a";


btPoolFree(
    in
    Data
    ptr
    
    
    )
{
    
    
    CxxbtPoolFree(
        ptr
        );
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_edge_plane] C++[bt_edge_plane]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// Calc a plane from a triangle edge an a normal. plane is a vec4f
/// \dfgPresetOmit
/// \internal

Cxxbt_edge_plane(
    CxxbtVector3ConstRef e1,
    CxxbtVector3ConstRef e2,
    CxxbtVector3ConstRef normal,
    CxxbtVector4Ref plane
    ) = "Bullet2_bt_edge_plane_7fbc83119715229cc507b7d753752552";

/// Calc a plane from a triangle edge an a normal. plane is a vec4f

bt_edge_plane(
    in
    btVector3
    e1
    
    ,
    in
    btVector3
    e2
    
    ,
    in
    btVector3
    normal
    
    ,
    io
    btVector4
    plane
    
    
    )
{
    
    CxxbtVector3ConstRef e1__cxx = Make_CxxbtVector3ConstRef(e1);
    
    CxxbtVector3ConstRef e2__cxx = Make_CxxbtVector3ConstRef(e2);
    
    CxxbtVector3ConstRef normal__cxx = Make_CxxbtVector3ConstRef(normal);
    
    CxxbtVector4Ref plane__cxx = Make_CxxbtVector4Ref(plane);
    
    Cxxbt_edge_plane(
        e1__cxx,
        e2__cxx,
        normal__cxx,
        plane__cxx
        );
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_closest_point_on_segment] C++[bt_closest_point_on_segment]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/*! Finds the closest point(cp) to (v) on a segment (e1,e2)
 */
/// \dfgPresetOmit
/// \internal

Cxxbt_closest_point_on_segment(
    CxxbtVector3Ref cp,
    CxxbtVector3ConstRef v,
    CxxbtVector3ConstRef e1,
    CxxbtVector3ConstRef e2
    ) = "Bullet2_bt_closest_point_on_segment_14ca7f1027056483f879dbbf2651d3fe";

/*! Finds the closest point(cp) to (v) on a segment (e1,e2)
 */

bt_closest_point_on_segment(
    io
    btVector3
    cp
    
    ,
    in
    btVector3
    v
    
    ,
    in
    btVector3
    e1
    
    ,
    in
    btVector3
    e2
    
    
    )
{
    
    CxxbtVector3Ref cp__cxx = Make_CxxbtVector3Ref(cp);
    
    CxxbtVector3ConstRef v__cxx = Make_CxxbtVector3ConstRef(v);
    
    CxxbtVector3ConstRef e1__cxx = Make_CxxbtVector3ConstRef(e1);
    
    CxxbtVector3ConstRef e2__cxx = Make_CxxbtVector3ConstRef(e2);
    
    Cxxbt_closest_point_on_segment(
        cp__cxx,
        v__cxx,
        e1__cxx,
        e2__cxx
        );
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_line_plane_collision] C++[bt_line_plane_collision]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//! line plane collision
// /*!
// *\return
// -0  if the ray never intersects
// -1 if the ray collides in front
// -2 if the ray collides in back
// */
/// \dfgPresetOmit
/// \internal
SInt32
Cxxbt_line_plane_collision(
    CxxbtVector4ConstRef plane,
    CxxbtVector3ConstRef vDir,
    CxxbtVector3ConstRef vPoint,
    CxxbtVector3Ref pout,
    CxxFloat32Ref tparam,
    Float32 tmin,
    Float32 tmax
    ) = "Bullet2_bt_line_plane_collision_01407f5c29152e73194361d6a67e7045";

//! line plane collision
// /*!
// *\return
// -0  if the ray never intersects
// -1 if the ray collides in front
// -2 if the ray collides in back
// */
SInt32
bt_line_plane_collision(
    in
    btVector4
    plane
    
    ,
    in
    btVector3
    vDir
    
    ,
    in
    btVector3
    vPoint
    
    ,
    io
    btVector3
    pout
    
    ,
    io
    Float32
    tparam
    
    ,
    in
    Float32
    tmin
    
    ,
    in
    Float32
    tmax
    
    
    )
{
    
    CxxbtVector4ConstRef plane__cxx = Make_CxxbtVector4ConstRef(plane);
    
    CxxbtVector3ConstRef vDir__cxx = Make_CxxbtVector3ConstRef(vDir);
    
    CxxbtVector3ConstRef vPoint__cxx = Make_CxxbtVector3ConstRef(vPoint);
    
    CxxbtVector3Ref pout__cxx = Make_CxxbtVector3Ref(pout);
    
    CxxFloat32Ref tparam__cxx = Make_CxxFloat32Ref(tparam);
    
    
    SInt32 __res = 
    Cxxbt_line_plane_collision(
        plane__cxx,
        vDir__cxx,
        vPoint__cxx,
        pout__cxx,
        tparam__cxx,
        tmin,
        tmax
        );
    
    
    
    
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_segment_collision] C++[bt_segment_collision]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//! Find closest points on segments
/// \dfgPresetOmit
/// \internal

Cxxbt_segment_collision(
    CxxbtVector3ConstRef vA1,
    CxxbtVector3ConstRef vA2,
    CxxbtVector3ConstRef vB1,
    CxxbtVector3ConstRef vB2,
    CxxbtVector3Ref vPointA,
    CxxbtVector3Ref vPointB
    ) = "Bullet2_bt_segment_collision_2d199ac12a66f91ea2d91a3f504eae4a";

//! Find closest points on segments

bt_segment_collision(
    in
    btVector3
    vA1
    
    ,
    in
    btVector3
    vA2
    
    ,
    in
    btVector3
    vB1
    
    ,
    in
    btVector3
    vB2
    
    ,
    io
    btVector3
    vPointA
    
    ,
    io
    btVector3
    vPointB
    
    
    )
{
    
    CxxbtVector3ConstRef vA1__cxx = Make_CxxbtVector3ConstRef(vA1);
    
    CxxbtVector3ConstRef vA2__cxx = Make_CxxbtVector3ConstRef(vA2);
    
    CxxbtVector3ConstRef vB1__cxx = Make_CxxbtVector3ConstRef(vB1);
    
    CxxbtVector3ConstRef vB2__cxx = Make_CxxbtVector3ConstRef(vB2);
    
    CxxbtVector3Ref vPointA__cxx = Make_CxxbtVector3Ref(vPointA);
    
    CxxbtVector3Ref vPointB__cxx = Make_CxxbtVector3Ref(vPointB);
    
    Cxxbt_segment_collision(
        vA1__cxx,
        vA2__cxx,
        vB1__cxx,
        vB2__cxx,
        vPointA__cxx,
        vPointB__cxx
        );
    
    
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[gim_inertia_add_transformed] C++[gim_inertia_add_transformed]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
Cxxgim_inertia_add_transformed(
    CxxbtVector3ConstRef source_inertia,
    CxxbtVector3ConstRef added_inertia,
    CxxbtTransformConstRef transform
    ) = "Bullet2_gim_inertia_add_transformed_4e71e19828778eb9ff1eeae5cd0b770a";

btVector3
gim_inertia_add_transformed(
    in
    btVector3
    source_inertia
    
    ,
    in
    btVector3
    added_inertia
    
    ,
    in
    btTransform
    transform
    
    
    )
{
    
    CxxbtVector3ConstRef source_inertia__cxx = Make_CxxbtVector3ConstRef(source_inertia);
    
    CxxbtVector3ConstRef added_inertia__cxx = Make_CxxbtVector3ConstRef(added_inertia);
    
    CxxbtTransformConstRef transform__cxx = Make_CxxbtTransformConstRef(transform);
    btVector3 __res = 
    Cxxgim_inertia_add_transformed(
        source_inertia__cxx,
        added_inertia__cxx,
        transform__cxx
        );
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[gim_get_point_inertia] C++[gim_get_point_inertia]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
Cxxgim_get_point_inertia(
    CxxbtVector3ConstRef point,
    Float32 mass
    ) = "Bullet2_gim_get_point_inertia_55cda15b1b86d8eeba2f40cd95a8cdc3";

btVector3
gim_get_point_inertia(
    in
    btVector3
    point
    
    ,
    in
    Float32
    mass
    
    
    )
{
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    
    btVector3 __res = 
    Cxxgim_get_point_inertia(
        point__cxx,
        mass
        );
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_calc_quantization_parameters] C++[bt_calc_quantization_parameters]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

Cxxbt_calc_quantization_parameters(
    CxxbtVector3Ref outMinBound,
    CxxbtVector3Ref outMaxBound,
    CxxbtVector3Ref bvhQuantization,
    CxxbtVector3ConstRef srcMinBound,
    CxxbtVector3ConstRef srcMaxBound,
    Float32 quantizationMargin
    ) = "Bullet2_bt_calc_quantization_parameters_d40c04eeeb776b1c4a903d781c6fdcc0";


bt_calc_quantization_parameters(
    io
    btVector3
    outMinBound
    
    ,
    io
    btVector3
    outMaxBound
    
    ,
    io
    btVector3
    bvhQuantization
    
    ,
    in
    btVector3
    srcMinBound
    
    ,
    in
    btVector3
    srcMaxBound
    
    ,
    in
    Float32
    quantizationMargin
    
    
    )
{
    
    CxxbtVector3Ref outMinBound__cxx = Make_CxxbtVector3Ref(outMinBound);
    
    CxxbtVector3Ref outMaxBound__cxx = Make_CxxbtVector3Ref(outMaxBound);
    
    CxxbtVector3Ref bvhQuantization__cxx = Make_CxxbtVector3Ref(bvhQuantization);
    
    CxxbtVector3ConstRef srcMinBound__cxx = Make_CxxbtVector3ConstRef(srcMinBound);
    
    CxxbtVector3ConstRef srcMaxBound__cxx = Make_CxxbtVector3ConstRef(srcMaxBound);
    
    
    Cxxbt_calc_quantization_parameters(
        outMinBound__cxx,
        outMaxBound__cxx,
        bvhQuantization__cxx,
        srcMinBound__cxx,
        srcMaxBound__cxx,
        quantizationMargin
        );
    
    
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_quantize_clamp] C++[bt_quantize_clamp]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

Cxxbt_quantize_clamp(
    CxxUInt16Ptr out_,
    CxxbtVector3ConstRef point,
    CxxbtVector3ConstRef min_bound,
    CxxbtVector3ConstRef max_bound,
    CxxbtVector3ConstRef bvhQuantization
    ) = "Bullet2_bt_quantize_clamp_2837a85e5cf0cd7513a97e4f96517173";


bt_quantize_clamp(
    io
    UInt16
    out_
    
    ,
    in
    btVector3
    point
    
    ,
    in
    btVector3
    min_bound
    
    ,
    in
    btVector3
    max_bound
    
    ,
    in
    btVector3
    bvhQuantization
    
    
    )
{
    
    CxxUInt16Ptr out___cxx = Make_CxxUInt16Ptr(out_);
    
    CxxbtVector3ConstRef point__cxx = Make_CxxbtVector3ConstRef(point);
    
    CxxbtVector3ConstRef min_bound__cxx = Make_CxxbtVector3ConstRef(min_bound);
    
    CxxbtVector3ConstRef max_bound__cxx = Make_CxxbtVector3ConstRef(max_bound);
    
    CxxbtVector3ConstRef bvhQuantization__cxx = Make_CxxbtVector3ConstRef(bvhQuantization);
    
    Cxxbt_quantize_clamp(
        out___cxx,
        point__cxx,
        min_bound__cxx,
        max_bound__cxx,
        bvhQuantization__cxx
        );
    
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[bt_unquantize] C++[bt_unquantize]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
Cxxbt_unquantize(
    CxxUInt16ConstPtr vecIn,
    CxxbtVector3ConstRef offset,
    CxxbtVector3ConstRef bvhQuantization
    ) = "Bullet2_bt_unquantize_3857070e536fceaf73a179cdaeb020c0";

btVector3
bt_unquantize(
    in
    UInt16
    vecIn
    
    ,
    in
    btVector3
    offset
    
    ,
    in
    btVector3
    bvhQuantization
    
    
    )
{
    
    CxxUInt16ConstPtr vecIn__cxx = Make_CxxUInt16ConstPtr(vecIn);
    
    CxxbtVector3ConstRef offset__cxx = Make_CxxbtVector3ConstRef(offset);
    
    CxxbtVector3ConstRef bvhQuantization__cxx = Make_CxxbtVector3ConstRef(bvhQuantization);
    btVector3 __res = 
    Cxxbt_unquantize(
        vecIn__cxx,
        offset__cxx,
        bvhQuantization__cxx
        );
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btRigidBody_btRigidBodyConstructionInfo] EDK[Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo] LIB[btRigidBody::btRigidBodyConstructionInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr] EDK[CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr] LIB[btRigidBody::btRigidBodyConstructionInfo const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_mass()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_mass on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_mass();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_mass()
{
    Float32 __res = 
    this.cxx_get_m_mass();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btMotionState CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_motionState()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_motionState on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_motionState();
}

/// \dfgPresetOmit
/// \internal
btMotionState
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_motionState()
{
    btMotionState __res = 
    this.cxx_get_m_motionState();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btTransform CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_startWorldTransform()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_startWorldTransform on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_startWorldTransform();
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_startWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_startWorldTransform();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btCollisionShape CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_collisionShape()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_collisionShape on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_collisionShape();
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_collisionShape()
{
    btCollisionShape __res = 
    this.cxx_get_m_collisionShape();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btVector3 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_localInertia()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_localInertia on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_localInertia();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_localInertia()
{
    btVector3 __res = 
    this.cxx_get_m_localInertia();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_linearDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_linearDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_linearDamping();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_linearDamping()
{
    Float32 __res = 
    this.cxx_get_m_linearDamping();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_angularDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_angularDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_angularDamping();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_angularDamping()
{
    Float32 __res = 
    this.cxx_get_m_angularDamping();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_friction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_friction on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_friction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_friction()
{
    Float32 __res = 
    this.cxx_get_m_friction();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_rollingFriction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_rollingFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_rollingFriction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_rollingFriction()
{
    Float32 __res = 
    this.cxx_get_m_rollingFriction();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_spinningFriction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_spinningFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_spinningFriction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_spinningFriction()
{
    Float32 __res = 
    this.cxx_get_m_spinningFriction();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_restitution()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_restitution on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_restitution();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_restitution()
{
    Float32 __res = 
    this.cxx_get_m_restitution();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_linearSleepingThreshold()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_linearSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_linearSleepingThreshold();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_linearSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_linearSleepingThreshold();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_angularSleepingThreshold()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_angularSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_angularSleepingThreshold();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_angularSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_angularSleepingThreshold();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Boolean CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalDamping();
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_additionalDamping()
{
    Boolean __res = 
    this.cxx_get_m_additionalDamping();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalDampingFactor()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalDampingFactor();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_additionalDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalDampingFactor();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalLinearDampingThresholdSqr()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalLinearDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalLinearDampingThresholdSqr();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_additionalLinearDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalLinearDampingThresholdSqr();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalAngularDampingThresholdSqr()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalAngularDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalAngularDampingThresholdSqr();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_additionalAngularDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingThresholdSqr();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalAngularDampingFactor()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_get_m_additionalAngularDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalAngularDampingFactor();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.get_m_additionalAngularDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingFactor();
    
    return __res;
}



//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtRigidBody_btRigidBodyConstructionInfoPtr] EDK[CxxbtRigidBody_btRigidBodyConstructionInfoMutablePtr] LIB[btRigidBody::btRigidBodyConstructionInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_mass()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_mass on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_mass();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_mass()
{
    Float32 __res = 
    this.cxx_get_m_mass();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_mass!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_mass on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_mass(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_mass!(
    Float32 value
   )
{
    
    this.cxx_set_m_mass(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btMotionState CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_motionState()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_motionState on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_motionState();
}

/// \dfgPresetOmit
/// \internal
btMotionState
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_motionState()
{
    btMotionState __res = 
    this.cxx_get_m_motionState();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_motionState!(btMotionState value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_motionState on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_motionState(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_motionState!(
    btMotionState value
   )
{
    
    this.cxx_set_m_motionState(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btTransform CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_startWorldTransform()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_startWorldTransform on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_startWorldTransform();
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_startWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_startWorldTransform();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_startWorldTransform!(btTransform value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_startWorldTransform on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_startWorldTransform(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_startWorldTransform!(
    btTransform value
   )
{
    
    this.cxx_set_m_startWorldTransform(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btCollisionShape CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_collisionShape()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_collisionShape on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_collisionShape();
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_collisionShape()
{
    btCollisionShape __res = 
    this.cxx_get_m_collisionShape();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_collisionShape!(btCollisionShape value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_collisionShape on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_collisionShape(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_collisionShape!(
    btCollisionShape value
   )
{
    
    this.cxx_set_m_collisionShape(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btVector3 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_localInertia()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_localInertia on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_localInertia();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_localInertia()
{
    btVector3 __res = 
    this.cxx_get_m_localInertia();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_localInertia!(btVector3 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_localInertia on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_localInertia(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_localInertia!(
    btVector3 value
   )
{
    
    this.cxx_set_m_localInertia(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_linearDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_linearDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_linearDamping();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_linearDamping()
{
    Float32 __res = 
    this.cxx_get_m_linearDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_linearDamping!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_linearDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_linearDamping(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_linearDamping!(
    Float32 value
   )
{
    
    this.cxx_set_m_linearDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_angularDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_angularDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_angularDamping();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_angularDamping()
{
    Float32 __res = 
    this.cxx_get_m_angularDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_angularDamping!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_angularDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_angularDamping(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_angularDamping!(
    Float32 value
   )
{
    
    this.cxx_set_m_angularDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_friction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_friction on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_friction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_friction()
{
    Float32 __res = 
    this.cxx_get_m_friction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_friction!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_friction on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_friction(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_friction!(
    Float32 value
   )
{
    
    this.cxx_set_m_friction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_rollingFriction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_rollingFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_rollingFriction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_rollingFriction()
{
    Float32 __res = 
    this.cxx_get_m_rollingFriction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_rollingFriction!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_rollingFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_rollingFriction(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_rollingFriction!(
    Float32 value
   )
{
    
    this.cxx_set_m_rollingFriction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_spinningFriction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_spinningFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_spinningFriction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_spinningFriction()
{
    Float32 __res = 
    this.cxx_get_m_spinningFriction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_spinningFriction!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_spinningFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_spinningFriction(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_spinningFriction!(
    Float32 value
   )
{
    
    this.cxx_set_m_spinningFriction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_restitution()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_restitution on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_restitution();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_restitution()
{
    Float32 __res = 
    this.cxx_get_m_restitution();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_restitution!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_restitution on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_restitution(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_restitution!(
    Float32 value
   )
{
    
    this.cxx_set_m_restitution(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_linearSleepingThreshold()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_linearSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_linearSleepingThreshold();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_linearSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_linearSleepingThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_linearSleepingThreshold!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_linearSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_linearSleepingThreshold(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_linearSleepingThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_linearSleepingThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_angularSleepingThreshold()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_angularSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_angularSleepingThreshold();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_angularSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_angularSleepingThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_angularSleepingThreshold!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_angularSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_angularSleepingThreshold(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_angularSleepingThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_angularSleepingThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Boolean CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalDamping();
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_additionalDamping()
{
    Boolean __res = 
    this.cxx_get_m_additionalDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalDamping!(Boolean value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalDamping(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_additionalDamping!(
    Boolean value
   )
{
    
    this.cxx_set_m_additionalDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalDampingFactor()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalDampingFactor();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_additionalDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalDampingFactor();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalDampingFactor!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalDampingFactor(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_additionalDampingFactor!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalDampingFactor(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalLinearDampingThresholdSqr()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalLinearDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalLinearDampingThresholdSqr();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_additionalLinearDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalLinearDampingThresholdSqr();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalLinearDampingThresholdSqr!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalLinearDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalLinearDampingThresholdSqr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_additionalLinearDampingThresholdSqr!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalLinearDampingThresholdSqr(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalAngularDampingThresholdSqr()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalAngularDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalAngularDampingThresholdSqr();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_additionalAngularDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingThresholdSqr();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalAngularDampingThresholdSqr!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalAngularDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalAngularDampingThresholdSqr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_additionalAngularDampingThresholdSqr!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalAngularDampingThresholdSqr(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalAngularDampingFactor()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_get_m_additionalAngularDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalAngularDampingFactor();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.get_m_additionalAngularDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingFactor();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalAngularDampingFactor!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_set_m_additionalAngularDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalAngularDampingFactor(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.set_m_additionalAngularDampingFactor!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalAngularDampingFactor(
        value
        );
    
}



//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtRigidBody_btRigidBodyConstructionInfoConstRef] EDK[CxxbtRigidBody_btRigidBodyConstructionInfoConstRef] LIB[btRigidBody::btRigidBodyConstructionInfo const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_mass()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_mass on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_mass();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_mass()
{
    Float32 __res = 
    this.cxx_get_m_mass();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btMotionState CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_motionState()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_motionState on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_motionState();
}

/// \dfgPresetOmit
/// \internal
btMotionState
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_motionState()
{
    btMotionState __res = 
    this.cxx_get_m_motionState();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btTransform CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_startWorldTransform()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_startWorldTransform on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_startWorldTransform();
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_startWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_startWorldTransform();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btCollisionShape CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_collisionShape()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_collisionShape on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_collisionShape();
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_collisionShape()
{
    btCollisionShape __res = 
    this.cxx_get_m_collisionShape();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btVector3 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_localInertia()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_localInertia on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_localInertia();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_localInertia()
{
    btVector3 __res = 
    this.cxx_get_m_localInertia();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_linearDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_linearDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_linearDamping();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_linearDamping()
{
    Float32 __res = 
    this.cxx_get_m_linearDamping();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_angularDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_angularDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_angularDamping();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_angularDamping()
{
    Float32 __res = 
    this.cxx_get_m_angularDamping();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_friction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_friction on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_friction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_friction()
{
    Float32 __res = 
    this.cxx_get_m_friction();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_rollingFriction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_rollingFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_rollingFriction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_rollingFriction()
{
    Float32 __res = 
    this.cxx_get_m_rollingFriction();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_spinningFriction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_spinningFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_spinningFriction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_spinningFriction()
{
    Float32 __res = 
    this.cxx_get_m_spinningFriction();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_restitution()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_restitution on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_restitution();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_restitution()
{
    Float32 __res = 
    this.cxx_get_m_restitution();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_linearSleepingThreshold()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_linearSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_linearSleepingThreshold();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_linearSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_linearSleepingThreshold();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_angularSleepingThreshold()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_angularSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_angularSleepingThreshold();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_angularSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_angularSleepingThreshold();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Boolean CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalDamping();
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_additionalDamping()
{
    Boolean __res = 
    this.cxx_get_m_additionalDamping();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalDampingFactor()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalDampingFactor();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_additionalDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalDampingFactor();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalLinearDampingThresholdSqr()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalLinearDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalLinearDampingThresholdSqr();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_additionalLinearDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalLinearDampingThresholdSqr();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalAngularDampingThresholdSqr()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalAngularDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalAngularDampingThresholdSqr();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_additionalAngularDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingThresholdSqr();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalAngularDampingFactor()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get_m_additionalAngularDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalAngularDampingFactor();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.get_m_additionalAngularDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingFactor();
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtRigidBody_btRigidBodyConstructionInfoConstRef] EDK[CxxbtRigidBody_btRigidBodyConstructionInfoConstRef] LIB[btRigidBody::btRigidBodyConstructionInfo const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtRigidBody_btRigidBodyConstructionInfoRef] EDK[CxxbtRigidBody_btRigidBodyConstructionInfoMutableRef] LIB[btRigidBody::btRigidBodyConstructionInfo &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_mass()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_mass on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_mass();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_mass()
{
    Float32 __res = 
    this.cxx_get_m_mass();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_mass!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_mass on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_mass(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_mass!(
    Float32 value
   )
{
    
    this.cxx_set_m_mass(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btMotionState CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_motionState()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_motionState on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_motionState();
}

/// \dfgPresetOmit
/// \internal
btMotionState
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_motionState()
{
    btMotionState __res = 
    this.cxx_get_m_motionState();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_motionState!(btMotionState value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_motionState on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_motionState(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_motionState!(
    btMotionState value
   )
{
    
    this.cxx_set_m_motionState(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btTransform CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_startWorldTransform()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_startWorldTransform on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_startWorldTransform();
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_startWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_startWorldTransform();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_startWorldTransform!(btTransform value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_startWorldTransform on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_startWorldTransform(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_startWorldTransform!(
    btTransform value
   )
{
    
    this.cxx_set_m_startWorldTransform(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btCollisionShape CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_collisionShape()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_collisionShape on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_collisionShape();
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_collisionShape()
{
    btCollisionShape __res = 
    this.cxx_get_m_collisionShape();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_collisionShape!(btCollisionShape value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_collisionShape on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_collisionShape(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_collisionShape!(
    btCollisionShape value
   )
{
    
    this.cxx_set_m_collisionShape(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btVector3 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_localInertia()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_localInertia on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_localInertia();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_localInertia()
{
    btVector3 __res = 
    this.cxx_get_m_localInertia();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_localInertia!(btVector3 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_localInertia on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_localInertia(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_localInertia!(
    btVector3 value
   )
{
    
    this.cxx_set_m_localInertia(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_linearDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_linearDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_linearDamping();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_linearDamping()
{
    Float32 __res = 
    this.cxx_get_m_linearDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_linearDamping!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_linearDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_linearDamping(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_linearDamping!(
    Float32 value
   )
{
    
    this.cxx_set_m_linearDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_angularDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_angularDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_angularDamping();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_angularDamping()
{
    Float32 __res = 
    this.cxx_get_m_angularDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_angularDamping!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_angularDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_angularDamping(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_angularDamping!(
    Float32 value
   )
{
    
    this.cxx_set_m_angularDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_friction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_friction on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_friction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_friction()
{
    Float32 __res = 
    this.cxx_get_m_friction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_friction!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_friction on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_friction(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_friction!(
    Float32 value
   )
{
    
    this.cxx_set_m_friction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_rollingFriction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_rollingFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_rollingFriction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_rollingFriction()
{
    Float32 __res = 
    this.cxx_get_m_rollingFriction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_rollingFriction!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_rollingFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_rollingFriction(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_rollingFriction!(
    Float32 value
   )
{
    
    this.cxx_set_m_rollingFriction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_spinningFriction()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_spinningFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_spinningFriction();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_spinningFriction()
{
    Float32 __res = 
    this.cxx_get_m_spinningFriction();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_spinningFriction!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_spinningFriction on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_spinningFriction(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_spinningFriction!(
    Float32 value
   )
{
    
    this.cxx_set_m_spinningFriction(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_restitution()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_restitution on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_restitution();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_restitution()
{
    Float32 __res = 
    this.cxx_get_m_restitution();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_restitution!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_restitution on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_restitution(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_restitution!(
    Float32 value
   )
{
    
    this.cxx_set_m_restitution(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_linearSleepingThreshold()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_linearSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_linearSleepingThreshold();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_linearSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_linearSleepingThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_linearSleepingThreshold!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_linearSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_linearSleepingThreshold(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_linearSleepingThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_linearSleepingThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_angularSleepingThreshold()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_angularSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_angularSleepingThreshold();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_angularSleepingThreshold()
{
    Float32 __res = 
    this.cxx_get_m_angularSleepingThreshold();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_angularSleepingThreshold!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_angularSleepingThreshold on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_angularSleepingThreshold(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_angularSleepingThreshold!(
    Float32 value
   )
{
    
    this.cxx_set_m_angularSleepingThreshold(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Boolean CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalDamping()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalDamping();
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_additionalDamping()
{
    Boolean __res = 
    this.cxx_get_m_additionalDamping();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalDamping!(Boolean value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalDamping on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalDamping(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_additionalDamping!(
    Boolean value
   )
{
    
    this.cxx_set_m_additionalDamping(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalDampingFactor()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalDampingFactor();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_additionalDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalDampingFactor();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalDampingFactor!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalDampingFactor(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_additionalDampingFactor!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalDampingFactor(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalLinearDampingThresholdSqr()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalLinearDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalLinearDampingThresholdSqr();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_additionalLinearDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalLinearDampingThresholdSqr();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalLinearDampingThresholdSqr!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalLinearDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalLinearDampingThresholdSqr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_additionalLinearDampingThresholdSqr!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalLinearDampingThresholdSqr(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalAngularDampingThresholdSqr()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalAngularDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalAngularDampingThresholdSqr();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_additionalAngularDampingThresholdSqr()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingThresholdSqr();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalAngularDampingThresholdSqr!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalAngularDampingThresholdSqr on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalAngularDampingThresholdSqr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_additionalAngularDampingThresholdSqr!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalAngularDampingThresholdSqr(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalAngularDampingFactor()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_get_m_additionalAngularDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_get_m_additionalAngularDampingFactor();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtRigidBody_btRigidBodyConstructionInfoRef.get_m_additionalAngularDampingFactor()
{
    Float32 __res = 
    this.cxx_get_m_additionalAngularDampingFactor();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalAngularDampingFactor!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set_m_additionalAngularDampingFactor on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
    this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo }.cxx_set_m_additionalAngularDampingFactor(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.set_m_additionalAngularDampingFactor!(
    Float32 value
   )
{
    
    this.cxx_set_m_additionalAngularDampingFactor(
        value
        );
    
}




////////////////////////////////////////////////////////////////////////
// CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr
// CxxbtRigidBody_btRigidBodyConstructionInfoPtr
// CxxbtRigidBody_btRigidBodyConstructionInfoConstRef
// CxxbtRigidBody_btRigidBodyConstructionInfoRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr(btRigidBody_btRigidBodyConstructionInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr(btRigidBody_btRigidBodyConstructionInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr(btRigidBody_btRigidBodyConstructionInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr Make_CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr(btRigidBody_btRigidBodyConstructionInfo value) {
  return CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr(btRigidBody_btRigidBodyConstructionInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr(btRigidBody_btRigidBodyConstructionInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr(btRigidBody_btRigidBodyConstructionInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr Make_CxxbtRigidBody_btRigidBodyConstructionInfoPtr(btRigidBody_btRigidBodyConstructionInfo value) {
  return CxxbtRigidBody_btRigidBodyConstructionInfoPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(btRigidBody_btRigidBodyConstructionInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(btRigidBody_btRigidBodyConstructionInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(btRigidBody_btRigidBodyConstructionInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef Make_CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(btRigidBody_btRigidBodyConstructionInfo value) {
  return CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef(btRigidBody_btRigidBodyConstructionInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef(btRigidBody_btRigidBodyConstructionInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef(btRigidBody_btRigidBodyConstructionInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef Make_CxxbtRigidBody_btRigidBodyConstructionInfoRef(btRigidBody_btRigidBodyConstructionInfo value) {
  return CxxbtRigidBody_btRigidBodyConstructionInfoRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_getAt on null CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr";
  return CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_getAt on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
  return CxxbtRigidBody_btRigidBodyConstructionInfoRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btRigidBody_btRigidBodyConstructionInfo()));
}

/// Same as for CxxbtRigidBody_btRigidBodyConstructionInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_setAt(Index i, btRigidBody_btRigidBodyConstructionInfo v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoPtr.cxx_setAt on null CxxbtRigidBody_btRigidBodyConstructionInfoPtr";
  this.ptr.offset(i)->{ btRigidBody_btRigidBodyConstructionInfo } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef(CxxbtRigidBody_btRigidBodyConstructionInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.=(CxxbtRigidBody_btRigidBodyConstructionInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btRigidBody_btRigidBodyConstructionInfo value
/// \dfgPresetOmit
/// \internal
btRigidBody_btRigidBodyConstructionInfo CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.cxx_get on null CxxbtRigidBody_btRigidBodyConstructionInfoConstRef";
  return this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set(btRigidBody_btRigidBodyConstructionInfo value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtRigidBody_btRigidBodyConstructionInfoRef.cxx_set on null CxxbtRigidBody_btRigidBodyConstructionInfoRef";
  this.ptr.data()->{ btRigidBody_btRigidBodyConstructionInfo } = value;
}

/// Assignment of btRigidBody_btRigidBodyConstructionInfo
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.=(btRigidBody_btRigidBodyConstructionInfo value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtRigidBody_btRigidBodyConstructionInfoRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btAdjustAngleToLimits] C++[btAdjustAngleToLimits]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtAdjustAngleToLimits(
    Float32 angleInRadians,
    Float32 angleLowerLimitInRadians,
    Float32 angleUpperLimitInRadians
    ) = "Bullet2_btAdjustAngleToLimits_7d7521dcf12fdc1a0ea3de0da22fd199";

Float32
btAdjustAngleToLimits(
    in
    Float32
    angleInRadians
    
    ,
    in
    Float32
    angleLowerLimitInRadians
    
    ,
    in
    Float32
    angleUpperLimitInRadians
    
    
    )
{
    
    
    
    Float32 __res = 
    CxxbtAdjustAngleToLimits(
        angleInRadians,
        angleLowerLimitInRadians,
        angleUpperLimitInRadians
        );
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[resolveSingleCollision] C++[resolveSingleCollision]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

///very basic collision resolution without friction
/// \dfgPresetOmit
/// \internal
Float32
CxxresolveSingleCollision(
    btRigidBody body1,
    btCollisionObject colObj2,
    CxxbtVector3ConstRef contactPositionWorld,
    CxxbtVector3ConstRef contactNormalOnB,
    btContactSolverInfo solverInfo,
    Float32 distance
    ) = "Bullet2_resolveSingleCollision_089fcc0a2f019b4d5d6c68a4c1834495";

///very basic collision resolution without friction
Float32
resolveSingleCollision(
    in
    btRigidBody
    body1
    
    ,
    in
    btCollisionObject
    colObj2
    
    ,
    in
    btVector3
    contactPositionWorld
    
    ,
    in
    btVector3
    contactNormalOnB
    
    ,
    in
    btContactSolverInfo
    solverInfo
    
    ,
    in
    Float32
    distance
    
    
    )
{
    
    
    
    CxxbtVector3ConstRef contactPositionWorld__cxx = Make_CxxbtVector3ConstRef(contactPositionWorld);
    
    CxxbtVector3ConstRef contactNormalOnB__cxx = Make_CxxbtVector3ConstRef(contactNormalOnB);
    
    
    Float32 __res = 
    CxxresolveSingleCollision(
        body1,
        colObj2,
        contactPositionWorld__cxx,
        contactNormalOnB__cxx,
        solverInfo,
        distance
        );
    
    
    
    
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[resolveSingleBilateral] C++[resolveSingleBilateral]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

///resolveSingleBilateral is an obsolete methods used for vehicle friction between two dynamic objects
/// \dfgPresetOmit
/// \internal

CxxresolveSingleBilateral(
    btRigidBody body1,
    CxxbtVector3ConstRef pos1,
    btRigidBody body2,
    CxxbtVector3ConstRef pos2,
    Float32 distance,
    CxxbtVector3ConstRef normal,
    CxxFloat32Ref impulse,
    Float32 timeStep
    ) = "Bullet2_resolveSingleBilateral_531d4a7f46417cde9faf52e3f57da72b";

///resolveSingleBilateral is an obsolete methods used for vehicle friction between two dynamic objects

resolveSingleBilateral(
    in
    btRigidBody
    body1
    
    ,
    in
    btVector3
    pos1
    
    ,
    in
    btRigidBody
    body2
    
    ,
    in
    btVector3
    pos2
    
    ,
    in
    Float32
    distance
    
    ,
    in
    btVector3
    normal
    
    ,
    io
    Float32
    impulse
    
    ,
    in
    Float32
    timeStep
    
    
    )
{
    
    
    CxxbtVector3ConstRef pos1__cxx = Make_CxxbtVector3ConstRef(pos1);
    
    
    CxxbtVector3ConstRef pos2__cxx = Make_CxxbtVector3ConstRef(pos2);
    
    
    CxxbtVector3ConstRef normal__cxx = Make_CxxbtVector3ConstRef(normal);
    
    CxxFloat32Ref impulse__cxx = Make_CxxFloat32Ref(impulse);
    
    
    CxxresolveSingleBilateral(
        body1,
        pos1__cxx,
        body2,
        pos2__cxx,
        distance,
        normal__cxx,
        impulse__cxx,
        timeStep
        );
    
    
    
    
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfo] EDK[Fabric_EDK_KL_btWheelInfo] LIB[btWheelInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstPtr] EDK[CxxbtWheelInfoConstPtr] LIB[btWheelInfo const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstPtr] EDK[CxxbtWheelInfoConstPtr] LIB[btWheelInfo const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtWheelInfoConstPtr.cxx_getSuspensionRestLength?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtWheelInfoConstPtr.cxx_getSuspensionRestLength on null CxxbtWheelInfoConstPtr";
    return
    this.ptr.data()->{ btWheelInfo }.cxx_getSuspensionRestLength(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtWheelInfoConstPtr.getSuspensionRestLength?(
    )
{   
    Float32 __res = 
    this.cxx_getSuspensionRestLength(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoPtr] EDK[CxxbtWheelInfoMutablePtr] LIB[btWheelInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoPtr] EDK[CxxbtWheelInfoMutablePtr] LIB[btWheelInfo *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtWheelInfoPtr.cxx_getSuspensionRestLength?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtWheelInfoPtr.cxx_getSuspensionRestLength on null CxxbtWheelInfoPtr";
    return
    this.ptr.data()->{ btWheelInfo }.cxx_getSuspensionRestLength(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtWheelInfoPtr.cxx_updateWheel!(
    btRigidBody chassis,
    CxxbtWheelInfo_RaycastInfoRef raycastInfo
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtWheelInfoPtr.cxx_updateWheel on null CxxbtWheelInfoPtr";
    
    this.ptr.data()->{ btWheelInfo }.cxx_updateWheel(
        chassis,
        raycastInfo
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtWheelInfoPtr.updateWheel!(
    in
    btRigidBody
    chassis
    
    ,
    io
    btWheelInfo_RaycastInfo
    raycastInfo
    
    
    )
{   
    
    
    CxxbtWheelInfo_RaycastInfoRef raycastInfo__cxx = Make_CxxbtWheelInfo_RaycastInfoRef(raycastInfo);
    
    this.cxx_updateWheel(
        chassis,
        raycastInfo__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtWheelInfoPtr.getSuspensionRestLength?(
    )
{   
    Float32 __res = 
    this.cxx_getSuspensionRestLength(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstRef] EDK[CxxbtWheelInfoConstRef] LIB[btWheelInfo const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstRef] EDK[CxxbtWheelInfoConstRef] LIB[btWheelInfo const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstRef] EDK[CxxbtWheelInfoConstRef] LIB[btWheelInfo const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtWheelInfoConstRef.cxx_getSuspensionRestLength?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtWheelInfoConstRef.cxx_getSuspensionRestLength on null CxxbtWheelInfoConstRef";
    return
    this.ptr.data()->{ btWheelInfo }.cxx_getSuspensionRestLength(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtWheelInfoConstRef.getSuspensionRestLength?(
    )
{   
    Float32 __res = 
    this.cxx_getSuspensionRestLength(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoRef] EDK[CxxbtWheelInfoMutableRef] LIB[btWheelInfo &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoRef] EDK[CxxbtWheelInfoMutableRef] LIB[btWheelInfo &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Float32
CxxbtWheelInfoRef.cxx_getSuspensionRestLength?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtWheelInfoRef.cxx_getSuspensionRestLength on null CxxbtWheelInfoRef";
    return
    this.ptr.data()->{ btWheelInfo }.cxx_getSuspensionRestLength(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtWheelInfoRef.cxx_updateWheel!(
    btRigidBody chassis,
    CxxbtWheelInfo_RaycastInfoRef raycastInfo
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtWheelInfoRef.cxx_updateWheel on null CxxbtWheelInfoRef";
    
    this.ptr.data()->{ btWheelInfo }.cxx_updateWheel(
        chassis,
        raycastInfo
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtWheelInfoRef.getSuspensionRestLength?(
    )
{   
    Float32 __res = 
    this.cxx_getSuspensionRestLength(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtWheelInfoRef.updateWheel!(
    in
    btRigidBody
    chassis
    
    ,
    io
    btWheelInfo_RaycastInfo
    raycastInfo
    
    
    )
{   
    
    
    CxxbtWheelInfo_RaycastInfoRef raycastInfo__cxx = Make_CxxbtWheelInfo_RaycastInfoRef(raycastInfo);
    
    this.cxx_updateWheel(
        chassis,
        raycastInfo__cxx
        );
    
    
    
    
}



////////////////////////////////////////////////////////////////////////
// CxxbtWheelInfoConstPtr
// CxxbtWheelInfoPtr
// CxxbtWheelInfoConstRef
// CxxbtWheelInfoRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstPtr(btWheelInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstPtr(btWheelInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstPtr(btWheelInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstPtr Make_CxxbtWheelInfoConstPtr(btWheelInfo value) {
  return CxxbtWheelInfoConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoPtr(btWheelInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoPtr(btWheelInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoPtr(btWheelInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoPtr Make_CxxbtWheelInfoPtr(btWheelInfo value) {
  return CxxbtWheelInfoPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef(btWheelInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef(btWheelInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef(btWheelInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef Make_CxxbtWheelInfoConstRef(btWheelInfo value) {
  return CxxbtWheelInfoConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef(btWheelInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef(btWheelInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef(btWheelInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef Make_CxxbtWheelInfoRef(btWheelInfo value) {
  return CxxbtWheelInfoRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtWheelInfoConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtWheelInfoConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtWheelInfoConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef CxxbtWheelInfoConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoConstPtr.cxx_getAt on null CxxbtWheelInfoConstPtr";
  return CxxbtWheelInfoConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef CxxbtWheelInfoConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtWheelInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef CxxbtWheelInfoPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoPtr.cxx_getAt on null CxxbtWheelInfoPtr";
  return CxxbtWheelInfoRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo()));
}

/// Same as for CxxbtWheelInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef CxxbtWheelInfoPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoPtr.cxx_setAt(Index i, btWheelInfo v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoPtr.cxx_setAt on null CxxbtWheelInfoPtr";
  this.ptr.offset(i)->{ btWheelInfo } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef(CxxbtWheelInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef.=(CxxbtWheelInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btWheelInfo value
/// \dfgPresetOmit
/// \internal
btWheelInfo CxxbtWheelInfoConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoConstRef.cxx_get on null CxxbtWheelInfoConstRef";
  return this.ptr.data()->{ btWheelInfo };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef.cxx_set(btWheelInfo value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoRef.cxx_set on null CxxbtWheelInfoRef";
  this.ptr.data()->{ btWheelInfo } = value;
}

/// Assignment of btWheelInfo
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef.=(btWheelInfo value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfoConstructionInfo] EDK[Fabric_EDK_KL_btWheelInfoConstructionInfo] LIB[btWheelInfoConstructionInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstructionInfoConstPtr] EDK[CxxbtWheelInfoConstructionInfoConstPtr] LIB[btWheelInfoConstructionInfo const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstructionInfoPtr] EDK[CxxbtWheelInfoConstructionInfoMutablePtr] LIB[btWheelInfoConstructionInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstructionInfoConstRef] EDK[CxxbtWheelInfoConstructionInfoConstRef] LIB[btWheelInfoConstructionInfo const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstructionInfoConstRef] EDK[CxxbtWheelInfoConstructionInfoConstRef] LIB[btWheelInfoConstructionInfo const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfoConstructionInfoRef] EDK[CxxbtWheelInfoConstructionInfoMutableRef] LIB[btWheelInfoConstructionInfo &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////
// CxxbtWheelInfoConstructionInfoConstPtr
// CxxbtWheelInfoConstructionInfoPtr
// CxxbtWheelInfoConstructionInfoConstRef
// CxxbtWheelInfoConstructionInfoRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstPtr(btWheelInfoConstructionInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstPtr(btWheelInfoConstructionInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfoConstructionInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstPtr(btWheelInfoConstructionInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstPtr Make_CxxbtWheelInfoConstructionInfoConstPtr(btWheelInfoConstructionInfo value) {
  return CxxbtWheelInfoConstructionInfoConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoPtr(btWheelInfoConstructionInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoPtr(btWheelInfoConstructionInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfoConstructionInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoPtr(btWheelInfoConstructionInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoPtr Make_CxxbtWheelInfoConstructionInfoPtr(btWheelInfoConstructionInfo value) {
  return CxxbtWheelInfoConstructionInfoPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef(btWheelInfoConstructionInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef(btWheelInfoConstructionInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfoConstructionInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef(btWheelInfoConstructionInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef Make_CxxbtWheelInfoConstructionInfoConstRef(btWheelInfoConstructionInfo value) {
  return CxxbtWheelInfoConstructionInfoConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef(btWheelInfoConstructionInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef(btWheelInfoConstructionInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfoConstructionInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef(btWheelInfoConstructionInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef Make_CxxbtWheelInfoConstructionInfoRef(btWheelInfoConstructionInfo value) {
  return CxxbtWheelInfoConstructionInfoRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtWheelInfoConstructionInfoConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtWheelInfoConstructionInfoConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtWheelInfoConstructionInfoConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef CxxbtWheelInfoConstructionInfoConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoConstructionInfoConstPtr.cxx_getAt on null CxxbtWheelInfoConstructionInfoConstPtr";
  return CxxbtWheelInfoConstructionInfoConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfoConstructionInfo()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef CxxbtWheelInfoConstructionInfoConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtWheelInfoConstructionInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef CxxbtWheelInfoConstructionInfoPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoConstructionInfoPtr.cxx_getAt on null CxxbtWheelInfoConstructionInfoPtr";
  return CxxbtWheelInfoConstructionInfoRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfoConstructionInfo()));
}

/// Same as for CxxbtWheelInfoConstructionInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef CxxbtWheelInfoConstructionInfoPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoPtr.cxx_setAt(Index i, btWheelInfoConstructionInfo v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoConstructionInfoPtr.cxx_setAt on null CxxbtWheelInfoConstructionInfoPtr";
  this.ptr.offset(i)->{ btWheelInfoConstructionInfo } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef(CxxbtWheelInfoConstructionInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef.=(CxxbtWheelInfoConstructionInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btWheelInfoConstructionInfo value
/// \dfgPresetOmit
/// \internal
btWheelInfoConstructionInfo CxxbtWheelInfoConstructionInfoConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoConstructionInfoConstRef.cxx_get on null CxxbtWheelInfoConstructionInfoConstRef";
  return this.ptr.data()->{ btWheelInfoConstructionInfo };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef.cxx_set(btWheelInfoConstructionInfo value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfoConstructionInfoRef.cxx_set on null CxxbtWheelInfoConstructionInfoRef";
  this.ptr.data()->{ btWheelInfoConstructionInfo } = value;
}

/// Assignment of btWheelInfoConstructionInfo
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef.=(btWheelInfoConstructionInfo value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfoConstructionInfoRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btWheelInfo_RaycastInfo] EDK[Fabric_EDK_KL_btWheelInfo_RaycastInfo] LIB[btWheelInfo::RaycastInfo]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfo_RaycastInfoConstPtr] EDK[CxxbtWheelInfo_RaycastInfoConstPtr] LIB[btWheelInfo::RaycastInfo const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfo_RaycastInfoPtr] EDK[CxxbtWheelInfo_RaycastInfoMutablePtr] LIB[btWheelInfo::RaycastInfo *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfo_RaycastInfoConstRef] EDK[CxxbtWheelInfo_RaycastInfoConstRef] LIB[btWheelInfo::RaycastInfo const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfo_RaycastInfoConstRef] EDK[CxxbtWheelInfo_RaycastInfoConstRef] LIB[btWheelInfo::RaycastInfo const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtWheelInfo_RaycastInfoRef] EDK[CxxbtWheelInfo_RaycastInfoMutableRef] LIB[btWheelInfo::RaycastInfo &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////
// CxxbtWheelInfo_RaycastInfoConstPtr
// CxxbtWheelInfo_RaycastInfoPtr
// CxxbtWheelInfo_RaycastInfoConstRef
// CxxbtWheelInfo_RaycastInfoRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstPtr(btWheelInfo_RaycastInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstPtr(btWheelInfo_RaycastInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo_RaycastInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstPtr(btWheelInfo_RaycastInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstPtr Make_CxxbtWheelInfo_RaycastInfoConstPtr(btWheelInfo_RaycastInfo value) {
  return CxxbtWheelInfo_RaycastInfoConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoPtr(btWheelInfo_RaycastInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoPtr(btWheelInfo_RaycastInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo_RaycastInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoPtr(btWheelInfo_RaycastInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoPtr Make_CxxbtWheelInfo_RaycastInfoPtr(btWheelInfo_RaycastInfo value) {
  return CxxbtWheelInfo_RaycastInfoPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef(btWheelInfo_RaycastInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef(btWheelInfo_RaycastInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo_RaycastInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef(btWheelInfo_RaycastInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef Make_CxxbtWheelInfo_RaycastInfoConstRef(btWheelInfo_RaycastInfo value) {
  return CxxbtWheelInfo_RaycastInfoConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef(btWheelInfo_RaycastInfo array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef(btWheelInfo_RaycastInfo array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo_RaycastInfo());
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef(btWheelInfo_RaycastInfo value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef Make_CxxbtWheelInfo_RaycastInfoRef(btWheelInfo_RaycastInfo value) {
  return CxxbtWheelInfo_RaycastInfoRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtWheelInfo_RaycastInfoConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtWheelInfo_RaycastInfoConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtWheelInfo_RaycastInfoConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef CxxbtWheelInfo_RaycastInfoConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfo_RaycastInfoConstPtr.cxx_getAt on null CxxbtWheelInfo_RaycastInfoConstPtr";
  return CxxbtWheelInfo_RaycastInfoConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo_RaycastInfo()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef CxxbtWheelInfo_RaycastInfoConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtWheelInfo_RaycastInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef CxxbtWheelInfo_RaycastInfoPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfo_RaycastInfoPtr.cxx_getAt on null CxxbtWheelInfo_RaycastInfoPtr";
  return CxxbtWheelInfo_RaycastInfoRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btWheelInfo_RaycastInfo()));
}

/// Same as for CxxbtWheelInfo_RaycastInfoConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef CxxbtWheelInfo_RaycastInfoPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoPtr.cxx_setAt(Index i, btWheelInfo_RaycastInfo v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfo_RaycastInfoPtr.cxx_setAt on null CxxbtWheelInfo_RaycastInfoPtr";
  this.ptr.offset(i)->{ btWheelInfo_RaycastInfo } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef(CxxbtWheelInfo_RaycastInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef.=(CxxbtWheelInfo_RaycastInfoConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btWheelInfo_RaycastInfo value
/// \dfgPresetOmit
/// \internal
btWheelInfo_RaycastInfo CxxbtWheelInfo_RaycastInfoConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfo_RaycastInfoConstRef.cxx_get on null CxxbtWheelInfo_RaycastInfoConstRef";
  return this.ptr.data()->{ btWheelInfo_RaycastInfo };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef.cxx_set(btWheelInfo_RaycastInfo value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtWheelInfo_RaycastInfoRef.cxx_set on null CxxbtWheelInfo_RaycastInfoRef";
  this.ptr.data()->{ btWheelInfo_RaycastInfo } = value;
}

/// Assignment of btWheelInfo_RaycastInfo
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef.=(btWheelInfo_RaycastInfo value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtWheelInfo_RaycastInfoRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBodyWorldInfo_sdf_Initialize] C++[btSoftBodyWorldInfo_sdf_Initialize]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyWorldInfo_sdf_Initialize(
    btSoftBodyWorldInfo _arg0
    ) = "Bullet2_btSoftBodyWorldInfo_sdf_Initialize_99233953ea3a8346202caff520a9a780";


btSoftBodyWorldInfo_sdf_Initialize(
    in
    btSoftBodyWorldInfo
    _arg0
    
    
    )
{
    
    
    CxxbtSoftBodyWorldInfo_sdf_Initialize(
        _arg0
        );
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBodyWorldInfo_sdf_Initialize] C++[btSoftBodyWorldInfo_sdf_Initialize]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyWorldInfo_sdf_Initialize(
    btSoftBodyWorldInfo _arg0,
    SInt32 _arg1
    ) = "Bullet2_btSoftBodyWorldInfo_sdf_Initialize_88c1d58d26acf52e64db82839348f1f8";


btSoftBodyWorldInfo_sdf_Initialize(
    in
    btSoftBodyWorldInfo
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{
    
    
    
    CxxbtSoftBodyWorldInfo_sdf_Initialize(
        _arg0,
        _arg1
        );
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBodyWorldInfo_sdf_Initialize] C++[btSoftBodyWorldInfo_sdf_Initialize]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyWorldInfo_sdf_Initialize(
    btSoftBodyWorldInfo _arg0,
    SInt32 _arg1,
    SInt32 _arg2
    ) = "Bullet2_btSoftBodyWorldInfo_sdf_Initialize_0169599f7940ea4f3349601da9003533";


btSoftBodyWorldInfo_sdf_Initialize(
    in
    btSoftBodyWorldInfo
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    SInt32
    _arg2
    
    
    )
{
    
    
    
    
    CxxbtSoftBodyWorldInfo_sdf_Initialize(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBodyWorldInfo_sdf_Reset] C++[btSoftBodyWorldInfo_sdf_Reset]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyWorldInfo_sdf_Reset(
    btSoftBodyWorldInfo _arg0
    ) = "Bullet2_btSoftBodyWorldInfo_sdf_Reset_246b9e3cc9368c4a7647288a7006734c";


btSoftBodyWorldInfo_sdf_Reset(
    in
    btSoftBodyWorldInfo
    _arg0
    
    
    )
{
    
    
    CxxbtSoftBodyWorldInfo_sdf_Reset(
        _arg0
        );
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBodyWorldInfo_sdf_GarbageCollect] C++[btSoftBodyWorldInfo_sdf_GarbageCollect]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyWorldInfo_sdf_GarbageCollect(
    btSoftBodyWorldInfo _arg0
    ) = "Bullet2_btSoftBodyWorldInfo_sdf_GarbageCollect_dbbfa1e0c850208d039774ad9434444d";


btSoftBodyWorldInfo_sdf_GarbageCollect(
    in
    btSoftBodyWorldInfo
    _arg0
    
    
    )
{
    
    
    CxxbtSoftBodyWorldInfo_sdf_GarbageCollect(
        _arg0
        );
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBodyWorldInfo_sdf_GarbageCollect] C++[btSoftBodyWorldInfo_sdf_GarbageCollect]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyWorldInfo_sdf_GarbageCollect(
    btSoftBodyWorldInfo _arg0,
    SInt32 _arg1
    ) = "Bullet2_btSoftBodyWorldInfo_sdf_GarbageCollect_6da5a2dccceb6faa560cfc064cf9f0ec";


btSoftBodyWorldInfo_sdf_GarbageCollect(
    in
    btSoftBodyWorldInfo
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{
    
    
    
    CxxbtSoftBodyWorldInfo_sdf_GarbageCollect(
        _arg0,
        _arg1
        );
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBodyWorldInfo_sdf_RemoveReferences] C++[btSoftBodyWorldInfo_sdf_RemoveReferences]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyWorldInfo_sdf_RemoveReferences(
    btSoftBodyWorldInfo _arg0,
    btCollisionShape _arg1
    ) = "Bullet2_btSoftBodyWorldInfo_sdf_RemoveReferences_268527102e49af7b1d37f3a65e723dbd";

SInt32
btSoftBodyWorldInfo_sdf_RemoveReferences(
    in
    btSoftBodyWorldInfo
    _arg0
    
    ,
    in
    btCollisionShape
    _arg1
    
    
    )
{
    
    
    SInt32 __res = 
    CxxbtSoftBodyWorldInfo_sdf_RemoveReferences(
        _arg0,
        _arg1
        );
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btSoftBody] EDK[Fabric_EDK_KL_btSoftBody] LIB[btSoftBody *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstPtr] EDK[CxxbtSoftBodyConstPtr] LIB[btSoftBody * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstPtr] EDK[CxxbtSoftBodyConstPtr] LIB[btSoftBody * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_mergesSimulationIslands?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_mergesSimulationIslands on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_mergesSimulationIslands(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyConstPtr.cxx_getAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getAnisotropicFriction on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_hasAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_hasAnisotropicFriction on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_hasAnisotropicFriction on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        frictionMode
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getContactProcessingThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getContactProcessingThreshold on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactProcessingThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_isStaticObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_isStaticObject on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_isKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_isKinematicObject on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_isStaticOrKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_isStaticOrKinematicObject on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticOrKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_hasContactResponse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_hasContactResponse on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasContactResponse(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyConstPtr.cxx_getCollisionShape?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getCollisionShape on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyConstPtr.cxx_internalGetExtensionPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_internalGetExtensionPointer on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_internalGetExtensionPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getActivationState?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getActivationState on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getActivationState(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstPtr.cxx_setActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_setActivationState on null CxxbtSoftBodyConstPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getDeactivationTime?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getDeactivationTime on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getDeactivationTime(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstPtr.cxx_forceActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_forceActivationState on null CxxbtSoftBodyConstPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_forceActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstPtr.cxx_activate?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_activate on null CxxbtSoftBodyConstPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstPtr.cxx_activate?(
    Boolean forceActivation
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_activate on null CxxbtSoftBodyConstPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        forceActivation
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_isActive?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_isActive on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isActive(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getRestitution?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getRestitution on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRestitution(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getFriction on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getRollingFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getRollingFriction on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRollingFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getSpinningFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getSpinningFriction on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getSpinningFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getContactStiffness?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getContactStiffness on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactStiffness(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getContactDamping?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getContactDamping on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactDamping(
        );
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getInternalType?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getInternalType on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInternalType(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtSoftBodyConstPtr.cxx_getWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getWorldTransform on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtSoftBodyConstPtr.cxx_getBroadphaseHandle?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getBroadphaseHandle on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtSoftBodyConstPtr.cxx_getInterpolationWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getInterpolationWorldTransform on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyConstPtr.cxx_getInterpolationLinearVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getInterpolationLinearVelocity on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationLinearVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyConstPtr.cxx_getInterpolationAngularVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getInterpolationAngularVelocity on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationAngularVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getIslandTag?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getIslandTag on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getIslandTag(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getCompanionId?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getCompanionId on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCompanionId(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getWorldArrayIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getWorldArrayIndex on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldArrayIndex(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getHitFraction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getHitFraction on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getHitFraction(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getCollisionFlags?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getCollisionFlags on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionFlags(
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getCcdSweptSphereRadius?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getCcdSweptSphereRadius on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSweptSphereRadius(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getCcdMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getCcdMotionThreshold on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdMotionThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getCcdSquareMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getCcdSquareMotionThreshold on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSquareMotionThreshold(
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyConstPtr.cxx_getUserPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getUserPointer on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getUserIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getUserIndex on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getUserIndex2?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getUserIndex2 on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex2(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_getUpdateRevisionInternal?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getUpdateRevisionInternal on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUpdateRevisionInternal(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getCustomDebugColor on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_checkCollideWith?(
    btCollisionObject co
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_checkCollideWith on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_checkCollideWith(
        co
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstPtr.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyConstPtr.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstPtr.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstPtr.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyConstPtr.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyConstPtr.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstPtr.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyConstPtr.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstPtr.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstPtr.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstPtr.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstPtr] EDK[CxxbtSoftBodyConstPtr] LIB[btSoftBody * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo CxxbtSoftBodyConstPtr.cxx_get_m_worldInfo()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_get_m_worldInfo on null CxxbtSoftBodyConstPtr";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_worldInfo();
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
CxxbtSoftBodyConstPtr.get_m_worldInfo()
{
    btSoftBodyWorldInfo __res = 
    this.cxx_get_m_worldInfo();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btTransform CxxbtSoftBodyConstPtr.cxx_get_m_initialWorldTransform()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_get_m_initialWorldTransform on null CxxbtSoftBodyConstPtr";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_initialWorldTransform();
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyConstPtr.get_m_initialWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_initialWorldTransform();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btVector3 CxxbtSoftBodyConstPtr.cxx_get_m_windVelocity()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_get_m_windVelocity on null CxxbtSoftBodyConstPtr";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_windVelocity();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstPtr.get_m_windVelocity()
{
    btVector3 __res = 
    this.cxx_get_m_windVelocity();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtSoftBodyConstPtr.cxx_get_m_restLengthScale()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_get_m_restLengthScale on null CxxbtSoftBodyConstPtr";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_restLengthScale();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.get_m_restLengthScale()
{
    Float32 __res = 
    this.cxx_get_m_restLengthScale();
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstPtr] EDK[CxxbtSoftBodyConstPtr] LIB[btSoftBody * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_checkLink?(
    SInt32 node0,
    SInt32 node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_checkLink on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_checkLink?(
    btSoftBody_Node node0,
    btSoftBody_Node node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_checkLink on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.cxx_checkFace?(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_checkFace on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkFace(
        node0,
        node1,
        node2
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getMass?(
    SInt32 node
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getMass on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getMass(
        node
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getTotalMass?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getTotalMass on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getTotalMass(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.cxx_getVolume?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getVolume on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getVolume(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_clusterCount?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_clusterCount on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_clusterCount(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstPtr.cxx_clusterCom?(
    SInt32 cluster
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_clusterCom on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_clusterCom(
        cluster
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
CxxbtSoftBodyConstPtr.cxx_getSoftBodySolver?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_getSoftBodySolver on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getSoftBodySolver(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.cxx_rayTest?(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    CxxFloat32Ref mint,
    CxxbtSoftBody_eFeature__Ref feature,
    CxxSInt32Ref index,
    Boolean bcountonly
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_rayTest on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_rayTest(
        rayFrom,
        rayTo,
        mint,
        feature,
        index,
        bcountonly
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstPtr.cxx_evaluateCom?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstPtr.cxx_evaluateCom on null CxxbtSoftBodyConstPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_evaluateCom(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstPtr.evaluateCom?(
    )
{   
    btVector3 __res = 
    this.cxx_evaluateCom(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.checkFace?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_checkFace(
        node0,
        node1,
        node2
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.clusterCount?(
    )
{   
    SInt32 __res = 
    this.cxx_clusterCount(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getTotalMass?(
    )
{   
    Float32 __res = 
    this.cxx_getTotalMass(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.checkLink?(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstPtr.rayTest?(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    io
    Float32
    mint
    
    ,
    io
    btSoftBody_eFeature__
    feature
    
    ,
    io
    SInt32
    index
    
    ,
    in
    Boolean
    bcountonly
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    CxxFloat32Ref mint__cxx = Make_CxxFloat32Ref(mint);
    
    CxxbtSoftBody_eFeature__Ref feature__cxx = Make_CxxbtSoftBody_eFeature__Ref(feature);
    
    CxxSInt32Ref index__cxx = Make_CxxSInt32Ref(index);
    
    SInt32 __res = 
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        mint__cxx,
        feature__cxx,
        index__cxx,
        bcountonly
        );
    
    
    
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstPtr.clusterCom?(
    in
    SInt32
    cluster
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_clusterCom(
        cluster
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getVolume?(
    )
{   
    Float32 __res = 
    this.cxx_getVolume(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstPtr.checkLink?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstPtr.getMass?(
    in
    SInt32
    node
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getMass(
        node
        );
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyPtr] EDK[CxxbtSoftBodyMutablePtr] LIB[btSoftBody * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyPtr] EDK[CxxbtSoftBodyMutablePtr] LIB[btSoftBody * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_mergesSimulationIslands?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_mergesSimulationIslands on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_mergesSimulationIslands(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyPtr.cxx_getAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getAnisotropicFriction on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setAnisotropicFriction on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setAnisotropicFriction(
        anisotropicFriction
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction,
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setAnisotropicFriction on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setAnisotropicFriction(
        anisotropicFriction,
        frictionMode
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_hasAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_hasAnisotropicFriction on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_hasAnisotropicFriction on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        frictionMode
        );
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setContactProcessingThreshold!(
    Float32 contactProcessingThreshold
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setContactProcessingThreshold on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getContactProcessingThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getContactProcessingThreshold on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactProcessingThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_isStaticObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_isStaticObject on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_isKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_isKinematicObject on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_isStaticOrKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_isStaticOrKinematicObject on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticOrKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_hasContactResponse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_hasContactResponse on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasContactResponse(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyPtr.cxx_getCollisionShape?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getCollisionShape on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyPtr.cxx_getCollisionShape!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getCollisionShape on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setIgnoreCollisionCheck!(
    btCollisionObject co,
    Boolean ignoreCollisionCheck
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setIgnoreCollisionCheck on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyPtr.cxx_internalGetExtensionPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_internalGetExtensionPointer on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_internalGetExtensionPointer(
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_internalSetExtensionPointer!(
    Data pointer
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_internalSetExtensionPointer on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_internalSetExtensionPointer(
        pointer
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getActivationState?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getActivationState on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getActivationState(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setActivationState on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setDeactivationTime!(
    Float32 time
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setDeactivationTime on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setDeactivationTime(
        time
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getDeactivationTime?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getDeactivationTime on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getDeactivationTime(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_forceActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_forceActivationState on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_forceActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_activate?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_activate on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_activate?(
    Boolean forceActivation
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_activate on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        forceActivation
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_isActive?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_isActive on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isActive(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setRestitution!(
    Float32 rest
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setRestitution on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setRestitution(
        rest
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getRestitution?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getRestitution on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRestitution(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setFriction on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getFriction on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setRollingFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setRollingFriction on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setRollingFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getRollingFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getRollingFriction on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRollingFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setSpinningFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setSpinningFriction on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setSpinningFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getSpinningFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getSpinningFriction on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getSpinningFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setContactStiffnessAndDamping!(
    Float32 stiffness,
    Float32 damping
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setContactStiffnessAndDamping on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getContactStiffness?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getContactStiffness on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactStiffness(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getContactDamping?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getContactDamping on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactDamping(
        );
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getInternalType?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getInternalType on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInternalType(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
CxxbtSoftBodyPtr.cxx_getWorldTransform!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getWorldTransform on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtSoftBodyPtr.cxx_getWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getWorldTransform on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setWorldTransform!(
    CxxbtTransformConstRef worldTrans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setWorldTransform on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setWorldTransform(
        worldTrans
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtSoftBodyPtr.cxx_getBroadphaseHandle!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getBroadphaseHandle on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtSoftBodyPtr.cxx_getBroadphaseHandle?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getBroadphaseHandle on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setBroadphaseHandle!(
    btBroadphaseProxy handle
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setBroadphaseHandle on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setBroadphaseHandle(
        handle
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtSoftBodyPtr.cxx_getInterpolationWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getInterpolationWorldTransform on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
CxxbtSoftBodyPtr.cxx_getInterpolationWorldTransform!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getInterpolationWorldTransform on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setInterpolationWorldTransform!(
    CxxbtTransformConstRef trans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setInterpolationWorldTransform on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationWorldTransform(
        trans
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setInterpolationLinearVelocity!(
    CxxbtVector3ConstRef linvel
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setInterpolationLinearVelocity on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationLinearVelocity(
        linvel
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setInterpolationAngularVelocity!(
    CxxbtVector3ConstRef angvel
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setInterpolationAngularVelocity on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationAngularVelocity(
        angvel
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyPtr.cxx_getInterpolationLinearVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getInterpolationLinearVelocity on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationLinearVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyPtr.cxx_getInterpolationAngularVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getInterpolationAngularVelocity on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationAngularVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getIslandTag?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getIslandTag on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getIslandTag(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setIslandTag!(
    SInt32 tag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setIslandTag on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setIslandTag(
        tag
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getCompanionId?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getCompanionId on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCompanionId(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setCompanionId!(
    SInt32 id
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setCompanionId on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCompanionId(
        id
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getWorldArrayIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getWorldArrayIndex on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldArrayIndex(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setWorldArrayIndex!(
    SInt32 ix
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setWorldArrayIndex on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setWorldArrayIndex(
        ix
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getHitFraction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getHitFraction on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getHitFraction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setHitFraction!(
    Float32 hitFraction
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setHitFraction on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setHitFraction(
        hitFraction
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getCollisionFlags?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getCollisionFlags on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionFlags(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setCollisionFlags!(
    SInt32 flags
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setCollisionFlags on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCollisionFlags(
        flags
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getCcdSweptSphereRadius?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getCcdSweptSphereRadius on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSweptSphereRadius(
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setCcdSweptSphereRadius!(
    Float32 radius
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setCcdSweptSphereRadius on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCcdSweptSphereRadius(
        radius
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getCcdMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getCcdMotionThreshold on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdMotionThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getCcdSquareMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getCcdSquareMotionThreshold on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSquareMotionThreshold(
        );
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setCcdMotionThreshold!(
    Float32 ccdMotionThreshold
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setCcdMotionThreshold on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyPtr.cxx_getUserPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getUserPointer on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getUserIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getUserIndex on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getUserIndex2?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getUserIndex2 on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex2(
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setUserPointer!(
    Data userPointer
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setUserPointer on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserPointer(
        userPointer
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setUserIndex!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setUserIndex on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserIndex(
        index
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setUserIndex2!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setUserIndex2 on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserIndex2(
        index
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_getUpdateRevisionInternal?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getUpdateRevisionInternal on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUpdateRevisionInternal(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setCustomDebugColor!(
    CxxbtVector3ConstRef colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setCustomDebugColor on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_removeCustomDebugColor!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_removeCustomDebugColor on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btCollisionObject }.cxx_removeCustomDebugColor(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getCustomDebugColor on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_checkCollideWith?(
    btCollisionObject co
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_checkCollideWith on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_checkCollideWith(
        co
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setCollisionFlags!(
    in
    SInt32
    flags
    
    
    )
{   
    
    
    this.cxx_setCollisionFlags(
        flags
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setCompanionId!(
    in
    SInt32
    id
    
    
    )
{   
    
    
    this.cxx_setCompanionId(
        id
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setRestitution!(
    in
    Float32
    rest
    
    
    )
{   
    
    
    this.cxx_setRestitution(
        rest
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setHitFraction!(
    in
    Float32
    hitFraction
    
    
    )
{   
    
    
    this.cxx_setHitFraction(
        hitFraction
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyPtr.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyPtr.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setWorldArrayIndex!(
    in
    SInt32
    ix
    
    
    )
{   
    
    
    this.cxx_setWorldArrayIndex(
        ix
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setCcdSweptSphereRadius!(
    in
    Float32
    radius
    
    
    )
{   
    
    
    this.cxx_setCcdSweptSphereRadius(
        radius
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyPtr.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setInterpolationLinearVelocity!(
    in
    btVector3
    linvel
    
    
    )
{   
    
    CxxbtVector3ConstRef linvel__cxx = Make_CxxbtVector3ConstRef(linvel);
    
    this.cxx_setInterpolationLinearVelocity(
        linvel__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setIgnoreCollisionCheck!(
    in
    btCollisionObject
    co
    
    ,
    in
    Boolean
    ignoreCollisionCheck
    
    
    )
{   
    
    
    
    this.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtSoftBodyPtr.getBroadphaseHandle!(
    )
{   
    btBroadphaseProxy __res = 
    this.cxx_getBroadphaseHandle(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setUserPointer!(
    in
    Data
    userPointer
    
    
    )
{   
    
    
    this.cxx_setUserPointer(
        userPointer
        );
    
    
    
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setCcdMotionThreshold!(
    in
    Float32
    ccdMotionThreshold
    
    
    )
{   
    
    
    this.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setInterpolationWorldTransform!(
    in
    btTransform
    trans
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    this.cxx_setInterpolationWorldTransform(
        trans__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setCustomDebugColor!(
    in
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3ConstRef colorRGB__cxx = Make_CxxbtVector3ConstRef(colorRGB);
    
    this.cxx_setCustomDebugColor(
        colorRGB__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.removeCustomDebugColor!(
    )
{   
    
    this.cxx_removeCustomDebugColor(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setRollingFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setRollingFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyPtr.getWorldTransform!(
    )
{   
    CxxbtTransformRef __res_cxx = 
    this.cxx_getWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setIslandTag!(
    in
    SInt32
    tag
    
    
    )
{   
    
    
    this.cxx_setIslandTag(
        tag
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setDeactivationTime!(
    in
    Float32
    time
    
    
    )
{   
    
    
    this.cxx_setDeactivationTime(
        time
        );
    
    
    
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setContactProcessingThreshold!(
    in
    Float32
    contactProcessingThreshold
    
    
    )
{   
    
    
    this.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setBroadphaseHandle!(
    in
    btBroadphaseProxy
    handle
    
    
    )
{   
    
    
    this.cxx_setBroadphaseHandle(
        handle
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setUserIndex2!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex2(
        index
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setInterpolationAngularVelocity!(
    in
    btVector3
    angvel
    
    
    )
{   
    
    CxxbtVector3ConstRef angvel__cxx = Make_CxxbtVector3ConstRef(angvel);
    
    this.cxx_setInterpolationAngularVelocity(
        angvel__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    ,
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx,
        frictionMode
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setSpinningFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setSpinningFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setWorldTransform!(
    in
    btTransform
    worldTrans
    
    
    )
{   
    
    CxxbtTransformConstRef worldTrans__cxx = Make_CxxbtTransformConstRef(worldTrans);
    
    this.cxx_setWorldTransform(
        worldTrans__cxx
        );
    
    
    
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyPtr.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setContactStiffnessAndDamping!(
    in
    Float32
    stiffness
    
    ,
    in
    Float32
    damping
    
    
    )
{   
    
    
    
    this.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setUserIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex(
        index
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.internalSetExtensionPointer!(
    in
    Data
    pointer
    
    
    )
{   
    
    
    this.cxx_internalSetExtensionPointer(
        pointer
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyPtr] EDK[CxxbtSoftBodyMutablePtr] LIB[btSoftBody * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo CxxbtSoftBodyPtr.cxx_get_m_worldInfo()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_get_m_worldInfo on null CxxbtSoftBodyPtr";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_worldInfo();
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
CxxbtSoftBodyPtr.get_m_worldInfo()
{
    btSoftBodyWorldInfo __res = 
    this.cxx_get_m_worldInfo();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.cxx_set_m_worldInfo!(btSoftBodyWorldInfo value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_set_m_worldInfo on null CxxbtSoftBodyPtr";
    this.ptr.data()->{ btSoftBody }.cxx_set_m_worldInfo(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.set_m_worldInfo!(
    btSoftBodyWorldInfo value
   )
{
    
    this.cxx_set_m_worldInfo(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btTransform CxxbtSoftBodyPtr.cxx_get_m_initialWorldTransform()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_get_m_initialWorldTransform on null CxxbtSoftBodyPtr";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_initialWorldTransform();
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyPtr.get_m_initialWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_initialWorldTransform();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.cxx_set_m_initialWorldTransform!(btTransform value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_set_m_initialWorldTransform on null CxxbtSoftBodyPtr";
    this.ptr.data()->{ btSoftBody }.cxx_set_m_initialWorldTransform(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.set_m_initialWorldTransform!(
    btTransform value
   )
{
    
    this.cxx_set_m_initialWorldTransform(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btVector3 CxxbtSoftBodyPtr.cxx_get_m_windVelocity()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_get_m_windVelocity on null CxxbtSoftBodyPtr";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_windVelocity();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.get_m_windVelocity()
{
    btVector3 __res = 
    this.cxx_get_m_windVelocity();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.cxx_set_m_windVelocity!(btVector3 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_set_m_windVelocity on null CxxbtSoftBodyPtr";
    this.ptr.data()->{ btSoftBody }.cxx_set_m_windVelocity(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.set_m_windVelocity!(
    btVector3 value
   )
{
    
    this.cxx_set_m_windVelocity(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtSoftBodyPtr.cxx_get_m_restLengthScale()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_get_m_restLengthScale on null CxxbtSoftBodyPtr";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_restLengthScale();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.get_m_restLengthScale()
{
    Float32 __res = 
    this.cxx_get_m_restLengthScale();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.cxx_set_m_restLengthScale!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_set_m_restLengthScale on null CxxbtSoftBodyPtr";
    this.ptr.data()->{ btSoftBody }.cxx_set_m_restLengthScale(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.set_m_restLengthScale!(
    Float32 value
   )
{
    
    this.cxx_set_m_restLengthScale(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyPtr] EDK[CxxbtSoftBodyMutablePtr] LIB[btSoftBody * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_initDefaults!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_initDefaults on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_initDefaults(
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
CxxbtSoftBodyPtr.cxx_getWorldInfo!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getWorldInfo on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getWorldInfo(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_checkLink?(
    SInt32 node0,
    SInt32 node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_checkLink on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_checkLink?(
    btSoftBody_Node node0,
    btSoftBody_Node node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_checkLink on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_checkFace?(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_checkFace on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkFace(
        node0,
        node1,
        node2
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Material
CxxbtSoftBodyPtr.cxx_appendMaterial!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendMaterial on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_appendMaterial(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c,
        n0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c,
        n0,
        n1
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1,
    btSoftBody_Node n2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c,
        n0,
        n1,
        n2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1,
    btSoftBody_Node n2,
    btSoftBody_Node n3
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c,
        n0,
        n1,
        n2,
        n3
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Node feature
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        feature
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Link feature
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        feature
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Face feature
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNote on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        feature
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendNode!(
    CxxbtVector3ConstRef x,
    Float32 m
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendNode on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNode(
        x,
        m
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    SInt32 model
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        model
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    SInt32 model,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        model,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1,
    btSoftBody_Material mat,
    Boolean bcheckexist
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    btSoftBody_Material mat,
    Boolean bcheckexist
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLink on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendFace!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendFace on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendFace!(
    SInt32 model
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendFace on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        model
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendFace!(
    SInt32 model,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendFace on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        model,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendFace!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendFace on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        node0,
        node1,
        node2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendFace!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendFace on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        node0,
        node1,
        node2,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendTetra!(
    SInt32 model,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendTetra on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendTetra(
        model,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendTetra!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    SInt32 node3
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendTetra on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendTetra!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    SInt32 node3,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendTetra on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendAnchor on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    Boolean disableCollisionBetweenLinkedBodies
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendAnchor on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    Boolean disableCollisionBetweenLinkedBodies,
    Float32 influence
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendAnchor on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies,
        influence
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendAnchor on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        localPivot
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot,
    Boolean disableCollisionBetweenLinkedBodies
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendAnchor on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        localPivot,
        disableCollisionBetweenLinkedBodies
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot,
    Boolean disableCollisionBetweenLinkedBodies,
    Float32 influence
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendAnchor on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        localPivot,
        disableCollisionBetweenLinkedBodies,
        influence
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLinearJoint!(
    btSoftBody_LJoint_Specs specs
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLinearJoint on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLinearJoint(
        specs
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendLinearJoint!(
    btSoftBody_LJoint_Specs specs,
    btSoftBody body
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendLinearJoint on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLinearJoint(
        specs,
        body
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendAngularJoint!(
    btSoftBody_AJoint_Specs specs
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendAngularJoint on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAngularJoint(
        specs
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_appendAngularJoint!(
    btSoftBody_AJoint_Specs specs,
    btSoftBody body
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_appendAngularJoint on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAngularJoint(
        specs,
        body
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_addForce!(
    CxxbtVector3ConstRef force
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_addForce on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_addForce(
        force
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_addForce!(
    CxxbtVector3ConstRef force,
    SInt32 node
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_addForce on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_addForce(
        force,
        node
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_addAeroForceToNode!(
    CxxbtVector3ConstRef windVelocity,
    SInt32 nodeIndex
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_addAeroForceToNode on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_addAeroForceToNode(
        windVelocity,
        nodeIndex
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_addAeroForceToFace!(
    CxxbtVector3ConstRef windVelocity,
    SInt32 faceIndex
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_addAeroForceToFace on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_addAeroForceToFace(
        windVelocity,
        faceIndex
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_addVelocity!(
    CxxbtVector3ConstRef velocity
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_addVelocity on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_addVelocity(
        velocity
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setVelocity!(
    CxxbtVector3ConstRef velocity
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setVelocity on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setVelocity(
        velocity
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_addVelocity!(
    CxxbtVector3ConstRef velocity,
    SInt32 node
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_addVelocity on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_addVelocity(
        velocity,
        node
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setMass!(
    SInt32 node,
    Float32 mass
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setMass on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setMass(
        node,
        mass
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getMass?(
    SInt32 node
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getMass on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getMass(
        node
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getTotalMass?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getTotalMass on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getTotalMass(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setTotalMass!(
    Float32 mass
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setTotalMass on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setTotalMass(
        mass
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setTotalMass!(
    Float32 mass,
    Boolean fromfaces
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setTotalMass on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setTotalMass(
        mass,
        fromfaces
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setTotalDensity!(
    Float32 density
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setTotalDensity on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setTotalDensity(
        density
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setVolumeMass!(
    Float32 mass
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setVolumeMass on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setVolumeMass(
        mass
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setVolumeDensity!(
    Float32 density
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setVolumeDensity on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setVolumeDensity(
        density
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_transform!(
    CxxbtTransformConstRef trs
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_transform on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_transform(
        trs
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_translate!(
    CxxbtVector3ConstRef trs
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_translate on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_translate(
        trs
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_rotate!(
    CxxbtQuaternionConstRef rot
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_rotate on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_rotate(
        rot
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_scale!(
    CxxbtVector3ConstRef scl
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_scale on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_scale(
        scl
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getRestLengthScale!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getRestLengthScale on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getRestLengthScale(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setRestLengthScale!(
    Float32 restLength
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setRestLengthScale on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setRestLengthScale(
        restLength
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setPose!(
    Boolean bvolume,
    Boolean bframe
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setPose on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setPose(
        bvolume,
        bframe
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_resetLinkRestLengths!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_resetLinkRestLengths on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_resetLinkRestLengths(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.cxx_getVolume?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getVolume on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getVolume(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_clusterCount?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_clusterCount on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_clusterCount(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.cxx_clusterCom?(
    SInt32 cluster
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_clusterCom on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_clusterCom(
        cluster
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_generateBendingConstraints!(
    SInt32 distance
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_generateBendingConstraints on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_generateBendingConstraints(
        distance
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_generateBendingConstraints!(
    SInt32 distance,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_generateBendingConstraints on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_generateBendingConstraints(
        distance,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_randomizeConstraints!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_randomizeConstraints on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_randomizeConstraints(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_releaseCluster!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_releaseCluster on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_releaseCluster(
        index
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_releaseClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_releaseClusters on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_releaseClusters(
        );
}

///generateClusters with k=0 will create a convex cluster for each tetrahedron or triangle
// 
///otherwise an approximation will be used (better performance)
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_generateClusters!(
    SInt32 k
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_generateClusters on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_generateClusters(
        k
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_generateClusters!(
    SInt32 k,
    SInt32 maxiterations
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_generateClusters on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_generateClusters(
        k,
        maxiterations
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_refine!(
    btSoftBody_ImplicitFn ifn,
    Float32 accurary,
    Boolean cut
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_refine on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_refine(
        ifn,
        accurary,
        cut
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_cutLink!(
    SInt32 node0,
    SInt32 node1,
    Float32 position
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_cutLink on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_cutLink(
        node0,
        node1,
        position
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_cutLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    Float32 position
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_cutLink on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_cutLink(
        node0,
        node1,
        position
        );
}

///Ray casting using rayFrom and rayTo in worldspace, (not direction!)
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btSoftBody_sRayCast results
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_rayTest on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_rayTest(
        rayFrom,
        rayTo,
        results
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setSolver!(
    btSoftBody_eSolverPresets__ preset
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setSolver on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setSolver(
        preset
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_predictMotion!(
    Float32 dt
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_predictMotion on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_predictMotion(
        dt
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_solveConstraints!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_solveConstraints on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_solveConstraints(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_staticSolve!(
    SInt32 iterations
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_staticSolve on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_staticSolve(
        iterations
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_integrateMotion!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_integrateMotion on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_integrateMotion(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_defaultCollisionHandler!(
    btSoftBody psb
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_defaultCollisionHandler on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_defaultCollisionHandler(
        psb
        );
}

/**

	 * Set a wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setWindVelocity!(
    CxxbtVector3ConstRef velocity
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setWindVelocity on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setWindVelocity(
        velocity
        );
}

/**

	 * Return the wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyPtr.cxx_getWindVelocity!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getWindVelocity on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getWindVelocity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_setSoftBodySolver!(
    btSoftBodySolver softBodySolver
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_setSoftBodySolver on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_setSoftBodySolver(
        softBodySolver
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
CxxbtSoftBodyPtr.cxx_getSoftBodySolver!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getSoftBodySolver on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getSoftBodySolver(
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
CxxbtSoftBodyPtr.cxx_getSoftBodySolver?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_getSoftBodySolver on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getSoftBodySolver(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_pointersToIndices!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_pointersToIndices on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_pointersToIndices(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_indicesToPointers!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_indicesToPointers on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_indicesToPointers(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_indicesToPointers!(
    CxxSInt32ConstPtr map
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_indicesToPointers on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_indicesToPointers(
        map
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.cxx_rayTest?(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    CxxFloat32Ref mint,
    CxxbtSoftBody_eFeature__Ref feature,
    CxxSInt32Ref index,
    Boolean bcountonly
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_rayTest on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_rayTest(
        rayFrom,
        rayTo,
        mint,
        feature,
        index,
        bcountonly
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_initializeFaceTree!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_initializeFaceTree on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_initializeFaceTree(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.cxx_evaluateCom?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_evaluateCom on null CxxbtSoftBodyPtr";
    return
    this.ptr.data()->{ btSoftBody }.cxx_evaluateCom(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_updateNormals!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_updateNormals on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateNormals(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_updateBounds!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_updateBounds on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateBounds(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_updatePose!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_updatePose on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_updatePose(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_updateConstants!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_updateConstants on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateConstants(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_updateLinkConstants!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_updateLinkConstants on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateLinkConstants(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_updateArea!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_updateArea on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateArea(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_updateArea!(
    Boolean averageArea
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_updateArea on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateArea(
        averageArea
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_initializeClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_initializeClusters on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_initializeClusters(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_updateClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_updateClusters on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateClusters(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_cleanupClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_cleanupClusters on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_cleanupClusters(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_prepareClusters!(
    SInt32 iterations
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_prepareClusters on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_prepareClusters(
        iterations
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_solveClusters!(
    Float32 sor
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_solveClusters on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_solveClusters(
        sor
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_applyClusters!(
    Boolean drift
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_applyClusters on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_applyClusters(
        drift
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_dampClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_dampClusters on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_dampClusters(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cxx_applyForces!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyPtr.cxx_applyForces on null CxxbtSoftBodyPtr";
    
    this.ptr.data()->{ btSoftBody }.cxx_applyForces(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendFace!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendFace(
        node0,
        node1,
        node2,
        mat
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.addAeroForceToNode!(
    in
    btVector3
    windVelocity
    
    ,
    in
    SInt32
    nodeIndex
    
    
    )
{   
    
    CxxbtVector3ConstRef windVelocity__cxx = Make_CxxbtVector3ConstRef(windVelocity);
    
    
    this.cxx_addAeroForceToNode(
        windVelocity__cxx,
        nodeIndex
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.updateClusters!(
    )
{   
    
    this.cxx_updateClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.solveClusters!(
    in
    Float32
    sor
    
    
    )
{   
    
    
    this.cxx_solveClusters(
        sor
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setVolumeMass!(
    in
    Float32
    mass
    
    
    )
{   
    
    
    this.cxx_setVolumeMass(
        mass
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.dampClusters!(
    )
{   
    
    this.cxx_dampClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.generateBendingConstraints!(
    in
    SInt32
    distance
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_generateBendingConstraints(
        distance,
        mat
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.rayTest?(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    io
    Float32
    mint
    
    ,
    io
    btSoftBody_eFeature__
    feature
    
    ,
    io
    SInt32
    index
    
    ,
    in
    Boolean
    bcountonly
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    CxxFloat32Ref mint__cxx = Make_CxxFloat32Ref(mint);
    
    CxxbtSoftBody_eFeature__Ref feature__cxx = Make_CxxbtSoftBody_eFeature__Ref(feature);
    
    CxxSInt32Ref index__cxx = Make_CxxSInt32Ref(index);
    
    SInt32 __res = 
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        mint__cxx,
        feature__cxx,
        index__cxx,
        bcountonly
        );
    
    
    
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        node0,
        node1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getVolume?(
    )
{   
    Float32 __res = 
    this.cxx_getVolume(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.prepareClusters!(
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    this.cxx_prepareClusters(
        iterations
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.integrateMotion!(
    )
{   
    
    this.cxx_integrateMotion(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setVolumeDensity!(
    in
    Float32
    density
    
    
    )
{   
    
    
    this.cxx_setVolumeDensity(
        density
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        model,
        mat
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1
        );
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendFace!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    
    )
{   
    
    
    
    
    this.cxx_appendFace(
        node0,
        node1,
        node2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setTotalDensity!(
    in
    Float32
    density
    
    
    )
{   
    
    
    this.cxx_setTotalDensity(
        density
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNode!(
    in
    btVector3
    x
    
    ,
    in
    Float32
    m
    
    
    )
{   
    
    CxxbtVector3ConstRef x__cxx = Make_CxxbtVector3ConstRef(x);
    
    
    this.cxx_appendNode(
        x__cxx,
        m
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.updatePose!(
    )
{   
    
    this.cxx_updatePose(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    ,
    in
    Boolean
    bcheckexist
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setMass!(
    in
    SInt32
    node
    
    ,
    in
    Float32
    mass
    
    
    )
{   
    
    
    
    this.cxx_setMass(
        node,
        mass
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.updateNormals!(
    )
{   
    
    this.cxx_updateNormals(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.randomizeConstraints!(
    )
{   
    
    this.cxx_randomizeConstraints(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.rotate!(
    in
    btQuaternion
    rot
    
    
    )
{   
    
    CxxbtQuaternionConstRef rot__cxx = Make_CxxbtQuaternionConstRef(rot);
    
    this.cxx_rotate(
        rot__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setSoftBodySolver!(
    in
    btSoftBodySolver
    softBodySolver
    
    
    )
{   
    
    
    this.cxx_setSoftBodySolver(
        softBodySolver
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.indicesToPointers!(
    )
{   
    
    this.cxx_indicesToPointers(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.checkFace?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_checkFace(
        node0,
        node1,
        node2
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.updateArea!(
    in
    Boolean
    averageArea
    
    
    )
{   
    
    
    this.cxx_updateArea(
        averageArea
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.scale!(
    in
    btVector3
    scl
    
    
    )
{   
    
    CxxbtVector3ConstRef scl__cxx = Make_CxxbtVector3ConstRef(scl);
    
    this.cxx_scale(
        scl__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.initializeFaceTree!(
    )
{   
    
    this.cxx_initializeFaceTree(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    in
    SInt32
    model
    
    
    )
{   
    
    
    this.cxx_appendLink(
        model
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    ,
    in
    Float32
    influence
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies,
        influence
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.addForce!(
    in
    btVector3
    force
    
    ,
    in
    SInt32
    node
    
    
    )
{   
    
    CxxbtVector3ConstRef force__cxx = Make_CxxbtVector3ConstRef(force);
    
    
    this.cxx_addForce(
        force__cxx,
        node
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.addForce!(
    in
    btVector3
    force
    
    
    )
{   
    
    CxxbtVector3ConstRef force__cxx = Make_CxxbtVector3ConstRef(force);
    
    this.cxx_addForce(
        force__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setPose!(
    in
    Boolean
    bvolume
    
    ,
    in
    Boolean
    bframe
    
    
    )
{   
    
    
    
    this.cxx_setPose(
        bvolume,
        bframe
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Node
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.checkLink?(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
CxxbtSoftBodyPtr.getSoftBodySolver!(
    )
{   
    btSoftBodySolver __res = 
    this.cxx_getSoftBodySolver(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.checkLink?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.clusterCom?(
    in
    SInt32
    cluster
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_clusterCom(
        cluster
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.initializeClusters!(
    )
{   
    
    this.cxx_initializeClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.addAeroForceToFace!(
    in
    btVector3
    windVelocity
    
    ,
    in
    SInt32
    faceIndex
    
    
    )
{   
    
    CxxbtVector3ConstRef windVelocity__cxx = Make_CxxbtVector3ConstRef(windVelocity);
    
    
    this.cxx_addAeroForceToFace(
        windVelocity__cxx,
        faceIndex
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.generateBendingConstraints!(
    in
    SInt32
    distance
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_generateBendingConstraints(
        distance
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.evaluateCom?(
    )
{   
    btVector3 __res = 
    this.cxx_evaluateCom(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    
    )
{   
    
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies
        );
    
    
    
    
    
}

///generateClusters with k=0 will create a convex cluster for each tetrahedron or triangle
// 
///otherwise an approximation will be used (better performance)
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.generateClusters!(
    in
    SInt32
    k
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_generateClusters(
        k
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.applyForces!(
    )
{   
    
    this.cxx_applyForces(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setTotalMass!(
    in
    Float32
    mass
    
    
    )
{   
    
    
    this.cxx_setTotalMass(
        mass
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx,
        disableCollisionBetweenLinkedBodies
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.applyClusters!(
    in
    Boolean
    drift
    
    
    )
{   
    
    
    this.cxx_applyClusters(
        drift
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.staticSolve!(
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    this.cxx_staticSolve(
        iterations
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    ,
    in
    btSoftBody_Node
    n2
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1,
        n2
        );
    
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendFace!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendFace(
        model,
        mat
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.updateLinkConstants!(
    )
{   
    
    this.cxx_updateLinkConstants(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Link
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendFace!(
    )
{   
    
    this.cxx_appendFace(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.initDefaults!(
    )
{   
    
    this.cxx_initDefaults(
        );
    
    
}

///Ray casting using rayFrom and rayTo in worldspace, (not direction!)
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btSoftBody_sRayCast
    results
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    Boolean __res = 
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        results
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendTetra!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendTetra(
        model,
        mat
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.refine!(
    in
    btSoftBody_ImplicitFn
    ifn
    
    ,
    in
    Float32
    accurary
    
    ,
    in
    Boolean
    cut
    
    
    )
{   
    
    
    
    
    this.cxx_refine(
        ifn,
        accurary,
        cut
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLinearJoint!(
    in
    btSoftBody_LJoint_Specs
    specs
    
    ,
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendLinearJoint(
        specs,
        body
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.updateBounds!(
    )
{   
    
    this.cxx_updateBounds(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        node0,
        node1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendAngularJoint!(
    in
    btSoftBody_AJoint_Specs
    specs
    
    ,
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendAngularJoint(
        specs,
        body
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.addVelocity!(
    in
    btVector3
    velocity
    
    ,
    in
    SInt32
    node
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    
    this.cxx_addVelocity(
        velocity__cxx,
        node
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.resetLinkRestLengths!(
    )
{   
    
    this.cxx_resetLinkRestLengths(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.addVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_addVelocity(
        velocity__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setRestLengthScale!(
    in
    Float32
    restLength
    
    
    )
{   
    
    
    this.cxx_setRestLengthScale(
        restLength
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setSolver!(
    in
    btSoftBody_eSolverPresets__
    preset
    
    
    )
{   
    
    
    this.cxx_setSolver(
        preset
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    ,
    in
    Boolean
    bcheckexist
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.generateClusters!(
    in
    SInt32
    k
    
    ,
    in
    SInt32
    maxiterations
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_generateClusters(
        k,
        maxiterations
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Face
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
CxxbtSoftBodyPtr.getWorldInfo!(
    )
{   
    btSoftBodyWorldInfo __res = 
    this.cxx_getWorldInfo(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.updateArea!(
    )
{   
    
    this.cxx_updateArea(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.solveConstraints!(
    )
{   
    
    this.cxx_solveConstraints(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getTotalMass?(
    )
{   
    Float32 __res = 
    this.cxx_getTotalMass(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.pointersToIndices!(
    )
{   
    
    this.cxx_pointersToIndices(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.updateConstants!(
    )
{   
    
    this.cxx_updateConstants(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendAnchor(
        node,
        body
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.defaultCollisionHandler!(
    in
    btSoftBody
    psb
    
    
    )
{   
    
    
    this.cxx_defaultCollisionHandler(
        psb
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLink!(
    )
{   
    
    this.cxx_appendLink(
        );
    
    
}

/**

	 * Set a wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setWindVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_setWindVelocity(
        velocity__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    ,
    in
    Float32
    influence
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx,
        disableCollisionBetweenLinkedBodies,
        influence
        );
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.cleanupClusters!(
    )
{   
    
    this.cxx_cleanupClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendTetra!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    SInt32
    node3
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    
    
    this.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3,
        mat
        );
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getMass?(
    in
    SInt32
    node
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getMass(
        node
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendTetra!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    SInt32
    node3
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cutLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    Float32
    position
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_cutLink(
        node0,
        node1,
        position
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_setVelocity(
        velocity__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyPtr.cutLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    Float32
    position
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_cutLink(
        node0,
        node1,
        position
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyPtr.clusterCount?(
    )
{   
    SInt32 __res = 
    this.cxx_clusterCount(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.indicesToPointers!(
    in
    SInt32
    map
    
    
    )
{   
    
    CxxSInt32ConstPtr map__cxx = Make_CxxSInt32ConstPtr(map);
    
    this.cxx_indicesToPointers(
        map__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.setTotalMass!(
    in
    Float32
    mass
    
    ,
    in
    Boolean
    fromfaces
    
    
    )
{   
    
    
    
    this.cxx_setTotalMass(
        mass,
        fromfaces
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Material
CxxbtSoftBodyPtr.appendMaterial!(
    )
{   
    btSoftBody_Material __res = 
    this.cxx_appendMaterial(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendLinearJoint!(
    in
    btSoftBody_LJoint_Specs
    specs
    
    
    )
{   
    
    
    this.cxx_appendLinearJoint(
        specs
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.transform!(
    in
    btTransform
    trs
    
    
    )
{   
    
    CxxbtTransformConstRef trs__cxx = Make_CxxbtTransformConstRef(trs);
    
    this.cxx_transform(
        trs__cxx
        );
    
    
    
}

/**

	 * Return the wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyPtr.getWindVelocity!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getWindVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.translate!(
    in
    btVector3
    trs
    
    
    )
{   
    
    CxxbtVector3ConstRef trs__cxx = Make_CxxbtVector3ConstRef(trs);
    
    this.cxx_translate(
        trs__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendAngularJoint!(
    in
    btSoftBody_AJoint_Specs
    specs
    
    
    )
{   
    
    
    this.cxx_appendAngularJoint(
        specs
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyPtr.getRestLengthScale!(
    )
{   
    Float32 __res = 
    this.cxx_getRestLengthScale(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendFace!(
    in
    SInt32
    model
    
    
    )
{   
    
    
    this.cxx_appendFace(
        model
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.predictMotion!(
    in
    Float32
    dt
    
    
    )
{   
    
    
    this.cxx_predictMotion(
        dt
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    ,
    in
    btSoftBody_Node
    n2
    
    ,
    in
    btSoftBody_Node
    n3
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1,
        n2,
        n3
        );
    
    
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.releaseClusters!(
    )
{   
    
    this.cxx_releaseClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyPtr.releaseCluster!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_releaseCluster(
        index
        );
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstRef] EDK[CxxbtSoftBodyConstRef] LIB[btSoftBody * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstRef] EDK[CxxbtSoftBodyConstRef] LIB[btSoftBody * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_mergesSimulationIslands?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_mergesSimulationIslands on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_mergesSimulationIslands(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyConstRef.cxx_getAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getAnisotropicFriction on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_hasAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_hasAnisotropicFriction on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_hasAnisotropicFriction on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        frictionMode
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getContactProcessingThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getContactProcessingThreshold on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactProcessingThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_isStaticObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_isStaticObject on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_isKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_isKinematicObject on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_isStaticOrKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_isStaticOrKinematicObject on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticOrKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_hasContactResponse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_hasContactResponse on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasContactResponse(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyConstRef.cxx_getCollisionShape?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getCollisionShape on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyConstRef.cxx_internalGetExtensionPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_internalGetExtensionPointer on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_internalGetExtensionPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getActivationState?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getActivationState on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getActivationState(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstRef.cxx_setActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_setActivationState on null CxxbtSoftBodyConstRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getDeactivationTime?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getDeactivationTime on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getDeactivationTime(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstRef.cxx_forceActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_forceActivationState on null CxxbtSoftBodyConstRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_forceActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstRef.cxx_activate?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_activate on null CxxbtSoftBodyConstRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstRef.cxx_activate?(
    Boolean forceActivation
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_activate on null CxxbtSoftBodyConstRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        forceActivation
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_isActive?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_isActive on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isActive(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getRestitution?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getRestitution on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRestitution(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getFriction on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getRollingFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getRollingFriction on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRollingFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getSpinningFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getSpinningFriction on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getSpinningFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getContactStiffness?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getContactStiffness on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactStiffness(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getContactDamping?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getContactDamping on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactDamping(
        );
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getInternalType?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getInternalType on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInternalType(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtSoftBodyConstRef.cxx_getWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getWorldTransform on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtSoftBodyConstRef.cxx_getBroadphaseHandle?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getBroadphaseHandle on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtSoftBodyConstRef.cxx_getInterpolationWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getInterpolationWorldTransform on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyConstRef.cxx_getInterpolationLinearVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getInterpolationLinearVelocity on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationLinearVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyConstRef.cxx_getInterpolationAngularVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getInterpolationAngularVelocity on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationAngularVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getIslandTag?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getIslandTag on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getIslandTag(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getCompanionId?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getCompanionId on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCompanionId(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getWorldArrayIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getWorldArrayIndex on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldArrayIndex(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getHitFraction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getHitFraction on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getHitFraction(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getCollisionFlags?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getCollisionFlags on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionFlags(
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getCcdSweptSphereRadius?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getCcdSweptSphereRadius on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSweptSphereRadius(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getCcdMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getCcdMotionThreshold on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdMotionThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getCcdSquareMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getCcdSquareMotionThreshold on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSquareMotionThreshold(
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyConstRef.cxx_getUserPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getUserPointer on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getUserIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getUserIndex on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getUserIndex2?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getUserIndex2 on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex2(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_getUpdateRevisionInternal?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getUpdateRevisionInternal on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUpdateRevisionInternal(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getCustomDebugColor on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_checkCollideWith?(
    btCollisionObject co
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_checkCollideWith on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_checkCollideWith(
        co
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstRef.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstRef.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyConstRef.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyConstRef.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstRef.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstRef.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyConstRef.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstRef.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyConstRef.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyConstRef.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstRef.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstRef] EDK[CxxbtSoftBodyConstRef] LIB[btSoftBody * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo CxxbtSoftBodyConstRef.cxx_get_m_worldInfo()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_get_m_worldInfo on null CxxbtSoftBodyConstRef";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_worldInfo();
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
CxxbtSoftBodyConstRef.get_m_worldInfo()
{
    btSoftBodyWorldInfo __res = 
    this.cxx_get_m_worldInfo();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btTransform CxxbtSoftBodyConstRef.cxx_get_m_initialWorldTransform()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_get_m_initialWorldTransform on null CxxbtSoftBodyConstRef";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_initialWorldTransform();
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyConstRef.get_m_initialWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_initialWorldTransform();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
btVector3 CxxbtSoftBodyConstRef.cxx_get_m_windVelocity()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_get_m_windVelocity on null CxxbtSoftBodyConstRef";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_windVelocity();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstRef.get_m_windVelocity()
{
    btVector3 __res = 
    this.cxx_get_m_windVelocity();
    
    return __res;
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtSoftBodyConstRef.cxx_get_m_restLengthScale()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_get_m_restLengthScale on null CxxbtSoftBodyConstRef";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_restLengthScale();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.get_m_restLengthScale()
{
    Float32 __res = 
    this.cxx_get_m_restLengthScale();
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstRef] EDK[CxxbtSoftBodyConstRef] LIB[btSoftBody * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyConstRef] EDK[CxxbtSoftBodyConstRef] LIB[btSoftBody * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_checkLink?(
    SInt32 node0,
    SInt32 node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_checkLink on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_checkLink?(
    btSoftBody_Node node0,
    btSoftBody_Node node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_checkLink on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.cxx_checkFace?(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_checkFace on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkFace(
        node0,
        node1,
        node2
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getMass?(
    SInt32 node
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getMass on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getMass(
        node
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getTotalMass?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getTotalMass on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getTotalMass(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.cxx_getVolume?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getVolume on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getVolume(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_clusterCount?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_clusterCount on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_clusterCount(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstRef.cxx_clusterCom?(
    SInt32 cluster
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_clusterCom on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_clusterCom(
        cluster
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
CxxbtSoftBodyConstRef.cxx_getSoftBodySolver?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_getSoftBodySolver on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getSoftBodySolver(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.cxx_rayTest?(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    CxxFloat32Ref mint,
    CxxbtSoftBody_eFeature__Ref feature,
    CxxSInt32Ref index,
    Boolean bcountonly
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_rayTest on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_rayTest(
        rayFrom,
        rayTo,
        mint,
        feature,
        index,
        bcountonly
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstRef.cxx_evaluateCom?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyConstRef.cxx_evaluateCom on null CxxbtSoftBodyConstRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_evaluateCom(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstRef.clusterCom?(
    in
    SInt32
    cluster
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_clusterCom(
        cluster
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.rayTest?(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    io
    Float32
    mint
    
    ,
    io
    btSoftBody_eFeature__
    feature
    
    ,
    io
    SInt32
    index
    
    ,
    in
    Boolean
    bcountonly
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    CxxFloat32Ref mint__cxx = Make_CxxFloat32Ref(mint);
    
    CxxbtSoftBody_eFeature__Ref feature__cxx = Make_CxxbtSoftBody_eFeature__Ref(feature);
    
    CxxSInt32Ref index__cxx = Make_CxxSInt32Ref(index);
    
    SInt32 __res = 
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        mint__cxx,
        feature__cxx,
        index__cxx,
        bcountonly
        );
    
    
    
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getVolume?(
    )
{   
    Float32 __res = 
    this.cxx_getVolume(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getMass?(
    in
    SInt32
    node
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getMass(
        node
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyConstRef.evaluateCom?(
    )
{   
    btVector3 __res = 
    this.cxx_evaluateCom(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.checkFace?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_checkFace(
        node0,
        node1,
        node2
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.checkLink?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyConstRef.checkLink?(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyConstRef.clusterCount?(
    )
{   
    SInt32 __res = 
    this.cxx_clusterCount(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyConstRef.getTotalMass?(
    )
{   
    Float32 __res = 
    this.cxx_getTotalMass(
        );
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyRef] EDK[CxxbtSoftBodyMutableRef] LIB[btSoftBody * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyRef] EDK[CxxbtSoftBodyMutableRef] LIB[btSoftBody * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_mergesSimulationIslands?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_mergesSimulationIslands on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_mergesSimulationIslands(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyRef.cxx_getAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getAnisotropicFriction on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setAnisotropicFriction on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setAnisotropicFriction(
        anisotropicFriction
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setAnisotropicFriction!(
    CxxbtVector3ConstRef anisotropicFriction,
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setAnisotropicFriction on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setAnisotropicFriction(
        anisotropicFriction,
        frictionMode
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_hasAnisotropicFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_hasAnisotropicFriction on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_hasAnisotropicFriction?(
    SInt32 frictionMode
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_hasAnisotropicFriction on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasAnisotropicFriction(
        frictionMode
        );
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setContactProcessingThreshold!(
    Float32 contactProcessingThreshold
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setContactProcessingThreshold on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getContactProcessingThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getContactProcessingThreshold on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactProcessingThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_isStaticObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_isStaticObject on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_isKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_isKinematicObject on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_isStaticOrKinematicObject?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_isStaticOrKinematicObject on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isStaticOrKinematicObject(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_hasContactResponse?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_hasContactResponse on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_hasContactResponse(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyRef.cxx_getCollisionShape?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getCollisionShape on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyRef.cxx_getCollisionShape!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getCollisionShape on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionShape(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setIgnoreCollisionCheck!(
    btCollisionObject co,
    Boolean ignoreCollisionCheck
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setIgnoreCollisionCheck on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyRef.cxx_internalGetExtensionPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_internalGetExtensionPointer on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_internalGetExtensionPointer(
        );
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_internalSetExtensionPointer!(
    Data pointer
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_internalSetExtensionPointer on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_internalSetExtensionPointer(
        pointer
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getActivationState?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getActivationState on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getActivationState(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setActivationState on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setDeactivationTime!(
    Float32 time
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setDeactivationTime on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setDeactivationTime(
        time
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getDeactivationTime?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getDeactivationTime on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getDeactivationTime(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_forceActivationState?(
    SInt32 newState
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_forceActivationState on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_forceActivationState(
        newState
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_activate?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_activate on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_activate?(
    Boolean forceActivation
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_activate on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_activate(
        forceActivation
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_isActive?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_isActive on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_isActive(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setRestitution!(
    Float32 rest
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setRestitution on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setRestitution(
        rest
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getRestitution?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getRestitution on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRestitution(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setFriction on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getFriction on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setRollingFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setRollingFriction on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setRollingFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getRollingFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getRollingFriction on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getRollingFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setSpinningFriction!(
    Float32 frict
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setSpinningFriction on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setSpinningFriction(
        frict
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getSpinningFriction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getSpinningFriction on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getSpinningFriction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setContactStiffnessAndDamping!(
    Float32 stiffness,
    Float32 damping
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setContactStiffnessAndDamping on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getContactStiffness?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getContactStiffness on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactStiffness(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getContactDamping?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getContactDamping on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getContactDamping(
        );
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getInternalType?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getInternalType on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInternalType(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
CxxbtSoftBodyRef.cxx_getWorldTransform!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getWorldTransform on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtSoftBodyRef.cxx_getWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getWorldTransform on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setWorldTransform!(
    CxxbtTransformConstRef worldTrans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setWorldTransform on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setWorldTransform(
        worldTrans
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtSoftBodyRef.cxx_getBroadphaseHandle!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getBroadphaseHandle on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtSoftBodyRef.cxx_getBroadphaseHandle?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getBroadphaseHandle on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getBroadphaseHandle(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setBroadphaseHandle!(
    btBroadphaseProxy handle
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setBroadphaseHandle on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setBroadphaseHandle(
        handle
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformConstRef
CxxbtSoftBodyRef.cxx_getInterpolationWorldTransform?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getInterpolationWorldTransform on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtTransformRef
CxxbtSoftBodyRef.cxx_getInterpolationWorldTransform!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getInterpolationWorldTransform on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationWorldTransform(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setInterpolationWorldTransform!(
    CxxbtTransformConstRef trans
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setInterpolationWorldTransform on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationWorldTransform(
        trans
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setInterpolationLinearVelocity!(
    CxxbtVector3ConstRef linvel
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setInterpolationLinearVelocity on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationLinearVelocity(
        linvel
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setInterpolationAngularVelocity!(
    CxxbtVector3ConstRef angvel
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setInterpolationAngularVelocity on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setInterpolationAngularVelocity(
        angvel
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyRef.cxx_getInterpolationLinearVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getInterpolationLinearVelocity on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationLinearVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyRef.cxx_getInterpolationAngularVelocity?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getInterpolationAngularVelocity on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getInterpolationAngularVelocity(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getIslandTag?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getIslandTag on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getIslandTag(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setIslandTag!(
    SInt32 tag
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setIslandTag on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setIslandTag(
        tag
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getCompanionId?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getCompanionId on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCompanionId(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setCompanionId!(
    SInt32 id
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setCompanionId on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCompanionId(
        id
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getWorldArrayIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getWorldArrayIndex on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getWorldArrayIndex(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setWorldArrayIndex!(
    SInt32 ix
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setWorldArrayIndex on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setWorldArrayIndex(
        ix
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getHitFraction?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getHitFraction on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getHitFraction(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setHitFraction!(
    Float32 hitFraction
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setHitFraction on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setHitFraction(
        hitFraction
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getCollisionFlags?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getCollisionFlags on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCollisionFlags(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setCollisionFlags!(
    SInt32 flags
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setCollisionFlags on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCollisionFlags(
        flags
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getCcdSweptSphereRadius?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getCcdSweptSphereRadius on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSweptSphereRadius(
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setCcdSweptSphereRadius!(
    Float32 radius
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setCcdSweptSphereRadius on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCcdSweptSphereRadius(
        radius
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getCcdMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getCcdMotionThreshold on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdMotionThreshold(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getCcdSquareMotionThreshold?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getCcdSquareMotionThreshold on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCcdSquareMotionThreshold(
        );
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setCcdMotionThreshold!(
    Float32 ccdMotionThreshold
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setCcdMotionThreshold on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyRef.cxx_getUserPointer?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getUserPointer on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserPointer(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getUserIndex?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getUserIndex on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getUserIndex2?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getUserIndex2 on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUserIndex2(
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setUserPointer!(
    Data userPointer
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setUserPointer on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserPointer(
        userPointer
        );
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setUserIndex!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setUserIndex on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserIndex(
        index
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setUserIndex2!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setUserIndex2 on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setUserIndex2(
        index
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_getUpdateRevisionInternal?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getUpdateRevisionInternal on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getUpdateRevisionInternal(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setCustomDebugColor!(
    CxxbtVector3ConstRef colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setCustomDebugColor on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_setCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_removeCustomDebugColor!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_removeCustomDebugColor on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btCollisionObject }.cxx_removeCustomDebugColor(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_getCustomDebugColor?(
    CxxbtVector3Ref colorRGB
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getCustomDebugColor on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_getCustomDebugColor(
        colorRGB
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_checkCollideWith?(
    btCollisionObject co
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_checkCollideWith on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btCollisionObject }.cxx_checkCollideWith(
        co
        );
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getCcdSweptSphereRadius?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSweptSphereRadius(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.isStaticOrKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticOrKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.getAnisotropicFriction?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getAnisotropicFriction(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

///Swept sphere radius (0.0 by default), see btConvexConvexAlgorithm::
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setCcdSweptSphereRadius!(
    in
    Float32
    radius
    
    
    )
{   
    
    
    this.cxx_setCcdSweptSphereRadius(
        radius
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyRef.getWorldTransform!(
    )
{   
    CxxbtTransformRef __res_cxx = 
    this.cxx_getWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getCcdSquareMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdSquareMotionThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setSpinningFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setSpinningFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setWorldArrayIndex!(
    in
    SInt32
    ix
    
    
    )
{   
    
    
    this.cxx_setWorldArrayIndex(
        ix
        );
    
    
    
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions.
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyRef.internalGetExtensionPointer?(
    )
{   
    Data __res = 
    this.cxx_internalGetExtensionPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getUserIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getUpdateRevisionInternal?(
    )
{   
    SInt32 __res = 
    this.cxx_getUpdateRevisionInternal(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setInterpolationWorldTransform!(
    in
    btTransform
    trans
    
    
    )
{   
    
    CxxbtTransformConstRef trans__cxx = Make_CxxbtTransformConstRef(trans);
    
    this.cxx_setInterpolationWorldTransform(
        trans__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btCollisionShape
CxxbtSoftBodyRef.getCollisionShape?(
    )
{   
    btCollisionShape __res = 
    this.cxx_getCollisionShape(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.removeCustomDebugColor!(
    )
{   
    
    this.cxx_removeCustomDebugColor(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getCcdMotionThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getCcdMotionThreshold(
        );
    
    return __res;
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setUserPointer!(
    in
    Data
    userPointer
    
    
    )
{   
    
    
    this.cxx_setUserPointer(
        userPointer
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setCustomDebugColor!(
    in
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3ConstRef colorRGB__cxx = Make_CxxbtVector3ConstRef(colorRGB);
    
    this.cxx_setCustomDebugColor(
        colorRGB__cxx
        );
    
    
    
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal
Data
CxxbtSoftBodyRef.getUserPointer?(
    )
{   
    Data __res = 
    this.cxx_getUserPointer(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.getInterpolationLinearVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationLinearVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setInterpolationLinearVelocity!(
    in
    btVector3
    linvel
    
    
    )
{   
    
    CxxbtVector3ConstRef linvel__cxx = Make_CxxbtVector3ConstRef(linvel);
    
    this.cxx_setInterpolationLinearVelocity(
        linvel__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getContactStiffness?(
    )
{   
    Float32 __res = 
    this.cxx_getContactStiffness(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyRef.getInterpolationWorldTransform?(
    )
{   
    CxxbtTransformConstRef __res_cxx = 
    this.cxx_getInterpolationWorldTransform(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtTransformConstRef';
    btTransform __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getContactDamping?(
    )
{   
    Float32 __res = 
    this.cxx_getContactDamping(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getCollisionFlags?(
    )
{   
    SInt32 __res = 
    this.cxx_getCollisionFlags(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getWorldArrayIndex?(
    )
{   
    SInt32 __res = 
    this.cxx_getWorldArrayIndex(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.hasAnisotropicFriction?(
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        frictionMode
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setRollingFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setRollingFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getRestitution?(
    )
{   
    Float32 __res = 
    this.cxx_getRestitution(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.hasAnisotropicFriction?(
    )
{   
    Boolean __res = 
    this.cxx_hasAnisotropicFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.mergesSimulationIslands?(
    )
{   
    Boolean __res = 
    this.cxx_mergesSimulationIslands(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setBroadphaseHandle!(
    in
    btBroadphaseProxy
    handle
    
    
    )
{   
    
    
    this.cxx_setBroadphaseHandle(
        handle
        );
    
    
    
}

///the constraint solver can discard solving contacts, if the distance is above this threshold. 0 by default.
///Note that using contacts with positive distance can improve stability. It increases, however, the chance of colliding with degerate contacts, such as 'interior' triangle edges
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setContactProcessingThreshold!(
    in
    Float32
    contactProcessingThreshold
    
    
    )
{   
    
    
    this.cxx_setContactProcessingThreshold(
        contactProcessingThreshold
        );
    
    
    
}

///users can point to their objects, userPointer is not used by Bullet
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setUserIndex!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex(
        index
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.isStaticObject?(
    )
{   
    Boolean __res = 
    this.cxx_isStaticObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setInterpolationAngularVelocity!(
    in
    btVector3
    angvel
    
    
    )
{   
    
    CxxbtVector3ConstRef angvel__cxx = Make_CxxbtVector3ConstRef(angvel);
    
    this.cxx_setInterpolationAngularVelocity(
        angvel__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.isActive?(
    )
{   
    Boolean __res = 
    this.cxx_isActive(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setCompanionId!(
    in
    SInt32
    id
    
    
    )
{   
    
    
    this.cxx_setCompanionId(
        id
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.activate?(
    in
    Boolean
    forceActivation
    
    
    )
{   
    
    
    this.cxx_activate(
        forceActivation
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setDeactivationTime!(
    in
    Float32
    time
    
    
    )
{   
    
    
    this.cxx_setDeactivationTime(
        time
        );
    
    
    
}

/// Don't do continuous collision detection if the motion (in one step) is less then m_ccdMotionThreshold
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setCcdMotionThreshold!(
    in
    Float32
    ccdMotionThreshold
    
    
    )
{   
    
    
    this.cxx_setCcdMotionThreshold(
        ccdMotionThreshold
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setRestitution!(
    in
    Float32
    rest
    
    
    )
{   
    
    
    this.cxx_setRestitution(
        rest
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.getCustomDebugColor?(
    io
    btVector3
    colorRGB
    
    
    )
{   
    
    CxxbtVector3Ref colorRGB__cxx = Make_CxxbtVector3Ref(colorRGB);
    Boolean __res = 
    this.cxx_getCustomDebugColor(
        colorRGB__cxx
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getSpinningFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getSpinningFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.hasContactResponse?(
    )
{   
    Boolean __res = 
    this.cxx_hasContactResponse(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getUserIndex2?(
    )
{   
    SInt32 __res = 
    this.cxx_getUserIndex2(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.forceActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_forceActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.getInterpolationAngularVelocity?(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getInterpolationAngularVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal
btBroadphaseProxy
CxxbtSoftBodyRef.getBroadphaseHandle!(
    )
{   
    btBroadphaseProxy __res = 
    this.cxx_getBroadphaseHandle(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setHitFraction!(
    in
    Float32
    hitFraction
    
    
    )
{   
    
    
    this.cxx_setHitFraction(
        hitFraction
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setWorldTransform!(
    in
    btTransform
    worldTrans
    
    
    )
{   
    
    CxxbtTransformConstRef worldTrans__cxx = Make_CxxbtTransformConstRef(worldTrans);
    
    this.cxx_setWorldTransform(
        worldTrans__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.isKinematicObject?(
    )
{   
    Boolean __res = 
    this.cxx_isKinematicObject(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setIslandTag!(
    in
    SInt32
    tag
    
    
    )
{   
    
    
    this.cxx_setIslandTag(
        tag
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getContactProcessingThreshold?(
    )
{   
    Float32 __res = 
    this.cxx_getContactProcessingThreshold(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setContactStiffnessAndDamping!(
    in
    Float32
    stiffness
    
    ,
    in
    Float32
    damping
    
    
    )
{   
    
    
    
    this.cxx_setContactStiffnessAndDamping(
        stiffness,
        damping
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getActivationState?(
    )
{   
    SInt32 __res = 
    this.cxx_getActivationState(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getRollingFriction?(
    )
{   
    Float32 __res = 
    this.cxx_getRollingFriction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setUserIndex2!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_setUserIndex2(
        index
        );
    
    
    
}

///reserved for Bullet internal usage
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getInternalType?(
    )
{   
    SInt32 __res = 
    this.cxx_getInternalType(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.checkCollideWith?(
    in
    btCollisionObject
    co
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_checkCollideWith(
        co
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setAnisotropicFriction!(
    in
    btVector3
    anisotropicFriction
    
    ,
    in
    SInt32
    frictionMode
    
    
    )
{   
    
    CxxbtVector3ConstRef anisotropicFriction__cxx = Make_CxxbtVector3ConstRef(anisotropicFriction);
    
    
    this.cxx_setAnisotropicFriction(
        anisotropicFriction__cxx,
        frictionMode
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.activate?(
    )
{   
    
    this.cxx_activate(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setFriction!(
    in
    Float32
    frict
    
    
    )
{   
    
    
    this.cxx_setFriction(
        frict
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getDeactivationTime?(
    )
{   
    Float32 __res = 
    this.cxx_getDeactivationTime(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setIgnoreCollisionCheck!(
    in
    btCollisionObject
    co
    
    ,
    in
    Boolean
    ignoreCollisionCheck
    
    
    )
{   
    
    
    
    this.cxx_setIgnoreCollisionCheck(
        co,
        ignoreCollisionCheck
        );
    
    
    
    
}

///Avoid using this internal API call, the extension pointer is used by some Bullet extensions
///If you need to store your own user pointer, use 'setUserPointer/getUserPointer' instead.
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.internalSetExtensionPointer!(
    in
    Data
    pointer
    
    
    )
{   
    
    
    this.cxx_internalSetExtensionPointer(
        pointer
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getHitFraction?(
    )
{   
    Float32 __res = 
    this.cxx_getHitFraction(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getIslandTag?(
    )
{   
    SInt32 __res = 
    this.cxx_getIslandTag(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.getCompanionId?(
    )
{   
    SInt32 __res = 
    this.cxx_getCompanionId(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setActivationState?(
    in
    SInt32
    newState
    
    
    )
{   
    
    
    this.cxx_setActivationState(
        newState
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setCollisionFlags!(
    in
    SInt32
    flags
    
    
    )
{   
    
    
    this.cxx_setCollisionFlags(
        flags
        );
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyRef] EDK[CxxbtSoftBodyMutableRef] LIB[btSoftBody * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo CxxbtSoftBodyRef.cxx_get_m_worldInfo()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_get_m_worldInfo on null CxxbtSoftBodyRef";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_worldInfo();
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
CxxbtSoftBodyRef.get_m_worldInfo()
{
    btSoftBodyWorldInfo __res = 
    this.cxx_get_m_worldInfo();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.cxx_set_m_worldInfo!(btSoftBodyWorldInfo value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_set_m_worldInfo on null CxxbtSoftBodyRef";
    this.ptr.data()->{ btSoftBody }.cxx_set_m_worldInfo(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.set_m_worldInfo!(
    btSoftBodyWorldInfo value
   )
{
    
    this.cxx_set_m_worldInfo(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btTransform CxxbtSoftBodyRef.cxx_get_m_initialWorldTransform()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_get_m_initialWorldTransform on null CxxbtSoftBodyRef";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_initialWorldTransform();
}

/// \dfgPresetOmit
/// \internal
btTransform
CxxbtSoftBodyRef.get_m_initialWorldTransform()
{
    btTransform __res = 
    this.cxx_get_m_initialWorldTransform();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.cxx_set_m_initialWorldTransform!(btTransform value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_set_m_initialWorldTransform on null CxxbtSoftBodyRef";
    this.ptr.data()->{ btSoftBody }.cxx_set_m_initialWorldTransform(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.set_m_initialWorldTransform!(
    btTransform value
   )
{
    
    this.cxx_set_m_initialWorldTransform(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
btVector3 CxxbtSoftBodyRef.cxx_get_m_windVelocity()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_get_m_windVelocity on null CxxbtSoftBodyRef";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_windVelocity();
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.get_m_windVelocity()
{
    btVector3 __res = 
    this.cxx_get_m_windVelocity();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.cxx_set_m_windVelocity!(btVector3 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_set_m_windVelocity on null CxxbtSoftBodyRef";
    this.ptr.data()->{ btSoftBody }.cxx_set_m_windVelocity(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.set_m_windVelocity!(
    btVector3 value
   )
{
    
    this.cxx_set_m_windVelocity(
        value
        );
    
}


/// \dfgPresetOmit
/// \internal
Float32 CxxbtSoftBodyRef.cxx_get_m_restLengthScale()
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_get_m_restLengthScale on null CxxbtSoftBodyRef";
    return this.ptr.data()->{ btSoftBody }.cxx_get_m_restLengthScale();
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.get_m_restLengthScale()
{
    Float32 __res = 
    this.cxx_get_m_restLengthScale();
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.cxx_set_m_restLengthScale!(Float32 value)
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_set_m_restLengthScale on null CxxbtSoftBodyRef";
    this.ptr.data()->{ btSoftBody }.cxx_set_m_restLengthScale(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.set_m_restLengthScale!(
    Float32 value
   )
{
    
    this.cxx_set_m_restLengthScale(
        value
        );
    
}


//////////////////////////////////////////////////////////////////////////////
// KL[CxxbtSoftBodyRef] EDK[CxxbtSoftBodyMutableRef] LIB[btSoftBody * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_initDefaults!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_initDefaults on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_initDefaults(
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
CxxbtSoftBodyRef.cxx_getWorldInfo!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getWorldInfo on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getWorldInfo(
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_checkLink?(
    SInt32 node0,
    SInt32 node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_checkLink on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_checkLink?(
    btSoftBody_Node node0,
    btSoftBody_Node node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_checkLink on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_checkFace?(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_checkFace on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_checkFace(
        node0,
        node1,
        node2
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Material
CxxbtSoftBodyRef.cxx_appendMaterial!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendMaterial on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_appendMaterial(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c,
        n0
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c,
        n0,
        n1
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1,
    btSoftBody_Node n2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c,
        n0,
        n1,
        n2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    CxxbtVector4ConstRef c,
    btSoftBody_Node n0,
    btSoftBody_Node n1,
    btSoftBody_Node n2,
    btSoftBody_Node n3
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        c,
        n0,
        n1,
        n2,
        n3
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Node feature
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        feature
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Link feature
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        feature
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNote!(
    CxxCharConstPtr text,
    CxxbtVector3ConstRef o,
    btSoftBody_Face feature
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNote on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNote(
        text,
        o,
        feature
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendNode!(
    CxxbtVector3ConstRef x,
    Float32 m
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendNode on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendNode(
        x,
        m
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    SInt32 model
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        model
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    SInt32 model,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        model,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    SInt32 node0,
    SInt32 node1,
    btSoftBody_Material mat,
    Boolean bcheckexist
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    btSoftBody_Material mat,
    Boolean bcheckexist
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLink on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendFace!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendFace on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendFace!(
    SInt32 model
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendFace on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        model
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendFace!(
    SInt32 model,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendFace on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        model,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendFace!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendFace on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        node0,
        node1,
        node2
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendFace!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendFace on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendFace(
        node0,
        node1,
        node2,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendTetra!(
    SInt32 model,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendTetra on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendTetra(
        model,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendTetra!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    SInt32 node3
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendTetra on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendTetra!(
    SInt32 node0,
    SInt32 node1,
    SInt32 node2,
    SInt32 node3,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendTetra on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendAnchor on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    Boolean disableCollisionBetweenLinkedBodies
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendAnchor on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    Boolean disableCollisionBetweenLinkedBodies,
    Float32 influence
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendAnchor on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies,
        influence
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendAnchor on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        localPivot
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot,
    Boolean disableCollisionBetweenLinkedBodies
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendAnchor on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        localPivot,
        disableCollisionBetweenLinkedBodies
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendAnchor!(
    SInt32 node,
    btRigidBody body,
    CxxbtVector3ConstRef localPivot,
    Boolean disableCollisionBetweenLinkedBodies,
    Float32 influence
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendAnchor on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAnchor(
        node,
        body,
        localPivot,
        disableCollisionBetweenLinkedBodies,
        influence
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLinearJoint!(
    btSoftBody_LJoint_Specs specs
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLinearJoint on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLinearJoint(
        specs
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendLinearJoint!(
    btSoftBody_LJoint_Specs specs,
    btSoftBody body
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendLinearJoint on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendLinearJoint(
        specs,
        body
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendAngularJoint!(
    btSoftBody_AJoint_Specs specs
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendAngularJoint on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAngularJoint(
        specs
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_appendAngularJoint!(
    btSoftBody_AJoint_Specs specs,
    btSoftBody body
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_appendAngularJoint on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_appendAngularJoint(
        specs,
        body
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_addForce!(
    CxxbtVector3ConstRef force
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_addForce on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_addForce(
        force
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_addForce!(
    CxxbtVector3ConstRef force,
    SInt32 node
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_addForce on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_addForce(
        force,
        node
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_addAeroForceToNode!(
    CxxbtVector3ConstRef windVelocity,
    SInt32 nodeIndex
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_addAeroForceToNode on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_addAeroForceToNode(
        windVelocity,
        nodeIndex
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_addAeroForceToFace!(
    CxxbtVector3ConstRef windVelocity,
    SInt32 faceIndex
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_addAeroForceToFace on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_addAeroForceToFace(
        windVelocity,
        faceIndex
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_addVelocity!(
    CxxbtVector3ConstRef velocity
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_addVelocity on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_addVelocity(
        velocity
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setVelocity!(
    CxxbtVector3ConstRef velocity
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setVelocity on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setVelocity(
        velocity
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_addVelocity!(
    CxxbtVector3ConstRef velocity,
    SInt32 node
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_addVelocity on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_addVelocity(
        velocity,
        node
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setMass!(
    SInt32 node,
    Float32 mass
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setMass on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setMass(
        node,
        mass
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getMass?(
    SInt32 node
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getMass on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getMass(
        node
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getTotalMass?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getTotalMass on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getTotalMass(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setTotalMass!(
    Float32 mass
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setTotalMass on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setTotalMass(
        mass
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setTotalMass!(
    Float32 mass,
    Boolean fromfaces
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setTotalMass on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setTotalMass(
        mass,
        fromfaces
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setTotalDensity!(
    Float32 density
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setTotalDensity on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setTotalDensity(
        density
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setVolumeMass!(
    Float32 mass
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setVolumeMass on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setVolumeMass(
        mass
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setVolumeDensity!(
    Float32 density
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setVolumeDensity on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setVolumeDensity(
        density
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_transform!(
    CxxbtTransformConstRef trs
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_transform on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_transform(
        trs
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_translate!(
    CxxbtVector3ConstRef trs
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_translate on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_translate(
        trs
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_rotate!(
    CxxbtQuaternionConstRef rot
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_rotate on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_rotate(
        rot
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_scale!(
    CxxbtVector3ConstRef scl
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_scale on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_scale(
        scl
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getRestLengthScale!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getRestLengthScale on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getRestLengthScale(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setRestLengthScale!(
    Float32 restLength
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setRestLengthScale on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setRestLengthScale(
        restLength
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setPose!(
    Boolean bvolume,
    Boolean bframe
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setPose on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setPose(
        bvolume,
        bframe
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_resetLinkRestLengths!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_resetLinkRestLengths on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_resetLinkRestLengths(
        );
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.cxx_getVolume?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getVolume on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getVolume(
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_clusterCount?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_clusterCount on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_clusterCount(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.cxx_clusterCom?(
    SInt32 cluster
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_clusterCom on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_clusterCom(
        cluster
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_generateBendingConstraints!(
    SInt32 distance
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_generateBendingConstraints on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_generateBendingConstraints(
        distance
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_generateBendingConstraints!(
    SInt32 distance,
    btSoftBody_Material mat
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_generateBendingConstraints on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_generateBendingConstraints(
        distance,
        mat
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_randomizeConstraints!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_randomizeConstraints on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_randomizeConstraints(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_releaseCluster!(
    SInt32 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_releaseCluster on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_releaseCluster(
        index
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_releaseClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_releaseClusters on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_releaseClusters(
        );
}

///generateClusters with k=0 will create a convex cluster for each tetrahedron or triangle
// 
///otherwise an approximation will be used (better performance)
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_generateClusters!(
    SInt32 k
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_generateClusters on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_generateClusters(
        k
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_generateClusters!(
    SInt32 k,
    SInt32 maxiterations
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_generateClusters on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_generateClusters(
        k,
        maxiterations
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_refine!(
    btSoftBody_ImplicitFn ifn,
    Float32 accurary,
    Boolean cut
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_refine on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_refine(
        ifn,
        accurary,
        cut
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_cutLink!(
    SInt32 node0,
    SInt32 node1,
    Float32 position
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_cutLink on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_cutLink(
        node0,
        node1,
        position
        );
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_cutLink!(
    btSoftBody_Node node0,
    btSoftBody_Node node1,
    Float32 position
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_cutLink on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_cutLink(
        node0,
        node1,
        position
        );
}

///Ray casting using rayFrom and rayTo in worldspace, (not direction!)
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cxx_rayTest!(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    btSoftBody_sRayCast results
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_rayTest on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_rayTest(
        rayFrom,
        rayTo,
        results
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setSolver!(
    btSoftBody_eSolverPresets__ preset
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setSolver on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setSolver(
        preset
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_predictMotion!(
    Float32 dt
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_predictMotion on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_predictMotion(
        dt
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_solveConstraints!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_solveConstraints on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_solveConstraints(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_staticSolve!(
    SInt32 iterations
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_staticSolve on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_staticSolve(
        iterations
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_integrateMotion!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_integrateMotion on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_integrateMotion(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_defaultCollisionHandler!(
    btSoftBody psb
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_defaultCollisionHandler on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_defaultCollisionHandler(
        psb
        );
}

/**

	 * Set a wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setWindVelocity!(
    CxxbtVector3ConstRef velocity
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setWindVelocity on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setWindVelocity(
        velocity
        );
}

/**

	 * Return the wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal
CxxbtVector3ConstRef
CxxbtSoftBodyRef.cxx_getWindVelocity!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getWindVelocity on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getWindVelocity(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_setSoftBodySolver!(
    btSoftBodySolver softBodySolver
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_setSoftBodySolver on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_setSoftBodySolver(
        softBodySolver
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
CxxbtSoftBodyRef.cxx_getSoftBodySolver!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getSoftBodySolver on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getSoftBodySolver(
        );
}

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
CxxbtSoftBodyRef.cxx_getSoftBodySolver?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_getSoftBodySolver on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_getSoftBodySolver(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_pointersToIndices!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_pointersToIndices on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_pointersToIndices(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_indicesToPointers!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_indicesToPointers on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_indicesToPointers(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_indicesToPointers!(
    CxxSInt32ConstPtr map
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_indicesToPointers on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_indicesToPointers(
        map
        );
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.cxx_rayTest?(
    CxxbtVector3ConstRef rayFrom,
    CxxbtVector3ConstRef rayTo,
    CxxFloat32Ref mint,
    CxxbtSoftBody_eFeature__Ref feature,
    CxxSInt32Ref index,
    Boolean bcountonly
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_rayTest on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_rayTest(
        rayFrom,
        rayTo,
        mint,
        feature,
        index,
        bcountonly
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_initializeFaceTree!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_initializeFaceTree on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_initializeFaceTree(
        );
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.cxx_evaluateCom?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_evaluateCom on null CxxbtSoftBodyRef";
    return
    this.ptr.data()->{ btSoftBody }.cxx_evaluateCom(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_updateNormals!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_updateNormals on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateNormals(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_updateBounds!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_updateBounds on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateBounds(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_updatePose!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_updatePose on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_updatePose(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_updateConstants!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_updateConstants on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateConstants(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_updateLinkConstants!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_updateLinkConstants on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateLinkConstants(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_updateArea!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_updateArea on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateArea(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_updateArea!(
    Boolean averageArea
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_updateArea on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateArea(
        averageArea
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_initializeClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_initializeClusters on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_initializeClusters(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_updateClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_updateClusters on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_updateClusters(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_cleanupClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_cleanupClusters on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_cleanupClusters(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_prepareClusters!(
    SInt32 iterations
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_prepareClusters on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_prepareClusters(
        iterations
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_solveClusters!(
    Float32 sor
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_solveClusters on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_solveClusters(
        sor
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_applyClusters!(
    Boolean drift
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_applyClusters on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_applyClusters(
        drift
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_dampClusters!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_dampClusters on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_dampClusters(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cxx_applyForces!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxbtSoftBodyRef.cxx_applyForces on null CxxbtSoftBodyRef";
    
    this.ptr.data()->{ btSoftBody }.cxx_applyForces(
        );
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.addVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_addVelocity(
        velocity__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.updateNormals!(
    )
{   
    
    this.cxx_updateNormals(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.prepareClusters!(
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    this.cxx_prepareClusters(
        iterations
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    ,
    in
    btSoftBody_Node
    n2
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1,
        n2
        );
    
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.applyForces!(
    )
{   
    
    this.cxx_applyForces(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.solveConstraints!(
    )
{   
    
    this.cxx_solveConstraints(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getTotalMass?(
    )
{   
    Float32 __res = 
    this.cxx_getTotalMass(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setVolumeMass!(
    in
    Float32
    mass
    
    
    )
{   
    
    
    this.cxx_setVolumeMass(
        mass
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getMass?(
    in
    SInt32
    node
    
    
    )
{   
    
    Float32 __res = 
    this.cxx_getMass(
        node
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.addAeroForceToFace!(
    in
    btVector3
    windVelocity
    
    ,
    in
    SInt32
    faceIndex
    
    
    )
{   
    
    CxxbtVector3ConstRef windVelocity__cxx = Make_CxxbtVector3ConstRef(windVelocity);
    
    
    this.cxx_addAeroForceToFace(
        windVelocity__cxx,
        faceIndex
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        node0,
        node1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.addVelocity!(
    in
    btVector3
    velocity
    
    ,
    in
    SInt32
    node
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    
    this.cxx_addVelocity(
        velocity__cxx,
        node
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.clusterCount?(
    )
{   
    SInt32 __res = 
    this.cxx_clusterCount(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    ,
    in
    btSoftBody_Node
    n2
    
    ,
    in
    btSoftBody_Node
    n3
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1,
        n2,
        n3
        );
    
    
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendTetra!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    SInt32
    node3
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    
    
    this.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3,
        mat
        );
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.updateConstants!(
    )
{   
    
    this.cxx_updateConstants(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        model,
        mat
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
btSoftBodySolver
CxxbtSoftBodyRef.getSoftBodySolver!(
    )
{   
    btSoftBodySolver __res = 
    this.cxx_getSoftBodySolver(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNode!(
    in
    btVector3
    x
    
    ,
    in
    Float32
    m
    
    
    )
{   
    
    CxxbtVector3ConstRef x__cxx = Make_CxxbtVector3ConstRef(x);
    
    
    this.cxx_appendNode(
        x__cxx,
        m
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.translate!(
    in
    btVector3
    trs
    
    
    )
{   
    
    CxxbtVector3ConstRef trs__cxx = Make_CxxbtVector3ConstRef(trs);
    
    this.cxx_translate(
        trs__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getRestLengthScale!(
    )
{   
    Float32 __res = 
    this.cxx_getRestLengthScale(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.indicesToPointers!(
    )
{   
    
    this.cxx_indicesToPointers(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.pointersToIndices!(
    )
{   
    
    this.cxx_pointersToIndices(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.refine!(
    in
    btSoftBody_ImplicitFn
    ifn
    
    ,
    in
    Float32
    accurary
    
    ,
    in
    Boolean
    cut
    
    
    )
{   
    
    
    
    
    this.cxx_refine(
        ifn,
        accurary,
        cut
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    ,
    in
    Float32
    influence
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx,
        disableCollisionBetweenLinkedBodies,
        influence
        );
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.generateClusters!(
    in
    SInt32
    k
    
    ,
    in
    SInt32
    maxiterations
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_generateClusters(
        k,
        maxiterations
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Face
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.defaultCollisionHandler!(
    in
    btSoftBody
    psb
    
    
    )
{   
    
    
    this.cxx_defaultCollisionHandler(
        psb
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.updateLinkConstants!(
    )
{   
    
    this.cxx_updateLinkConstants(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
btSoftBodyWorldInfo
CxxbtSoftBodyRef.getWorldInfo!(
    )
{   
    btSoftBodyWorldInfo __res = 
    this.cxx_getWorldInfo(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendAngularJoint!(
    in
    btSoftBody_AJoint_Specs
    specs
    
    
    )
{   
    
    
    this.cxx_appendAngularJoint(
        specs
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setSoftBodySolver!(
    in
    btSoftBodySolver
    softBodySolver
    
    
    )
{   
    
    
    this.cxx_setSoftBodySolver(
        softBodySolver
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setPose!(
    in
    Boolean
    bvolume
    
    ,
    in
    Boolean
    bframe
    
    
    )
{   
    
    
    
    this.cxx_setPose(
        bvolume,
        bframe
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setTotalMass!(
    in
    Float32
    mass
    
    
    )
{   
    
    
    this.cxx_setTotalMass(
        mass
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendFace!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    
    )
{   
    
    
    
    
    this.cxx_appendFace(
        node0,
        node1,
        node2
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    btVector3
    localPivot
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    
    )
{   
    
    
    
    CxxbtVector3ConstRef localPivot__cxx = Make_CxxbtVector3ConstRef(localPivot);
    
    
    this.cxx_appendAnchor(
        node,
        body,
        localPivot__cxx,
        disableCollisionBetweenLinkedBodies
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    ,
    in
    Float32
    influence
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies,
        influence
        );
    
    
    
    
    
    
}

///generateClusters with k=0 will create a convex cluster for each tetrahedron or triangle
// 
///otherwise an approximation will be used (better performance)
/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.generateClusters!(
    in
    SInt32
    k
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_generateClusters(
        k
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.updatePose!(
    )
{   
    
    this.cxx_updatePose(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.rotate!(
    in
    btQuaternion
    rot
    
    
    )
{   
    
    CxxbtQuaternionConstRef rot__cxx = Make_CxxbtQuaternionConstRef(rot);
    
    this.cxx_rotate(
        rot__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendAngularJoint!(
    in
    btSoftBody_AJoint_Specs
    specs
    
    ,
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendAngularJoint(
        specs,
        body
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLinearJoint!(
    in
    btSoftBody_LJoint_Specs
    specs
    
    
    )
{   
    
    
    this.cxx_appendLinearJoint(
        specs
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.integrateMotion!(
    )
{   
    
    this.cxx_integrateMotion(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    in
    SInt32
    model
    
    
    )
{   
    
    
    this.cxx_appendLink(
        model
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.updateArea!(
    in
    Boolean
    averageArea
    
    
    )
{   
    
    
    this.cxx_updateArea(
        averageArea
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.updateClusters!(
    )
{   
    
    this.cxx_updateClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.generateBendingConstraints!(
    in
    SInt32
    distance
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    SInt32 __res = 
    this.cxx_generateBendingConstraints(
        distance,
        mat
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.checkLink?(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    ,
    in
    Boolean
    disableCollisionBetweenLinkedBodies
    
    
    )
{   
    
    
    
    
    this.cxx_appendAnchor(
        node,
        body,
        disableCollisionBetweenLinkedBodies
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setTotalDensity!(
    in
    Float32
    density
    
    
    )
{   
    
    
    this.cxx_setTotalDensity(
        density
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.releaseClusters!(
    )
{   
    
    this.cxx_releaseClusters(
        );
    
    
}

/**

	 * Set a wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setWindVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_setWindVelocity(
        velocity__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.resetLinkRestLengths!(
    )
{   
    
    this.cxx_resetLinkRestLengths(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.solveClusters!(
    in
    Float32
    sor
    
    
    )
{   
    
    
    this.cxx_solveClusters(
        sor
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.staticSolve!(
    in
    SInt32
    iterations
    
    
    )
{   
    
    
    this.cxx_staticSolve(
        iterations
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.evaluateCom?(
    )
{   
    btVector3 __res = 
    this.cxx_evaluateCom(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.addForce!(
    in
    btVector3
    force
    
    
    )
{   
    
    CxxbtVector3ConstRef force__cxx = Make_CxxbtVector3ConstRef(force);
    
    this.cxx_addForce(
        force__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.initDefaults!(
    )
{   
    
    this.cxx_initDefaults(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.updateArea!(
    )
{   
    
    this.cxx_updateArea(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.dampClusters!(
    )
{   
    
    this.cxx_dampClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendAnchor!(
    in
    SInt32
    node
    
    ,
    in
    btRigidBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendAnchor(
        node,
        body
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.transform!(
    in
    btTransform
    trs
    
    
    )
{   
    
    CxxbtTransformConstRef trs__cxx = Make_CxxbtTransformConstRef(trs);
    
    this.cxx_transform(
        trs__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.addAeroForceToNode!(
    in
    btVector3
    windVelocity
    
    ,
    in
    SInt32
    nodeIndex
    
    
    )
{   
    
    CxxbtVector3ConstRef windVelocity__cxx = Make_CxxbtVector3ConstRef(windVelocity);
    
    
    this.cxx_addAeroForceToNode(
        windVelocity__cxx,
        nodeIndex
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.checkLink?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    
    )
{   
    
    
    Boolean __res = 
    this.cxx_checkLink(
        node0,
        node1
        );
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.rayTest?(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    io
    Float32
    mint
    
    ,
    io
    btSoftBody_eFeature__
    feature
    
    ,
    io
    SInt32
    index
    
    ,
    in
    Boolean
    bcountonly
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    CxxFloat32Ref mint__cxx = Make_CxxFloat32Ref(mint);
    
    CxxbtSoftBody_eFeature__Ref feature__cxx = Make_CxxbtSoftBody_eFeature__Ref(feature);
    
    CxxSInt32Ref index__cxx = Make_CxxSInt32Ref(index);
    
    SInt32 __res = 
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        mint__cxx,
        feature__cxx,
        index__cxx,
        bcountonly
        );
    
    
    
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendTetra!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    SInt32
    node3
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendTetra(
        node0,
        node1,
        node2,
        node3
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.initializeFaceTree!(
    )
{   
    
    this.cxx_initializeFaceTree(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setMass!(
    in
    SInt32
    node
    
    ,
    in
    Float32
    mass
    
    
    )
{   
    
    
    
    this.cxx_setMass(
        node,
        mass
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setTotalMass!(
    in
    Float32
    mass
    
    ,
    in
    Boolean
    fromfaces
    
    
    )
{   
    
    
    
    this.cxx_setTotalMass(
        mass,
        fromfaces
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setSolver!(
    in
    btSoftBody_eSolverPresets__
    preset
    
    
    )
{   
    
    
    this.cxx_setSolver(
        preset
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Link
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setVolumeDensity!(
    in
    Float32
    density
    
    
    )
{   
    
    
    this.cxx_setVolumeDensity(
        density
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btSoftBody_Node
    feature
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        feature
        );
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.scale!(
    in
    btVector3
    scl
    
    
    )
{   
    
    CxxbtVector3ConstRef scl__cxx = Make_CxxbtVector3ConstRef(scl);
    
    this.cxx_scale(
        scl__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendFace!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendFace(
        node0,
        node1,
        node2,
        mat
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
SInt32
CxxbtSoftBodyRef.generateBendingConstraints!(
    in
    SInt32
    distance
    
    
    )
{   
    
    SInt32 __res = 
    this.cxx_generateBendingConstraints(
        distance
        );
    
    
    return __res;
}

///Ray casting using rayFrom and rayTo in worldspace, (not direction!)
/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.rayTest!(
    in
    btVector3
    rayFrom
    
    ,
    in
    btVector3
    rayTo
    
    ,
    in
    btSoftBody_sRayCast
    results
    
    
    )
{   
    
    CxxbtVector3ConstRef rayFrom__cxx = Make_CxxbtVector3ConstRef(rayFrom);
    
    CxxbtVector3ConstRef rayTo__cxx = Make_CxxbtVector3ConstRef(rayTo);
    
    Boolean __res = 
    this.cxx_rayTest(
        rayFrom__cxx,
        rayTo__cxx,
        results
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.releaseCluster!(
    in
    SInt32
    index
    
    
    )
{   
    
    
    this.cxx_releaseCluster(
        index
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    ,
    in
    Boolean
    bcheckexist
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.cleanupClusters!(
    )
{   
    
    this.cxx_cleanupClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendFace!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendFace(
        model,
        mat
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLinearJoint!(
    in
    btSoftBody_LJoint_Specs
    specs
    
    ,
    in
    btSoftBody
    body
    
    
    )
{   
    
    
    
    this.cxx_appendLinearJoint(
        specs,
        body
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.initializeClusters!(
    )
{   
    
    this.cxx_initializeClusters(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    
    )
{   
    
    
    
    this.cxx_appendLink(
        node0,
        node1
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
btSoftBody_Material
CxxbtSoftBodyRef.appendMaterial!(
    )
{   
    btSoftBody_Material __res = 
    this.cxx_appendMaterial(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cutLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    Float32
    position
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_cutLink(
        node0,
        node1,
        position
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendTetra!(
    in
    SInt32
    model
    
    ,
    in
    btSoftBody_Material
    mat
    
    
    )
{   
    
    
    
    this.cxx_appendTetra(
        model,
        mat
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.addForce!(
    in
    btVector3
    force
    
    ,
    in
    SInt32
    node
    
    
    )
{   
    
    CxxbtVector3ConstRef force__cxx = Make_CxxbtVector3ConstRef(force);
    
    
    this.cxx_addForce(
        force__cxx,
        node
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.indicesToPointers!(
    in
    SInt32
    map
    
    
    )
{   
    
    CxxSInt32ConstPtr map__cxx = Make_CxxSInt32ConstPtr(map);
    
    this.cxx_indicesToPointers(
        map__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    )
{   
    
    this.cxx_appendLink(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.predictMotion!(
    in
    Float32
    dt
    
    
    )
{   
    
    
    this.cxx_predictMotion(
        dt
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.cutLink!(
    in
    btSoftBody_Node
    node0
    
    ,
    in
    btSoftBody_Node
    node1
    
    ,
    in
    Float32
    position
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_cutLink(
        node0,
        node1,
        position
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendNote!(
    in
    String
    text
    
    ,
    in
    btVector3
    o
    
    ,
    in
    btVector4
    c
    
    ,
    in
    btSoftBody_Node
    n0
    
    ,
    in
    btSoftBody_Node
    n1
    
    
    )
{   
    CxxCharConstPtr text__cxx = CxxCharConstPtr(text);
    
    CxxbtVector3ConstRef o__cxx = Make_CxxbtVector3ConstRef(o);
    
    CxxbtVector4ConstRef c__cxx = Make_CxxbtVector4ConstRef(c);
    
    
    
    this.cxx_appendNote(
        text__cxx,
        o__cxx,
        c__cxx,
        n0,
        n1
        );
    
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.clusterCom?(
    in
    SInt32
    cluster
    
    
    )
{   
    
    btVector3 __res = 
    this.cxx_clusterCom(
        cluster
        );
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendLink!(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    btSoftBody_Material
    mat
    
    ,
    in
    Boolean
    bcheckexist
    
    
    )
{   
    
    
    
    
    
    this.cxx_appendLink(
        node0,
        node1,
        mat,
        bcheckexist
        );
    
    
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setVelocity!(
    in
    btVector3
    velocity
    
    
    )
{   
    
    CxxbtVector3ConstRef velocity__cxx = Make_CxxbtVector3ConstRef(velocity);
    
    this.cxx_setVelocity(
        velocity__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendFace!(
    in
    SInt32
    model
    
    
    )
{   
    
    
    this.cxx_appendFace(
        model
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.setRestLengthScale!(
    in
    Float32
    restLength
    
    
    )
{   
    
    
    this.cxx_setRestLengthScale(
        restLength
        );
    
    
    
}

/**

	 * Return the wind velocity for interaction with the air.

	 */
/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBodyRef.getWindVelocity!(
    )
{   
    CxxbtVector3ConstRef __res_cxx = 
    this.cxx_getWindVelocity(
        );
    // if (Fabric_Guarded && !__res_cxx.cxx_isValid())
    //   throw 'Call of cxx_deref() on null CxxbtVector3ConstRef';
    btVector3 __res = __res_cxx.cxx_get();
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.updateBounds!(
    )
{   
    
    this.cxx_updateBounds(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
Float32
CxxbtSoftBodyRef.getVolume?(
    )
{   
    Float32 __res = 
    this.cxx_getVolume(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.randomizeConstraints!(
    )
{   
    
    this.cxx_randomizeConstraints(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
Boolean
CxxbtSoftBodyRef.checkFace?(
    in
    SInt32
    node0
    
    ,
    in
    SInt32
    node1
    
    ,
    in
    SInt32
    node2
    
    
    )
{   
    
    
    
    Boolean __res = 
    this.cxx_checkFace(
        node0,
        node1,
        node2
        );
    
    
    
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.applyClusters!(
    in
    Boolean
    drift
    
    
    )
{   
    
    
    this.cxx_applyClusters(
        drift
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxbtSoftBodyRef.appendFace!(
    )
{   
    
    this.cxx_appendFace(
        );
    
    
}



////////////////////////////////////////////////////////////////////////
// CxxbtSoftBodyConstPtr
// CxxbtSoftBodyPtr
// CxxbtSoftBodyConstRef
// CxxbtSoftBodyRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstPtr(btSoftBody array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstPtr(btSoftBody array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btSoftBody());
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstPtr(btSoftBody value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstPtr Make_CxxbtSoftBodyConstPtr(btSoftBody value) {
  return CxxbtSoftBodyConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr(btSoftBody array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr(btSoftBody array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btSoftBody());
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr(btSoftBody value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr Make_CxxbtSoftBodyPtr(btSoftBody value) {
  return CxxbtSoftBodyPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef(btSoftBody array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef(btSoftBody array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btSoftBody());
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef(btSoftBody value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef Make_CxxbtSoftBodyConstRef(btSoftBody value) {
  return CxxbtSoftBodyConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef(btSoftBody array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef(btSoftBody array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_btSoftBody());
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef(btSoftBody value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef Make_CxxbtSoftBodyRef(btSoftBody value) {
  return CxxbtSoftBodyRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtSoftBodyConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtSoftBodyConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtSoftBodyConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef CxxbtSoftBodyConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBodyConstPtr.cxx_getAt on null CxxbtSoftBodyConstPtr";
  return CxxbtSoftBodyConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btSoftBody()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef CxxbtSoftBodyConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtSoftBodyConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef CxxbtSoftBodyPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBodyPtr.cxx_getAt on null CxxbtSoftBodyPtr";
  return CxxbtSoftBodyRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_btSoftBody()));
}

/// Same as for CxxbtSoftBodyConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef CxxbtSoftBodyPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyPtr.cxx_setAt(Index i, btSoftBody v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBodyPtr.cxx_setAt on null CxxbtSoftBodyPtr";
  this.ptr.offset(i)->{ btSoftBody } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef(CxxbtSoftBodyConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef.=(CxxbtSoftBodyConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btSoftBody value
/// \dfgPresetOmit
/// \internal
btSoftBody CxxbtSoftBodyConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBodyConstRef.cxx_get on null CxxbtSoftBodyConstRef";
  return this.ptr.data()->{ btSoftBody };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.cxx_set(btSoftBody value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBodyRef.cxx_set on null CxxbtSoftBodyRef";
  this.ptr.data()->{ btSoftBody } = value;
}

/// Assignment of btSoftBody
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.=(btSoftBody value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtSoftBodyRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[btSoftBody_eFeature__] EDK[_Kludge_EDK_btSoftBody_eFeature__] LIB[btSoftBody::eFeature::_]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxbtSoftBody_eFeature__ConstPtr
// CxxbtSoftBody_eFeature__Ptr
// CxxbtSoftBody_eFeature__ConstRef
// CxxbtSoftBody_eFeature__Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstPtr(btSoftBody_eFeature__ array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstPtr(btSoftBody_eFeature__ array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize__Kludge_EDK_btSoftBody_eFeature__());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxbtSoftBody_eFeature__ConstPtr permits CxxbtSoftBody_eFeature__ConstPtr {
  private Data ptr;
  private btSoftBody_eFeature__ value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxbtSoftBody_eFeature__ConstPtr(btSoftBody_eFeature__ value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxbtSoftBody_eFeature__ConstPtr(io btSoftBody_eFeature__ value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstPtr(Make_CxxbtSoftBody_eFeature__ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ptr(btSoftBody_eFeature__ array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ptr(btSoftBody_eFeature__ array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize__Kludge_EDK_btSoftBody_eFeature__());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxbtSoftBody_eFeature__Ptr permits CxxbtSoftBody_eFeature__Ptr {
  private Data ptr;
  private btSoftBody_eFeature__ value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxbtSoftBody_eFeature__Ptr(btSoftBody_eFeature__ value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxbtSoftBody_eFeature__Ptr(io btSoftBody_eFeature__ value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ptr(Make_CxxbtSoftBody_eFeature__Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef(btSoftBody_eFeature__ array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef(btSoftBody_eFeature__ array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize__Kludge_EDK_btSoftBody_eFeature__());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxbtSoftBody_eFeature__ConstRef permits CxxbtSoftBody_eFeature__ConstRef {
  private Data ptr;
  private btSoftBody_eFeature__ value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxbtSoftBody_eFeature__ConstRef(btSoftBody_eFeature__ value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxbtSoftBody_eFeature__ConstRef(io btSoftBody_eFeature__ value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef(Make_CxxbtSoftBody_eFeature__ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref(btSoftBody_eFeature__ array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref(btSoftBody_eFeature__ array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize__Kludge_EDK_btSoftBody_eFeature__());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxbtSoftBody_eFeature__Ref permits CxxbtSoftBody_eFeature__Ref {
  private Data ptr;
  private btSoftBody_eFeature__ value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxbtSoftBody_eFeature__Ref(btSoftBody_eFeature__ value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxbtSoftBody_eFeature__Ref(io btSoftBody_eFeature__ value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref(Make_CxxbtSoftBody_eFeature__Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxbtSoftBody_eFeature__ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxbtSoftBody_eFeature__ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxbtSoftBody_eFeature__ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef CxxbtSoftBody_eFeature__ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBody_eFeature__ConstPtr.cxx_getAt on null CxxbtSoftBody_eFeature__ConstPtr";
  return CxxbtSoftBody_eFeature__ConstRef(this.ptr.offset(index * __CxxSize__Kludge_EDK_btSoftBody_eFeature__()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef CxxbtSoftBody_eFeature__ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxbtSoftBody_eFeature__ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref CxxbtSoftBody_eFeature__Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBody_eFeature__Ptr.cxx_getAt on null CxxbtSoftBody_eFeature__Ptr";
  return CxxbtSoftBody_eFeature__Ref(this.ptr.offset(index * __CxxSize__Kludge_EDK_btSoftBody_eFeature__()));
}

/// Same as for CxxbtSoftBody_eFeature__ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref CxxbtSoftBody_eFeature__Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ptr.cxx_setAt(Index i, btSoftBody_eFeature__ v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBody_eFeature__Ptr.cxx_setAt on null CxxbtSoftBody_eFeature__Ptr";
  this.ptr.offset(i)->{ btSoftBody_eFeature__ } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef(CxxbtSoftBody_eFeature__ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef.=(CxxbtSoftBody_eFeature__ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the btSoftBody_eFeature__ value
/// \dfgPresetOmit
/// \internal
btSoftBody_eFeature__ CxxbtSoftBody_eFeature__ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBody_eFeature__ConstRef.cxx_get on null CxxbtSoftBody_eFeature__ConstRef";
  return this.ptr->{ btSoftBody_eFeature__ };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxbtSoftBody_eFeature__ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref.cxx_set(btSoftBody_eFeature__ value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxbtSoftBody_eFeature__Ref.cxx_set on null CxxbtSoftBody_eFeature__Ref";
  this.ptr->{ btSoftBody_eFeature__ } = value;
}

/// Assignment of btSoftBody_eFeature__
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref.=(btSoftBody_eFeature__ value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_eFeature__Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBody_getNumNodes] C++[btSoftBody_getNumNodes]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxbtSoftBody_getNumNodes(
    btSoftBody _arg0
    ) = "Bullet2_btSoftBody_getNumNodes_d65b1e0613d0632fda089cdd25fb0d5f";

UInt64
btSoftBody_getNumNodes(
    in
    btSoftBody
    _arg0
    
    
    )
{
    
    UInt64 __res = 
    CxxbtSoftBody_getNumNodes(
        _arg0
        );
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBody_getConfig] C++[btSoftBody_getConfig]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btSoftBody_Config
CxxbtSoftBody_getConfig(
    btSoftBody _arg0
    ) = "Bullet2_btSoftBody_getConfig_43be7c9abd6b2096885541258ee8a9b1";

btSoftBody_Config
btSoftBody_getConfig(
    in
    btSoftBody
    _arg0
    
    
    )
{
    
    btSoftBody_Config __res = 
    CxxbtSoftBody_getConfig(
        _arg0
        );
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBody_getPosition] C++[btSoftBody_getPosition]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBody_getPosition(
    btSoftBody _arg0,
    SInt32 _arg1
    ) = "Bullet2_btSoftBody_getPosition_279d5dae4367ac28f5876be0225744ef";

btVector3
btSoftBody_getPosition(
    in
    btSoftBody
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{
    
    
    btVector3 __res = 
    CxxbtSoftBody_getPosition(
        _arg0,
        _arg1
        );
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBody_getVelocity] C++[btSoftBody_getVelocity]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
btVector3
CxxbtSoftBody_getVelocity(
    btSoftBody _arg0,
    SInt32 _arg1
    ) = "Bullet2_btSoftBody_getVelocity_fea7d6585b5cc9402a9d02a71a218b94";

btVector3
btSoftBody_getVelocity(
    in
    btSoftBody
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    )
{
    
    
    btVector3 __res = 
    CxxbtSoftBody_getVelocity(
        _arg0,
        _arg1
        );
    
    
    
    return __res;
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBody_setVelocity] C++[btSoftBody_setVelocity]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBody_setVelocity(
    btSoftBody _arg0,
    SInt32 _arg1,
    btVector3 _arg2
    ) = "Bullet2_btSoftBody_setVelocity_b1ec3a6ad9a0ad5771fd3e7f2db57644";


btSoftBody_setVelocity(
    in
    btSoftBody
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    in
    btVector3
    _arg2
    
    
    )
{
    
    
    
    
    CxxbtSoftBody_setVelocity(
        _arg0,
        _arg1,
        _arg2
        );
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBody_getPositionsVelocities] C++[btSoftBody_getPositionsVelocities]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBody_getPositionsVelocities(
    btSoftBody _arg0,
    SInt32 _arg1,
    CxxFloat32Ptr _arg2,
    SInt32 _arg3,
    CxxFloat32Ptr _arg4
    ) = "Bullet2_btSoftBody_getPositionsVelocities_12fe069c262545070fa33c134ec9e695";


btSoftBody_getPositionsVelocities(
    in
    btSoftBody
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    io
    Float32
    _arg2
    
    ,
    in
    SInt32
    _arg3
    
    ,
    io
    Float32
    _arg4
    
    
    )
{
    
    
    
    CxxFloat32Ptr _arg2__cxx = Make_CxxFloat32Ptr(_arg2);
    
    
    CxxFloat32Ptr _arg4__cxx = Make_CxxFloat32Ptr(_arg4);
    
    CxxbtSoftBody_getPositionsVelocities(
        _arg0,
        _arg1,
        _arg2__cxx,
        _arg3,
        _arg4__cxx
        );
    
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Function KL[btSoftBody_setPositionsVelocities] C++[btSoftBody_setPositionsVelocities]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal

CxxbtSoftBody_setPositionsVelocities(
    btSoftBody _arg0,
    SInt32 _arg1,
    CxxFloat32Ptr _arg2,
    SInt32 _arg3,
    CxxFloat32Ptr _arg4
    ) = "Bullet2_btSoftBody_setPositionsVelocities_6d8da01b3cee01e28f23d45c745cccad";


btSoftBody_setPositionsVelocities(
    in
    btSoftBody
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    ,
    io
    Float32
    _arg2
    
    ,
    in
    SInt32
    _arg3
    
    ,
    io
    Float32
    _arg4
    
    
    )
{
    
    
    
    CxxFloat32Ptr _arg2__cxx = Make_CxxFloat32Ptr(_arg2);
    
    
    CxxFloat32Ptr _arg4__cxx = Make_CxxFloat32Ptr(_arg4);
    
    CxxbtSoftBody_setPositionsVelocities(
        _arg0,
        _arg1,
        _arg2__cxx,
        _arg3,
        _arg4__cxx
        );
    
    
    
    
    
    
    
}


//////////////////////////////////////////////////////////////////////////////
//
// Epilogs
//
// To add epilog code, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_epilog("""
//   MyGlobalFunc() {
//     report("MyGlobalFunc");
//   }
//
//////////////////////////////////////////////////////////////////////////////


/// \dfgPresetOmit
/// \internal
CxxbtScalarConstPtr Make_CxxbtScalarConstPtr(btScalar value) {
  return Make_CxxFloat32ConstPtr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtScalarConstPtr Make_CxxbtScalarConstPtr(io btScalar value) {
  return Make_CxxFloat32ConstPtr(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtScalarPtr Make_CxxbtScalarPtr(btScalar value) {
  return Make_CxxFloat32Ptr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtScalarPtr Make_CxxbtScalarPtr(io btScalar value) {
  return Make_CxxFloat32Ptr(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtScalarConstRef Make_CxxbtScalarConstRef(btScalar value) {
  return Make_CxxFloat32ConstRef(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtScalarConstRef Make_CxxbtScalarConstRef(io btScalar value) {
  return Make_CxxFloat32ConstRef(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtScalarRef Make_CxxbtScalarRef(btScalar value) {
  return Make_CxxFloat32Ref(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtScalarRef Make_CxxbtScalarRef(io btScalar value) {
  return Make_CxxFloat32Ref(value);
}


function btVector3(Vec3 v)
{
  this = btVector3(v.x, v.y, v.z);
}

function Vec3(btVector3 v)
{
  this = Vec3(v.getX(), v.getY(), v.getZ());
}

function btVector4(Vec4 v)
{
  this = btVector4(v.x, v.y, v.z, v.t);
}

function Vec4(btVector4 v)
{
  this = Vec4(v.getX(), v.getY(), v.getZ(), v.getW());
}

function btVector4(Color v)
{
  this = btVector4(v.r, v.g, v.b, v.a);
}

function Color(btVector4 v)
{
  this = Color(v.getX(), v.getY(), v.getZ(), v.getW());
}


function btMatrix3x3(Mat33 m)
{
  this = btMatrix3x3(
    m.row0.x, m.row0.y, m.row0.z,
    m.row1.x, m.row1.y, m.row1.z,
    m.row2.x, m.row2.y, m.row2.z,
  );
}

function Mat33(btMatrix3x3 m)
{
  Vec3 row0 = m.getRow(0);
  Vec3 row1 = m.getRow(1);
  Vec3 row2 = m.getRow(2);
  this = Mat33(row0, row1, row2);
}


function btQuaternion(Quat q)
{
  this = btQuaternion(q.v.x, q.v.y, q.v.z, q.w);
}

function Quat(btQuaternion q)
{
  this = Quat(q.getAxis(), q.getW());
}


function btTransform(Xfo xfo)
{
  this = btTransform(xfo.ori.toMat33(), xfo.tr);
}

function btTransform(Mat44 mat)
{
  this = btTransform(mat.upperLeft(), mat.translation());
}

function Xfo(btTransform transfo)
{
  this.sc = Vec3(1.0);
  this.ori.setFromMat33(transfo.getBasis());
  this.tr = transfo.getOrigin();
}

function Mat44(btTransform transfo)
{
  this.setTranslation(transfo.getOrigin());
  this.setUpperLeft(transfo.getBasis());
  this.setScaling(Vec3(1.0));
}


/// \dfgPresetOmit
/// \internal
CxxTUIntArrayConstPtr Make_CxxTUIntArrayConstPtr(TUIntArray value) {
  return Make_CxxbtAlignedObjectArray_UInt32ConstPtr(value);
}

/// \dfgPresetOmit
/// \internal
CxxTUIntArrayConstPtr Make_CxxTUIntArrayConstPtr(io TUIntArray value) {
  return Make_CxxbtAlignedObjectArray_UInt32ConstPtr(value);
}


/// \dfgPresetOmit
/// \internal
CxxTUIntArrayPtr Make_CxxTUIntArrayPtr(TUIntArray value) {
  return Make_CxxbtAlignedObjectArray_UInt32Ptr(value);
}

/// \dfgPresetOmit
/// \internal
CxxTUIntArrayPtr Make_CxxTUIntArrayPtr(io TUIntArray value) {
  return Make_CxxbtAlignedObjectArray_UInt32Ptr(value);
}


/// \dfgPresetOmit
/// \internal
CxxTUIntArrayConstRef Make_CxxTUIntArrayConstRef(TUIntArray value) {
  return Make_CxxbtAlignedObjectArray_UInt32ConstRef(value);
}

/// \dfgPresetOmit
/// \internal
CxxTUIntArrayConstRef Make_CxxTUIntArrayConstRef(io TUIntArray value) {
  return Make_CxxbtAlignedObjectArray_UInt32ConstRef(value);
}


/// \dfgPresetOmit
/// \internal
CxxTUIntArrayRef Make_CxxTUIntArrayRef(TUIntArray value) {
  return Make_CxxbtAlignedObjectArray_UInt32Ref(value);
}

/// \dfgPresetOmit
/// \internal
CxxTUIntArrayRef Make_CxxTUIntArrayRef(io TUIntArray value) {
  return Make_CxxbtAlignedObjectArray_UInt32Ref(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectArrayConstPtr Make_CxxbtCollisionObjectArrayConstPtr(btCollisionObjectArray value) {
  return Make_CxxbtAlignedObjectArray_btCollisionObjectConstPtr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectArrayConstPtr Make_CxxbtCollisionObjectArrayConstPtr(io btCollisionObjectArray value) {
  return Make_CxxbtAlignedObjectArray_btCollisionObjectConstPtr(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectArrayPtr Make_CxxbtCollisionObjectArrayPtr(btCollisionObjectArray value) {
  return Make_CxxbtAlignedObjectArray_btCollisionObjectPtr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectArrayPtr Make_CxxbtCollisionObjectArrayPtr(io btCollisionObjectArray value) {
  return Make_CxxbtAlignedObjectArray_btCollisionObjectPtr(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectArrayConstRef Make_CxxbtCollisionObjectArrayConstRef(btCollisionObjectArray value) {
  return Make_CxxbtAlignedObjectArray_btCollisionObjectConstRef(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectArrayConstRef Make_CxxbtCollisionObjectArrayConstRef(io btCollisionObjectArray value) {
  return Make_CxxbtAlignedObjectArray_btCollisionObjectConstRef(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectArrayRef Make_CxxbtCollisionObjectArrayRef(btCollisionObjectArray value) {
  return Make_CxxbtAlignedObjectArray_btCollisionObjectRef(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtCollisionObjectArrayRef Make_CxxbtCollisionObjectArrayRef(io btCollisionObjectArray value) {
  return Make_CxxbtAlignedObjectArray_btCollisionObjectRef(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tScalarArrayConstPtr Make_CxxbtSoftBody_tScalarArrayConstPtr(btSoftBody_tScalarArray value) {
  return Make_CxxbtAlignedObjectArray_Float32ConstPtr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tScalarArrayConstPtr Make_CxxbtSoftBody_tScalarArrayConstPtr(io btSoftBody_tScalarArray value) {
  return Make_CxxbtAlignedObjectArray_Float32ConstPtr(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tScalarArrayPtr Make_CxxbtSoftBody_tScalarArrayPtr(btSoftBody_tScalarArray value) {
  return Make_CxxbtAlignedObjectArray_Float32Ptr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tScalarArrayPtr Make_CxxbtSoftBody_tScalarArrayPtr(io btSoftBody_tScalarArray value) {
  return Make_CxxbtAlignedObjectArray_Float32Ptr(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tScalarArrayConstRef Make_CxxbtSoftBody_tScalarArrayConstRef(btSoftBody_tScalarArray value) {
  return Make_CxxbtAlignedObjectArray_Float32ConstRef(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tScalarArrayConstRef Make_CxxbtSoftBody_tScalarArrayConstRef(io btSoftBody_tScalarArray value) {
  return Make_CxxbtAlignedObjectArray_Float32ConstRef(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tScalarArrayRef Make_CxxbtSoftBody_tScalarArrayRef(btSoftBody_tScalarArray value) {
  return Make_CxxbtAlignedObjectArray_Float32Ref(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tScalarArrayRef Make_CxxbtSoftBody_tScalarArrayRef(io btSoftBody_tScalarArray value) {
  return Make_CxxbtAlignedObjectArray_Float32Ref(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tVector3ArrayConstPtr Make_CxxbtSoftBody_tVector3ArrayConstPtr(btSoftBody_tVector3Array value) {
  return Make_CxxbtAlignedObjectArray_Vec3ConstPtr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tVector3ArrayConstPtr Make_CxxbtSoftBody_tVector3ArrayConstPtr(io btSoftBody_tVector3Array value) {
  return Make_CxxbtAlignedObjectArray_Vec3ConstPtr(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tVector3ArrayPtr Make_CxxbtSoftBody_tVector3ArrayPtr(btSoftBody_tVector3Array value) {
  return Make_CxxbtAlignedObjectArray_Vec3Ptr(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tVector3ArrayPtr Make_CxxbtSoftBody_tVector3ArrayPtr(io btSoftBody_tVector3Array value) {
  return Make_CxxbtAlignedObjectArray_Vec3Ptr(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tVector3ArrayConstRef Make_CxxbtSoftBody_tVector3ArrayConstRef(btSoftBody_tVector3Array value) {
  return Make_CxxbtAlignedObjectArray_Vec3ConstRef(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tVector3ArrayConstRef Make_CxxbtSoftBody_tVector3ArrayConstRef(io btSoftBody_tVector3Array value) {
  return Make_CxxbtAlignedObjectArray_Vec3ConstRef(value);
}


/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tVector3ArrayRef Make_CxxbtSoftBody_tVector3ArrayRef(btSoftBody_tVector3Array value) {
  return Make_CxxbtAlignedObjectArray_Vec3Ref(value);
}

/// \dfgPresetOmit
/// \internal
CxxbtSoftBody_tVector3ArrayRef Make_CxxbtSoftBody_tVector3ArrayRef(io btSoftBody_tVector3Array value) {
  return Make_CxxbtAlignedObjectArray_Vec3Ref(value);
}

