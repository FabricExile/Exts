/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;
require FabricSynchronization;
require Singletons;

/**
  The EvalContext provides contextual information about the evaluation within Splice. The EvalContext is a value generated by the Splice integrations and can be passed into your operators. You don’t need to add a port as this data is provided by Splice. 

  Operators can include an argument of type ‘EvalContext’ and name ‘context’, and splice will automatically provide the contextual information.

  \example
    require Util;

    operator mySpliceOperator(io EvalContext context) {
      report('Running in '+context.host);
      report('The graph is '+context.graph);
      report(context.getDirtyInputs());
    }

  \endexample

  Some of the sample scenes provided with Splice highlight the use of the EvalContext, including the AnimatedAlembic and FbxCharacters scenes. 

*/
object EvalContext {

   /// The host application running, for example Maya.
  String host;
 
  /// the time of the evaluation in the host application. 
  Scalar time;

  /// the DFGBinding UniqueID of the evaluation in the host application. 
  /// Used to identofy which DFG graph (top executable) is executed.
  String evalContextID;
};

function EvalContext() {
}

/// Get the EvalContext singleton, or construct 
/// it if it didn't already exist.
/// \dfgPresetOmit
function EvalContext EvalContext_GetInstance() {
  SimpleLock simpleLock = SimpleLock("EvalContext_GetInstance_Lock");
  AutoLock AL(simpleLock);

  // check if we can get the singleton
  Object context = Singleton_get('EvalContext');
  if(context == null) {
    context = EvalContext();
    Singleton_set('EvalContext', context);
  } else{
    if(context.type() != EvalContext){
      setError("Error getting EvalContext instance. A context of a different type has already been constructed :" + context.type() );
      return null;
    }
  }
  return context;
}

/// Get the EvalContext singleton, but through a method
function EvalContext EvalContext.getInstance(){
  return EvalContext_GetInstance();
}

/// returns the name of the host of this EvalContext
function String EvalContext.getHost() {
  return this.host;
}

/// returns the current time of this EvalContext
function Scalar EvalContext.getTime() {
  return this.time;
}

/// returns the current DFGBinding UniqueID of this EvalContext
function String EvalContext.getEvalContextID() {
  return this.evalContextID;
}
