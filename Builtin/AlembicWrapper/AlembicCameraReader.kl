/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Alembic;

/**
  The :kl-ref:`AlembicCameraReader` specializes the :kl-ref:`AlembicObjectReader` interface for reading :kl-ref:`AlembicICamera` data. 
  It can be created using the :kl-ref:`AlembicArchiveReader.getCamera` method.
  \example

  require AlembicWrapper;
  require FileIO;

  operator entry() {
    
    FilePath path = FilePath('${FABRIC_SCENE_GRAPH_DIR}/Python/Apps/Resources/Alembic/frog.abc').expandEnvVars();

    AlembicArchiveReader archive(path.string());
    String cameraPaths[] = archive.getPathsOfType('Camera');

    for(Size i=0;i<cameraPaths.size();i++) {

      AlembicCameraReader camera = archive.getCamera(cameraPaths[i]);
      report('samples: '+camera.getNumSamples());

      camera.readSample(2.4);
      report('focalLength: '+camera.getFocalLength());
      report('nearClippingPlane: '+camera.getNearClippingPlane());
      report('farClippingPlane: '+camera.getFarClippingPlane());
      
    }

  }

  \endexample
  \seealso AlembicCameraWriter
*/
object AlembicCameraReader : AlembicBaseObjectReader{
  /// \internal
  private AlembicICamera _camera;
  /// \internal
  private AlembicICameraSchema _schema;
  /// \internal
  private AlembicCameraSample _sampleA;
  /// \internal
  private AlembicCameraSample _sampleB;
};

/// \internal
private function AlembicCameraReader(AlembicArchiveReader archive, AlembicIObject obj) {
  this._camera = AlembicICamera(obj);
  this._schema = this._camera.getSchema();
  this.parent.set( archive, obj, this._schema.getTimeSampling(), this._schema.getNumSamples(), this._schema.getChildBoundsProperty() );

  this._sampleA = AlembicCameraSample();
  this._sampleB = AlembicCameraSample();
}

/// returns the full path of the wrapped AlembicICamera
function String AlembicCameraReader.getPath() {
  return this._camera.asIObject().getFullName();
}

/// returns true if this reader wraps a valid AlembicICamera
function Boolean AlembicCameraReader.valid() {
  if(!this._camera.valid())
    return false;
  return this.parent.valid();
}

/// clears all pointers and releases all alembic containers
function AlembicCameraReader.reset!() {
  this._camera.reset();
  this._schema.reset();
  this._sampleA = null;
  this._sampleB = null;
}
 
/// returns the wrapped AlembicIObject
function Ref<AlembicIObject> AlembicCameraReader.getIObject() {
  return this._camera.asIObject();
}
 
/// returns the schema of this reader
AlembicICameraSchema AlembicCameraReader.getSchema() 
{ 
  return this._schema; 
}

/// returns the first sample used by this reader
AlembicCameraSample AlembicCameraReader.getSampleA() 
{ 
  return this._sampleA; 
}

/// returns the second sample used by this reader
AlembicCameraSample AlembicCameraReader.getSampleB() 
{ 
  return this._sampleB; 
} 

/// returns the current sample's (interpolated) focalLength value
function Float64 AlembicCameraReader.getFocalLength() {
  Float64 valueA = this._sampleA.getFocalLength();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getFocalLength();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) horizontalAperture value
function Float64 AlembicCameraReader.getHorizontalAperture() {
  Float64 valueA = this._sampleA.getHorizontalAperture();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getHorizontalAperture();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) horizontalFilmOffset value
function Float64 AlembicCameraReader.getHorizontalFilmOffset() {
  Float64 valueA = this._sampleA.getHorizontalFilmOffset();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getHorizontalFilmOffset();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) verticalAperture value
function Float64 AlembicCameraReader.getVerticalAperture() {
  Float64 valueA = this._sampleA.getVerticalAperture();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getVerticalAperture();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) verticalFilmOffset value
function Float64 AlembicCameraReader.getVerticalFilmOffset() {
  Float64 valueA = this._sampleA.getVerticalFilmOffset();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getVerticalFilmOffset();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) lensSqueezeRatio value
function Float64 AlembicCameraReader.getLensSqueezeRatio() {
  Float64 valueA = this._sampleA.getLensSqueezeRatio();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getLensSqueezeRatio();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) overScanLeft value
function Float64 AlembicCameraReader.getOverScanLeft() {
  Float64 valueA = this._sampleA.getOverScanLeft();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getOverScanLeft();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) overScanRight value
function Float64 AlembicCameraReader.getOverScanRight() {
  Float64 valueA = this._sampleA.getOverScanRight();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getOverScanRight();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) overScanTop value
function Float64 AlembicCameraReader.getOverScanTop() {
  Float64 valueA = this._sampleA.getOverScanTop();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getOverScanTop();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) overScanBottom value
function Float64 AlembicCameraReader.getOverScanBottom() {
  Float64 valueA = this._sampleA.getOverScanBottom();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getOverScanBottom();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) fStop value
function Float64 AlembicCameraReader.getFStop() {
  Float64 valueA = this._sampleA.getFStop();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getFStop();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) focusDistance value
function Float64 AlembicCameraReader.getFocusDistance() {
  Float64 valueA = this._sampleA.getFocusDistance();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getFocusDistance();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) shutterOpen value
function Float64 AlembicCameraReader.getShutterOpen() {
  Float64 valueA = this._sampleA.getShutterOpen();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getShutterOpen();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) shutterClose value
function Float64 AlembicCameraReader.getShutterClose() {
  Float64 valueA = this._sampleA.getShutterClose();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getShutterClose();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) nearClippingPlane value
function Float64 AlembicCameraReader.getNearClippingPlane() {
  Float64 valueA = this._sampleA.getNearClippingPlane();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getNearClippingPlane();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) farClippingPlane value
function Float64 AlembicCameraReader.getFarClippingPlane() {
  Float64 valueA = this._sampleA.getFarClippingPlane();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getFarClippingPlane();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// returns the current sample's (interpolated) field of view value
function Float64 AlembicCameraReader.getFieldOfView() {
  Float64 valueA = this._sampleA.getFieldOfView();
  if(!this._info.requiresInterpolation())
    return valueA;
  Float64 valueB = this._sampleB.getFieldOfView();
  return valueA * this._info.ifraction + valueB * this._info.fraction;
}

/// reads a sample at a given time. this will properly interpolate between samples.
function AlembicCameraReader.readSample!(Float64 time) {

  if(this == null)
    return;
  
  if( !this.updateTimeInfo(time) )
    return;

  this._schema.get(this._sampleA, this._infoIndexASelector);
  if(this._info.requiresInterpolation())
    this._schema.get(this._sampleB, this._infoIndexBSelector);
}
