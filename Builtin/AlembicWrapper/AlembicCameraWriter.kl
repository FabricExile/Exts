/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Alembic;

/**
  The :kl-ref:`AlembicCameraWriter` specializes the :kl-ref:`AlembicObjectWriter` interface for writing :kl-ref:`AlembicOCamera` data. 
  It can be created using the :kl-ref:`AlembicArchiveWriter.addCamera` methods.
  \example

  require AlembicWrapper;
  require FileIO;

  operator entry() {
    
    FilePath path = FilePath('${TEMP}/camera.abc').expandEnvVars();

    AlembicArchiveWriter archive(path.string());
    AlembicXformWriter xfo = archive.addXform('/xfo', Alembic_kConstantTimeSampling);
    AlembicCameraWriter cam = archive.addCamera('/xfo/cam', Alembic_kConstantTimeSampling);

    xfo.writeSample(Mat44());

    cam.setFocalLength(5.4);
    cam.setNearClippingPlane(0.1);
    cam.setFarClippingPlane(10.0);
    cam.writeSample();

    archive.reset();

    report(path.exists());
    report('Alembic file created: '+path.string());
  }

  \endexample
  \seealso AlembicCameraReader
  \dfgArrayPexDisable true
*/
object AlembicCameraWriter : AlembicObjectWriter{
  /// \internal
  private AlembicOCamera _camera;
  /// \internal
  private AlembicOCameraSchema _schema;
  /// \internal
  private AlembicCameraSample _sample;
  /// \internal
  private UInt32 _numSamples;
  /// \internal
  private UInt32 _storedSamples;
};

/// \internal
private function AlembicCameraWriter(AlembicOObject parent, String name, SInt32 timeSampling) {
  this._camera = AlembicOCamera(parent, name, timeSampling);
  this._schema = this._camera.getSchema();
  this._sample = AlembicCameraSample();
  this._numSamples = this._schema.getTimeSampling().getNumStoredTimes();
  if(this._numSamples == 0)
    this._numSamples = 1;
  this._storedSamples = 0;
}

/// returns the full path of the wrapped AlembicOCamera
function String AlembicCameraWriter.getPath() {
  return this._camera.asOObject().getFullName();
}

/// returns true if this writer wraps a valid AlembicOCamera
function Boolean AlembicCameraWriter.valid() {
  return this._camera.valid();
}

/// clears all pointers and releases all alembic containers
function AlembicCameraWriter.reset!() {
  this._camera.reset();
}

/// returns the wrapped AlembicOObject
function AlembicOObject AlembicCameraWriter.getOObject() {
  return this._camera.asOObject();
}

/// returns the current sample's focalLength value
function Float64 AlembicCameraWriter.getFocalLength() {
  return this._sample.getFocalLength();
}

/// returns the current sample's horizontalAperture value
function Float64 AlembicCameraWriter.getHorizontalAperture() {
  return this._sample.getHorizontalAperture();
}

/// returns the current sample's horizontalFilmOffset value
function Float64 AlembicCameraWriter.getHorizontalFilmOffset() {
  return this._sample.getHorizontalFilmOffset();
}

/// returns the current sample's verticalAperture value
function Float64 AlembicCameraWriter.getVerticalAperture() {
  return this._sample.getVerticalAperture();
}

/// returns the current sample's verticalFilmOffset value
function Float64 AlembicCameraWriter.getVerticalFilmOffset() {
  return this._sample.getVerticalFilmOffset();
}

/// returns the current sample's lensSqueezeRatio value
function Float64 AlembicCameraWriter.getLensSqueezeRatio() {
  return this._sample.getLensSqueezeRatio();
}

/// returns the current sample's overScanLeft value
function Float64 AlembicCameraWriter.getOverScanLeft() {
  return this._sample.getOverScanLeft();
}

/// returns the current sample's overScanRight value
function Float64 AlembicCameraWriter.getOverScanRight() {
  return this._sample.getOverScanRight();
}

/// returns the current sample's overScanTop value
function Float64 AlembicCameraWriter.getOverScanTop() {
  return this._sample.getOverScanTop();
}

/// returns the current sample's overScanBottom value
function Float64 AlembicCameraWriter.getOverScanBottom() {
  return this._sample.getOverScanBottom();
}

/// returns the current sample's fStop value
function Float64 AlembicCameraWriter.getFStop() {
  return this._sample.getFStop();
}

/// returns the current sample's focusDistance value
function Float64 AlembicCameraWriter.getFocusDistance() {
  return this._sample.getFocusDistance();
}

/// returns the current sample's shutterOpen value
function Float64 AlembicCameraWriter.getShutterOpen() {
  return this._sample.getShutterOpen();
}

/// returns the current sample's shutterClose value
function Float64 AlembicCameraWriter.getShutterClose() {
  return this._sample.getShutterClose();
}

/// returns the current sample's nearClippingPlane value
function Float64 AlembicCameraWriter.getNearClippingPlane() {
  return this._sample.getNearClippingPlane();
}

/// returns the current sample's farClippingPlane value
function Float64 AlembicCameraWriter.getFarClippingPlane() {
  return this._sample.getFarClippingPlane();
}

/// sets the current sample's focalLength value
function AlembicCameraWriter.setFocalLength!(Float64 value) {
  if(this == null)
    return;
  this._sample.setFocalLength(value);
}

/// sets the current sample's horizontalAperture value
function AlembicCameraWriter.setHorizontalAperture!(Float64 value) {
  if(this == null)
    return;
  this._sample.setHorizontalAperture(value);
}

/// sets the current sample's horizontalFilmOffset value
function AlembicCameraWriter.setHorizontalFilmOffset!(Float64 value) {
  if(this == null)
    return;
  this._sample.setHorizontalFilmOffset(value);
}

/// sets the current sample's verticalAperture value
function AlembicCameraWriter.setVerticalAperture!(Float64 value) {
  if(this == null)
    return;
  this._sample.setVerticalAperture(value);
}

/// sets the current sample's verticalFilmOffset value
function AlembicCameraWriter.setVerticalFilmOffset!(Float64 value) {
  if(this == null)
    return;
  this._sample.setVerticalFilmOffset(value);
}

/// sets the current sample's lensSqueezeRatio value
function AlembicCameraWriter.setLensSqueezeRatio!(Float64 value) {
  if(this == null)
    return;
  this._sample.setLensSqueezeRatio(value);
}

/// sets the current sample's overScanLeft value
function AlembicCameraWriter.setOverScanLeft!(Float64 value) {
  if(this == null)
    return;
  this._sample.setOverScanLeft(value);
}

/// sets the current sample's overScanRight value
function AlembicCameraWriter.setOverScanRight!(Float64 value) {
  if(this == null)
    return;
  this._sample.setOverScanRight(value);
}

/// sets the current sample's overScanTop value
function AlembicCameraWriter.setOverScanTop!(Float64 value) {
  if(this == null)
    return;
  this._sample.setOverScanTop(value);
}

/// sets the current sample's overScanBottom value
function AlembicCameraWriter.setOverScanBottom!(Float64 value) {
  if(this == null)
    return;
  this._sample.setOverScanBottom(value);
}

/// sets the current sample's fStop value
function AlembicCameraWriter.setFStop!(Float64 value) {
  if(this == null)
    return;
  this._sample.setFStop(value);
}

/// sets the current sample's focusDistance value
function AlembicCameraWriter.setFocusDistance!(Float64 value) {
  if(this == null)
    return;
  this._sample.setFocusDistance(value);
}

/// sets the current sample's shutterOpen value
function AlembicCameraWriter.setShutterOpen!(Float64 value) {
  if(this == null)
    return;
  this._sample.setShutterOpen(value);
}

/// sets the current sample's shutterClose value
function AlembicCameraWriter.setShutterClose!(Float64 value) {
  if(this == null)
    return;
  this._sample.setShutterClose(value);
}

/// sets the current sample's nearClippingPlane value
function AlembicCameraWriter.setNearClippingPlane!(Float64 value) {
  if(this == null)
    return;
  this._sample.setNearClippingPlane(value);
}

/// sets the current sample's farClippingPlane value
function AlembicCameraWriter.setFarClippingPlane!(Float64 value) {
  if(this == null)
    return;
  this._sample.setFarClippingPlane(value);
}

/// write a single sample into the AlembicOCamera
function Boolean AlembicCameraWriter.writeSample!() {
  if(this == null)
    return false;
  if(this._storedSamples == this._numSamples) {
    // setError('AlembicCameraWriter: Max number of samples reached.');
    return false;
  }
  this._schema.set(this._sample);
  this._storedSamples++;
  return true;
}
