/*
 *  Copyright 2010-2015 Fabric Software Inc. All rights reserved.
 */

require Alembic;

object AlembicMaterialReader : AlembicBaseObjectReader {
  /// \internal
  private AlembicIMaterial _material;
  /// \internal
  private AlembicIMaterialSchema _schema;
  /// \internal
  private AlembicMaterialSample _sample;
  /// \internal
  private Float64 _times[];
  /// \internal
  private Xfo _xfos[];
  /// \internal
  private Size _lastXfoIndex;
};

/// \internal
private AlembicMaterialReader(AlembicArchiveReader archive, AlembicIObject material) {
  this.archive = archive;
  this._material = AlembicIMaterial(material);
  this._schema = this._material.getSchema();
  this._sample = AlembicMaterialSample();
  
  AlembicTimeSampling ts = this._schema.getTimeSampling(); 
  this.parent.set( archive, material, ts, this._schema.getNumSamples(), this._schema.getChildBoundsProperty() );

  for(Integer t = 0; t < this._schema.getNumSamples(); t++)
    this._times.push(ts.getSampleTime(t));

  if(this._times.size() == 0)
    this._times.push(0.0);

  this._xfos.resize(this._times.size());
  for(Size i=0;i<this._xfos.size();i++) {
    this._schema.get(this._sample, this.archive.getISampleSelector(i));
    Mat44 m = this._sample.getMatrix().transpose();
    m.row3 = Vec4(0,0,0,1);
    this._xfos[i] = m;
  }

  this._lastXfoIndex = 0;
}

/// returns the full path of the wrapped AlembicIMaterial
public String AlembicMaterialReader.getPath() {
  return this._material.asIObject().getFullName();
}

/// returns true if this reader wraps a valid AlembicIMaterial
public Boolean AlembicMaterialReader.valid() {
  return this._material.valid();
}

/// clears all pointers and releases all alembic containers
public AlembicMaterialReader.reset!() {
  this._material.reset();
  this._schema.reset();
  this._sample = null;
  this._times.resize(0);
  this._xfos.resize(0);
  this._lastXfoIndex = 0;
}

/// returns the number of samples of this reader
public SInt32 AlembicMaterialReader.getNumSamples() {
  return this._times.size();
}

/// returns the schema of this reader
public AlembicIMaterialSchema AlembicMaterialReader.getSchema() 
{ 
  return this._schema; 
}

/// returns the first (and only) sample used by this reader
public AlembicMaterialSample AlembicMaterialReader.getSample() 
{ 
  return this._sample; 
}

/// returns the timesampling of this reader
public Float64[] AlembicMaterialReader.getTimes() 
{ 
  return this._times; 
}

/// reads a sample at a given time. this will properly interpolate between samples.
public Xfo AlembicMaterialReader.readSample!(Float64 time) {
  if(this._xfos.size() == 0)
    return Xfo();
  
  if(this._times.size() <= 1)
    return this._xfos[0];

  while(this._lastXfoIndex > 0 && this._times[this._lastXfoIndex] >= time) {
    this._lastXfoIndex--;
  }
  while(this._lastXfoIndex < (this._times.size() - 2) && this._times[this._lastXfoIndex+1] < time) {
    this._lastXfoIndex++;
  }

  //AlembicSampleInfo info( time, this._timeSampling, this._numSamples );
  //if(info.requiresInterpolation())
  //  return this._xfos[info.indexA].linearInterpolate( this._xfos[info.indexB], Float32(info.fraction) );
  //else
  //  return this._xfos[info.indexA];

  if(this._lastXfoIndex == 0) {
    if(this._times[0] >= time) {
      return this._xfos[0];
    }
  } else if(this._lastXfoIndex >= this._times.size() - 2) {
    if(this._times[this._times.size()-1] <= time) {
      return this._xfos[this._xfos.size()-1];
    }
  }

  Float64 timeStep = this._times[this._lastXfoIndex+1] - this._times[this._lastXfoIndex];
  Float64 delta = time - this._times[this._lastXfoIndex];
  Float64 u = delta / timeStep;
  return this._xfos[this._lastXfoIndex].linearInterpolate(this._xfos[this._lastXfoIndex+1], Float32(u));
}
