/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Alembic;
require Geometry;

/**
  The :kl-ref:`AlembicPointsWriter` specializes the :kl-ref:`AlembicObjectWriter` interface for writing :kl-ref:`AlembicOPoints` data. 
  It can be created using the :kl-ref:`AlembicArchiveWriter.addPoints` methods.
  \example

  require AlembicWrapper;
  require FileIO;

  operator entry() {
    
    FilePath path = FilePath('${TEMP}/points.abc').expandEnvVars();

    AlembicArchiveWriter archive(path.string());
    AlembicXformWriter xfo = archive.addXform('/xfo', Alembic_kConstantTimeSampling);
    AlembicPointsWriter points = archive.addPoints('/xfo/points', Alembic_kConstantTimeSampling);

    xfo.writeSample(Mat44());

    GeometryAttributes attr = GeometryAttributes();
    attr.resize(3);

    Ref<Vec3Attribute> positions = attr.getOrCreateVec3Attribute('positions');
    positions.values[0] = Vec3(1, 1, 1);
    positions.values[1] = Vec3(2, 2, 2);
    positions.values[2] = Vec3(3, 3, 3);

    points.writeSample(attr);

    archive.reset();

    report(path.exists());
    report('Alembic file created: '+path.string());
  }

  \endexample
  \seealso AlembicPointsReader
  \dfgArrayPexDisable true
*/
object AlembicPointsWriter : AlembicObjectWriter{
  /// \internal
  private AlembicOPoints _points;
  /// \internal
  private AlembicOPointsSchema _schema;
  /// \internal
  private AlembicOPointsSample _sample;
  /// \internal
  private AlembicOFloat32GeomParamSample _widthSample;
  /// \internal
  private UInt32 _numSamples;
  /// \internal
  private UInt32 _storedSamples;
  /// \internal
  private SInt32 _timeSamplingIndex;
  /// \internal
  private UInt32 _versions[String];
  /// \internal
  private AlembicGeometryAttributesWriter _attributeWriter;
  /// \internal
  private UInt64 _geometryUid;
  /// \internal
  private UInt32 _lastNbPoints;
};

/// \internal
private function AlembicPointsWriter(AlembicOObject parent, String name, SInt32 timeSampling) {
  this._points = AlembicOPoints(parent, name, timeSampling);
  this._schema = this._points.getSchema();
  this._sample = null;
  this._widthSample = null;
  this._numSamples = this._schema.getTimeSampling().getNumStoredTimes();
  if(this._numSamples == 0)
    this._numSamples = 1;
  this._storedSamples = 0;
  this._timeSamplingIndex = timeSampling;
  this._attributeWriter = AlembicGeometryAttributesWriter();
}

/// returns the full path of the wrapped AlembicOPoints
function String AlembicPointsWriter.getPath() {
  return this._points.asOObject().getFullName();
}

/// returns true if this writer wraps a valid AlembicOPoints
function Boolean AlembicPointsWriter.valid() {
  return this._points.valid();
}

/// clears all pointers and releases all alembic containers
function AlembicPointsWriter.reset!() {
  this._points.reset();
  this._schema.reset();
  this._sample = null;
  this._widthSample = null;
  this._attributeWriter.reset();
}

/// returns the wrapped AlembicOObject
function AlembicOObject AlembicPointsWriter.getOObject() {
  return this._points.asOObject();
}

/// provide access to the wrapped AlembicGeometryAttributesWriter.
function Ref<AlembicGeometryAttributesWriter> AlembicPointsWriter.getGeometryAttributesWriter() {
  return this._attributeWriter;
}

/// Store a new AlembicGeometryParamReader based on an existing attribute
function AlembicPointsWriter.addParamWriter!(GeometryAttribute attribute, AlembicGeometryScope scope, SInt32 timeSampling) {
  AlembicOCompoundProperty props = this._schema.getArbGeomParams();
  this._attributeWriter.addParamWriter(props, attribute.getName(), scope, timeSampling, attribute);
}

/// writes a single sample into the file based on the provided GeometryAttributes.
function Boolean AlembicPointsWriter.writeSample!(Ref<GeometryAttributes> points, SInt32 featureMask) {
  if(this == null)
    return false;
  if(points == null)
    return false;
  if(this._storedSamples == this._numSamples) {
    // setError('AlembicPointsWriter: Max number of samples reached.');
    return false;
  }

  Boolean theSameGeo = (points.uid() == this._geometryUid) && (points.size() == this._lastNbPoints);
  this._geometryUid = points.uid();
  this._lastNbPoints = points.size();

  this._sample = AlembicOPointsSample();

  // init on first frame
  if(this._storedSamples == 0) {

    if(!points.has('positions')) {
      setError('AlembicPointsWriter: Provided GeometryAttributes does not contain positions.');
      return false;
    }

    AlembicOCompoundProperty props = this._schema.getArbGeomParams();

    // vertexColors
    if((featureMask == 0 || (featureMask & AlembicExportFeature_VertexColors) == AlembicExportFeature_VertexColors) && points.has('vertexColors')) {
      ColorAttribute attr = points.getAttribute('vertexColors', ColorAttribute);
      AlembicGeometryParamWriter writer = AlembicGeometryParamWriter(props, 'vertexColors', Alembic_kVertexScope, this._timeSamplingIndex, attr);
      this._attributeWriter.addParamWriter(writer);
    }

    // scales
    if((featureMask == 0 || (featureMask & AlembicExportFeature_Scales) == AlembicExportFeature_Scales) && points.has('scales')) {
      Vec3Attribute attr = points.getAttribute('scales', Vec3Attribute);
      AlembicGeometryParamWriter writer = AlembicGeometryParamWriter(props, 'scales', Alembic_kVertexScope, this._timeSamplingIndex, attr);
      this._attributeWriter.addParamWriter(writer);
    }

    // orientations
    if((featureMask == 0 || (featureMask & AlembicExportFeature_Orientations) == AlembicExportFeature_Orientations) && points.has('orientations')) {
      QuatAttribute attr = points.getAttribute('orientations', QuatAttribute);
      AlembicGeometryParamWriter writer = AlembicGeometryParamWriter(props, 'orientations', Alembic_kVertexScope, this._timeSamplingIndex, attr);
      this._attributeWriter.addParamWriter(writer);
    }
  }

  Vec3Attribute positionsAttr = points.getAttribute('positions', Vec3Attribute);
  if(positionsAttr.getVersion() != this._versions.get('positions', 0) || !theSameGeo) {

    Box3 bounds;
    for(Size i=0;i<positionsAttr.values.size();i++)
      bounds.merge(positionsAttr.values[i]);
    this._sample.setSelfBounds(bounds);
    this._sample.setPositions(positionsAttr.values);
    this._versions['positions'] = positionsAttr.getVersion();
  }

  if((featureMask == 0 || (featureMask & AlembicExportFeature_Ids) == AlembicExportFeature_Ids) && points.has('ids')) {

    UInt32Attribute attr = points.getAttribute('ids', UInt32Attribute);
    if(attr.getVersion() != this._versions.get('ids', 0) || !theSameGeo) {
      UInt64 idValues[];
      idValues.resize(attr.values.size());
      for(Size i=0;i<idValues.size();i++)
        idValues[i] = attr.values[i];
      this._sample.setIds(idValues);
      this._versions['ids'] = attr.getVersion();
    }
  } else {

    if(points.size() != this._versions.get('ids', 0) || !theSameGeo) {
      UInt64 idValues[];
      idValues.resize(points.size());
      for(Size i=0;i<idValues.size();i++)
        idValues[i] = i;
      this._sample.setIds(idValues);
      this._versions['ids'] = points.size();
    }
  }

  if((featureMask == 0 || (featureMask & AlembicExportFeature_PointSizes) == AlembicExportFeature_PointSizes) && points.has('pointSizes')) {

    ScalarAttribute attr = points.getAttribute('pointSizes', ScalarAttribute);
    if(attr.getVersion() != this._versions.get('pointSizes', 0) || !theSameGeo) {
      this._widthSample = AlembicOFloat32GeomParamSample(attr.values, Alembic_kVertexScope);
      this._sample.setWidths(this._widthSample);
      this._versions['pointSizes'] = attr.getVersion();
    }
  }

  if((featureMask == 0 || (featureMask & AlembicExportFeature_Velocities) == AlembicExportFeature_Velocities) && points.has('velocities')) {
    Vec3Attribute attr = points.getAttribute('velocities', Vec3Attribute);
    if(attr.getVersion() != this._versions.get('velocities', 0) || !theSameGeo) {
      this._sample.setVelocities(attr.values);
      this._versions['velocities'] = attr.getVersion();
    }
  }
  
  this._schema.set(this._sample);
  this._attributeWriter.writeSample(null, points);

  this._storedSamples++;
  return true;
}

/// writes a single sample into the file based on the provided GeometryAttributes.
function Boolean AlembicPointsWriter.writeSamplePoints!(Ref<Points> points, SInt32 featureMask) {
  if(this == null)
    return false;
  if(points == null)
    return false;
  Ref<GeometryAttributes> attributes = points.getAttributes();
  return this.writeSample(attributes, featureMask);
}

function Boolean AlembicPointsWriter.writeSample!(Ref<GeometryAttributes> points) {
  return this.writeSample(points, AlembicExportFeature_Complete);
}

/// writes a single sample into the file based on the provided PolygonMesh.
function Boolean AlembicPointsWriter.writeSamplePoints!(Ref<Points> points)
{
  return this.writeSamplePoints(points, AlembicExportFeature_Complete);
}
