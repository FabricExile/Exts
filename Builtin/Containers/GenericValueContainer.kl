//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

alias GenericValue GenericValueArray[];

/// The GenericValueContainer is a special implementation of the GenericValue and 
/// GenericArrayValue. It's element type is GenericValue, thus it can be used to 
/// nest one GenericValue in another.
object GenericValueContainer : GenericValue, GenericArrayValue {
  /// \internal
  GenericValueArray value;
  /// \internal
  Index nameToIndex[String];
  /// \internal
  Integer layoutVersion;
};

/// default constructor
inline GenericValueContainer() {
  this.layoutVersion = 0;
}

/// returns type of the value
inline Type GenericValueContainer.getValueType() {
  return GenericValueContainer;
}

/// returns the version of this container
inline Integer GenericValueContainer.getLayoutVersion() {
  return this.layoutVersion;
}

/// increments the version of this container
inline GenericValueContainer.incrementLayoutVersion!() {
  this.layoutVersion++;
}

/// returns true if this value contains an array
inline Boolean GenericValueContainer.isArray() {
  return true;
}

/// return true if this value matches another one
/// NOTE: this is not properly supported (should compare the values)
inline Boolean GenericValueContainer.equals(Ref<GenericValue> other) {
  return this === other;
}

/// returns a hash value for this
/// NOTE: this is not properly supported (should do the hash of values)
inline UInt32 GenericValueContainer.hash_() {
  return this.hash();
}

/// returns the size of the contained value array
inline Size GenericValueContainer.size() {
  return this.value.size();
}

/// returns the size of the contained value array - disabled
inline GenericValueContainer.resize!(Size newSize) {
}

/// returns if the given key exists
inline Boolean GenericValueContainer.has(String key) {
  return this.nameToIndex.has(key);
}

/// returns a value by name
inline Ref<GenericValue> GenericValueContainer.get(String key) {
  Integer index = this.nameToIndex.get(key, -1);
  return this.get(index);
}

/// sets a value by name
inline GenericValueContainer.set!(String key, GenericValue value) {
  Integer index = this.nameToIndex.get(key, -1);
  if(index == -1) {
    index = this.size();
    this.nameToIndex[key] = index;
    this.value.push(value);
    this.incrementLayoutVersion();
  }
  else
    this.set(index, value);
}

/// returns a value by index
inline Ref<GenericValue> GenericValueContainer.get(Integer index) {
  if(index >= this.size() || index < 0)
    return GenericValue();
  return this.value[index];
}

/// sets a value by index
inline GenericValueContainer.set!(Integer index, GenericValue value) {
  this.value[index] = value;
}

/// pushed a value to the contained array
inline GenericValueContainer.push!(GenericValue value) {
  this.value.push(value);
  this.incrementLayoutVersion();
}

/// remove a value by name
inline Boolean GenericValueContainer.remove!(String key) {
  Integer index = this.nameToIndex.get(key, -1);
  if(index < 0)
    return false;

  if(this.value.size() == 1) {
    this.value.resize(0);
    this.nameToIndex.clear();
    this.incrementLayoutVersion();
    return true;
  }

  String highestKey = key;
  Integer highestIndex = index;
  for(iterKey, iterValue in this.nameToIndex) {
    if(highestIndex < iterValue) {
      highestKey = iterKey;
      highestIndex = iterValue;
    }
  }

  if(highestIndex != index) {
    this.nameToIndex[highestKey] = index;
    this.value[index] = this.value[highestIndex];
  }

  this.nameToIndex.delete(key);
  this.value.resize(this.value.size()-1);
  this.incrementLayoutVersion();
  return true;
}

/// remove a value by index
inline Boolean GenericValueContainer.remove!(Index index) {

  if(this.value.size() == 1) {
    this.value.resize(0);
    this.nameToIndex.clear();
    this.incrementLayoutVersion();
    return true;
  }

  for(iterKey, iterValue in this.nameToIndex) {
    if(iterValue == index)
      return this.remove(iterKey);
  }

  Boolean lastSwitched = false;
  for(iterKey, iterValue in this.nameToIndex) {
    if(iterValue == this.value.size()-1) {
      this.nameToIndex[iterKey] = index;
      lastSwitched = true;
      break;
    }
  }
  if(!lastSwitched) {
    for(iterKey, iterValue in this.nameToIndex) {
      if(iterValue > index)
        this.nameToIndex[iterKey]--;
    }
  }

  this.value[index] = this.value[this.value.size()-1];
  this.value.resize(this.value.size()-1);
  this.incrementLayoutVersion();
  return true;
}
