//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

require Math;

/// The GenericValue interface is used to describe any
/// value as a generic container.
interface GenericValue {
  /// returns the type of this value.
  Type getValueType();
  /// returns true if this is a GenericArrayValue
  Boolean isArray();
  /// returns true if this value matches another one
  Boolean equals(Ref<GenericValue> other);
  /// returns a hash value for this. Note: we use "_" to avoid colliding with the built-in, reserved "hash" function.
  UInt32 hash_();
};

/// The GenericArrayValue interface is used on top of the GenericValue
/// interface to describe any value as an array.
interface GenericArrayValue {
  /// returns the size of the array
  Size size();
  /// resizes the wrapped array
  resize!(Size newSize);
};


/// The GenericBooleanValue is a typed implementation of the GenericValue using a Boolean.
object GenericBooleanValue : GenericValue {
  /// \internal
  Boolean value;
};

/// returns the type of the value
inline Type GenericBooleanValue.getValueType() {
  return Boolean;
}

/// returns true if this value contains an array
inline Boolean GenericBooleanValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericBooleanValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericBooleanValue.equals(Ref<GenericValue> other)
{
  Ref<GenericBooleanValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Boolean GenericBooleanValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericBooleanValue.set!(Boolean value) {
  this.value = value;
}

alias Boolean BooleanArray[];

/// The GenericBooleanArrayValue is a typed implementation of the GenericArrayValue using a Boolean array element.
object GenericBooleanArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  BooleanArray value;
};

/// value constructor
inline GenericBooleanArrayValue(BooleanArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericBooleanArrayValue.getValueType() {
  return BooleanArray;
}

/// returns true if this value contains an array
inline Boolean GenericBooleanArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericBooleanArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericBooleanArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericBooleanArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericBooleanArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericBooleanArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline BooleanArray GenericBooleanArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericBooleanArrayValue.setShared!(BooleanArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericBooleanArrayValue.setCopy!(BooleanArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Boolean GenericBooleanArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericBooleanArrayValue.set!(Index index, Boolean value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericBooleanArrayValue.push!(Boolean value) {
  this.value.push(value);
}

// value constructor
inline GenericBooleanValue(Boolean value) {
  this.value = value;
}

/// The GenericStringValue is a typed implementation of the GenericValue using a String.
object GenericStringValue : GenericValue {
  /// \internal
  String value;
};

/// returns the type of the value
inline Type GenericStringValue.getValueType() {
  return String;
}

/// returns true if this value contains an array
inline Boolean GenericStringValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericStringValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericStringValue.equals(Ref<GenericValue> other)
{
  Ref<GenericStringValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline String GenericStringValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericStringValue.set!(String value) {
  this.value = value;
}

alias String StringArray[];

/// The GenericStringArrayValue is a typed implementation of the GenericArrayValue using a String array element.
object GenericStringArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  StringArray value;
};

/// value constructor
inline GenericStringArrayValue(StringArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericStringArrayValue.getValueType() {
  return StringArray;
}

/// returns true if this value contains an array
inline Boolean GenericStringArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericStringArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericStringArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericStringArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericStringArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericStringArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline StringArray GenericStringArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericStringArrayValue.setShared!(StringArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericStringArrayValue.setCopy!(StringArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline String GenericStringArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericStringArrayValue.set!(Index index, String value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericStringArrayValue.push!(String value) {
  this.value.push(value);
}

// value constructor
inline GenericStringValue(String value) {
  this.value = value;
}

/// The GenericDataValue is a typed implementation of the GenericValue using a Data.
object GenericDataValue : GenericValue {
  /// \internal
  Data value;
};

/// returns the type of the value
inline Type GenericDataValue.getValueType() {
  return Data;
}

/// returns true if this value contains an array
inline Boolean GenericDataValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericDataValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericDataValue.equals(Ref<GenericValue> other)
{
  Ref<GenericDataValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Data GenericDataValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericDataValue.set!(Data value) {
  this.value = value;
}

alias Data DataArray[];

/// The GenericDataArrayValue is a typed implementation of the GenericArrayValue using a Data array element.
object GenericDataArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  DataArray value;
};

/// value constructor
inline GenericDataArrayValue(DataArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericDataArrayValue.getValueType() {
  return DataArray;
}

/// returns true if this value contains an array
inline Boolean GenericDataArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericDataArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericDataArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericDataArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericDataArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericDataArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline DataArray GenericDataArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericDataArrayValue.setShared!(DataArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericDataArrayValue.setCopy!(DataArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Data GenericDataArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericDataArrayValue.set!(Index index, Data value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericDataArrayValue.push!(Data value) {
  this.value.push(value);
}

// value constructor
inline GenericDataValue(Data value) {
  this.value = value;
}

/// The GenericObjectValue is a typed implementation of the GenericValue using a Object.
object GenericObjectValue : GenericValue {
  /// \internal
  Object value;
};

/// returns the type of the value
inline Type GenericObjectValue.getValueType() {
  return Object;
}

/// returns true if this value contains an array
inline Boolean GenericObjectValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericObjectValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericObjectValue.equals(Ref<GenericValue> other)
{
  Ref<GenericObjectValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Object GenericObjectValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericObjectValue.set!(Object value) {
  this.value = value;
}

alias Object ObjectArray[];

/// The GenericObjectArrayValue is a typed implementation of the GenericArrayValue using a Object array element.
object GenericObjectArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  ObjectArray value;
};

/// value constructor
inline GenericObjectArrayValue(ObjectArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericObjectArrayValue.getValueType() {
  return ObjectArray;
}

/// returns true if this value contains an array
inline Boolean GenericObjectArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericObjectArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericObjectArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericObjectArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericObjectArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericObjectArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline ObjectArray GenericObjectArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericObjectArrayValue.setShared!(ObjectArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericObjectArrayValue.setCopy!(ObjectArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Object GenericObjectArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericObjectArrayValue.set!(Index index, Object value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericObjectArrayValue.push!(Object value) {
  this.value.push(value);
}

/// The GenericSInt8Value is a typed implementation of the GenericValue using a SInt8.
object GenericSInt8Value : GenericValue {
  /// \internal
  SInt8 value;
};

/// returns the type of the value
inline Type GenericSInt8Value.getValueType() {
  return SInt8;
}

/// returns true if this value contains an array
inline Boolean GenericSInt8Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericSInt8Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericSInt8Value.equals(Ref<GenericValue> other)
{
  Ref<GenericSInt8Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline SInt8 GenericSInt8Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericSInt8Value.set!(SInt8 value) {
  this.value = value;
}

alias SInt8 SInt8Array[];

/// The GenericSInt8ArrayValue is a typed implementation of the GenericArrayValue using a SInt8 array element.
object GenericSInt8ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  SInt8Array value;
};

/// value constructor
inline GenericSInt8ArrayValue(SInt8Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericSInt8ArrayValue.getValueType() {
  return SInt8Array;
}

/// returns true if this value contains an array
inline Boolean GenericSInt8ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericSInt8ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericSInt8ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericSInt8ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericSInt8ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericSInt8ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline SInt8Array GenericSInt8ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericSInt8ArrayValue.setShared!(SInt8Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericSInt8ArrayValue.setCopy!(SInt8Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline SInt8 GenericSInt8ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericSInt8ArrayValue.set!(Index index, SInt8 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericSInt8ArrayValue.push!(SInt8 value) {
  this.value.push(value);
}

// value constructor
inline GenericSInt8Value(SInt8 value) {
  this.value = value;
}

/// The GenericSInt16Value is a typed implementation of the GenericValue using a SInt16.
object GenericSInt16Value : GenericValue {
  /// \internal
  SInt16 value;
};

/// returns the type of the value
inline Type GenericSInt16Value.getValueType() {
  return SInt16;
}

/// returns true if this value contains an array
inline Boolean GenericSInt16Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericSInt16Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericSInt16Value.equals(Ref<GenericValue> other)
{
  Ref<GenericSInt16Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline SInt16 GenericSInt16Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericSInt16Value.set!(SInt16 value) {
  this.value = value;
}

alias SInt16 SInt16Array[];

/// The GenericSInt16ArrayValue is a typed implementation of the GenericArrayValue using a SInt16 array element.
object GenericSInt16ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  SInt16Array value;
};

/// value constructor
inline GenericSInt16ArrayValue(SInt16Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericSInt16ArrayValue.getValueType() {
  return SInt16Array;
}

/// returns true if this value contains an array
inline Boolean GenericSInt16ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericSInt16ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericSInt16ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericSInt16ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericSInt16ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericSInt16ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline SInt16Array GenericSInt16ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericSInt16ArrayValue.setShared!(SInt16Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericSInt16ArrayValue.setCopy!(SInt16Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline SInt16 GenericSInt16ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericSInt16ArrayValue.set!(Index index, SInt16 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericSInt16ArrayValue.push!(SInt16 value) {
  this.value.push(value);
}

// value constructor
inline GenericSInt16Value(SInt16 value) {
  this.value = value;
}

/// The GenericSInt32Value is a typed implementation of the GenericValue using a SInt32.
object GenericSInt32Value : GenericValue {
  /// \internal
  SInt32 value;
};

/// returns the type of the value
inline Type GenericSInt32Value.getValueType() {
  return SInt32;
}

/// returns true if this value contains an array
inline Boolean GenericSInt32Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericSInt32Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericSInt32Value.equals(Ref<GenericValue> other)
{
  Ref<GenericSInt32Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline SInt32 GenericSInt32Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericSInt32Value.set!(SInt32 value) {
  this.value = value;
}

alias SInt32 SInt32Array[];

/// The GenericSInt32ArrayValue is a typed implementation of the GenericArrayValue using a SInt32 array element.
object GenericSInt32ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  SInt32Array value;
};

/// value constructor
inline GenericSInt32ArrayValue(SInt32Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericSInt32ArrayValue.getValueType() {
  return SInt32Array;
}

/// returns true if this value contains an array
inline Boolean GenericSInt32ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericSInt32ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericSInt32ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericSInt32ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericSInt32ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericSInt32ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline SInt32Array GenericSInt32ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericSInt32ArrayValue.setShared!(SInt32Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericSInt32ArrayValue.setCopy!(SInt32Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline SInt32 GenericSInt32ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericSInt32ArrayValue.set!(Index index, SInt32 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericSInt32ArrayValue.push!(SInt32 value) {
  this.value.push(value);
}

// value constructor
inline GenericSInt32Value(SInt32 value) {
  this.value = value;
}

/// The GenericSInt64Value is a typed implementation of the GenericValue using a SInt64.
object GenericSInt64Value : GenericValue {
  /// \internal
  SInt64 value;
};

/// returns the type of the value
inline Type GenericSInt64Value.getValueType() {
  return SInt64;
}

/// returns true if this value contains an array
inline Boolean GenericSInt64Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericSInt64Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericSInt64Value.equals(Ref<GenericValue> other)
{
  Ref<GenericSInt64Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline SInt64 GenericSInt64Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericSInt64Value.set!(SInt64 value) {
  this.value = value;
}

alias SInt64 SInt64Array[];

/// The GenericSInt64ArrayValue is a typed implementation of the GenericArrayValue using a SInt64 array element.
object GenericSInt64ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  SInt64Array value;
};

/// value constructor
inline GenericSInt64ArrayValue(SInt64Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericSInt64ArrayValue.getValueType() {
  return SInt64Array;
}

/// returns true if this value contains an array
inline Boolean GenericSInt64ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericSInt64ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericSInt64ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericSInt64ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericSInt64ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericSInt64ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline SInt64Array GenericSInt64ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericSInt64ArrayValue.setShared!(SInt64Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericSInt64ArrayValue.setCopy!(SInt64Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline SInt64 GenericSInt64ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericSInt64ArrayValue.set!(Index index, SInt64 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericSInt64ArrayValue.push!(SInt64 value) {
  this.value.push(value);
}

// value constructor
inline GenericSInt64Value(SInt64 value) {
  this.value = value;
}

/// The GenericUInt8Value is a typed implementation of the GenericValue using a UInt8.
object GenericUInt8Value : GenericValue {
  /// \internal
  UInt8 value;
};

/// returns the type of the value
inline Type GenericUInt8Value.getValueType() {
  return UInt8;
}

/// returns true if this value contains an array
inline Boolean GenericUInt8Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericUInt8Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericUInt8Value.equals(Ref<GenericValue> other)
{
  Ref<GenericUInt8Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline UInt8 GenericUInt8Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericUInt8Value.set!(UInt8 value) {
  this.value = value;
}

alias UInt8 UInt8Array[];

/// The GenericUInt8ArrayValue is a typed implementation of the GenericArrayValue using a UInt8 array element.
object GenericUInt8ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  UInt8Array value;
};

/// value constructor
inline GenericUInt8ArrayValue(UInt8Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericUInt8ArrayValue.getValueType() {
  return UInt8Array;
}

/// returns true if this value contains an array
inline Boolean GenericUInt8ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericUInt8ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericUInt8ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericUInt8ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericUInt8ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericUInt8ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline UInt8Array GenericUInt8ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericUInt8ArrayValue.setShared!(UInt8Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericUInt8ArrayValue.setCopy!(UInt8Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline UInt8 GenericUInt8ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericUInt8ArrayValue.set!(Index index, UInt8 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericUInt8ArrayValue.push!(UInt8 value) {
  this.value.push(value);
}

// value constructor
inline GenericUInt8Value(UInt8 value) {
  this.value = value;
}

/// The GenericUInt16Value is a typed implementation of the GenericValue using a UInt16.
object GenericUInt16Value : GenericValue {
  /// \internal
  UInt16 value;
};

/// returns the type of the value
inline Type GenericUInt16Value.getValueType() {
  return UInt16;
}

/// returns true if this value contains an array
inline Boolean GenericUInt16Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericUInt16Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericUInt16Value.equals(Ref<GenericValue> other)
{
  Ref<GenericUInt16Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline UInt16 GenericUInt16Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericUInt16Value.set!(UInt16 value) {
  this.value = value;
}

alias UInt16 UInt16Array[];

/// The GenericUInt16ArrayValue is a typed implementation of the GenericArrayValue using a UInt16 array element.
object GenericUInt16ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  UInt16Array value;
};

/// value constructor
inline GenericUInt16ArrayValue(UInt16Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericUInt16ArrayValue.getValueType() {
  return UInt16Array;
}

/// returns true if this value contains an array
inline Boolean GenericUInt16ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericUInt16ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericUInt16ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericUInt16ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericUInt16ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericUInt16ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline UInt16Array GenericUInt16ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericUInt16ArrayValue.setShared!(UInt16Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericUInt16ArrayValue.setCopy!(UInt16Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline UInt16 GenericUInt16ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericUInt16ArrayValue.set!(Index index, UInt16 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericUInt16ArrayValue.push!(UInt16 value) {
  this.value.push(value);
}

// value constructor
inline GenericUInt16Value(UInt16 value) {
  this.value = value;
}

/// The GenericUInt32Value is a typed implementation of the GenericValue using a UInt32.
object GenericUInt32Value : GenericValue {
  /// \internal
  UInt32 value;
};

/// returns the type of the value
inline Type GenericUInt32Value.getValueType() {
  return UInt32;
}

/// returns true if this value contains an array
inline Boolean GenericUInt32Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericUInt32Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericUInt32Value.equals(Ref<GenericValue> other)
{
  Ref<GenericUInt32Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline UInt32 GenericUInt32Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericUInt32Value.set!(UInt32 value) {
  this.value = value;
}

alias UInt32 UInt32Array[];

/// The GenericUInt32ArrayValue is a typed implementation of the GenericArrayValue using a UInt32 array element.
object GenericUInt32ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  UInt32Array value;
};

/// value constructor
inline GenericUInt32ArrayValue(UInt32Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericUInt32ArrayValue.getValueType() {
  return UInt32Array;
}

/// returns true if this value contains an array
inline Boolean GenericUInt32ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericUInt32ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericUInt32ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericUInt32ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericUInt32ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericUInt32ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline UInt32Array GenericUInt32ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericUInt32ArrayValue.setShared!(UInt32Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericUInt32ArrayValue.setCopy!(UInt32Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline UInt32 GenericUInt32ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericUInt32ArrayValue.set!(Index index, UInt32 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericUInt32ArrayValue.push!(UInt32 value) {
  this.value.push(value);
}

// value constructor
inline GenericUInt32Value(UInt32 value) {
  this.value = value;
}

/// The GenericUInt64Value is a typed implementation of the GenericValue using a UInt64.
object GenericUInt64Value : GenericValue {
  /// \internal
  UInt64 value;
};

/// returns the type of the value
inline Type GenericUInt64Value.getValueType() {
  return UInt64;
}

/// returns true if this value contains an array
inline Boolean GenericUInt64Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericUInt64Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericUInt64Value.equals(Ref<GenericValue> other)
{
  Ref<GenericUInt64Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline UInt64 GenericUInt64Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericUInt64Value.set!(UInt64 value) {
  this.value = value;
}

alias UInt64 UInt64Array[];

/// The GenericUInt64ArrayValue is a typed implementation of the GenericArrayValue using a UInt64 array element.
object GenericUInt64ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  UInt64Array value;
};

/// value constructor
inline GenericUInt64ArrayValue(UInt64Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericUInt64ArrayValue.getValueType() {
  return UInt64Array;
}

/// returns true if this value contains an array
inline Boolean GenericUInt64ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericUInt64ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericUInt64ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericUInt64ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericUInt64ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericUInt64ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline UInt64Array GenericUInt64ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericUInt64ArrayValue.setShared!(UInt64Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericUInt64ArrayValue.setCopy!(UInt64Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline UInt64 GenericUInt64ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericUInt64ArrayValue.set!(Index index, UInt64 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericUInt64ArrayValue.push!(UInt64 value) {
  this.value.push(value);
}

// value constructor
inline GenericUInt64Value(UInt64 value) {
  this.value = value;
}

/// The GenericFloat32Value is a typed implementation of the GenericValue using a Float32.
object GenericFloat32Value : GenericValue {
  /// \internal
  Float32 value;
};

/// returns the type of the value
inline Type GenericFloat32Value.getValueType() {
  return Float32;
}

/// returns true if this value contains an array
inline Boolean GenericFloat32Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericFloat32Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericFloat32Value.equals(Ref<GenericValue> other)
{
  Ref<GenericFloat32Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Float32 GenericFloat32Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericFloat32Value.set!(Float32 value) {
  this.value = value;
}

alias Float32 Float32Array[];

/// The GenericFloat32ArrayValue is a typed implementation of the GenericArrayValue using a Float32 array element.
object GenericFloat32ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Float32Array value;
};

/// value constructor
inline GenericFloat32ArrayValue(Float32Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericFloat32ArrayValue.getValueType() {
  return Float32Array;
}

/// returns true if this value contains an array
inline Boolean GenericFloat32ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericFloat32ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericFloat32ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericFloat32ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericFloat32ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericFloat32ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Float32Array GenericFloat32ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericFloat32ArrayValue.setShared!(Float32Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericFloat32ArrayValue.setCopy!(Float32Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Float32 GenericFloat32ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericFloat32ArrayValue.set!(Index index, Float32 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericFloat32ArrayValue.push!(Float32 value) {
  this.value.push(value);
}

// value constructor
inline GenericFloat32Value(Float32 value) {
  this.value = value;
}

/// The GenericFloat64Value is a typed implementation of the GenericValue using a Float64.
object GenericFloat64Value : GenericValue {
  /// \internal
  Float64 value;
};

/// returns the type of the value
inline Type GenericFloat64Value.getValueType() {
  return Float64;
}

/// returns true if this value contains an array
inline Boolean GenericFloat64Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericFloat64Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericFloat64Value.equals(Ref<GenericValue> other)
{
  Ref<GenericFloat64Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Float64 GenericFloat64Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericFloat64Value.set!(Float64 value) {
  this.value = value;
}

alias Float64 Float64Array[];

/// The GenericFloat64ArrayValue is a typed implementation of the GenericArrayValue using a Float64 array element.
object GenericFloat64ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Float64Array value;
};

/// value constructor
inline GenericFloat64ArrayValue(Float64Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericFloat64ArrayValue.getValueType() {
  return Float64Array;
}

/// returns true if this value contains an array
inline Boolean GenericFloat64ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericFloat64ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericFloat64ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericFloat64ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericFloat64ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericFloat64ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Float64Array GenericFloat64ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericFloat64ArrayValue.setShared!(Float64Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericFloat64ArrayValue.setCopy!(Float64Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Float64 GenericFloat64ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericFloat64ArrayValue.set!(Index index, Float64 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericFloat64ArrayValue.push!(Float64 value) {
  this.value.push(value);
}

// value constructor
inline GenericFloat64Value(Float64 value) {
  this.value = value;
}

/// The GenericARGBValue is a typed implementation of the GenericValue using a ARGB.
object GenericARGBValue : GenericValue {
  /// \internal
  ARGB value;
};

/// returns the type of the value
inline Type GenericARGBValue.getValueType() {
  return ARGB;
}

/// returns true if this value contains an array
inline Boolean GenericARGBValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericARGBValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericARGBValue.equals(Ref<GenericValue> other)
{
  Ref<GenericARGBValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline ARGB GenericARGBValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericARGBValue.set!(ARGB value) {
  this.value = value;
}

alias ARGB ARGBArray[];

/// The GenericARGBArrayValue is a typed implementation of the GenericArrayValue using a ARGB array element.
object GenericARGBArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  ARGBArray value;
};

/// value constructor
inline GenericARGBArrayValue(ARGBArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericARGBArrayValue.getValueType() {
  return ARGBArray;
}

/// returns true if this value contains an array
inline Boolean GenericARGBArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericARGBArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericARGBArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericARGBArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericARGBArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericARGBArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline ARGBArray GenericARGBArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericARGBArrayValue.setShared!(ARGBArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericARGBArrayValue.setCopy!(ARGBArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline ARGB GenericARGBArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericARGBArrayValue.set!(Index index, ARGB value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericARGBArrayValue.push!(ARGB value) {
  this.value.push(value);
}

// value constructor
inline GenericARGBValue(ARGB value) {
  this.value = value;
}

/// The GenericBox2Value is a typed implementation of the GenericValue using a Box2.
object GenericBox2Value : GenericValue {
  /// \internal
  Box2 value;
};

/// returns the type of the value
inline Type GenericBox2Value.getValueType() {
  return Box2;
}

/// returns true if this value contains an array
inline Boolean GenericBox2Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericBox2Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericBox2Value.equals(Ref<GenericValue> other)
{
  Ref<GenericBox2Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Box2 GenericBox2Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericBox2Value.set!(Box2 value) {
  this.value = value;
}

alias Box2 Box2Array[];

/// The GenericBox2ArrayValue is a typed implementation of the GenericArrayValue using a Box2 array element.
object GenericBox2ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Box2Array value;
};

/// value constructor
inline GenericBox2ArrayValue(Box2Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericBox2ArrayValue.getValueType() {
  return Box2Array;
}

/// returns true if this value contains an array
inline Boolean GenericBox2ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericBox2ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericBox2ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericBox2ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericBox2ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericBox2ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Box2Array GenericBox2ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericBox2ArrayValue.setShared!(Box2Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericBox2ArrayValue.setCopy!(Box2Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Box2 GenericBox2ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericBox2ArrayValue.set!(Index index, Box2 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericBox2ArrayValue.push!(Box2 value) {
  this.value.push(value);
}

// value constructor
inline GenericBox2Value(Box2 value) {
  this.value = value;
}

/// The GenericBox3Value is a typed implementation of the GenericValue using a Box3.
object GenericBox3Value : GenericValue {
  /// \internal
  Box3 value;
};

/// returns the type of the value
inline Type GenericBox3Value.getValueType() {
  return Box3;
}

/// returns true if this value contains an array
inline Boolean GenericBox3Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericBox3Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericBox3Value.equals(Ref<GenericValue> other)
{
  Ref<GenericBox3Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Box3 GenericBox3Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericBox3Value.set!(Box3 value) {
  this.value = value;
}

alias Box3 Box3Array[];

/// The GenericBox3ArrayValue is a typed implementation of the GenericArrayValue using a Box3 array element.
object GenericBox3ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Box3Array value;
};

/// value constructor
inline GenericBox3ArrayValue(Box3Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericBox3ArrayValue.getValueType() {
  return Box3Array;
}

/// returns true if this value contains an array
inline Boolean GenericBox3ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericBox3ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericBox3ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericBox3ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericBox3ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericBox3ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Box3Array GenericBox3ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericBox3ArrayValue.setShared!(Box3Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericBox3ArrayValue.setCopy!(Box3Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Box3 GenericBox3ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericBox3ArrayValue.set!(Index index, Box3 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericBox3ArrayValue.push!(Box3 value) {
  this.value.push(value);
}

// value constructor
inline GenericBox3Value(Box3 value) {
  this.value = value;
}

/// The GenericColorValue is a typed implementation of the GenericValue using a Color.
object GenericColorValue : GenericValue {
  /// \internal
  Color value;
};

/// returns the type of the value
inline Type GenericColorValue.getValueType() {
  return Color;
}

/// returns true if this value contains an array
inline Boolean GenericColorValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericColorValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericColorValue.equals(Ref<GenericValue> other)
{
  Ref<GenericColorValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Color GenericColorValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericColorValue.set!(Color value) {
  this.value = value;
}

alias Color ColorArray[];

/// The GenericColorArrayValue is a typed implementation of the GenericArrayValue using a Color array element.
object GenericColorArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  ColorArray value;
};

/// value constructor
inline GenericColorArrayValue(ColorArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericColorArrayValue.getValueType() {
  return ColorArray;
}

/// returns true if this value contains an array
inline Boolean GenericColorArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericColorArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericColorArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericColorArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericColorArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericColorArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline ColorArray GenericColorArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericColorArrayValue.setShared!(ColorArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericColorArrayValue.setCopy!(ColorArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Color GenericColorArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericColorArrayValue.set!(Index index, Color value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericColorArrayValue.push!(Color value) {
  this.value.push(value);
}

// value constructor
inline GenericColorValue(Color value) {
  this.value = value;
}

/// The GenericComplexValue is a typed implementation of the GenericValue using a Complex.
object GenericComplexValue : GenericValue {
  /// \internal
  Complex value;
};

/// returns the type of the value
inline Type GenericComplexValue.getValueType() {
  return Complex;
}

/// returns true if this value contains an array
inline Boolean GenericComplexValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericComplexValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericComplexValue.equals(Ref<GenericValue> other)
{
  Ref<GenericComplexValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Complex GenericComplexValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericComplexValue.set!(Complex value) {
  this.value = value;
}

alias Complex ComplexArray[];

/// The GenericComplexArrayValue is a typed implementation of the GenericArrayValue using a Complex array element.
object GenericComplexArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  ComplexArray value;
};

/// value constructor
inline GenericComplexArrayValue(ComplexArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericComplexArrayValue.getValueType() {
  return ComplexArray;
}

/// returns true if this value contains an array
inline Boolean GenericComplexArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericComplexArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericComplexArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericComplexArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericComplexArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericComplexArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline ComplexArray GenericComplexArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericComplexArrayValue.setShared!(ComplexArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericComplexArrayValue.setCopy!(ComplexArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Complex GenericComplexArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericComplexArrayValue.set!(Index index, Complex value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericComplexArrayValue.push!(Complex value) {
  this.value.push(value);
}

// value constructor
inline GenericComplexValue(Complex value) {
  this.value = value;
}

/// The GenericComplex_dValue is a typed implementation of the GenericValue using a Complex_d.
object GenericComplex_dValue : GenericValue {
  /// \internal
  Complex_d value;
};

/// returns the type of the value
inline Type GenericComplex_dValue.getValueType() {
  return Complex_d;
}

/// returns true if this value contains an array
inline Boolean GenericComplex_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericComplex_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericComplex_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericComplex_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Complex_d GenericComplex_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericComplex_dValue.set!(Complex_d value) {
  this.value = value;
}

alias Complex_d Complex_dArray[];

/// The GenericComplex_dArrayValue is a typed implementation of the GenericArrayValue using a Complex_d array element.
object GenericComplex_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Complex_dArray value;
};

/// value constructor
inline GenericComplex_dArrayValue(Complex_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericComplex_dArrayValue.getValueType() {
  return Complex_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericComplex_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericComplex_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericComplex_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericComplex_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericComplex_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericComplex_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Complex_dArray GenericComplex_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericComplex_dArrayValue.setShared!(Complex_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericComplex_dArrayValue.setCopy!(Complex_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Complex_d GenericComplex_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericComplex_dArrayValue.set!(Index index, Complex_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericComplex_dArrayValue.push!(Complex_d value) {
  this.value.push(value);
}

// value constructor
inline GenericComplex_dValue(Complex_d value) {
  this.value = value;
}

/// The GenericEulerValue is a typed implementation of the GenericValue using a Euler.
object GenericEulerValue : GenericValue {
  /// \internal
  Euler value;
};

/// returns the type of the value
inline Type GenericEulerValue.getValueType() {
  return Euler;
}

/// returns true if this value contains an array
inline Boolean GenericEulerValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericEulerValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericEulerValue.equals(Ref<GenericValue> other)
{
  Ref<GenericEulerValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Euler GenericEulerValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericEulerValue.set!(Euler value) {
  this.value = value;
}

alias Euler EulerArray[];

/// The GenericEulerArrayValue is a typed implementation of the GenericArrayValue using a Euler array element.
object GenericEulerArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  EulerArray value;
};

/// value constructor
inline GenericEulerArrayValue(EulerArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericEulerArrayValue.getValueType() {
  return EulerArray;
}

/// returns true if this value contains an array
inline Boolean GenericEulerArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericEulerArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericEulerArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericEulerArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericEulerArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericEulerArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline EulerArray GenericEulerArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericEulerArrayValue.setShared!(EulerArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericEulerArrayValue.setCopy!(EulerArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Euler GenericEulerArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericEulerArrayValue.set!(Index index, Euler value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericEulerArrayValue.push!(Euler value) {
  this.value.push(value);
}

// value constructor
inline GenericEulerValue(Euler value) {
  this.value = value;
}

/// The GenericEuler_dValue is a typed implementation of the GenericValue using a Euler_d.
object GenericEuler_dValue : GenericValue {
  /// \internal
  Euler_d value;
};

/// returns the type of the value
inline Type GenericEuler_dValue.getValueType() {
  return Euler_d;
}

/// returns true if this value contains an array
inline Boolean GenericEuler_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericEuler_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericEuler_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericEuler_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Euler_d GenericEuler_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericEuler_dValue.set!(Euler_d value) {
  this.value = value;
}

alias Euler_d Euler_dArray[];

/// The GenericEuler_dArrayValue is a typed implementation of the GenericArrayValue using a Euler_d array element.
object GenericEuler_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Euler_dArray value;
};

/// value constructor
inline GenericEuler_dArrayValue(Euler_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericEuler_dArrayValue.getValueType() {
  return Euler_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericEuler_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericEuler_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericEuler_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericEuler_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericEuler_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericEuler_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Euler_dArray GenericEuler_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericEuler_dArrayValue.setShared!(Euler_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericEuler_dArrayValue.setCopy!(Euler_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Euler_d GenericEuler_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericEuler_dArrayValue.set!(Index index, Euler_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericEuler_dArrayValue.push!(Euler_d value) {
  this.value.push(value);
}

// value constructor
inline GenericEuler_dValue(Euler_d value) {
  this.value = value;
}

/// The GenericEuler_iValue is a typed implementation of the GenericValue using a Euler_i.
object GenericEuler_iValue : GenericValue {
  /// \internal
  Euler_i value;
};

/// returns the type of the value
inline Type GenericEuler_iValue.getValueType() {
  return Euler_i;
}

/// returns true if this value contains an array
inline Boolean GenericEuler_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericEuler_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericEuler_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericEuler_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Euler_i GenericEuler_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericEuler_iValue.set!(Euler_i value) {
  this.value = value;
}

alias Euler_i Euler_iArray[];

/// The GenericEuler_iArrayValue is a typed implementation of the GenericArrayValue using a Euler_i array element.
object GenericEuler_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Euler_iArray value;
};

/// value constructor
inline GenericEuler_iArrayValue(Euler_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericEuler_iArrayValue.getValueType() {
  return Euler_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericEuler_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericEuler_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericEuler_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericEuler_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericEuler_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericEuler_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Euler_iArray GenericEuler_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericEuler_iArrayValue.setShared!(Euler_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericEuler_iArrayValue.setCopy!(Euler_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Euler_i GenericEuler_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericEuler_iArrayValue.set!(Index index, Euler_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericEuler_iArrayValue.push!(Euler_i value) {
  this.value.push(value);
}

// value constructor
inline GenericEuler_iValue(Euler_i value) {
  this.value = value;
}

/// The GenericMatValue is a typed implementation of the GenericValue using a Mat.
object GenericMatValue : GenericValue {
  /// \internal
  Mat value;
};

/// returns the type of the value
inline Type GenericMatValue.getValueType() {
  return Mat;
}

/// returns true if this value contains an array
inline Boolean GenericMatValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMatValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMatValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMatValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat GenericMatValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMatValue.set!(Mat value) {
  this.value = value;
}

alias Mat MatArray[];

/// The GenericMatArrayValue is a typed implementation of the GenericArrayValue using a Mat array element.
object GenericMatArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  MatArray value;
};

/// value constructor
inline GenericMatArrayValue(MatArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMatArrayValue.getValueType() {
  return MatArray;
}

/// returns true if this value contains an array
inline Boolean GenericMatArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMatArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMatArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMatArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMatArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMatArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline MatArray GenericMatArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMatArrayValue.setShared!(MatArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMatArrayValue.setCopy!(MatArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat GenericMatArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMatArrayValue.set!(Index index, Mat value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMatArrayValue.push!(Mat value) {
  this.value.push(value);
}

// value constructor
inline GenericMatValue(Mat value) {
  this.value = value;
}

/// The GenericMat22Value is a typed implementation of the GenericValue using a Mat22.
object GenericMat22Value : GenericValue {
  /// \internal
  Mat22 value;
};

/// returns the type of the value
inline Type GenericMat22Value.getValueType() {
  return Mat22;
}

/// returns true if this value contains an array
inline Boolean GenericMat22Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat22Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat22Value.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat22 GenericMat22Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat22Value.set!(Mat22 value) {
  this.value = value;
}

alias Mat22 Mat22Array[];

/// The GenericMat22ArrayValue is a typed implementation of the GenericArrayValue using a Mat22 array element.
object GenericMat22ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat22Array value;
};

/// value constructor
inline GenericMat22ArrayValue(Mat22Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat22ArrayValue.getValueType() {
  return Mat22Array;
}

/// returns true if this value contains an array
inline Boolean GenericMat22ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat22ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat22ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat22ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat22ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat22Array GenericMat22ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat22ArrayValue.setShared!(Mat22Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat22ArrayValue.setCopy!(Mat22Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat22 GenericMat22ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat22ArrayValue.set!(Index index, Mat22 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat22ArrayValue.push!(Mat22 value) {
  this.value.push(value);
}

// value constructor
inline GenericMat22Value(Mat22 value) {
  this.value = value;
}

/// The GenericMat22_cValue is a typed implementation of the GenericValue using a Mat22_c.
object GenericMat22_cValue : GenericValue {
  /// \internal
  Mat22_c value;
};

/// returns the type of the value
inline Type GenericMat22_cValue.getValueType() {
  return Mat22_c;
}

/// returns true if this value contains an array
inline Boolean GenericMat22_cValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat22_cValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat22_cValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22_cValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat22_c GenericMat22_cValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat22_cValue.set!(Mat22_c value) {
  this.value = value;
}

alias Mat22_c Mat22_cArray[];

/// The GenericMat22_cArrayValue is a typed implementation of the GenericArrayValue using a Mat22_c array element.
object GenericMat22_cArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat22_cArray value;
};

/// value constructor
inline GenericMat22_cArrayValue(Mat22_cArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat22_cArrayValue.getValueType() {
  return Mat22_cArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat22_cArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat22_cArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22_cArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat22_cArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat22_cArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat22_cArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat22_cArray GenericMat22_cArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat22_cArrayValue.setShared!(Mat22_cArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat22_cArrayValue.setCopy!(Mat22_cArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat22_c GenericMat22_cArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat22_cArrayValue.set!(Index index, Mat22_c value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat22_cArrayValue.push!(Mat22_c value) {
  this.value.push(value);
}

// value constructor
inline GenericMat22_cValue(Mat22_c value) {
  this.value = value;
}

/// The GenericMat22_cdValue is a typed implementation of the GenericValue using a Mat22_cd.
object GenericMat22_cdValue : GenericValue {
  /// \internal
  Mat22_cd value;
};

/// returns the type of the value
inline Type GenericMat22_cdValue.getValueType() {
  return Mat22_cd;
}

/// returns true if this value contains an array
inline Boolean GenericMat22_cdValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat22_cdValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat22_cdValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22_cdValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat22_cd GenericMat22_cdValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat22_cdValue.set!(Mat22_cd value) {
  this.value = value;
}

alias Mat22_cd Mat22_cdArray[];

/// The GenericMat22_cdArrayValue is a typed implementation of the GenericArrayValue using a Mat22_cd array element.
object GenericMat22_cdArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat22_cdArray value;
};

/// value constructor
inline GenericMat22_cdArrayValue(Mat22_cdArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat22_cdArrayValue.getValueType() {
  return Mat22_cdArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat22_cdArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat22_cdArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22_cdArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat22_cdArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat22_cdArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat22_cdArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat22_cdArray GenericMat22_cdArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat22_cdArrayValue.setShared!(Mat22_cdArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat22_cdArrayValue.setCopy!(Mat22_cdArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat22_cd GenericMat22_cdArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat22_cdArrayValue.set!(Index index, Mat22_cd value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat22_cdArrayValue.push!(Mat22_cd value) {
  this.value.push(value);
}

// value constructor
inline GenericMat22_cdValue(Mat22_cd value) {
  this.value = value;
}

/// The GenericMat22_dValue is a typed implementation of the GenericValue using a Mat22_d.
object GenericMat22_dValue : GenericValue {
  /// \internal
  Mat22_d value;
};

/// returns the type of the value
inline Type GenericMat22_dValue.getValueType() {
  return Mat22_d;
}

/// returns true if this value contains an array
inline Boolean GenericMat22_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat22_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat22_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat22_d GenericMat22_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat22_dValue.set!(Mat22_d value) {
  this.value = value;
}

alias Mat22_d Mat22_dArray[];

/// The GenericMat22_dArrayValue is a typed implementation of the GenericArrayValue using a Mat22_d array element.
object GenericMat22_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat22_dArray value;
};

/// value constructor
inline GenericMat22_dArrayValue(Mat22_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat22_dArrayValue.getValueType() {
  return Mat22_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat22_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat22_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat22_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat22_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat22_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat22_dArray GenericMat22_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat22_dArrayValue.setShared!(Mat22_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat22_dArrayValue.setCopy!(Mat22_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat22_d GenericMat22_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat22_dArrayValue.set!(Index index, Mat22_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat22_dArrayValue.push!(Mat22_d value) {
  this.value.push(value);
}

// value constructor
inline GenericMat22_dValue(Mat22_d value) {
  this.value = value;
}

/// The GenericMat22_iValue is a typed implementation of the GenericValue using a Mat22_i.
object GenericMat22_iValue : GenericValue {
  /// \internal
  Mat22_i value;
};

/// returns the type of the value
inline Type GenericMat22_iValue.getValueType() {
  return Mat22_i;
}

/// returns true if this value contains an array
inline Boolean GenericMat22_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat22_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat22_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat22_i GenericMat22_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat22_iValue.set!(Mat22_i value) {
  this.value = value;
}

alias Mat22_i Mat22_iArray[];

/// The GenericMat22_iArrayValue is a typed implementation of the GenericArrayValue using a Mat22_i array element.
object GenericMat22_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat22_iArray value;
};

/// value constructor
inline GenericMat22_iArrayValue(Mat22_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat22_iArrayValue.getValueType() {
  return Mat22_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat22_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat22_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat22_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat22_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat22_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat22_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat22_iArray GenericMat22_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat22_iArrayValue.setShared!(Mat22_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat22_iArrayValue.setCopy!(Mat22_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat22_i GenericMat22_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat22_iArrayValue.set!(Index index, Mat22_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat22_iArrayValue.push!(Mat22_i value) {
  this.value.push(value);
}

// value constructor
inline GenericMat22_iValue(Mat22_i value) {
  this.value = value;
}

/// The GenericMat33Value is a typed implementation of the GenericValue using a Mat33.
object GenericMat33Value : GenericValue {
  /// \internal
  Mat33 value;
};

/// returns the type of the value
inline Type GenericMat33Value.getValueType() {
  return Mat33;
}

/// returns true if this value contains an array
inline Boolean GenericMat33Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat33Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat33Value.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat33 GenericMat33Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat33Value.set!(Mat33 value) {
  this.value = value;
}

alias Mat33 Mat33Array[];

/// The GenericMat33ArrayValue is a typed implementation of the GenericArrayValue using a Mat33 array element.
object GenericMat33ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat33Array value;
};

/// value constructor
inline GenericMat33ArrayValue(Mat33Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat33ArrayValue.getValueType() {
  return Mat33Array;
}

/// returns true if this value contains an array
inline Boolean GenericMat33ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat33ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat33ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat33ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat33ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat33Array GenericMat33ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat33ArrayValue.setShared!(Mat33Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat33ArrayValue.setCopy!(Mat33Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat33 GenericMat33ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat33ArrayValue.set!(Index index, Mat33 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat33ArrayValue.push!(Mat33 value) {
  this.value.push(value);
}

// value constructor
inline GenericMat33Value(Mat33 value) {
  this.value = value;
}

/// The GenericMat33_cValue is a typed implementation of the GenericValue using a Mat33_c.
object GenericMat33_cValue : GenericValue {
  /// \internal
  Mat33_c value;
};

/// returns the type of the value
inline Type GenericMat33_cValue.getValueType() {
  return Mat33_c;
}

/// returns true if this value contains an array
inline Boolean GenericMat33_cValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat33_cValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat33_cValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33_cValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat33_c GenericMat33_cValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat33_cValue.set!(Mat33_c value) {
  this.value = value;
}

alias Mat33_c Mat33_cArray[];

/// The GenericMat33_cArrayValue is a typed implementation of the GenericArrayValue using a Mat33_c array element.
object GenericMat33_cArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat33_cArray value;
};

/// value constructor
inline GenericMat33_cArrayValue(Mat33_cArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat33_cArrayValue.getValueType() {
  return Mat33_cArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat33_cArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat33_cArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33_cArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat33_cArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat33_cArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat33_cArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat33_cArray GenericMat33_cArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat33_cArrayValue.setShared!(Mat33_cArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat33_cArrayValue.setCopy!(Mat33_cArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat33_c GenericMat33_cArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat33_cArrayValue.set!(Index index, Mat33_c value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat33_cArrayValue.push!(Mat33_c value) {
  this.value.push(value);
}

// value constructor
inline GenericMat33_cValue(Mat33_c value) {
  this.value = value;
}

/// The GenericMat33_cdValue is a typed implementation of the GenericValue using a Mat33_cd.
object GenericMat33_cdValue : GenericValue {
  /// \internal
  Mat33_cd value;
};

/// returns the type of the value
inline Type GenericMat33_cdValue.getValueType() {
  return Mat33_cd;
}

/// returns true if this value contains an array
inline Boolean GenericMat33_cdValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat33_cdValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat33_cdValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33_cdValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat33_cd GenericMat33_cdValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat33_cdValue.set!(Mat33_cd value) {
  this.value = value;
}

alias Mat33_cd Mat33_cdArray[];

/// The GenericMat33_cdArrayValue is a typed implementation of the GenericArrayValue using a Mat33_cd array element.
object GenericMat33_cdArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat33_cdArray value;
};

/// value constructor
inline GenericMat33_cdArrayValue(Mat33_cdArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat33_cdArrayValue.getValueType() {
  return Mat33_cdArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat33_cdArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat33_cdArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33_cdArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat33_cdArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat33_cdArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat33_cdArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat33_cdArray GenericMat33_cdArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat33_cdArrayValue.setShared!(Mat33_cdArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat33_cdArrayValue.setCopy!(Mat33_cdArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat33_cd GenericMat33_cdArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat33_cdArrayValue.set!(Index index, Mat33_cd value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat33_cdArrayValue.push!(Mat33_cd value) {
  this.value.push(value);
}

// value constructor
inline GenericMat33_cdValue(Mat33_cd value) {
  this.value = value;
}

/// The GenericMat33_dValue is a typed implementation of the GenericValue using a Mat33_d.
object GenericMat33_dValue : GenericValue {
  /// \internal
  Mat33_d value;
};

/// returns the type of the value
inline Type GenericMat33_dValue.getValueType() {
  return Mat33_d;
}

/// returns true if this value contains an array
inline Boolean GenericMat33_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat33_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat33_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat33_d GenericMat33_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat33_dValue.set!(Mat33_d value) {
  this.value = value;
}

alias Mat33_d Mat33_dArray[];

/// The GenericMat33_dArrayValue is a typed implementation of the GenericArrayValue using a Mat33_d array element.
object GenericMat33_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat33_dArray value;
};

/// value constructor
inline GenericMat33_dArrayValue(Mat33_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat33_dArrayValue.getValueType() {
  return Mat33_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat33_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat33_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat33_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat33_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat33_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat33_dArray GenericMat33_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat33_dArrayValue.setShared!(Mat33_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat33_dArrayValue.setCopy!(Mat33_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat33_d GenericMat33_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat33_dArrayValue.set!(Index index, Mat33_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat33_dArrayValue.push!(Mat33_d value) {
  this.value.push(value);
}

// value constructor
inline GenericMat33_dValue(Mat33_d value) {
  this.value = value;
}

/// The GenericMat33_iValue is a typed implementation of the GenericValue using a Mat33_i.
object GenericMat33_iValue : GenericValue {
  /// \internal
  Mat33_i value;
};

/// returns the type of the value
inline Type GenericMat33_iValue.getValueType() {
  return Mat33_i;
}

/// returns true if this value contains an array
inline Boolean GenericMat33_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat33_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat33_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat33_i GenericMat33_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat33_iValue.set!(Mat33_i value) {
  this.value = value;
}

alias Mat33_i Mat33_iArray[];

/// The GenericMat33_iArrayValue is a typed implementation of the GenericArrayValue using a Mat33_i array element.
object GenericMat33_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat33_iArray value;
};

/// value constructor
inline GenericMat33_iArrayValue(Mat33_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat33_iArrayValue.getValueType() {
  return Mat33_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat33_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat33_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat33_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat33_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat33_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat33_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat33_iArray GenericMat33_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat33_iArrayValue.setShared!(Mat33_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat33_iArrayValue.setCopy!(Mat33_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat33_i GenericMat33_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat33_iArrayValue.set!(Index index, Mat33_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat33_iArrayValue.push!(Mat33_i value) {
  this.value.push(value);
}

// value constructor
inline GenericMat33_iValue(Mat33_i value) {
  this.value = value;
}

/// The GenericMat44Value is a typed implementation of the GenericValue using a Mat44.
object GenericMat44Value : GenericValue {
  /// \internal
  Mat44 value;
};

/// returns the type of the value
inline Type GenericMat44Value.getValueType() {
  return Mat44;
}

/// returns true if this value contains an array
inline Boolean GenericMat44Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat44Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat44Value.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat44 GenericMat44Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat44Value.set!(Mat44 value) {
  this.value = value;
}

alias Mat44 Mat44Array[];

/// The GenericMat44ArrayValue is a typed implementation of the GenericArrayValue using a Mat44 array element.
object GenericMat44ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat44Array value;
};

/// value constructor
inline GenericMat44ArrayValue(Mat44Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat44ArrayValue.getValueType() {
  return Mat44Array;
}

/// returns true if this value contains an array
inline Boolean GenericMat44ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat44ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat44ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat44ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat44ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat44Array GenericMat44ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat44ArrayValue.setShared!(Mat44Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat44ArrayValue.setCopy!(Mat44Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat44 GenericMat44ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat44ArrayValue.set!(Index index, Mat44 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat44ArrayValue.push!(Mat44 value) {
  this.value.push(value);
}

// value constructor
inline GenericMat44Value(Mat44 value) {
  this.value = value;
}

/// The GenericMat44_cValue is a typed implementation of the GenericValue using a Mat44_c.
object GenericMat44_cValue : GenericValue {
  /// \internal
  Mat44_c value;
};

/// returns the type of the value
inline Type GenericMat44_cValue.getValueType() {
  return Mat44_c;
}

/// returns true if this value contains an array
inline Boolean GenericMat44_cValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat44_cValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat44_cValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44_cValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat44_c GenericMat44_cValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat44_cValue.set!(Mat44_c value) {
  this.value = value;
}

alias Mat44_c Mat44_cArray[];

/// The GenericMat44_cArrayValue is a typed implementation of the GenericArrayValue using a Mat44_c array element.
object GenericMat44_cArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat44_cArray value;
};

/// value constructor
inline GenericMat44_cArrayValue(Mat44_cArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat44_cArrayValue.getValueType() {
  return Mat44_cArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat44_cArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat44_cArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44_cArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat44_cArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat44_cArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat44_cArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat44_cArray GenericMat44_cArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat44_cArrayValue.setShared!(Mat44_cArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat44_cArrayValue.setCopy!(Mat44_cArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat44_c GenericMat44_cArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat44_cArrayValue.set!(Index index, Mat44_c value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat44_cArrayValue.push!(Mat44_c value) {
  this.value.push(value);
}

// value constructor
inline GenericMat44_cValue(Mat44_c value) {
  this.value = value;
}

/// The GenericMat44_cdValue is a typed implementation of the GenericValue using a Mat44_cd.
object GenericMat44_cdValue : GenericValue {
  /// \internal
  Mat44_cd value;
};

/// returns the type of the value
inline Type GenericMat44_cdValue.getValueType() {
  return Mat44_cd;
}

/// returns true if this value contains an array
inline Boolean GenericMat44_cdValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat44_cdValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat44_cdValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44_cdValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat44_cd GenericMat44_cdValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat44_cdValue.set!(Mat44_cd value) {
  this.value = value;
}

alias Mat44_cd Mat44_cdArray[];

/// The GenericMat44_cdArrayValue is a typed implementation of the GenericArrayValue using a Mat44_cd array element.
object GenericMat44_cdArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat44_cdArray value;
};

/// value constructor
inline GenericMat44_cdArrayValue(Mat44_cdArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat44_cdArrayValue.getValueType() {
  return Mat44_cdArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat44_cdArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat44_cdArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44_cdArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat44_cdArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat44_cdArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat44_cdArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat44_cdArray GenericMat44_cdArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat44_cdArrayValue.setShared!(Mat44_cdArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat44_cdArrayValue.setCopy!(Mat44_cdArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat44_cd GenericMat44_cdArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat44_cdArrayValue.set!(Index index, Mat44_cd value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat44_cdArrayValue.push!(Mat44_cd value) {
  this.value.push(value);
}

// value constructor
inline GenericMat44_cdValue(Mat44_cd value) {
  this.value = value;
}

/// The GenericMat44_dValue is a typed implementation of the GenericValue using a Mat44_d.
object GenericMat44_dValue : GenericValue {
  /// \internal
  Mat44_d value;
};

/// returns the type of the value
inline Type GenericMat44_dValue.getValueType() {
  return Mat44_d;
}

/// returns true if this value contains an array
inline Boolean GenericMat44_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat44_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat44_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat44_d GenericMat44_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat44_dValue.set!(Mat44_d value) {
  this.value = value;
}

alias Mat44_d Mat44_dArray[];

/// The GenericMat44_dArrayValue is a typed implementation of the GenericArrayValue using a Mat44_d array element.
object GenericMat44_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat44_dArray value;
};

/// value constructor
inline GenericMat44_dArrayValue(Mat44_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat44_dArrayValue.getValueType() {
  return Mat44_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat44_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat44_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat44_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat44_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat44_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat44_dArray GenericMat44_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat44_dArrayValue.setShared!(Mat44_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat44_dArrayValue.setCopy!(Mat44_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat44_d GenericMat44_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat44_dArrayValue.set!(Index index, Mat44_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat44_dArrayValue.push!(Mat44_d value) {
  this.value.push(value);
}

// value constructor
inline GenericMat44_dValue(Mat44_d value) {
  this.value = value;
}

/// The GenericMat44_iValue is a typed implementation of the GenericValue using a Mat44_i.
object GenericMat44_iValue : GenericValue {
  /// \internal
  Mat44_i value;
};

/// returns the type of the value
inline Type GenericMat44_iValue.getValueType() {
  return Mat44_i;
}

/// returns true if this value contains an array
inline Boolean GenericMat44_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat44_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat44_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat44_i GenericMat44_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat44_iValue.set!(Mat44_i value) {
  this.value = value;
}

alias Mat44_i Mat44_iArray[];

/// The GenericMat44_iArrayValue is a typed implementation of the GenericArrayValue using a Mat44_i array element.
object GenericMat44_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat44_iArray value;
};

/// value constructor
inline GenericMat44_iArrayValue(Mat44_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat44_iArrayValue.getValueType() {
  return Mat44_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat44_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat44_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat44_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat44_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat44_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat44_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat44_iArray GenericMat44_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat44_iArrayValue.setShared!(Mat44_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat44_iArrayValue.setCopy!(Mat44_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat44_i GenericMat44_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat44_iArrayValue.set!(Index index, Mat44_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat44_iArrayValue.push!(Mat44_i value) {
  this.value.push(value);
}

// value constructor
inline GenericMat44_iValue(Mat44_i value) {
  this.value = value;
}

/// The GenericMat_cValue is a typed implementation of the GenericValue using a Mat_c.
object GenericMat_cValue : GenericValue {
  /// \internal
  Mat_c value;
};

/// returns the type of the value
inline Type GenericMat_cValue.getValueType() {
  return Mat_c;
}

/// returns true if this value contains an array
inline Boolean GenericMat_cValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat_cValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat_cValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat_cValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat_c GenericMat_cValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat_cValue.set!(Mat_c value) {
  this.value = value;
}

alias Mat_c Mat_cArray[];

/// The GenericMat_cArrayValue is a typed implementation of the GenericArrayValue using a Mat_c array element.
object GenericMat_cArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat_cArray value;
};

/// value constructor
inline GenericMat_cArrayValue(Mat_cArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat_cArrayValue.getValueType() {
  return Mat_cArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat_cArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat_cArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat_cArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat_cArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat_cArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat_cArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat_cArray GenericMat_cArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat_cArrayValue.setShared!(Mat_cArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat_cArrayValue.setCopy!(Mat_cArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat_c GenericMat_cArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat_cArrayValue.set!(Index index, Mat_c value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat_cArrayValue.push!(Mat_c value) {
  this.value.push(value);
}

// value constructor
inline GenericMat_cValue(Mat_c value) {
  this.value = value;
}

/// The GenericMat_cdValue is a typed implementation of the GenericValue using a Mat_cd.
object GenericMat_cdValue : GenericValue {
  /// \internal
  Mat_cd value;
};

/// returns the type of the value
inline Type GenericMat_cdValue.getValueType() {
  return Mat_cd;
}

/// returns true if this value contains an array
inline Boolean GenericMat_cdValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat_cdValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat_cdValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat_cdValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat_cd GenericMat_cdValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat_cdValue.set!(Mat_cd value) {
  this.value = value;
}

alias Mat_cd Mat_cdArray[];

/// The GenericMat_cdArrayValue is a typed implementation of the GenericArrayValue using a Mat_cd array element.
object GenericMat_cdArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat_cdArray value;
};

/// value constructor
inline GenericMat_cdArrayValue(Mat_cdArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat_cdArrayValue.getValueType() {
  return Mat_cdArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat_cdArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat_cdArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat_cdArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat_cdArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat_cdArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat_cdArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat_cdArray GenericMat_cdArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat_cdArrayValue.setShared!(Mat_cdArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat_cdArrayValue.setCopy!(Mat_cdArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat_cd GenericMat_cdArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat_cdArrayValue.set!(Index index, Mat_cd value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat_cdArrayValue.push!(Mat_cd value) {
  this.value.push(value);
}

// value constructor
inline GenericMat_cdValue(Mat_cd value) {
  this.value = value;
}

/// The GenericMat_dValue is a typed implementation of the GenericValue using a Mat_d.
object GenericMat_dValue : GenericValue {
  /// \internal
  Mat_d value;
};

/// returns the type of the value
inline Type GenericMat_dValue.getValueType() {
  return Mat_d;
}

/// returns true if this value contains an array
inline Boolean GenericMat_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat_d GenericMat_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat_dValue.set!(Mat_d value) {
  this.value = value;
}

alias Mat_d Mat_dArray[];

/// The GenericMat_dArrayValue is a typed implementation of the GenericArrayValue using a Mat_d array element.
object GenericMat_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat_dArray value;
};

/// value constructor
inline GenericMat_dArrayValue(Mat_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat_dArrayValue.getValueType() {
  return Mat_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat_dArray GenericMat_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat_dArrayValue.setShared!(Mat_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat_dArrayValue.setCopy!(Mat_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat_d GenericMat_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat_dArrayValue.set!(Index index, Mat_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat_dArrayValue.push!(Mat_d value) {
  this.value.push(value);
}

// value constructor
inline GenericMat_dValue(Mat_d value) {
  this.value = value;
}

/// The GenericMat_iValue is a typed implementation of the GenericValue using a Mat_i.
object GenericMat_iValue : GenericValue {
  /// \internal
  Mat_i value;
};

/// returns the type of the value
inline Type GenericMat_iValue.getValueType() {
  return Mat_i;
}

/// returns true if this value contains an array
inline Boolean GenericMat_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericMat_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericMat_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Mat_i GenericMat_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericMat_iValue.set!(Mat_i value) {
  this.value = value;
}

alias Mat_i Mat_iArray[];

/// The GenericMat_iArrayValue is a typed implementation of the GenericArrayValue using a Mat_i array element.
object GenericMat_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Mat_iArray value;
};

/// value constructor
inline GenericMat_iArrayValue(Mat_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericMat_iArrayValue.getValueType() {
  return Mat_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericMat_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericMat_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericMat_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericMat_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericMat_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericMat_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Mat_iArray GenericMat_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericMat_iArrayValue.setShared!(Mat_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericMat_iArrayValue.setCopy!(Mat_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Mat_i GenericMat_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericMat_iArrayValue.set!(Index index, Mat_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericMat_iArrayValue.push!(Mat_i value) {
  this.value.push(value);
}

// value constructor
inline GenericMat_iValue(Mat_i value) {
  this.value = value;
}

/// The GenericQuatValue is a typed implementation of the GenericValue using a Quat.
object GenericQuatValue : GenericValue {
  /// \internal
  Quat value;
};

/// returns the type of the value
inline Type GenericQuatValue.getValueType() {
  return Quat;
}

/// returns true if this value contains an array
inline Boolean GenericQuatValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericQuatValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericQuatValue.equals(Ref<GenericValue> other)
{
  Ref<GenericQuatValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Quat GenericQuatValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericQuatValue.set!(Quat value) {
  this.value = value;
}

alias Quat QuatArray[];

/// The GenericQuatArrayValue is a typed implementation of the GenericArrayValue using a Quat array element.
object GenericQuatArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  QuatArray value;
};

/// value constructor
inline GenericQuatArrayValue(QuatArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericQuatArrayValue.getValueType() {
  return QuatArray;
}

/// returns true if this value contains an array
inline Boolean GenericQuatArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericQuatArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericQuatArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericQuatArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericQuatArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericQuatArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline QuatArray GenericQuatArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericQuatArrayValue.setShared!(QuatArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericQuatArrayValue.setCopy!(QuatArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Quat GenericQuatArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericQuatArrayValue.set!(Index index, Quat value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericQuatArrayValue.push!(Quat value) {
  this.value.push(value);
}

// value constructor
inline GenericQuatValue(Quat value) {
  this.value = value;
}

/// The GenericQuat_dValue is a typed implementation of the GenericValue using a Quat_d.
object GenericQuat_dValue : GenericValue {
  /// \internal
  Quat_d value;
};

/// returns the type of the value
inline Type GenericQuat_dValue.getValueType() {
  return Quat_d;
}

/// returns true if this value contains an array
inline Boolean GenericQuat_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericQuat_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericQuat_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericQuat_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Quat_d GenericQuat_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericQuat_dValue.set!(Quat_d value) {
  this.value = value;
}

alias Quat_d Quat_dArray[];

/// The GenericQuat_dArrayValue is a typed implementation of the GenericArrayValue using a Quat_d array element.
object GenericQuat_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Quat_dArray value;
};

/// value constructor
inline GenericQuat_dArrayValue(Quat_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericQuat_dArrayValue.getValueType() {
  return Quat_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericQuat_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericQuat_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericQuat_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericQuat_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericQuat_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericQuat_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Quat_dArray GenericQuat_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericQuat_dArrayValue.setShared!(Quat_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericQuat_dArrayValue.setCopy!(Quat_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Quat_d GenericQuat_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericQuat_dArrayValue.set!(Index index, Quat_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericQuat_dArrayValue.push!(Quat_d value) {
  this.value.push(value);
}

// value constructor
inline GenericQuat_dValue(Quat_d value) {
  this.value = value;
}

/// The GenericQuat_iValue is a typed implementation of the GenericValue using a Quat_i.
object GenericQuat_iValue : GenericValue {
  /// \internal
  Quat_i value;
};

/// returns the type of the value
inline Type GenericQuat_iValue.getValueType() {
  return Quat_i;
}

/// returns true if this value contains an array
inline Boolean GenericQuat_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericQuat_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericQuat_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericQuat_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Quat_i GenericQuat_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericQuat_iValue.set!(Quat_i value) {
  this.value = value;
}

alias Quat_i Quat_iArray[];

/// The GenericQuat_iArrayValue is a typed implementation of the GenericArrayValue using a Quat_i array element.
object GenericQuat_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Quat_iArray value;
};

/// value constructor
inline GenericQuat_iArrayValue(Quat_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericQuat_iArrayValue.getValueType() {
  return Quat_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericQuat_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericQuat_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericQuat_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericQuat_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericQuat_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericQuat_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Quat_iArray GenericQuat_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericQuat_iArrayValue.setShared!(Quat_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericQuat_iArrayValue.setCopy!(Quat_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Quat_i GenericQuat_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericQuat_iArrayValue.set!(Index index, Quat_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericQuat_iArrayValue.push!(Quat_i value) {
  this.value.push(value);
}

// value constructor
inline GenericQuat_iValue(Quat_i value) {
  this.value = value;
}

/// The GenericRGBValue is a typed implementation of the GenericValue using a RGB.
object GenericRGBValue : GenericValue {
  /// \internal
  RGB value;
};

/// returns the type of the value
inline Type GenericRGBValue.getValueType() {
  return RGB;
}

/// returns true if this value contains an array
inline Boolean GenericRGBValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericRGBValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericRGBValue.equals(Ref<GenericValue> other)
{
  Ref<GenericRGBValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline RGB GenericRGBValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericRGBValue.set!(RGB value) {
  this.value = value;
}

alias RGB RGBArray[];

/// The GenericRGBArrayValue is a typed implementation of the GenericArrayValue using a RGB array element.
object GenericRGBArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  RGBArray value;
};

/// value constructor
inline GenericRGBArrayValue(RGBArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericRGBArrayValue.getValueType() {
  return RGBArray;
}

/// returns true if this value contains an array
inline Boolean GenericRGBArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericRGBArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericRGBArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericRGBArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericRGBArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericRGBArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline RGBArray GenericRGBArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericRGBArrayValue.setShared!(RGBArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericRGBArrayValue.setCopy!(RGBArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline RGB GenericRGBArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericRGBArrayValue.set!(Index index, RGB value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericRGBArrayValue.push!(RGB value) {
  this.value.push(value);
}

// value constructor
inline GenericRGBValue(RGB value) {
  this.value = value;
}

/// The GenericRGBAValue is a typed implementation of the GenericValue using a RGBA.
object GenericRGBAValue : GenericValue {
  /// \internal
  RGBA value;
};

/// returns the type of the value
inline Type GenericRGBAValue.getValueType() {
  return RGBA;
}

/// returns true if this value contains an array
inline Boolean GenericRGBAValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericRGBAValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericRGBAValue.equals(Ref<GenericValue> other)
{
  Ref<GenericRGBAValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline RGBA GenericRGBAValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericRGBAValue.set!(RGBA value) {
  this.value = value;
}

alias RGBA RGBAArray[];

/// The GenericRGBAArrayValue is a typed implementation of the GenericArrayValue using a RGBA array element.
object GenericRGBAArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  RGBAArray value;
};

/// value constructor
inline GenericRGBAArrayValue(RGBAArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericRGBAArrayValue.getValueType() {
  return RGBAArray;
}

/// returns true if this value contains an array
inline Boolean GenericRGBAArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericRGBAArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericRGBAArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericRGBAArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericRGBAArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericRGBAArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline RGBAArray GenericRGBAArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericRGBAArrayValue.setShared!(RGBAArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericRGBAArrayValue.setCopy!(RGBAArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline RGBA GenericRGBAArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericRGBAArrayValue.set!(Index index, RGBA value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericRGBAArrayValue.push!(RGBA value) {
  this.value.push(value);
}

// value constructor
inline GenericRGBAValue(RGBA value) {
  this.value = value;
}

/// The GenericRayValue is a typed implementation of the GenericValue using a Ray.
object GenericRayValue : GenericValue {
  /// \internal
  Ray value;
};

/// returns the type of the value
inline Type GenericRayValue.getValueType() {
  return Ray;
}

/// returns true if this value contains an array
inline Boolean GenericRayValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericRayValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericRayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericRayValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Ray GenericRayValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericRayValue.set!(Ray value) {
  this.value = value;
}

alias Ray RayArray[];

/// The GenericRayArrayValue is a typed implementation of the GenericArrayValue using a Ray array element.
object GenericRayArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  RayArray value;
};

/// value constructor
inline GenericRayArrayValue(RayArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericRayArrayValue.getValueType() {
  return RayArray;
}

/// returns true if this value contains an array
inline Boolean GenericRayArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericRayArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericRayArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericRayArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericRayArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericRayArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline RayArray GenericRayArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericRayArrayValue.setShared!(RayArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericRayArrayValue.setCopy!(RayArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Ray GenericRayArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericRayArrayValue.set!(Index index, Ray value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericRayArrayValue.push!(Ray value) {
  this.value.push(value);
}

// value constructor
inline GenericRayValue(Ray value) {
  this.value = value;
}

/// The GenericRotationOrderValue is a typed implementation of the GenericValue using a RotationOrder.
object GenericRotationOrderValue : GenericValue {
  /// \internal
  RotationOrder value;
};

/// returns the type of the value
inline Type GenericRotationOrderValue.getValueType() {
  return RotationOrder;
}

/// returns true if this value contains an array
inline Boolean GenericRotationOrderValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericRotationOrderValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericRotationOrderValue.equals(Ref<GenericValue> other)
{
  Ref<GenericRotationOrderValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline RotationOrder GenericRotationOrderValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericRotationOrderValue.set!(RotationOrder value) {
  this.value = value;
}

alias RotationOrder RotationOrderArray[];

/// The GenericRotationOrderArrayValue is a typed implementation of the GenericArrayValue using a RotationOrder array element.
object GenericRotationOrderArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  RotationOrderArray value;
};

/// value constructor
inline GenericRotationOrderArrayValue(RotationOrderArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericRotationOrderArrayValue.getValueType() {
  return RotationOrderArray;
}

/// returns true if this value contains an array
inline Boolean GenericRotationOrderArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericRotationOrderArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericRotationOrderArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericRotationOrderArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericRotationOrderArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericRotationOrderArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline RotationOrderArray GenericRotationOrderArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericRotationOrderArrayValue.setShared!(RotationOrderArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericRotationOrderArrayValue.setCopy!(RotationOrderArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline RotationOrder GenericRotationOrderArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericRotationOrderArrayValue.set!(Index index, RotationOrder value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericRotationOrderArrayValue.push!(RotationOrder value) {
  this.value.push(value);
}

// value constructor
inline GenericRotationOrderValue(RotationOrder value) {
  this.value = value;
}

/// The GenericVecValue is a typed implementation of the GenericValue using a Vec.
object GenericVecValue : GenericValue {
  /// \internal
  Vec value;
};

/// returns the type of the value
inline Type GenericVecValue.getValueType() {
  return Vec;
}

/// returns true if this value contains an array
inline Boolean GenericVecValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVecValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVecValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVecValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec GenericVecValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVecValue.set!(Vec value) {
  this.value = value;
}

alias Vec VecArray[];

/// The GenericVecArrayValue is a typed implementation of the GenericArrayValue using a Vec array element.
object GenericVecArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  VecArray value;
};

/// value constructor
inline GenericVecArrayValue(VecArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVecArrayValue.getValueType() {
  return VecArray;
}

/// returns true if this value contains an array
inline Boolean GenericVecArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVecArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVecArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVecArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVecArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVecArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline VecArray GenericVecArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVecArrayValue.setShared!(VecArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVecArrayValue.setCopy!(VecArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec GenericVecArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVecArrayValue.set!(Index index, Vec value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVecArrayValue.push!(Vec value) {
  this.value.push(value);
}

// value constructor
inline GenericVecValue(Vec value) {
  this.value = value;
}

/// The GenericVec2Value is a typed implementation of the GenericValue using a Vec2.
object GenericVec2Value : GenericValue {
  /// \internal
  Vec2 value;
};

/// returns the type of the value
inline Type GenericVec2Value.getValueType() {
  return Vec2;
}

/// returns true if this value contains an array
inline Boolean GenericVec2Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec2Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec2Value.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec2 GenericVec2Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec2Value.set!(Vec2 value) {
  this.value = value;
}

alias Vec2 Vec2Array[];

/// The GenericVec2ArrayValue is a typed implementation of the GenericArrayValue using a Vec2 array element.
object GenericVec2ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec2Array value;
};

/// value constructor
inline GenericVec2ArrayValue(Vec2Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec2ArrayValue.getValueType() {
  return Vec2Array;
}

/// returns true if this value contains an array
inline Boolean GenericVec2ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec2ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec2ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec2ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec2ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec2Array GenericVec2ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec2ArrayValue.setShared!(Vec2Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec2ArrayValue.setCopy!(Vec2Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec2 GenericVec2ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec2ArrayValue.set!(Index index, Vec2 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec2ArrayValue.push!(Vec2 value) {
  this.value.push(value);
}

// value constructor
inline GenericVec2Value(Vec2 value) {
  this.value = value;
}

/// The GenericVec2_cValue is a typed implementation of the GenericValue using a Vec2_c.
object GenericVec2_cValue : GenericValue {
  /// \internal
  Vec2_c value;
};

/// returns the type of the value
inline Type GenericVec2_cValue.getValueType() {
  return Vec2_c;
}

/// returns true if this value contains an array
inline Boolean GenericVec2_cValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec2_cValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec2_cValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2_cValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec2_c GenericVec2_cValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec2_cValue.set!(Vec2_c value) {
  this.value = value;
}

alias Vec2_c Vec2_cArray[];

/// The GenericVec2_cArrayValue is a typed implementation of the GenericArrayValue using a Vec2_c array element.
object GenericVec2_cArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec2_cArray value;
};

/// value constructor
inline GenericVec2_cArrayValue(Vec2_cArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec2_cArrayValue.getValueType() {
  return Vec2_cArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec2_cArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec2_cArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2_cArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec2_cArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec2_cArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec2_cArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec2_cArray GenericVec2_cArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec2_cArrayValue.setShared!(Vec2_cArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec2_cArrayValue.setCopy!(Vec2_cArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec2_c GenericVec2_cArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec2_cArrayValue.set!(Index index, Vec2_c value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec2_cArrayValue.push!(Vec2_c value) {
  this.value.push(value);
}

// value constructor
inline GenericVec2_cValue(Vec2_c value) {
  this.value = value;
}

/// The GenericVec2_cdValue is a typed implementation of the GenericValue using a Vec2_cd.
object GenericVec2_cdValue : GenericValue {
  /// \internal
  Vec2_cd value;
};

/// returns the type of the value
inline Type GenericVec2_cdValue.getValueType() {
  return Vec2_cd;
}

/// returns true if this value contains an array
inline Boolean GenericVec2_cdValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec2_cdValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec2_cdValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2_cdValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec2_cd GenericVec2_cdValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec2_cdValue.set!(Vec2_cd value) {
  this.value = value;
}

alias Vec2_cd Vec2_cdArray[];

/// The GenericVec2_cdArrayValue is a typed implementation of the GenericArrayValue using a Vec2_cd array element.
object GenericVec2_cdArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec2_cdArray value;
};

/// value constructor
inline GenericVec2_cdArrayValue(Vec2_cdArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec2_cdArrayValue.getValueType() {
  return Vec2_cdArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec2_cdArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec2_cdArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2_cdArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec2_cdArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec2_cdArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec2_cdArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec2_cdArray GenericVec2_cdArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec2_cdArrayValue.setShared!(Vec2_cdArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec2_cdArrayValue.setCopy!(Vec2_cdArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec2_cd GenericVec2_cdArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec2_cdArrayValue.set!(Index index, Vec2_cd value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec2_cdArrayValue.push!(Vec2_cd value) {
  this.value.push(value);
}

// value constructor
inline GenericVec2_cdValue(Vec2_cd value) {
  this.value = value;
}

/// The GenericVec2_dValue is a typed implementation of the GenericValue using a Vec2_d.
object GenericVec2_dValue : GenericValue {
  /// \internal
  Vec2_d value;
};

/// returns the type of the value
inline Type GenericVec2_dValue.getValueType() {
  return Vec2_d;
}

/// returns true if this value contains an array
inline Boolean GenericVec2_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec2_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec2_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec2_d GenericVec2_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec2_dValue.set!(Vec2_d value) {
  this.value = value;
}

alias Vec2_d Vec2_dArray[];

/// The GenericVec2_dArrayValue is a typed implementation of the GenericArrayValue using a Vec2_d array element.
object GenericVec2_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec2_dArray value;
};

/// value constructor
inline GenericVec2_dArrayValue(Vec2_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec2_dArrayValue.getValueType() {
  return Vec2_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec2_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec2_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec2_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec2_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec2_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec2_dArray GenericVec2_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec2_dArrayValue.setShared!(Vec2_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec2_dArrayValue.setCopy!(Vec2_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec2_d GenericVec2_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec2_dArrayValue.set!(Index index, Vec2_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec2_dArrayValue.push!(Vec2_d value) {
  this.value.push(value);
}

// value constructor
inline GenericVec2_dValue(Vec2_d value) {
  this.value = value;
}

/// The GenericVec2_iValue is a typed implementation of the GenericValue using a Vec2_i.
object GenericVec2_iValue : GenericValue {
  /// \internal
  Vec2_i value;
};

/// returns the type of the value
inline Type GenericVec2_iValue.getValueType() {
  return Vec2_i;
}

/// returns true if this value contains an array
inline Boolean GenericVec2_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec2_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec2_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec2_i GenericVec2_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec2_iValue.set!(Vec2_i value) {
  this.value = value;
}

alias Vec2_i Vec2_iArray[];

/// The GenericVec2_iArrayValue is a typed implementation of the GenericArrayValue using a Vec2_i array element.
object GenericVec2_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec2_iArray value;
};

/// value constructor
inline GenericVec2_iArrayValue(Vec2_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec2_iArrayValue.getValueType() {
  return Vec2_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec2_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec2_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec2_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec2_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec2_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec2_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec2_iArray GenericVec2_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec2_iArrayValue.setShared!(Vec2_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec2_iArrayValue.setCopy!(Vec2_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec2_i GenericVec2_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec2_iArrayValue.set!(Index index, Vec2_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec2_iArrayValue.push!(Vec2_i value) {
  this.value.push(value);
}

// value constructor
inline GenericVec2_iValue(Vec2_i value) {
  this.value = value;
}

/// The GenericVec3Value is a typed implementation of the GenericValue using a Vec3.
object GenericVec3Value : GenericValue {
  /// \internal
  Vec3 value;
};

/// returns the type of the value
inline Type GenericVec3Value.getValueType() {
  return Vec3;
}

/// returns true if this value contains an array
inline Boolean GenericVec3Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec3Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec3Value.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec3 GenericVec3Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec3Value.set!(Vec3 value) {
  this.value = value;
}

alias Vec3 Vec3Array[];

/// The GenericVec3ArrayValue is a typed implementation of the GenericArrayValue using a Vec3 array element.
object GenericVec3ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec3Array value;
};

/// value constructor
inline GenericVec3ArrayValue(Vec3Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec3ArrayValue.getValueType() {
  return Vec3Array;
}

/// returns true if this value contains an array
inline Boolean GenericVec3ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec3ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec3ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec3ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec3ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec3Array GenericVec3ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec3ArrayValue.setShared!(Vec3Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec3ArrayValue.setCopy!(Vec3Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec3 GenericVec3ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec3ArrayValue.set!(Index index, Vec3 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec3ArrayValue.push!(Vec3 value) {
  this.value.push(value);
}

// value constructor
inline GenericVec3Value(Vec3 value) {
  this.value = value;
}

/// The GenericVec3_cValue is a typed implementation of the GenericValue using a Vec3_c.
object GenericVec3_cValue : GenericValue {
  /// \internal
  Vec3_c value;
};

/// returns the type of the value
inline Type GenericVec3_cValue.getValueType() {
  return Vec3_c;
}

/// returns true if this value contains an array
inline Boolean GenericVec3_cValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec3_cValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec3_cValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3_cValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec3_c GenericVec3_cValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec3_cValue.set!(Vec3_c value) {
  this.value = value;
}

alias Vec3_c Vec3_cArray[];

/// The GenericVec3_cArrayValue is a typed implementation of the GenericArrayValue using a Vec3_c array element.
object GenericVec3_cArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec3_cArray value;
};

/// value constructor
inline GenericVec3_cArrayValue(Vec3_cArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec3_cArrayValue.getValueType() {
  return Vec3_cArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec3_cArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec3_cArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3_cArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec3_cArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec3_cArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec3_cArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec3_cArray GenericVec3_cArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec3_cArrayValue.setShared!(Vec3_cArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec3_cArrayValue.setCopy!(Vec3_cArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec3_c GenericVec3_cArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec3_cArrayValue.set!(Index index, Vec3_c value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec3_cArrayValue.push!(Vec3_c value) {
  this.value.push(value);
}

// value constructor
inline GenericVec3_cValue(Vec3_c value) {
  this.value = value;
}

/// The GenericVec3_cdValue is a typed implementation of the GenericValue using a Vec3_cd.
object GenericVec3_cdValue : GenericValue {
  /// \internal
  Vec3_cd value;
};

/// returns the type of the value
inline Type GenericVec3_cdValue.getValueType() {
  return Vec3_cd;
}

/// returns true if this value contains an array
inline Boolean GenericVec3_cdValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec3_cdValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec3_cdValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3_cdValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec3_cd GenericVec3_cdValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec3_cdValue.set!(Vec3_cd value) {
  this.value = value;
}

alias Vec3_cd Vec3_cdArray[];

/// The GenericVec3_cdArrayValue is a typed implementation of the GenericArrayValue using a Vec3_cd array element.
object GenericVec3_cdArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec3_cdArray value;
};

/// value constructor
inline GenericVec3_cdArrayValue(Vec3_cdArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec3_cdArrayValue.getValueType() {
  return Vec3_cdArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec3_cdArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec3_cdArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3_cdArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec3_cdArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec3_cdArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec3_cdArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec3_cdArray GenericVec3_cdArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec3_cdArrayValue.setShared!(Vec3_cdArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec3_cdArrayValue.setCopy!(Vec3_cdArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec3_cd GenericVec3_cdArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec3_cdArrayValue.set!(Index index, Vec3_cd value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec3_cdArrayValue.push!(Vec3_cd value) {
  this.value.push(value);
}

// value constructor
inline GenericVec3_cdValue(Vec3_cd value) {
  this.value = value;
}

/// The GenericVec3_dValue is a typed implementation of the GenericValue using a Vec3_d.
object GenericVec3_dValue : GenericValue {
  /// \internal
  Vec3_d value;
};

/// returns the type of the value
inline Type GenericVec3_dValue.getValueType() {
  return Vec3_d;
}

/// returns true if this value contains an array
inline Boolean GenericVec3_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec3_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec3_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec3_d GenericVec3_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec3_dValue.set!(Vec3_d value) {
  this.value = value;
}

alias Vec3_d Vec3_dArray[];

/// The GenericVec3_dArrayValue is a typed implementation of the GenericArrayValue using a Vec3_d array element.
object GenericVec3_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec3_dArray value;
};

/// value constructor
inline GenericVec3_dArrayValue(Vec3_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec3_dArrayValue.getValueType() {
  return Vec3_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec3_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec3_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec3_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec3_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec3_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec3_dArray GenericVec3_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec3_dArrayValue.setShared!(Vec3_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec3_dArrayValue.setCopy!(Vec3_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec3_d GenericVec3_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec3_dArrayValue.set!(Index index, Vec3_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec3_dArrayValue.push!(Vec3_d value) {
  this.value.push(value);
}

// value constructor
inline GenericVec3_dValue(Vec3_d value) {
  this.value = value;
}

/// The GenericVec3_iValue is a typed implementation of the GenericValue using a Vec3_i.
object GenericVec3_iValue : GenericValue {
  /// \internal
  Vec3_i value;
};

/// returns the type of the value
inline Type GenericVec3_iValue.getValueType() {
  return Vec3_i;
}

/// returns true if this value contains an array
inline Boolean GenericVec3_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec3_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec3_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec3_i GenericVec3_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec3_iValue.set!(Vec3_i value) {
  this.value = value;
}

alias Vec3_i Vec3_iArray[];

/// The GenericVec3_iArrayValue is a typed implementation of the GenericArrayValue using a Vec3_i array element.
object GenericVec3_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec3_iArray value;
};

/// value constructor
inline GenericVec3_iArrayValue(Vec3_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec3_iArrayValue.getValueType() {
  return Vec3_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec3_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec3_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec3_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec3_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec3_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec3_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec3_iArray GenericVec3_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec3_iArrayValue.setShared!(Vec3_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec3_iArrayValue.setCopy!(Vec3_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec3_i GenericVec3_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec3_iArrayValue.set!(Index index, Vec3_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec3_iArrayValue.push!(Vec3_i value) {
  this.value.push(value);
}

// value constructor
inline GenericVec3_iValue(Vec3_i value) {
  this.value = value;
}

/// The GenericVec4Value is a typed implementation of the GenericValue using a Vec4.
object GenericVec4Value : GenericValue {
  /// \internal
  Vec4 value;
};

/// returns the type of the value
inline Type GenericVec4Value.getValueType() {
  return Vec4;
}

/// returns true if this value contains an array
inline Boolean GenericVec4Value.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec4Value.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec4Value.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4Value> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec4 GenericVec4Value.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec4Value.set!(Vec4 value) {
  this.value = value;
}

alias Vec4 Vec4Array[];

/// The GenericVec4ArrayValue is a typed implementation of the GenericArrayValue using a Vec4 array element.
object GenericVec4ArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec4Array value;
};

/// value constructor
inline GenericVec4ArrayValue(Vec4Array value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec4ArrayValue.getValueType() {
  return Vec4Array;
}

/// returns true if this value contains an array
inline Boolean GenericVec4ArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec4ArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4ArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec4ArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec4ArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec4ArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec4Array GenericVec4ArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec4ArrayValue.setShared!(Vec4Array value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec4ArrayValue.setCopy!(Vec4Array value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec4 GenericVec4ArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec4ArrayValue.set!(Index index, Vec4 value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec4ArrayValue.push!(Vec4 value) {
  this.value.push(value);
}

// value constructor
inline GenericVec4Value(Vec4 value) {
  this.value = value;
}

/// The GenericVec4_cValue is a typed implementation of the GenericValue using a Vec4_c.
object GenericVec4_cValue : GenericValue {
  /// \internal
  Vec4_c value;
};

/// returns the type of the value
inline Type GenericVec4_cValue.getValueType() {
  return Vec4_c;
}

/// returns true if this value contains an array
inline Boolean GenericVec4_cValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec4_cValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec4_cValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4_cValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec4_c GenericVec4_cValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec4_cValue.set!(Vec4_c value) {
  this.value = value;
}

alias Vec4_c Vec4_cArray[];

/// The GenericVec4_cArrayValue is a typed implementation of the GenericArrayValue using a Vec4_c array element.
object GenericVec4_cArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec4_cArray value;
};

/// value constructor
inline GenericVec4_cArrayValue(Vec4_cArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec4_cArrayValue.getValueType() {
  return Vec4_cArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec4_cArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec4_cArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4_cArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec4_cArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec4_cArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec4_cArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec4_cArray GenericVec4_cArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec4_cArrayValue.setShared!(Vec4_cArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec4_cArrayValue.setCopy!(Vec4_cArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec4_c GenericVec4_cArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec4_cArrayValue.set!(Index index, Vec4_c value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec4_cArrayValue.push!(Vec4_c value) {
  this.value.push(value);
}

// value constructor
inline GenericVec4_cValue(Vec4_c value) {
  this.value = value;
}

/// The GenericVec4_cdValue is a typed implementation of the GenericValue using a Vec4_cd.
object GenericVec4_cdValue : GenericValue {
  /// \internal
  Vec4_cd value;
};

/// returns the type of the value
inline Type GenericVec4_cdValue.getValueType() {
  return Vec4_cd;
}

/// returns true if this value contains an array
inline Boolean GenericVec4_cdValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec4_cdValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec4_cdValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4_cdValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec4_cd GenericVec4_cdValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec4_cdValue.set!(Vec4_cd value) {
  this.value = value;
}

alias Vec4_cd Vec4_cdArray[];

/// The GenericVec4_cdArrayValue is a typed implementation of the GenericArrayValue using a Vec4_cd array element.
object GenericVec4_cdArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec4_cdArray value;
};

/// value constructor
inline GenericVec4_cdArrayValue(Vec4_cdArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec4_cdArrayValue.getValueType() {
  return Vec4_cdArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec4_cdArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec4_cdArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4_cdArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec4_cdArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec4_cdArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec4_cdArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec4_cdArray GenericVec4_cdArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec4_cdArrayValue.setShared!(Vec4_cdArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec4_cdArrayValue.setCopy!(Vec4_cdArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec4_cd GenericVec4_cdArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec4_cdArrayValue.set!(Index index, Vec4_cd value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec4_cdArrayValue.push!(Vec4_cd value) {
  this.value.push(value);
}

// value constructor
inline GenericVec4_cdValue(Vec4_cd value) {
  this.value = value;
}

/// The GenericVec4_dValue is a typed implementation of the GenericValue using a Vec4_d.
object GenericVec4_dValue : GenericValue {
  /// \internal
  Vec4_d value;
};

/// returns the type of the value
inline Type GenericVec4_dValue.getValueType() {
  return Vec4_d;
}

/// returns true if this value contains an array
inline Boolean GenericVec4_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec4_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec4_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec4_d GenericVec4_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec4_dValue.set!(Vec4_d value) {
  this.value = value;
}

alias Vec4_d Vec4_dArray[];

/// The GenericVec4_dArrayValue is a typed implementation of the GenericArrayValue using a Vec4_d array element.
object GenericVec4_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec4_dArray value;
};

/// value constructor
inline GenericVec4_dArrayValue(Vec4_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec4_dArrayValue.getValueType() {
  return Vec4_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec4_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec4_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec4_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec4_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec4_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec4_dArray GenericVec4_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec4_dArrayValue.setShared!(Vec4_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec4_dArrayValue.setCopy!(Vec4_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec4_d GenericVec4_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec4_dArrayValue.set!(Index index, Vec4_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec4_dArrayValue.push!(Vec4_d value) {
  this.value.push(value);
}

// value constructor
inline GenericVec4_dValue(Vec4_d value) {
  this.value = value;
}

/// The GenericVec4_iValue is a typed implementation of the GenericValue using a Vec4_i.
object GenericVec4_iValue : GenericValue {
  /// \internal
  Vec4_i value;
};

/// returns the type of the value
inline Type GenericVec4_iValue.getValueType() {
  return Vec4_i;
}

/// returns true if this value contains an array
inline Boolean GenericVec4_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec4_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec4_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec4_i GenericVec4_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec4_iValue.set!(Vec4_i value) {
  this.value = value;
}

alias Vec4_i Vec4_iArray[];

/// The GenericVec4_iArrayValue is a typed implementation of the GenericArrayValue using a Vec4_i array element.
object GenericVec4_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec4_iArray value;
};

/// value constructor
inline GenericVec4_iArrayValue(Vec4_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec4_iArrayValue.getValueType() {
  return Vec4_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec4_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec4_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec4_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec4_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec4_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec4_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec4_iArray GenericVec4_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec4_iArrayValue.setShared!(Vec4_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec4_iArrayValue.setCopy!(Vec4_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec4_i GenericVec4_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec4_iArrayValue.set!(Index index, Vec4_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec4_iArrayValue.push!(Vec4_i value) {
  this.value.push(value);
}

// value constructor
inline GenericVec4_iValue(Vec4_i value) {
  this.value = value;
}

/// The GenericVec_cValue is a typed implementation of the GenericValue using a Vec_c.
object GenericVec_cValue : GenericValue {
  /// \internal
  Vec_c value;
};

/// returns the type of the value
inline Type GenericVec_cValue.getValueType() {
  return Vec_c;
}

/// returns true if this value contains an array
inline Boolean GenericVec_cValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec_cValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec_cValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec_cValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec_c GenericVec_cValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec_cValue.set!(Vec_c value) {
  this.value = value;
}

alias Vec_c Vec_cArray[];

/// The GenericVec_cArrayValue is a typed implementation of the GenericArrayValue using a Vec_c array element.
object GenericVec_cArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec_cArray value;
};

/// value constructor
inline GenericVec_cArrayValue(Vec_cArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec_cArrayValue.getValueType() {
  return Vec_cArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec_cArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec_cArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec_cArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec_cArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec_cArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec_cArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec_cArray GenericVec_cArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec_cArrayValue.setShared!(Vec_cArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec_cArrayValue.setCopy!(Vec_cArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec_c GenericVec_cArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec_cArrayValue.set!(Index index, Vec_c value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec_cArrayValue.push!(Vec_c value) {
  this.value.push(value);
}

// value constructor
inline GenericVec_cValue(Vec_c value) {
  this.value = value;
}

/// The GenericVec_cdValue is a typed implementation of the GenericValue using a Vec_cd.
object GenericVec_cdValue : GenericValue {
  /// \internal
  Vec_cd value;
};

/// returns the type of the value
inline Type GenericVec_cdValue.getValueType() {
  return Vec_cd;
}

/// returns true if this value contains an array
inline Boolean GenericVec_cdValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec_cdValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec_cdValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec_cdValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec_cd GenericVec_cdValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec_cdValue.set!(Vec_cd value) {
  this.value = value;
}

alias Vec_cd Vec_cdArray[];

/// The GenericVec_cdArrayValue is a typed implementation of the GenericArrayValue using a Vec_cd array element.
object GenericVec_cdArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec_cdArray value;
};

/// value constructor
inline GenericVec_cdArrayValue(Vec_cdArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec_cdArrayValue.getValueType() {
  return Vec_cdArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec_cdArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec_cdArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec_cdArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec_cdArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec_cdArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec_cdArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec_cdArray GenericVec_cdArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec_cdArrayValue.setShared!(Vec_cdArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec_cdArrayValue.setCopy!(Vec_cdArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec_cd GenericVec_cdArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec_cdArrayValue.set!(Index index, Vec_cd value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec_cdArrayValue.push!(Vec_cd value) {
  this.value.push(value);
}

// value constructor
inline GenericVec_cdValue(Vec_cd value) {
  this.value = value;
}

/// The GenericVec_dValue is a typed implementation of the GenericValue using a Vec_d.
object GenericVec_dValue : GenericValue {
  /// \internal
  Vec_d value;
};

/// returns the type of the value
inline Type GenericVec_dValue.getValueType() {
  return Vec_d;
}

/// returns true if this value contains an array
inline Boolean GenericVec_dValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec_dValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec_dValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec_dValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec_d GenericVec_dValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec_dValue.set!(Vec_d value) {
  this.value = value;
}

alias Vec_d Vec_dArray[];

/// The GenericVec_dArrayValue is a typed implementation of the GenericArrayValue using a Vec_d array element.
object GenericVec_dArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec_dArray value;
};

/// value constructor
inline GenericVec_dArrayValue(Vec_dArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec_dArrayValue.getValueType() {
  return Vec_dArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec_dArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec_dArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec_dArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec_dArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec_dArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec_dArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec_dArray GenericVec_dArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec_dArrayValue.setShared!(Vec_dArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec_dArrayValue.setCopy!(Vec_dArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec_d GenericVec_dArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec_dArrayValue.set!(Index index, Vec_d value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec_dArrayValue.push!(Vec_d value) {
  this.value.push(value);
}

// value constructor
inline GenericVec_dValue(Vec_d value) {
  this.value = value;
}

/// The GenericVec_iValue is a typed implementation of the GenericValue using a Vec_i.
object GenericVec_iValue : GenericValue {
  /// \internal
  Vec_i value;
};

/// returns the type of the value
inline Type GenericVec_iValue.getValueType() {
  return Vec_i;
}

/// returns true if this value contains an array
inline Boolean GenericVec_iValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericVec_iValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericVec_iValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec_iValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Vec_i GenericVec_iValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericVec_iValue.set!(Vec_i value) {
  this.value = value;
}

alias Vec_i Vec_iArray[];

/// The GenericVec_iArrayValue is a typed implementation of the GenericArrayValue using a Vec_i array element.
object GenericVec_iArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  Vec_iArray value;
};

/// value constructor
inline GenericVec_iArrayValue(Vec_iArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericVec_iArrayValue.getValueType() {
  return Vec_iArray;
}

/// returns true if this value contains an array
inline Boolean GenericVec_iArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericVec_iArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericVec_iArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericVec_iArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericVec_iArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericVec_iArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline Vec_iArray GenericVec_iArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericVec_iArrayValue.setShared!(Vec_iArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericVec_iArrayValue.setCopy!(Vec_iArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Vec_i GenericVec_iArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericVec_iArrayValue.set!(Index index, Vec_i value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericVec_iArrayValue.push!(Vec_i value) {
  this.value.push(value);
}

// value constructor
inline GenericVec_iValue(Vec_i value) {
  this.value = value;
}

/// The GenericXfoValue is a typed implementation of the GenericValue using a Xfo.
object GenericXfoValue : GenericValue {
  /// \internal
  Xfo value;
};

/// returns the type of the value
inline Type GenericXfoValue.getValueType() {
  return Xfo;
}

/// returns true if this value contains an array
inline Boolean GenericXfoValue.isArray() {
  return false;
}

/// returns a hash value for this
inline UInt32 GenericXfoValue.hash_() {
  return this.value.hash();
}

/// return true if this value matches another one
inline Boolean GenericXfoValue.equals(Ref<GenericValue> other)
{
  Ref<GenericXfoValue> otherValue(other);
  return (!!otherValue) && this.get() == otherValue.get();
}

/// returns the contained value
inline Xfo GenericXfoValue.get() {
  return this.value;
}

/// sets the contained value
inline GenericXfoValue.set!(Xfo value) {
  this.value = value;
}

alias Xfo XfoArray[];

/// The GenericXfoArrayValue is a typed implementation of the GenericArrayValue using a Xfo array element.
object GenericXfoArrayValue : GenericValue, GenericArrayValue {
  /// \internal
  XfoArray value;
};

/// value constructor
inline GenericXfoArrayValue(XfoArray value) {
  this.setCopy(value);
}

/// returns the name of the value type
inline Type GenericXfoArrayValue.getValueType() {
  return XfoArray;
}

/// returns true if this value contains an array
inline Boolean GenericXfoArrayValue.isArray() {
  return true;
}

/// return true if this value array matches another one
inline Boolean GenericXfoArrayValue.equals(Ref<GenericValue> other)
{
  Ref<GenericXfoArrayValue> otherValue(other);
  if(!otherValue)
    return false;
  if(this.size() != otherValue.size())
    return false;
  for(Size i=0;i<this.size();i++)
  {
    if( this.value[i] != otherValue.value[i] )
      return false;
  }
  return true;
}

/// returns a hash value for this
inline UInt32 GenericXfoArrayValue.hash_() {
  UInt32 result = this.size();
  for(Size i=0;i<this.size();i++)
    result = result ^ this.value[i].hash();
  return result;
}

/// returns the size of the contained value array
inline Size GenericXfoArrayValue.size() {
  return this.value.size();
}

/// resizes the contained value array
inline GenericXfoArrayValue.resize!(Size newSize) {
  this.value.resize(newSize);
}

/// returns the contained value array
inline XfoArray GenericXfoArrayValue.get() {
  return this.value;
}

/// sets the contained value array (sharing the reference)
inline GenericXfoArrayValue.setShared!(XfoArray value) {
  this.value = value;
}

/// sets the contained value array (copying its contents)
inline GenericXfoArrayValue.setCopy!(XfoArray value) {
  this.value = value.clone();
}

/// returns an element the contained value array by index
inline Xfo GenericXfoArrayValue.get(Index index) {
  return this.value[index];
}

/// sets an element the contained value array by index
inline GenericXfoArrayValue.set!(Index index, Xfo value) {
  this.value[index] = value;
}

/// pushed an element to the contained value array
inline GenericXfoArrayValue.push!(Xfo value) {
  this.value.push(value);
}

// value constructor
inline GenericXfoValue(Xfo value) {
  this.value = value;
}
