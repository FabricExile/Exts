//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//
/**
The :kl-ref:`Mat44` represents a 4 by 4 matrix. It uses :kl-ref:`Vec4` types for each of the 4 rows.

\rst
  .. kl-example:: Mat44

    // create a matrix 4x4
    Vec4 v0(1.0, 0.0, 0.0, 0.0);
    Vec4 v1(0.0, 1.0, 0.0, 0.0);
    Vec4 v2(0.0, 0.0, 1.0, 0.0);
    Vec4 v3(0.0, 0.0, 0.0, 1.0);
    Mat44 mat(v0, v1, v2, v3);


  Fabric Engine Matrices are column-major rather than row-major
  --------------------------------------------------------------
  Most DCCs follow a row-major convention for expressing their matrices which implies that
  multiplication of matrices occurs in the opposite order to those in Fabric Engine.

  In Maya, to transform a point (P) by a matrix (WM), you would post-multiply the vector by the matrix 
  by placing it on the left side of the matrix. 

   (P' = P x WM)

  In Fabric Engine, to transform a point (P) by a matrix (WM), you would post-multiply it by placing it on the right hand side of the matrix.

   (P' = WM x P)

  When multiplying matrices together, the order of the matrices is also swapped when compared to Maya.

  To Transform a Matrix (M) into the space of a another matrix (WM), you would place the L on the right hand side of WM

  (M' = WM x M)

  In Maya and 3dsmax, the order of the matrices in the multiplication would be swapped. 

  (M' = M x WM)

\endrst


\seealso Xfo, Mat33
\dfgTypeColor Color(249, 157, 28)
\dfgPresetColor Color(99, 129, 92)
*/

struct Mat44
{
  Vec4 row0;
  Vec4 row1;
  Vec4 row2;
  Vec4 row3;
};

inline Mat44(){
  this.setIdentity();
}

/// Constructor from scalars
/// \dfgPresetDefault _00 1
/// \dfgPresetDefault _11 1
/// \dfgPresetDefault _22 1
/// \dfgPresetDefault _33 1
inline Mat44(
  Scalar _00, Scalar _01, Scalar _02, Scalar _03,
  Scalar _10, Scalar _11, Scalar _12, Scalar _13,
  Scalar _20, Scalar _21, Scalar _22, Scalar _23,
  Scalar _30, Scalar _31, Scalar _32, Scalar _33) {
  this.set(_00, _01, _02, _03, _10, _11, _12, _13, _20, _21, _22, _23, _30, _31, _32, _33);
}

/// Constructor from vectors
inline Mat44(in Vec4 row0, in Vec4 row1, in Vec4 row2, in Vec4 row3) {
  this.setRows(row0, row1, row2, row3);
}

/// Constructor from Mat33
inline Mat44(in Mat33 upperLeft) {
  this.setUpperLeft(upperLeft);
  this.row3.t = 1;
}

/// Sets each component with a single scalar value.
inline Mat44.set!(
  Scalar _00, Scalar _01, Scalar _02, Scalar _03,
  Scalar _10, Scalar _11, Scalar _12, Scalar _13,
  Scalar _20, Scalar _21, Scalar _22, Scalar _23,
  Scalar _30, Scalar _31, Scalar _32, Scalar _33
) {
  this.row0 = Vec4(_00, _01, _02, _03);
  this.row1 = Vec4(_10, _11, _12, _13);
  this.row2 = Vec4(_20, _21, _22, _23);
  this.row3 = Vec4(_30, _31, _32, _33);
}

/// Setter from (standard/external) float32 array and an offset
inline Mat44.set!(Float32 v<>, UInt32 o) {
  if(v.size() >= 16 + o) {
    this.row0.set(v, o + 0);
    this.row1.set(v, o + 4);
    this.row2.set(v, o + 8);
    this.row3.set(v, o + 12);
  }
}

/// Getter as external float32 array and an offset
inline Mat44.get(io Float32 v<>, UInt32 o) {
  if(v.size() >= 16 + o) {
    this.row0.get(v, o + 0);
    this.row1.get(v, o + 4);
    this.row2.get(v, o + 8);
    this.row3.get(v, o + 12);
  }
}

/// Getter as float32 array and an offset
inline Mat44.get(io Float32 v[], UInt32 o) {
  if(v.size() < 16 + o)
    v.resize(16 + o);
  this.row0.get(v, o + 0);
  this.row1.get(v, o + 4);
  this.row2.get(v, o + 8);
  this.row3.get(v, o + 12);
}

/// Setter from (standard/external) float64 array and an offset
inline Mat44.set!(Float64 v<>, UInt32 o) {
  if(v.size() >= 16 + o) {
    this.row0.set(v, o + 0);
    this.row1.set(v, o + 4);
    this.row2.set(v, o + 8);
    this.row3.set(v, o + 12);
  }
}

/// Getter as external float64 array and an offset
inline Mat44.get(io Float64 v<>, UInt32 o) {
  if(v.size() >= 16 + o) {
    this.row0.get(v, o + 0);
    this.row1.get(v, o + 4);
    this.row2.get(v, o + 8);
    this.row3.get(v, o + 12);
  }
}

/// Get to an external array, transposing in the process
inline Mat44.getTr?(io Float64 v<>) {
  v[ 0] = this.row0.x; v[ 1] = this.row1.x; v[ 2] = this.row2.x; v[ 3] = this.row3.x;
  v[ 4] = this.row0.y; v[ 5] = this.row1.y; v[ 6] = this.row2.y; v[ 7] = this.row3.y;
  v[ 8] = this.row0.z; v[ 9] = this.row1.z; v[10] = this.row2.z; v[11] = this.row3.z;
  v[12] = this.row0.t; v[13] = this.row1.t; v[14] = this.row2.t; v[15] = this.row3.t;
}

/// Set from an external array, transposing in the process
inline Mat44.setTr!(Float64 v<>) {
  this.row0.x = Scalar(v[ 0]);
  this.row1.x = Scalar(v[ 1]);
  this.row2.x = Scalar(v[ 2]);
  this.row3.x = Scalar(v[ 3]);
  this.row0.y = Scalar(v[ 4]);
  this.row1.y = Scalar(v[ 5]);
  this.row2.y = Scalar(v[ 6]);
  this.row3.y = Scalar(v[ 7]);
  this.row0.z = Scalar(v[ 8]);
  this.row1.z = Scalar(v[ 9]);
  this.row2.z = Scalar(v[10]);
  this.row3.z = Scalar(v[11]);
  this.row0.t = Scalar(v[12]);
  this.row1.t = Scalar(v[13]);
  this.row2.t = Scalar(v[14]);
  this.row3.t = Scalar(v[15]);
}

/// Getter as float64 array and an offset
inline Mat44.get(io Float64 v[], UInt32 o) {
  if(v.size() < 16 + o)
    v.resize(16 + o);
  this.row0.get(v, o + 0);
  this.row1.get(v, o + 4);
  this.row2.get(v, o + 8);
  this.row3.get(v, o + 12);
}

/// Setter from (standard/external) float32 array
inline Mat44.set!(Float32 v<>) {
  this.set(v, 0);
}

/// Getter as external float32 array
inline Mat44.get(io Float32 v<>) {
  this.get(v, 0);
}

/// Getter as float32 array
inline Mat44.get(io Float32 v[]) {
  this.get(v, 0);
}

/// Setter from (standard/external) float64 array
inline Mat44.set!(Float64 v<>) {
  this.set(v, 0);
}

/// Getter as external float64 array
inline Mat44.get(io Float64 v<>) {
  this.get(v, 0);
}

/// Getter as float64 array
inline Mat44.get(io Float64 v[]) {
  this.get(v, 0);
}

inline Mat44.set!(Vec3 translation, Mat33 rotation, Vec3 scaling) {
  this.setTranslation(translation);
  this.setUpperLeft(rotation);
  this.setScaling(scaling);
}

/// \param shearing Shearing vector as  {x shearing along y, x shearing along z, y shearing along z}.
inline Mat44.set!(Vec3 translation, Mat33 rotation, Vec3 shearing, Vec3 scaling) {
  Mat33 scaleShear( 
            scaling.x, shearing.x*scaling.y, shearing.y*scaling.z,
            0,                    scaling.y, shearing.z*scaling.z,
            0,                            0,            scaling.z );

  this.setUpperLeft(rotation * scaleShear);
  this.setTranslation(translation);
}

inline Mat44.set!(Vec3 translation, Quat rotation, Vec3 scaling) {
  this.setTranslation(translation);
  this.setRotation(rotation);
  this.setScaling(scaling);
}

/// \param shearing Shearing vector as  {x shearing along y, x shearing along z, y shearing along z}.
inline Mat44.set!(Vec3 translation, Quat rotation, Vec3 shearing, Vec3 scaling) {
  this.set( translation, rotation.toMat33(), shearing, scaling );
}


/// set the upper left 3 x 3 components from a Mat33.
/// the remaining components are set to the identify matrix's content.
inline Mat44.setFromMat33!(in Mat33 m) {
  this.row0.x = m.row0.x; this.row0.y = m.row0.y; this.row0.z = m.row0.z; this.row0.t = Scalar();
  this.row1.x = m.row1.x; this.row1.y = m.row1.y; this.row1.z = m.row1.z; this.row1.t = Scalar();
  this.row2.x = m.row2.x; this.row2.y = m.row2.y; this.row2.z = m.row2.z; this.row2.t = Scalar();
  this.row3.x = Scalar(); this.row3.y = Scalar(); this.row3.z = Scalar(); this.row3.t = Scalar(1.0);
}


/// Setter from vectors, row-wise
inline Mat44.setRows!(in Vec4 row0, in Vec4 row1, in Vec4 row2, in Vec4 row3) {
  this.row0 = row0;
  this.row1 = row1;
  this.row2 = row2;
  this.row3 = row3;
}

/// Setter from vectors, column-wise
inline Mat44.setColumns!(in Vec4 col0, in Vec4 col1, in Vec4 col2, in Vec4 col3) {
  this.row0.x = col0.x; this.row0.y = col1.x; this.row0.z = col2.x; this.row0.t = col3.x;
  this.row1.x = col0.y; this.row1.y = col1.y; this.row1.z = col2.y; this.row1.t = col3.y;
  this.row2.x = col0.z; this.row2.y = col1.z; this.row2.z = col2.z; this.row2.t = col3.z;
  this.row3.x = col0.t; this.row3.y = col1.t; this.row3.z = col2.t; this.row3.t = col3.t;
}

/// setting all components of the matrix to 0.0
inline Mat44.setNull!() {
  Vec4 nullVec4(Scalar(), Scalar(), Scalar(), Scalar());
  this.row0 = this.row1 = this.row2 = this.row3 = nullVec4;
}

/// returns true if all components in this matrix are 0.0
inline Boolean Mat44.isNull() {
  Vec4 nullVec4(Scalar(), Scalar(), Scalar(), Scalar());
  return this.row0 == nullVec4 && this.row1 == nullVec4 && this.row2 == nullVec4 && this.row3 == nullVec4;
}

/// setting this matrix to the identity matrix
inline Mat44.setIdentity!() {
  this.setNull();
  this.setDiagonal(Scalar(1.0));
}

/// setting the diagonal components of 
/// this matrix to a scalar
inline Mat44.setDiagonal!(in Scalar v) {
  this.setNull();
  this.row0.x = this.row1.y = this.row2.z = this.row3.t = v;
}

/// setting the diagonal components of this
/// matrix to the components of a Vec3
inline Mat44.setDiagonal!(in Vec3 v) {
  this.setNull();
  this.row0.x = v.x;
  this.row1.y = v.y;
  this.row2.z = v.z;
  this.row3.t = Scalar(1.0);
}

/// matrix to the components of a Vec4
inline Mat44.setDiagonal!(in Vec4 v) {
  this.setNull();
  this.row0.x = v.x;
  this.row1.y = v.y;
  this.row2.z = v.z;
  this.row3.t = v.t;
}

/// Returns true if this matrix is the same as another one
inline Boolean Mat44.equal(in Mat44 other) {
  return this.row0.equal( other.row0 ) && this.row1.equal( other.row1 ) && this.row2.equal( other.row2 ) && this.row3.equal( other.row3 );
}

/// Returns true if this matrix is almost the same as another one
/// (given a precision)
inline Boolean Mat44.almostEqual(
  in Mat44 other,
  in Scalar precision
  ) {
  return this.row0.almostEqual( other.row0, precision ) && this.row1.almostEqual( other.row1, precision ) && this.row2.almostEqual( other.row2, precision ) && this.row3.almostEqual( other.row3, precision );
}

/// Returns true if this matrix is almost the same as another one
/// (using a default precision)
inline Boolean Mat44.almostEqual(in Mat44 other) {
  return this.almostEqual(other, PRECISION);
}

/// Equals operator
inline Boolean == (Mat44 a, Mat44 b) {
  return a.equal(b);
}

/// Not equals operator
inline Boolean != (Mat44 a, Mat44 b) {
  return !a.equal(b);
}

/// Hash for this value
inline UInt32 Mat44.hash() {
  return this.row0.hash() ^ this.row1.hash() ^ this.row2.hash() ^ this.row3.hash();
}

/// Returns the addition of two matrices
inline Mat44 + (Mat44 a, Mat44 b) {
  return Mat44( a.row0 + b.row0, a.row1 + b.row1, a.row2 + b.row2, a.row3 + b.row3 );
}

/// Adds another matrix to this one
inline Mat44. += (Mat44 other) {
  this = this + other;
}

/// Returns the subtraction of two matrices
inline Mat44 - (Mat44 a, Mat44 b) {
  return Mat44( a.row0 - b.row0, a.row1 - b.row1, a.row2 - b.row2, a.row3 - b.row3 );
}

/// Subtracts another matrix from this one
inline Mat44. -= (Mat44 other) {
  this = this - other;
}

/// Returns the product of two matrices
/// \dfgPresetDefault right {"row0": {"x": 1, "y": 0, "z": 0, "t": 0}, "row1": { "x": 0, "y": 1, "z": 0, "t": 0}, "row2": { "x": 0, "y": 0, "z": 1, "t": 0}, "row3": { "x": 0, "y": 0, "z": 0, "t": 1}}
inline Mat44 * (Mat44 left, Mat44 right) {
  Mat44 result;

  result.row0.x = left.row0.x * right.row0.x + left.row0.y * right.row1.x + left.row0.z * right.row2.x + left.row0.t * right.row3.x;
  result.row0.y = left.row0.x * right.row0.y + left.row0.y * right.row1.y + left.row0.z * right.row2.y + left.row0.t * right.row3.y;
  result.row0.z = left.row0.x * right.row0.z + left.row0.y * right.row1.z + left.row0.z * right.row2.z + left.row0.t * right.row3.z;
  result.row0.t = left.row0.x * right.row0.t + left.row0.y * right.row1.t + left.row0.z * right.row2.t + left.row0.t * right.row3.t;

  result.row1.x = left.row1.x * right.row0.x + left.row1.y * right.row1.x + left.row1.z * right.row2.x + left.row1.t * right.row3.x;
  result.row1.y = left.row1.x * right.row0.y + left.row1.y * right.row1.y + left.row1.z * right.row2.y + left.row1.t * right.row3.y;
  result.row1.z = left.row1.x * right.row0.z + left.row1.y * right.row1.z + left.row1.z * right.row2.z + left.row1.t * right.row3.z;
  result.row1.t = left.row1.x * right.row0.t + left.row1.y * right.row1.t + left.row1.z * right.row2.t + left.row1.t * right.row3.t;

  result.row2.x = left.row2.x * right.row0.x + left.row2.y * right.row1.x + left.row2.z * right.row2.x + left.row2.t * right.row3.x;
  result.row2.y = left.row2.x * right.row0.y + left.row2.y * right.row1.y + left.row2.z * right.row2.y + left.row2.t * right.row3.y;
  result.row2.z = left.row2.x * right.row0.z + left.row2.y * right.row1.z + left.row2.z * right.row2.z + left.row2.t * right.row3.z;
  result.row2.t = left.row2.x * right.row0.t + left.row2.y * right.row1.t + left.row2.z * right.row2.t + left.row2.t * right.row3.t;

  result.row3.x = left.row3.x * right.row0.x + left.row3.y * right.row1.x + left.row3.z * right.row2.x + left.row3.t * right.row3.x;
  result.row3.y = left.row3.x * right.row0.y + left.row3.y * right.row1.y + left.row3.z * right.row2.y + left.row3.t * right.row3.y;
  result.row3.z = left.row3.x * right.row0.z + left.row3.y * right.row1.z + left.row3.z * right.row2.z + left.row3.t * right.row3.z;
  result.row3.t = left.row3.x * right.row0.t + left.row3.y * right.row1.t + left.row3.z * right.row2.t + left.row3.t * right.row3.t;

  return result;
}

/// Returns the product of a matrix and a Vec4
inline Vec4 * (Mat44 mat44, Vec4 vec4) {
  return Vec4(
    mat44.row0.x * vec4.x + mat44.row0.y * vec4.y + mat44.row0.z * vec4.z + mat44.row0.t * vec4.t,
    mat44.row1.x * vec4.x + mat44.row1.y * vec4.y + mat44.row1.z * vec4.z + mat44.row1.t * vec4.t,
    mat44.row2.x * vec4.x + mat44.row2.y * vec4.y + mat44.row2.z * vec4.z + mat44.row2.t * vec4.t,
    mat44.row3.x * vec4.x + mat44.row3.y * vec4.y + mat44.row3.z * vec4.z + mat44.row3.t * vec4.t
  );
}

/// Returns the product of a matrix and a Vec3
inline Vec3 * (Mat44 mat44, Vec3 vec3) {
  const Scalar one = 1;
  Vec4 temp = mat44 * Vec4(vec3.x, vec3.y, vec3.z, one);
  return temp.makeHomogeneousVec3();
}

/// Returns the product of a matrix and a scalar
/// \dfgPresetDefault s 1
inline Mat44 * (Mat44 mat44, Scalar s) {
  return Mat44( mat44.row0 * s, mat44.row1 * s, mat44.row2 * s, mat44.row3 * s );
}

/// Returns the product of a scalar and a matrix
/// \dfgPresetDefault s 1
inline Mat44 * (Scalar s, Mat44 mat44) {
  return Mat44( mat44.row0 * s, mat44.row1 * s, mat44.row2 * s, mat44.row3 * s );
}

/// Multiplies this matrix with another one
/// \dfgPresetDefault other {"row0": {"x": 1, "y": 0, "z": 0, "t": 0}, "row1": { "x": 0, "y": 1, "z": 0, "t": 0}, "row2": { "x": 0, "y": 0, "z": 1, "t": 0}, "row3": { "x": 0, "y": 0, "z": 0, "t": 1}}
inline Mat44. *= (Mat44 other) {
  this = this * other;
}

/// Multiplies this matrix with a scalar
/// \dfgPresetDefault other 1
inline Mat44. *= (Scalar other) {
  this = this * other;
}

/// Returns the division of a matrix and a scalar
/// \dfgPresetDefault s 1
inline Mat44 / (Mat44 mat44, Scalar s) {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( s ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( s, "Mat44.divide" );
  return mat44 * (1.0 / s);
}

/// Divides this matrix by a scalar
/// \dfgPresetDefault other 1
inline Mat44. /= (Scalar other) {
  this = this / other;
}

/// Overload method for the add operator
inline Mat44 Mat44.add(Mat44 other) {
  return this + other;
}

/// Overload method for the subtract operator
inline Mat44 Mat44.subtract(Mat44 other) {
  return this - other;
}

/// Overload method for the multiply operator
/// \dfgPresetDefault other {"row0": {"x": 1, "y": 0, "z": 0, "t": 0}, "row1": { "x": 0, "y": 1, "z": 0, "t": 0}, "row2": { "x": 0, "y": 0, "z": 1, "t": 0}, "row3": { "x": 0, "y": 0, "z": 0, "t": 1}}
inline Mat44 Mat44.multiply(Mat44 other) {
  return this * other;
}

/// Returns the product of this matrix and a scalar
/// \dfgPresetDefault other 1
inline Mat44 Mat44.multiplyScalar(Scalar other) {
  return this * other;
}

/// Returns the product of this matrix and a Vec3
inline Vec3 Mat44.multiplyVector3(Vec3 other) {
  return this * other;
}

/// Returns the product of this matrix and a Vec4
inline Vec4 Mat44.multiplyVector4(Vec4 other) {
  return this * other;
}

/// Returns the division of this matrix and a scalar
/// \dfgPresetDefault other 1
inline Mat44 Mat44.divideScalar(Scalar other) {
  return this / other;
}

/// helper function for determinant and adjoint
/// \internal
function Boolean Mat44.internalCompute( in Boolean computeDet, io Scalar det, in Boolean computeAdjoint, io Mat44 adjoint ) {
  Scalar a0 = this.row0.x * this.row1.y - this.row0.y * this.row1.x;
  Scalar a1 = this.row0.x * this.row1.z - this.row0.z * this.row1.x;
  Scalar a2 = this.row0.x * this.row1.t - this.row0.t * this.row1.x;
  Scalar a3 = this.row0.y * this.row1.z - this.row0.z * this.row1.y;
  Scalar a4 = this.row0.y * this.row1.t - this.row0.t * this.row1.y;
  Scalar a5 = this.row0.z * this.row1.t - this.row0.t * this.row1.z;
  Scalar b0 = this.row2.x * this.row3.y - this.row2.y * this.row3.x;
  Scalar b1 = this.row2.x * this.row3.z - this.row2.z * this.row3.x;
  Scalar b2 = this.row2.x * this.row3.t - this.row2.t * this.row3.x;
  Scalar b3 = this.row2.y * this.row3.z - this.row2.z * this.row3.y;
  Scalar b4 = this.row2.y * this.row3.t - this.row2.t * this.row3.y;
  Scalar b5 = this.row2.z * this.row3.t - this.row2.t * this.row3.z;

  if(computeDet)
    det = a0 * b5 - a1 * b4 + a2 * b3 + a3 * b2 - a4 * b1 + a5 * b0;

  if(computeAdjoint) {
    adjoint.row0.x =  + this.row1.y * b5 - this.row1.z * b4 + this.row1.t * b3;
    adjoint.row0.y = -this.row0.y * b5 + this.row0.z * b4 - this.row0.t * b3;
    adjoint.row0.z =  + this.row3.y * a5 - this.row3.z * a4 + this.row3.t * a3;
    adjoint.row0.t = -this.row2.y * a5 + this.row2.z * a4 - this.row2.t * a3;
    adjoint.row1.x = -this.row1.x * b5 + this.row1.z * b2 - this.row1.t * b1;
    adjoint.row1.y =  + this.row0.x * b5 - this.row0.z * b2 + this.row0.t * b1;
    adjoint.row1.z = -this.row3.x * a5 + this.row3.z * a2 - this.row3.t * a1;
    adjoint.row1.t =  + this.row2.x * a5 - this.row2.z * a2 + this.row2.t * a1;
    adjoint.row2.x =  + this.row1.x * b4 - this.row1.y * b2 + this.row1.t * b0;
    adjoint.row2.y = -this.row0.x * b4 + this.row0.y * b2 - this.row0.t * b0;
    adjoint.row2.z =  + this.row3.x * a4 - this.row3.y * a2 + this.row3.t * a0;
    adjoint.row2.t = -this.row2.x * a4 + this.row2.y * a2 - this.row2.t * a0;
    adjoint.row3.x = -this.row1.x * b3 + this.row1.y * b1 - this.row1.z * b0;
    adjoint.row3.y =  + this.row0.x * b3 - this.row0.y * b1 + this.row0.z * b0;
    adjoint.row3.z = -this.row3.x * a3 + this.row3.y * a1 - this.row3.z * a0;
    adjoint.row3.t =  + this.row2.x * a3 - this.row2.y * a1 + this.row2.z * a0;
  }
  return true;//Dummy; make this an r-value func
}

/// Returns the determinant of this matrix
inline Scalar Mat44.determinant() {
  Scalar det;
  Mat44 dummy;
  this.internalCompute(true, det, false, dummy);
  return det;
}

/// Returns the adjoint matrix of this matrix
inline Mat44 Mat44.adjoint() {
  Scalar dummy;
  Mat44 adjoint;
  this.internalCompute(false, dummy, true, adjoint);
  return adjoint;
}

/// Returns the inverse matrix of this matrix
inline Mat44 Mat44.inverse() {
  Scalar det;
  Mat44 adjoint;
  this.internalCompute(true, det, true, adjoint);
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( det ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( det, "Mat44.inverse" );
  return adjoint / det;
}

/// Returns the inverse matrix of this matrix, always checking the determinant value.
inline Mat44 Mat44.inverse_safe() {
  Scalar det;
  Mat44 adjoint;
  this.internalCompute(true, det, true, adjoint);
  if( Math_badDivisor( det ) )
    return adjoint;
  return adjoint / det;
}

/// Returns the transposed matrix of this matrix
inline Mat44 Mat44.transpose() {
  Mat44 r;
  r.setColumns(this.row0,this.row1,this.row2,this.row3);
  return r;
}

/// Returns the translation components of
/// this matrix as a Vec3
inline Vec3 Mat44.translation() {
  Vec3 result;
  result.x = this.row0.t;
  result.y = this.row1.t;
  result.z = this.row2.t;
  return result;
}

/// Sets the translation components 
/// of this matrix to 0.0
inline Mat44.zeroTranslation!() {
  this.row0.t = Scalar();
  this.row1.t = Scalar();
  this.row2.t = Scalar();
}

/// Sets the translation components 
/// of this matrix to a given Vec3
inline Mat44.setTranslation!(Vec3 tr) {
  this.row0.t = tr.x;
  this.row1.t = tr.y;
  this.row2.t = tr.z;
}

/// replaces the upper left 3 x 3 components from a Mat33.
inline Mat44.setUpperLeft!(in Mat33 m) {
  this.row0.x = m.row0.x; this.row0.y = m.row0.y; this.row0.z = m.row0.z;
  this.row1.x = m.row1.x; this.row1.y = m.row1.y; this.row1.z = m.row1.z;
  this.row2.x = m.row2.x; this.row2.y = m.row2.y; this.row2.z = m.row2.z;
}

/// set the upper left 3 x 3 components from a Quat.
/// \note This will replace all the upper left, including scaling components if there was
inline Mat44.setRotation!(in Quat q) {
  this.setUpperLeft(q.toMat33());
}

/// Sets the scaling of the matrix by scaling the rows of the matrix. 
/// \note This will preserve the existing matrix content
inline Mat44.setScaling!(in Vec3 v) {
  Scalar len;

  Vec3 col0(this.row0.x, this.row1.x, this.row2.x);
  Vec3 col1(this.row0.y, this.row1.y, this.row2.y);
  Vec3 col2(this.row0.z, this.row1.z, this.row2.z);
  
  len = col0.length();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( len ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( len, "Mat44.setScaling: Matrix is singular" );
  col0 *= (v.x / len);

  len = col1.length(); 
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( len ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( len, "Mat44.setScaling: Matrix is singular" );
  col1 *= (v.y / len);

  len = col2.length(); 
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( len ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( len, "Mat44.setScaling: Matrix is singular" );
  col2 *= (v.z / len);

  this.row0.x = col0.x;
  this.row1.x = col0.y;
  this.row2.x = col0.z;

  this.row0.y = col1.x;
  this.row1.y = col1.y;
  this.row2.y = col1.z;

  this.row0.z = col2.x;
  this.row1.z = col2.y;
  this.row2.z = col2.z;
}

/// Returns the upper left 3 x 3 components
/// of this matrix as a Mat33
inline Mat33 Mat44.upperLeft() {
  Mat33 result;

  result.row0.x = this.row0.x;
  result.row0.y = this.row0.y;
  result.row0.z = this.row0.z;

  result.row1.x = this.row1.x;
  result.row1.y = this.row1.y;
  result.row1.z = this.row1.z;

  result.row2.x = this.row2.x;
  result.row2.y = this.row2.y;
  result.row2.z = this.row2.z;

  return result;
}


/// Decompose the Mat44 into the scaling, rotation and
/// translation components and return them in the provided io args.
/// Returns true if and only if the decomposition was lossless (and there were no issues)
/// \param scaling Returns the decomposed scaling value of the Mat44
/// \param rotation Returns the decomposed rotation value of the Mat44
/// \param translation Returns the decomposed translation value of the Mat44
/// \param silent If true, won't report Math warnings
/// \param additionalLossChecks If true, will perform additional checks for the the losses during the conversion
Boolean Mat44.decompose?(
  out Vec3 scaling,
  out Mat33 rotation,
  out Vec3 translation,
  in Boolean silent,
  in Boolean additionalLossChecks
)
{

  if (abs(1.0 - this.row3.t) > 0.001) {
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )Math_reportWarning('Mat44.decompose: Cannot handle denormalized matrices: ' + this.row3.t);
    rotation.setIdentity();
    scaling = Vec3(1.0, 1.0, 1.0);
    return false;
  }

  if ( abs(this.row3.x) > PRECISION || abs(this.row3.y) > PRECISION || abs(this.row3.z) > PRECISION ) {
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )Math_reportWarning('Mat44.decompose: Cannot handle perspective projection matrices');
    rotation.setIdentity();
    scaling = Vec3(1.0, 1.0, 1.0);
    return false;
  }

  // A Mat33 is a pure rotation if and only if its determinant is 1 and it is orthogonal
  Boolean success = true;

  // Grab the translation
  translation.x = this.row0.t;
  translation.y = this.row1.t;
  translation.z = this.row2.t;

  Vec3 col0(this.row0.x, this.row1.x, this.row2.x);
  Vec3 col1(this.row0.y, this.row1.y, this.row2.y);
  Vec3 col2(this.row0.z, this.row1.z, this.row2.z);

  // Grab the X scale and normalize the first column
  scaling.x = col0.length();
  if( Math_badDivisor( scaling.x ) )
  {
    success = false;
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )//Perf: check first to avoid building the report string
      Math_reportBadDivisor( scaling.x, "Mat44.decompose: Matrix is singular" );
  }
  col0 /= scaling.x;

  // Make the 2nd row orthogonal to the 1st
  {
    Vec3 colD = col0 * col0.dot(col1);
    if( additionalLossChecks && !( colD.lengthSquared() < PRECISION ) )
    {
      success = false;
      if( !silent )
        Math_reportWarning( "Mat44.decompose: Non-orthogonal rotation matrix" );
    }
    col1 -= colD;
  }

  // Grab the Y scale and normalize
  scaling.y = col1.length();
  if( Math_badDivisor( scaling.y ) )
  {
    success = false;
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )//Perf: check first to avoid building the report string
      Math_reportBadDivisor( scaling.y, "Mat44.decompose: Matrix is singular" );
  }
  col1 /= scaling.y;

  // Make the 3rd row orthogonal to the 1st and 2nd
  {
    Vec3 colD0 = col0 * col0.dot(col2);
    Vec3 colD1 = col1 * col1.dot(col2);
    if( additionalLossChecks
      && !( ( colD0.lengthSquared() < PRECISION ) && ( colD1.lengthSquared() < PRECISION ) ) )
    {
      success = false;
      if( !silent )
        Math_reportWarning( "Mat44.decompose: Non-orthogonal rotation matrix" );
    }
    col2 -= colD0;
    col2 -= colD1;
  }

  scaling.z = col2.length();
  if( Math_badDivisor( scaling.z ) )
  {
    success = false;
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )//Perf: check first to avoid building the report string
      Math_reportBadDivisor( scaling.z, "Mat44.decompose: Matrix is singular" );
  }
  col2 /= scaling.z;

  rotation = Mat33(col0.x, col1.x, col2.x,
              col0.y, col1.y, col2.y,
              col0.z, col1.z, col2.z);

  // Fix negative scaling
  Scalar det = rotation.determinant();
  if( det < -PRECISION ) {
    //Negative scales on 2 axis is the same as a 180 deg rot, and negative scales on 3 axis is the same as a 180 deg rot + negative scale on 1 axis.
    //So we we'll just pick X axis and scale it negatively.
    scaling.x = -scaling.x;
    rotation.row0.x = -rotation.row0.x;
    rotation.row1.x = -rotation.row1.x;
    rotation.row2.x = -rotation.row2.x;
    det = -det;
  }

  // The determinant must be 1.0
  if( additionalLossChecks && !( abs( det - 1.0 ) < PRECISION ) )
  {
    success = false;
    if( !silent )
      Math_reportWarning( "Mat44.decompose: Determinant (= " + det + ") is not 1.0 (not a pure rotation matrix)" );
  }

  return success;
}

/// Decompose the Mat44 into the scaling, rotation and
/// translation components and return them in the provided io args.
/// \param scaling Returns the decomposed scaling value of the Mat44
/// \param rotation Returns the decomposed rotation value of the Mat44
/// \param translation Returns the decomposed translation value of the Mat44
inline Mat44.decompose?(out Vec3 scaling, out Mat33 rotation, out Vec3 translation)
{
  this.decompose( scaling, rotation, translation, false, false );
}


/// Decompose the Mat44 into the scaling, shearing, rotation and
/// translation components and return them in the provided io args.
/// Returns true if and only if the decomposition was lossless (and there were no issues)
/// \param scaling Returns the decomposed scaling value of the Mat44
/// \param shearing Returns the decomposed shearing value of the Mat44, as {x shearing along y, x shearing along z, y shearing along z}.
/// \param rotation Returns the decomposed rotation value of the Mat44
/// \param translation Returns the decomposed translation value of the Mat44
/// \param silent If true, won't report Math warnings
/// \param additionalLossChecks If true, will perform additional checks for the the losses during the conversion
Boolean Mat44.decompose?(
  out Vec3 scaling,
  out Vec3 shearing,
  out Mat33 rotation,
  out Vec3 translation,
  in Boolean silent,
  in Boolean additionalLossChecks
)
{

  if (abs(1.0 - this.row3.t) > 0.001) {
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )Math_reportWarning('Mat44.decompose: Cannot handle denormalized matrices: ' + this.row3.t);
    rotation.setIdentity();
    scaling = Vec3(1.0, 1.0, 1.0);
    return false;
  }

  if ( abs(this.row3.x) > PRECISION || abs(this.row3.y) > PRECISION || abs(this.row3.z) > PRECISION ) {
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )Math_reportWarning('Mat44.decompose: Cannot handle perspective projection matrices');
    rotation.setIdentity();
    scaling = Vec3(1.0, 1.0, 1.0);
    return false;
  }

  // Grab the translation
  translation.x = this.row0.t;
  translation.y = this.row1.t;
  translation.z = this.row2.t;

  return this.upperLeft().decompose( scaling, shearing, rotation, silent, additionalLossChecks );
}

/// Decompose the Mat44 into the scaling, shearing, rotation and
/// translation components and return them in the provided io args.
/// \param scaling Returns the decomposed scaling value of the Mat44
/// \param shearing Returns the decomposed shearing value of the Mat44, as {x shearing along y, x shearing along z, y shearing along z}.
/// \param rotation Returns the decomposed rotation value of the Mat44
/// \param translation Returns the decomposed translation value of the Mat44
inline Mat44.decompose?(out Vec3 scaling, out Vec3 shearing, out Mat33 rotation, out Vec3 translation) {
  this.decompose( scaling, shearing, rotation, translation, false, false );
}



/// interpolates two matrices given a scalar blend value (0.0 to 1.0)
/// \note The interpolated matrix might have lost normalization. Use :kl-ref:`Mat44.sphericalLinearInterpolate` instead
function Mat44 Mat44.linearInterpolate(in Mat44 other, in Scalar t) {
  return Mat44(
    this.row0.linearInterpolate( other.row0, t ),
    this.row1.linearInterpolate( other.row1, t ),
    this.row2.linearInterpolate( other.row2, t ),
    this.row3.linearInterpolate( other.row3, t )
  );
}

/// interpolates two matrices spherically (slerp)
/// given a scalar blend value (0.0 to 1.0).
/// \note Using Xfos, which currently cannot represent all Mat44s
function Mat44 Mat44.sphericalLinearInterpolate(in Mat44 m2, in Scalar t) {
  Xfo xfo1 = this;
  Xfo xfo2 = m2;
  return xfo1.sphericalLinearInterpolate(xfo2, t).toMat44();
}

/// interpolates two matrices given a scalar blend value (0.0 to 1.0)
/// using Mat44.sphericalLinearInterpolate if possible (no shearing),
/// or Mat44.linearInterpolate otherwise
function Mat44 Mat44.interpolate(in Mat44 other, in Scalar t) {

  // Can the matrices be losslessly translated to Xfo transforms ?
  Boolean success1, success2;
  Xfo xfo1; xfo1.setFromMat44( this, success1 );
  Xfo xfo2; xfo2.setFromMat44( other, success2 );

  if( !( success1 && success2 ) )
    // if not, then do a lossless linear interpolation
    return this.linearInterpolate( other, t );

  return xfo1.sphericalLinearInterpolate(xfo2, t).toMat44();
}

/// \dfgPresetColor Color(99, 129, 92)
/// \dfgPresetFolder Random
/// \dfgCreateArrayPreset false
/// \dfgPresetDefault min 0.0
/// \dfgPresetDefault min 1.0
inline Mat44 mathRandomMat44(Size seed, Size index, Float32 min, Float32 max) {
  Xfo xfo;
  xfo.ori = mathRandomQuat(seed, index, min, max);
  return xfo.toMat44();
}



/// Sets from Vec.
inline Mat44(Vec vec) {
  this.set(vec);
}

/// Sets from Vec.
inline Mat44.set!(Vec vec) {
  this.row0.x = vec.get(0);
  this.row0.y = vec.get(1);
  this.row0.z = vec.get(2);
  this.row0.t = vec.get(3);
  this.row1.x = vec.get(4);
  this.row1.y = vec.get(5);
  this.row1.z = vec.get(6);
  this.row1.t = vec.get(7);
  this.row2.x = vec.get(8);
  this.row2.y = vec.get(9);
  this.row2.z = vec.get(10);
  this.row2.t = vec.get(11);
  this.row3.x = vec.get(12);
  this.row3.y = vec.get(13);
  this.row3.z = vec.get(14);
  this.row3.t = vec.get(15);
}


/// Converts to Vec.
inline Vec Mat44.toVec() {
  Vec vec(4);
  vec.set(0, this.row0.x);
  vec.set(1, this.row0.y);
  vec.set(2, this.row0.z);
  vec.set(3, this.row0.t);
  vec.set(4, this.row1.x);
  vec.set(5, this.row1.y);
  vec.set(6, this.row1.z);
  vec.set(7, this.row1.t);
  vec.set(8, this.row2.x);
  vec.set(9, this.row2.y);
  vec.set(10, this.row2.z);
  vec.set(11, this.row2.t);
  vec.set(12, this.row3.x);
  vec.set(13, this.row3.y);
  vec.set(14, this.row3.z);
  vec.set(15, this.row3.t);
  return vec;
}

