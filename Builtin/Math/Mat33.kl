
//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//
/**
The :kl-ref:`Mat33` represents a 3 by 3 matrix. It uses :kl-ref:`Vec3` types for each of the 3 rows.

\rst
  .. kl-example:: Vec4

    // create a matrix 3x3
    Vec3 v0(1.0, 0.0, 0.0);
    Vec3 v1(0.0, 1.0, 0.0);
    Vec3 v2(0.0, 0.0, 1.0);
    Mat33 mat(v0, v1, v2);



  Fabric Engine Matrices are column-major rather than row-major
  --------------------------------------------------------------
  Most DCCs follow a row-major convention for expressing their matrices which implies that
  multiplication of matrices occurs in the opposite order to those in Fabric Engine.

  In Maya, to transform a point (P) by a matrix (WM), you would post-multiply the vector by the matrix 
  by placing it on the left side of the matrix. 

   (P' = P x WM)

  In Fabric Engine, to transform a point (P) by a matrix (WM), you would post-multiply it by placing it on the right hand side of the matrix.

   (P' = WM x P)

  When multiplying matrices together, the order of the matrices is also swapped when compared to Maya.

  To Transform a Matrix (M) into the space of a another matrix (WM), you would place the L on the right hand side of WM

  (M' = WM x M)

  In Maya and 3dsmax, the order of the matrices in the multiplication would be swapped. 

  (M' = M x WM)


\endrst

\seealso Quat, Mat44
\dfgTypeColor Color(249, 157, 28)
\dfgPresetColor Color(99, 129, 92)
*/

// forward declarations
struct Quat;

struct Mat33
{
  Vec3 row0;
  Vec3 row1;
  Vec3 row2;
};

inline Mat33(){
  this.setIdentity();
}

/// Constructor from scalars
/// \dfgPresetDefault _00 1
/// \dfgPresetDefault _11 1
/// \dfgPresetDefault _22 1
inline Mat33(
  Scalar _00, Scalar _01, Scalar _02,
  Scalar _10, Scalar _11, Scalar _12,
  Scalar _20, Scalar _21, Scalar _22
) {
  this.set(_00, _01, _02, _10, _11, _12, _20, _21, _22);
}

/// Constructor from vectors
inline Mat33(
  Vec3 row0, Vec3 row1, Vec3 row2
) {
  this.row0 = row0;
  this.row1 = row1;
  this.row2 = row2;
}

/// Constructor from Quat
inline Mat33(
  Quat quat
) {
  this = quat.toMat33();
}

/// Sets each component with a single scalar value.
inline Mat33.set!(
  Scalar _00, Scalar _01, Scalar _02,
  Scalar _10, Scalar _11, Scalar _12,
  Scalar _20, Scalar _21, Scalar _22
) {
  this.row0 = Vec3(_00, _01, _02);
  this.row1 = Vec3(_10, _11, _12);
  this.row2 = Vec3(_20, _21, _22);
}

/// Setter from (standard/external) float32 array and an offset
inline Mat33.set!(Float32 v<>, UInt32 o) {
  if(v.size() >= 9 + o) {
    this.row0.set(v, o + 0);
    this.row1.set(v, o + 3);
    this.row2.set(v, o + 6);
  }
}

/// Getter as external float32 array and an offset
inline Mat33.get(io Float32 v<>, UInt32 o) {
  if(v.size() >= 9 + o) {
    this.row0.get(v, o + 0);
    this.row1.get(v, o + 3);
    this.row2.get(v, o + 6);
  }
}

/// Getter as float32 array and an offset
inline Mat33.get(io Float32 v[], UInt32 o) {
  if(v.size() < 9 + o)
    v.resize(9 + o);
  this.row0.get(v, o + 0);
  this.row1.get(v, o + 3);
  this.row2.get(v, o + 6);
}

/// Setter from (standard/external) float64 array and an offset
inline Mat33.set!(Float64 v<>, UInt32 o) {
  if(v.size() >= 9 + o) {
    this.row0.set(v, o + 0);
    this.row1.set(v, o + 3);
    this.row2.set(v, o + 6);
  }
}

/// Getter as external float64 array and an offset
inline Mat33.get(io Float64 v<>, UInt32 o) {
  if(v.size() >= 9 + o) {
    this.row0.get(v, o + 0);
    this.row1.get(v, o + 3);
    this.row2.get(v, o + 6);
  }
}

/// Getter as float64 array and an offset
inline Mat33.get(io Float64 v[], UInt32 o) {
  if(v.size() < 9 + o)
    v.resize(9 + o);
  this.row0.get(v, o + 0);
  this.row1.get(v, o + 3);
  this.row2.get(v, o + 6);
}

/// Setter from (standard/external) float32 array
inline Mat33.set!(Float32 v<>) {
  this.set(v, 0);
}

/// Getter as external float32 array
inline Mat33.get(io Float32 v<>) {
  this.get(v, 0);
}

/// Getter as float32 array
inline Mat33.get(io Float32 v[]) {
  this.get(v, 0);
}

/// Setter from (standard/external) float64 array
inline Mat33.set!(Float64 v<>) {
  this.set(v, 0);
}

/// Getter as external float64 array
inline Mat33.get(io Float64 v<>) {
  this.get(v, 0);
}

/// Getter as float64 array
inline Mat33.get(io Float64 v[]) {
  this.get(v, 0);
}

/// Setter from vectors
inline Mat33.set!(in Vec3 row0, in Vec3 row1, in Vec3 row2) {
  this.setRows(row0,row1,row2);
}

/// Setter from vectors, row-wise
inline Mat33.setRows!(in Vec3 row0, in Vec3 row1, in Vec3 row2) {
  this.row0 = row0;
  this.row1 = row1;
  this.row2 = row2;
}

/// Setter from vectors, column-wise
inline Mat33.setColumns!(in Vec3 col0, in Vec3 col1, in Vec3 col2) {
  this.row0.x = col0.x; this.row0.y = col1.x; this.row0.z = col2.x;
  this.row1.x = col0.y; this.row1.y = col1.y; this.row1.z = col2.y;
  this.row2.x = col0.z; this.row2.y = col1.z; this.row2.z = col2.z;
}

/// setting all components of the matrix to 0.0
inline Mat33.setNull!() {
  Vec3 nullVec3(Scalar(), Scalar(), Scalar());
  this.row0 = this.row1 = this.row2 = nullVec3;
}

/// setting this matrix to the identity matrix
inline Mat33.setIdentity!() {
  this.setNull();
  this.setDiagonal(Scalar(1.0));
}

/// setting the diagonal components of 
/// this matrix to a scalar
inline Mat33.setDiagonal!(in Scalar v) {
  this.row0.x = this.row1.y = this.row2.z = v;
}

/// setting the diagonal components of this
/// matrix to the components of a vector
inline Mat33.setDiagonal!(in Vec3 v) {
  this.row0.x = v.x;
  this.row1.y = v.y;
  this.row2.z = v.z;
}

/// Returns true if this matrix is the same as another one
inline Boolean Mat33.equal(in Mat33 other) {
  return this.row0.equal( other.row0 ) && this.row1.equal( other.row1 ) && this.row2.equal( other.row2 );
}

/// Returns true if this matrix is almost equal to the given matrix within the provided precision range
inline Boolean Mat33.almostEqual(
  in Mat33 other,
  in Scalar precision
  ) {
  return this.row0.almostEqual( other.row0, precision ) && this.row1.almostEqual( other.row1, precision ) && this.row2.almostEqual( other.row2, precision );
}

/// Returns true if this matrix is almost the same as another one
/// (using a default precision)
inline Boolean Mat33.almostEqual(in Mat33 other) {
  return this.almostEqual(other, PRECISION);
}

/// Returns true if the matrix is orthogonal (i.e. its transpose is its inverse)
inline Boolean Mat33.orthogonal() {
  Mat33 identity; identity.setIdentity();
  return this.multiply( this.transpose() ).almostEqual( identity );
}

/// Equals operator
inline Boolean == (Mat33 a, Mat33 b) {
  return a.equal(b);
}

/// Not equals operator
inline Boolean != (Mat33 a, Mat33 b) {
  return !a.equal(b);
}

/// Hash for this value
inline UInt32 Mat33.hash() {
  return this.row0.hash() ^ this.row1.hash() ^ this.row2.hash();
}

/// Returns the addition of two matrices
inline Mat33 + (Mat33 a, Mat33 b) {
  return Mat33( a.row0 + b.row0, a.row1 + b.row1, a.row2 + b.row2 );
}

/// Adds another matrix to this one
inline Mat33. += (Mat33 other) {
  this = this + other;
}

/// Returns the subtraction of two matrices
inline Mat33 - (Mat33 a, Mat33 b) {
  return Mat33( a.row0 - b.row0, a.row1 - b.row1, a.row2 - b.row2 );
}

/// Subtracts another matrix from this one
inline Mat33. -= (Mat33 other) {
  this = this - other;
}

/// Returns the product of two matrices
/// \dfgPresetDefault right {"row0": {"x": 1, "y": 0, "z": 0}, "row1": { "x": 0, "y": 1, "z": 0}, "row2": { "x": 0, "y": 0, "z": 1} }
function Mat33 * (Mat33 left, Mat33 right) {
  Mat33 result;

  result.row0.x = left.row0.x * right.row0.x + left.row0.y * right.row1.x + left.row0.z * right.row2.x;
  result.row0.y = left.row0.x * right.row0.y + left.row0.y * right.row1.y + left.row0.z * right.row2.y;
  result.row0.z = left.row0.x * right.row0.z + left.row0.y * right.row1.z + left.row0.z * right.row2.z;

  result.row1.x = left.row1.x * right.row0.x + left.row1.y * right.row1.x + left.row1.z * right.row2.x;
  result.row1.y = left.row1.x * right.row0.y + left.row1.y * right.row1.y + left.row1.z * right.row2.y;
  result.row1.z = left.row1.x * right.row0.z + left.row1.y * right.row1.z + left.row1.z * right.row2.z;

  result.row2.x = left.row2.x * right.row0.x + left.row2.y * right.row1.x + left.row2.z * right.row2.x;
  result.row2.y = left.row2.x * right.row0.y + left.row2.y * right.row1.y + left.row2.z * right.row2.y;
  result.row2.z = left.row2.x * right.row0.z + left.row2.y * right.row1.z + left.row2.z * right.row2.z;

  return result;
}

/// Returns the product of a matrix and a Vec3
inline Vec3 * (Mat33 mat33, Vec3 vec3) {
  return Vec3(
    mat33.row0.x * vec3.x + mat33.row0.y * vec3.y + mat33.row0.z * vec3.z,
    mat33.row1.x * vec3.x + mat33.row1.y * vec3.y + mat33.row1.z * vec3.z,
    mat33.row2.x * vec3.x + mat33.row2.y * vec3.y + mat33.row2.z * vec3.z
  );
}

/// Returns the product of a matrix and a scalar
/// \dfgPresetDefault s 1
inline Mat33 * (Mat33 mat33, Scalar s) {
  return Mat33( mat33.row0 * s, mat33.row1 * s, mat33.row2 * s );
}

/// Returns the product of a scalar and a matrix
/// \dfgPresetDefault s 1
inline Mat33 * (Scalar s, Mat33 mat33) {
  return Mat33( mat33.row0 * s, mat33.row1 * s, mat33.row2 * s );
}

/// Multiplies this matrix with another one
/// \dfgPresetDefault other {"row0": {"x": 1, "y": 0, "z": 0}, "row1": { "x": 0, "y": 1, "z": 0}, "row2": { "x": 0, "y": 0, "z": 1} }
inline Mat33. *= (Mat33 other) {
  this = this * other;
}

/// Multiplies this matrix with a scalar
/// \dfgPresetDefault other 1
inline Mat33. *= (Scalar other) {
  this = this * other;
}

/// Returns the division of a matrix and a scalar
/// \dfgPresetDefault s 1
inline Mat33 / (Mat33 mat33, Scalar s) {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( s ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( s, "Mat33.divide" );
  return mat33 * (1.0 / s);
}

/// Divides this matrix by a scalar
/// \dfgPresetDefault other 1
inline Mat33. /= (Scalar other) {
  this = this / other;
}

/// Overload method for the add operator
inline Mat33 Mat33.add(Mat33 other) {
  return this + other;
}

/// Overload method for the subtract operator
inline Mat33 Mat33.subtract(Mat33 other) {
  return this - other;
}

/// Overload method for the multiply operator
/// \dfgPresetDefault other {"row0": {"x": 1, "y": 0, "z": 0}, "row1": { "x": 0, "y": 1, "z": 0}, "row2": { "x": 0, "y": 0, "z": 1}}
inline Mat33 Mat33.multiply(Mat33 other) {
  return this * other;
}

/// Returns the product of this matrix and a scalar
/// \dfgPresetDefault other 1
inline Mat33 Mat33.multiplyScalar(Scalar other) {
  return this * other;
}

/// Returns the product of this matrix and a vector
inline Vec3 Mat33.multiplyVector(Vec3 other) {
  return this * other;
}

/// Returns the division of this matrix and a scalar
/// \dfgPresetDefault other 1
inline Mat33 Mat33.divideScalar(Scalar other) {
  return this / other;
}

/// Returns the determinant of this matrix
inline Scalar Mat33.determinant() {
  return this.row0.x * this.row1.y * this.row2.z
  + this.row0.y * this.row1.z * this.row2.x
  + this.row0.z * this.row1.x * this.row2.y
  - this.row0.x * this.row1.z * this.row2.y
  - this.row0.y * this.row1.x * this.row2.z
  - this.row0.z * this.row1.y * this.row2.x;
}

/// Returns the adjoint matrix of this matrix
inline Mat33 Mat33.adjoint() {
  Mat33 result;

  result.row0.x = this.row1.y * this.row2.z - this.row1.z * this.row2.y;
  result.row0.y = this.row0.z * this.row2.y - this.row0.y * this.row2.z;
  result.row0.z = this.row0.y * this.row1.z - this.row0.z * this.row1.y;

  result.row1.x = this.row1.z * this.row2.x - this.row1.x * this.row2.z;
  result.row1.y = this.row0.x * this.row2.z - this.row0.z * this.row2.x;
  result.row1.z = this.row0.z * this.row1.x - this.row0.x * this.row1.z;

  result.row2.x = this.row1.x * this.row2.y - this.row1.y * this.row2.x;
  result.row2.y = this.row0.y * this.row2.x - this.row0.x * this.row2.y;
  result.row2.z = this.row0.x * this.row1.y - this.row0.y * this.row1.x;

  return result;
}

/// Returns the inverse matrix of this matrix
inline Mat33 Mat33.inverse() {
  Scalar det = this.determinant();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( det ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( det, "Mat33.inverse" );
  return this.adjoint() / det;
}
inline Mat33 Mat33.inverse_safe() {
  Scalar det = this.determinant();
  if( Math_badDivisor( det ) )
    return this.adjoint();
  return this.adjoint() / det;
}

/// Returns the transposed matrix of this matrix
inline Mat33 Mat33.transpose() {
  Mat33 result(
    this.row0.x, this.row1.x, this.row2.x,
    this.row0.y, this.row1.y, this.row2.y,
    this.row0.z, this.row1.z, this.row2.z);
  return result;
}

/// interpolates two matrices spherically (slerp)
/// given a scalar blend value (0.0 to 1.0).
function Mat33 Mat33.sphericalLinearInterpolate(in Mat33 m2, in Scalar t) {
  Quat q1 = this;
  Quat q2 = m2;
  q1.setUnit();
  q2.setUnit();
  return q1.sphericalLinearInterpolate(q2, t).toMat33();
}

/// \dfgPresetColor Color(99, 129, 92)
/// \dfgPresetFolder Random
/// \dfgCreateArrayPreset false
/// \dfgPresetDefault min 0.0
/// \dfgPresetDefault min 1.0
inline Mat33 mathRandomMat33(Size seed, Size index, Float32 min, Float32 max) {
  return mathRandomQuat(seed, index, min, max).toMat33();
}

/// Sets from Vec.
inline Mat33(Vec vec) {
  this.set(vec);
}

/// Sets from Vec.
inline Mat33.set!(Vec vec) {
  this.row0.x = vec.get(0);
  this.row0.y = vec.get(1);
  this.row0.z = vec.get(2);
  this.row1.x = vec.get(3);
  this.row1.y = vec.get(4);
  this.row1.z = vec.get(5);
  this.row2.x = vec.get(6);
  this.row2.y = vec.get(7);
  this.row2.z = vec.get(8);
}

/// Converts to Vec.
inline Vec Mat33.toVec() {
  Vec vec(4);
  vec.set(0, this.row0.x);
  vec.set(1, this.row0.y);
  vec.set(2, this.row0.z);
  vec.set(3, this.row1.x);
  vec.set(4, this.row1.y);
  vec.set(5, this.row1.z);
  vec.set(6, this.row2.x);
  vec.set(7, this.row2.y);
  vec.set(8, this.row2.z);
  return vec;
}


/**
  \internal
  QR decomposition of the matrix using the Householder reflections method.
  This is used by the Mat44 -> Xfo conversion to extract shearing.
  \note This operation can have a relatively high numerical imprecision. For example, \
        for a Float32 Mat33, it is often more than 1e-5. The values of the lower triangle \
        of R, which in theory should be 0, can be used as an indication of the 'epsilon', \
        eg: abs(shearScale.row1.x) + abs(shearScale.row2.x) + abs(shearScale.row2.y) .
  \param Q orthogonal matrix
  \param R upper triangular matrix
  \param silent If true, won't report Math warnings
  \return True if succeeded
*/
Boolean Mat33.QRDecompose( out Mat33 Q, out Mat33 R ) {
  Boolean success = true;

  // Column 0
  Vec3 x0( this.row0.x, this.row1.x, this.row2.x );

  Scalar alpha = x0.length();
  if( this.row0.x > 0 )
    alpha = -alpha;

  // v = u / ||u|| ; u = x +- alpha*e
  // Note: if the vector is almost zero length, then it's not an error, but simple ambiguity (no shearing); any axis is good
  Vec3 v0 = Vec3( x0.x + alpha, x0.y, x0.z ).unit_safe();

  // Q = I - 2 * (v * vt)
  Vec3 m2V0 = -2.0f * v0;
  Mat33 Q0( 1+m2V0.x * v0.x,   m2V0.x * v0.y,   m2V0.x * v0.z,
              m2V0.y * v0.x, 1+m2V0.y * v0.y,   m2V0.y * v0.z,
              m2V0.z * v0.x,   m2V0.z * v0.y, 1+m2V0.z * v0.z );

  Mat33 Q0A = Q0 * this;

  // Column 1, for the lower-right submatrix
  Vec2 x1( Q0A.row1.y, Q0A.row2.y);

  alpha = x1.length();
  if( this.row1.y > 0 )
    alpha = -alpha;

  // v = u / ||u|| ; u = x +- alpha*e
  // Note: if the vector is almost zero length, then it's not an error, but simple ambiguity (no shearing); any axis is good
  Vec2 v1 = Vec2( x1.x + alpha, x1.y ).unit_safe();

  // Q = I - 2 * (v * vt)
  // We compute only the lower right submatrix; other parts are identity
  // and we will optimize the mult.
  Vec2 m2V1 = -2.0f * v1;
  Mat22 Q1lowerRight( 1 + m2V1.x * v1.x,     m2V1.x * v1.y,
                                      m2V1.y * v1.x, 1 + m2V1.y * v1.y );
  // Q = Q0T * Q1T = (Q1 * Q0)T
  // then: QT = Q1 * Q0
  // Optimized version of matrix mult knowing that 1st row and column of Q1 is identity:
  Mat33 QT(                                                         Q0.row0.x,                                                         Q0.row0.y,                                                         Q0.row0.z, 
                        Q1lowerRight.row0.x * Q0.row1.x + Q1lowerRight.row0.y * Q0.row2.x, Q1lowerRight.row0.x * Q0.row1.y + Q1lowerRight.row0.y * Q0.row2.y, Q1lowerRight.row0.x * Q0.row1.z + Q1lowerRight.row0.y * Q0.row2.z,
                        Q1lowerRight.row1.x * Q0.row1.x + Q1lowerRight.row1.y * Q0.row2.x, Q1lowerRight.row1.x * Q0.row1.y + Q1lowerRight.row1.y * Q0.row2.y, Q1lowerRight.row1.x * Q0.row1.z + Q1lowerRight.row1.y * Q0.row2.z );

  R = QT * this;
  Q = QT.transpose();
  return success;
}

/// Decompose the Mat33 into the scaling, shearing and rotation 
/// components and return them in the provided io args.
/// Returns true if and only if the decomposition was lossless (and there were no issues)
/// \param scaling Returns the decomposed scaling value of the Mat44
/// \param shearing Returns the decomposed shearing value of the Mat44, as {x shearing along y, x shearing along z, y shearing along z}.
/// \param rotation Returns the decomposed rotation value of the Mat44
/// \param silent If true, won't report Math warnings
/// \param additionalLossChecks If true, will perform additional checks for the the losses during the conversion
Boolean Mat33.decompose?(
  out Vec3 scaling,
  out Vec3 shearing,
  out Mat33 rotation,
  in Boolean silent,
  in Boolean additionalLossChecks
)
{
  // A Mat33 is a pure rotation if and only if its determinant is 1 and it is orthogonal
  Boolean success = true;

  // Get the QR decomposition, which will give the rotation and shear+scale components
  Mat33 shearScale;
  if( !this.QRDecompose( rotation, shearScale ) )
    success = false;

  scaling.x = shearScale.row0.x;
  scaling.y = shearScale.row1.y;
  scaling.z = shearScale.row2.z;

  // Avoid accumulating scaling from precision errors
  // Also, collect sign information (double neg scaling -> single rot scaling)
  Boolean negScX, negScY, negScZ;
  Size negScSum;

  Scalar absScal = scaling.x;
  if( scaling.x < 0 ) {
    absScal = -scaling.x;
    negScX = true;
    negScSum++;
  }
  if( absScal > 1.0f-PRECISION && absScal < 1.0f+PRECISION )
    scaling.x = negScX ? -1.0f : 1.0f;

  if( absScal < DIVIDEPRECISION )
  {
    success = false;
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )//Perf: check first to avoid building the report string
      Math_reportBadDivisor( scaling.x, "Mat44.decompose: Matrix is singular" );
  }

  absScal = scaling.y;
  if( scaling.y < 0 ) {
    absScal = -scaling.y;
    negScY = true;
    negScSum++;
  }
  if( absScal > 1.0f-PRECISION && absScal < 1.0f+PRECISION )
    scaling.y = negScY ? -1.0f : 1.0f;

  if( absScal < DIVIDEPRECISION )
  {
    success = false;
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )//Perf: check first to avoid building the report string
      Math_reportBadDivisor( scaling.y, "Mat44.decompose: Matrix is singular" );
  }

  absScal = scaling.z;
  if( scaling.z < 0 ) {
    absScal = -scaling.z;
    negScZ = true;
    negScSum++;
  }
  if( absScal > 1.0f-PRECISION && absScal < 1.0f+PRECISION )
    scaling.z = negScZ ? -1.0f : 1.0f;

  if( absScal < DIVIDEPRECISION )
  {
    success = false;
    if( Fabric_Guarded && !Fabric_OnGPU && !silent )//Perf: check first to avoid building the report string
      Math_reportBadDivisor( scaling.z, "Mat44.decompose: Matrix is singular" );
  }

  // Extract the shearing by removing the scaling
  shearing.x = shearScale.row0.y / scaling.y;

  Scalar invScalingZ = 1 / scaling.z;
  shearing.y = shearScale.row0.z * invScalingZ;
  shearing.z = shearScale.row1.z * invScalingZ;

  // The QR decomposition method tends to cause computation imprecision
  // of more than 1e-5 for Float32; try to detect and avoid shearing due to imprecisions.
  // Use the lower triangle of the R matrix, which should be 0 but is actually
  // epsilon, to get a better idea of the possible imprecision amplitude.
  Scalar shearingEps = PRECISION + ( abs(shearScale.row1.x) + abs(shearScale.row2.x) + abs(shearScale.row2.y) ) * 2;

  // Avoid accumulating shearing from precision errors
  if( abs(shearing.x) < shearingEps )
    shearing.x = 0;

  if( abs(shearing.y) < shearingEps )
    shearing.y = 0;

  if( abs(shearing.z) < shearingEps )
    shearing.z = 0;
  
  // Negative scales on 2 axis is the same as a 180 deg rot, and negative scales on 3 axis is the same as a 180 deg rot + negative scale on 1 axis.
  // Transfer the 2 axis negative scaling from shearScale matrix rows to rotation matrix columns, which is equivalent maths wise.
  if( negScSum >= 2 ) {

    // The matrices here are the equivalent of [Rot][Sh][Sc]
    // where Sc is a diagonal matrix, and Sh is an identity + upper triangular values set.
    // If we extract the negative signs of Sc in a [Sign] diagonal matrix, we have:
    // [Rot][Sh][Sign][Sc']
    // The Sign matrix has to be moved passed the [Sh] matrix before being multiplied/baked in the [Rot], we we have:
    // [Rot][Sign][Sh'][Sc']
    //
    // First, the [Sh*Sign] multiplication will result in the following:
    // - column 0 is multiplied by Sign.x
    // - column 1 is multiplied by Sign.y
    // - column 2 is multiplied by Sign.z
    //
    // Then, we need to modify that in order to have [Sign][Sh'].
    // In order to get this:
    // - row 0 is multiplied by Sign.x
    // - row 1 is multiplied by Sign.y
    // - row 2 is multiplied by Sign.z
    //
    // So, if we combine both of these, it means that:
    // - shearing.x' = sh'.row0.y = shearing.x * Sign.x * Sign.y
    // - shearing.y' = sh'.row0.z = shearing.y * Sign.x * Sign.z
    // - shearing.z' = sh'.row1.z = shearing.z * Sign.z * Sign.y

    if( negScX ) {
      scaling.x = -scaling.x;
      shearing.x = -shearing.x;
      shearing.y = -shearing.y;

      rotation.row0.x = -rotation.row0.x;
      rotation.row1.x = -rotation.row1.x;
      rotation.row2.x = -rotation.row2.x;
    }

    if( negScY ) {
      scaling.y = -scaling.y;
      shearing.x = -shearing.x;
      shearing.z = -shearing.z;

      rotation.row0.y = -rotation.row0.y;
      rotation.row1.y = -rotation.row1.y;
      rotation.row2.y = -rotation.row2.y;
    }

    if( negScZ && negScSum != 3 ) {
      scaling.z = -scaling.z;
      shearing.y = -shearing.y;
      shearing.z = -shearing.z;

      rotation.row0.z = -rotation.row0.z;
      rotation.row1.z = -rotation.row1.z;
      rotation.row2.z = -rotation.row2.z;
    }
  }

  if( additionalLossChecks )
  {
    // The determinant must be 1.0
    Scalar det = rotation.determinant();
    if( abs( abs( det ) - 1.0 ) > PRECISION ) {
        success = false;
        if( !silent )
          Math_reportWarning( "Mat44.decompose: Determinant (= " + det + ") is not 1.0 (not a pure rotation matrix)" );
    }
  }

  return success;
}


/// Builds a shearing matrix from a sharing vector, composed
/// from {x shearing along y, x shearing along z, y shearing along z}
inline Mat33 BuildShearingMat33( Vec3 shearing ) {
  Mat33 mat;
  mat.row0.y = shearing.x;
  mat.row0.z = shearing.y;
  mat.row1.z = shearing.z;
  return mat;
}

/// Builds a shearing matrix from a sharing vector, composed
/// from {x shearing along y, x shearing along z, y shearing along z}
inline Mat33 BuildShearScaleMat33( Vec3 shearing, Vec3 scaling ) {
  return Mat33(
    scaling.x, shearing.x * scaling.y, shearing.y * scaling.z,
            0,              scaling.y, shearing.z * scaling.z,
            0,                      0,              scaling.z );
}

