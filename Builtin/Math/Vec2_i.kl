//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

/**
The :kl-ref:`Vec2_i` type represents a vector with 2 components. The :kl-ref:`Vec2_i` is also used as the row type for the :kl-ref:`Mat22`.

\rst
  .. kl-example:: Vec2_i

    Vec2_i v(0.0, 0.0);

\endrst
\seealso Vec3, Vec4
\dfgTypeColor Color(255, 242, 0)
\dfgPresetColor Color(99, 129, 92)
*/
struct Vec2_i
{
  SInt32 x;
  SInt32 y;
};

/// Default constructor
inline Vec2_i() {
}

/// Constructor from scalar components
inline Vec2_i(SInt32 x, SInt32 y) {
  this.set(x, y);
}

/// Constructor with same scalar for all components
inline Vec2_i(SInt32 value) {
  this.set(value);
}

/// Setter from scalar components
inline Vec2_i.set!(SInt32 x, SInt32 y) {
  this.x = x;
  this.y = y;
}

/// Setter from same scalar for all components
inline Vec2_i.set!(SInt32 value) {
  this.x = value;
  this.y = value;
}

/// Setter from (standard/external) float32 array and an offset
inline Vec2_i.set!(Float32 v<>, UInt32 o) {
  if(v.size() >= 2 + o) {
    this.x = v[o + 0];
    this.y = v[o + 1];
  }
}

/// Getter as external float32 array and an offset
inline Vec2_i.get(io Float32 v<>, UInt32 o) {
  if(v.size() >= 2 + o) {
    v[o + 0] = Float32(this.x);
    v[o + 1] = Float32(this.y);
  }
}

/// Getter as float32 array and an offset
inline Vec2_i.get(io Float32 v[], UInt32 o) {
  if(v.size() < 2 + o)
    v.resize(2 + o);
  v[o + 0] = Float32(this.x);
  v[o + 1] = Float32(this.y);
}

/// Setter from (standard/external) float64 array and an offset
inline Vec2_i.set!(Float64 v<>, UInt32 o) {
  if(v.size() >= 2 + o) {
    this.x = Float32(v[o + 0]);
    this.y = Float32(v[o + 1]);
  }
}

/// Getter as external float64 array and an offset
inline Vec2_i.get(io Float64 v<>, UInt32 o) {
  if(v.size() >= 2 + o) {
    v[o + 0] = this.x;
    v[o + 1] = this.y;
  }
}

/// Getter as float64 array and an offset
inline Vec2_i.get(io Float64 v[], UInt32 o) {
  if(v.size() < 2 + o)
    v.resize(2 + o);
  v[o + 0] = this.x;
  v[o + 1] = this.y;
}

/// Setter from (standard/external) float32 array
inline Vec2_i.set!(Float32 v<>) {
  this.set(v, 0);
}

/// Getter as external float32 array
inline Vec2_i.get(io Float32 v<>) {
  this.get(v, 0);
}

/// Getter as float32 array
inline Vec2_i.get(io Float32 v[]) {
  this.get(v, 0);
}

/// Setter from (standard/external) float64 array
inline Vec2_i.set!(Float64 v<>) {
  this.set(v, 0);
}

/// Getter as external float64 array
inline Vec2_i.get(io Float64 v<>) {
  this.get(v, 0);
}

/// Getter as float64 array
inline Vec2_i.get(io Float64 v[]) {
  this.get(v, 0);
}

/// Sets from Vec.
inline Vec2_i(Vec_i vec) {
  this.set(vec);
}

/// Sets from Vec.
inline Vec2_i.set!(Vec_i vec) {
  this.x = vec.get(0);
  this.y = vec.get(1);
}

/// Converts to Vec.
inline Vec_i Vec2_i.toVec() {
  Vec_i vec(2);
  vec.set(0, this.x);
  vec.set(1, this.y);
  return vec;
}

/// Sets all components of this vec to 0.0
inline Vec2_i.setNull!() {
  this.x = this.y = SInt32();
}

/// Returns true if this vector is the same as another one
inline Boolean Vec2_i.equal(in Vec2_i other) {
  return this.x == other.x && this.y == other.y;
}

/// Returns true if this vector is the same as another one
/// (given a precision)
inline Boolean Vec2_i.almostEqual(in Vec2_i other, in SInt32 precision) {
  return
      (abs(this.x - other.x) < precision) &&
      (abs(this.y - other.y) < precision);
}

/// Returns true if this vector is the same as another one
/// (using a default precision)
inline Boolean Vec2_i.almostEqual(in Vec2_i other) {
  return this.almostEqual(other, PRECISION);
}

/// Returns the component of this vector by index
inline SInt32 Vec2_i.component( Size i ) {
  if(i == 0)
    return this.x;
  else
    return this.y;
}

/// Sets the component of this vector by index
inline Vec2_i.setComponent!( Size i, SInt32 v ) {
  if(i == 0)
    this.x = v;
  else
    this.y = v;
}

/// Equals operator
inline Boolean == (Vec2_i a, Vec2_i b) {
  return a.x == b.x && a.y == b.y;
}

/// Not equals operator
inline Boolean != (Vec2_i a, Vec2_i b) {
  return a.x != b.x || a.y != b.y;
}

/// Hash for this value
inline UInt32 Vec2_i.hash() {
  return this.x.hash() ^ this.y.hash();
}

/// unary -
inline Vec2_i -Vec2_i() {
  return Vec2_i(-this.x, -this.y);
}

/// Adds to vectors
inline Vec2_i + (Vec2_i a, Vec2_i b) {
  return vecAdd(a, b);
}

/// Adds a vector to this one
inline Vec2_i. += (Vec2_i other) {
  this = this + other;
}

/// Subtracts two vectors
inline Vec2_i - (Vec2_i a, Vec2_i b) {
  return vecSub(a, b);
}

/// Subtracts a vector from this one
inline Vec2_i. -= (Vec2_i other) {
  this = this - other;
}

/// Multiplies a scalar and a vector
/// \dfgPresetDefault a 1
inline Vec2_i * (SInt32 a, Vec2_i b) {
  return vecMul(a, b);
}

/// Multiplies a vector and a scalar
/// \dfgPresetDefault b 1
inline Vec2_i * (Vec2_i a, SInt32 b) {
  return vecMul(a, b);
}

/// Multiplies two vectors
/// \dfgPresetDefault b {"x": 1, "y": 1}
inline Vec2_i * (Vec2_i a, Vec2_i b) {
  return vecMul(a, b);
}

/// Multiplies this vector with a scalar
/// \dfgPresetDefault other 1
inline Vec2_i. *= (SInt32 other) {
  this = this * other;
}

/// Multiplies this vector with another one
/// \dfgPresetDefault other {"x": 1, "y": 1}
inline Vec2_i. *= (Vec2_i other) {
  this = this * other;
}

/// Divides two vectors
/// \dfgPresetDefault b {"x": 1, "y": 1}
inline Vec2_i / (Vec2_i a, Vec2_i b) {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( b.x ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( b.x, "Vec2_i.divide: b.x" );
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( b.y ) )
    Math_reportBadDivisor( b.y, "Vec2_i.divide: b.y" );
  return vecDiv(a, b);
}

/// Divides a vector by a scalar
/// \dfgPresetDefault b 1
inline Vec2_i / (Vec2_i a, SInt32 b) {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( b ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( b, "Vec2_i.divide" );
  return vecDiv(a, b);
}

/// Divides this vector with a scalar
/// \dfgPresetDefault other 1
inline Vec2_i. /= (SInt32 other) {
  this = this / other;
}

/// Divides this vector with another one
/// \dfgPresetDefault other {"x": 1, "y": 1}
inline Vec2_i. /= (Vec2_i other) {
  this = this / other;
}

/// Overload method for the add operator
inline Vec2_i Vec2_i.add(Vec2_i other) {
  return this + other;
}

/// Overload method for the subtract operator
inline Vec2_i Vec2_i.subtract(Vec2_i other) {
  return this - other;
}

/// Overload method for the multiply operator
/// \dfgPresetDefault other {"x": 1, "y": 1}
inline Vec2_i Vec2_i.multiply(Vec2_i other) {
  return this * other;
}

/// Overload method for the divide operator
/// \dfgPresetDefault other {"x": 1, "y": 1}
inline Vec2_i Vec2_i.divide(Vec2_i other) {
  return this / other;
}

/// Returns the product of this vector and a scalar
/// \dfgPresetDefault other 1
inline Vec2_i Vec2_i.multiplySInt32(SInt32 other) {
  return this * other;
}

/// Returns the division of this vector and a scalar
/// \dfgPresetDefault other 1
inline Vec2_i Vec2_i.divideSInt32(SInt32 other) {
  return this / other;
}

/// Returns the negated version of this vector
inline Vec2_i Vec2_i.negate() {
  return Vec2_i(-this.x, - this.y);
}

/// Returns the inversed version of this vector
inline Vec2_i Vec2_i.inverse() {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( this.x ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( this.x, "Vec2_i.inverse: this.x" );
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( this.y ) )
    Math_reportBadDivisor( this.y, "Vec2_i.inverse: this.y" );
  return Vec2_i(1.0/this.x, 1.0/this.y);
}

/// Returns the dot product of this vector and another one
inline SInt32 Vec2_i.dot(Vec2_i other) {
  return this.x * other.x + this.y * other.y;
}

/// Returns the cross product of this vector and another one
inline SInt32 Vec2_i.cross(in Vec2_i other) {
  return this.x * other.y - this.y * other.x;
}

/// Returns the squared length of this vector
inline SInt32 Vec2_i.lengthSquared() {
  return this.dot(this);
}

/// Returns the length of this vector
inline SInt32 Vec2_i.length() {
  return sqrt(this.lengthSquared());
}

/// Returns the unit vector of this one, throws and exception if almost zero length
inline Vec2_i Vec2_i.unit() {
  SInt32 n = this.length();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Vec2_i.unit" );
  return this / n;
}

/// Returns the unit vector of this one, with an arbitrary value if almost zero length
inline Vec2_i Vec2_i.unit_safe() {
  SInt32 n = this.length();
  if( !Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    return this / n;
  else
    return Vec2_i(0,1);
}

/// Sets this vector to its unit vector
/// and returns its previous length
inline SInt32 Vec2_i.setUnit!() {
  SInt32 n = this.length();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Vec2_i.setUnit" );
  this /= n;
  return n;
}

inline Vec2_i.normalize!() {
  this.setUnit();
}

/// clamps this vector per component by 
/// a min and max vector
inline Vec2_i Vec2_i.clamp(in Vec2_i min, in Vec2_i max) {
  return Vec2_i(
    (this.x < min.x ? min.x : (this.x > max.x ? max.x : this.x)),
    (this.y < min.y ? min.y : (this.y > max.y ? max.y : this.y))
  );
}

/// Returns the angle (in radians) of this vector
/// to another one
/// \note expects both vectors to be units (else use angleTo)
inline SInt32 Vec2_i.unitsAngleTo(in Vec2_i other) {
  SInt32 acosAngle = Math_clamp(this.dot(other), -1.0, 1.0);
  return acos(acosAngle);
}

/// Returns the angle (in radians) of this vector
/// to another one
inline SInt32 Vec2_i.angleTo(in Vec2_i other) {
  return this.unit().unitsAngleTo(other.unit());
}

/// Returns the distance of this vector to another one
inline SInt32 Vec2_i.distanceTo(in Vec2_i other) {
  return (this - other).length();
}

/// Linearly interpolates this vector with another one
/// based on a scalar blend value (0.0 to 1.0)
inline Vec2_i Vec2_i.linearInterpolate(in Vec2_i other, in SInt32 t) {
  return this + ((other - this) * t);
}

/// Turns the vector provided a rotation in radians
inline Vec2_i Vec2_i.rotate(SInt32 radians) {
  SInt32 c = cos(radians);
  SInt32 s = sin(radians);
  Vec2_i result;
  result.x = this.x * c - this.y * s;
  result.y = this.x * s + this.y * c;
  return result;
}

/// Returns the distance of this vector to a line defined
/// by two points on the line
inline SInt32 Vec2_i.distanceToLine(in Vec2_i lineP0, in Vec2_i lineP1) {
  Vec2_i v, w, Pb;
  SInt32 c1, c2, b;
  v = lineP1 - lineP0;
  w = this - lineP0;

  c1 = w.dot(v);
  c2 = v.dot(v);
  if(c2 == 0.0){
    return this.distanceTo(lineP0);
  }
  b = c1 / c2;

  Pb = lineP0 + b * v;
  return this.distanceTo(Pb);
}

/// Returns the distance of this vector to a line segment defined
/// by the start and end points of the line segment
inline SInt32 Vec2_i.distanceToSegment(in Vec2_i segmentP0, in Vec2_i segmentP1) {
  Vec2_i v, w, Pb;
  SInt32 c1, c2, b;
  v = segmentP1 - segmentP0;
  w = this - segmentP0;

  c1 = w.dot(v);
  if (c1 <= 0) {
    return this.distanceTo(segmentP0);
  }
  c2 = v.dot(v);
  if (c2 <= c1) {
    return this.distanceTo(segmentP1);
  }
  b = c1 / c2;
  Pb = segmentP0 + b * v;
  return this.distanceTo(Pb);
}

/// Returns the minimal distance of this vector to the three line segments formed by a triangle.
/// \internal
inline SInt32 Vec2_i.minDistanceToTriangleSegments(in Vec2_i a, in Vec2_i b, in Vec2_i c) {
  SInt32 ab = this.distanceToSegment(a, b);
  SInt32 bc = this.distanceToSegment(b, c);
  SInt32 ac = this.distanceToSegment(a, c);
  if(ab < bc)
    return ab < ac ? ab : ac;
  return bc < ac ? bc : ac;
}

/// dist3D_Line_to_Line():
///    Input:  two 3D lines L1 and L2
///    Return: the shortest distance between L1 and L2
/// \dfgPresetOmit
inline SInt32 distanceFromLineToLine(
  in Vec2_i l1_p0, in Vec2_i l1_p1,
  in Vec2_i l2_p0, in Vec2_i l2_p1,
  out SInt32 l1_t, out SInt32 l2_t
) {
  Vec2_i u, v, w, dP;
  SInt32 a, b, c, d, e, D;
  u = l1_p1 - l1_p0;
  v = l2_p1 - l2_p0;
  w = l1_p0 - l2_p0;
  a = u.dot(u); // always >= 0
  b = u.dot(v);
  c = v.dot(v); // always >= 0
  d = u.dot(w);
  e = v.dot(w);
  if(a == 0.0 && c == 0.0){
    return l1_p0.distanceTo(l2_p0);
  }
  if(a == 0.0){
    return l1_p0.distanceToLine(l2_p0, l2_p1);
  }
  if(c == 0.0){
    return l2_p0.distanceToLine(l1_p0, l1_p1);
  }
  D = a * c - b * b; // always >= 0

  // com_pute the line _parameters of the two closest Vec2_is
  if (D < 0.001) {
    // the lines are almost parallel
    l1_t = 0.0;
    if (b > c) {
      // use the largest denominator
      l2_t = d / b;
    }else {
      l2_t = e / c;
    }
  }
  else {
    l1_t = (b * e - c * d) / D;
    l2_t = (a * e - b * d) / D;
  }
  // get the difference of the two closest Vec2_is
  dP = w + (l1_t * u) - (l2_t * v);

  return dP.length(); /// Return the closest distance
}

/// \internal
/// Smooth Hermite interpolation of a Vec2 components between 0 and 1 when edge0 < x < edge1.
inline Vec2_i Math_smoothstep(in Vec2_i edge0, in Vec2_i edge1, in Vec2_i x){
  Vec2_i result;
  result.x = Math_smoothstep(edge0.x, edge1.x, x.x);
  result.y = Math_smoothstep(edge0.y, edge1.y, x.y);
  return result;  
}

/// Returns the minimum of two Vec2_i values
/// \dfgPresetColor Color(99, 129, 92)
inline Vec2_i Math_min(in Vec2_i val1, in Vec2_i val2){
  Vec2_i result;
  result.x = Math_min(val1.x, val2.x);
  result.y = Math_min(val1.y, val2.y);
  return result;
}

/// Returns the minimum of two Vec2_i values
/// \dfgPresetColor Color(99, 129, 92)
inline Vec2_i Math_max(in Vec2_i val1, in Vec2_i val2){
  Vec2_i result;
  result.x = Math_max(val1.x, val2.x);
  result.y = Math_max(val1.y, val2.y);
  return result;
}

/// Clamps a Vec2_i value by min and max
/// \dfgPresetColor Color(99, 129, 92)
inline Vec2_i Math_clamp(in Vec2_i val, in Scalar minval, in Scalar maxval){
  Vec2_i result;
  result.x = Math_clamp(val.x, minval, maxval);
  result.y = Math_clamp(val.y, minval, maxval);
  return result;
}

/// \dfgPresetColor Color(99, 129, 92)
/// \dfgPresetFolder Random
/// \dfgCreateArrayPreset false
/// \dfgPresetDefault min 0.0
/// \dfgPresetDefault min 1.0
inline Vec2_i mathRandomVec2_i(Size seed, Size index, Float32 min, Float32 max) {
  Vec2_i result;
  result.x = mathRandomScalar(seed, index+0, min, max);
  result.y = mathRandomScalar(seed, index+1, min, max);
  return result;
}

/// Returns the barycentric coordinates of this vector in the triangle
/// formed by a, b and c such that:
/// this = result.x * a + result.y * b + (1 - (result.x + result.x)) * c;
/// \dfgPresetColor Color(99, 129, 92)
function Vec2_i Vec2_i.getBarycentricCoords(Vec2_i  a, Vec2_i  b, Vec2_i  c) {
  Vec2_i  v0 = a - c;
  Vec2_i  v1 = b - c;
  Vec2_i  v2 = this - c;

  // Compute dot products
  SInt32 dot00 = v0.dot(v0);
  SInt32 dot01 = v0.dot(v1);
  SInt32 dot02 = v0.dot(v2);
  SInt32 dot11 = v1.dot(v1);
  SInt32 dot12 = v1.dot(v2);

  // Compute barycentric coordinates
  SInt32 invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
  SInt32 u = (dot11 * dot02 - dot01 * dot12) * invDenom;
  SInt32 v = (dot00 * dot12 - dot01 * dot02) * invDenom;
  
  return Vec2_i(u, v);
}

/// Returns true if this Vec2 is inside of a triangle
/// formed by a, b and c
/// \dfgPresetColor Color(99, 129, 92)
inline Boolean Vec2_i.isInsideTriangle(Vec2_i  a, Vec2_i  b, Vec2_i  c) {
  Vec2_i uv = this.getBarycentricCoords(a, b, c);
  
  // Check if point is in triangle
  return (uv.x >= -PRECISION) && (uv.y >= -PRECISION) && (uv.x + uv.y < 1+PRECISION);
}

/// Returns true if this Vec2 is inside of a triangle and has a minimum distance defined by tolerance.
/// \dfgPresetColor Color(99, 129, 92)
function Boolean Vec2_i.isInsideTriangle(Vec2_i  a, Vec2_i  b, Vec2_i  c, SInt32 tolerance) {

  // todo: to optimize
  if(this.isInsideTriangle(a, b, c))
    return true;

  return this.minDistanceToTriangleSegments(a, b, c) <= tolerance;
}

/// \internal
function computeLineIntersectionParams(
  Vec2_i p0,
  Vec2_i p1,
  Vec2_i p2,
  Vec2_i p3,
  io Vec2_i s10,
  io Vec2_i s32,
  io SInt32 t,
  io SInt32 s
) {
  Vec2_i s02;
  SInt32 s_numer, t_numer, denom;

  s10.x = p1.x - p0.x;
  s10.y = p1.y - p0.y;
  s32.x = p3.x - p2.x;
  s32.y = p3.y - p2.y;

  denom = s10.x * s32.y - s32.x * s10.y;
  if (denom == 0.0) {
    t = SCALAR_INFINITE;
    return;
  }

  Boolean denomPositive = denom > 0;

  s02.x = p0.x - p2.x;
  s02.y = p0.y - p2.y;
  s_numer = s10.x * s02.y - s10.y * s02.x;
  if ((s_numer < 0) == denomPositive) {
    t = SCALAR_INFINITE;
    return;
  }

  t_numer = s32.x * s02.y - s32.y * s02.x;
  if((t_numer < 0) == denomPositive) {
    t = SCALAR_INFINITE;
    return;
  }

  if(((s_numer > denom) == denomPositive) || ((t_numer > denom) == denomPositive)) {
    t = SCALAR_INFINITE;
    return;
  }

  // Collision detected
  t = t_numer / denom;
  s = s_numer / denom;
}

/// Returns the intersection point of two lines formed by p0 and p1 as well as p2 and p3.
/// Returns Vec2_i(SCALAR_INFINITE) if there is no intersection.
function Vec2_i checkLineIntersection(Vec2_i p0, Vec2_i p1, Vec2_i p2, Vec2_i p3) {

  Vec2_i s10, s32;
  SInt32 t, s;

  computeLineIntersectionParams(p0, p1, p2, p3, s10, s32, t, s);

  if(t == SCALAR_INFINITE)
    return Vec2_i(SCALAR_INFINITE);

  return Vec2_i(p0.x + (t * s10.x), p0.y + (t * s10.y));
}

/// Returns the intersection point of two segments formed by p0 and p1 as well as p2 and p3.
/// Returns Vec2_i(SCALAR_INFINITE) if there is no intersection.
function Vec2_i checkSegmentIntersection(Vec2_i p0, Vec2_i p1, Vec2_i p2, Vec2_i p3) {

  Vec2_i s10, s32;
  SInt32 t, s;

  computeLineIntersectionParams(p0, p1, p2, p3, s10, s32, t, s);

  if(t == SCALAR_INFINITE)
    return Vec2_i(SCALAR_INFINITE);

  if(t < 0.0 || t > 1.0 || s < 0.0 || s > 1.0)
    return Vec2_i(SCALAR_INFINITE);

  return Vec2_i(p0.x + (t * s10.x), p0.y + (t * s10.y));
}
