//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//
/**
The :kl-ref:`Complex` type represents a complex number.
\rst
  .. kl-example:: Complex

    Complex c(-4.1, 3.14);

\endrst

\dfgTypeColor Color(128, 195, 66)
\dfgPresetColor Color(99, 129, 92)
*/

struct Complex {
  public Scalar re, im;
};

/// Construct a complex number with real value ``re``
inline Complex(Scalar re) {
  this.re = re;
}

/// Construct a complex number with real value ``re``
inline Complex(SInt32 re) {
  this.re = re;
}

/// Construct a complex number with real value ``re`` and
/// imaginary value ``im``
inline Complex(Scalar re, Scalar im) {
  this.re = re;
  this.im = im;
}

/// Append a String description of this complex number
/// to the io String ``string``
function Complex.appendDesc(io String string) {
  string += this.re;
  if (this.im != 0 ) {
    string += ",";
    string += this.im;
    string += "i";
  }
}

inline Complex +Complex() {
  return this;
}

inline Complex -Complex() {
  return Complex(-this.re, -this.im);
}

inline Complex Complex.conj() {
  return Complex(this.re, -this.im);
}

inline Complex +(Scalar lhs, Complex rhs) {
  return Complex(lhs + rhs.re, rhs.im);
}

inline Complex +(Complex lhs, Scalar rhs) {
  return Complex(lhs.re + rhs, lhs.im);
}

inline Complex.+=(Scalar that) {
  this.re += that;
}

inline Complex +(Complex lhs, Complex rhs) {
  return Complex(lhs.re + rhs.re, lhs.im + rhs.im);
}

inline Complex.+=(Complex that) {
  this.re += that.re;
  this.im += that.im;
}

inline Complex -(Scalar lhs, Complex rhs) {
  return Complex(lhs - rhs.re, rhs.im);
}

inline Complex -(Complex lhs, Scalar rhs) {
  return Complex(lhs.re - rhs, lhs.im);
}

inline Complex.-=(Scalar that) {
  this.re -= that;
}

inline Complex -(Complex lhs, Complex rhs) {
  return Complex(lhs.re - rhs.re, lhs.im - rhs.im);
}

inline Complex.-=(Complex that) {
  this.re -= that.re;
  this.im -= that.im;
}

inline Complex *(Scalar lhs, Complex rhs) {
  return Complex(lhs * rhs.re, lhs * rhs.im);
}

inline Complex *(Complex lhs, Scalar rhs) {
  return Complex(lhs.re * rhs, lhs.im * rhs);
}

inline Complex.*=(Scalar that) {
  this.re *= that;
  this.im *= that;
}

inline Complex *(Complex lhs, Complex rhs) {
  return Complex(
    lhs.re * rhs.re - lhs.im * rhs.im,
    lhs.re * rhs.im + lhs.im * rhs.re
    );
}

inline Complex.*=(Complex that) {
  Scalar re = this.re * that.re - this.im * that.im;
  Scalar im = this.re * that.im + this.im * that.re;
}

Boolean < (Complex lhs, Complex rhs) {
  return lhs.norm() < rhs.norm();
}

Boolean <= (Complex lhs, Complex rhs) {
  return lhs.norm() <= rhs.norm();
}

Boolean > (Complex lhs, Complex rhs) {
  return lhs.norm() > rhs.norm();
}

Boolean >= (Complex lhs, Complex rhs) {
  return lhs.norm() >= rhs.norm();
}

inline Scalar Complex.normSq() {
  return this.re * this.re + this.im * this.im;
}

inline Scalar Complex.lengthSquared() {
  return this.normSq();
}

/// Return the normalized value of this complex number
inline Scalar Complex.norm() {
  return sqrt(this.normSq());
}

/// Return the length of this complex number
inline Scalar Complex.length() {
  return this.norm();
}

/// Return the absolute value of this complex number
inline Scalar abs(Complex z) {
  return z.norm();
}

/// Return the inverse of this complex number
inline Complex Complex.inv() {
  Scalar normSq = this.normSq();
  return Complex(this.re / normSq, -this.im / normSq);
}

/// Return the reciprocal of this complex number
inline Complex Complex.recip() {
  return this.inv();
}

inline Complex /(Scalar lhs, Complex rhs) {
  return lhs * rhs.inv();
}

inline Complex /(Complex lhs, Scalar rhs) {
  return lhs * (1.0 / rhs);
}

inline Complex./=(Scalar that) {
  this *= 1.0 / that;
}

inline Complex /(Complex lhs, Complex rhs) {
  return lhs * rhs.inv();
}

inline Complex./=(Complex that) {
  this *= that.inv();
}

/// Returns the unit vector of this one, throws and exception if almost zero length
inline Complex Complex.unit() {
  Scalar n = this.length();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Complex.unit" );
  return this / n;
}

/// Returns the unit vector of this one, with a value of 1 if almost zero length
inline Complex Complex.unit_safe() {
  Scalar n = this.length();
  if( !Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    return this / n;
  else
    return Complex(1);
}

inline Scalar Complex.setUnit!() {
  Scalar n = this.norm();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Complex.setUnit" );
  this /= n;
  return n;
}

/// Normalize this complex number
inline Complex.normalize!() {
  this.setUnit();
}

/// Check if the value is zero
inline Boolean Complex.isZero() {
  return this.re == 0 && this.im == 0;
}

inline Boolean Complex.equal(Complex that) {
  return (this - that).isZero();
}

inline Boolean == (Complex lhs, Complex rhs) {
  return lhs.equal(rhs);
}

inline Boolean != (Complex lhs, Complex rhs) {
  return !lhs.equal(rhs);
}

/// Check if the value of the complex number is close enough zero, within
/// the specified precision
inline Boolean Complex.isAlmostZero(Scalar precision) {
 return abs(this.re) < precision && abs(this.im) < precision;
}

/// Check if the value of the complex number is equal to ``that``, within
/// the specified precision
inline Boolean Complex.almostEqual(Complex that, Scalar precision) {
  return (this - that).isAlmostZero(precision);
}

inline Boolean Complex.isAlmostZero() {
 return this.isAlmostZero(PRECISION);
}

inline Boolean Complex.almostEqual(Complex that) {
  return this.almostEqual(that, PRECISION);
}

inline UInt32 Complex.hash() {
  return this.re.hash() ^ this.im.hash();
}

/// Linearly interpolates this vector with another one
/// based on a scalar blend value (0.0 to 1.0)
inline Complex Complex.linearInterpolate(Complex that, Scalar t) {
  return this * (1 - t) + that * t;
}

/// Return the angle of the complex number from its real and
/// imaginary components
inline Scalar Complex.angle() {
  return atan2(this.im, this.re);
}

inline Boolean Math_badDivisor(Complex s){
  return s.re < DIVIDEPRECISION && s.re > -DIVIDEPRECISION
    && s.im < DIVIDEPRECISION && s.im > -DIVIDEPRECISION;
}

inline Math_reportBadDivisor(Complex s, in String contextDesc){
  Math_reportWarning( contextDesc + ": bad divisor: " + s );
}

inline Scalar signum(Scalar x) {
  if (x > 0)
    return 1;
  else if (x < 0)
    return -1;
  else
    return 0;
}

/// Return the square root of a complex number
inline Complex sqrt(Complex z) {
  Scalar n = z.norm();
  return Complex(
    sqrt((z.re + n) / 2),
    signum(z.im) * sqrt((-z.re + n) / 2)
    );
}