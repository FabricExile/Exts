
//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

/**
The :kl-ref:`Box3` represents a 3 dimensional bounding box. It uses :kl-ref:`Vec3` types for each of the 2 elements.

\rst
  .. kl-example:: Construct Box3

    // create a box3
    Vec3 min(0.0, 0.0, 0.0);
    Vec3 max(1.0, 1.0, 1.0);
    Box3 box(min, max);

\endrst

\seealso Box2
\dfgPresetColor Color(99, 129, 92)
*/
struct Box3
{
  Vec3 min;
  Vec3 max;
};

/// Default constructor
inline Box3() {
  this.setEmpty();
}

/// Constructor from vectors
inline Box3(
  Vec3 min, Vec3 max
) {
  this.min = min;
  this.max = max;
}


/// Returns true if this box has no content
inline Boolean Box3.isEmpty() {
  return this.max.x <= this.min.x && this.max.y <= this.min.y && this.max.z <= this.min.z;
}

/// Setting this box to an empty box
inline Box3.setEmpty!() {
  this.min = Vec3( SCALAR_INFINITE, SCALAR_INFINITE, SCALAR_INFINITE );
  this.max = Vec3( -SCALAR_INFINITE, -SCALAR_INFINITE, -SCALAR_INFINITE );
}

/// Setting this box to an infinite box
inline Box3.setInfinite!() {
  this.min = Vec3( -SCALAR_INFINITE, -SCALAR_INFINITE, -SCALAR_INFINITE );
  this.max = Vec3( SCALAR_INFINITE, SCALAR_INFINITE, SCALAR_INFINITE );
}

/// Returns true if this box is infinite
inline Boolean Box3.isInfinite() {
  return    this.min.x == -SCALAR_INFINITE || this.min.y == -SCALAR_INFINITE || this.min.z == -SCALAR_INFINITE
         || this.max.x == SCALAR_INFINITE || this.max.y == SCALAR_INFINITE || this.max.z == SCALAR_INFINITE;
}

/// Returns center of this box. Note that this in not valid for an empty box.
inline Vec3 Box3.center() {
  return (this.min + this.max) * 0.5f;
}

/// Returns diagonal (vector from min to max) of this box. Note that this in not valid for an empty box.
inline Vec3 Box3.diagonal() {
  return (this.max - this.min);
}

/// Returns the diameter of this box, which is the distance from min to max.
inline Scalar Box3.diameter() {
  return this.diagonal().length();
}

/// Merges the given vector into this box
inline Box3.merge!(Vec3 v) {
  if(this.min.x > v.x) this.min.x = v.x;
  if(this.min.y > v.y) this.min.y = v.y;
  if(this.min.z > v.z) this.min.z = v.z;
  if(this.max.x < v.x) this.max.x = v.x;
  if(this.max.y < v.y) this.max.y = v.y;
  if(this.max.z < v.z) this.max.z = v.z;
}

/// Merges the given box into this box
inline Box3.merge!(Box3 v) {
  if( v.min.x < this.min.x )this.min.x = v.min.x;
  if( v.max.x > this.max.x )this.max.x = v.max.x;
  if( v.min.y < this.min.y )this.min.y = v.min.y;
  if( v.max.y > this.max.y )this.max.y = v.max.y;
  if( v.min.z < this.min.z )this.min.z = v.min.z;
  if( v.max.z > this.max.z )this.max.z = v.max.z;
}

/// Multiply this box with a matrix
/// \note If the mat44 is an affine transform (SRT), use faster :kl-ref:`Box3.affineTransform`.
inline Box3 * (Mat44 mat44, Box3 b) {
  Box3 result;

  
  if( b.isInfinite() )// An infinite bbox remains infinite if transformed (else, maths can go quite wrong)
    result = b;
  else if( !b.isEmpty() ) {// Multiplying with "empty" behaves badly...
    result += (mat44 * Vec3( b.min.x, b.min.y, b.min.z ));
    result += (mat44 * Vec3( b.max.x, b.min.y, b.min.z ));
    result += (mat44 * Vec3( b.min.x, b.max.y, b.min.z ));
    result += (mat44 * Vec3( b.min.x, b.min.y, b.max.z ));
    result += (mat44 * Vec3( b.min.x, b.max.y, b.max.z ));
    result += (mat44 * Vec3( b.max.x, b.min.y, b.max.z ));
    result += (mat44 * Vec3( b.max.x, b.max.y, b.min.z ));
    result += (mat44 * Vec3( b.max.x, b.max.y, b.max.z ));
  }
  return result;
}

/// Similar to 'Box3 * (Mat44 mat44, Box3 b)', but optimized for affine transforms (SRT)
inline Box3 Box3.affineTransform(Mat44 mat44) {
  Box3 bbox;

  // Multiplying with "empty" or "infinite" behaves badly...
  if( this.isInfinite() )
    bbox = this;
  else if( !this.isEmpty() ) {
    Vec3 origin = mat44 * Vec3( this.min.x, this.min.y, this.min.z );
    Vec3 dX = Vec3( mat44.row0.x, mat44.row1.x, mat44.row2.x ) * (this.max.x - this.min.x);
    Vec3 dY = Vec3( mat44.row0.y, mat44.row1.y, mat44.row2.y ) * (this.max.y - this.min.y);
    Vec3 dZ = Vec3( mat44.row0.z, mat44.row1.z, mat44.row2.z ) * (this.max.z - this.min.z);
    Vec3 ptX = origin + dX;
    Vec3 ptY = origin + dY;
    Vec3 ptZ = origin + dZ;

    bbox += origin;
    bbox += ptX;
    bbox += ptY;
    bbox += ptZ;

    bbox += (ptX + dY);
    bbox += (ptX + dY + dZ);
    bbox += (ptX + dZ);
    bbox += (ptZ + dY);
  }
  return bbox;
}

/// Returns the merge of two boxes
inline Box3 + (Box3 a, Box3 b) {
  Box3 r = a;
  r.merge(b);
  return r;
}

/// Merges another box to this one
inline Box3. += (Box3 other) {
  this.merge(other);
}

/// Merges a point this
inline Box3. += (Vec3 v) {
  this.merge(v);
}

/// Equals operator
inline Boolean == (Box3 a, Box3 b) {
  return a.min == b.min && a.max == b.max;
}

/// Not equals operator
inline Boolean != (Box3 a, Box3 b) {
  return a.min != b.min || a.max != b.max;
}

/// Hash for this value
inline UInt32 Box3.hash() {
  return this.min.hash() ^ this.max.hash();
}

inline Boolean Box3.contains(Vec3 that)
{
  return
    this.min.x <= that.x && this.max.x >= that.x &&
    this.min.y <= that.y && this.max.y >= that.y &&
    this.min.z <= that.z && this.max.z >= that.z;
}

inline Boolean Box3.contains(Box3 that)
{
  return this.contains(that.min) && this.contains(that.max);
}

inline Boolean Box3.intersects(Box3 that)
{
  Boolean overlap = true;
  overlap = (this.min.x > that.max.x || this.max.x < that.min.x) ? false : overlap;
  overlap = (this.min.x > that.max.x || this.max.x < that.min.x) ? false : overlap;
  overlap = (this.min.y > that.max.y || this.max.y < that.min.y) ? false : overlap;
  return overlap;
}
