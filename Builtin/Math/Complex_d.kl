//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//
/**
The :kl-ref:`Complex_d` type represents a complex number.
\rst
  .. kl-example:: Complex_d

    Complex_d c(-4.1, 3.14);

\endrst

\dfgTypeColor Color(128, 195, 66)
\dfgPresetColor Color(99, 129, 92)
*/

struct Complex_d {
  public Float64 re, im;
};

/// Construct a complex number with real value ``re``
inline Complex_d(Float64 re) {
  this.re = re;
}

/// Construct a complex number with real value ``re``
inline Complex_d(SInt32 re) {
  this.re = re;
}

/// Construct a complex number with real value ``re`` and
/// imaginary value ``im``
inline Complex_d(Float64 re, Float64 im) {
  this.re = re;
  this.im = im;
}

/// Append a String description of this complex number
/// to the io String ``string``
function Complex_d.appendDesc(io String string) {
  string += this.re;
  if (this.im != 0 ) {
    string += ",";
    string += this.im;
    string += "i";
  }
}

inline Complex_d +Complex_d() {
  return this;
}

inline Complex_d -Complex_d() {
  return Complex_d(-this.re, -this.im);
}

inline Complex_d Complex_d.conj() {
  return Complex_d(this.re, -this.im);
}

inline Complex_d +(Float64 lhs, Complex_d rhs) {
  return Complex_d(lhs + rhs.re, rhs.im);
}

inline Complex_d +(Complex_d lhs, Float64 rhs) {
  return Complex_d(lhs.re + rhs, lhs.im);
}

inline Complex_d.+=(Float64 that) {
  this.re += that;
}

inline Complex_d +(Complex_d lhs, Complex_d rhs) {
  return Complex_d(lhs.re + rhs.re, lhs.im + rhs.im);
}

inline Complex_d.+=(Complex_d that) {
  this.re += that.re;
  this.im += that.im;
}

inline Complex_d -(Float64 lhs, Complex_d rhs) {
  return Complex_d(lhs - rhs.re, rhs.im);
}

inline Complex_d -(Complex_d lhs, Float64 rhs) {
  return Complex_d(lhs.re - rhs, lhs.im);
}

inline Complex_d.-=(Float64 that) {
  this.re -= that;
}

inline Complex_d -(Complex_d lhs, Complex_d rhs) {
  return Complex_d(lhs.re - rhs.re, lhs.im - rhs.im);
}

inline Complex_d.-=(Complex_d that) {
  this.re -= that.re;
  this.im -= that.im;
}

inline Complex_d *(Float64 lhs, Complex_d rhs) {
  return Complex_d(lhs * rhs.re, lhs * rhs.im);
}

inline Complex_d *(Complex_d lhs, Float64 rhs) {
  return Complex_d(lhs.re * rhs, lhs.im * rhs);
}

inline Complex_d.*=(Float64 that) {
  this.re *= that;
  this.im *= that;
}

inline Complex_d *(Complex_d lhs, Complex_d rhs) {
  return Complex_d(
    lhs.re * rhs.re - lhs.im * rhs.im,
    lhs.re * rhs.im + lhs.im * rhs.re
    );
}

inline Complex_d.*=(Complex_d that) {
  Float64 re = this.re * that.re - this.im * that.im;
  Float64 im = this.re * that.im + this.im * that.re;
}

Boolean < (Complex_d lhs, Complex_d rhs) {
  return lhs.norm() < rhs.norm();
}

Boolean <= (Complex_d lhs, Complex_d rhs) {
  return lhs.norm() <= rhs.norm();
}

Boolean > (Complex_d lhs, Complex_d rhs) {
  return lhs.norm() > rhs.norm();
}

Boolean >= (Complex_d lhs, Complex_d rhs) {
  return lhs.norm() >= rhs.norm();
}

inline Float64 Complex_d.normSq() {
  return this.re * this.re + this.im * this.im;
}

inline Float64 Complex_d.lengthSquared() {
  return this.normSq();
}

/// Return the normalized value of this complex number
inline Float64 Complex_d.norm() {
  return sqrt(this.normSq());
}

/// Return the length of this complex number
inline Float64 Complex_d.length() {
  return this.norm();
}

/// Return the absolute value of this complex number
inline Float64 abs(Complex_d z) {
  return z.norm();
}

/// Return the inverse of this complex number
inline Complex_d Complex_d.inv() {
  Float64 normSq = this.normSq();
  return Complex_d(this.re / normSq, -this.im / normSq);
}

/// Return the reciprocal of this complex number
inline Complex_d Complex_d.recip() {
  return this.inv();
}

inline Complex_d /(Float64 lhs, Complex_d rhs) {
  return lhs * rhs.inv();
}

inline Complex_d /(Complex_d lhs, Float64 rhs) {
  return lhs * (1.0 / rhs);
}

inline Complex_d./=(Float64 that) {
  this *= 1.0 / that;
}

inline Complex_d /(Complex_d lhs, Complex_d rhs) {
  return lhs * rhs.inv();
}

inline Complex_d./=(Complex_d that) {
  this *= that.inv();
}

/// Returns the unit vector of this one, throws and exception if almost zero length
inline Complex_d Complex_d.unit() {
  Float64 n = this.length();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Complex_d.unit" );
  return this / n;
}

/// Returns the unit vector of this one, with a value of 1 if almost zero length
inline Complex_d Complex_d.unit_safe() {
  Float64 n = this.length();
  if( !Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    return this / n;
  else
    return Complex_d(1);
}

inline Float64 Complex_d.setUnit!() {
  Float64 n = this.norm();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Complex_d.setUnit" );
  this /= n;
  return n;
}

/// Normalize this complex number
inline Complex_d.normalize!() {
  this.setUnit();
}

/// Check if the value is zero
inline Boolean Complex_d.isZero() {
  return this.re == 0 && this.im == 0;
}

inline Boolean Complex_d.equal(Complex_d that) {
  return (this - that).isZero();
}

inline Boolean == (Complex_d lhs, Complex_d rhs) {
  return lhs.equal(rhs);
}

inline Boolean != (Complex_d lhs, Complex_d rhs) {
  return !lhs.equal(rhs);
}

/// Check if the value of the complex number is close enough zero, within
/// the specified precision
inline Boolean Complex_d.isAlmostZero(Float64 precision) {
 return abs(this.re) < precision && abs(this.im) < precision;
}

/// Check if the value of the complex number is equal to ``that``, within
/// the specified precision
inline Boolean Complex_d.almostEqual(Complex_d that, Float64 precision) {
  return (this - that).isAlmostZero(precision);
}

inline Boolean Complex_d.isAlmostZero() {
 return this.isAlmostZero(PRECISION);
}

inline Boolean Complex_d.almostEqual(Complex_d that) {
  return this.almostEqual(that, PRECISION);
}

inline UInt32 Complex_d.hash() {
  return this.re.hash() ^ this.im.hash();
}

/// Linearly interpolates this vector with another one
/// based on a scalar blend value (0.0 to 1.0)
inline Complex_d Complex_d.linearInterpolate(Complex_d that, Float64 t) {
  return this * (1 - t) + that * t;
}

/// Return the angle of the complex number from its real and
/// imaginary components
inline Float64 Complex_d.angle() {
  return atan2(this.im, this.re);
}

inline Boolean Math_badDivisor(Complex_d s){
  return s.re < DIVIDEPRECISION && s.re > -DIVIDEPRECISION
    && s.im < DIVIDEPRECISION && s.im > -DIVIDEPRECISION;
}

inline Math_reportBadDivisor(Complex_d s, in String contextDesc){
  Math_reportWarning( contextDesc + ": bad divisor: " + s );
}

inline Float64 signum(Float64 x) {
  if (x > 0)
    return 1;
  else if (x < 0)
    return -1;
  else
    return 0;
}

/// Return the square root of a complex number
inline Complex_d sqrt(Complex_d z) {
  Float64 n = z.norm();
  return Complex_d(
    sqrt((z.re + n) / 2),
    signum(z.im) * sqrt((-z.re + n) / 2)
    );
}