
//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

/**
The :kl-ref:`Mat22_i` represents a 2 by 2 matrix. It uses :kl-ref:`Vec2_i` types for each of the 2 rows.

\rst
  .. kl-example:: Construct Mat22_i

    // create a matrix 2x2
    Vec2_i v0(1.0, 0.0);
    Vec2_i v1(0.0, 1.0);
    Mat22_i mat(v0, v1);

\endrst
\dfgTypeColor Color(249, 157, 28)
\dfgPresetColor Color(99, 129, 92)
*/
struct Mat22_i
{
  Vec2_i row0;
  Vec2_i row1;
};

inline Mat22_i(){
  this.setIdentity();
}

/// Constructor from scalars
/// \dfgPresetDefault _00 1
/// \dfgPresetDefault _11 1
inline Mat22_i(
  SInt32 _00, SInt32 _01,
  SInt32 _10, SInt32 _11
) {
  this.set(_00, _01, _10, _11);
}

/// Constructor from vectors
inline Mat22_i(
  Vec2_i row0, Vec2_i row1
) {
  this.row0 = row0;
  this.row1 = row1;
}

/// Sets each component with a single scalar value.
inline Mat22_i.set!(
  SInt32 _00, SInt32 _01,
  SInt32 _10, SInt32 _11
) {
  this.row0 = Vec2_i(_00, _01);
  this.row1 = Vec2_i(_10, _11);
}

/// Setter from (standard/external) float32 array and an offset
inline Mat22_i.set!(Float32 v<>, UInt32 o) {
  if(v.size() >= 4 + o) {
    this.row0.set(v, o + 0);
    this.row1.set(v, o + 2);
  }
}

/// Getter as external float32 array and an offset
inline Mat22_i.get(io Float32 v<>, UInt32 o) {
  if(v.size() >= 4 + o) {
    this.row0.get(v, o + 0);
    this.row1.get(v, o + 2);
  }
}

/// Getter as float32 array and an offset
inline Mat22_i.get(io Float32 v[], UInt32 o) {
  if(v.size() < 4 + o)
    v.resize(4 + o);
  this.row0.get(v, o + 0);
  this.row1.get(v, o + 2);
}

/// Setter from (standard/external) float64 array and an offset
inline Mat22_i.set!(Float64 v<>, UInt32 o) {
  if(v.size() >= 4 + o) {
    this.row0.set(v, o + 0);
    this.row1.set(v, o + 2);
  }
}

/// Getter as external float64 array and an offset
inline Mat22_i.get(io Float64 v<>, UInt32 o) {
  if(v.size() >= 4 + o) {
    this.row0.get(v, o + 0);
    this.row1.get(v, o + 2);
  }
}

/// Getter as float64 array and an offset
inline Mat22_i.get(io Float64 v[], UInt32 o) {
  if(v.size() < 4 + o)
    v.resize(4 + o);
  this.row0.get(v, o + 0);
  this.row1.get(v, o + 2);
}

/// Setter from (standard/external) float32 array
inline Mat22_i.set!(Float32 v<>) {
  this.set(v, 0);
}

/// Getter as external float32 array
inline Mat22_i.get(io Float32 v<>) {
  this.get(v, 0);
}

/// Getter as float32 array
inline Mat22_i.get(io Float32 v[]) {
  this.get(v, 0);
}

/// Setter from (standard/external) float64 array
inline Mat22_i.set!(Float64 v<>) {
  this.set(v, 0);
}

/// Getter as external float64 array
inline Mat22_i.get(io Float64 v<>) {
  this.get(v, 0);
}

/// Getter as float64 array
inline Mat22_i.get(io Float64 v[]) {
  this.get(v, 0);
}

/// Setter from vectors, row-wise
inline Mat22_i.setRows!(in Vec2_i row0, in Vec2_i row1) {
  this.row0 = row0;
  this.row1 = row1;
}

/// Setter from vectors, column-wise
inline Mat22_i.setColumns!(in Vec2_i col0, in Vec2_i col1) {
  this.row0.x = col0.x; this.row0.y = col1.x;
  this.row1.x = col0.y; this.row1.y = col1.y;
}

/// setting all components of the matrix to 0.0
inline Mat22_i.setNull!() {
  Vec2_i nullVec2_i(SInt32(), SInt32());
  this.row0 = this.row1 = nullVec2_i;
}

/// setting this matrix to the identity matrix
inline Mat22_i.setIdentity!() {
  this.setNull();
  this.setDiagonal(SInt32(1.0));
}

/// setting the diagonal components of 
/// this matrix to a scalar
inline Mat22_i.setDiagonal!(in SInt32 v) {
  this.row0.x = this.row1.y = v;
}

/// setting the diagonal components of this
/// matrix to the components of a vector
inline Mat22_i.setDiagonal!(in Vec2_i v) {
  this.row0.x = v.x;
  this.row1.y = v.y;
}

/// Returns true if this matrix is the same as another one
inline Boolean Mat22_i.equal(in Mat22_i other) {
  return this.row0.equal( other.row0 ) && this.row1.equal( other.row1 );
}

/// Returns true if this matrix is almost the same as another one
/// (given a precision)
inline Boolean Mat22_i.almostEqual(
  in Mat22_i other,
  in SInt32 precision
  ) {
  return this.row0.almostEqual( other.row0, precision )
    && this.row1.almostEqual( other.row1, precision );
}

/// Returns true if this matrix is almost the same as another one
/// (using a default precision)
inline Boolean Mat22_i.almostEqual(in Mat22_i other) {
  return this.almostEqual(other, PRECISION);
}

/// Equals operator
inline Boolean == (Mat22_i a, Mat22_i b) {
  return a.equal(b);
}

/// Not equals operator
inline Boolean != (Mat22_i a, Mat22_i b) {
  return !a.equal(b);
}

/// Hash for this value
inline UInt32 Mat22_i.hash() {
  return this.row0.hash() ^ this.row1.hash();
}

/// Returns the addition of two matrices
inline Mat22_i + (Mat22_i a, Mat22_i b) {
  return Mat22_i( a.row0 + b.row0, a.row1 + b.row1 );
}

/// Adds another matrix to this one
inline Mat22_i. += (Mat22_i other) {
  this = this + other;
}

/// Returns the subtraction of two matrices
inline Mat22_i - (Mat22_i a, Mat22_i b) {
  return Mat22_i( a.row0 - b.row0, a.row1 - b.row1 );
}

/// Subtracts another matrix from this one
inline Mat22_i. -= (Mat22_i other) {
  this = this - other;
}

/// Returns the product of two matrices
/// \dfgPresetDefault right {"row0": {"x": 1, "y": 0}, "row1": { "x": 0, "y": 1} }
inline Mat22_i * (Mat22_i left, Mat22_i right) {
  Mat22_i result;

  result.row0.x = left.row0.x * right.row0.x + left.row0.y * right.row1.x;
  result.row0.y = left.row0.x * right.row0.y + left.row0.y * right.row1.y;

  result.row1.x = left.row1.x * right.row0.x + left.row1.y * right.row1.x;
  result.row1.y = left.row1.x * right.row0.y + left.row1.y * right.row1.y;

  return result;
}

/// Returns the product of a matrix and a Vec2_i
/// \dfgPresetDefault mat22 {"row0": {"x": 1, "y": 0}, "row1": { "x": 0, "y": 1} }
inline Vec2_i * (Mat22_i mat22, Vec2_i vec2) {
  return Vec2_i(
    mat22.row0.x * vec2.x + mat22.row0.y * vec2.y,
    mat22.row1.x * vec2.x + mat22.row1.y * vec2.y
  );
}

/// Returns the product of a matrix and a scalar
/// \dfgPresetDefault s 1
inline Mat22_i * (Mat22_i mat22, SInt32 s) {
  return Mat22_i( mat22.row0 * s, mat22.row1 * s );
}

/// Returns the product of a scalar and a matrix
/// \dfgPresetDefault s 1
inline Mat22_i * (SInt32 s, Mat22_i mat22) {
  return Mat22_i( mat22.row0 * s, mat22.row1 * s );
}

/// Multiplies this matrix with another one
/// \dfgPresetDefault other {"row0": {"x": 1, "y": 0}, "row1": { "x": 0, "y": 1} }
inline Mat22_i. *= (Mat22_i other) {
  this = this * other;
}

/// Multiplies this matrix with a scalar
/// \dfgPresetDefault other 1
inline Mat22_i. *= (SInt32 other) {
  this = this * other;
}

/// Returns the division of a matrix and a scalar
/// \dfgPresetDefault mat22 {"row0": {"x": 1, "y": 0}, "row1": { "x": 0, "y": 1} }
/// \dfgPresetDefault s 1
inline Mat22_i / (Mat22_i mat22, SInt32 s) {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( s ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( s, "Mat22_i.divide" );
  return mat22 * (1.0 / s);
}

/// Divides this matrix by a scalar
/// \dfgPresetDefault other 1
inline Mat22_i. /= (SInt32 other) {
  this = this / other;
}

/// Overload method for the add operator
inline Mat22_i Mat22_i.add(Mat22_i other) {
  return this + other;
}

/// Overload method for the subtract operator
inline Mat22_i Mat22_i.subtract(Mat22_i other) {
  return this - other;
}

/// Overload method for the multiply operator
/// \dfgPresetDefault other { "row0": {"x": 1, "y": 0}, "row1": { "x": 0, "y": 1} }
inline Mat22_i Mat22_i.multiply(Mat22_i other) {
  return this * other;
}

/// // overload method for the divide operator
/// inline Mat22_i Mat22_i.divide(Mat22_i other) {
///   return this / other;
/// }

/// Returns the product of this matrix and a scalar
/// \dfgPresetDefault other 1
inline Mat22_i Mat22_i.multiplySInt32(SInt32 other) {
  return this * other;
}

/// Returns the product of this matrix and a vector
inline Vec2_i Mat22_i.multiplyVector(Vec2_i other) {
  return this * other;
}

/// Returns the division of this matrix and a scalar
/// \dfgPresetDefault other 1
inline Mat22_i Mat22_i.divideSInt32(SInt32 other) {
  return this / other;
}

/// Returns the determinant of this matrix
inline SInt32 Mat22_i.determinant() {
  return this.row0.x * this.row1.y - this.row0.y * this.row1.x;
}

/// Returns the adjoint matrix of this matrix
inline Mat22_i Mat22_i.adjoint() {
  return Mat22_i(this.row1.y, -this.row0.y, -this.row1.x, this.row0.x);
}

/// Returns the inverse matrix of this matrix
inline Mat22_i Mat22_i.inverse() {
  SInt32 det = this.determinant();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( det ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( det, "Mat22_i.inverse" );
  return this.adjoint() / det;
}

/// Returns the transposed matrix of this matrix
inline Mat22_i Mat22_i.transpose() {
  Mat22_i result(
    this.row0.x, this.row1.x,
    this.row0.y, this.row1.y);
  return result;
}
