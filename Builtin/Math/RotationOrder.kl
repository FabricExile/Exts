
//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//
/**
The :kl-ref:`Rotationorder` type represents the order in which rotations should be accumulated for a :kl-ref:`Euler` rotation. :kl-ref:`Rotationorder` can be constructed from order indices or strings.

\note Before version 2.4.0, rotation order "XYZ" was actually applying order "ZYX". This has been fixed, but and to minimize behavior changes, `order` indices still map to the same behavior (eg: order=4 was ZYX and is now XYZ).

\rst
  .. kl-example:: RotationOrder

    RotationOrder ro1(0);
    RotationOrder ro2('xyz');

\endrst
\seealso Euler
\dfgTypeColor Color(0, 191, 232)
\dfgPresetColor Color(99, 129, 92)
*/
struct RotationOrder
{
  Integer order;
};

RotationOrder() {
  this.order = 4;//Default as XYZ
}

/// Constructor from the order index (0 to 5)
/// \dfgPresetCombo order ("zyx", "xzy", "yxz", "yzx", "xyz", "zxy")
/// \dfgPresetDefault order 4

inline RotationOrder(in Integer order) {
  if (order < 0 || order > 5) {
    report('Invalid rotation order: ' + order);
    this.setXYZ();
  }
  else
    this.order = order;
}

/// Constructor from order string, for ex: 'xyz'
inline RotationOrder(in String order) {
  this.order = -1;
  if( order == 'zyx' || order == 'ZYX' )
    this.order = 0;
  else if(order == 'xzy' || order == 'XZY')
    this.order = 1;
  else if( order == 'yxz' || order == 'YXZ' )
    this.order = 2;
  else if( order == 'yzx' || order == 'YZX' )
    this.order = 3;
  else if( order == 'xyz' || order == 'XYZ' )
    this.order = 4;
  else if( order == 'zxy' || order == 'ZXY' )
    this.order = 5;
  if (this.order < 0 || this.order > 5) {
    report('Invalid rotation order: ' + order);
    this.setXYZ();
  }
}

/*
/// It would be most excellent to be able to override String casts.
inline String( in RotationOrder o )
{
  if( o.order = 0 ) return "zyx";
  else if( o.order = 1 ) return "xzy";
  else if( o.order = 2 ) return "yxz";
  else if( o.order = 3 ) return "yzx";
  else if( o.order = 4 ) return "xyz";
  else if( o.order = 5 ) return "zxy";
  else return "<unknown>";
}
*/

/// Returns true if this rotationorder is XYZ
inline Boolean RotationOrder.isZYX() {
  return this.order == 0;
}

/// Returns true if this rotationorder is YZX
inline Boolean RotationOrder.isXZY() {
  return this.order == 1;
}

/// Returns true if this rotationorder is ZXY
inline Boolean RotationOrder.isYXZ() {
  return this.order == 2;
}

/// Returns true if this rotationorder is XZY
inline Boolean RotationOrder.isYZX() {
  return this.order == 3;
}

/// Returns true if this rotationorder is ZYX
inline Boolean RotationOrder.isXYZ() {
  return this.order == 4;
}

/// Returns true if this rotationorder is YXZ
inline Boolean RotationOrder.isZXY() {
  return this.order == 5;
}

/// Returns true if this rotation order is one
/// of the reversed ones (XZY, ZYX or YXZ)
inline Boolean RotationOrder.isReversed() {
  return this.isXZY() || this.isZYX() || this.isYXZ();
}

/// Sets this rotation order to be XYZ
inline RotationOrder.setZYX!() {
  this.order = 0;
}

/// Sets this rotation order to be YZX
inline RotationOrder.setXZY!() {
  this.order = 1;
}

/// Sets this rotation order to be ZXY
inline RotationOrder.setYXZ!() {
  this.order = 2;
}

/// Sets this rotation order to be XZY
inline RotationOrder.setYZX!() {
  this.order = 3;
}

/// Sets this rotation order to be ZYX
inline RotationOrder.setXYZ!() {
  this.order = 4;
}

/// Sets this rotation order to be YXZ
inline RotationOrder.setZXY!() {
  this.order = 5;
}

/// Equals operator
inline Boolean == (RotationOrder a, RotationOrder b) {
  return a.order == b.order;
}

/// Not equals operator
inline Boolean != (RotationOrder a, RotationOrder b) {
  return a.order != b.order;
}

/// Hash for this value
inline UInt32 RotationOrder.hash() {
  return this.order.hash();
}


/// Constructor from order string, for ex: 'xyz'
inline String RotationOrder.string() {
  switch(this.order)
  {
    case 0:
      return 'zyx';
    case 1:
      return 'xzy';
    case 2:
      return 'yxz';
    case 3:
      return 'yzx';
    case 4:
      return 'xyz';
    case 5:
      return 'zxy';
  }
  return '';
}
