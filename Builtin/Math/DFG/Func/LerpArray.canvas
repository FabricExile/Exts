{
  "objectType" : "Func",
  "metadata" : {
    "uiNodeColor" : "{\n  \"r\" : 99,\n  \"g\" : 129,\n  \"b\" : 92\n  }",
    "uiTooltip" : "Linearly interpolates a scalar value with another based on a blend (0.0 to 1.0)\n\n Supported by Float32,Float64,RGB,RGBA,ARGB,Color,Vec2,Vec3,Vec4,Quat,Xfo"
    },
  "title" : "Lerp[]",
  "tags": [
    "aka:LinearInterpolate[]",
    "cat:Interpolate"    
    ],  
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "name" : "this",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Float32[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "$TYPE$[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "other",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Float32[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "$TYPE$[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(0, 1)"
        },
      "name" : "t",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "$TYPE$[]"
      }
    ],
  "extDeps" : {
    "Math" : "*"
    },
  "presetGUID" : "18106EF6D37632C1481973598A9A886C",
  "code" : "require Math;

operator Math_Float32_linearInterpolate_task<<<index>>>(
  io $TYPE$[] result
, in $TYPE$[] this
, in $TYPE$[] other
, in Scalar[] t
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].linearInterpolate(other[index < other.size() ? index : other.size() - 1], t[index < t.size() ? index : t.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( other.size() == 0) return;
  if( t.size() == 0) return;
  Size task_size = this.size();
  if(task_size < other.size()) task_size = other.size();
  if(task_size < t.size()) task_size = t.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Math_Float32_linearInterpolate_task(index, result, this, other, t);
    }
  } else {
    Math_Float32_linearInterpolate_task<<<task_size>>>(result, this, other, t);
  }
}
"
  }