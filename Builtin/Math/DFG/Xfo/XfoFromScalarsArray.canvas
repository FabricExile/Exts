{
  "objectType" : "Func",
  "metadata" : {
    "uiNodeColor" : "{\n  \"r\" : 99,\n  \"g\" : 129,\n  \"b\" : 92\n  }",
    "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.7.0/HTML/KLExtensionsGuide/Math/Xfo.html",
    "uiTooltip" : "Setter from single channels (no shearing), the rotation being in degrees\n\n Supported by Xfo"
    },
  "title" : "XfoFromScalars[]",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 249,\n  \"g\" : 157,\n  \"b\" : 28\n  }"
        },
      "name" : "this",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Xfo[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "scX",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          1
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "scY",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          1
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "scZ",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          1
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "shXY",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "shXZ",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "shYZ",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-180, 180)"
        },
      "name" : "degreeX",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-180, 180)"
        },
      "name" : "degreeY",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-180, 180)"
        },
      "name" : "degreeZ",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-5.0, 5.0)"
        },
      "name" : "trX",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-5.0, 5.0)"
        },
      "name" : "trY",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-5.0, 5.0)"
        },
      "name" : "trZ",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      }
    ],
  "extDeps" : {
    "Math" : "*"
    },
  "presetGUID" : "19306626D36ED881888A344DA7A3F1AF",
  "code" : "require Math;

operator Math_Xfo_XfoFromScalars_task<<<index>>>(
  io Xfo[] this
, in Scalar[] scX
, in Scalar[] scY
, in Scalar[] scZ
, in Scalar[] shXY
, in Scalar[] shXZ
, in Scalar[] shYZ
, in Scalar[] degreeX
, in Scalar[] degreeY
, in Scalar[] degreeZ
, in Scalar[] trX
, in Scalar[] trY
, in Scalar[] trZ
) {
  this[index < this.size() ? index : this.size() - 1].XfoFromScalars(
    scX[index < scX.size() ? index : scX.size() - 1],
    scY[index < scY.size() ? index : scY.size() - 1],
    scZ[index < scZ.size() ? index : scZ.size() - 1],
    shXY[index < shXY.size() ? index : shXY.size() - 1],
    shXZ[index < shXZ.size() ? index : shXZ.size() - 1],
    shYZ[index < shYZ.size() ? index : shYZ.size() - 1],
    degreeX[index < degreeX.size() ? index : degreeX.size() - 1],
    degreeY[index < degreeY.size() ? index : degreeY.size() - 1],
    degreeZ[index < degreeZ.size() ? index : degreeZ.size() - 1],
    trX[index < trX.size() ? index : trX.size() - 1],
    trY[index < trY.size() ? index : trY.size() - 1],
    trZ[index < trZ.size() ? index : trZ.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( scX.size() == 0) return;
  if( scY.size() == 0) return;
  if( scZ.size() == 0) return;
  if( shXY.size() == 0) return;
  if( shXZ.size() == 0) return;
  if( shYZ.size() == 0) return;
  if( degreeX.size() == 0) return;
  if( degreeY.size() == 0) return;
  if( degreeZ.size() == 0) return;
  if( trX.size() == 0) return;
  if( trY.size() == 0) return;
  if( trZ.size() == 0) return;
  Size task_size = this.size();
  if(task_size < scX.size()) task_size = scX.size();
  if(task_size < scY.size()) task_size = scY.size();
  if(task_size < scZ.size()) task_size = scZ.size();
  if(task_size < shXY.size()) task_size = shXY.size();
  if(task_size < shXZ.size()) task_size = shXZ.size();
  if(task_size < shYZ.size()) task_size = shYZ.size();
  if(task_size < degreeX.size()) task_size = degreeX.size();
  if(task_size < degreeY.size()) task_size = degreeY.size();
  if(task_size < degreeZ.size()) task_size = degreeZ.size();
  if(task_size < trX.size()) task_size = trX.size();
  if(task_size < trY.size()) task_size = trY.size();
  if(task_size < trZ.size()) task_size = trZ.size();
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Math_Xfo_XfoFromScalars_task(index, this, scX, scY, scZ, shXY, shXZ, shYZ, degreeX, degreeY, degreeZ, trX, trY, trZ);
    }
  } else {
    Math_Xfo_XfoFromScalars_task<<<task_size>>>(this, scX, scY, scZ, shXY, shXZ, shYZ, degreeX, degreeY, degreeZ, trX, trY, trZ);
  }
}
"
  }