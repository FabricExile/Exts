{
  "objectType" : "Func",
  "metadata" : {
    "uiNodeColor" : "{\n  \"r\" : 99,\n  \"g\" : 129,\n  \"b\" : 92\n  }",
    "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.7.0/HTML/KLExtensionsGuide/Math/RGBA.html"
    },
  "title" : "-> RGBA[]",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "name" : "r",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Byte[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Byte[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "g",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Byte[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Byte[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "b",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Byte[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Byte[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "a",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Byte[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Byte[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 255,\n  \"g\" : 0,\n  \"b\" : 0\n  }"
        },
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "RGBA[]"
      }
    ],
  "extDeps" : {
    "Math" : "*"
    },
  "presetGUID" : "D624FF4FA2848FA681B12E443C960621",
  "code" : "require Math;

operator Math_RGBA_compose_task<<<index>>>(io RGBA[] result, in Byte[] r, in Byte[] g, in Byte[] b, in Byte[] a) {
  result[index].r = r[index < r.size() ? index : r.size() - 1];
  result[index].g = g[index < g.size() ? index : g.size() - 1];
  result[index].b = b[index < b.size() ? index : b.size() - 1];
  result[index].a = a[index < a.size() ? index : a.size() - 1];
}

dfgEntry {
  if(r.size() == 0) return;
  if(g.size() == 0) return;
  if(b.size() == 0) return;
  if(a.size() == 0) return;
  Size task_size = 0;
  if(task_size < r.size()) task_size = r.size();
  if(task_size < g.size()) task_size = g.size();
  if(task_size < b.size()) task_size = b.size();
  if(task_size < a.size()) task_size = a.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size i = 0; i < task_size; i++) {
      Math_RGBA_compose_task(i, result, r, g, b, a);
    }
  } else {
    Math_RGBA_compose_task<<<task_size>>>(result, r, g, b, a);
  }
}
"
  }