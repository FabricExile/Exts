{
  "objectType" : "Func",
  "metadata" : {
    "uiNodeColor" : "{\n  \"r\" : 99,\n  \"g\" : 129,\n  \"b\" : 92\n  }",
    "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.7.0/HTML/KLExtensionsGuide/Math/Euler.html"
    },
  "title" : "-> Euler[]",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "name" : "x",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "y",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "z",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 0,\n  \"g\" : 191,\n  \"b\" : 232\n  }"
        },
      "name" : "ro",
      "nodePortType" : "Out",
      "defaultValues" : {
        "RotationOrder[]" : [
          {
            "order" : 0
            }
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "RotationOrder[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 0,\n  \"g\" : 191,\n  \"b\" : 232\n  }"
        },
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "Euler[]"
      }
    ],
  "extDeps" : {
    "Math" : "*"
    },
  "presetGUID" : "6E3CB89F25F4578C18709367D4F8D649",
  "code" : "require Math;

operator Math_Euler_compose_task<<<index>>>(io Euler[] result, in Scalar[] x, in Scalar[] y, in Scalar[] z, in RotationOrder[] ro) {
  result[index].x = x[index < x.size() ? index : x.size() - 1];
  result[index].y = y[index < y.size() ? index : y.size() - 1];
  result[index].z = z[index < z.size() ? index : z.size() - 1];
  result[index].ro = ro[index < ro.size() ? index : ro.size() - 1];
}

dfgEntry {
  if(x.size() == 0) return;
  if(y.size() == 0) return;
  if(z.size() == 0) return;
  if(ro.size() == 0) return;
  Size task_size = 0;
  if(task_size < x.size()) task_size = x.size();
  if(task_size < y.size()) task_size = y.size();
  if(task_size < z.size()) task_size = z.size();
  if(task_size < ro.size()) task_size = ro.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size i = 0; i < task_size; i++) {
      Math_Euler_compose_task(i, result, x, y, z, ro);
    }
  } else {
    Math_Euler_compose_task<<<task_size>>>(result, x, y, z, ro);
  }
}
"
  }