{
  "objectType" : "Func",
  "metadata" : {
    "uiNodeColor" : "{\n  \"r\" : 99,\n  \"g\" : 129,\n  \"b\" : 92\n  }",
    "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.7.0/HTML/KLExtensionsGuide/Math/Ray.html",
    "uiTooltip" : "Computes the intersections between the Ray and a 3d bounding volume defined as a :kl-ref:`Box3`.\nReturns true if a ray intersects the given box3.\n\n Supported by Ray"
    },
  "title" : "IntersectBoundingBox[]",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "name" : "this",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Ray[]" : [
          {
            "start" : {
              "x" : 0,
              "y" : 0,
              "z" : 0
              },
            "direction" : {
              "x" : 0,
              "y" : 0,
              "z" : 0
              }
            }
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Ray[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "box3",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Box3[]" : [
          {
            "min" : {
              "x" : null,
              "y" : null,
              "z" : null
              },
            "max" : {
              "x" : null,
              "y" : null,
              "z" : null
              }
            }
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Box3[]"
      },
    {
      "objectType" : "ExecPort",
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "Boolean[]"
      }
    ],
  "extDeps" : {
    "Math" : "*"
    },
  "presetGUID" : "A8B0BC66FB4A3DF3517B3E41BD5AC08D",
  "code" : "require Math;

operator Math_Ray_intersectBoundingBox_task<<<index>>>(
  io Boolean[] result
, in Ray[] this
, in Box3[] box3
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].intersectBoundingBox(box3[index < box3.size() ? index : box3.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( box3.size() == 0) return;
  Size task_size = this.size();
  if(task_size < box3.size()) task_size = box3.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Math_Ray_intersectBoundingBox_task(index, result, this, box3);
    }
  } else {
    Math_Ray_intersectBoundingBox_task<<<task_size>>>(result, this, box3);
  }
}
"
  }