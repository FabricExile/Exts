{
  "objectType" : "Func",
  "metadata" : {
    "uiNodeColor" : "{\n  \"r\" : 99,\n  \"g\" : 129,\n  \"b\" : 92\n  }",
    "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.7.0/HTML/KLExtensionsGuide/Math/Quat.html",
    "uiTooltip" : "Returns this quaternion as a Euler rotation\ngiving a rotation order\n\n Supported by Quat"
    },
  "title" : "ToEuler[]",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 0,\n  \"g\" : 191,\n  \"b\" : 232\n  }"
        },
      "name" : "this",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Quat[]" : [
          {
            "v" : {
              "x" : 0,
              "y" : 0,
              "z" : 0
              },
            "w" : 1
            }
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Quat[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 0,\n  \"g\" : 191,\n  \"b\" : 232\n  }"
        },
      "name" : "rotationOrder",
      "nodePortType" : "Out",
      "defaultValues" : {
        "RotationOrder[]" : [
          {
            "order" : 0
            }
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "RotationOrder[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 0,\n  \"g\" : 191,\n  \"b\" : 232\n  }"
        },
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "Euler[]"
      }
    ],
  "extDeps" : {
    "Math" : "*"
    },
  "presetGUID" : "35080AD18A4B8022C9DF6EFFB0922515",
  "code" : "require Math;

operator Math_Quat_toEuler_task<<<index>>>(
  io Euler[] result
, in Quat[] this
, in RotationOrder[] rotationOrder
) {
  result[index] = this[index < this.size() ? index : this.size() - 1].toEuler(rotationOrder[index < rotationOrder.size() ? index : rotationOrder.size() - 1]);
}

dfgEntry {
  if( this.size() == 0) return;
  if( rotationOrder.size() == 0) return;
  Size task_size = this.size();
  if(task_size < rotationOrder.size()) task_size = rotationOrder.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Math_Quat_toEuler_task(index, result, this, rotationOrder);
    }
  } else {
    Math_Quat_toEuler_task<<<task_size>>>(result, this, rotationOrder);
  }
}
"
  }