{
  "objectType" : "Func",
  "metadata" : {
    "uiNodeColor" : "{\n  \"r\" : 99,\n  \"g\" : 129,\n  \"b\" : 92\n  }",
    "uiDocUrl" : "http://docs.fabric-engine.com/FabricEngine/2.7.0/HTML/KLExtensionsGuide/Math/Quat.html",
    "uiTooltip" : "Set this quat to a given angles vector (in radians) and a rotation order\n\n Supported by Quat"
    },
  "title" : "SetFromEulerAngles[]",
  "ports" : [
    {
      "objectType" : "ExecPort",
      "name" : "exec",
      "nodePortType" : "IO",
      "execPortType" : "IO",
      "typeSpec" : "Execute"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-3.14, 3.14)"
        },
      "name" : "eulerX",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-3.14, 3.14)"
        },
      "name" : "eulerY",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiRange" : "(-3.14, 3.14)"
        },
      "name" : "eulerZ",
      "nodePortType" : "Out",
      "defaultValues" : {
        "Scalar[]" : [
          0
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "Scalar[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 0,\n  \"g\" : 191,\n  \"b\" : 232\n  }"
        },
      "name" : "ro",
      "nodePortType" : "Out",
      "defaultValues" : {
        "RotationOrder[]" : [
          {
            "order" : 0
            }
          ]
        },
      "execPortType" : "In",
      "typeSpec" : "RotationOrder[]"
      },
    {
      "objectType" : "ExecPort",
      "metadata" : {
        "uiColor" : "{\n  \"r\" : 0,\n  \"g\" : 191,\n  \"b\" : 232\n  }"
        },
      "name" : "result",
      "nodePortType" : "In",
      "execPortType" : "Out",
      "typeSpec" : "Quat[]"
      }
    ],
  "extDeps" : {
    "Math" : "*"
    },
  "presetGUID" : "5A447FEBD6558BCE682FFF2DFECFC027",
  "code" : "require Math;

operator Math_Quat_setFromEulerAngles_task<<<index>>>(
  io Quat[] result
, in Scalar[] eulerX
, in Scalar[] eulerY
, in Scalar[] eulerZ
, in RotationOrder[] ro
) {
  result[index].setFromEulerAngles(eulerX[index < eulerX.size() ? index : eulerX.size() - 1], eulerY[index < eulerY.size() ? index : eulerY.size() - 1], eulerZ[index < eulerZ.size() ? index : eulerZ.size() - 1], ro[index < ro.size() ? index : ro.size() - 1]);
}

dfgEntry {
  if( eulerX.size() == 0) return;
  if( eulerY.size() == 0) return;
  if( eulerZ.size() == 0) return;
  if( ro.size() == 0) return;
  Size task_size = 0;
  if(task_size < eulerX.size()) task_size = eulerX.size();
  if(task_size < eulerY.size()) task_size = eulerY.size();
  if(task_size < eulerZ.size()) task_size = eulerZ.size();
  if(task_size < ro.size()) task_size = ro.size();
  result.resize(task_size);
  if(task_size < 10000 /* pex margin */) {
    for(Size index = 0; index < task_size; index++) {
      Math_Quat_setFromEulerAngles_task(index, result, eulerX, eulerY, eulerZ, ro);
    }
  } else {
    Math_Quat_setFromEulerAngles_task<<<task_size>>>(result, eulerX, eulerY, eulerZ, ro);
  }
}
"
  }