//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

/**
The :kl-ref:`Vec4_c` type represents a vector with 4 components. The :kl-ref:`Vec4_c` is also used as the row type for the :kl-ref:`Mat44`.

\rst
  .. kl-example:: Vec4_c

    Vec4_c v(0.0, 0.0, 0.0, 0.0);

\endrst
\note Vec4_c utilizes the KL :ref:`vector_functions`
\seealso Vec2, Vec3_c
\dfgTypeColor Color(255, 242, 0)
\dfgPresetColor Color(99, 129, 92)
*/
struct Vec4_c
{
  Complex x;
  Complex y;
  Complex z;
  Complex t;
};

/// Default constructor
inline Vec4_c() {
  this.set(0, 0, 0, 0);
}

/// Constructor from scalar components
inline Vec4_c(Complex x, Complex y, Complex z, Complex t) {
  this.set(x, y, z, t);
}


/// Setter from scalar components
inline Vec4_c.set!(Complex x, Complex y, Complex z, Complex t) {
  this.x = x;
  this.y = y;
  this.z = z;
  this.t = t;
}

/// Setter from same scalar for all components
inline Vec4_c.set!(Complex value) {
  this.x = value;
  this.y = value;
  this.z = value;
  this.t = value;
}

/// Constructor with same scalar for all components
inline Vec4_c(Complex value) {
  this.set(value);
}

/// Setter from a Vec3_c (t = 1.0)
inline Vec4_c.set!(Vec3_c v) {
  this.x = v.x;
  this.y = v.y;
  this.z = v.z;
  this.t = Complex(1.0);
}


/// Sets all components of this vec to 0.0
inline Vec4_c.setNull!() {
  this.x = this.y = this.z = this.t = Complex();
}

/// Returns true if this vector is the same as another one
inline Boolean Vec4_c.equal(in Vec4_c other) {
  return this.x == other.x && this.y == other.y && this.z == other.z && this.t == other.t;
}

/// Returns true if this vector is the same as another one
/// (given a precision)
inline Boolean Vec4_c.almostEqual(in Vec4_c other, in Float32 precision) {
  return this.x.almostEqual(other.x)
    && this.y.almostEqual(other.y)
    && this.z.almostEqual(other.z)
    && this.t.almostEqual(other.t);
}

/// Returns true if this vector is the same as another one
/// (using a default precision)
inline Boolean Vec4_c.almostEqual(in Vec4_c other) {
  return this.almostEqual(other, PRECISION);
}

/// Returns a Vec3_c containing the X, Y and Z components.
inline Vec3_c Vec4_c.xyz() {
  return Vec3_c(this.x, this.y, this.z);
}

/// Returns the component of this vector by index
inline Complex Vec4_c.component( Size i ) {
  if(i == 0)
    return this.x;
  else if(i == 1)
    return this.y;
  else if(i == 2)
    return this.z;
  else
    return this.t;
}

/// Sets the component of this vector by index
inline Vec4_c.setComponent!( Size i, Complex v ) {
  if(i == 0)
    this.x = v;
  else if(i == 1)
    this.y = v;
  else if(i == 2)
    this.z = v;
  else
    this.t = v;
}

/// Equals operator
inline Boolean == (Vec4_c a, Vec4_c b) {
  return a.x == b.x && a.y == b.y && a.z == b.z && a.t == b.t;
}

/// Not equals operator
inline Boolean != (Vec4_c a, Vec4_c b) {
  return a.x != b.x || a.y != b.y || a.z != b.z || a.t != b.t;
}

/// Hash for this value
inline UInt32 Vec4_c.hash() {
  return this.x.hash() ^ this.y.hash() ^ this.z.hash() ^ this.t.hash();
}

/// Adds to vectors
inline Vec4_c + (Vec4_c a, Vec4_c b) {
  return Vec4_c(a.x + b.x, a.y + b.y, a.z + b.z, a.t + b.t);
}

/// Adds a vector to this one
inline Vec4_c. += (Vec4_c other) {
  this = this + other;
}

/// Subtracts two vectors
inline Vec4_c - (Vec4_c a, Vec4_c b) {
  return Vec4_c(a.x - b.x, a.y - b.y, a.z - b.z, a.t - b.t);
}

/// Subtracts a vector from this one
inline Vec4_c. -= (Vec4_c other) {
  this = this - other;
}

/// Multiplies a scalar and a vector
/// \dfgPresetDefault a 1
inline Vec4_c * (Complex a, Vec4_c b) {
  return Vec4_c(a * b.x, a * b.y, a * b.z, a * b.t);
}

/// Multiplies a vector and a scalar
/// \dfgPresetDefault b 1
inline Vec4_c * (Vec4_c a, Complex b) {
  return Vec4_c(a.x * b, a.y * b, a.z * b, a.t * b);
}

/// Multiplies two vectors
/// \dfgPresetDefault b {"x": 1, "y": 1, "z": 1, "t": 1}
inline Vec4_c * (Vec4_c a, Vec4_c b) {
  return Vec4_c(a.x * b.x, a.y * b.y, a.z * b.z, a.t * b.t);
}

/// Multiplies this vector with a scalar
/// \dfgPresetDefault other 1
inline Vec4_c. *= (Complex other) {
  this = this * other;
}

/// Multiplies this vector with another one
/// \dfgPresetDefault other {"x": 1, "y": 1, "z": 1, "t": 1}
inline Vec4_c. *= (Vec4_c other) {
  this = this * other;
}

/// Divides two vectors
/// \dfgPresetDefault b {"x": 1, "y": 1, "z": 1, "t": 1}
inline Vec4_c / (Vec4_c a, Vec4_c b) {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( b.x ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( b.x, "Vec4_c.divide: b.x" );
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( b.y ) )
    Math_reportBadDivisor( b.y, "Vec4_c.divide: b.y" );
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( b.z ) )
    Math_reportBadDivisor( b.z, "Vec4_c.divide: b.z" );
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( b.t ) )
    Math_reportBadDivisor( b.t, "Vec4_c.divide: b.t" );
  return Vec4_c(a.x / b.x, a.y / b.y, a.z / b.z, a.t / b.t);
}

/// Divides a vector by a scalar
/// \dfgPresetDefault b 1
inline Vec4_c / (Vec4_c a, Complex b) {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( b ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( b, "Vec4_c.divide" );
  return Vec4_c(a.x / b, a.y / b, a.z / b, a.t / b);
}

/// Divides this vector with a scalar
/// \dfgPresetDefault other 1
inline Vec4_c. /= (Complex other) {
  this = this / other;
}

/// Divides this vector with another one
/// \dfgPresetDefault other {"x": 1, "y": 1, "z": 1, "t": 1}
inline Vec4_c. /= (Vec4_c other) {
  this = this / other;
}

/// Overload method for the add operator
inline Vec4_c Vec4_c.add(Vec4_c other) {
  return this + other;
}

/// Overload method for the subtract operator
inline Vec4_c Vec4_c.subtract(Vec4_c other) {
  return this - other;
}

/// Overload method for the multiply operator
/// \dfgPresetDefault other {"x": 1, "y": 1, "z": 1, "t": 1}
inline Vec4_c Vec4_c.multiply(Vec4_c other) {
  return this * other;
}

/// Overload method for the divide operator
/// \dfgPresetDefault other {"x": 1, "y": 1, "z": 1, "t": 1}
inline Vec4_c Vec4_c.divide(Vec4_c other) {
  return this / other;
}

/// Returns the product of this vector and a scalar
/// \dfgPresetDefault other 1
inline Vec4_c Vec4_c.multiplyComplex(Complex other) {
  return this * other;
}

/// Returns the division of this vector and a scalar
/// \dfgPresetDefault other 1
inline Vec4_c Vec4_c.divideComplex(Complex other) {
  return this / other;
}

/// Returns the negated version of this vector
inline Vec4_c Vec4_c.negate() {
  return Vec4_c(-this.x, - this.y, - this.z, - this.t);
}

/// Returns the inversed version of this vector
inline Vec4_c Vec4_c.inverse() {
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( this.x ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( this.x, "Vec4_c.inverse: this.x" );
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( this.y ) )
    Math_reportBadDivisor( this.y, "Vec4_c.inverse: this.y" );
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( this.z ) )
    Math_reportBadDivisor( this.z, "Vec4_c.inverse: this.z" );
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( this.t ) )
    Math_reportBadDivisor( this.t, "Vec4_c.inverse: this.t" );
  return Vec4_c(1.0/this.x, 1.0/this.y, 1.0/this.z, 1.0/this.t);
}

/// Returns the dot product of this vector and another one
inline Complex Vec4_c.dot(in Vec4_c other) {
  return this.x * other.x + this.y * other.y + this.z * other.z + this.t * other.t;
}

/// Returns the squared length of this vector
inline Complex Vec4_c.lengthSquared() {
  return this.dot(this);
}

/// Returns the length of this vector
inline Complex Vec4_c.length() {
  return sqrt(this.lengthSquared());
}

/// Returns the unit vector of this one
inline Vec4_c Vec4_c.unit() {
  Complex n = this.length();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Vec4_c.unit" );
  return this / n;
}

/// Sets this vector to its unit vector
/// and returns its previous length
inline Complex Vec4_c.setUnit!() {
  Complex n = this.length();
  if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( n ) )//Perf: check first to avoid building the report string
    Math_reportBadDivisor( n, "Vec4_c.setUnit" );
  this /= n;
  return n;
}

inline Vec4_c.normalize!() {
  this.setUnit();
}


/// Returns the distance of this vector to the given vector
inline Complex Vec4_c.distanceTo(in Vec4_c other) {
  return (this - other).length();
}

/// Linearly interpolates this vector with the given vector
/// based on a scalar blend value (0.0 to 1.0)
inline Vec4_c Vec4_c.linearInterpolate(in Vec4_c other, in Complex t) {
  return this + ((other - this) * t);
}

/// Returns a homogeneous Vec3_c
inline Vec3_c Vec4_c.makeHomogeneousVec3_c() {
  if( this.t != Complex(1.0) ) {
    if( Fabric_Guarded && !Fabric_OnGPU && Math_badDivisor( this.t ) )//Perf: check first to avoid building the report string
      Math_reportBadDivisor( this.t, "Vec4_c.makeHomogeneousVec3_c" );
    Complex invT = 1.0 / this.t;
    return Vec3_c(this.x * invT, this.y * invT, this.z * invT);
  }
  else
    return Vec3_c(this.x, this.y, this.z);
}

/// Returns the X, Y and Z components as Vec3_c
inline Vec3_c Vec4_c.toVec3_c(){
  return Vec3_c(this.x, this.y, this.z);
}


