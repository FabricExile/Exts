/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */
/**
The :kl-ref:`RGBA` type represents a 8 bit 4 channel color value, storing the components ordered as red, green, blue and alpha as Byte values.

\rst
  .. kl-example:: RGBA

    RGBA red(255, 0, 0, 255);

\endrst
\seealso Color, ARGB
\dfgTypeColor Color(255, 0, 0)
\dfgPresetColor Color(99, 129, 92)
*/

struct RGBA
{
  Byte r;
  Byte g;
  Byte b;
  Byte a;
};

/// Default constructor from component wise bytes
inline RGBA(Byte r, Byte g, Byte b, Byte a) {
  this.r = r;
  this.g = g;
  this.b = b;
  this.a = a;
}

/// Constructor from component wise integers.
/// \note Automatic casting would mean that the default constructor above would be called, but would also generate warnings due to the loss of precision
inline RGBA(Integer r, Integer g, Integer b, Integer a) {
  this.r = Byte(r);
  this.g = Byte(g);
  this.b = Byte(b);
  this.a = Byte(a);
}

/// Constructor from RGB
inline RGBA(RGB r) {
  this.r = r.r;
  this.g = r.g;
  this.b = r.b;
  this.a = 255;
}

/// Constructor from Color
inline RGBA(Color c) {
  this = c.toRGBA();
}

/// Returns true if this RGBA is the same as another one
inline Boolean RGBA.equal(RGBA other) {
  return this.r == other.r && this.g == other.g && this.b == other.b && this.a == other.a;
}

/// Equal operator
inline Boolean == (RGBA a, RGBA b) {
  return a.r == b.r && a.g == b.g && a.b == b.b && a.a == b.a;
}

/// Not equal operator
inline Boolean != (RGBA a, RGBA b) {
  return a.r != b.r || a.g != b.g || a.b != b.b || a.a != b.a;
}

/// Hash for this value
inline UInt32 RGBA.hash() {
  return (this.r << 24) | (this.g << 16) | (this.b << 8) | this.a;
}

/// Adds two RGBA colors
inline RGBA + (RGBA a, RGBA b) {
  return RGBA(
    Integer(a.r) + Integer(b.r), 
    Integer(a.g) + Integer(b.g), 
    Integer(a.b) + Integer(b.b), 
    Integer(a.a) + Integer(b.a)
    );
}

/// Adds another RGBA color to this one
inline RGBA. += (RGBA other) {
  this = this + other;
}

/// Subtracts two RGBA colors
inline RGBA - (RGBA a, RGBA b) {
  Integer rval = Integer(a.r) - Integer(b.r);
  Integer gval = Integer(a.g) - Integer(b.g);
  Integer bval = Integer(a.b) - Integer(b.b);
  Integer aval = Integer(a.a) - Integer(b.a);
  if(rval < 0) rval = 0;
  if(gval < 0) gval = 0;
  if(bval < 0) bval = 0;
  if(aval < 0) aval = 0;
  return RGBA(rval, gval, bval, aval);
}

/// Subtracts another RGBA color from this one
inline RGBA. -= (RGBA other) {
  this = this - other;
}

/// Multiplies a scalar with a RGBA color
/// \dfgPresetDefault a 1.0
inline RGBA * (Scalar a, RGBA b) {
  return RGBA(
    Integer(Scalar(Integer(b.r)) * a),
    Integer(Scalar(Integer(b.g)) * a),
    Integer(Scalar(Integer(b.b)) * a),
    Integer(Scalar(Integer(b.a)) * a)
    );
}

/// Multiplies a RGBA color with a scalar
/// \dfgPresetDefault b 1.0
inline RGBA * (RGBA a, Scalar b) {
  // \note castring Byte -> Scalar generated incorrect results.
  return RGBA(
    Integer(Scalar(Integer(a.r)) * b), 
    Integer(Scalar(Integer(a.g)) * b), 
    Integer(Scalar(Integer(a.b)) * b), 
    Integer(Scalar(Integer(a.a)) * b)
    );
}

/// Multiplies two RGBA colors
/// \dfgPresetDefault b {"r": 1, "g": 1, "b": 1, "a": 1}
inline RGBA * (RGBA a, RGBA b) {
  return RGBA(
    Integer(Scalar(Integer(a.r)) * Scalar(Integer(b.r))), 
    Integer(Scalar(Integer(a.g)) * Scalar(Integer(b.g))), 
    Integer(Scalar(Integer(a.b)) * Scalar(Integer(b.b))), 
    Integer(Scalar(Integer(a.a)) * Scalar(Integer(b.a)))
    );
}

/// Multiplies a scalar with this RGBA color
/// \dfgPresetDefault other 1.0
inline RGBA. *= (Scalar other) {
  this = this * other;
}

/// Multiplies a this RGBA color with another one
/// \dfgPresetDefault other {"r": 1, "g": 1, "b": 1, "a": 1}
inline RGBA. *= (RGBA other) {
  this = this * other;
}

/// Overload method for the add operator
inline RGBA RGBA.add(RGBA other) {
  return this + other;
}

/// Overload method for the subtract operator
inline RGBA RGBA.subtract(RGBA other) {
  return this - other;
}

/// Overload method for the multiply operator
/// \dfgPresetDefault other {"r": 1, "g": 1, "b": 1, "a": 1}
inline RGBA RGBA.multiply(RGBA other) {
  return this * other;
}

/// Returns the product of this RGBA color and a scalar
/// \dfgPresetDefault other 1.0
inline RGBA RGBA.multiplyScalar(Scalar other) {
  return this * other;
}

/// interpolates two RGBA colors given a scalar blend value (0.0 to 1.0)
inline RGBA RGBA.linearInterpolate(in RGBA other, in Scalar t) {
  // Byte values cannot be negative, so here we have inlined the sbutraction inline so that we can interpollate down towards zero
  return RGBA( Integer(this.r) + Integer((Scalar(Integer(other.r) - Integer(this.r)) * t)),
               Integer(this.g) + Integer((Scalar(Integer(other.g) - Integer(this.g)) * t)),
               Integer(this.b) + Integer((Scalar(Integer(other.b) - Integer(this.b)) * t)),
               Integer(this.a) + Integer((Scalar(Integer(other.a) - Integer(this.a)) * t)));
}

/// Returns the minimum of two RGBA values
/// \dfgPresetColor Color(99, 129, 92)
inline RGBA Math_min(in RGBA val1, in RGBA val2){
  RGBA result;
  result.r = Math_min(val1.r, val2.r);
  result.g = Math_min(val1.g, val2.g);
  result.b = Math_min(val1.b, val2.b);
  result.a = Math_min(val1.a, val2.a);
  return result;
}

/// Returns the minimum of two RGBA values
/// \dfgPresetColor Color(99, 129, 92)
inline RGBA Math_max(in RGBA val1, in RGBA val2){
  RGBA result;
  result.r = Math_max(val1.r, val2.r);
  result.g = Math_max(val1.g, val2.g);
  result.b = Math_max(val1.b, val2.b);
  result.a = Math_max(val1.a, val2.a);
  return result;
}

/// Clamps a RGBA value by min and max
/// \dfgPresetColor Color(99, 129, 92)
inline RGBA Math_clamp(in RGBA val, in Scalar minval, in Scalar maxval){
  RGBA result;
  result.r = Math_clamp(val.r, minval * 255, maxval * 255);
  result.g = Math_clamp(val.g, minval * 255, maxval * 255);
  result.b = Math_clamp(val.b, minval * 255, maxval * 255);
  result.a = Math_clamp(val.a, minval * 255, maxval * 255);
  return result;
}

/// \dfgPresetColor Color(99, 129, 92)
/// \dfgPresetFolder Random
/// \dfgCreateArrayPreset false
/// \dfgPresetDefault min 0.0
/// \dfgPresetDefault min 1.0
inline RGBA mathRandomRGBA(Size seed, Size index, Float32 min, Float32 max) {
  RGBA result;
  result.r = 255 * mathRandomScalar(seed, index+0, min, max);
  result.g = 255 * mathRandomScalar(seed, index+1, min, max);
  result.b = 255 * mathRandomScalar(seed, index+2, min, max);
  result.a = 255;
  return result;
}
