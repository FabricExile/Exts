
/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/**
The Pose is used to store the pose of a :kl-ref:`Character`. the Pose object lazily builds the global space transforms of bones as they are requested. 

*/

require Math;


/**
  The Pose object stores the pose of a character, based on a given skeleton.
  \brief An object storing the pose of a Character
  \seealso Character, Skeleton

\rst
  .. kl-fileexample:: ${FABRIC_SCENE_GRAPH_DIR}/Test/Exts/Characters/pose.kl
\endrst

  Custom Pose objects can be created that provide other methods for computing the 
  pose of a character. For example, a pose object could pull the pose data directly
  from a cache file, or compute it using a simulation algorithm. 

\rst
  .. kl-fileexample:: ${FABRIC_SCENE_GRAPH_DIR}/Test/Exts/Characters/customPoseObject.kl
\endrst

*/
object Pose : IPose {
  /// The skeleton that this pose is based on.
  Skeleton skeleton;

  /// The model space transforms for each bone in the skeleton
  Xfo xfos[];

  /// A flag for each item in the array above indicating that the Xfo has been computed.
  Boolean valid[];

  /// The intenral version counter
  UInt64 version;
};

/// Standard constructor taking a skeleton
/// \param skeleton The skeleton that the pose will be based on
function Pose(Skeleton skeleton){
  this.skeleton = skeleton;
  this.version = mathRandomInteger(2353342, UInt32(this.skeleton.getVersion()));
  this.reset();
}

/// Increments the internal version counter.
function Pose.incrementVersion!(){
  this.version += 1;
}

/// Returns the internal version counter.
function UInt64 Pose.getVersion(){
  return this.version;
}

/// Reset the pose back to the reference pose stored in the skeleton.
function Pose.reset!(){
  this.xfos.resize(this.skeleton.getNumBones());
  this.valid.resize(this.skeleton.getNumBones());
  for(Index i = 0; i < this.skeleton.getNumBones(); ++i){
    this.xfos[i] = this.skeleton.getBone(i).referencePose;
    this.valid[i] = false;
  }
  this.incrementVersion();
}

/// Updates the internal cache for a given bone. 
/// \internal
function Pose.updateXfo!(Index index){
  Integer parentIndex = this.skeleton.getBone(index).parentIndex;
  if(parentIndex >= 0){
    if(!this.valid[index])
      this.updateXfo(parentIndex);
    this.xfos[index] = this.xfos[parentIndex] * this.skeleton.getReferenceLocalPose(index);
  }
  else
    this.xfos[index] = this.skeleton.getReferencePose(index);
  this.valid[index] = true;
}

/// Get the pose of a bone in the skeleton using its index.
/// \note Lazily computes the pose if the cache is not valid.  
function Xfo Pose.getBoneXfo!(Index index){
  if(!this.valid[index])
    this.updateXfo(index);
  return this.xfos[index];
}

/// Set the pose of a bone in the skeleton using its index.
/// \note This marks the joint as valid. 
function Pose.setBoneXfo!(Index index, Xfo xfo){
  // TODO: invalidate chidren joints...
  this.xfos[index] = xfo;
  this.valid[index] = true;
}


/// Generates a Description string of this pose.
/// \param indent The indentation to use when generating the string. 
function String Pose.getDesc(String indent, Boolean includeXfos) {
  String desc;
  desc += indent + "Pose { \n";
  if(includeXfos){
    desc += indent + "  xfos:[ \n";
    for(Integer i=0; i<this.xfos.size(); i++){
      desc += indent + "  " + unitTestPrint(this.xfos[i]) + "\n";
    }
    desc += indent + "  ]\n";
  }
  desc += indent + "}";
  return desc;
}

/// Generates a Description string of this Pose.
function String Pose.getDesc() {
  return this.getDesc("", true);
}
