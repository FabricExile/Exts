
/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/// \internal
function SInt32[] BaseGeometry.getIntegerAttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  SInt32 values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  IntegerAttribute cast = attr;
  if(cast == null)
    return values;

  type = "SInt32";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for IntegerAttribute.");
      return values;
    }
  }

  return values;
}

/// \internal
function UInt32[] BaseGeometry.getUInt32AttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  UInt32 values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  UInt32Attribute cast = attr;
  if(cast == null)
    return values;

  type = "UInt32";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for UInt32Attribute.");
      return values;
    }
  }

  return values;
}

/// \internal
function Float32[] BaseGeometry.getScalarAttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  Float32 values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  ScalarAttribute cast = attr;
  if(cast == null)
    return values;

  type = "Float32";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for ScalarAttribute.");
      return values;
    }
  }

  return values;
}

/// \internal
function Vec2[] BaseGeometry.getVec2AttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  Vec2 values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  Vec2Attribute cast = attr;
  if(cast == null)
    return values;

  type = "Vec2";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for Vec2Attribute.");
      return values;
    }
  }

  return values;
}

/// \internal
function Vec3[] BaseGeometry.getVec3AttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  Vec3 values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  Vec3Attribute cast = attr;
  if(cast == null)
    return values;

  type = "Vec3";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for Vec3Attribute.");
      return values;
    }
  }

  return values;
}

/// \internal
function Vec4[] BaseGeometry.getVec4AttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  Vec4 values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  Vec4Attribute cast = attr;
  if(cast == null)
    return values;

  type = "Vec4";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for Vec4Attribute.");
      return values;
    }
  }

  return values;
}

/// \internal
function Color[] BaseGeometry.getColorAttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  Color values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  ColorAttribute cast = attr;
  if(cast == null)
    return values;

  type = "Color";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for ColorAttribute.");
      return values;
    }
  }

  return values;
}

/// \internal
function RGB[] BaseGeometry.getRGBAttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  RGB values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  RGBAttribute cast = attr;
  if(cast == null)
    return values;

  type = "RGB";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for RGBAttribute.");
      return values;
    }
  }

  return values;
}

/// \internal
function RGBA[] BaseGeometry.getRGBAAttributeValueArray(
  GeometryAttribute attr,
  SInt32 mode,
  UInt32 indices[],
  io String type
) {
  type = "";

  Size vertexCount;
  Size faceCount;
  Size faceCornerTotalCount;
  Size resultSize;
  UInt32 idxs[] = indices;

  RGBA values[];

  if(!this.getAttributeValueArray_CheckIndex(
    mode,
    vertexCount,
    faceCount,
    faceCornerTotalCount,
    resultSize,
    idxs
    ))
    return values;

  RGBAAttribute cast = attr;
  if(cast == null)
    return values;

  type = "RGBA";
  values.resize(resultSize);

  PolygonMesh mesh = null;
  if(mode > 0)
    mesh = this;

  Index idx;
  switch(mode)
  {
    case 0: // per vertex
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;
        values[i] = cast.values[idx];
      }
      break;
    }
    case 1: // per face
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= faceCount)
          continue;

        Size size = mesh.getPolygonSize(idx);
        for(Size j=0;j<size;j++) {
          Index idx2 = mesh.getPolygonAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    case 2: // per face corner
    {
      for(Size i=0;i<resultSize;i++)
      {
        values[i] = cast.values[idxs[i]];
      }
      break;
    }
    case 3: // per vertex (average)
    {
      for(Size i=0;i<resultSize;i++)
      {
        idx = idxs.size() > 0 ? idxs[i] : i;
        if(idx >= vertexCount)
          continue;

        Size size = mesh.getPointPolygonCount(idx);
        for(Size j=0;j<size;j++) {
          Size idx2 = mesh.getPointAttributeIndex(idx, j);
          values[i] += cast.values[idx2];
        }
        values[i] *= 1.0 / Float32(size);
      }
      break;
    }
    default:
    {
      report("Error: Unsupport GetValueArray mode for RGBAAttribute.");
      return values;
    }
  }

  return values;
}
