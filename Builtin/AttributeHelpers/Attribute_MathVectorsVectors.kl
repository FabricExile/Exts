
/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */
operator _MathVectors_Vec2_Angle_Vec2<<<i>>>(
  io Float32 result[],
  Vec2 a[],
  Vec2 b[],
  Boolean normalize,
  Vec2 range,
  Vec2 typedValue,
  Boolean useSingleValue
  ) {
  Vec2 bb = useSingleValue ? typedValue : Vec2(b[i]);
  result[i] = a[i].unitsAngleTo(bb);
  if(normalize && range.y != range.x)
  {
    Float32 v = Math_clamp(result[i], range.x < range.y ? range.x : range.y, range.x < range.y ? range.y : range.x);
    result[i] = (v - range.x) / (range.y - range.x);
  }
}

operator _MathVectors_Vec2_Distance_Vec2<<<i>>>(
  io Float32 result[],
  Vec2 a[],
  Vec2 b[],
  Boolean normalize,
  Vec2 range,
  Vec2 typedValue,
  Boolean useSingleValue
  ) {
  Vec2 bb = useSingleValue ? typedValue : Vec2(b[i]);
  result[i] = (a[i] - bb).length();
  if(normalize && range.y != range.x)
  {
    Float32 v = Math_clamp(result[i], range.x < range.y ? range.x : range.y, range.x < range.y ? range.y : range.x);
    result[i] = (v - range.x) / (range.y - range.x);
  }
}

operator _MathVectors_Vec2_Dot_Vec2<<<i>>>(
  io Float32 result[],
  Vec2 a[],
  Vec2 b[],
  Boolean normalize,
  Vec2 range,
  Vec2 typedValue,
  Boolean useSingleValue
  ) {
  Vec2 bb = useSingleValue ? typedValue : Vec2(b[i]);
  result[i] = a[i].dot(bb);
  if(normalize && range.y != range.x)
  {
    Float32 v = Math_clamp(result[i], range.x < range.y ? range.x : range.y, range.x < range.y ? range.y : range.x);
    result[i] = (v - range.x) / (range.y - range.x);
  }
}

/// \internal
private function Boolean BaseGeometry.performMathVectorsVec2Attribute!(
  SInt32 mode,
  io GeometryAttributes attributes,
  GeometryAttribute attrA,
  GeometryAttribute attrB,
  io ScalarAttribute attrResult,
  Boolean normalize,
  Vec2 range,
  Boolean useSingleValue,
  Vec2 typedValue
) {
  Vec2Attribute castA = attrA;
  if(castA == null)
    return false;
  Vec2 aValues[] = castA.values;

  if(attrResult == null)
    return false;
  Float32 resultValues[] = attrResult.values;

  switch(mode)
  {
    case 0: // Angle
    {
      if(useSingleValue)
      {
        if(aValues.size() < Attribute_Pex_Margin)
        {
          for(Index index=0;index<aValues.size();index++)
          {
            _MathVectors_Vec2_Angle_Vec2(
              index, 
              resultValues,
              aValues,
              aValues, // ignore b
              normalize,
              range,
              typedValue,
              true
            );
          }
        }
        else
        {
          _MathVectors_Vec2_Angle_Vec2<<<aValues.size()>>>(
            resultValues,
            aValues,
            aValues, // ignore b
            normalize,
            range,
            typedValue,
            true
          );
        }
      }
      else
      {
        switch(attrB.type())
        {
          case Vec2Attribute:
          {
            Vec2Attribute castB = attrB;
            if(castB == null)
              return false;

            Vec2 bValues[] = castB.values;
            if(aValues.size() < Attribute_Pex_Margin)
            {
              for(Index index=0;index<aValues.size();index++)
              {
                _MathVectors_Vec2_Angle_Vec2(
                  index, 
                  resultValues,
                  aValues,
                  bValues,
                  normalize,
                  range,
                  typedValue,
                  false
                );
              }
            }
            else
            {
              _MathVectors_Vec2_Angle_Vec2<<<aValues.size()>>>(
                resultValues,
                aValues,
                bValues,
                normalize,
                range,
                typedValue,
                false
              );
            }
            break;
          }

          default:
          {
            report('Error: MathVectors: B attribute of type '+attrB.type()+' not supported for this mode.');
            return false;
          }
        }
      }

      break;
    }
    case 1: // Distance
    {
      if(useSingleValue)
      {
        if(aValues.size() < Attribute_Pex_Margin)
        {
          for(Index index=0;index<aValues.size();index++)
          {
            _MathVectors_Vec2_Distance_Vec2(
              index, 
              resultValues,
              aValues,
              aValues, // ignore b
              normalize,
              range,
              typedValue,
              true
            );
          }
        }
        else
        {
          _MathVectors_Vec2_Distance_Vec2<<<aValues.size()>>>(
            resultValues,
            aValues,
            aValues, // ignore b
            normalize,
            range,
            typedValue,
            true
          );
        }
      }
      else
      {
        switch(attrB.type())
        {
          case Vec2Attribute:
          {
            Vec2Attribute castB = attrB;
            if(castB == null)
              return false;

            Vec2 bValues[] = castB.values;
            if(aValues.size() < Attribute_Pex_Margin)
            {
              for(Index index=0;index<aValues.size();index++)
              {
                _MathVectors_Vec2_Distance_Vec2(
                  index, 
                  resultValues,
                  aValues,
                  bValues,
                  normalize,
                  range,
                  typedValue,
                  false
                );
              }
            }
            else
            {
              _MathVectors_Vec2_Distance_Vec2<<<aValues.size()>>>(
                resultValues,
                aValues,
                bValues,
                normalize,
                range,
                typedValue,
                false
              );
            }
            break;
          }

          default:
          {
            report('Error: MathVectors: B attribute of type '+attrB.type()+' not supported for this mode.');
            return false;
          }
        }
      }

      break;
    }
    case 2: // Dot
    {
      if(useSingleValue)
      {
        if(aValues.size() < Attribute_Pex_Margin)
        {
          for(Index index=0;index<aValues.size();index++)
          {
            _MathVectors_Vec2_Dot_Vec2(
              index, 
              resultValues,
              aValues,
              aValues, // ignore b
              normalize,
              range,
              typedValue,
              true
            );
          }
        }
        else
        {
          _MathVectors_Vec2_Dot_Vec2<<<aValues.size()>>>(
            resultValues,
            aValues,
            aValues, // ignore b
            normalize,
            range,
            typedValue,
            true
          );
        }
      }
      else
      {
        switch(attrB.type())
        {
          case Vec2Attribute:
          {
            Vec2Attribute castB = attrB;
            if(castB == null)
              return false;

            Vec2 bValues[] = castB.values;
            if(aValues.size() < Attribute_Pex_Margin)
            {
              for(Index index=0;index<aValues.size();index++)
              {
                _MathVectors_Vec2_Dot_Vec2(
                  index, 
                  resultValues,
                  aValues,
                  bValues,
                  normalize,
                  range,
                  typedValue,
                  false
                );
              }
            }
            else
            {
              _MathVectors_Vec2_Dot_Vec2<<<aValues.size()>>>(
                resultValues,
                aValues,
                bValues,
                normalize,
                range,
                typedValue,
                false
              );
            }
            break;
          }

          default:
          {
            report('Error: MathVectors: B attribute of type '+attrB.type()+' not supported for this mode.');
            return false;
          }
        }
      }

      break;
    }
  }


  attrResult.incrementVersion();
  return true;
}
operator _MathVectors_Vec3_Angle_Vec3<<<i>>>(
  io Float32 result[],
  Vec3 a[],
  Vec3 b[],
  Boolean normalize,
  Vec2 range,
  Vec3 typedValue,
  Boolean useSingleValue
  ) {
  Vec3 bb = useSingleValue ? typedValue : Vec3(b[i]);
  result[i] = a[i].unitsAngleTo(bb);
  if(normalize && range.y != range.x)
  {
    Float32 v = Math_clamp(result[i], range.x < range.y ? range.x : range.y, range.x < range.y ? range.y : range.x);
    result[i] = (v - range.x) / (range.y - range.x);
  }
}

operator _MathVectors_Vec3_Distance_Vec3<<<i>>>(
  io Float32 result[],
  Vec3 a[],
  Vec3 b[],
  Boolean normalize,
  Vec2 range,
  Vec3 typedValue,
  Boolean useSingleValue
  ) {
  Vec3 bb = useSingleValue ? typedValue : Vec3(b[i]);
  result[i] = (a[i] - bb).length();
  if(normalize && range.y != range.x)
  {
    Float32 v = Math_clamp(result[i], range.x < range.y ? range.x : range.y, range.x < range.y ? range.y : range.x);
    result[i] = (v - range.x) / (range.y - range.x);
  }
}

operator _MathVectors_Vec3_Dot_Vec3<<<i>>>(
  io Float32 result[],
  Vec3 a[],
  Vec3 b[],
  Boolean normalize,
  Vec2 range,
  Vec3 typedValue,
  Boolean useSingleValue
  ) {
  Vec3 bb = useSingleValue ? typedValue : Vec3(b[i]);
  result[i] = a[i].dot(bb);
  if(normalize && range.y != range.x)
  {
    Float32 v = Math_clamp(result[i], range.x < range.y ? range.x : range.y, range.x < range.y ? range.y : range.x);
    result[i] = (v - range.x) / (range.y - range.x);
  }
}

/// \internal
private function Boolean BaseGeometry.performMathVectorsVec3Attribute!(
  SInt32 mode,
  io GeometryAttributes attributes,
  GeometryAttribute attrA,
  GeometryAttribute attrB,
  io ScalarAttribute attrResult,
  Boolean normalize,
  Vec2 range,
  Boolean useSingleValue,
  Vec3 typedValue
) {
  Vec3Attribute castA = attrA;
  if(castA == null)
    return false;
  Vec3 aValues[] = castA.values;

  if(attrResult == null)
    return false;
  Float32 resultValues[] = attrResult.values;

  switch(mode)
  {
    case 0: // Angle
    {
      if(useSingleValue)
      {
        if(aValues.size() < Attribute_Pex_Margin)
        {
          for(Index index=0;index<aValues.size();index++)
          {
            _MathVectors_Vec3_Angle_Vec3(
              index, 
              resultValues,
              aValues,
              aValues, // ignore b
              normalize,
              range,
              typedValue,
              true
            );
          }
        }
        else
        {
          _MathVectors_Vec3_Angle_Vec3<<<aValues.size()>>>(
            resultValues,
            aValues,
            aValues, // ignore b
            normalize,
            range,
            typedValue,
            true
          );
        }
      }
      else
      {
        switch(attrB.type())
        {
          case Vec3Attribute:
          {
            Vec3Attribute castB = attrB;
            if(castB == null)
              return false;

            Vec3 bValues[] = castB.values;
            if(aValues.size() < Attribute_Pex_Margin)
            {
              for(Index index=0;index<aValues.size();index++)
              {
                _MathVectors_Vec3_Angle_Vec3(
                  index, 
                  resultValues,
                  aValues,
                  bValues,
                  normalize,
                  range,
                  typedValue,
                  false
                );
              }
            }
            else
            {
              _MathVectors_Vec3_Angle_Vec3<<<aValues.size()>>>(
                resultValues,
                aValues,
                bValues,
                normalize,
                range,
                typedValue,
                false
              );
            }
            break;
          }

          default:
          {
            report('Error: MathVectors: B attribute of type '+attrB.type()+' not supported for this mode.');
            return false;
          }
        }
      }

      break;
    }
    case 1: // Distance
    {
      if(useSingleValue)
      {
        if(aValues.size() < Attribute_Pex_Margin)
        {
          for(Index index=0;index<aValues.size();index++)
          {
            _MathVectors_Vec3_Distance_Vec3(
              index, 
              resultValues,
              aValues,
              aValues, // ignore b
              normalize,
              range,
              typedValue,
              true
            );
          }
        }
        else
        {
          _MathVectors_Vec3_Distance_Vec3<<<aValues.size()>>>(
            resultValues,
            aValues,
            aValues, // ignore b
            normalize,
            range,
            typedValue,
            true
          );
        }
      }
      else
      {
        switch(attrB.type())
        {
          case Vec3Attribute:
          {
            Vec3Attribute castB = attrB;
            if(castB == null)
              return false;

            Vec3 bValues[] = castB.values;
            if(aValues.size() < Attribute_Pex_Margin)
            {
              for(Index index=0;index<aValues.size();index++)
              {
                _MathVectors_Vec3_Distance_Vec3(
                  index, 
                  resultValues,
                  aValues,
                  bValues,
                  normalize,
                  range,
                  typedValue,
                  false
                );
              }
            }
            else
            {
              _MathVectors_Vec3_Distance_Vec3<<<aValues.size()>>>(
                resultValues,
                aValues,
                bValues,
                normalize,
                range,
                typedValue,
                false
              );
            }
            break;
          }

          default:
          {
            report('Error: MathVectors: B attribute of type '+attrB.type()+' not supported for this mode.');
            return false;
          }
        }
      }

      break;
    }
    case 2: // Dot
    {
      if(useSingleValue)
      {
        if(aValues.size() < Attribute_Pex_Margin)
        {
          for(Index index=0;index<aValues.size();index++)
          {
            _MathVectors_Vec3_Dot_Vec3(
              index, 
              resultValues,
              aValues,
              aValues, // ignore b
              normalize,
              range,
              typedValue,
              true
            );
          }
        }
        else
        {
          _MathVectors_Vec3_Dot_Vec3<<<aValues.size()>>>(
            resultValues,
            aValues,
            aValues, // ignore b
            normalize,
            range,
            typedValue,
            true
          );
        }
      }
      else
      {
        switch(attrB.type())
        {
          case Vec3Attribute:
          {
            Vec3Attribute castB = attrB;
            if(castB == null)
              return false;

            Vec3 bValues[] = castB.values;
            if(aValues.size() < Attribute_Pex_Margin)
            {
              for(Index index=0;index<aValues.size();index++)
              {
                _MathVectors_Vec3_Dot_Vec3(
                  index, 
                  resultValues,
                  aValues,
                  bValues,
                  normalize,
                  range,
                  typedValue,
                  false
                );
              }
            }
            else
            {
              _MathVectors_Vec3_Dot_Vec3<<<aValues.size()>>>(
                resultValues,
                aValues,
                bValues,
                normalize,
                range,
                typedValue,
                false
              );
            }
            break;
          }

          default:
          {
            report('Error: MathVectors: B attribute of type '+attrB.type()+' not supported for this mode.');
            return false;
          }
        }
      }

      break;
    }
  }


  attrResult.incrementVersion();
  return true;
}
