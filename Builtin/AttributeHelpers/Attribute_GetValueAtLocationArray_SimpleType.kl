
/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/// \internal
function SInt32[] BaseGeometry.getIntegerAttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  SInt32 values[];

  IntegerAttribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "SInt32";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}

/// \internal
function UInt32[] BaseGeometry.getUInt32AttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  UInt32 values[];

  UInt32Attribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "UInt32";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}

/// \internal
function Float32[] BaseGeometry.getScalarAttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  Float32 values[];

  ScalarAttribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "Float32";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}

/// \internal
function Vec2[] BaseGeometry.getVec2AttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  Vec2 values[];

  Vec2Attribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "Vec2";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}

/// \internal
function Vec3[] BaseGeometry.getVec3AttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  Vec3 values[];

  Vec3Attribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "Vec3";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}

/// \internal
function Vec4[] BaseGeometry.getVec4AttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  Vec4 values[];

  Vec4Attribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "Vec4";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}

/// \internal
function Color[] BaseGeometry.getColorAttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  Color values[];

  ColorAttribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "Color";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}

/// \internal
function RGB[] BaseGeometry.getRGBAttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  RGB values[];

  RGBAttribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "RGB";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}

/// \internal
function RGBA[] BaseGeometry.getRGBAAttributeAtLocationArray(
  GeometryAttribute attr,
  GeometryLocation locations[],
  io String type
) {
  type = "";

  RGBA values[];

  RGBAAttribute cast = attr;
  if(cast == null)
    return values;

  Geometry geometry = this;
  if(geometry == null)
    return values;

  type = "RGBA";
  values.resize(locations.size());

  for(Size i=0;i<locations.size();i++)
  {
    if(!locations[i].isValid())
      continue;
    values[i] = GetAttributeAtLocation(geometry, locations[i], cast);
  }

  return values;
}
