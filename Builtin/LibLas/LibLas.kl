//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// KL definitions for LibLas extension
// Automatically generated by KLUDGE
// *** DO NOT EDIT ***
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Requires
//
// To require another KL extension, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_require('Math')  # -> require Math;
//
//////////////////////////////////////////////////////////////////////////////

require Kludge;
require Math;

//////////////////////////////////////////////////////////////////////////////
//
// Prologs
//
// To add prolog code, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_prolog("""
//   MyGlobalFunc() {
//     report("MyGlobalFunc");
//   }
//
//////////////////////////////////////////////////////////////////////////////

// No prologs specified

//////////////////////////////////////////////////////////////////////////////
//
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Mirror KL[Vec3_d] EDK[Fabric_EDK_KL_Vec3_d_Vec3d] LIB[Vec3_d]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
require Math;
alias Vec3_d Vec3_d;

/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_Vec3_d_Vec3d() {
  return Vec3_d().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Mirror KL[Vec3_i] EDK[Fabric_EDK_KL_Vec3_i_Vec3i] LIB[Vec3_i]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
require Math;
alias Vec3_i Vec3_i;

/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_Vec3_i_Vec3i() {
  return Vec3_i().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Mirror KL[Color|Color_f] EDK[Fabric_EDK_KL_Color_Colorf] LIB[Color_f]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////
require Math;
alias Color Color_f;

/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_Color_Colorf() {
  return Color().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct LibLasReader;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

struct LibLasWriter;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
alias SInt8 CxxChar;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[size_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxStdString;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Boolean] EDK[Fabric::EDK::KL::Boolean] LIB[bool]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt8] EDK[Fabric::EDK::KL::SInt8] LIB[int8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt8] EDK[Fabric::EDK::KL::SInt8] LIB[int8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Color|Color_f] EDK[Fabric_EDK_KL_Color_Colorf] LIB[Color_f]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxColor_fConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxColor_fPtr;

/// \dfgPresetOmit
/// \internal
struct CxxColor_fConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxColor_fRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64Ref;


//////////////////////////////////////////////////////////////////////////////
//
// Declarations
//
//////////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct LibLasReader
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data LibLasReader.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_LibLasReader()
  = "__CxxSize_Fabric_EDK_KL_LibLasReader";


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

struct LibLasWriter
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data LibLasWriter.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_LibLasWriter()
  = "__CxxSize_Fabric_EDK_KL_LibLasWriter";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Color|Color_f] EDK[Fabric_EDK_KL_Color_Colorf] LIB[Color_f]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxColor_fConstPtr permits CxxColor_fConstRef {
  protected Data ptr; // actual CxxColor_fPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxColor_fConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxColor_fPtr : CxxColor_fConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxColor_fMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxColor_fConstRef {
  protected Data ptr; // actual CxxColor_fPtr
  protected Color values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxColor_fConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxColor_fRef : CxxColor_fConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxColor_fMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Implementations
//
//////////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

LibLasReader() = "LibLas__LibLasReader__MU__empty_ctor__dd17d87d68b19e3b4257cb0bf62595c2";

/// \dfgPresetOmit
LibLasReader(
    LibLasReader that
    ) = "LibLas__LibLasReader__MU__copy_ctor__2663b65a8fef822f7fe073f59c9ec630";

/// \dfgPresetOmit
/// \internal
LibLasReader.__ctor(
    CxxCharConstPtr filePath
    ) = "LibLas__LibLasReader__MU__ctor__cdc83d9947c32e42fa1f2b13eacefc61";

/// \dfgPresetOmit
LibLasReader(
    CxxCharConstPtr filePath
    ) {
    this.__ctor(
        filePath
        );
}

LibLasReader(
    in
    String
    filePath
    
    
    ) {
    CxxCharConstPtr filePath__cxx = CxxCharConstPtr(filePath);
    this.__ctor(
        filePath__cxx
        );
    
}

~LibLasReader() = "LibLas__LibLasReader__MU__dtor__619c5a6f664dce8ca67441a24869e9f9";

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// Get ASPRS LAS file signature.
// 
/// \return 4-characters long string - \b "LASF".
/// \dfgPresetOmit
/// \internal
CxxStdString
LibLasReader.cxx_GetFileSignature?(
    )
 = "LibLas__LibLasReader__CO__meth_GetFileSignature__763c74e92a55fc68164ddcf271047905";

/// Get file source identifier.
// 
/// \exception No throw
/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetFileSourceId?(
    )
 = "LibLas__LibLasReader__CO__meth_GetFileSourceId__24bae905632f46a26ba3737f01ea2809";

/// Get value field reserved by the ASPRS LAS Specification.
// 
/// \note This field is always filled with 0.
// 
///
// 
/// \todo TODO: Should we warn or throw about type overflow when user passes 65535 + 1 = 0
/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetReserved?(
    )
 = "LibLas__LibLasReader__CO__meth_GetReserved__6a7211bf661a2cb67b3248aca085017a";

/// Get major component of version of LAS format.
// 
/// \return Always 1 is returned as the only valid value.
/// \dfgPresetOmit
/// \internal
UInt8
LibLasReader.cxx_GetVersionMajor?(
    )
 = "LibLas__LibLasReader__CO__meth_GetVersionMajor__8bd464703006db046f5f92ff27cbbd59";

/// Get minor component of version of LAS format.
// 
/// \return Valid values are 0, 1, 2, 3.
/// \dfgPresetOmit
/// \internal
UInt8
LibLasReader.cxx_GetVersionMinor?(
    )
 = "LibLas__LibLasReader__CO__meth_GetVersionMinor__ddc5eaf82a59f3192a366041e2430e34";

/// Get system identifier.
// 
/// Default value is \b "libLAS" specified as the SystemIdentifier constant.
// 
/// \param pad - if true the returned string is padded right with spaces and
// 
/// its length is 32 bytes, if false (default) no padding occurs and
// 
/// length of the returned string is <= 32 bytes.
// 
/// \return value of system identifier field.
/// \dfgPresetOmit
/// \internal
CxxStdString
LibLasReader.cxx_GetSystemId?(
    )
 = "LibLas__LibLasReader__CO__meth_GetSystemId__c62107636eb91c9e3b82ef653f8c27ae";

/// \dfgPresetOmit
/// \internal
CxxStdString
LibLasReader.cxx_GetSystemId?(
    Boolean pad
    )
 = "LibLas__LibLasReader__CO__meth_GetSystemId__33dd7cc81c2b09f295a49150c49e1477";

/// Get software identifier.
// 
/// Default value is \b "libLAS 1.0", specified as the SoftwareIdentifier constant.
// 
/// \param pad - if true the returned string is padded right with spaces and its length is 32 bytes,
// 
/// if false (default) no padding occurs and length of the returned string is <= 32 bytes.
// 
/// \return value of generating software identifier field.
/// \dfgPresetOmit
/// \internal
CxxStdString
LibLasReader.cxx_GetSoftwareId?(
    )
 = "LibLas__LibLasReader__CO__meth_GetSoftwareId__3ccc96ed9e2aa277005b6cfb3057ca3a";

/// \dfgPresetOmit
/// \internal
CxxStdString
LibLasReader.cxx_GetSoftwareId?(
    Boolean pad
    )
 = "LibLas__LibLasReader__CO__meth_GetSoftwareId__ae6c6d938fde276cde37ddea16540068";

/// Get day of year of file creation date.
// 
/// \todo TODO: Use full date structure instead of Julian date number.
/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetCreationDOY?(
    )
 = "LibLas__LibLasReader__CO__meth_GetCreationDOY__8bda15a889e308ae56aa012607a742d7";

/// Set year of file creation date.
// 
/// \todo TODO: Remove if full date structure is used.
/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetCreationYear?(
    )
 = "LibLas__LibLasReader__CO__meth_GetCreationYear__6f5aa0cf45dfe2104c0cb6ca81dbcad9";

/// Get number of bytes of generic verion of public header block storage.
// 
/// Standard version of the public header block is 227 bytes long.
/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetHeaderSize?(
    )
 = "LibLas__LibLasReader__CO__meth_GetHeaderSize__99ac092f453637b286f48d986c61f411";

/// Get number of bytes from the beginning to the first point record.
/// \dfgPresetOmit
/// \internal
UInt32
LibLasReader.cxx_GetDataOffset?(
    )
 = "LibLas__LibLasReader__CO__meth_GetDataOffset__cbd92c2d2f2a2ba9969e8dad82217b90";

/// Get number of bytes from the end of the VLRs to the GetDataOffset.
/// \dfgPresetOmit
/// \internal
UInt32
LibLasReader.cxx_GetHeaderPadding?(
    )
 = "LibLas__LibLasReader__CO__meth_GetHeaderPadding__f8dde5a498242deccdbadd03f33e1e0e";

/// Get number of variable-length records.
/// \dfgPresetOmit
/// \internal
UInt32
LibLasReader.cxx_GetRecordsCount?(
    )
 = "LibLas__LibLasReader__CO__meth_GetRecordsCount__8553d06d0e9a01cf95b6d6db08fd61f6";

/// The length in bytes of each point.  All points in the file are
// 
/// considered to be fixed in size, and the PointFormatName is used
// 
/// to determine the fixed portion of the dimensions in the point.  Any
// 
/// other byte space in the point record beyond the liblas::Schema::GetBaseByteSize()
// 
/// can be used for other, optional, dimensions.  If no schema is
// 
/// available for the file in the form of a liblas.org VLR schema record,
// 
/// These extra bytes are available via liblas::Point::GetExtraData().
/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetDataRecordLength?(
    )
 = "LibLas__LibLasReader__CO__meth_GetDataRecordLength__a99b0638dec45c286ea22d35273d01ca";

/// Get total number of point records stored in the LAS file.
/// \dfgPresetOmit
/// \internal
UInt32
LibLasReader.cxx_GetPointRecordsCount?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointRecordsCount__17898c4330317fe83b1f616504467f35";

/// Get identifier of point data (record) format.
/// \dfgPresetOmit
/// \internal
SInt32
LibLasReader.cxx_GetDataFormatId?(
    )
 = "LibLas__LibLasReader__CO__meth_GetDataFormatId__609d69cae3204cf83ccc3345e45878ae";

/// Get scale factor.
/// \dfgPresetOmit
/// \internal
Vec3_d
LibLasReader.cxx_GetScale?(
    )
 = "LibLas__LibLasReader__CO__meth_GetScale__c1a1984c285cd32bb2fee80d055e80bb";

/// Get offset
/// \dfgPresetOmit
/// \internal
Vec3_d
LibLasReader.cxx_GetOffset?(
    )
 = "LibLas__LibLasReader__CO__meth_GetOffset__73d0e6024f7de176498c474a44d3947c";

/// Get minimum value of extent
/// \dfgPresetOmit
/// \internal
Vec3_d
LibLasReader.cxx_GetMin?(
    )
 = "LibLas__LibLasReader__CO__meth_GetMin__b0476dfffd0e29ef96a73a403cfc97e9";

/// Get maximum value of extent
/// \dfgPresetOmit
/// \internal
Vec3_d
LibLasReader.cxx_GetMax?(
    )
 = "LibLas__LibLasReader__CO__meth_GetMax__f167272b54bfae4f7a3970c4eee50054";

/// Fetch the georeference
/// \dfgPresetOmit
/// \internal
CxxStdString
LibLasReader.cxx_GetSRS?(
    )
 = "LibLas__LibLasReader__CO__meth_GetSRS__f5da48ea73222c29174de637a183172f";

/// Returns true iff the file is compressed (laszip),
// 
/// as determined by the high bit in the point type
/// \dfgPresetOmit
/// \internal
Boolean
LibLasReader.cxx_Compressed?(
    )
 = "LibLas__LibLasReader__CO__meth_Compressed__217ee844a21890607cc590940a74b5f9";

/// Fetches next point record in file.
// 
/// @exception may throw std::exception
/// \dfgPresetOmit
/// \internal
Boolean
LibLasReader.cxx_ReadNextPoint!(
    )
 = "LibLas__LibLasReader__MU__meth_ReadNextPoint__ebf8353312f105ca24d51550b2ddd57a";

/// Fetches n-th point record from file.
// 
/// @exception may throw std::exception
/// \dfgPresetOmit
/// \internal
Boolean
LibLasReader.cxx_ReadPointAt!(
    UInt32 n
    )
 = "LibLas__LibLasReader__MU__meth_ReadPointAt__b251edc20522cb5ecee2755aab15470e";

/// Reinitializes state of the reader.
// 
/// @exception may throw std::exception
/// \dfgPresetOmit
/// \internal

LibLasReader.cxx_Reset!(
    )
 = "LibLas__LibLasReader__MU__meth_Reset__261c7cdb5e43faec01e559ecb6b0c3b4";

/// Move to the specified point to start
// 
/// ReadNextPoint operations
// 
/// @exception may throw std::exception
/// \dfgPresetOmit
/// \internal
Boolean
LibLasReader.cxx_Seek!(
    UInt32 n
    )
 = "LibLas__LibLasReader__MU__meth_Seek__50f8611dba19f11fb4577ec1c55ab8e7";

/// Get position of the current point
/// \dfgPresetOmit
/// \internal
Vec3_d
LibLasReader.cxx_GetPointPos?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointPos__69252cf74ee3f53c43c6221381b1282d";

/// Get the raw position of the current point
/// \dfgPresetOmit
/// \internal
Vec3_i
LibLasReader.cxx_GetPointPosRaw?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointPosRaw__f8d062f0dc6c3618c67938c76f0606f5";

/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetPointIntensity?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointIntensity__8b6b54a4f05190fef28713398e98ab5a";

/// Gets all scanning flags encoded as single byte.
// 
/// The flags are (mandatory):
// 
/// - Return Number (bits 0, 1, 2);
// 
/// - Number of Returns - given pulse (bits 3, 4, 5);
// 
/// - Scan Direction Flag (bit 6);
// 
/// - Edge of Flight Line (bit 7).
/// \dfgPresetOmit
/// \internal
UInt8
LibLasReader.cxx_GetPointScanFlags?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointScanFlags__07138535f88ebeca0544ee90d40851a5";

/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetPointReturnNumber?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointReturnNumber__275cc42972a00f411c32300f6dcc04a2";

/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetPointNumberOfReturns?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointNumberOfReturns__40643a3310095a822a383633e4c6e371";

/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetPointScanDirection?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointScanDirection__d013480b6ecf4079d78aa5e0a500dc60";

/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetPointFlightLineEdge?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointFlightLineEdge__fe64eea83ca7d3832430e606fb69be70";

/// \dfgPresetOmit
/// \internal
SInt8
LibLasReader.cxx_GetPointScanAngleRank?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointScanAngleRank__8448e25eb29ea04551f3b5b1779c70c9";

/// Fetch value of User Bit Field (LAS 1.0) or Point Source ID (LAS 1.1).
/// \dfgPresetOmit
/// \internal
UInt16
LibLasReader.cxx_GetPointSourceID?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointSourceID__ffbec4dfe675ddbbaf4159b065a188eb";

/// Fetch color value associated with this point (LAS 1.2)
/// \dfgPresetOmit
/// \internal
Color
LibLasReader.cxx_GetPointColor?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointColor__295dbc722283e5b517bf7399a9a397c2";

/// \dfgPresetOmit
/// \internal
Float64
LibLasReader.cxx_GetPointTime?(
    )
 = "LibLas__LibLasReader__CO__meth_GetPointTime__32c6791514608a32bdd2256188df6c45";

/// \dfgPresetOmit
/// \internal

LibLasReader.cxx_GetPointPosData!(
    Data posPtr,
    UInt64 posSize
    )
 = "LibLas__LibLasReader__MU__meth_GetPointPosData__b261e8cf29d028412a50924cb5093758";

/// \dfgPresetOmit
/// \internal

LibLasReader.cxx_GetPointPosTimeData!(
    Data posPtr,
    UInt64 posSize,
    Data timePtr,
    UInt64 timeSize
    )
 = "LibLas__LibLasReader__MU__meth_GetPointPosTimeData__61b5bff74dafb200c5c1b2e64a683c01";

/// \dfgPresetOmit
/// \internal

LibLasReader.cxx_GetPointPosColorData!(
    Data posPtr,
    UInt64 posSize,
    Data colorPtr,
    UInt64 colorSize
    )
 = "LibLas__LibLasReader__MU__meth_GetPointPosColorData__d211bfdfcc0afe53959f7f377de666a8";

/// \dfgPresetOmit
/// \internal

LibLasReader.cxx_GetPointPosTimeColorData!(
    Data posPtr,
    UInt64 posSize,
    Data timePtr,
    UInt64 timeSize,
    Data colorPtr,
    UInt64 colorSize
    )
 = "LibLas__LibLasReader__MU__meth_GetPointPosTimeColorData__6a84b25badc77f8b52261b15fffe7816";

/// Get minor component of version of LAS format.
// 
/// \return Valid values are 0, 1, 2, 3.
UInt8
LibLasReader.GetVersionMinor?(
    )
{   
    UInt8 __res = 
    this.cxx_GetVersionMinor(
        );
    
    return __res;
}


LibLasReader.GetPointPosData!(
    in
    Data
    posPtr
    
    ,
    in
    UInt64
    posSize
    
    
    )
{   
    
    
    
    this.cxx_GetPointPosData(
        posPtr,
        posSize
        );
    
    
    
    
}

/// Get maximum value of extent
Vec3_d
LibLasReader.GetMax?(
    )
{   
    Vec3_d __res = 
    this.cxx_GetMax(
        );
    
    return __res;
}

/// Get minimum value of extent
Vec3_d
LibLasReader.GetMin?(
    )
{   
    Vec3_d __res = 
    this.cxx_GetMin(
        );
    
    return __res;
}

/// Get number of variable-length records.
UInt32
LibLasReader.GetRecordsCount?(
    )
{   
    UInt32 __res = 
    this.cxx_GetRecordsCount(
        );
    
    return __res;
}

/// Fetch the georeference
String
LibLasReader.GetSRS?(
    )
{   
    CxxStdString __res = 
    this.cxx_GetSRS(
        );
    
    return __res;
}

/// Get offset
Vec3_d
LibLasReader.GetOffset?(
    )
{   
    Vec3_d __res = 
    this.cxx_GetOffset(
        );
    
    return __res;
}

/// Get system identifier.
// 
/// Default value is \b "libLAS" specified as the SystemIdentifier constant.
// 
/// \param pad - if true the returned string is padded right with spaces and
// 
/// its length is 32 bytes, if false (default) no padding occurs and
// 
/// length of the returned string is <= 32 bytes.
// 
/// \return value of system identifier field.
String
LibLasReader.GetSystemId?(
    )
{   
    CxxStdString __res = 
    this.cxx_GetSystemId(
        );
    
    return __res;
}

/// Get number of bytes of generic verion of public header block storage.
// 
/// Standard version of the public header block is 227 bytes long.
UInt16
LibLasReader.GetHeaderSize?(
    )
{   
    UInt16 __res = 
    this.cxx_GetHeaderSize(
        );
    
    return __res;
}

/// Get the raw position of the current point
Vec3_i
LibLasReader.GetPointPosRaw?(
    )
{   
    Vec3_i __res = 
    this.cxx_GetPointPosRaw(
        );
    
    return __res;
}

/// Get number of bytes from the end of the VLRs to the GetDataOffset.
UInt32
LibLasReader.GetHeaderPadding?(
    )
{   
    UInt32 __res = 
    this.cxx_GetHeaderPadding(
        );
    
    return __res;
}

/// Gets all scanning flags encoded as single byte.
// 
/// The flags are (mandatory):
// 
/// - Return Number (bits 0, 1, 2);
// 
/// - Number of Returns - given pulse (bits 3, 4, 5);
// 
/// - Scan Direction Flag (bit 6);
// 
/// - Edge of Flight Line (bit 7).
UInt8
LibLasReader.GetPointScanFlags?(
    )
{   
    UInt8 __res = 
    this.cxx_GetPointScanFlags(
        );
    
    return __res;
}

UInt16
LibLasReader.GetPointReturnNumber?(
    )
{   
    UInt16 __res = 
    this.cxx_GetPointReturnNumber(
        );
    
    return __res;
}

/// The length in bytes of each point.  All points in the file are
// 
/// considered to be fixed in size, and the PointFormatName is used
// 
/// to determine the fixed portion of the dimensions in the point.  Any
// 
/// other byte space in the point record beyond the liblas::Schema::GetBaseByteSize()
// 
/// can be used for other, optional, dimensions.  If no schema is
// 
/// available for the file in the form of a liblas.org VLR schema record,
// 
/// These extra bytes are available via liblas::Point::GetExtraData().
UInt16
LibLasReader.GetDataRecordLength?(
    )
{   
    UInt16 __res = 
    this.cxx_GetDataRecordLength(
        );
    
    return __res;
}

String
LibLasReader.GetSystemId?(
    in
    Boolean
    pad
    
    
    )
{   
    
    CxxStdString __res = 
    this.cxx_GetSystemId(
        pad
        );
    
    
    return __res;
}

/// Fetches n-th point record from file.
// 
/// @exception may throw std::exception
Boolean
LibLasReader.ReadPointAt!(
    in
    UInt32
    n
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_ReadPointAt(
        n
        );
    
    
    return __res;
}

/// Get ASPRS LAS file signature.
// 
/// \return 4-characters long string - \b "LASF".
String
LibLasReader.GetFileSignature?(
    )
{   
    CxxStdString __res = 
    this.cxx_GetFileSignature(
        );
    
    return __res;
}


LibLasReader.GetPointPosTimeColorData!(
    in
    Data
    posPtr
    
    ,
    in
    UInt64
    posSize
    
    ,
    in
    Data
    timePtr
    
    ,
    in
    UInt64
    timeSize
    
    ,
    in
    Data
    colorPtr
    
    ,
    in
    UInt64
    colorSize
    
    
    )
{   
    
    
    
    
    
    
    
    this.cxx_GetPointPosTimeColorData(
        posPtr,
        posSize,
        timePtr,
        timeSize,
        colorPtr,
        colorSize
        );
    
    
    
    
    
    
    
    
}

/// Reinitializes state of the reader.
// 
/// @exception may throw std::exception

LibLasReader.Reset!(
    )
{   
    
    this.cxx_Reset(
        );
    
    
}

/// Get identifier of point data (record) format.
SInt32
LibLasReader.GetDataFormatId?(
    )
{   
    SInt32 __res = 
    this.cxx_GetDataFormatId(
        );
    
    return __res;
}

/// Get total number of point records stored in the LAS file.
UInt32
LibLasReader.GetPointRecordsCount?(
    )
{   
    UInt32 __res = 
    this.cxx_GetPointRecordsCount(
        );
    
    return __res;
}

UInt16
LibLasReader.GetPointNumberOfReturns?(
    )
{   
    UInt16 __res = 
    this.cxx_GetPointNumberOfReturns(
        );
    
    return __res;
}

UInt16
LibLasReader.GetPointIntensity?(
    )
{   
    UInt16 __res = 
    this.cxx_GetPointIntensity(
        );
    
    return __res;
}

/// Get value field reserved by the ASPRS LAS Specification.
// 
/// \note This field is always filled with 0.
// 
///
// 
/// \todo TODO: Should we warn or throw about type overflow when user passes 65535 + 1 = 0
UInt16
LibLasReader.GetReserved?(
    )
{   
    UInt16 __res = 
    this.cxx_GetReserved(
        );
    
    return __res;
}

/// Fetch value of User Bit Field (LAS 1.0) or Point Source ID (LAS 1.1).
UInt16
LibLasReader.GetPointSourceID?(
    )
{   
    UInt16 __res = 
    this.cxx_GetPointSourceID(
        );
    
    return __res;
}

/// Move to the specified point to start
// 
/// ReadNextPoint operations
// 
/// @exception may throw std::exception
Boolean
LibLasReader.Seek!(
    in
    UInt32
    n
    
    
    )
{   
    
    Boolean __res = 
    this.cxx_Seek(
        n
        );
    
    
    return __res;
}

UInt16
LibLasReader.GetPointFlightLineEdge?(
    )
{   
    UInt16 __res = 
    this.cxx_GetPointFlightLineEdge(
        );
    
    return __res;
}

/// Get scale factor.
Vec3_d
LibLasReader.GetScale?(
    )
{   
    Vec3_d __res = 
    this.cxx_GetScale(
        );
    
    return __res;
}

/// Set year of file creation date.
// 
/// \todo TODO: Remove if full date structure is used.
UInt16
LibLasReader.GetCreationYear?(
    )
{   
    UInt16 __res = 
    this.cxx_GetCreationYear(
        );
    
    return __res;
}

/// Fetch color value associated with this point (LAS 1.2)
Color
LibLasReader.GetPointColor?(
    )
{   
    Color __res = 
    this.cxx_GetPointColor(
        );
    
    return __res;
}

/// Get file source identifier.
// 
/// \exception No throw
UInt16
LibLasReader.GetFileSourceId?(
    )
{   
    UInt16 __res = 
    this.cxx_GetFileSourceId(
        );
    
    return __res;
}

UInt16
LibLasReader.GetPointScanDirection?(
    )
{   
    UInt16 __res = 
    this.cxx_GetPointScanDirection(
        );
    
    return __res;
}

Float64
LibLasReader.GetPointTime?(
    )
{   
    Float64 __res = 
    this.cxx_GetPointTime(
        );
    
    return __res;
}

/// Get day of year of file creation date.
// 
/// \todo TODO: Use full date structure instead of Julian date number.
UInt16
LibLasReader.GetCreationDOY?(
    )
{   
    UInt16 __res = 
    this.cxx_GetCreationDOY(
        );
    
    return __res;
}


LibLasReader.GetPointPosColorData!(
    in
    Data
    posPtr
    
    ,
    in
    UInt64
    posSize
    
    ,
    in
    Data
    colorPtr
    
    ,
    in
    UInt64
    colorSize
    
    
    )
{   
    
    
    
    
    
    this.cxx_GetPointPosColorData(
        posPtr,
        posSize,
        colorPtr,
        colorSize
        );
    
    
    
    
    
    
}


LibLasReader.GetPointPosTimeData!(
    in
    Data
    posPtr
    
    ,
    in
    UInt64
    posSize
    
    ,
    in
    Data
    timePtr
    
    ,
    in
    UInt64
    timeSize
    
    
    )
{   
    
    
    
    
    
    this.cxx_GetPointPosTimeData(
        posPtr,
        posSize,
        timePtr,
        timeSize
        );
    
    
    
    
    
    
}

/// Get number of bytes from the beginning to the first point record.
UInt32
LibLasReader.GetDataOffset?(
    )
{   
    UInt32 __res = 
    this.cxx_GetDataOffset(
        );
    
    return __res;
}

/// Get software identifier.
// 
/// Default value is \b "libLAS 1.0", specified as the SoftwareIdentifier constant.
// 
/// \param pad - if true the returned string is padded right with spaces and its length is 32 bytes,
// 
/// if false (default) no padding occurs and length of the returned string is <= 32 bytes.
// 
/// \return value of generating software identifier field.
String
LibLasReader.GetSoftwareId?(
    )
{   
    CxxStdString __res = 
    this.cxx_GetSoftwareId(
        );
    
    return __res;
}

/// Get position of the current point
Vec3_d
LibLasReader.GetPointPos?(
    )
{   
    Vec3_d __res = 
    this.cxx_GetPointPos(
        );
    
    return __res;
}

String
LibLasReader.GetSoftwareId?(
    in
    Boolean
    pad
    
    
    )
{   
    
    CxxStdString __res = 
    this.cxx_GetSoftwareId(
        pad
        );
    
    
    return __res;
}

/// Fetches next point record in file.
// 
/// @exception may throw std::exception
Boolean
LibLasReader.ReadNextPoint!(
    )
{   
    Boolean __res = 
    this.cxx_ReadNextPoint(
        );
    
    return __res;
}

/// Returns true iff the file is compressed (laszip),
// 
/// as determined by the high bit in the point type
Boolean
LibLasReader.Compressed?(
    )
{   
    Boolean __res = 
    this.cxx_Compressed(
        );
    
    return __res;
}

/// Get major component of version of LAS format.
// 
/// \return Always 1 is returned as the only valid value.
UInt8
LibLasReader.GetVersionMajor?(
    )
{   
    UInt8 __res = 
    this.cxx_GetVersionMajor(
        );
    
    return __res;
}

SInt8
LibLasReader.GetPointScanAngleRank?(
    )
{   
    SInt8 __res = 
    this.cxx_GetPointScanAngleRank(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasReader] EDK[Fabric_EDK_KL_LibLasReader] LIB[LibLasReader]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

LibLasReader.=(
    LibLasReader that
    ) = "LibLas__LibLasReader__MU__simple_ass_op__fb3070193d8f4c61a6f324a0ec7dafe7";



/// \dfgPresetOmit
/// \internal
LibLasReader.appendDesc(io String string) {
  string += "LibLasReader:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

LibLasWriter() = "LibLas__LibLasWriter__MU__empty_ctor__0dfec860643d2c34cb5fae2662efff46";

/// \dfgPresetOmit
LibLasWriter(
    LibLasWriter that
    ) = "LibLas__LibLasWriter__MU__copy_ctor__42d2924767c74ef58565e563e8377ce4";

/// \dfgPresetOmit
/// \internal
LibLasWriter.__ctor(
    CxxCharConstPtr filePath
    ) = "LibLas__LibLasWriter__MU__ctor__324da239a351fa4ebee6c94fcaaaa285";

/// \dfgPresetOmit
LibLasWriter(
    CxxCharConstPtr filePath
    ) {
    this.__ctor(
        filePath
        );
}

LibLasWriter(
    in
    String
    filePath
    
    
    ) {
    CxxCharConstPtr filePath__cxx = CxxCharConstPtr(filePath);
    this.__ctor(
        filePath__cxx
        );
    
}

~LibLasWriter() = "LibLas__LibLasWriter__MU__dtor__5ce4686dc92fbc16bde19ed05809360d";

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// Set ASPRS LAS file signature.
// 
/// The only value allowed as file signature is \b "LASF",
// 
/// defined as FileSignature constant.
// 
/// \exception std::invalid_argument - if invalid signature given.
// 
/// \param v - string contains file signature, at least 4-bytes long
// 
/// with "LASF" as first four bytes.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetFileSignature!(
    CxxStdStringConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetFileSignature__f718b965dd177ab769c4b79ad9191998";

/// Set file source identifier.
// 
/// \param v - should be set to a value between 1 and 65535.
// 
/// \exception No throw
// 
///
// 
/// \todo TODO: Should we warn or throw about type overflow when user passes 65535 + 1 = 0
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetFileSourceId!(
    UInt16 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetFileSourceId__32bd7e6e464f7d3908f6f25692d3d59a";

/// Set reserved value for the header identifier.
// 
/// \param v - should be set to a value between 1 and 65535.
// 
/// \exception No throw
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetReserved!(
    UInt16 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetReserved__cd6818b528de83bc0d22227d6498278f";

/// Set major component of version of LAS format.
// 
/// \exception std::out_of_range - invalid value given.
// 
/// \param v - value between eVersionMajorMin and eVersionMajorMax.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetVersionMajor!(
    UInt8 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetVersionMajor__44ac27280e5b4beb9e8bee0f64df37e7";

/// Set minor component of version of LAS format.
// 
/// \exception std::out_of_range - invalid value given.
// 
/// \param v - value between eVersionMinorMin and eVersionMinorMax.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetVersionMinor!(
    UInt8 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetVersionMinor__127a19ed37030efa3264d2c5fb095d54";

/// Set system identifier.
// 
/// \exception std::invalid_argument - if identifier longer than 32 bytes.
// 
/// \param v - system identifiers string.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetSystemId!(
    CxxStdStringConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetSystemId__48788344045796f90bfa5e1e5d8cabe6";

/// Set software identifier.
// 
/// \exception std::invalid_argument - if identifier is longer than 32 bytes.
// 
/// \param v - software identifiers string.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetSoftwareId!(
    CxxStdStringConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetSoftwareId__42c283d0fd27ea01feeff70ad4049542";

/// Set day of year of file creation date.
// 
/// \exception std::out_of_range - given value is higher than number 366.
// 
/// \todo TODO: Use full date structure instead of Julian date number.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetCreationDOY!(
    UInt16 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetCreationDOY__601ab14acb7350015b90c9f5f304a901";

/// Get year of file creation date.
// 
/// \exception std::out_of_range - given value is higher than number 9999.
// 
/// \todo TODO: Remove if full date structure is used.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetCreationYear!(
    UInt16 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetCreationYear__23699cd9c3d8a0f15c969c34d1340c6d";

/// Sets the header size.  Note that this is not the same as the offset to
// 
/// point data.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetHeaderSize!(
    UInt16 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetHeaderSize__3565e7b340aa20ffdbd0b28653a642af";

/// Set number of bytes from the beginning to the first point record.
// 
/// \exception std::out_of_range - if given offset is bigger than 227+2 bytes
// 
/// for the LAS 1.0 format and 227 bytes for the LAS 1.1 format.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetDataOffset!(
    UInt32 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetDataOffset__2f34c67f2591985c769675f05d1c9bbd";

/// Set the number of bytes from the end of the VLRs in the header to the
// 
/// beginning of point data.
// 
/// \exception std::out_of_range - if given offset is bigger than 227+2 bytes
// 
/// for the LAS 1.0 format and 227 bytes for the LAS 1.1 format.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetHeaderPadding!(
    UInt32 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetHeaderPadding__ebc4264925a3b948af5e761c053c9e63";

/// Set number of variable-length records.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetRecordsCount!(
    UInt32 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetRecordsCount__9c160a2808b3c8654087534dd7473464";

/// Set identifier of point data (record) format.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetDataFormatId!(
    SInt32 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetDataFormatId__1bb63aadc9f98ceae9f5b901f88a555a";

/// Set number of point records that will be stored in a new LAS file.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointRecordsCount!(
    UInt32 v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointRecordsCount__b7fcdc641b0f31b473f0ca696dbbe66d";

/// Set values of scale factor for X, Y and Z coordinates.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetScale!(
    Vec3_d v
    )
 = "LibLas__LibLasWriter__MU__meth_SetScale__aeae5913bb0ac1df88ddaafeccac7721";

/// Set values of X, Y and Z coordinates offset.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetOffset!(
    Vec3_d v
    )
 = "LibLas__LibLasWriter__MU__meth_SetOffset__f0f0d6c35d32994eb43b386b7c693540";

/// Set minimum values of extent of X, Y and Z coordinates.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetMin!(
    Vec3_d v
    )
 = "LibLas__LibLasWriter__MU__meth_SetMin__697880306559e67c9457f37959fd918b";

/// Set maximum values of extent of X, Y and Z coordinates.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetMax!(
    Vec3_d v
    )
 = "LibLas__LibLasWriter__MU__meth_SetMax__f3612ab4642602c26477c1da9f6e8b55";

/// Set the georeference
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetSRS!(
    CxxStdStringConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetSRS__54930ebb2dfe0b2d83458f8b0861bab1";

/// Sets whether or not the points are compressed.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetCompressed!(
    Boolean v
    )
 = "LibLas__LibLasWriter__MU__meth_SetCompressed__35a0317b1398e89843557c59b5ccf262";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointPos!(
    Vec3_d v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointPos__a30602a0211a86c83e000a1e3abb28a8";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointPosRaw!(
    Vec3_i v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointPosRaw__891ff55a6121adcce1f3197745d5cfdc";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointIntensity!(
    CxxUInt16ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointIntensity__e9a468f7fe0c743fc5c6692884f6d8ae";

/// Sets all scanning flags passed as a single byte.
// 
/// \sa Documentation of GetScanFlags method for flags details.
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointScanFlags!(
    CxxUInt8ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointScanFlags__0a84318bd96fe316e660effb87fc7e67";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointReturnNumber!(
    CxxUInt16ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointReturnNumber__da2070ff5df12175ae2a0859595967cd";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointNumberOfReturns!(
    CxxUInt16ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointNumberOfReturns__abb7b249cc612eb32525f24868bcaf2c";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointScanDirection!(
    CxxUInt16ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointScanDirection__9175ce870d568db1d12c984f6bfd594d";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointFlightLineEdge!(
    CxxUInt16ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointFlightLineEdge__8dadff5fddc185296815fce392c4a496";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointScanAngleRank!(
    CxxSInt8ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointScanAngleRank__26ca0ee3ecd9a96dcdbd9a69633bfffa";

/// Set value of User Bit Field (LAS 1.0) or Point Source ID (LAS 1.1).
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointSourceID!(
    CxxUInt16ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointSourceID__3e37bb4e5936da0028e176fd6316d5c9";

/// Set color value associated with this point (LAS 1.2)
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointColor!(
    CxxColor_fConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointColor__8c2c961ea19809bf5f49295d2d110b5c";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_SetPointTime!(
    CxxFloat64ConstRef v
    )
 = "LibLas__LibLasWriter__MU__meth_SetPointTime__2b36a99299f3c6afe67fcde8144108cb";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_AddPointPosData!(
    Data posPtr,
    UInt64 posSize
    )
 = "LibLas__LibLasWriter__MU__meth_AddPointPosData__a920d54f24d5425592d41c378786fe9e";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_AddPointPosTimeData!(
    Data posPtr,
    UInt64 posSize,
    Data timePtr,
    UInt64 timeSize
    )
 = "LibLas__LibLasWriter__MU__meth_AddPointPosTimeData__7a82b59d043a169cdcd4e05eed46c9f9";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_AddPointPosColorData!(
    Data posPtr,
    UInt64 posSize,
    Data colorPtr,
    UInt64 colorSize
    )
 = "LibLas__LibLasWriter__MU__meth_AddPointPosColorData__e682bcea1ba7307b19fc36f749a41422";

/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_AddPointPosTimeColorData!(
    Data posPtr,
    UInt64 posSize,
    Data timePtr,
    UInt64 timeSize,
    Data colorPtr,
    UInt64 colorSize
    )
 = "LibLas__LibLasWriter__MU__meth_AddPointPosTimeColorData__89bbc5c6f58c70d27d8190e74fd820e2";

/// \todo TODO: Move point record composition deep into writer implementation.
// 
/// \todo TODO: How to handle point_source_id in portable way, for LAS 1.0 and 1.1
/// \dfgPresetOmit
/// \internal
Boolean
LibLasWriter.cxx_WritePoint!(
    )
 = "LibLas__LibLasWriter__MU__meth_WritePoint__7be82f8bcb122e352a8e620479f0e825";

/// Allow in-place writing of header
/// \dfgPresetOmit
/// \internal

LibLasWriter.cxx_WriteHeader!(
    )
 = "LibLas__LibLasWriter__MU__meth_WriteHeader__60d7ce5493e09db468cececc4a83f061";

/// Get year of file creation date.
// 
/// \exception std::out_of_range - given value is higher than number 9999.
// 
/// \todo TODO: Remove if full date structure is used.

LibLasWriter.SetCreationYear!(
    in
    UInt16
    v
    
    
    )
{   
    
    
    this.cxx_SetCreationYear(
        v
        );
    
    
    
}


LibLasWriter.SetPointNumberOfReturns!(
    in
    UInt16
    v
    
    
    )
{   
    
    CxxUInt16ConstRef v__cxx = Make_CxxUInt16ConstRef(v);
    
    this.cxx_SetPointNumberOfReturns(
        v__cxx
        );
    
    
    
}

/// Sets the header size.  Note that this is not the same as the offset to
// 
/// point data.

LibLasWriter.SetHeaderSize!(
    in
    UInt16
    v
    
    
    )
{   
    
    
    this.cxx_SetHeaderSize(
        v
        );
    
    
    
}


LibLasWriter.AddPointPosTimeData!(
    in
    Data
    posPtr
    
    ,
    in
    UInt64
    posSize
    
    ,
    in
    Data
    timePtr
    
    ,
    in
    UInt64
    timeSize
    
    
    )
{   
    
    
    
    
    
    this.cxx_AddPointPosTimeData(
        posPtr,
        posSize,
        timePtr,
        timeSize
        );
    
    
    
    
    
    
}


LibLasWriter.SetPointPosRaw!(
    in
    Vec3_i
    v
    
    
    )
{   
    
    
    this.cxx_SetPointPosRaw(
        v
        );
    
    
    
}

/// Sets whether or not the points are compressed.

LibLasWriter.SetCompressed!(
    in
    Boolean
    v
    
    
    )
{   
    
    
    this.cxx_SetCompressed(
        v
        );
    
    
    
}

/// \todo TODO: Move point record composition deep into writer implementation.
// 
/// \todo TODO: How to handle point_source_id in portable way, for LAS 1.0 and 1.1
Boolean
LibLasWriter.WritePoint!(
    )
{   
    Boolean __res = 
    this.cxx_WritePoint(
        );
    
    return __res;
}


LibLasWriter.AddPointPosData!(
    in
    Data
    posPtr
    
    ,
    in
    UInt64
    posSize
    
    
    )
{   
    
    
    
    this.cxx_AddPointPosData(
        posPtr,
        posSize
        );
    
    
    
    
}

/// Sets all scanning flags passed as a single byte.
// 
/// \sa Documentation of GetScanFlags method for flags details.

LibLasWriter.SetPointScanFlags!(
    in
    UInt8
    v
    
    
    )
{   
    
    CxxUInt8ConstRef v__cxx = Make_CxxUInt8ConstRef(v);
    
    this.cxx_SetPointScanFlags(
        v__cxx
        );
    
    
    
}


LibLasWriter.SetPointIntensity!(
    in
    UInt16
    v
    
    
    )
{   
    
    CxxUInt16ConstRef v__cxx = Make_CxxUInt16ConstRef(v);
    
    this.cxx_SetPointIntensity(
        v__cxx
        );
    
    
    
}


LibLasWriter.SetPointReturnNumber!(
    in
    UInt16
    v
    
    
    )
{   
    
    CxxUInt16ConstRef v__cxx = Make_CxxUInt16ConstRef(v);
    
    this.cxx_SetPointReturnNumber(
        v__cxx
        );
    
    
    
}

/// Set maximum values of extent of X, Y and Z coordinates.

LibLasWriter.SetMax!(
    in
    Vec3_d
    v
    
    
    )
{   
    
    
    this.cxx_SetMax(
        v
        );
    
    
    
}

/// Set the georeference

LibLasWriter.SetSRS!(
    in
    String
    v
    
    
    )
{   
    CxxStdString v__cxx(v);
    CxxStdStringConstRef v__cxx__cxx = Make_CxxStdStringConstRef(v__cxx);
    
    this.cxx_SetSRS(
        v__cxx__cxx
        );
    
    
    
}

/// Set value of User Bit Field (LAS 1.0) or Point Source ID (LAS 1.1).

LibLasWriter.SetPointSourceID!(
    in
    UInt16
    v
    
    
    )
{   
    
    CxxUInt16ConstRef v__cxx = Make_CxxUInt16ConstRef(v);
    
    this.cxx_SetPointSourceID(
        v__cxx
        );
    
    
    
}

/// Set values of X, Y and Z coordinates offset.

LibLasWriter.SetOffset!(
    in
    Vec3_d
    v
    
    
    )
{   
    
    
    this.cxx_SetOffset(
        v
        );
    
    
    
}


LibLasWriter.AddPointPosColorData!(
    in
    Data
    posPtr
    
    ,
    in
    UInt64
    posSize
    
    ,
    in
    Data
    colorPtr
    
    ,
    in
    UInt64
    colorSize
    
    
    )
{   
    
    
    
    
    
    this.cxx_AddPointPosColorData(
        posPtr,
        posSize,
        colorPtr,
        colorSize
        );
    
    
    
    
    
    
}

/// Set color value associated with this point (LAS 1.2)

LibLasWriter.SetPointColor!(
    in
    Color
    v
    
    
    )
{   
    
    CxxColor_fConstRef v__cxx = Make_CxxColor_fConstRef(v);
    
    this.cxx_SetPointColor(
        v__cxx
        );
    
    
    
}

/// Set values of scale factor for X, Y and Z coordinates.

LibLasWriter.SetScale!(
    in
    Vec3_d
    v
    
    
    )
{   
    
    
    this.cxx_SetScale(
        v
        );
    
    
    
}


LibLasWriter.SetPointTime!(
    in
    Float64
    v
    
    
    )
{   
    
    CxxFloat64ConstRef v__cxx = Make_CxxFloat64ConstRef(v);
    
    this.cxx_SetPointTime(
        v__cxx
        );
    
    
    
}

/// Set ASPRS LAS file signature.
// 
/// The only value allowed as file signature is \b "LASF",
// 
/// defined as FileSignature constant.
// 
/// \exception std::invalid_argument - if invalid signature given.
// 
/// \param v - string contains file signature, at least 4-bytes long
// 
/// with "LASF" as first four bytes.

LibLasWriter.SetFileSignature!(
    in
    String
    v
    
    
    )
{   
    CxxStdString v__cxx(v);
    CxxStdStringConstRef v__cxx__cxx = Make_CxxStdStringConstRef(v__cxx);
    
    this.cxx_SetFileSignature(
        v__cxx__cxx
        );
    
    
    
}


LibLasWriter.SetPointPos!(
    in
    Vec3_d
    v
    
    
    )
{   
    
    
    this.cxx_SetPointPos(
        v
        );
    
    
    
}


LibLasWriter.SetPointScanAngleRank!(
    in
    SInt8
    v
    
    
    )
{   
    
    CxxSInt8ConstRef v__cxx = Make_CxxSInt8ConstRef(v);
    
    this.cxx_SetPointScanAngleRank(
        v__cxx
        );
    
    
    
}

/// Set minimum values of extent of X, Y and Z coordinates.

LibLasWriter.SetMin!(
    in
    Vec3_d
    v
    
    
    )
{   
    
    
    this.cxx_SetMin(
        v
        );
    
    
    
}


LibLasWriter.SetPointFlightLineEdge!(
    in
    UInt16
    v
    
    
    )
{   
    
    CxxUInt16ConstRef v__cxx = Make_CxxUInt16ConstRef(v);
    
    this.cxx_SetPointFlightLineEdge(
        v__cxx
        );
    
    
    
}

/// Set number of variable-length records.

LibLasWriter.SetRecordsCount!(
    in
    UInt32
    v
    
    
    )
{   
    
    
    this.cxx_SetRecordsCount(
        v
        );
    
    
    
}

/// Set number of point records that will be stored in a new LAS file.

LibLasWriter.SetPointRecordsCount!(
    in
    UInt32
    v
    
    
    )
{   
    
    
    this.cxx_SetPointRecordsCount(
        v
        );
    
    
    
}

/// Set reserved value for the header identifier.
// 
/// \param v - should be set to a value between 1 and 65535.
// 
/// \exception No throw

LibLasWriter.SetReserved!(
    in
    UInt16
    v
    
    
    )
{   
    
    
    this.cxx_SetReserved(
        v
        );
    
    
    
}

/// Set system identifier.
// 
/// \exception std::invalid_argument - if identifier longer than 32 bytes.
// 
/// \param v - system identifiers string.

LibLasWriter.SetSystemId!(
    in
    String
    v
    
    
    )
{   
    CxxStdString v__cxx(v);
    CxxStdStringConstRef v__cxx__cxx = Make_CxxStdStringConstRef(v__cxx);
    
    this.cxx_SetSystemId(
        v__cxx__cxx
        );
    
    
    
}

/// Allow in-place writing of header

LibLasWriter.WriteHeader!(
    )
{   
    
    this.cxx_WriteHeader(
        );
    
    
}

/// Set minor component of version of LAS format.
// 
/// \exception std::out_of_range - invalid value given.
// 
/// \param v - value between eVersionMinorMin and eVersionMinorMax.

LibLasWriter.SetVersionMinor!(
    in
    UInt8
    v
    
    
    )
{   
    
    
    this.cxx_SetVersionMinor(
        v
        );
    
    
    
}

/// Set the number of bytes from the end of the VLRs in the header to the
// 
/// beginning of point data.
// 
/// \exception std::out_of_range - if given offset is bigger than 227+2 bytes
// 
/// for the LAS 1.0 format and 227 bytes for the LAS 1.1 format.

LibLasWriter.SetHeaderPadding!(
    in
    UInt32
    v
    
    
    )
{   
    
    
    this.cxx_SetHeaderPadding(
        v
        );
    
    
    
}

/// Set major component of version of LAS format.
// 
/// \exception std::out_of_range - invalid value given.
// 
/// \param v - value between eVersionMajorMin and eVersionMajorMax.

LibLasWriter.SetVersionMajor!(
    in
    UInt8
    v
    
    
    )
{   
    
    
    this.cxx_SetVersionMajor(
        v
        );
    
    
    
}

/// Set file source identifier.
// 
/// \param v - should be set to a value between 1 and 65535.
// 
/// \exception No throw
// 
///
// 
/// \todo TODO: Should we warn or throw about type overflow when user passes 65535 + 1 = 0

LibLasWriter.SetFileSourceId!(
    in
    UInt16
    v
    
    
    )
{   
    
    
    this.cxx_SetFileSourceId(
        v
        );
    
    
    
}


LibLasWriter.AddPointPosTimeColorData!(
    in
    Data
    posPtr
    
    ,
    in
    UInt64
    posSize
    
    ,
    in
    Data
    timePtr
    
    ,
    in
    UInt64
    timeSize
    
    ,
    in
    Data
    colorPtr
    
    ,
    in
    UInt64
    colorSize
    
    
    )
{   
    
    
    
    
    
    
    
    this.cxx_AddPointPosTimeColorData(
        posPtr,
        posSize,
        timePtr,
        timeSize,
        colorPtr,
        colorSize
        );
    
    
    
    
    
    
    
    
}

/// Set number of bytes from the beginning to the first point record.
// 
/// \exception std::out_of_range - if given offset is bigger than 227+2 bytes
// 
/// for the LAS 1.0 format and 227 bytes for the LAS 1.1 format.

LibLasWriter.SetDataOffset!(
    in
    UInt32
    v
    
    
    )
{   
    
    
    this.cxx_SetDataOffset(
        v
        );
    
    
    
}


LibLasWriter.SetPointScanDirection!(
    in
    UInt16
    v
    
    
    )
{   
    
    CxxUInt16ConstRef v__cxx = Make_CxxUInt16ConstRef(v);
    
    this.cxx_SetPointScanDirection(
        v__cxx
        );
    
    
    
}

/// Set identifier of point data (record) format.

LibLasWriter.SetDataFormatId!(
    in
    SInt32
    v
    
    
    )
{   
    
    
    this.cxx_SetDataFormatId(
        v
        );
    
    
    
}

/// Set software identifier.
// 
/// \exception std::invalid_argument - if identifier is longer than 32 bytes.
// 
/// \param v - software identifiers string.

LibLasWriter.SetSoftwareId!(
    in
    String
    v
    
    
    )
{   
    CxxStdString v__cxx(v);
    CxxStdStringConstRef v__cxx__cxx = Make_CxxStdStringConstRef(v__cxx);
    
    this.cxx_SetSoftwareId(
        v__cxx__cxx
        );
    
    
    
}

/// Set day of year of file creation date.
// 
/// \exception std::out_of_range - given value is higher than number 366.
// 
/// \todo TODO: Use full date structure instead of Julian date number.

LibLasWriter.SetCreationDOY!(
    in
    UInt16
    v
    
    
    )
{   
    
    
    this.cxx_SetCreationDOY(
        v
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[LibLasWriter] EDK[Fabric_EDK_KL_LibLasWriter] LIB[LibLasWriter]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

LibLasWriter.=(
    LibLasWriter that
    ) = "LibLas__LibLasWriter__MU__simple_ass_op__1aac2ab3345f4633df4acc0c65e4b5f7";



/// \dfgPresetOmit
/// \internal
LibLasWriter.appendDesc(io String string) {
  string += "LibLasWriter:";
  if (!this.cpp_ptr)
    string += "null";
  else {
    string += "{";
    string += "}";
  }
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Color|Color_f] EDK[Fabric_EDK_KL_Color_Colorf] LIB[Color_f]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxColor_fConstPtr] EDK[CxxColor_fConstPtr] LIB[Color_f const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxColor_fPtr] EDK[CxxColor_fMutablePtr] LIB[Color_f *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxColor_fConstRef] EDK[CxxColor_fConstRef] LIB[Color_f const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxColor_fConstRef] EDK[CxxColor_fConstRef] LIB[Color_f const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxColor_fRef] EDK[CxxColor_fMutableRef] LIB[Color_f &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////
// CxxColor_fConstPtr
// CxxColor_fPtr
// CxxColor_fConstRef
// CxxColor_fRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxColor_fConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxColor_fConstPtr(Color array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxColor_fConstPtr(Color array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Color_Colorf());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxColor_fConstPtr permits CxxColor_fConstPtr {
  private Data ptr;
  private Color value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxColor_fConstPtr(Color value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxColor_fConstPtr(io Color value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxColor_fConstPtr(Make_CxxColor_fConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxColor_fPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxColor_fPtr(Color array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxColor_fPtr(Color array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Color_Colorf());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxColor_fPtr permits CxxColor_fPtr {
  private Data ptr;
  private Color value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxColor_fPtr(Color value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxColor_fPtr(io Color value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxColor_fPtr(Make_CxxColor_fPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef(Color array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef(Color array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Color_Colorf());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxColor_fConstRef permits CxxColor_fConstRef {
  private Data ptr;
  private Color value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxColor_fConstRef(Color value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxColor_fConstRef(io Color value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef(Make_CxxColor_fConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxColor_fRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxColor_fRef(Color array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxColor_fRef(Color array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Color_Colorf());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxColor_fRef permits CxxColor_fRef {
  private Data ptr;
  private Color value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxColor_fRef(Color value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxColor_fRef(io Color value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxColor_fRef(Make_CxxColor_fRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxColor_fConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxColor_fConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxColor_fConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef CxxColor_fConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxColor_fConstPtr.cxx_getAt on null CxxColor_fConstPtr";
  return CxxColor_fConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Color_Colorf()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef CxxColor_fConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxColor_fConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxColor_fConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxColor_fRef CxxColor_fPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxColor_fPtr.cxx_getAt on null CxxColor_fPtr";
  return CxxColor_fRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Color_Colorf()));
}

/// Same as for CxxColor_fConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxColor_fRef CxxColor_fPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxColor_fPtr.cxx_setAt(Index i, Color v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxColor_fPtr.cxx_setAt on null CxxColor_fPtr";
  this.ptr.offset(i)->{ Color } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef(CxxColor_fConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef.=(CxxColor_fConstRef that) {
  this.ptr = that.ptr;
}

/// Get the Color value
/// \dfgPresetOmit
/// \internal
Color CxxColor_fConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxColor_fConstRef.cxx_get on null CxxColor_fConstRef";
  return this.ptr->{ Color };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxColor_fConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxColor_fRef.cxx_set(Color value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxColor_fRef.cxx_set on null CxxColor_fRef";
  this.ptr->{ Color } = value;
}

/// Assignment of Color
/// \dfgPresetOmit
/// \internal
CxxColor_fRef.=(Color value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxColor_fRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Epilogs
//
// To add epilog code, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_epilog("""
//   MyGlobalFunc() {
//     report("MyGlobalFunc");
//   }
//
//////////////////////////////////////////////////////////////////////////////

// No epilogs specified
