/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
\versionadded 1.12.0

The InlineShader is an interface representing a single shader for an InlineDrawing. For a code example please see the OGLInlineShader.
\dfgPresetOmit
*/
interface InlineShader {
  /// returns the name of the shader
  String getName();

  /// draws the shader on the screen.
  /// this is used by the InlineDrawing and should not 
  /// be called manually.
  /// \internal
  Boolean draw!(io DrawContext context);

  /// Redraws an instance. This should be done within a registered viewport callback (registerCallback).
  /// \internal
  drawExplicitInstance!( Ref<InlineInstance> inst, Ref<InlineMaterial> mat, io DrawContext context );

  /// clears all of the materials
  Boolean clear!();

  /// returns true if this shader has a material with a given name
  Boolean hasMaterial(String name);

  /// removes the material a given name.
  /// returns true if it success, false otherwise.
  Boolean removeMaterial!(String name);

  /// returns (and eventually creates) a new matching material with a given name
  InlineMaterial getOrCreateMaterial!(String name);

  /// returns the number of materials in this shader
  Size getMaterialCount();

  /// returns an existing material by index
  InlineMaterial getMaterial(Index index);

  /// define a new uniform on the shader.
  defineUniform!(InlineUniform uniform);

  /// returns true if this shader has a uniform with a given name
  Boolean hasUniform(String name);

  /// sets the global value of a uniform
  /// this can be changed per material, per instance or even per transform
  setUniform!(InlineUniform uniform);

  /// returns the number of uniforms
  Size getUniformCount();

  /// returns the uniform name at index
  String getUniformName( Index index );

  /// returns the uniform type at index (InlineUniform_Type_X)
  Integer getUniformType( Index index );

  /// define a surface attribute with a given name and type
  defineAttribute!(String name, String attributeType);

  /// returns true if this shader has an attribute with a given name
  Boolean hasAttribute(String name);

  /// returns the number of attributes
  Size getAttributeCount();

  /// returns the name of an attribute
  String getAttributeName(Index index);

  /// returns the ID / location of a given attribute inside the shader.
  /// for OpenGL this is the program attribute id, for example.
  Integer getAttributeID(String name);

  /// draws a uniform for the shader, applies the value essentially. 
  /// this should be used from within the InlineMaterial's draw or 
  /// the InlineInstance's draw.
  /// \internal
  Boolean drawUniform!(io DrawContext context, InlineUniform uniform);

  /// returns true if the shader supports hardware instancing
  Boolean supportsHardwareInstancing!();

  /// enables or disables the hardware instancing
  Boolean enableHardwareInstancing!(io DrawContext context, Boolean enable, io Object storage, Xfo xfos[], UInt32 version);
};

