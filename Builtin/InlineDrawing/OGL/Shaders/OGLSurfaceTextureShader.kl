/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
\versionadded 1.12.0

The OGLSurfaceTextureShader inherits the OGLInlineShader. It extends the OGLInlineShader for shading with a simple phong model using a texture for the diffuse.

\rst
Uniforms
----------
==================== ============ ===================================== ==================================
Name                 Type         Description                           Default
==================== ============ ===================================== ==================================
u_light0Position     Vec3         Position of the first light           Position of the camera
u_light0Color        Color        Color of the first light              Color(1.0, 1.0, 1.0)
u_ambientColor       Color        Ambient color component               Color(0.05, 0.05, 0.05)
u_diffuseColor       Color        Diffuse color component               Color(1.0, 1.0, 1.0)
u_specularColor      Color        Specular color component              Color(0.2, 0.2, 0.2)
u_specularFactor     Color        Specular distribution factor          16.0
u_normalIsTangent    Integer      Flag defining normal type             0
u_doubleSided        Integer      Flag defining backface shading model  0
u_diffuseTexture     Texture      Texture used for the diffuse          null
u_mirrorU            Integer      Flag toggle a flip of the U component 0
u_mirrorV            Integer      Flag toggle a flip of the V component 1
u_discardAlpha       Integer      Flag to discard 0.0 alpha pixels      0
==================== ============ ===================================== ==================================

Attributes
----------
=============== ============ =====================================
Name            Type         Description
=============== ============ =====================================
positions       Vec3         Geometry positions
normals         Vec3         Geometry normals
uvs0            Vec2         UV set
=============== ============ =====================================
\endrst

\example
  InlineDrawing draw = OGLInlineDrawing();
  InlineShader shader = draw.registerShader(OGLSurfaceTextureShader);
  InlineMaterial mat = shader.getOrCreateMaterial('texturedWithBlueSpecular');
  InlineTexture texture = draw.registerTexture(InlineFileBasedTexture('texture.png'));
  mat.setUniform('u_diffuseTexture', texture);
  mat.setUniform('u_specularColor', Color(0.0, 0.0, 1.0));
\endexample
\dfgPresetOmit
*/
object OGLSurfaceTextureShader: OGLSurfaceShader {};

/// default constructor
function OGLSurfaceTextureShader() {
  // Avoid calling the init method if this default constructor is being invoked 
  // during the construction of a derived object.
  if(this.type() == OGLSurfaceTextureShader)
    this.init(String(this.type()));
}

/// default constructor taking a name
function OGLSurfaceTextureShader(String name) {
  this.init(name);
}

/// initialize the shader using a name.
/// \internal
function OGLSurfaceTextureShader.init!(String name) {
  this.name = name;
  this.setVertexCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      uniform mat4 u_viewMatrix;
      uniform mat4 u_projection;
      uniform mat4 u_modelMatrix;
      uniform mat3 u_normalMatrix;

      uniform vec3 u_light0Position;
      uniform vec4 u_light0Color;

      attribute vec4 positions;
      attribute vec3 normals;
      attribute vec2 uvs0;

      varying vec3 v_normal;
      varying vec4 v_position;
      varying vec2 v_uv0;
      varying vec3 v_lightDir;
      varying vec4 v_lightColor;
      varying vec3 v_eyeVec;

      void main(){
        v_normal = u_normalMatrix * normals;
        v_position = u_modelMatrix * positions;
        vec4 v_positionInv = (u_viewMatrix * vec4(v_position.xyz, 1.0));
        gl_Position = u_projection * v_positionInv;
  
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        v_eyeVec = -v_positionInv.xyz;
        v_uv0 = uvs0;
      }
    ");
  this.setFragmentCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      uniform vec4 u_ambientColor;
      uniform vec4 u_diffuseColor;
      uniform vec4 u_specularColor;
      uniform float u_specularFactor;
      uniform int u_normalIsTangent;
      uniform int u_doubleSided;

      uniform sampler2D u_diffuseTexture;
      uniform int u_mirrorU;
      uniform int u_mirrorV;
      uniform int u_discardAlpha;

      varying vec3 v_normal;
      varying vec4 v_position;
      varying vec2 v_uv0;
      varying vec3 v_lightDir;
      varying vec4 v_lightColor;
      varying vec3 v_eyeVec;

      void main() {
        vec2 uv = v_uv0;
        if(u_mirrorU != 0) uv.x = 1.0 - uv.x;
        if(u_mirrorV != 0) uv.y = 1.0 - uv.y;

        vec4 texture_color = texture2D( u_diffuseTexture, uv );
        if(u_discardAlpha != 0)
        {
          if(texture_color.a < 0.0001)
            discard;
        }
        texture_color *= u_diffuseColor;
        vec4 final_color = u_ambientColor * texture_color;


        vec3 N;
        if(u_normalIsTangent == 0)
          N = normalize(v_normal);
        else
        {
          N = normalize(cross(v_normal, cross(v_normal, v_eyeVec)));
        }
        if(dot(N, v_eyeVec) < 0.0)
          N = -N;
        vec3 L = normalize(v_lightDir);

        float lambertTerm = dot(N,L);
        if(u_doubleSided != 0)
          lambertTerm = abs(lambertTerm);
        
        if(lambertTerm > 0.0)
        {
          final_color += v_lightColor * texture_color * lambertTerm; 
          vec3 E = normalize(v_eyeVec);
          vec3 R = reflect(-L, N);
          float specular = pow( max(dot(R, E), 0.0), u_specularFactor );
          final_color += u_specularColor * specular;  
        }

        gl_FragColor = final_color;
      }
    ");  
  this.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_projection", Mat44()));
  this.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_normalMatrix", Mat33()));

  this.defineUniform(InlineUniform("u_light0Position", Vec3(100, 100, 100)));
  this.defineUniform(InlineUniform("u_light0Color", Color(1.0, 1.0, 1.0)));

  this.defineUniform(InlineUniform("u_ambientColor", Color(0.05, 0.05, 0.05)));
  this.defineUniform(InlineUniform("u_diffuseColor", Color(1.0, 1.0, 1.0)));
  this.defineUniform(InlineUniform("u_specularColor", Color(0.2, 0.2, 0.2)));
  this.defineUniform(InlineUniform("u_specularFactor", 16.0));
  this.defineUniform(InlineUniform("u_normalIsTangent", Integer(0)));
  this.defineUniform(InlineUniform("u_doubleSided", Integer(0)));

  this.defineUniform(InlineUniform('u_diffuseTexture', null));
  this.defineUniform(InlineUniform('u_mirrorU', 0));
  this.defineUniform(InlineUniform('u_mirrorV', 1));
  this.defineUniform(InlineUniform('u_discardAlpha', 0));

  this.defineAttribute('positions', "Vec3");
  this.defineAttribute('normals', "Vec3");
  this.defineAttribute('uvs0', "Vec2");
}
