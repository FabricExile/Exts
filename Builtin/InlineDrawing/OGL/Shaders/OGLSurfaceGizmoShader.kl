/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
\versionadded 1.12.0

The OGLSurfaceGizmoShader is a shader for rendering gizmos overlaid in the scene geometry. 

\rst
Uniforms
----------
==================== ============ ===================================== ==================================
Name                 Type         Description                           Default
==================== ============ ===================================== ==================================
u_light0Position     Vec3         Position of the first light           Position of the camera
u_light0Color        Color        Color of the first light              Color(1.0, 1.0, 1.0)
u_ambientColor       Color        Ambient color component               Color(0.05, 0.05, 0.05)
u_diffuseColor       Color        Diffuse color component               Color(0.0, 1.0, 0.0)
u_specularColor      Color        Specular color component              Color(0.2, 0.2, 0.2)
u_specularFactor     Color        Specular distribution factor          16.0
u_normalIsTangent    Integer      Flag defining normal type             0
u_doubleSided        Integer      Flag defining backface shading model  0
==================== ============ ===================================== ==================================

Attributes
----------
=============== ============ =====================================
Name            Type         Description
=============== ============ =====================================
positions       Vec3         Geometry positions
normals         Vec3         Geometry normals
=============== ============ =====================================
\endrst

\example
  InlineDrawing draw = OGLInlineDrawing();
  InlineShader shader = draw.registerShader(OGLSurfaceGizmoShader);
  InlineMaterial mat = shader.getOrCreateMaterial('blue');
  mat.setUniform('u_diffuseColor', Color(0.0, 0.0, 1.0));
\endexample
\dfgPresetOmit
*/
object OGLSurfaceGizmoShader: OGLSurfaceShader {};

/// default constructor
function OGLSurfaceGizmoShader() {
  // Avoid calling the init method if this default constructor is being invoked 
  // during the construction of a derived object.
  if(this.type() == OGLSurfaceGizmoShader)
    this.init(String(this.type()));
}

/// default constructor taking a name
function OGLSurfaceGizmoShader(String name) {
  this.init(name);
}

/// initialize the shader using a name.
/// \internal
function OGLSurfaceGizmoShader.init!(String name) {
  this.name = name;
  this.setVertexCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      uniform mat4 u_viewMatrix;
      uniform mat4 u_projection;
      uniform mat4 u_modelMatrix;
      uniform mat3 u_normalMatrix;

      uniform vec3 u_light0Position;
      uniform vec4 u_light0Color;

      attribute vec4 positions;
      attribute vec3 normals;
      attribute float weightMap;

      varying vec3 v_normal;
      varying vec4 v_position;
      varying vec3 v_lightDir;
      varying vec4 v_lightColor;
      varying vec3 v_eyeVec;
      varying float v_weightMap;

      void main(){
        v_normal = u_normalMatrix * normals;
        v_position = u_modelMatrix * positions;
        vec4 v_positionInv = (u_viewMatrix * vec4(v_position.xyz, 1.0));
        gl_Position = u_projection * v_positionInv;
  
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        v_eyeVec = -v_positionInv.xyz;
        v_weightMap = weightMap;
      }
    ");
  this.setFragmentCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      uniform vec4 u_ambientColor;
      uniform vec4 u_diffuseColor;
      uniform vec4 u_specularColor;
      uniform float u_specularFactor;
      uniform int u_normalIsTangent;
      uniform int u_doubleSided;

      varying vec3 v_normal;
      varying vec4 v_position;
      varying vec3 v_lightDir;
      varying vec4 v_lightColor;
      varying vec3 v_eyeVec;

      void main() {
        vec4 final_color = u_ambientColor;


        vec3 N;
        if(u_normalIsTangent == 0)
          N = normalize(v_normal);
        else
        {
          N = normalize(cross(v_normal, cross(v_normal, v_eyeVec)));
        }
        if(dot(N, v_eyeVec) < 0.0)
          N = -N;
        vec3 L = normalize(v_lightDir);

        float lambertTerm = dot(N,L);
        if(u_doubleSided != 0)
          lambertTerm = abs(lambertTerm);
        
        if(lambertTerm > 0.0)
        {
          final_color += v_lightColor * u_diffuseColor * lambertTerm; 
          vec3 E = normalize(v_eyeVec);
          vec3 R = reflect(-L, N);
          float specular = pow( max(dot(R, E), 0.0), u_specularFactor );
          final_color += u_specularColor * specular;  
        }

        gl_FragColor = final_color;
      }
    ");  
  this.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_projection", Mat44()));
  this.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_normalMatrix", Mat33()));

  this.defineUniform(InlineUniform("u_light0Position", Vec3(100, 100, 100)));
  this.defineUniform(InlineUniform("u_light0Color", Color(1.0, 1.0, 1.0)));

  this.defineUniform(InlineUniform("u_ambientColor", Color(0.05, 0.05, 0.05)));
  this.defineUniform(InlineUniform("u_diffuseColor", Color(0.0, 1.0, 0.0)));
  this.defineUniform(InlineUniform("u_specularColor", Color(0.2, 0.2, 0.2)));
  this.defineUniform(InlineUniform("u_specularFactor", 16.0));
  this.defineUniform(InlineUniform("u_normalIsTangent", Integer(0)));
  this.defineUniform(InlineUniform("u_doubleSided", Integer(0)));

  this.defineAttribute('positions', "Vec3");
  this.defineAttribute('normals', "Vec3");
}

/// called by the InlineDrawing, should not be called manually
/// \internal
function Boolean OGLSurfaceGizmoShader.draw!(io DrawContext context) {

  // By clamping the depth range for the gizmos to 0.0 -> 0.1 we ensure that the 
  // gizmos are drawn over the top of all other geometris(except geoms closer than 0.1 in the depth buffer)
  // Furthermore, the gizmos still utilize the 0.1 range of the depth buffer to ensure that they are correctly
  // rendered over the top of one another. 
  glDepthRange(0.0, 0.1); 

  // Enable double sided lighting because some gizmos are made up of a flat surfaces
  //  we need to see from both sides. E.g. the planar translation gizmo.
  glLightModeli(GL_LIGHT_MODEL_TWO_SIDE, GL_TRUE);

  Boolean result = this.parent.draw(context);
 
  // Reset the depth mode. (Maybe this isn't necessay)
  glDepthRange(0.0, 1.0); 

  return result;
}
