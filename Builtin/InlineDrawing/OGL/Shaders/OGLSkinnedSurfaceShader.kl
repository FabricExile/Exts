/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
\versionadded 1.12.0

The OGLSkinnedSurfaceShader inherits the OGLSurfaceShader. It extends the OGLSurfaceShader for shading skinned geometries. The Skinned geometries should have a :kl-ref:`SkinningAttribute` attribute applied containing the vertex ids and skin weights.

The :kl-ref:`SkinningAttribute` attribute is converted to a packed vec4 struct by the InlineDrawing system. Each element in the vec4 packs an index and weight, enabling up to 4 joints per vertex to be used in the deformation.

\note The :kl-ref:`FbxCharacter` loads skinning data from Fbx files. See the FbxCharacter.kl file for examples of generating 
\note For arbitrary number of joints to be used per vertex, use CPU based skinning. And example of this can be found in the :kl-ref:`Character`.

\rst
Uniforms
----------
==================== ============ ===================================== ==================================
Name                 Type         Description                           Default
==================== ============ ===================================== ==================================
u_light0Position     Vec3         Position of the first light           Position of the camera
u_light0Color        Color        Color of the first light              Color(1.0, 1.0, 1.0)
u_ambientColor       Color        Ambient color component               Color(0.05, 0.05, 0.05)
u_diffuseColor       Color        Diffuse color component               Color(0.0, 1.0, 0.0)
u_specularColor      Color        Specular color component              Color(0.2, 0.2, 0.2)
u_specularFactor     Color        Specular distribution factor          16.0
u_normalIsTangent    Integer      Flag defining normal type             0
u_doubleSided        Integer      Flag defining backface shading model  0
==================== ============ ===================================== ==================================

Attributes
----------
=============== ============ =====================================
Name            Type         Description
=============== ============ =====================================
positions       Vec3         Geometry positions
normals         Vec3         Geometry normals
skinningData    Vec4         Skinning Data
=============== ============ =====================================


.. kl-example:: SkinningShader
    :nooutput:
  InlineDrawing drawing = OGLInlineDrawing_GetInstance();
  DrawingHandle handle();
  FbxCharacter fbxCharacter(fbxFile);


  InlineShader skinnedSurfaceShader = null;
  if(!drawing.hasShader('skinnedSurfaceShader')){
    skinnedSurfaceShader = OGLSkinnedSurfaceShader('skinnedSurfaceShader');
    drawing.registerShader(skinnedSurfaceShader);
  }
  else
    skinnedSurfaceShader = drawing.getShader('skinnedSurfaceShader');

  InlineMaterial characterMaterial = skinnedSurfaceShader.getOrCreateMaterial(fbxCharacter.getName() + "_Material");
  characterMaterial.setUniform(InlineUniform('u_diffuseColor', Color(1.0, 0.0, 0.0)));

  InlineMatrixArrayTexture poseTexture(fbxCharacter.getName() + "_PoseTexture", fbxCharacter.getSkinningMatrices());
  for(Integer geom=0; geom<fbxCharacter.getNumGeometries(); geom++){
    InlineMeshShape skinShape(fbxCharacter.getName() + "_" + geom, fbxCharacter.getGeometry(geom));
    InlineInstance skinInstance = SimpleInlineInstance(fbxCharacter.getName() + "_" + geom, handle.rootTransform, skinShape, characterMaterial);
    skinInstance.setInstanceUniform(InlineUniform('skinningMatrices', poseTexture));
    skinInstance.setInstanceUniform(InlineUniform('bindShapeTransform', fbxCharacter.getBindShapeTransform(geom)));
  }

  // Update the pose of the character before rendering.
  ClipPose pose = characters[index].getPose();
  pose.evaluate(time);
  poseTexture.update(characters[index].getSkinningMatrices());


\endrst
\seealso Character, FbxCharacter, SkinningAttribute
\dfgPresetOmit
*/
object OGLSkinnedSurfaceShader : OGLSurfaceShader {
};

/// default constructor
function OGLSkinnedSurfaceShader() {
  // Avoid calling the init method if this default constructor is being invoked 
  // during the construction of a derived object.
  if(this.type() == OGLSkinnedSurfaceShader)
    this.init(String(this.type()));
}

/// default constructor taking a name
function OGLSkinnedSurfaceShader(String name) {
  this.init(name);
}

/// initialize the OGLSkinnedSurfaceShader using name
/// \internal
function OGLSkinnedSurfaceShader.init!(String name) {
  this.name = name;
  this.setVertexCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      uniform mat4 u_viewMatrix;
      uniform mat4 u_projection;
      uniform mat4 u_modelMatrix;
      uniform mat3 u_normalMatrix;

      uniform vec3 u_light0Position;
      uniform vec4 u_light0Color;

      attribute vec4 positions;
      attribute vec3 normals;
      attribute vec4 skinningData;

      varying vec3 v_normal;
      varying vec4 v_position;
      varying vec3 v_lightDir;
      varying vec4 v_lightColor;
      varying vec3 v_eyeVec;


      #define HAS_SKINNING_TEXTURE
      #define HAS_BIND_SHAPE_TRANSFORM

      uniform sampler2D skinningMatrices;
      uniform vec2 skinningMatricesSize;
      uniform mat4 bindShapeTransform;

      " + 
      loadMatrix43FromTextureGLSL() +
      unpackIdsAndWeightsGLSL() +
      skinPositionsAndNormalsGLSL() +
      "

      void main(){

        v_position = positions;
        v_normal = normals;
        
        skinPositionsAndNormals(
          skinningMatrices,
          skinningMatricesSize,
          bindShapeTransform,
          skinningData,
          v_position,
          v_normal
        );
        v_normal = mat3(u_viewMatrix) * v_normal;
        vec4 v_positionInv = (u_viewMatrix * vec4(v_position.xyz, 1.0));
        gl_Position = u_projection * v_positionInv;
  
        v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
        v_lightColor = u_light0Color;
        v_eyeVec = -v_positionInv.xyz;

      }
    ");
  this.setFragmentCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      uniform vec4 u_ambientColor;
      uniform vec4 u_diffuseColor;
      uniform vec4 u_specularColor;
      uniform float u_specularFactor;
      uniform int u_normalIsTangent;
      uniform int u_doubleSided;

      varying vec3 v_normal;
      varying vec4 v_position;
      varying vec3 v_lightDir;
      varying vec4 v_lightColor;
      varying vec3 v_eyeVec;

      void main() {
        vec4 final_color = u_ambientColor;


        vec3 N;
        if(u_normalIsTangent == 0)
          N = normalize(v_normal);
        else
        {
          N = normalize(cross(v_normal, cross(v_normal, v_eyeVec)));
        }
        if(dot(N, v_eyeVec) < 0.0)
          N = -N;
        vec3 L = normalize(v_lightDir);

        float lambertTerm = dot(N,L);
        if(u_doubleSided != 0)
          lambertTerm = abs(lambertTerm);
        
        if(lambertTerm > 0.0)
        {
          final_color += v_lightColor * u_diffuseColor * lambertTerm; 
          vec3 E = normalize(v_eyeVec);
          vec3 R = reflect(-L, N);
          float specular = pow( max(dot(R, E), 0.0), u_specularFactor );
          final_color += u_specularColor * specular;  
        }

        gl_FragColor = final_color;
      }
    ");  
  this.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_projection", Mat44()));
  this.defineUniform(InlineUniform("bindShapeTransform", Mat44()));
  this.defineUniform(InlineUniform('skinningMatrices', null));
  this.defineUniform(InlineUniform('skinningMatricesSize', Vec2()));

  this.defineUniform(InlineUniform("u_light0Position", Vec3(100, 100, 100)));
  this.defineUniform(InlineUniform("u_light0Color", Color(1.0, 1.0, 1.0)));

  this.defineUniform(InlineUniform("u_ambientColor", Color(0.05, 0.05, 0.05)));
  this.defineUniform(InlineUniform("u_diffuseColor", Color(0.0, 1.0, 0.0)));
  this.defineUniform(InlineUniform("u_specularColor", Color(0.2, 0.2, 0.2)));
  this.defineUniform(InlineUniform("u_specularFactor", 16.0));
  this.defineUniform(InlineUniform("u_normalIsTangent", Integer(0)));
  this.defineUniform(InlineUniform("u_doubleSided", Integer(0)));

  this.defineAttribute('positions', "Vec3");
  this.defineAttribute('normals', "Vec3");
  this.defineAttribute('skinningData', "Vec4");
}

