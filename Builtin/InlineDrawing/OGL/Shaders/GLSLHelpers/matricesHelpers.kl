
/// \internal
function String loadMatrix43FromTextureGLSL(){
  return "
mat4x3 loadMatrix43FromTexture(sampler2D texture, in int index, in vec2 textureSize) {
  int pixel = index*4;
  int width = int(textureSize.x);
  int height = int(textureSize.y);
  int row = pixel / width;
  int column = pixel - row*width;

	mat3x4 result;
  for( int i = 0; i < 3; ++i ) {
    vec2 coords = vec2(float(2*(column+i)+1)/float(2*width), float(2*row+1)/float(2*height));
    result[i] = texture2D( texture, coords );
  }
  return transpose(result);
}";

}

/// \internal
function String inverseAndTransposeMat33GLSL(){
  return "
mat3 inverseAndTransposeMat33(in mat3 m)
{
  float det = m[0].x * m[1].y * m[2].z
            + m[0].y * m[1].z * m[2].x
            + m[0].z * m[1].x * m[2].y
            - m[0].x * m[1].z * m[2].y
            - m[0].y * m[1].x * m[2].z
            - m[0].z * m[1].y * m[2].x;
  float invDet = 1.0 / det;

  mat3 result;

  result[0].x = (m[1].y * m[2].z - m[1].z * m[2].y) * invDet;
  result[1].x = (m[0].z * m[2].y - m[0].y * m[2].z) * invDet;
  result[2].x = (m[0].y * m[1].z - m[0].z * m[1].y) * invDet;

  result[0].y = (m[1].z * m[2].x - m[1].x * m[2].z) * invDet;
  result[1].y = (m[0].x * m[2].z - m[0].z * m[2].x) * invDet;
  result[2].y = (m[0].z * m[1].x - m[0].x * m[1].z) * invDet;

  result[0].z = (m[1].x * m[2].y - m[1].y * m[2].x) * invDet;
  result[1].z = (m[0].y * m[2].x - m[0].x * m[2].y) * invDet;
  result[2].z = (m[0].x * m[1].y - m[0].y * m[1].x) * invDet;
  return result;
}";

}
