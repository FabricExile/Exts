/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
\versionadded 1.12.0

The OGLHUDShader is used to draw HUD geometry, or Heads Up Display objects. It positions the geometry on screen in screen coordinates.
\rst
Uniforms
----------
=============== ============ ===================================== ==================================
Name            Type         Description                           Default
=============== ============ ===================================== ==================================
u_color         Color        The diffuse color                     Color(1.0, 0.0, 0.0)
=============== ============ ===================================== ==================================

Attributes
----------
=============== ============ =====================================
Name            Type         Description
=============== ============ =====================================
positions       Vec3         Geometry positions
=============== ============ =====================================
\endrst

\example
  InlineDrawing draw = OGLInlineDrawing();
  InlineShader shader = draw.registerShader(OGLHUDShader);
  InlineMaterial mat = shader.getOrCreateMaterial('green');
  mat.setUniform('u_color', Color(0.0, 1.0, 0.0));
\endexample
\dfgPresetOmit
*/
object OGLHUDShader: OGLInlineShader {};

/// default constructor
function OGLHUDShader() {
  // Avoid calling the init method if this default constructor is being invoked 
  // during the construction of a derived object.
  if(this.type() == OGLHUDShader)
    this.init(String(this.type()));
}

/// default constructor taking a name
function OGLHUDShader(String name) {
  this.init(name);
}

/// initialize the shader using a name.
/// \internal
function OGLHUDShader.init!(String name) {
  this.name = name;
  this.setVertexCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2

      uniform mat4 u_modelMatrix;
      
      attribute vec4 positions;

      void main(){
        gl_Position = u_modelMatrix * positions;
      }
    ");
  this.setFragmentCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      uniform vec4 u_color;
      
      void main(){
        gl_FragColor = u_color;
      }
    ");  
  this.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
  this.defineUniform(InlineUniform('u_color', Color(1.0, 0.0, 0.0)));
  this.defineAttribute('positions', "Vec3");
}
