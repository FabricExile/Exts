/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
\versionadded 1.12.0

The OGLFlatVertexColorShader inherits the OGLInlineShader. It extends the OGLInlineShader for shading with flat colors, using the vertexColors attribute for the diffuse.

\rst
Attributes
----------
=============== ============ =====================================
Name            Type         Description
=============== ============ =====================================
positions       Vec3         Geometry positions
vertexColors    Color        Color per vertex
=============== ============ =====================================
\endrst

\example
  require InlineDrawing;

  function Vec3 randomVector(Scalar radius, io UInt32 offset)
  {
    const UInt32 seed = 16841;
    return Vec3(
      (mathRandomFloat32(seed, offset++) - 0.5) * radius,
      (mathRandomFloat32(seed, offset++) - 0.5) * radius,
      (mathRandomFloat32(seed, offset++) - 0.5) * radius
    );
  }

  operator entry(){
      // Create a new Points geometry with a vertex colors attribute.
      Points points();
      Ref<ColorAttribute> vertexColors = points.getAttributes().getOrCreateColorAttribute( 'vertexColors' );
      UInt32 offset = 0;
      UInt32 numPoints = 200;
      Scalar radius = 100.0;
      points.resize(numPoints);
      for( UInt32 i = 0; i < numPoints; ++i ) {
        points.setPosition( i, randomVector( radius, offset ) );
        // Assign Red to every even point, and green to every odd point
        if(i%2 == 0)
          vertexColors.values[i] = Color(1.0, 0.0, 0.0);
        else
          vertexColors.values[i] = Color(0.0, 1.0, 0.0);
      }

      // Now display the points using InlineDrawing.
      InlineDrawing drawing = OGLInlineDrawing_GetInstance();
      InlineShader vertexColorsShader = drawing.registerShader(OGLFlatVertexColorShader);
      InlineMaterial vertexColorsShaderMaterial = vertexColorsShader.getOrCreateMaterial('vertexColors');

      InlineTransform pointsTransform = InlineTransformBase('pointsTransform', Xfo());
      drawing.getRoot().addChild(pointsTransform);
      InlineShape pointsShape = InlinePointsShape("points", points);

      InlineInstance pointsInstance = InlineInstance("points", pointsTransform, pointsShape, vertexColorsShaderMaterial);
  }
\endexample
\dfgPresetOmit

*/
object OGLFlatVertexColorShader: OGLInlineShader {};

/// default constructor
function OGLFlatVertexColorShader() {
  // Avoid calling the init method if this default constructor is being invoked 
  // during the construction of a derived object.
  if(this.type() == OGLFlatVertexColorShader)
    this.init(String(this.type()));
}

/// default constructor taking a name
function OGLFlatVertexColorShader(String name) {
  this.init(name);
}

/// initialize the OGLFlatVertexColorShader using name
/// \internal
function OGLFlatVertexColorShader.init!(String name) {
  this.name = name;
  this.setVertexCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2

      uniform mat4 u_viewMatrix;
      uniform mat4 u_projection;
      uniform mat4 u_modelMatrix;
      
      attribute vec4 positions;
      attribute vec4 vertexColors;
      
      varying vec4 v_vertexColor;

      void main(){
        gl_Position = u_projection * (u_viewMatrix * (u_modelMatrix * positions));
        v_vertexColor = vertexColors;
      }
    ");
  this.setFragmentCode("
      #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
      
      varying vec4 v_vertexColor;
      
      void main(){
        gl_FragColor = v_vertexColor;
      }
    ");  
  this.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_projection", Mat44()));
  this.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
  this.defineAttribute('positions', "Vec4");
  this.defineAttribute('vertexColors', "Vec4");
}
