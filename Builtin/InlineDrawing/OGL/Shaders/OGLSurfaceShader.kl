/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;

/**
\versionadded 1.12.0

The OGLSurfaceShader inherits the OGLInlineShader. It extends the OGLInlineShader for shading with a simple phong model.

\rst
Uniforms
----------
==================== ============ ===================================== ==================================
Name                 Type         Description                           Default
==================== ============ ===================================== ==================================
u_light0Position     Vec3         Position of the first light           Position of the camera
u_light0Color        Color        Color of the first light              Color(1.0, 1.0, 1.0)
u_ambientColor       Color        Ambient color component               Color(0.05, 0.05, 0.05)
u_diffuseColor       Color        Diffuse color component               Color(0.0, 1.0, 0.0)
u_specularColor      Color        Specular color component              Color(0.2, 0.2, 0.2)
u_specularFactor     Color        Specular distribution factor          16.0
u_normalIsTangent    Integer      Flag defining normal type             0
u_doubleSided        Integer      Flag defining backface shading model  0
==================== ============ ===================================== ==================================

Attributes
----------
=============== ============ =====================================
Name            Type         Description
=============== ============ =====================================
positions       Vec3         Geometry positions
normals         Vec3         Geometry normals
=============== ============ =====================================
\endrst

\example
  InlineDrawing draw = OGLInlineDrawing();
  InlineShader shader = draw.registerShader(OGLSurfaceShader);
  InlineMaterial mat = shader.getOrCreateMaterial('blue');
  mat.setUniform('u_diffuseColor', Color(0.0, 0.0, 1.0));
\endexample
\dfgPresetOmit
*/
object OGLSurfaceShader: OGLInlineShader {};

/// default constructor
function OGLSurfaceShader() {
  // Avoid calling the init method if this default constructor is being invoked 
  // during the construction of a derived object.
  if(this.type() == OGLSurfaceShader)
    this.init(String(this.type()), false);
}

/// default constructor
function OGLSurfaceShader(Boolean needsInstancing) {
  this.init(String(this.type()), needsInstancing);
}

/// default constructor taking a name
function OGLSurfaceShader(String name) {
  this.init(name, false);
}

/// default constructor taking a name
function OGLSurfaceShader(String name, Boolean needsInstancing) {
  this.init(name, needsInstancing);
}

/// initialize the shader using a name.
/// \internal
function OGLSurfaceShader.init!(String name, Boolean needsInstancing) {

  // determine if we should allow hardware instancing
  this.hardwareInstancingStatus = needsInstancing ? OGL_HWINSTANCING_ENABLEIFSUPPORTED : OGL_HWINSTANCING_DISABLED;

  this.name = name;
  if(this.supportsHardwareInstancing())
    this.name += 'HardwareInstanced';

  String vertexCode = "
      v_normal = normal_matrix * normals;
      v_position = model_matrix * positions;
      vec4 v_positionInv = (u_viewMatrix * vec4(v_position.xyz, 1.0));
      gl_Position = u_projection * v_positionInv;

      v_lightDir = (u_viewMatrix * vec4(u_light0Position, 1.0)).xyz - v_positionInv.xyz;
      v_lightColor = u_light0Color;
      v_eyeVec = -v_positionInv.xyz;
    }
    ";

  String fragmentCode = "
    void main() {
      vec4 final_color = u_ambientColor;

      vec3 N;
      if(u_normalIsTangent == 0)
        N = normalize(v_normal);
      else
      {
        N = normalize(cross(v_normal, cross(v_normal, v_eyeVec)));
      }
      if(dot(N, v_eyeVec) < 0.0)
        N = -N;
      vec3 L = normalize(v_lightDir);

      float lambertTerm = dot(N,L);
      if(u_doubleSided != 0)
        lambertTerm = abs(lambertTerm);
      
      if(lambertTerm > 0.0)
      {
        final_color += v_lightColor * u_diffuseColor * lambertTerm; 
        vec3 E = normalize(v_eyeVec);
        vec3 R = reflect(-L, N);
        float specular = pow( max(dot(R, E), 0.0), u_specularFactor );
        final_color += u_specularColor * specular;  
      }

      gl_FragColor = final_color;
    }
   ";

  if(this.supportsHardwareInstancing())
  {
    this.setVertexCode("
        #version 150 // We require OpenGL 3.3 for instancing
        
        uniform mat4 u_viewMatrix;
        uniform mat4 u_projection;
        uniform mat4 u_modelMatrix;
        uniform mat3 u_normalMatrix;

        uniform vec3 u_light0Position;
        uniform vec4 u_light0Color;

        in vec4 hw_inst_mm_col0;
        in vec4 hw_inst_mm_col1;
        in vec4 hw_inst_mm_col2;
        in vec4 hw_inst_mm_col3;
        in vec4 positions;
        in vec3 normals;

        out vec3 v_normal;
        out vec4 v_position;
        out vec3 v_lightDir;
        out vec4 v_lightColor;
        out vec3 v_eyeVec;

        void main(){
          mat4 model_matrix = mat4(hw_inst_mm_col0, hw_inst_mm_col1, hw_inst_mm_col2, hw_inst_mm_col3);
          mat3 normal_matrix = mat3(transpose(inverse(u_viewMatrix * model_matrix)));
      " + vertexCode);
    this.setFragmentCode("
        #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
        
        uniform vec4 u_ambientColor;
        uniform vec4 u_diffuseColor;
        uniform vec4 u_specularColor;
        uniform float u_specularFactor;
        uniform int u_normalIsTangent;
        uniform int u_doubleSided;

        in vec3 v_normal;
        in vec4 v_position;
        in vec3 v_lightDir;
        in vec4 v_lightColor;
        in vec3 v_eyeVec;

      " + fragmentCode);
  }
  else
  {
    this.setVertexCode("
        #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
        
        uniform mat4 u_viewMatrix;
        uniform mat4 u_projection;
        uniform mat4 u_modelMatrix;
        uniform mat3 u_normalMatrix;

        uniform vec3 u_light0Position;
        uniform vec4 u_light0Color;

        attribute vec4 positions;
        attribute vec3 normals;

        varying vec3 v_normal;
        varying vec4 v_position;
        varying vec3 v_lightDir;
        varying vec4 v_lightColor;
        varying vec3 v_eyeVec;

        void main(){
          mat4 model_matrix = u_modelMatrix;
          mat3 normal_matrix = u_normalMatrix;
      " + vertexCode);
    this.setFragmentCode("
        #version 120 // We require OpenGL 2.1 for InlineDrawing, which supports GLSL 1.2
        
        uniform vec4 u_ambientColor;
        uniform vec4 u_diffuseColor;
        uniform vec4 u_specularColor;
        uniform float u_specularFactor;
        uniform int u_normalIsTangent;
        uniform int u_doubleSided;

        varying vec3 v_normal;
        varying vec4 v_position;
        varying vec3 v_lightDir;
        varying vec4 v_lightColor;
        varying vec3 v_eyeVec;

      " + fragmentCode);  
  }

  this.defineUniform(InlineUniform("u_viewMatrix", Mat44()));
  this.defineUniform(InlineUniform("u_projection", Mat44()));

  if(!this.supportsHardwareInstancing())
  {
    this.defineUniform(InlineUniform("u_modelMatrix", Mat44()));
    this.defineUniform(InlineUniform("u_normalMatrix", Mat33()));
  }

  this.defineUniform(InlineUniform("u_light0Position", Vec3(100, 100, 100)));
  this.defineUniform(InlineUniform("u_light0Color", Color(1.0, 1.0, 1.0)));

  this.defineUniform(InlineUniform("u_ambientColor", Color(0.05, 0.05, 0.05)));
  this.defineUniform(InlineUniform("u_diffuseColor", Color(0.0, 1.0, 0.0)));
  this.defineUniform(InlineUniform("u_specularColor", Color(0.2, 0.2, 0.2)));
  this.defineUniform(InlineUniform("u_specularFactor", 16.0));
  this.defineUniform(InlineUniform("u_normalIsTangent", Integer(0)));
  this.defineUniform(InlineUniform("u_doubleSided", Integer(0)));

  if(this.supportsHardwareInstancing())
  {
    this.defineAttribute('hw_inst_mm_col0', "Vec4");
    this.defineAttribute('hw_inst_mm_col1', "Vec4");
    this.defineAttribute('hw_inst_mm_col2', "Vec4");
    this.defineAttribute('hw_inst_mm_col3', "Vec4");
  }

  this.defineAttribute('positions', "Vec3");
  this.defineAttribute('normals', "Vec3");
}

/// called by the InlineDrawing, should not be called manually
/// \internal
function Boolean OGLSurfaceShader.draw!(io DrawContext context) {

  if(this.getName() == 'debug')
   report('OGLSurfaceShader.draw '+this.getName());

  if(context.lightPositions.size() > 0)
    this.setUniform(InlineUniform('u_light0Position', context.lightPositions[0]));
  else
    this.setUniform(InlineUniform('u_light0Position', context.viewport.getCamera().getMat44().translation()));

  if(context.lightColors.size() > 0)
    this.setUniform(InlineUniform('u_light0Color', context.lightColors[0]));

  return this.parent.draw(context);
}

/// enables or disables the hardware instancing
Boolean OGLSurfaceShader.enableHardwareInstancing!(io DrawContext context, Boolean enable, io Object storage, Xfo xfos[], UInt32 version) {

  if(!this.supportsHardwareInstancing())
    return false;

  Integer locationInts[4];
  locationInts[0] = this.getAttributeID('hw_inst_mm_col0');
  locationInts[1] = this.getAttributeID('hw_inst_mm_col1');
  locationInts[2] = this.getAttributeID('hw_inst_mm_col2');
  locationInts[3] = this.getAttributeID('hw_inst_mm_col3');
  Size locations[4];

  for(Size i=0;i<4;i++) // todo
  {
    if(locationInts[i] == -1)
      return false;
    locations[i] = locationInts[i];
  }

  OGLInstancingBuffer instBuffer = storage;
  if(instBuffer == null)
  {
    instBuffer = OGLInstancingBuffer();
    storage = instBuffer;
  }

  if(!enable)
  {
    instBuffer.disable(locations);
    return true;
  }

  if(!instBuffer.updateXfos(context, xfos, version))
    return false;

  instBuffer.enable(locations);

  return true;
}
