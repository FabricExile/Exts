/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/**
\versionadded 1.12.0

The OGLConstantScreenSizeTransformAdaptor is the adaptor for the ConstantScreenSizeTransform. It manages computing a model matrix that scales the geometry according to how far it is from the camera. This maintains the size of the geometry on screen regardless of its distance to the camera. 
\dfgPresetOmit
*/
object OGLConstantScreenSizeTransformAdaptor : InlineTransformAdaptor {};

/// default constructor
function OGLConstantScreenSizeTransformAdaptor() {}

/// returns the types this adaptor is capable of drawing
function String[] OGLConstantScreenSizeTransformAdaptor.getTransformTypes() {
  String result[];
  result.push('ConstantScreenSizeTransform');
  return result;
}

/// draws the lines to the screen. this is used by the 
/// InlineInstance, and should not be called manually.
/// \internal
function Boolean OGLConstantScreenSizeTransformAdaptor.draw!(io DrawContext context, io Ref<InlineTransform> transform, Index index, Size count) {

  Ref<InlineShader> shader = context.getMetaData('currentShader');
  Xfo modelXfo = transform.nonLocking_getGlobalXfo(index);

  Boolean orthographic = context.viewport.getCamera().isOrthographic();
  if(orthographic){
    // this constant value renders the geometry approximately the same size inthe orthographic viewport to the perspective. 
    Scalar sizeFudge = 0.003;
    modelXfo.sc *= context.viewport.getCamera().getOrthographicFrustumHeight() * sizeFudge;
  }
  else{
    Vec3 cameraPos = context.viewport.getCamera().getMat44().translation();
    Scalar fovY = context.viewport.getCamera().getFovY();
    Scalar dist = cameraPos.distanceTo(modelXfo.tr);
    Scalar scaleFactor = dist * fovY * (1.0/context.viewport.getDimensions().y);
    modelXfo.sc *= scaleFactor;
  }

  Mat44 modelMatrix = modelXfo.toMat44();
  if(!shader.drawUniform(context, InlineUniform("u_modelMatrix", modelMatrix))) {
    return false;
  }
  
  if(!shader.drawUniform(context, InlineUniform("u_normalMatrix", context.invViewMat * modelMatrix.upperLeft()))) {
    return false;
  }

  return true;
}

