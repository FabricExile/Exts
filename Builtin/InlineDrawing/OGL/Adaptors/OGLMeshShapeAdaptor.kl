/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

/**
\versionadded 1.12.0

The OGLMeshShapeAdaptor implements the InlineShapeAdaptor interface. It is used to draw a InlineMeshShape within an OpenGL viewport.
\dfgPresetOmit
*/
object OGLMeshShapeAdaptor : InlineShapeAdaptor {};

/// default constructor
function OGLMeshShapeAdaptor() {}

/// returns the types this adaptor is capable of drawing
function String[] OGLMeshShapeAdaptor.getShapeTypes() {
  String result[];
  result.push('InlineMeshShape');
  return result;
}

/// draws the mesh to the screen. this is used by the 
/// InlineInstance, and should not be called manually.
/// \internal
function Boolean OGLMeshShapeAdaptor.draw!(io DrawContext context, io Ref<InlineShape> shape) {

  // access the mesh shape
  InlineMeshShape meshShape = shape;
  PolygonMesh mesh = meshShape.getMesh();

  if(mesh == null)
    return true;

  OGLBufferDictionary buffers = meshShape.getMetaData('buffers');
  if(buffers == null) {
    buffers = OGLBufferDictionary();
    meshShape.setMetaData('buffers', buffers);
  }

  if(mesh.pointCount() == 0)
    return true;

  if(mesh.getVersion() == 0 && mesh.getAttributes().size() > 0){
    setError("Error drawing "+shape.getName() + ": topology version has not been incremented. Call mesh.incrementVersion after making topology changes.");
    return false;
  }

  // reset all versions if the uid changed
  if(buffers.getVersion('uid') != mesh.uid()) {
    buffers.resetAllVersions();
    buffers.setVersion('uid', mesh.uid());
  }

  Ref<InlineShader> shader = context.getMetaData('currentShader');
  OGLShape_updateGeometryAttributeBuffers(context, buffers, mesh.getAttributes());

  if(buffers.getVersion('topology') != mesh.getStructureVersion() + mesh.attributeSharingVersion) {

    UInt32 triangleIndices[];
    triangleIndices = mesh.generateAttributesTriangleList();

    if( Fabric_Guarded && !Fabric_OnGPU )
    {
      UInt32 maxIndicesRange = OGLShape_GetArrayMaxValue(triangleIndices);
      if(!OGLShape_CheckGeometryAttributesIndicesRange(mesh.getAttributes(), maxIndicesRange))
        return false;
    }

    OGLBuffer buffer = buffers.get('topology');
    if(buffer == null) {
      buffer = OGLBuffer();
      buffer.bufferType = GL_ARRAY_BUFFER;
      buffer.bufferUsage = GL_STATIC_DRAW;
      buffers.set('topology', buffer);
    }
    if( buffer.bufferID )
      buffer.bufferUsage = GL_DYNAMIC_DRAW;//Loaded at least 2 times: lazily upgrade to "dynamic"

    Boolean useUShorts = mesh.getAttributes().size() < 65536;
    buffer.bufferElementComponentType = useUShorts ? GL_UNSIGNED_SHORT : GL_UNSIGNED_INT;

    if( useUShorts ) {
      UInt16 triangleIndicesUShort[];
      Size num = triangleIndices.size();
      triangleIndicesUShort.resize( num );
      for( Size i = 0; i < num; ++i )
        triangleIndicesUShort[i] = UInt16( triangleIndices[i] );

      buffer.genBuffer(triangleIndicesUShort.data(), triangleIndicesUShort.dataSize(), triangleIndicesUShort.size());
    } else
      buffer.genBuffer(triangleIndices.data(), triangleIndices.dataSize(), triangleIndices.size());

    buffers.setVersion('topology', mesh.getStructureVersion() + mesh.attributeSharingVersion);
  }

  OGLBuffer buffer = buffers.get('topology');
  if(buffer == null){
    report("Warning: invalid topology for :" +shape.getName());
    return false;
  }

  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffer.bufferID);
  Data NULL;

  Ref<InlineInstance> instance = context.getMetaData('currentInstance');
  Xfo xfos[] = instance.transform.nonLocking_getAllGlobalXfos();

  if(shader.supportsHardwareInstancing())
  {
    // report('drawing shader '+shader.getName()+' instanced.');
    shader.enableHardwareInstancing(context, true, instance.instancingStorage, xfos, instance.transform.getVersion());

    glDrawElementsInstanced(GL_TRIANGLES, buffer.elementCount, buffer.bufferElementComponentType, NULL, xfos.size());

    shader.enableHardwareInstancing(context, false, instance.instancingStorage, xfos, instance.transform.getVersion());
  }
  else
  {
    // report('drawing shader '+shader.getName()+' iterative.');
    for(Size i=0;i<xfos.size();i++)
    {
      if(!OGLTransform_draw(context, shader, xfos[i].toMat44()))
        return false;
      if(!instance.drawTransformUniforms(context, shader, i))
        return false;
      glDrawElements(GL_TRIANGLES, buffer.elementCount, buffer.bufferElementComponentType, NULL);
    }
  }

  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

  return true;
}
