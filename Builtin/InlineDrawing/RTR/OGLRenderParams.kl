//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

//////////////////// OGLBuffer param

/// \internal
function RenderValueKey RenderParamValues.setAsOGLBuffer!(String name) {
  RenderValueKey key = this.getOrCreateKeyFromName(name, OGLBuffer, RenderParamCategory_attribute, RenderParamFlag_OGLShaderCompatible);
  if( this.paramsData[key.index].param.data == null )
    this.paramsData[key.index].param.data = OGLBuffer();
  return key;
}

/// \internal
function RenderValueKey RenderParamValues.setAsOGLBuffer!(String name, io OGLBuffer value) {
  RenderValueKey key = this.setAsOGLBuffer(name);
  value = this.paramsData[key.index].param.data;
  return key;
}

/// \internal
inline RenderParamValues.get?(RenderValueKey key, io Ref<OGLBuffer> value) {
  value = this.paramsData[key.index].param.data;
}

/// \internal
inline Ref<OGLBuffer> RenderParamValues.getOGLBuffer(RenderValueKey key) {
  Ref<OGLBuffer> buffer = this.paramsData[key.index].param.data;
  return buffer;
}

/// \internal
inline Boolean RenderParamValues.isOGLBuffer(RenderValueKey key) {
  return this.paramsData[key.index].param.data.type() == OGLBuffer;
}

/// \internal
function String OGLBuffer.getDesc?() {
  return "OGLBuffer: elementCount=" + this.elementCount + " bufferID=" + this.bufferID + " numComp=" + this.numBufferElementComponents + " compGlType=" + this.bufferElementComponentType;
}

//////////////////// OGLTexture2D param

/// \internal
function RenderParamValues.setAsOGLTexture2D!(RenderValueKey key) {
  this.setType(key, OGLTexture2D, RenderParamCategory_image, RenderParamFlag_OGLShaderCompatible);
  if( this.paramsData[key.index].param.data == null )
    this.paramsData[key.index].param.data = OGLTexture2D();
}

/// \internal
function RenderValueKey RenderParamValues.setAsOGLTexture2D!(String name) {
  RenderValueKey key = this.getOrCreateKeyFromName(name);
  this.setAsOGLTexture2D(key);
  return key;
}

/// \internal
function RenderValueKey RenderParamValues.setAsOGLTexture2D!(String name, io OGLTexture2D value) {
  RenderValueKey key = this.setAsOGLTexture2D(name);
  value = this.paramsData[key.index].param.data;
  return key;
}

/// \internal
inline RenderParamValues.get?(RenderValueKey key, io Ref<OGLTexture2D> value) {
  value = this.paramsData[key.index].param.data;
}

/// \internal
inline Ref<OGLTexture2D> RenderParamValues.getOGLTexture2D(RenderValueKey key) {
  Ref<OGLTexture2D> texture = this.paramsData[key.index].param.data;
  return texture;
}

/// \internal
inline Boolean RenderParamValues.isOGLTexture2D(RenderValueKey key) {
  return this.paramsData[key.index].param.data.type() == OGLTexture2D;
}

/// \internal
function String OGLTexture2D.getDesc?() {
  return "OGLTexture2D: textureName=" + this.name + " bufferID=" + this.bufferID + " glTextureType=" + this.glTextureType + " width=" + this.width + " height=" + this.height;
}
