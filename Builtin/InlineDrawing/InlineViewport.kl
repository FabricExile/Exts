/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require Math;

alias ViewportCallback ViewportCallbackArray[];

/// The interface 'Viewport' is implemented in case we require different kinds of Viewport objects to support the same interface. Currently only InlineViewport implements the Viewport interface. 
/// \dfgPresetOmit
interface Viewport {
  /// returns the name of the viewport
  String getName();

  /// sets the name of the viewport
  setName!(String name);

  /// returns the dimensions of the viewport in pixels.
  Vec2 getDimensions();

  /// returns the camera of this viewport
  Camera getCamera();

  /// sets the camera on this viewport
  setCamera!(Camera camera);

  /// returns the camera's projection matrix
  Mat44 getProjectionMat();

  /// returns the camera's view matrix
  Mat44 getViewMat();

  /// compute a ray into the scene based on a mouse coordinate
  Ray calcRayFromScreenPos(Vec2 pos);

  /// This method is called by the standalone tools to set up a viewport.
  /// \internal
  Boolean setup!(io DrawContext context);

  /// This method is called by the standalone tools to resize to the viewport.
  /// \internal
  Boolean resize!(io DrawContext context, Size width, Size height);

  /// This method is called by the standalone tools to draw to the viewport.
  /// \internal
  Boolean draw!(io DrawContext context);

  /// This method is called by the standalone tools to complete drawing of the viewport.
  /// \internal
  Boolean postDraw!(io DrawContext context);

  /// registers a callback for the viewport
  registerCallback!(ViewportDrawPhase phase, ViewportCallback callback);

  /// deregisters a callback for the viewport
  deregisterCallback!(ViewportDrawPhase phase, ViewportCallback callback);

  /// performs a registered callback, returns true if default behaviour should be skipped
  Boolean invokeCallback!(ViewportDrawPhase phase, io DrawContext context);
};

/// Helper function: from pixel coords to normalized screen coords
Vec2 PixelToNormalizedScreenSpace( Ref<Viewport> viewport, Vec2 uiPixelPosition ) {
  Vec2 normalized = ( ( uiPixelPosition + Vec2( 0.5 ) ) / viewport.getDimensions() ) * 2.0 - Vec2( 1 );
  return Vec2( normalized.x, -normalized.y ); // GL Y is inverted (bottom left corner)
}

/// Helper function: from normalized screen coords to pixel coords
Vec2 NormalizedScreenSpaceToPixel( Ref<Viewport> viewport, Vec2 normalizedScreenSpacePosition ) {
  Vec2 flipped( normalizedScreenSpacePosition.x, -normalizedScreenSpacePosition.y );
  return ( flipped + Vec2( 1 ) ) * viewport.getDimensions() * 0.5f - Vec2( 0.5 );
}

/// The InlineViewport object is used to send Viewport information from the host application to the InlineDrawing system and the Manipulation system. 
/// \dfgPresetOmit
object InlineViewport : Viewport_Virtual, Viewport {

  /// \internal
  String name;

  /// \internal
  Vec2 dimensions;

  /// \internal
  InlineCamera camera;

  /// \internal
  ViewportCallbackArray callbacks[ViewportDrawPhase];
};

/// default constructor
function InlineViewport(){
  this.camera = InlineCamera();
  this.name = 'Viewport';
}

~InlineViewport() {
}

function String InlineViewport.getName(){
  return this.name;
}

function InlineViewport.setName!(String name){
  this.name = name;
}

/// returns the dimensions of the viewport in pixels.
function Vec2 InlineViewport.getDimensions(){
  return this.dimensions;
}

/// returns the camera of this viewport
function Camera InlineViewport.getCamera(){
  return this.camera;
}

/// Gets sub-viewport if any: not the case by default
Viewport_Virtual InlineViewport.getSubViewport( SInt32 viewportPosX, SInt32 viewportPosY, io SInt32 upperLeftX, io SInt32 upperLeftY, io SInt32 bottomRightX, io SInt32 bottomRightY ) {
  upperLeftX = 0;
  upperLeftY = SInt32( this.dimensions.y );
  bottomRightX = SInt32( this.dimensions.x );
  bottomRightY = 0;
  return this;
}

/// returns the camera of this viewport
function InlineViewport.setCamera!(Camera camera){
  this.camera = camera;
}

/// returns the camera's projection matrix
function Mat44 InlineViewport.getProjectionMat(){

  // The camera matrix might have been explicitly set, in which case we don't 
  // need to compute it. The camera projection matrix might be set directly by a Splice plugin.
  if(!this.camera.projection.isNull())
    return this.camera.projection;
  
  Scalar aspectRatio = this.dimensions.x / this.dimensions.y;
  Scalar hFactor = 1.0f;
  Scalar wFactor = aspectRatio;

  if( this.camera.hasFilmGateAspectRatio() ) {
    Scalar fgAspectRatio = this.camera.getFilmGateAspectRatio();
    if( fgAspectRatio > aspectRatio ) {
      Scalar scaleFactor = fgAspectRatio / aspectRatio;
      hFactor *= scaleFactor;
      wFactor *= scaleFactor;
    }
  }

  if(!this.camera.isOrthographic){
    Scalar frustumH = ( tan( this.camera.fovY / 2 ) * this.camera.nearDistance ) * 2.0;
    Scalar frustumW = frustumH * wFactor;
    frustumH *= hFactor;
    return symmetricPerspectiveFrustum(frustumW, frustumH, this.camera.nearDistance, this.camera.farDistance, 0.0, 0.0);
  }
  else{
    Scalar frustumH = this.camera.orthographicFrustumH * hFactor;
    Scalar frustumW = this.camera.orthographicFrustumH * wFactor;
    return symmetricOrthographicFrustum(frustumW, frustumH, this.camera.nearDistance, this.camera.farDistance);
  }
}

/// returns the width, in normalized viewport coords, of horizontal or vertical bands required to respect the film gate, if any.
function InlineViewport.getFilmGateBandsWidth( io Scalar horizontalBandsNormalizedWidth, io Scalar verticalBandsNormalizedWidth ) {
  horizontalBandsNormalizedWidth = 0;
  verticalBandsNormalizedWidth = 0;
  if( !this.camera.hasFilmGateAspectRatio() )
    return;

  Scalar aspectRatio = this.dimensions.x / this.dimensions.y;
  Scalar fgAspectRatio = this.camera.getFilmGateAspectRatio();

  if( fgAspectRatio > aspectRatio )
    horizontalBandsNormalizedWidth = 1.0f - aspectRatio / fgAspectRatio;
  else
    verticalBandsNormalizedWidth = 1.0f - fgAspectRatio / aspectRatio;
}

/// returns the camera's view matrix
function Mat44 InlineViewport.getViewMat(){
  return this.camera.getMat44().inverse();
}

/// compute a ray into the scene based on a mouse coordinate
function Ray InlineViewport.calcRayFromScreenPos(Vec2 pos){
  // Compute a ray based on a position on the viewportManipulation 
  Ray ray;
  Vec2 dim = this.getDimensions();
  if (dim.x == 0 || dim.y == 0){
    setError("Error in calcRayFromScreenPos. Invalid InlineViewport dimensions:" + dim);
    return ray;
  }

  // Convert the raster coordinates to screen space ([0,{w|h}] -> [-1,1]
  // - Note: The raster vertical is inverted wrt OGL screenspace Y
  Scalar sx = (pos.x + 0.5) / Scalar(dim.x);
  Scalar sy = (pos.y + 0.5) / Scalar(dim.y);

  sx = (sx * 2.0) - 1.0;
  sy = (sy * 2.0) - 1.0;
  
  // Transform the origin from camera local to world space
  Mat44 cameraMat = this.camera.getMat44();

  if(!this.camera.isOrthographic){
    Vec3 rayStart = cameraMat * Vec3(0.0, 0.0, 0.0);

    // Get the projected window coordinate on the near plane
    // See http://www.songho.ca/opengl/gl_projectionmatrix.html
    // for details.
    Mat44 projInv = this.getProjectionMat().inverse();
    Vec3 rayDirection = projInv * Vec3(sx, - sy, - 1.0);

    // And from projection space to camera local.
    // - We nuke the translation part since we're transforming a vector.
    cameraMat.zeroTranslation();
    rayDirection = (cameraMat * rayDirection).unit();
    return Ray(rayStart, rayDirection);
  }
  else{
    Mat44 projInv = this.getProjectionMat().inverse();
    Vec3 rayStart = cameraMat * projInv * Vec3(sx, - sy, -1);
    Vec3 rayDirection = Vec3(0,0,-1);
    cameraMat.zeroTranslation();
    rayDirection = (cameraMat * rayDirection).unit();

    return Ray(rayStart, rayDirection);
  }
}

/// This method is called by the standalone tools to set up a viewport.
/// \internal
function Boolean InlineViewport.setup!(io DrawContext context) {
  return this.invokeCallback(ViewportDrawPhase_Setup, context);
}

/// This method is called by the standalone tools to resize to the viewport.
/// \internal
function Boolean InlineViewport.resize!(io DrawContext context, Size width, Size height) {
  this.dimensions.x = width;
  this.dimensions.y = height;
  if(this.invokeCallback(ViewportDrawPhase_Resize, context))
    return true;
  return false;
}

/// \internal
function Boolean InlineViewport.draw!(io DrawContext context) {
  return false;
}

/// \internal
Boolean InlineViewport.postDraw!(io DrawContext context) {
  return false;
}

/// registers a callback for the viewport
function InlineViewport.registerCallback!(ViewportDrawPhase phase, ViewportCallback callback) {
  ViewportCallbackArray callbacks = this.callbacks.get(phase, ViewportCallbackArray());
  for(Size i=0;i<callbacks.size();i++) {
    if(callbacks[i] == callback)
      return;
  }
  callbacks.push(callback);
  this.callbacks[phase] = callbacks;
}

/// deregisters a callback for the viewport
function InlineViewport.deregisterCallback!(ViewportDrawPhase phase, ViewportCallback callback) {
  ViewportCallbackArray callbacks = this.callbacks.get(phase, ViewportCallbackArray());
  ViewportCallbackArray newCallbacks;
  for(Size i=0;i<callbacks.size();i++) {
    if(callbacks[i] == callback)
      continue;
    newCallbacks.push(callbacks[i]);
  }
  this.callbacks[phase] = newCallbacks;
}

/// performs a registered callback, returns true if default behaviour should be skipped
/// \internal
function Boolean InlineViewport.invokeCallback!(ViewportDrawPhase phase, io DrawContext context) {
  ViewportCallbackArray callbacks = this.callbacks.get(phase, ViewportCallbackArray());
  Boolean result = false;
  Viewport viewport = this;
  for(Size i=0;i<callbacks.size();i++)
    result = result || callbacks[i].invoke(phase, viewport, context);
  return result;
}
