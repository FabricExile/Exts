/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */


/**
\versionadded 1.13.0

The DrawingUtilityFunctions provide a collection of helper functions for drawing various debugging data to screen. 


\rst

.. kl-example:: DrawingUtilityFunctions
    :nooutput:

    // Create a handle to manage the lifetime of the drawn elements 
    DrawingHandle handle('DrawingHandle');

    InlineTransform root = handle.getRootTransform();

    Size offset = 0;
    Scalar zPos = -10.0;

    drawLine(root, "Line", Vec3(0.0, 0.0, zPos), Vec3(3.0, 3.0, zPos), randomDarkColor(offset)); zPos += 3.0;

    Vec3 lineStrip[];
    lineStrip.resize(20);
    for(Integer i=0 ;i<lineStrip.size(); i++)
      lineStrip[i].set(sin(Scalar(i)/Scalar(lineStrip.size()) * 10.0), Scalar(i) * 0.2, zPos);

    drawLineStrip(root, "LineStrip", lineStrip, randomDarkColor(offset)); zPos += 3.0;

    Vec3 points[];
    points.resize(20);
    for(Integer i=0 ;i<points.size(); i++)
      points[i].set(sin(Scalar(i)/Scalar(lineStrip.size()) * 10.0), Scalar(i) * 0.2, zPos);
    drawPoints(root, "Points", points, randomDarkColor(offset), 1.3); zPos += 3.0;

    drawCircle(root, "Circle", Xfo(Vec3(0.0, 0.0, zPos)), 1.0, randomDarkColor(offset)); zPos += 5.0;
    drawLinesSphere(root, "LinesSphere", Xfo(Vec3(0.0, 0.0, zPos)), 1.0, randomDarkColor(offset)); zPos += 5.0;
    drawCross(root, "Cross", Xfo(Vec3(0.0, 0.0, zPos)), 1.0, randomDarkColor(offset)); zPos += 5.0;
    drawRectangle(root, "Rectangle", Xfo(Vec3(0.0, 0.0, zPos)), 1.5, 2.5, randomDarkColor(offset)); zPos += 5.0;
    drawSphere(root, "Sphere", Xfo(Vec3(0.0, 0.0, zPos)), 0.8, randomDarkColor(offset)); zPos += 3.0;
    
    drawArrow(root, "Arrow", Xfo(Vec3(0.0, 0.0, zPos)), randomDarkColor(offset)); zPos += 3.0;
    
    const Size seed = 1981;
    Xfo xfo(Vec3(0.0, 0.0, zPos));
    xfo.ori.setFromEulerAngles(Vec3(
        mathRandomFloat32(seed, offset++),
        mathRandomFloat32(seed, offset++),
        mathRandomFloat32(seed, offset++)
        ));
    drawXfo(root, "Xfo", xfo); zPos += 3.0;

    Xfo xfoArray[];
    xfoArray.resize(10);
    for(Integer i=0 ;i<xfoArray.size(); i++){
      xfoArray[i].tr.set(sin(Scalar(i)/Scalar(xfoArray.size()) * 5.0) * 0.5, (Scalar(i) * 0.8) - 4.0, zPos);
      xfoArray[i].sc.set(0.6, 0.6, 0.6);
      
      xfoArray[i].ori.setFromEulerAngles(Vec3(
        mathRandomFloat32(seed, offset++),
        mathRandomFloat32(seed, offset++),
        mathRandomFloat32(seed, offset++)
        ));
    }
    drawXfoArray(root, "Xfos", xfoArray, randomDarkColor(offset), 0.2); zPos += 5.0;
    
\endrst
\dfgPresetOmit

The sample scene 'inlinedrawing_debugUtilityFunctions' provides an example of debug shape draing from within a splice operator. 

*/

require Math;

/// \internal
/// returns the InlineShape at the given transform using a flat shader using the specified color.
/// \dfgPresetOmit
function InlineShape getShapeFromInstance(InlineTransform transform, Color color){
  Ref<InlineInstance> instance = transform.getChild(0);
  instance.setInstanceUniform(InlineUniform('u_color', color));
  return instance.getShape();
}

/// \internal
/// constructs an InlineInstance from the InlineShape at the given transform using a flat shader using the specified color.
/// \dfgPresetOmit
function createInstanceShape(io InlineTransform transform, InlineShape shape, Color color){

  InlineDrawing drawing = OGLInlineDrawing_GetInstance();
  InlineShader shader = drawing.registerShader(OGLFlatShader);
  InlineMaterial mat = shader.getOrCreateMaterial("flat");

  InlineInstance instance(shape.getName(), transform, shape, mat);
  instance.setInstanceUniform(InlineUniform('u_color', color));
}

/**
Looks under the given transform for a child wth the given name and returns it, else sets up a new lines shape with the given name.
If the shape already exists under the given name, the color will be updated to the color value provided.
\rst
.. kl-example:: getOrCreateLines
    :nooutput:

  DrawingHandle handle('DrawingHandle');

  InlineTransform root = handle.getRootTransform();

  InlineLinesShape linesShape = getOrCreateLines(rootTransform, 'MyLines', Color(1.0,0.0,0.0));

  // Clear the linse and re-generate the shape based on the current evaluation data. 
  Lines lines = linesShape.getLines();
  lines.clear();
  lines.addLine(start, end);

\endrst
\dfgPresetOmit
*/
function InlineLinesShape getOrCreateLines(io InlineTransform rootTransform, String name, Color color, Xfo xfo){
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null)
  {
    transform = InlineTransformBase(name, rootTransform, xfo);
    InlineLinesShape lineShape(name, Lines());
    createInstanceShape(transform, lineShape, color);
    return lineShape;
  }
  else
    return getShapeFromInstance(transform, color);
}

/// Override
/// \dfgPresetOmit
function InlineLinesShape getOrCreateLines(io InlineTransform rootTransform, String name, Color color){
  return getOrCreateLines(rootTransform, name, color, Xfo());
}

/**
Looks under the given transform for a child wth the given name and returns it, else sets up a new points shape with the given name.
If the shape already exists under the given name, the color will be updated to the color value provided.

\rst
.. kl-example:: getOrCreatePoints
    :nooutput:

  DrawingHandle handle('DrawingHandle');
  InlineTransform root = handle.getRootTransform();
  InlinePointsShape pointsShape = getOrCreatePoints(rootTransform, 'MyPoints', Color(1.0,0.0,0.0));

  // Clear the points and re-generate the shape based on the current evaluation data. 
  Points points = pointsShape.getPoints();
  points.clear();
  points.addPoint(Vec3(x, y, z));

\endrst
\dfgPresetOmit
*/
function InlinePointsShape getOrCreatePoints(io InlineTransform rootTransform, String name, Color color){
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null)
  {
    transform = InlineTransformBase(name, rootTransform, Xfo());
    InlinePointsShape pointsShape(name, Points());
    createInstanceShape(transform, pointsShape, color);
    return pointsShape;
  }
  else
    return getShapeFromInstance(transform, color);
}

/**
Looks under the given transform for a child wth the given name and returns it, else sets up a new mesh shape with the given name.
If the shape already exists under the given name, the color will be updated to the color value provided.
\rst
.. kl-example:: getOrCreateMesh
    :nooutput:

  DrawingHandle handle('DrawingHandle');
  InlineTransform root = handle.getRootTransform();
  InlineMeshShape meshShape = getOrCreateMesh(rootTransform, 'MyMesh', Color(1.0,0.0,0.0));

  // Clear the mesh and re-generate the shape based on the current evaluation data. 
  PolygonMesh mesh = meshShape.getmesh();
  mesh.clear();
  // Add mesh data here...

\endrst
\dfgPresetOmit
*/
function InlineMeshShape getOrCreateMesh(io InlineTransform rootTransform, String name, Color color){
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null){
    transform = InlineTransformBase(name, rootTransform, Xfo());

    InlineMeshShape meshShape(name, PolygonMesh());

    InlineDrawing drawing = OGLInlineDrawing_GetInstance();
    InlineShader shader = drawing.registerShader(OGLSurfaceShader);
    InlineMaterial mat = shader.getOrCreateMaterial("surface");

    InlineInstance instance(name, transform, meshShape, mat);
    instance.setInstanceUniform(InlineUniform('u_diffuseColor', color));
    return meshShape;
  }
  else{
    InlineInstance instance = transform.getChild(0);
    instance.setInstanceUniform(InlineUniform('u_diffuseColor', color));
    InlineMeshShape meshShape = instance.getShape();
    return meshShape;
  }
}

/// Sets up a new InlineInstance with the given name using a flat shader using the specified color.
/// \dfgPresetOmit
function InlineTransform drawFlatShapeAtXfo(io InlineTransform rootTransform, String name, InlineShape shape, Color color, Xfo xfo){
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null)
  {
    transform = InlineTransformBase(name, rootTransform, xfo);
    createInstanceShape(transform, shape, color);
  }
  else
  {
    getShapeFromInstance(transform, color);
    transform.setLocalXfo(0, xfo);
  }
  return transform;
}

/// Draws a line between 2 position values. 
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param start The start position of the generated line.
/// \param end The end position of the generated line.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineLinesShape drawLine(
  io InlineTransform rootTransform,
  in String name,
  in Vec3 start,
  in Vec3 end,
  in Color color
){
  InlineLinesShape linesShape = getOrCreateLines(rootTransform, name, color);
  Lines lines = linesShape.getLines();
  lines.clear();
  lines.addLine(start, end);
  return linesShape;
}

/// Draws a line strip through the given position values. 
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param positions The array position values used to generate the line.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineLinesShape drawLineStrip(
  io InlineTransform rootTransform,
  in String name,
  in Vec3 positions[],
  in Color color
){
  InlineLinesShape linesShape = getOrCreateLines(rootTransform, name, color);
  Lines lines = linesShape.getLines();
  lines.clear();
  lines.addLineStrip(positions);
  return linesShape;
}

/// Draws a collection of points at the given position values. 
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param positions The array position values used to generate the points.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlinePointsShape drawPoints(
  io InlineTransform rootTransform,
  in String name,
  in Vec3 positions[],
  in Color color,
  in Float32 size
){
  InlinePointsShape pointsShape = getOrCreatePoints(rootTransform, name, color);
  Points points = pointsShape.getPoints();
  points.clear();
  for(Size i=0; i<positions.size(); i++)
    points.addPoint(positions[i]);

  pointsShape.setPointSize(size);
  return pointsShape;
}

/// Draws a collection of line segements connecting pairs of values on the positions array.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param positions The array position values used to generate the line segments.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineLinesShape drawVectorLines(
  io InlineTransform rootTransform,
  in String name,
  in Vec3 positions[],
  in Color color
){
  InlineLinesShape linesShape = getOrCreateLines(rootTransform, name, color);
  Lines lines = linesShape.getLines();
  lines.clear();
  for(Size i=0; i<positions.size(); i+=2) {
    lines.addLine(positions[i], positions[i+1]);
  }
  return linesShape;
}

/// Draws a circle at the given transform and color.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \param radius The radius of the generated circle.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineTransform drawCircle(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo,
  in Scalar radius,
  in Color color
){
  Xfo scaledXfo = xfo;
  scaledXfo.sc.set(radius, radius, radius);
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null){
    InlineDrawing drawing = OGLInlineDrawing_GetInstance();
    
    InlineShader shader = drawing.registerShader(OGLFlatShader);
    InlineMaterial mat = shader.getOrCreateMaterial("flat");

    InlineLinesShape shape = drawing.getShape('DebugShapes_Circle');
    if(shape == null){
      Lines lines();
      lines.addCircle(Xfo(), 1.0, 24);
      shape = InlineLinesShape('DebugShapes_Circle', lines);
      drawing.registerShape(shape);
    }

    transform = InlineTransformBase(name, rootTransform, scaledXfo);
    InlineInstance instance(name, transform, shape, mat);
    instance.setInstanceUniform(InlineUniform('u_color', color));
  }
  else{
    InlineInstance instance = transform.getChild(0);
    instance.setInstanceUniform(InlineUniform('u_color', color));
    transform.setLocalXfo(0, scaledXfo);
  }
  return transform;
}

/// Draws a sphere made up of 3 orthogonal circles at the given transform and color.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \param radius The radius of the generated sphere shape.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineTransform drawLinesSphere(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo,
  in Scalar radius,
  in Color color
){
  Xfo scaledXfo = xfo;
  scaledXfo.sc.set(radius, radius, radius);
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null){
    InlineDrawing drawing = OGLInlineDrawing_GetInstance();
    
    InlineShader shader = drawing.registerShader(OGLFlatShader);
    InlineMaterial mat = shader.getOrCreateMaterial("flat");

    InlineLinesShape shape = drawing.getShape('DebugShapes_LinesSphere');
    if(shape == null){
      Lines lines();
      lines.addSphere(Xfo(), 1.0, 24);
      shape = InlineLinesShape('DebugShapes_LinesSphere', lines);
      drawing.registerShape(shape);
    }

    transform = InlineTransformBase(name, rootTransform, scaledXfo);
    InlineInstance instance(name, transform, shape, mat);
    instance.setInstanceUniform(InlineUniform('u_color', color));
  }
  else{
    InlineInstance instance = transform.getChild(0);
    instance.setInstanceUniform(InlineUniform('u_color', color));
    transform.setLocalXfo(0, scaledXfo);
  }
  return transform;
}

/// Draws a cross made up of 3 orthogonal line segments at the given transform and color.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \param size The size of the generated cross shape.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineTransform drawCross(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo,
  in Scalar size,
  in Color color
){
  Xfo scaledXfo = xfo;
  scaledXfo.sc.set(size, size, size);
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null){
    InlineDrawing drawing = OGLInlineDrawing_GetInstance();
    
    InlineShader shader = drawing.registerShader(OGLFlatShader);
    InlineMaterial mat = shader.getOrCreateMaterial("flat");

    InlineLinesShape shape = drawing.getShape('DebugShapes_Cross');
    if(shape == null){
      Lines lines();
      lines.addCross(Xfo(), 1.0);
      shape = InlineLinesShape('DebugShapes_Cross', lines);
      drawing.registerShape(shape);
    }

    transform = InlineTransformBase(name, rootTransform, scaledXfo);
    InlineInstance instance(name, transform, shape, mat);
    instance.setInstanceUniform(InlineUniform('u_color', color));
  }
  else{
    InlineInstance instance = transform.getChild(0);
    instance.setInstanceUniform(InlineUniform('u_color', color));
    transform.setLocalXfo(0, scaledXfo);
  }
  return transform;
}

/// Draws a rectangle at the given transform and color.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \param length The length of the generated rectangle shape.
/// \param width The width of the generated rectangle shape.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineTransform drawRectangle(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo,
  in Scalar length,
  in Scalar width,
  in Color color
){
  Xfo scaledXfo = xfo;
  scaledXfo.sc.set(length, 1.0, width);
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null){
    InlineDrawing drawing = OGLInlineDrawing_GetInstance();
    
    InlineShader shader = drawing.registerShader(OGLFlatShader);
    InlineMaterial mat = shader.getOrCreateMaterial("flat");

    InlineLinesShape shape = drawing.getShape('DebugShapes_Rectangle');
    if(shape == null){
      Lines lines();
      lines.addRectangle(Xfo(), 1.0, 1.0);
      shape = InlineLinesShape('DebugShapes_Rectangle', lines);
      drawing.registerShape(shape);
    }

    transform = InlineTransformBase(name, rootTransform, scaledXfo);
    InlineInstance instance(name, transform, shape, mat);
    instance.setInstanceUniform(InlineUniform('u_color', color));
  }
  else{
    InlineInstance instance = transform.getChild(0);
    instance.setInstanceUniform(InlineUniform('u_color', color));
    transform.setLocalXfo(0, scaledXfo);
  }
  return transform;
}

/// Draws a Sphere using a PolygonMesh at the specified Xfo.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \param radius The radius of the generated sphere shape.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineTransform drawSphere(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo,
  in Scalar radius,
  in Color color
){
  Xfo scaledXfo = xfo;
  scaledXfo.sc.set(radius, radius, radius);
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null){
    InlineDrawing drawing = OGLInlineDrawing_GetInstance();
    
    InlineShader shader = drawing.registerShader(OGLSurfaceShader);
    InlineMaterial mat = shader.getOrCreateMaterial("surface");

    InlineMeshShape shape = drawing.getShape('DebugShapes_Sphere');
    if(shape == null){
      PolygonMesh mesh();
      mesh.addSphere(Xfo(), 1.0, 24, true, false);
      shape = InlineMeshShape('DebugShapes_Sphere', mesh);
      drawing.registerShape(shape);
    }

    transform = InlineTransformBase(name, rootTransform, scaledXfo);
    InlineInstance instance(name, transform, shape, mat);
    instance.setInstanceUniform(InlineUniform('u_diffuseColor', color));
  }
  else{
    InlineInstance instance = transform.getChild(0);
    instance.setInstanceUniform(InlineUniform('u_diffuseColor', color));
    transform.setLocalXfo(0, scaledXfo);
  }
  return transform;
}

/// Draws an Arrow using a cylinder and Cone. The size of the displayed arros is controlled by the scale factor of the provided xfo parameter.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineTransform drawArrow(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo,
  in Color color
){
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null){
    InlineDrawing drawing = OGLInlineDrawing_GetInstance();
    
    InlineShader shader = drawing.registerShader(OGLSurfaceShader);
    InlineMaterial mat = shader.getOrCreateMaterial("surface");

    InlineMeshShape shape = drawing.getShape('DebugShapes_Arrow');
    if(shape == null){
      PolygonMesh mesh();
      Size detail = 12;
      Scalar coneRadius = 0.07;
      Scalar coneHeight = 0.3;
      mesh.addCone(Xfo(Vec3(0.0, 0.85, 0.0)), coneRadius, coneHeight, true, detail, true, false);
      Scalar cylinderRadius = 0.015;
      Scalar cylinderHeight = 0.85;
      mesh.addCylinder(Xfo(Vec3(0.0, 0.425, 0.0)), cylinderRadius, cylinderHeight, true, detail, 1, true, false);

      shape = InlineMeshShape('DebugShapes_Arrow', mesh);
      drawing.registerShape(shape);
    }

    transform = InlineTransformBase(name, rootTransform, xfo);
    InlineInstance instance(name, transform, shape, mat);
    instance.setInstanceUniform(InlineUniform('u_diffuseColor', color));
  }
  else{
    transform.setLocalXfo(0, xfo);
  }
  return transform;
}

/// Draws an Xfo using 3 colored arrows. The size of the displayed Xfo is driven by the scale factor of the xfo parameter.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \param color The color of the generated shape.
/// \param colorBlend A factor that controls how much the axes are colored X=red, Y=green, Z=blue or the provided color.
/// \dfgPresetOmit
function InlineTransform drawXfo(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo,
  in Color color,
  in Scalar colorBlend
){
  InlineTransform transform = rootTransform.getChild(name);
  if(transform == null){
    transform = InlineTransformBase(name, rootTransform, xfo);

    Color red = Color(1.0, 0.0, 0.0).linearInterpolate(color, colorBlend);
    Color green = Color(0.0, 1.0, 0.0).linearInterpolate(color, colorBlend);
    Color blue = Color(0.0, 0.0, 1.0).linearInterpolate(color, colorBlend);

    Xfo xaxisXfo();
    xaxisXfo.ori.setFromEulerAngles(Vec3(0, 0, Math_degToRad(-90)));
    Xfo zaxisXfo();
    zaxisXfo.ori.setFromEulerAngles(Vec3(Math_degToRad(90), 0, 0));

    drawArrow(transform, name+"X", xaxisXfo, red);
    drawArrow(transform, name+"Y", Xfo(), green);
    drawArrow(transform, name+"Z", zaxisXfo, blue);
  }
  else{
    transform.setLocalXfo(0, xfo);
  }
  return transform;
}

/// Draws an Xfo using 3 colored arrows. The size of the displayed Xfo is driven by the scale factor of the xfo parameter.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \param color The color of the generated shape.
/// \dfgPresetOmit
function InlineTransform drawXfo(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo,
  in Color color
){
  return drawXfo(rootTransform, name, xfo, color, 1.0);
}

/// Draws an Xfo using 3 colored arrows. The size of the displayed Xfo is driven by the scale factor of the xfo parameter.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfo The transform of the shape relative to the provided root transform.
/// \dfgPresetOmit
function InlineTransform drawXfo(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfo
){
  return drawXfo(rootTransform, name, xfo, Color(1.0, 1.0, 1.0), 0.0);
}

/// Draws an array of Xfos using 3 colored arrows. The size of the displayed Xfo is driven by the scale factor of the xfo parameter.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfos The transforms of the generated xfos relative to the provided root transform.
/// \param color The color of the generated xfos.
/// \param colorBlend A factor that controls how much the axes are colored X=red, Y=green, Z=blue or the provided color.
/// \dfgPresetOmit
function InlineTransform drawXfoArray(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfos[],
  in Color color,
  in Scalar colorBlend
){
  if(xfos.size() > 0){
    InlineTransform transform = drawXfo(rootTransform, name, xfos[0], color, colorBlend);
    transform.setLocalCount(xfos.size());
    for(Index i=1; i<xfos.size(); i++)
      transform.setLocalXfo(i, xfos[i]);
    return transform;
  }
  else{
    InlineTransform transform = rootTransform.getChild(name);
    if(transform != null)
      transform.setLocalCount(0);
    return transform;
  }
}

/// Draws an array of Xfos using 3 colored arrows. The size of the displayed Xfo is driven by the scale factor of the xfo parameter.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfos The transforms of the generated xfos relative to the provided root transform.
/// \param color The color of the generated xfos.
/// \dfgPresetOmit
function InlineTransform drawXfoArray(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfos[],
  in Color color
){
  return drawXfoArray(rootTransform, name, xfos, color, 1.0);
}

/// Draws an array of Xfos using 3 colored arrows. The size of the displayed Xfo is driven by the scale factor of the xfo parameter.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param xfos The transforms of the generated xfos relative to the provided root transform.
/// \dfgPresetOmit
function InlineTransform drawXfoArray(
  io InlineTransform rootTransform,
  in String name,
  in Xfo xfos[]
){
  return drawXfoArray(rootTransform, name, xfos, Color(1.0, 1.0, 1.0), 0.0);
}

/// Draws an arc around the given axis for displaying an angle value in 3d.
/// \param rootTransform The InlineTransform which will own the generated shape object.
/// \param name The name of the generated shape object.
/// \param shapeAxis The axis to use when generating the arc
/// \param shapeAngle The angle to use when generating the arc
/// \param xfo The transform of the shape relative to the provided root transform.ts.
/// \param color The color of the generated shape.
/// \param radius The radius of the arc shape.
/// \dfgPresetOmit
function InlineLinesShape drawAngle(
  io InlineTransform rootTransform,
  in String name,
  in Vec3 shapeAxis,
  in Float32 shapeAngle,
  in Xfo xfo,
  in Color color,
  in Scalar radius
){
  InlineLinesShape linesShape = getOrCreateLines(rootTransform, name, color, xfo);
  Lines lines = linesShape.getLines();
  lines.clear();
  lines.addLine(Vec3(), shapeAxis);
  lines.addArc(Xfo(), radius, Vec2(0.0, shapeAngle), 24);
  return linesShape;
} 
