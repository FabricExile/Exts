/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */
 
require Math, FabricStatistics;

/**
  The Image2DRGB is an Image2D storing RGB pixel values.
  \seealso Image2D
*/
object Image2DRGB : Image2D {
  RGB pixels[];
};

/// Default constructor. Sets up the statistics register.
function Image2DRGB() {
  if(FabricStatisticsEnabled())
    this.autoStats = StatisticsAutoRegisterMember(this);
}

/// Resize the image allocating space for pixel storage.
/// \param width The new width of the image
/// \param height The new height of the image
function Image2DRGB.resize!(
  in UInt32 width,
  in UInt32 height,
){
  this.pixels.resize(width * height);
  this.width = width;
  this.height = height;
  this.incrementVersion();
}

/// Samples the image pixels, returning a bi-linearly interpolated pixel value. 
/// \param u The u param to sample the image. Should range between 0.0 and 1.0 
/// \param v The v param to sample the image. Should range between 0.0 and 1.0 
function RGB Image2DRGB.sample(
  in Scalar u,
  in Scalar v
){
  Scalar u1, u2, v1, v2;
  UInt32 tl, bl, tr, br;
  Scalar uinterp, vinterp;
  this.getSampleParams( 
    u, v,
    u1, u2, v1, v2,
    tl, bl, tr, br,
    uinterp, vinterp
    );
  
  RGB tlClr = this.pixels[tl];
  RGB blClr = this.pixels[bl];
  RGB trClr = this.pixels[tr];
  RGB brClr = this.pixels[br];
  RGB uClr = tlClr.linearInterpolate(blClr, uinterp);
  RGB vClr = trClr.linearInterpolate(brClr, uinterp);
  return uClr.linearInterpolate(vClr, vinterp);
}

/// Sets a new pixel value
/// \param uindex the index of the pixel in u
/// \param vindex the index of the pixel in v
/// \param pixelValue the new value for the pixel
inline Image2DRGB.setPixel!(
  in Integer uindex,
  in Integer vindex,
  in RGB pixelValue
){
  this.pixels[(vindex * this.width) + uindex] = pixelValue;
}

//Implementation of StatisticSource interface's 'getStatistics()'.
function StatisticRecord[] Image2DRGB.getStatistics() {
  StatisticRecord stats[] = this.parent.getStatistics();
  stats.push( StatisticRecord( "Size", this.pixels.size() ) );
  stats.push( StatisticRecord( Statistic_MemoryUsage, 12*4+this.pixels.size()*4*4 ) );
  return stats;
}
