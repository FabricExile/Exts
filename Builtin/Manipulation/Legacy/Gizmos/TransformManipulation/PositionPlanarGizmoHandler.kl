/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require InlineDrawing;


/**
\versionadded 1.12.0

The :kl-ref:`PositionPlanarGizmoHandler` converts mouse events into translation over the surface of a plane.

\seealso GizmoHandler, BaseGizmoHandler
\dfgPresetOmit
*/
object PositionPlanarGizmoHandler : BaseGizmoHandler {
  Vec3 manipulationPlane;

  Boolean dragging;
  Vec3 planePoint;
  Vec3 planeNormal;
  Vec3 hitPointStart;
};

function PositionPlanarGizmoHandler(InlineInstance owner, Vec3 manipulationPlane, GizmoManipulationCallback callback){
  this.init(owner, callback);
  this.manipulationPlane = manipulationPlane;
}

function PositionPlanarGizmoHandler(InlineInstance owner, Vec3 manipulationPlane, GizmoManipulationCallback callback, EvalContext evalContext){
  this.init(owner, callback, evalContext);
  this.manipulationPlane = manipulationPlane;
}

function PositionPlanarGizmoHandler.onEvent!(io MouseEvent mouseEvent){
  if(mouseEvent.eventType() == Event_MouseButtonPress){
    // On MouseMove/Mousedown.
    if(mouseEvent.button == MouseButton_LeftButton){
      // We cast to InlineViewport to access the method calcRayFromScreenPos
      Ref<InlineViewport> viewport = mouseEvent.getViewport();
      Ray ray = viewport.calcRayFromScreenPos(mouseEvent.pos);
      Xfo xfo = this.owner.getTransform().getGlobalXfo(0);
      this.planePoint = xfo.tr;
      this.planeNormal  = xfo.ori.rotateVector(this.manipulationPlane);

      Scalar dist = ray.intersectPlane(this.planePoint, this.planeNormal);
      if(dist < 0.0)
        return;
      this.hitPointStart = ray.start + (ray.direction * dist);
      this.dragging = true;
      this.callback.onDragBegin(mouseEvent);
      mouseEvent.accept();
    }
  }
  else if(mouseEvent.eventType() == Event_MouseMove){
    // On drag
    if(this.dragging){
      Ref<InlineViewport> viewport = mouseEvent.getViewport();
      Ray ray = viewport.calcRayFromScreenPos(mouseEvent.pos);
      Scalar dist = ray.intersectPlane(this.planePoint, this.planeNormal);
      if(dist < 0.0)
        return;
      Vec3 hitPoint2 = ray.start + (ray.direction * dist);
      Xfo delta(hitPoint2 - this.hitPointStart);

      this.callback.onDrag(mouseEvent, Xfo(), delta, ManipulationMode_Position);
      mouseEvent.accept();
    }
  }
  else if(mouseEvent.eventType() == Event_MouseButtonRelease){
    // On release
    if(this.dragging){
      this.dragging = false;
      this.callback.onDragEnd(mouseEvent);
      mouseEvent.accept();
    }
  }
}


