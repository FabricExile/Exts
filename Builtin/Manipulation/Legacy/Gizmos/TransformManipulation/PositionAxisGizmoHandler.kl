/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */

require InlineDrawing;


/**
\versionadded 1.12.0

The :kl-ref:`PositionAxisGizmoHandler` converts mouse events into translation along a predefined axis.

\seealso GizmoHandler, BaseGizmoHandler
\dfgPresetOmit
*/

object PositionAxisGizmoHandler : BaseGizmoHandler {
  
  Vec3 manipulationVector;

  Boolean dragging;
  Vec3 p1, p2;
  Vec3 hitPointStart;
};

function PositionAxisGizmoHandler(InlineInstance owner, Vec3 manipulationVector, GizmoManipulationCallback callback){
  this.init(owner, callback);
  this.manipulationVector = manipulationVector;
}

function PositionAxisGizmoHandler(InlineInstance owner, Vec3 manipulationVector, GizmoManipulationCallback callback, EvalContext evalContext){
  this.init(owner, callback, evalContext);
  this.manipulationVector = manipulationVector;
}

function PositionAxisGizmoHandler.onEvent!(io MouseEvent mouseEvent){
  
  if(mouseEvent.eventType() == Event_MouseButtonPress){
    // On Mousedown.
    if(mouseEvent.button == MouseButton_LeftButton){
      // We cast to InlineViewport to access the method calcRayFromScreenPos
      Ref<InlineViewport> viewport = mouseEvent.getViewport();
      Ray ray = viewport.calcRayFromScreenPos(mouseEvent.pos);
      Xfo xfo = this.owner.getTransform().getGlobalXfo(0);
      this.p1 = xfo.tr;
      this.p2  = this.p1 + xfo.ori.rotateVector(this.manipulationVector);

      Vec2 params = ray.intersectLine(this.p1, this.p2);
      this.hitPointStart = this.p1 + ((this.p2 - this.p1).unit() * params.y);
      this.dragging = true;

      this.callback.onDragBegin(mouseEvent);
      mouseEvent.accept();
    }
  }
  else if(mouseEvent.eventType() == Event_MouseMove){
    // On drag
    if(this.dragging){
      Ref<InlineViewport> viewport = mouseEvent.getViewport();
      Ray ray = viewport.calcRayFromScreenPos(mouseEvent.pos);
      Vec2 params = ray.intersectLine(this.p1, this.p2);

      Vec3 hitPoint2 = this.p1 + ((this.p2 - this.p1).unit() * params.y);
      Xfo delta();
      delta.tr = hitPoint2 - this.hitPointStart;
      
      this.callback.onDrag(mouseEvent, Xfo(), delta, ManipulationMode_Position);
      mouseEvent.accept();
    }
  }
  else if(mouseEvent.eventType() == Event_MouseButtonRelease){
    // On release
    if(this.dragging){
      this.dragging = false;
      this.callback.onDragEnd(mouseEvent);
      mouseEvent.accept();
    }
  }
}


