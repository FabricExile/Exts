/*
 *  Copyright (c) 2010-2016, Fabric Software Inc. All rights reserved.
 */
namespace Tool {

  /// \internal
  interface AddChildAction_virtuals {
    Ref<Component> getParentComponent();
  };

/**

\versionadded 2.6.0
\rst

The AddChildAction will add a child component to a target parent, and
optionally remove it (undo) upon destruction (~AddChildAction).

The target parent can be set explicitly, else the first HierarchyNode
that is the parent of the AddChildAction will be used.

An AddChildAction is useful for temporarily adding a child to a BaseTool,
particularly by linking that child lifetime to a state. For example:

.. code-block:: kl

  MyTool.onEnterState!( String newState, Boolean mainState ) {
    if( newState == MyState ) {
      GeometricShape myShape();
      ...
      this.attachAndDoStateSpecificAction( newState, AddChildAction( "tempShape", myShape, true ) );
      return;
    }
  }

The action can also be triggered (do + undo) by connected events; see :kl-ref:`Tool::BaseAction.connectToDo` and :kl-ref:`Tool::BaseAction.connectToUndo` .
See :ref:`TPG.state-actions` for more details and examples related to states and actions.

\endrst

*/
  object AddChildAction : BaseAction, AddChildAction_virtuals{
    Component explicitParent;

    Component child;
    String childName;
    Boolean wasAdded;

    Component prevChild;// If a child of same name was replaced
    Boolean restoreOnDestroyEnabled;
  };

  /// Connects and attaches to the eventSource.
  AddChildAction( Ref<EventSource> eventSource, EventName sourceEventName, String childName, Ref<Component> child, Boolean restorePrevValueOnDestroy ) {
    this.restorePrevValueOnDestroy( restorePrevValueOnDestroy );
    this.setChild( childName, child );
    this.connectAndAttach( eventSource, sourceEventName );
  }

  AddChildAction( String childName, Ref<Component> child, Boolean restorePrevValueOnDestroy ) {
    this.restorePrevValueOnDestroy( restorePrevValueOnDestroy );
    this.setChild( childName, child );
  }

  /// \internal
  AddChildAction.removeChildIfApplicable!( ) {
    if( this.wasAdded && Boolean( this.child ) ) {
      Ref<Component> parentComponent = this.getParentComponent();
      Ref<HierarchyNode> parentHier = parentComponent;
      if( parentHier ) {
        parentHier.removeChild( this.childName );
      } else if( parentComponent ) {
        Ref<Component> childComponent = this.child;
        childComponent.setParent( null );
      }
      // For tools: if we forced the child as unactive, set it back as active
      Ref<BaseTool> childTool = this.child;
      if( childTool )
        childTool.deactivate();
    }
  }

  AddChildAction.setChild!( String childName, Ref<Component> child ) {
    if( Boolean( this.prevChild ) && childName != this.childName ) {
      setError( "AddChildAction.setChild: unsupported: changing the child name after undoable action was triggered" );
      return;
    }
    this.removeChildIfApplicable();

    // For tools: force child as unactive until it is attached
    // TODO: we should properly restore the previous state of that property...
    Ref<BaseTool> childTool = child;
    if( childTool )
      childTool.deactivate();

    this.child = child;
    this.childName = childName;
    if( this.wasAdded ) {
      // If it was added already, replace right now
      this.wasAdded = false;
      this.doAction();
    }
  }

  AddChildAction.setExplicitParent!( Ref<Component> explicitParent ) {
    if( this.explicitParent !== explicitParent ) {
      if( Boolean( this.explicitParent ) && this.wasAdded )
        setError( "AddChildAction.setExplicitParent: unsupported: setting an explicit parent after the child was added" );
      else
        this.explicitParent = explicitParent;
    }
  }

  /// Enable undo on delete
  AddChildAction.restorePrevValueOnDestroy!( Boolean enable ) {
    this.restoreOnDestroyEnabled = enable;
  }

  AddChildAction.connectAndAttach!( Ref<EventSource> eventSource, EventName sourceEventName, String childName, Ref<Component> child ) {
    this.setChild( childName, child );
    this.connectToDoAndAttach( eventSource, sourceEventName );
  }

  /// \internal
  Ref<Component> AddChildAction.getParentComponent() {
    if( this.explicitParent )
      return this.explicitParent;

    Ref<Component> parent_ = GetParentHierarchyNode( this );
    if( !parent_ )
      parent_ = this.getParent();
    return parent_;
  }

  /// \internal
  AddChildAction.doAction!( ) {
    if( Boolean( this.childName ) && Boolean( this.child ) && !this.wasAdded ) {
      Ref<Component> parentComponent = this.getParentComponent();
      if( !parentComponent ) {
        setError( "AddChildAction.doAction: no parent was returned by getParentComponent(); you need to attach this action first" );
        return;
      }

      if( ToolEventDebugTrace )
        report( "AddChildAction: " + GetComponentName( parentComponent ) + "/" + this.childName );

      Ref<HierarchyNode> parentHier = parentComponent;
      if( parentHier ) {
        if( this.restoreOnDestroyEnabled && !this.wasAdded && !this.prevChild )
          this.prevChild = parentHier.getChild( this.childName );
        parentHier.addChild( this.childName, this.child );
      } else
        this.child.setParent( parentComponent );
      this.wasAdded = true;

      // For tools: if we forced the child as unactive, set it back as active
      Ref<BaseTool> childTool = this.child;
      if( childTool )
        childTool.activate();
    }
    this.parent.doAction();
  }

  /// \internal
  /// Non-virtual version that can be safely called from the destructor
  /// This can be removed once KL is fixed to not call specialized methods in destructors
  AddChildAction.undoActionInternal!( ) {
    this.removeChildIfApplicable();

    if( this.prevChild ) {
      Ref<HierarchyNode> parentHier = this.getParentComponent();
      if( !parentHier ) {
        setError( "AddChildAction.undoActionInternal: unexpected: no parent was returned by getParentComponent()" );
        return;
      }
      parentHier.addChild( this.childName, this.prevChild );
      this.prevChild = null;
    }
    this.wasAdded = false;
    this.parent.undoAction();
  }

  /// \internal
  AddChildAction.undoAction!( ) {
    this.undoActionInternal();
  }

  AddChildAction.invalidate!( ) {
    if( this.restoreOnDestroyEnabled )
      this.undoActionInternal();
    this.parent.invalidate();
  }

  ~AddChildAction() {
    if( this.restoreOnDestroyEnabled )
      this.undoActionInternal();
  }
}// namespace Tool
