/*
 *  Copyright (c) 2010-2016, Fabric Software Inc. All rights reserved.
 */

namespace Tool {

  /**
    The RotateBallDragInteraction will change a TransformTarget's orientation
    component based on a DragInteraction movements raycasted on a sphere.

    By default, the rotation center is the TransformTarget translation, 
    else an explicit center can be set with :kl-ref:`Tool::RotateBallDragInteraction.setExplicitCenter`.

    See :ref:`TPG.interactive-tools` for more information and examples related to tool interactions.
  */
  object RotateBallDragInteraction : BaseXfoDragInteraction{
    Vec3 explicitCenter;
    Boolean hasExplicitCenter;

    Vec3 explicitBallDrawCenter;
    Boolean hasExplicitBallDrawCenter;

    Float32 ballRadius;
    Mat44 initialTransform;
  };

  RotateBallDragInteraction( DragInteraction dragInteraction, TransformTarget transformTarget, Float32 ballRadius ) {
    this.setInteraction( dragInteraction );
    this.setTransformTarget( transformTarget );
    this.ballRadius = ballRadius;
  }

  /// Sets an explicit rotation center. If in local (:kl-ref:`Tool::RotateBallDragInteraction.setLocal` ),
  /// the center will be interpreted in local space, else it will be transformed by the TransformTarget transform.
  RotateBallDragInteraction.setExplicitCenter!( Vec3 explicitCenter ) {
    this.explicitCenter = explicitCenter;
    this.hasExplicitCenter = true;
  }

  /// Sets an explicit center for the drawn gizmo.
  RotateBallDragInteraction.setBallDrawCenter!( Vec3 explicitBallDrawCenter ) {
    this.explicitBallDrawCenter = explicitBallDrawCenter;
    this.hasExplicitBallDrawCenter = true;
  }

  RotateBallDragInteraction.onBegin!( Ref<DragInteraction> interaction ) {
    this.initialTransform = this.getTransform();
    this.parent.onBegin( interaction );
  }

  RotateBallDragInteraction.onDrag!( Ref<DragInteraction> interaction ) {
    // Get the current transfos
    Mat44 transfo = this.initialTransform;
    Quat rotation;
    Ref<Viewport> viewport = interaction.getContextualViewport();

    String space = this.getTransformSpace();
    if( space != WorldSpace )
      return;//ignore if not world space

    Vec3 center = transfo.translation();
    if( this.hasExplicitCenter )
      center = this.explicitCenter;

    Vec3 drawCenter = center;
    if( this.hasExplicitBallDrawCenter )
      drawCenter = this.explicitBallDrawCenter;

    Vec3 startPos, currentPos;
    Vec2 startPixels = interaction.getInitialPixelPosition();
    Vec2 currPixels = interaction.getCurrentPixelPosition();

    Ray startRay = viewport.calcRayFromScreenPos( startPixels );
    Ray currRay = viewport.calcRayFromScreenPos( currPixels );

    Vec3 camDir = (viewport.getViewMat().upperLeft().inverse() * Vec3( 0, 0, -1 )).unit_safe();

    // Intersect the sphere
    Boolean intersects;
    Vec3 startSpherePt = startRay.intersectSphere( drawCenter, this.ballRadius, intersects );
    if( !intersects )
      startSpherePt = startRay.intersectPlaneVec3( drawCenter, camDir );

    Vec3 currSpherePt = currRay.intersectSphere( drawCenter, this.ballRadius, intersects );
    if( !intersects )
      currSpherePt = currRay.intersectPlaneVec3( drawCenter, camDir );

    Vec3 startVec = startSpherePt - drawCenter;
    Vec3 currVec = currSpherePt - drawCenter;

    rotation.setFrom2Vectors( startVec.unit_safe(), currVec.unit_safe() );

    Mat44 rotationMat;
    rotationMat.setFromMat33( rotation.toMat33() );

    transfo.setTranslation( transfo.translation() - center );
    transfo = rotationMat * transfo;
    transfo.setTranslation( transfo.translation() + center );

    this.setTransform( transfo );
  }
}// namespace Tool
