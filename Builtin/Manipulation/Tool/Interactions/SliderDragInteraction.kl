/*
 *  Copyright (c) 2010-2016, Fabric Software Inc. All rights reserved.
 */

namespace Tool {

  interface SliderTarget {

    Float32 getNormalizedValue();

    setNormalizedValue!( Float32 value );

    String getDisplayValueString(); //Actual value, as it should be displayed as a String (eg: with or without fractional part)

    /// Called at the beginning of the interaction loop
    beginChanges!( );

    /// Called at the end of the interaction loop (eg: should commit / log a command)
    endChanges!( );
  };

  // Simple test slider target
  object BasicSliderTarget : SliderTarget{
    Scalar value;
    Scalar min;
    Scalar max;
  };

  BasicSliderTarget() {
    this.max = 1;
    this.value = 0.5;
  }

  Float32 BasicSliderTarget.getNormalizedValue() { return ( this.value - this.min ) / ( this.max - this.min ); }
  BasicSliderTarget.setNormalizedValue!( Float32 value ) { this.value = this.min + value * ( this.max - this.min ); }
  String BasicSliderTarget.getDisplayValueString() { return this.value; }
  BasicSliderTarget.beginChanges!( ) {}
  BasicSliderTarget.endChanges!( ) {}

  interface SliderDragInteraction_virtuals {
    onBegin!( Ref<DragInteraction> interaction );
    onDrag!( Ref<DragInteraction> interaction );
    onEnd!( Ref<DragInteraction> interaction );
  };

  /**
    The SliderDragInteraction sets the ratio (0..1) of a SliderTarget
    based on the projected mouse position onto a screen space segment,
    specified by a start and end pixel position (:kl-ref:`Tool::SliderDragInteraction.setSliderPixelPosition` ).

    See :ref:`TPG.interactive-tools` for more information and examples related to tool interactions.
  */
  object SliderDragInteraction : EventListenerComponent, SliderDragInteraction_virtuals{
    protected DragInteraction dragInteraction;
    protected SliderTarget sliderTarget;

    Vec2 startPixelPos;
    Vec2 endPixelPos;
  };

  /// By default, the attached DragInteraction is a new MouseClickDragRaycastInteraction().
  SliderDragInteraction() {
    this.setInteraction( MouseClickDragRaycastInteraction() );
  }

  SliderDragInteraction( DragInteraction dragInteraction, SliderTarget sliderTarget ) {
    this.setInteraction( dragInteraction );
    this.setSliderTarget( sliderTarget );
  }

  SliderDragInteraction.setInteraction!( DragInteraction dragInteraction ) {
    if( this.dragInteraction !== dragInteraction ) {
      if( this.dragInteraction )
        this.disconnect( this.dragInteraction );

      this.dragInteraction = dragInteraction;
      this.connectAndAttach( this.dragInteraction );
    }
  }

  SliderDragInteraction.setSliderPixelPosition!( Vec2 startPixelCoord, Vec2 endPixelCoord ) {
    this.startPixelPos = startPixelCoord;
    this.endPixelPos = endPixelCoord;
  }

  SliderDragInteraction.setSliderTarget!( SliderTarget sliderTarget ) {
    this.sliderTarget = sliderTarget;
  }

  SliderDragInteraction.onBegin!( Ref<DragInteraction> interaction ) {
    this.sliderTarget.beginChanges();
  }

  SliderDragInteraction.onEnd!( Ref<DragInteraction> interaction ) {
    this.sliderTarget.endChanges();
  }

  /// \internal
  SliderDragInteraction.onEvent!( ToolEvent event, ToolEventUserID userID ) {
    if( !this.sliderTarget )
      return;
    if( event.name == ToolEvent_DragBegin ) {
      this.onBegin( this.dragInteraction );
      this.sendEventToListeners( ToolEvent_DragBegin, EventPropagationType_none, String(), this );
    } else if( event.name == ToolEvent_DragMove ) {
      this.onDrag( this.dragInteraction );
      this.sendEventToListeners( ToolEvent_DragMove, EventPropagationType_none, String(), this );
    } else if( event.name == ToolEvent_DragEnd ) {
      this.onEnd( this.dragInteraction );
      this.sendEventToListeners( ToolEvent_DragEnd, EventPropagationType_none, String(), this );
    } else
      this.parent.onEvent( event, userID );
  }

  SliderDragInteraction.onDrag!( Ref<DragInteraction> interaction ) {

    // Get the current value
    Vec2 pos = interaction.getCurrentPixelPosition();

    Vec2 sliderDir = this.endPixelPos - this.startPixelPos;
    Float32 invSliderLen = sliderDir.length();
    if( invSliderLen > 1e-6f )
      invSliderLen = 1.0f / invSliderLen;
    else
      invSliderLen = 1.0f;

    sliderDir *= invSliderLen;

    Float32 ratio = sliderDir.dot( pos - this.startPixelPos ) * invSliderLen;
    if( ratio > 1 )
      ratio = 1;
    else if( ratio < 0 )
      ratio = 0;

    this.sliderTarget.setNormalizedValue( ratio );
  }
}// namespace Tool
