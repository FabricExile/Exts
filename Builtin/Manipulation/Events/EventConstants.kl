/*
 *  Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
 */
 
/**
  \versionadded 1.12.0

  The Event constants used throughout the manipulation system. 
  Custom handlers need to check the event types they are receiving to ensure they generate the appropriate response. 

  The IDs cover all of the event types propagated by Qt.
  A given DCC will not support all event types, but the IDs must match between all DCC, (and standalone tools built using Qt, PyQt, PySide or toher frameworks).
  
  \dfgPresetOmit
*/
 
alias UInt32 EventType;
/// Not an event.
const EventType Event_None = 0;
/// A new action has been added (QActionEvent).
const EventType Event_ActionAdded = 114;
/// An action has been changed (QActionEvent).
const EventType Event_ActionChanged = 113;
/// An action has been removed (QActionEvent).
const EventType Event_ActionRemoved = 115;
/// A widget's top-level window activation state has changed.
const EventType Event_ActivationChange = 99;
/// This enum has been deprecated. Use ApplicationStateChange instead.
const EventType Event_ApplicationActivate = 121;
/// This enum has been deprecated. Use ApplicationStateChange instead.
const EventType Event_ApplicationDeactivate = 122;
/// The default application font has changed.
const EventType Event_ApplicationFontChange = 36;
/// The default application layout direction has changed.
const EventType Event_ApplicationLayoutDirectionChange = 37;
/// The default application palette has changed.
const EventType Event_ApplicationPaletteChange = 38;
/// The state of the application has changed.
const EventType Event_ApplicationStateChange = 214;
/// The application's icon has changed.
const EventType Event_ApplicationWindowIconChange = 35;
/// An object gets a child (QChildEvent).
const EventType Event_ChildAdded = 68;
/// A widget child gets polished (QChildEvent).
const EventType Event_ChildPolished = 69;
/// An object loses a child (QChildEvent).
const EventType Event_ChildRemoved = 71;
/// The clipboard contents have changed (QClipboardEvent).
const EventType Event_Clipboard = 40;
/// Widget was closed (QCloseEvent).
const EventType Event_Close = 19;
/// A widget wants to close the software input panel (SIP).
const EventType Event_CloseSoftwareInputPanel = 200;
/// The margins of the widget's content rect changed.
const EventType Event_ContentsRectChange = 178;
/// Context popup menu (QContextMenuEvent).
const EventType Event_ContextMenu = 82;
/// The widget's cursor has changed.
const EventType Event_CursorChange = 183;
/// The object will be deleted after it has cleaned up (QDeferredDeleteEvent).
const EventType Event_DeferredDelete = 52;
/// The cursor enters a widget during a drag and drop operation (QDragEnterEvent).
const EventType Event_DragEnter = 60;
/// The cursor leaves a widget during a drag and drop operation (QDragLeaveEvent).
const EventType Event_DragLeave = 62;
/// A drag and drop operation is in progress (QDragMoveEvent).
const EventType Event_DragMove = 61;
/// A drag and drop operation is completed (QDropEvent).
const EventType Event_Drop = 63;
/// A dynamic property was added, changed, or removed from the object.
const EventType Event_DynamicPropertyChange = 170;
/// Widget's enabled state has changed.
const EventType Event_EnabledChange = 98;
/// Mouse enters widget's boundaries (QEnterEvent).
const EventType Event_Enter = 10;
/// An editor widget gains focus for editing. QT_KEYPAD_NAVIGATION must be defined.
const EventType Event_EnterEditFocus = 150;
/// Send to toplevel widgets when the application enters "What's This?" mode.
const EventType Event_EnterWhatsThisMode = 124;
/// Sent to a window when its on-screen contents are invalidated and need to be flushed from the backing store.
const EventType Event_Expose = 206;
/// File open request (QFileOpenEvent).
const EventType Event_FileOpen = 116;
/// Widget or Window gains keyboard focus (QFocusEvent).
const EventType Event_FocusIn = 8;
/// Widget or Window loses keyboard focus (QFocusEvent).
const EventType Event_FocusOut = 9;
/// Widget or Window focus is about to change (QFocusEvent)
const EventType Event_FocusAboutToChange = 23;
/// Widget's font has changed.
const EventType Event_FontChange = 97;
/// A gesture was triggered (QGestureEvent).
const EventType Event_Gesture = 198;
/// A gesture override was triggered (QGestureEvent).
const EventType Event_GestureOverride = 202;
/// Item gains keyboard grab (QGraphicsItem only).
const EventType Event_GrabKeyboard = 188;
/// Item gains mouse grab (QGraphicsItem only).
const EventType Event_GrabMouse = 186;
/// Context popup menu over a graphics scene (QGraphicsSceneContextMenuEvent).
const EventType Event_GraphicsSceneContextMenu = 159;
/// The cursor enters a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).
const EventType Event_GraphicsSceneDragEnter = 164;
/// The cursor leaves a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).
const EventType Event_GraphicsSceneDragLeave = 166;
/// A drag and drop operation is in progress over a scene (QGraphicsSceneDragDropEvent).
const EventType Event_GraphicsSceneDragMove = 165;
/// A drag and drop operation is completed over a scene (QGraphicsSceneDragDropEvent).
const EventType Event_GraphicsSceneDrop = 167;
/// The user requests help for a graphics scene (QHelpEvent).
const EventType Event_GraphicsSceneHelp = 163;
/// The mouse cursor enters a hover item in a graphics scene (QGraphicsSceneHoverEvent).
const EventType Event_GraphicsSceneHoverEnter = 160;
/// The mouse cursor leaves a hover item in a graphics scene (QGraphicsSceneHoverEvent).
const EventType Event_GraphicsSceneHoverLeave = 162;
/// The mouse cursor moves inside a hover item in a graphics scene (QGraphicsSceneHoverEvent).
const EventType Event_GraphicsSceneHoverMove = 161;
/// Mouse press again (double click) in a graphics scene (QGraphicsSceneMouseEvent).
const EventType Event_GraphicsSceneMouseDoubleClick = 158;
/// Move mouse in a graphics scene (QGraphicsSceneMouseEvent).
const EventType Event_GraphicsSceneMouseMove = 155;
/// Mouse press in a graphics scene (QGraphicsSceneMouseEvent).
const EventType Event_GraphicsSceneMousePress = 156;
/// Mouse release in a graphics scene (QGraphicsSceneMouseEvent).
const EventType Event_GraphicsSceneMouseRelease = 157;
/// Widget was moved (QGraphicsSceneMoveEvent).
const EventType Event_GraphicsSceneMove = 182;
/// Widget was resized (QGraphicsSceneResizeEvent).
const EventType Event_GraphicsSceneResize = 181;
/// Mouse wheel rolled in a graphics scene (QGraphicsSceneWheelEvent).
const EventType Event_GraphicsSceneWheel = 168;
/// Widget was hidden (QHideEvent).
const EventType Event_Hide = 18;
/// A child widget has been hidden.
const EventType Event_HideToParent = 27;
/// The mouse cursor enters a hover widget (QHoverEvent).
const EventType Event_HoverEnter = 127;
/// The mouse cursor leaves a hover widget (QHoverEvent).
const EventType Event_HoverLeave = 128;
/// The mouse cursor moves inside a hover widget (QHoverEvent).
const EventType Event_HoverMove = 129;
/// The main icon of a window has been dragged away (QIconDragEvent).
const EventType Event_IconDrag = 96;
/// Widget's icon text has been changed.
const EventType Event_IconTextChange = 101;
/// An input method is being used (QInputMethodEvent).
const EventType Event_InputMethod = 83;
/// A input method query event (QInputMethodQueryEvent)
const EventType Event_InputMethodQuery = 207;
/// The keyboard layout has changed.
const EventType Event_KeyboardLayoutChange = 169;
/// Key press (QKeyEvent).
const EventType Event_KeyPress = 6;
/// Key release (QKeyEvent).
const EventType Event_KeyRelease = 7;
/// The application translation changed.
const EventType Event_LanguageChange = 89;
/// The direction of layouts changed.
const EventType Event_LayoutDirectionChange = 90;
/// Widget layout needs to be redone.
const EventType Event_LayoutRequest = 76;
/// Mouse leaves widget's boundaries.
const EventType Event_Leave = 11;
/// An editor widget loses focus for editing. QT_KEYPAD_NAVIGATION must be defined.
const EventType Event_LeaveEditFocus = 151;
/// Send to toplevel widgets when the application leaves "What's This?" mode.
const EventType Event_LeaveWhatsThisMode = 125;
/// The system locale has changed.
const EventType Event_LocaleChange = 88;
/// A mouse double click occurred outside the client area.
const EventType Event_NonClientAreaMouseButtonDblClick = 176;
/// A mouse button press occurred outside the client area.
const EventType Event_NonClientAreaMouseButtonPress = 174;
/// A mouse button release occurred outside the client area.
const EventType Event_NonClientAreaMouseButtonRelease = 175;
/// A mouse move occurred outside the client area.
const EventType Event_NonClientAreaMouseMove = 173;
/// The user changed his widget sizes (Mac OS X only).
const EventType Event_MacSizeChange = 177;
/// An asynchronous method invocation via QMetaObject::invokeMethod().
const EventType Event_MetaCall = 43;
/// Widgets modification state has been changed.
const EventType Event_ModifiedChange = 102;
/// Mouse press again (QMouseEvent).
const EventType Event_MouseButtonDblClick = 4;
/// Mouse press (QMouseEvent).
const EventType Event_MouseButtonPress = 2;
/// Mouse release (QMouseEvent).
const EventType Event_MouseButtonRelease = 3;
/// Mouse move (QMouseEvent).
const EventType Event_MouseMove = 5;
/// The mouse tracking state has changed.
const EventType Event_MouseTrackingChange = 109;
/// Widget's position changed (QMoveEvent).
const EventType Event_Move = 13;
/// The screens orientation has changes (QScreenOrientationChangeEvent)
const EventType Event_OrientationChange = 208;
/// Screen update necessary (QPaintEvent).
const EventType Event_Paint = 12;
/// Palette of the widget changed.
const EventType Event_PaletteChange = 39;
/// The widget parent is about to change.
const EventType Event_ParentAboutToChange = 131;
/// The widget parent has changed.
const EventType Event_ParentChange = 21;
/// A platform specific panel has been requested.
const EventType Event_PlatformPanel = 212;
/// The widget is polished.
const EventType Event_Polish = 75;
/// The widget should be polished.
const EventType Event_PolishRequest = 74;
/// The widget should accept the event if it has "What's This?" help.
const EventType Event_QueryWhatsThis = 123;
/// A widget wants to open a software input panel (SIP).
const EventType Event_RequestSoftwareInputPanel = 199;
/// Widget's size changed (QResizeEvent).
const EventType Event_Resize = 14;
/// The object needs to fill in its geometry information (QScrollPrepareEvent).
const EventType Event_ScrollPrepare = 204;
/// The object needs to scroll to the supplied position (QScrollEvent).
const EventType Event_Scroll = 205;
/// Key press in child for shortcut key handling (QShortcutEvent).
const EventType Event_Shortcut = 117;
/// Key press in child, for overriding shortcut key handling (QKeyEvent).
const EventType Event_ShortcutOverride = 51;
/// Widget was shown on screen (QShowEvent).
const EventType Event_Show = 17;
/// A child widget has been shown.
const EventType Event_ShowToParent = 26;
/// Socket activated, used to implement QSocketNotifier.
const EventType Event_SockAct = 50;
/// A signal delivered to a state machine (QStateMachine::SignalEvent).
const EventType Event_StateMachineSignal = 192;
/// The event is a wrapper for, i.e., contains, another event (QStateMachine::WrappedEvent).
const EventType Event_StateMachineWrapped = 193;
/// A status tip is requested (QStatusTipEvent).
const EventType Event_StatusTip = 112;
/// Widget's style has been changed.
const EventType Event_StyleChange = 100;
/// Wacom tablet move (QTabletEvent).
const EventType Event_TabletMove = 87;
/// Wacom tablet press (QTabletEvent).
const EventType Event_TabletPress = 92;
/// Wacom tablet release (QTabletEvent).
const EventType Event_TabletRelease = 93;
/// Ok button in decoration pressed. Supported only for Windows CE.
const EventType Event_OkRequest = 94;
/// Wacom tablet enter proximity event (QTabletEvent), sent to QApplication.
const EventType Event_TabletEnterProximity = 171;
/// Wacom tablet leave proximity event (QTabletEvent), sent to QApplication.
const EventType Event_TabletLeaveProximity = 172;
/// The object is moved to another thread. This is the last event sent to this object in the previous thread. See QObject::moveToThread().
const EventType Event_ThreadChange = 22;
/// Regular timer events (QTimerEvent).
const EventType Event_Timer = 1;
/// The toolbar button is toggled on Mac OS X.
const EventType Event_ToolBarChange = 120;
/// A tooltip was requested (QHelpEvent).
const EventType Event_ToolTip = 110;
/// The widget's tooltip has changed.
const EventType Event_ToolTipChange = 184;
/// Beginning of a sequence of touch-screen or track-pad events (QTouchEvent).
const EventType Event_TouchBegin = 194;
/// Cancellation of touch-event sequence (QTouchEvent).
const EventType Event_TouchCancel = 209;
/// End of touch-event sequence (QTouchEvent).
const EventType Event_TouchEnd = 196;
/// Touch-screen event (QTouchEvent).
const EventType Event_TouchUpdate = 195;
/// Item loses keyboard grab (QGraphicsItem only).
const EventType Event_UngrabKeyboard = 189;
/// Item loses mouse grab (QGraphicsItem only).
const EventType Event_UngrabMouse = 187;
/// The widget should be queued to be repainted at a later time.
const EventType Event_UpdateLater = 78;
/// The widget should be repainted.
const EventType Event_UpdateRequest = 77;
/// The widget should reveal "What's This?" help (QHelpEvent).
const EventType Event_WhatsThis = 111;
/// A link in a widget's "What's This?" help was clicked.
const EventType Event_WhatsThisClicked = 118;
/// Mouse wheel rolled (QWheelEvent).
const EventType Event_Wheel = 31;
/// A Windows-specific activation event has occurred.
const EventType Event_WinEventAct = 132;
/// Window was activated.
const EventType Event_WindowActivate = 24;
/// The window is blocked by a modal dialog.
const EventType Event_WindowBlocked = 103;
/// Window was deactivated.
const EventType Event_WindowDeactivate = 25;
/// The window's icon has changed.
const EventType Event_WindowIconChange = 34;
/// The window's state (minimized, maximized or full-screen) has changed (QWindowStateChangeEvent).
const EventType Event_WindowStateChange = 105;
/// The window title has changed.
const EventType Event_WindowTitleChange = 33;
/// The window is unblocked after a modal dialog exited.
const EventType Event_WindowUnblocked = 104;
/// The window system identifer for this native widget has changed.
const EventType Event_WinIdChange = 203;
/// The widget's z-order has changed. This event is never sent to top level windows.
const EventType Event_ZOrderChange = 126;

String DescribeEventType( EventType eventType ) {
  switch( eventType ) {
    case Event_None: return "None";
    case Event_ActionChanged: return "ActionChanged";
    case Event_ActionRemoved: return "ActionRemoved";
    case Event_ActivationChange: return "ActivationChange";
    case Event_ApplicationActivate: return "ApplicationActivate";
    case Event_ApplicationDeactivate: return "ApplicationDeactivate";
    case Event_ApplicationFontChange: return "ApplicationFontChange";
    case Event_ApplicationLayoutDirectionChange: return "ApplicationLayoutDirectionChange";
    case Event_ApplicationPaletteChange: return "ApplicationPaletteChange";
    case Event_ApplicationStateChange: return "ApplicationStateChange";
    case Event_ChildAdded: return "ChildAdded";
    case Event_ChildPolished: return "ChildPolished";
    case Event_ChildRemoved: return "ChildRemoved";
    case Event_Clipboard: return "Clipboard";
    case Event_Close: return "Close";
    case Event_CloseSoftwareInputPanel: return "CloseSoftwareInputPanel";
    case Event_ContentsRectChange: return "ContentsRectChange";
    case Event_ContextMenu: return "ContextMenu";
    case Event_CursorChange: return "CursorChange";
    case Event_DeferredDelete: return "DeferredDelete";
    case Event_DragEnter: return "DragEnter";
    case Event_DragLeave: return "DragLeave";
    case Event_DragMove: return "DragMove";
    case Event_Drop: return "Drop";
    case Event_DynamicPropertyChange: return "DynamicPropertyChange";
    case Event_EnabledChange: return "EnabledChange";
    case Event_Enter: return "Enter";
    case Event_EnterEditFocus: return "EnterEditFocus";
    case Event_EnterWhatsThisMode: return "EnterWhatsThisMode";
    case Event_Expose: return "Expose";
    case Event_FileOpen: return "FileOpen";
    case Event_FocusIn: return "FocusIn";
    case Event_FocusOut: return "FocusOut";
    case Event_FocusAboutToChange: return "FocusAboutToChange";
    case Event_FontChange: return "FontChange";
    case Event_Gesture: return "Gesture";
    case Event_GestureOverride: return "GestureOverride";
    case Event_GrabKeyboard: return "GrabKeyboard";
    case Event_GrabMouse: return "GrabMouse";
    case Event_GraphicsSceneContextMenu: return "GraphicsSceneContextMenu";
    case Event_GraphicsSceneDragEnter: return "GraphicsSceneDragEnter";
    case Event_GraphicsSceneDragLeave: return "GraphicsSceneDragLeave";
    case Event_GraphicsSceneDragMove: return "GraphicsSceneDragMove";
    case Event_GraphicsSceneDrop: return "GraphicsSceneDrop";
    case Event_GraphicsSceneHelp: return "GraphicsSceneHelp";
    case Event_GraphicsSceneHoverEnter: return "GraphicsSceneHoverEnter";
    case Event_GraphicsSceneHoverLeave: return "GraphicsSceneHoverLeave";
    case Event_GraphicsSceneHoverMove: return "GraphicsSceneHoverMove";
    case Event_GraphicsSceneMouseDoubleClick: return "GraphicsSceneMouseDoubleClick";
    case Event_GraphicsSceneMouseMove: return "GraphicsSceneMouseMove";
    case Event_GraphicsSceneMousePress: return "GraphicsSceneMousePress";
    case Event_GraphicsSceneMouseRelease: return "GraphicsSceneMouseRelease";
    case Event_GraphicsSceneMove: return "GraphicsSceneMove";
    case Event_GraphicsSceneResize: return "GraphicsSceneResize";
    case Event_GraphicsSceneWheel: return "GraphicsSceneWheel";
    case Event_Hide: return "Hide";
    case Event_HideToParent: return "HideToParent";
    case Event_HoverEnter: return "HoverEnter";
    case Event_HoverLeave: return "HoverLeave";
    case Event_HoverMove: return "HoverMove";
    case Event_IconDrag: return "IconDrag";
    case Event_IconTextChange: return "IconTextChange";
    case Event_InputMethod: return "InputMethod";
    case Event_InputMethodQuery: return "InputMethodQuery";
    case Event_KeyboardLayoutChange: return "KeyboardLayoutChange";
    case Event_KeyPress: return "KeyPress";
    case Event_KeyRelease: return "KeyRelease";
    case Event_LanguageChange: return "LanguageChange";
    case Event_LayoutDirectionChange: return "LayoutDirectionChange";
    case Event_LayoutRequest: return "LayoutRequest";
    case Event_Leave: return "Leave";
    case Event_LeaveEditFocus: return "LeaveEditFocus";
    case Event_LeaveWhatsThisMode: return "LeaveWhatsThisMode";
    case Event_LocaleChange: return "LocaleChange";
    case Event_NonClientAreaMouseButtonDblClick: return "NonClientAreaMouseButtonDblClick";
    case Event_NonClientAreaMouseButtonPress: return "NonClientAreaMouseButtonPress";
    case Event_NonClientAreaMouseButtonRelease: return "NonClientAreaMouseButtonRelease";
    case Event_NonClientAreaMouseMove: return "NonClientAreaMouseMove";
    case Event_MacSizeChange: return "MacSizeChange";
    case Event_MetaCall: return "MetaCall";
    case Event_ModifiedChange: return "ModifiedChange";
    case Event_MouseButtonDblClick: return "MouseButtonDblClick";
    case Event_MouseButtonPress: return "MouseButtonPress";
    case Event_MouseButtonRelease: return "MouseButtonRelease";
    case Event_MouseMove: return "MouseMove";
    case Event_MouseTrackingChange: return "MouseTrackingChange";
    case Event_Move: return "Move";
    case Event_OrientationChange: return "OrientationChange";
    case Event_Paint: return "Paint";
    case Event_PaletteChange: return "PaletteChange";
    case Event_ParentAboutToChange: return "ParentAboutToChange";
    case Event_ParentChange: return "ParentChange";
    case Event_PlatformPanel: return "PlatformPanel";
    case Event_Polish: return "Polish";
    case Event_PolishRequest: return "PolishRequest";
    case Event_QueryWhatsThis: return "QueryWhatsThis";
    case Event_RequestSoftwareInputPanel: return "RequestSoftwareInputPanel";
    case Event_Resize: return "Resize";
    case Event_ScrollPrepare: return "ScrollPrepare";
    case Event_Scroll: return "Scroll";
    case Event_Shortcut: return "Shortcut";
    case Event_ShortcutOverride: return "ShortcutOverride";
    case Event_Show: return "Show";
    case Event_ShowToParent: return "ShowToParent";
    case Event_SockAct: return "SockAct";
    case Event_StateMachineSignal: return "StateMachineSignal";
    case Event_StateMachineWrapped: return "StateMachineWrapped";
    case Event_StatusTip: return "StatusTip";
    case Event_StyleChange: return "StyleChange";
    case Event_TabletMove: return "TabletMove";
    case Event_TabletPress: return "TabletPress";
    case Event_TabletRelease: return "TabletRelease";
    case Event_OkRequest: return "OkRequest";
    case Event_TabletEnterProximity: return "TabletEnterProximity";
    case Event_TabletLeaveProximity: return "TabletLeaveProximity";
    case Event_ThreadChange: return "ThreadChange";
    case Event_Timer: return "Timer";
    case Event_ToolBarChange: return "ToolBarChange";
    case Event_ToolTip: return "ToolTip";
    case Event_ToolTipChange: return "ToolTipChange";
    case Event_TouchBegin: return "TouchBegin";
    case Event_TouchCancel: return "TouchCancel";
    case Event_TouchEnd: return "TouchEnd";
    case Event_TouchUpdate: return "TouchUpdate";
    case Event_UngrabKeyboard: return "UngrabKeyboard";
    case Event_UngrabMouse: return "UngrabMouse";
    case Event_UpdateLater: return "UpdateLater";
    case Event_UpdateRequest: return "UpdateRequest";
    case Event_WhatsThis: return "WhatsThis";
    case Event_WhatsThisClicked: return "WhatsThisClicked";
    case Event_Wheel: return "Wheel";
    case Event_WinEventAct: return "WinEventAct";
    case Event_WindowActivate: return "WindowActivate";
    case Event_WindowBlocked: return "WindowBlocked";
    case Event_WindowDeactivate: return "WindowDeactivate";
    case Event_WindowIconChange: return "WindowIconChange";
    case Event_WindowStateChange: return "WindowStateChange";
    case Event_WindowTitleChange: return "WindowTitleChange";
    case Event_WindowUnblocked: return "WindowUnblocked";
    case Event_WinIdChange: return "WinIdChange";
    case Event_ZOrderChange: return "ZOrderChange";
  }
  return "(Unknown)";
}

/// The set of potential mouse button codes sent with :kl-ref:`MouseEvent`
alias UInt32 MouseButton;
const MouseButton MouseButton_NoButton = 0;
const MouseButton MouseButton_LeftButton = 1;
const MouseButton MouseButton_RightButton = 2;
const MouseButton MouseButton_MiddleButton = 4;

String DescribeMouseButtons( MouseButton mouseButtons ) {

  if( mouseButtons == MouseButton_NoButton )
    return String();

  Size count;
  String result;

  if( mouseButtons & MouseButton_LeftButton ) {
    result += "LeftButton";
    ++count;
  }
  if( mouseButtons & MouseButton_RightButton ) {
    if( count )
      result += ", ";
    result += "RightButton";
    ++count;
  }
  if( mouseButtons & MouseButton_MiddleButton ) {
    if( count )
      result += ", ";
    result += "MiddleButton";
    ++count;
  }

  if( count > 1 )
    result = "{" + result + "}";

  return result;
}

/// The complete set of potential key codes sent with :kl-ref:`KeyEvent`
alias UInt32 Key;

const Key Key_Escape=0x01000000;
const Key Key_Tab=0x01000001;
const Key Key_Backtab=0x01000002;
const Key Key_Backspace=0x01000003;
const Key Key_Return=0x01000004;
const Key Key_Enter=0x01000005;
const Key Key_Insert=0x01000006;
const Key Key_Delete=0x01000007;
const Key Key_Pause=0x01000008;
const Key Key_Print=0x01000009;
const Key Key_SysReq=0x0100000a;
const Key Key_Clear=0x0100000b;
const Key Key_Home=0x01000010;   
const Key Key_End=0x01000011;   
const Key Key_Left=0x01000012;   
const Key Key_Up=0x01000013;   
const Key Key_Right=0x01000014;   
const Key Key_Down=0x01000015;   
const Key Key_PageUp=0x01000016;   
const Key Key_PageDown=0x01000017;   
const Key Key_Shift=0x01000020;   
/// Corresponds to the Command key on Mac OS X.
const Key Key_Control=0x01000021; 
/// Corresponds to the Control keys on on Mac OS X. Maps to the Windows key on Windows keyboards.
const Key Key_Meta=0x01000022; 
const Key Key_Alt=0x01000023;
/// When the KeyDown event for this key is sent on Windows, the Ctrl+Alt modifiers are also set.   
const Key Key_AltGr=0x01001103; 
const Key Key_CapsLock=0x01000024;   
const Key Key_NumLock=0x01000025;   
const Key Key_ScrollLock=0x01000026;   
const Key Key_F1=0x01000030;   
const Key Key_F2=0x01000031;   
const Key Key_F3=0x01000032;   
const Key Key_F4=0x01000033;   
const Key Key_F5=0x01000034;   
const Key Key_F6=0x01000035;   
const Key Key_F7=0x01000036;   
const Key Key_F8=0x01000037;   
const Key Key_F9=0x01000038;   
const Key Key_F10=0x01000039;   
const Key Key_F11=0x0100003a;   
const Key Key_F12=0x0100003b;   
const Key Key_F13=0x0100003c;   
const Key Key_F14=0x0100003d;   
const Key Key_F15=0x0100003e;   
const Key Key_F16=0x0100003f;   
const Key Key_F17=0x01000040;   
const Key Key_F18=0x01000041;   
const Key Key_F19=0x01000042;   
const Key Key_F20=0x01000043;   
const Key Key_F21=0x01000044;   
const Key Key_F22=0x01000045;   
const Key Key_F23=0x01000046;   
const Key Key_F24=0x01000047;   
const Key Key_F25=0x01000048;   
const Key Key_F26=0x01000049;   
const Key Key_F27=0x0100004a;   
const Key Key_F28=0x0100004b;   
const Key Key_F29=0x0100004c;   
const Key Key_F30=0x0100004d;   
const Key Key_F31=0x0100004e;   
const Key Key_F32=0x0100004f;   
const Key Key_F33=0x01000050;   
const Key Key_F34=0x01000051;   
const Key Key_F35=0x01000052;   
const Key Key_Super_L=0x01000053;   
const Key Key_Super_R=0x01000054;   
const Key Key_Menu=0x01000055;   
const Key Key_Hyper_L=0x01000056;   
const Key Key_Hyper_R=0x01000057;   
const Key Key_Help=0x01000058;   
const Key Key_Direction_L=0x01000059;   
const Key Key_Direction_R=0x01000060;   
const Key Key_Space=0x20;
const Key Key_Exclam=0x21;
const Key Key_QuoteDbl=0x22;
const Key Key_NumberSign=0x23;
const Key Key_Dollar=0x24;
const Key Key_Percent=0x25;
const Key Key_Ampersand=0x26;
const Key Key_Apostrophe=0x27;
const Key Key_ParenLeft=0x28;
const Key Key_ParenRight=0x29;
const Key Key_Asterisk=0x2a;
const Key Key_Plus=0x2b;
const Key Key_Comma=0x2c;
const Key Key_Minus=0x2d;
const Key Key_Period=0x2e;
const Key Key_Slash=0x2f;
const Key Key_Key_0=0x30;
const Key Key_Key_1=0x31;
const Key Key_Key_2=0x32;
const Key Key_Key_3=0x33;
const Key Key_Key_4=0x34;
const Key Key_Key_5=0x35;
const Key Key_Key_6=0x36;
const Key Key_Key_7=0x37;
const Key Key_Key_8=0x38;
const Key Key_Key_9=0x39;
const Key Key_Colon=0x3a;
const Key Key_Semicolon=0x3b;
const Key Key_Less=0x3c;
const Key Key_Equal=0x3d;
const Key Key_Greater=0x3e;
const Key Key_Question=0x3f;
const Key Key_At=0x40;
const Key Key_A=0x41;
const Key Key_B=0x42;
const Key Key_C=0x43;
const Key Key_D=0x44;
const Key Key_E=0x45;
const Key Key_F=0x46;
const Key Key_G=0x47;
const Key Key_H=0x48;
const Key Key_I=0x49;
const Key Key_J=0x4a;
const Key Key_K=0x4b;
const Key Key_L=0x4c;
const Key Key_M=0x4d;
const Key Key_N=0x4e;
const Key Key_O=0x4f;
const Key Key_P=0x50;
const Key Key_Q=0x51;
const Key Key_R=0x52;
const Key Key_S=0x53;
const Key Key_T=0x54;
const Key Key_U=0x55;
const Key Key_V=0x56;
const Key Key_W=0x57;
const Key Key_X=0x58;
const Key Key_Y=0x59;
const Key Key_Z=0x5a;
const Key Key_BracketLeft=0x5b;
const Key Key_Backslash=0x5c;
const Key Key_BracketRight=0x5d;
const Key Key_AsciiCircum=0x5e;
const Key Key_Underscore=0x5f;
const Key Key_QuoteLeft=0x60;
const Key Key_BraceLeft=0x7b;
const Key Key_Bar=0x7c;
const Key Key_BraceRight=0x7d;
const Key Key_AsciiTilde=0x7e;
const Key Key_nobreakspace=0x0a0;  
const Key Key_exclamdown=0x0a1;  
const Key Key_cent=0x0a2;  
const Key Key_sterling=0x0a3;  
const Key Key_currency=0x0a4;  
const Key Key_yen=0x0a5;  
const Key Key_brokenbar=0x0a6;  
const Key Key_section=0x0a7;  
const Key Key_diaeresis=0x0a8;  
const Key Key_copyright=0x0a9;  
const Key Key_ordfeminine=0x0aa;  
const Key Key_guillemotleft=0x0ab;  
const Key Key_notsign=0x0ac;  
const Key Key_hyphen=0x0ad;  
const Key Key_registered=0x0ae;  
const Key Key_macron=0x0af;  
const Key Key_degree=0x0b0;  
const Key Key_plusminus=0x0b1;  
const Key Key_twosuperior=0x0b2;  
const Key Key_threesuperior=0x0b3;  
const Key Key_acute=0x0b4;  
const Key Key_mu=0x0b5;  
const Key Key_paragraph=0x0b6;  
const Key Key_periodcentered=0x0b7;  
const Key Key_cedilla=0x0b8;  
const Key Key_onesuperior=0x0b9;  
const Key Key_masculine=0x0ba;  
const Key Key_guillemotright=0x0bb;  
const Key Key_onequarter=0x0bc;  
const Key Key_onehalf=0x0bd;  
const Key Key_threequarters=0x0be;  
const Key Key_questiondown=0x0bf;  
const Key Key_Agrave=0x0c0;  
const Key Key_Aacute=0x0c1;  
const Key Key_Acircumflex=0x0c2;  
const Key Key_Atilde=0x0c3;  
const Key Key_Adiaeresis=0x0c4;  
const Key Key_Aring=0x0c5;  
const Key Key_AE=0x0c6;  
const Key Key_Ccedilla=0x0c7;  
const Key Key_Egrave=0x0c8;  
const Key Key_Eacute=0x0c9;  
const Key Key_Ecircumflex=0x0ca;  
const Key Key_Ediaeresis=0x0cb;  
const Key Key_Igrave=0x0cc;  
const Key Key_Iacute=0x0cd;  
const Key Key_Icircumflex=0x0ce;  
const Key Key_Idiaeresis=0x0cf;  
const Key Key_ETH=0x0d0;  
const Key Key_Ntilde=0x0d1;  
const Key Key_Ograve=0x0d2;  
const Key Key_Oacute=0x0d3;  
const Key Key_Ocircumflex=0x0d4;  
const Key Key_Otilde=0x0d5;  
const Key Key_Odiaeresis=0x0d6;  
const Key Key_multiply=0x0d7;  
const Key Key_Ooblique=0x0d8;  
const Key Key_Ugrave=0x0d9;  
const Key Key_Uacute=0x0da;  
const Key Key_Ucircumflex=0x0db;  
const Key Key_Udiaeresis=0x0dc;  
const Key Key_Yacute=0x0dd;  
const Key Key_THORN=0x0de;  
const Key Key_ssharp=0x0df;  
const Key Key_division=0x0f7;  
const Key Key_ydiaeresis=0x0ff;  
const Key Key_Multi_key=0x01001120;
const Key Key_Codeinput=0x01001137;
const Key Key_SingleCandidate=0x0100113c;
const Key Key_MultipleCandidate=0x0100113d;
const Key Key_PreviousCandidate=0x0100113e;
const Key Key_Mode_switch=0x0100117e;
const Key Key_Kanji=0x01001121;
const Key Key_Muhenkan=0x01001122;
const Key Key_Henkan=0x01001123;
const Key Key_Romaji=0x01001124;
const Key Key_Hiragana=0x01001125;
const Key Key_Katakana=0x01001126;
const Key Key_Hiragana_Katakana=0x01001127;
const Key Key_Zenkaku=0x01001128;
const Key Key_Hankaku=0x01001129;
const Key Key_Zenkaku_Hankaku=0x0100112a;
const Key Key_Touroku=0x0100112b;
const Key Key_Massyo=0x0100112c;
const Key Key_Kana_Lock=0x0100112d;
const Key Key_Kana_Shift=0x0100112e;
const Key Key_Eisu_Shift=0x0100112f;
const Key Key_Eisu_toggle=0x01001130;
const Key Key_Hangul=0x01001131;
const Key Key_Hangul_Start=0x01001132;
const Key Key_Hangul_End=0x01001133;
const Key Key_Hangul_Hanja=0x01001134;
const Key Key_Hangul_Jamo=0x01001135;
const Key Key_Hangul_Romaja=0x01001136;
const Key Key_Hangul_Jeonja=0x01001138;
const Key Key_Hangul_Banja=0x01001139;
const Key Key_Hangul_PreHanja=0x0100113a;
const Key Key_Hangul_PostHanja=0x0100113b;
const Key Key_Hangul_Special=0x0100113f;
const Key Key_Dead_Grave=0x01001250;
const Key Key_Dead_Acute=0x01001251;
const Key Key_Dead_Circumflex=0x01001252;
const Key Key_Dead_Tilde=0x01001253;
const Key Key_Dead_Macron=0x01001254;
const Key Key_Dead_Breve=0x01001255;
const Key Key_Dead_Abovedot=0x01001256;
const Key Key_Dead_Diaeresis=0x01001257;
const Key Key_Dead_Abovering=0x01001258;
const Key Key_Dead_Doubleacute=0x01001259;
const Key Key_Dead_Caron=0x0100125a;
const Key Key_Dead_Cedilla=0x0100125b;
const Key Key_Dead_Ogonek=0x0100125c;
const Key Key_Dead_Iota=0x0100125d;
const Key Key_Dead_Voiced_Sound=0x0100125e;
const Key Key_Dead_Semivoiced_Sound=0x0100125f;
const Key Key_Dead_Belowdot=0x01001260;
const Key Key_Dead_Hook=0x01001261;
const Key Key_Dead_Horn=0x01001262;
const Key Key_Back=0x01000061;
const Key Key_Forward=0x01000062;
const Key Key_Stop=0x01000063;
const Key Key_Refresh=0x01000064;
const Key Key_VolumeDown=0x01000070;
const Key Key_VolumeMute=0x01000071;
const Key Key_VolumeUp=0x01000072;
const Key Key_BassBoost=0x01000073;
const Key Key_BassUp=0x01000074;
const Key Key_BassDown=0x01000075;
const Key Key_TrebleUp=0x01000076;
const Key Key_TrebleDown=0x01000077;
const Key Key_MediaPlay=0x01000080;
const Key Key_MediaStop=0x01000081;
const Key Key_MediaPrevious=0x01000082;
const Key Key_MediaNext=0x01000083;
const Key Key_MediaRecord=0x01000084;
const Key Key_MediaPause=0x1000085;
const Key Key_MediaTogglePlayPause=0x1000086;
const Key Key_HomePage=0x01000090;
const Key Key_Favorites=0x01000091;
const Key Key_Search=0x01000092;
const Key Key_Standby=0x01000093;
const Key Key_OpenUrl=0x01000094;
const Key Key_LaunchMail=0x010000a0;
const Key Key_LaunchMedia=0x010000a1;
const Key Key_Launch0=0x010000a2; // On X11 this key is mapped to "My Computer" (XF86XK_MyComputer) key for legacy reasons.
const Key Key_Launch1=0x010000a3; // On X11 this key is mapped to "Calculator" (XF86XK_Calculator) key for legacy reasons.
const Key Key_Launch2=0x010000a4; // On X11 this key is mapped to XF86XK_Launch0 key for legacy reasons.
const Key Key_Launch3=0x010000a5; // On X11 this key is mapped to XF86XK_Launch1 key for legacy reasons.
const Key Key_Launch4=0x010000a6; // On X11 this key is mapped to XF86XK_Launch2 key for legacy reasons.
const Key Key_Launch5=0x010000a7; // On X11 this key is mapped to XF86XK_Launch3 key for legacy reasons.
const Key Key_Launch6=0x010000a8; // On X11 this key is mapped to XF86XK_Launch4 key for legacy reasons.
const Key Key_Launch7=0x010000a9; // On X11 this key is mapped to XF86XK_Launch5 key for legacy reasons.
const Key Key_Launch8=0x010000aa; // On X11 this key is mapped to XF86XK_Launch6 key for legacy reasons.
const Key Key_Launch9=0x010000ab; // On X11 this key is mapped to XF86XK_Launch7 key for legacy reasons.
const Key Key_LaunchA=0x010000ac; // On X11 this key is mapped to XF86XK_Launch8 key for legacy reasons.
const Key Key_LaunchB=0x010000ad; // On X11 this key is mapped to XF86XK_Launch9 key for legacy reasons.
const Key Key_LaunchC=0x010000ae; // On X11 this key is mapped to XF86XK_LaunchA key for legacy reasons.
const Key Key_LaunchD=0x010000af; // On X11 this key is mapped to XF86XK_LaunchB key for legacy reasons.
const Key Key_LaunchE=0x010000b0; // On X11 this key is mapped to XF86XK_LaunchC key for legacy reasons.
const Key Key_LaunchF=0x010000b1; // On X11 this key is mapped to XF86XK_LaunchD key for legacy reasons.
const Key Key_LaunchG=0x0100010e; // On X11 this key is mapped to XF86XK_LaunchE key for legacy reasons.
const Key Key_LaunchH=0x0100010f; // On X11 this key is mapped to XF86XK_LaunchF key for legacy reasons.
const Key Key_MonBrightnessUp=0x010000b2;
const Key Key_MonBrightnessDown=0x010000b3;
const Key Key_KeyboardLightOnOff=0x010000b4;
const Key Key_KeyboardBrightnessUp=0x010000b5;
const Key Key_KeyboardBrightnessDown=0x010000b6;
const Key Key_PowerOff=0x010000b7;
const Key Key_WakeUp=0x010000b8;
const Key Key_Eject=0x010000b9;
const Key Key_ScreenSaver=0x010000ba;
const Key Key_WWW=0x010000bb;
const Key Key_Memo=0x010000bc;
const Key Key_LightBulb=0x010000bd;
const Key Key_Shop=0x010000be;
const Key Key_History=0x010000bf;
const Key Key_AddFavorite=0x010000c0;
const Key Key_HotLinks=0x010000c1;
const Key Key_BrightnessAdjust=0x010000c2;
const Key Key_Finance=0x010000c3;
const Key Key_Community=0x010000c4;
const Key Key_AudioRewind=0x010000c5;
const Key Key_BackForward=0x010000c6;
const Key Key_ApplicationLeft=0x010000c7;
const Key Key_ApplicationRight=0x010000c8;
const Key Key_Book=0x010000c9;
const Key Key_CD=0x010000ca;
const Key Key_ToDoList=0x010000cc;   
const Key Key_ClearGrab=0x010000cd;   
const Key Key_Close=0x010000ce;   
const Key Key_Copy=0x010000cf;   
const Key Key_Cut=0x010000d0;   
const Key Key_Display=0x010000d1;   
const Key Key_DOS=0x010000d2;   
const Key Key_Documents=0x010000d3;   
const Key Key_Excel=0x010000d4;   
const Key Key_Explorer=0x010000d5;   
const Key Key_Game=0x010000d6;   
const Key Key_Go=0x010000d7;   
const Key Key_iTouch=0x010000d8;   
const Key Key_LogOff=0x010000d9;   
const Key Key_Market=0x010000da;   
const Key Key_Meeting=0x010000db;   
const Key Key_MenuKB=0x010000dc;   
const Key Key_MenuPB=0x010000dd;   
const Key Key_MySites=0x010000de;   
const Key Key_News=0x010000df;   
const Key Key_OfficeHome=0x010000e0;   
const Key Key_Option=0x010000e1;   
const Key Key_Paste=0x010000e2;   
const Key Key_Phone=0x010000e3;   
const Key Key_Calendar=0x010000e4;   
const Key Key_Reply=0x010000e5;   
const Key Key_Reload=0x010000e6;   
const Key Key_RotateWindows=0x010000e7;   
const Key Key_RotationPB=0x010000e8;   
const Key Key_RotationKB=0x010000e9;   
const Key Key_Save=0x010000ea;   
const Key Key_Send=0x010000eb;   
const Key Key_Spell=0x010000ec;   
const Key Key_SplitScreen=0x010000ed;   
const Key Key_Support=0x010000ee;   
const Key Key_TaskPane=0x010000ef;   
const Key Key_Terminal=0x010000f0;   
const Key Key_Tools=0x010000f1;   
const Key Key_Travel=0x010000f2;   
const Key Key_Video=0x010000f3;   
const Key Key_Word=0x010000f4;   
const Key Key_Xfer=0x010000f5;   
const Key Key_ZoomIn=0x010000f6;   
const Key Key_ZoomOut=0x010000f7;   
const Key Key_Away=0x010000f8;   
const Key Key_Messenger=0x010000f9;   
const Key Key_WebCam=0x010000fa;   
const Key Key_MailForward=0x010000fb;   
const Key Key_Pictures=0x010000fc;   
const Key Key_Music=0x010000fd;   
const Key Key_Battery=0x010000fe;   
const Key Key_Bluetooth=0x010000ff;   
const Key Key_WLAN=0x01000100;   
const Key Key_UWB=0x01000101;   
const Key Key_AudioForward=0x01000102;   
const Key Key_AudioRepeat=0x01000103;   
const Key Key_AudioRandomPlay=0x01000104;   
const Key Key_Subtitle=0x01000105;   
const Key Key_AudioCycleTrack=0x01000106;   
const Key Key_Time=0x01000107;   
const Key Key_Hibernate=0x01000108;   
const Key Key_View=0x01000109;   
const Key Key_TopMenu=0x0100010a;   
const Key Key_PowerDown=0x0100010b;   
const Key Key_Suspend=0x0100010c;   
const Key Key_ContrastAdjust=0x0100010d;   
const Key Key_MediaLast=0x0100ffff;   
const Key Key_unknown=0x01ffffff;   
const Key Key_Camera=0x01100020; // A key to activate the camera shutter
const Key Key_CameraFocus=0x01100021; // A key to focus the camera
const Key Key_Context1=0x01100000;   
const Key Key_Context2=0x01100001;   
const Key Key_Context3=0x01100002;   
const Key Key_Context4=0x01100003;   
const Key Key_Flip=0x01100006;   
const Key Key_No=0x01010002;   
const Key Key_Select=0x01010000;   
const Key Key_Yes=0x01010001;   
const Key Key_Execute=0x01020003;   
const Key Key_Printer=0x01020002;   
const Key Key_Play=0x01020005;   
const Key Key_Sleep=0x01020004;   
const Key Key_Zoom=0x01020006;   
const Key Key_Cancel=0x01020001;   

String DescribeKey( Key key ) {
  switch( key ) {
    case Key_Tab: return "Tab";
    case Key_Backtab: return "Backtab";
    case Key_Backspace: return "Backspace";
    case Key_Return: return "Return";
    case Key_Enter: return "Enter";
    case Key_Insert: return "Insert";
    case Key_Delete: return "Delete";
    case Key_Pause: return "Pause";
    case Key_Print: return "Print";
    case Key_SysReq: return "SysReq";
    case Key_Clear: return "Clear";
    case Key_Home: return "Home";
    case Key_End: return "End";
    case Key_Left: return "Left";
    case Key_Up: return "Up";
    case Key_Right: return "Right";
    case Key_Down: return "Down";
    case Key_PageUp: return "PageUp";
    case Key_PageDown: return "PageDown";
    case Key_Shift: return "Shift";
    case Key_Control: return "Control";
    case Key_Meta: return "Meta";
    case Key_Alt: return "Alt";
    case Key_AltGr: return "AltGr";
    case Key_CapsLock: return "CapsLock";
    case Key_NumLock: return "NumLock";
    case Key_ScrollLock: return "ScrollLock";
    case Key_F1: return "F1";
    case Key_F2: return "F2";
    case Key_F3: return "F3";
    case Key_F4: return "F4";
    case Key_F5: return "F5";
    case Key_F6: return "F6";
    case Key_F7: return "F7";
    case Key_F8: return "F8";
    case Key_F9: return "F9";
    case Key_F10: return "F10";
    case Key_F11: return "F11";
    case Key_F12: return "F12";
    case Key_F13: return "F13";
    case Key_F14: return "F14";
    case Key_F15: return "F15";
    case Key_F16: return "F16";
    case Key_F17: return "F17";
    case Key_F18: return "F18";
    case Key_F19: return "F19";
    case Key_F20: return "F20";
    case Key_F21: return "F21";
    case Key_F22: return "F22";
    case Key_F23: return "F23";
    case Key_F24: return "F24";
    case Key_F25: return "F25";
    case Key_F26: return "F26";
    case Key_F27: return "F27";
    case Key_F28: return "F28";
    case Key_F29: return "F29";
    case Key_F30: return "F30";
    case Key_F31: return "F31";
    case Key_F32: return "F32";
    case Key_F33: return "F33";
    case Key_F34: return "F34";
    case Key_F35: return "F35";
    case Key_Super_L: return "Super_L";
    case Key_Super_R: return "Super_R";
    case Key_Menu: return "Menu";
    case Key_Hyper_L: return "Hyper_L";
    case Key_Hyper_R: return "Hyper_R";
    case Key_Help: return "Help";
    case Key_Direction_L: return "Direction_L";
    case Key_Direction_R: return "Direction_R";
    case Key_Space: return "Space";
    case Key_Exclam: return "Exclam";
    case Key_QuoteDbl: return "QuoteDbl";
    case Key_NumberSign: return "NumberSign";
    case Key_Dollar: return "Dollar";
    case Key_Percent: return "Percent";
    case Key_Ampersand: return "Ampersand";
    case Key_Apostrophe: return "Apostrophe";
    case Key_ParenLeft: return "ParenLeft";
    case Key_ParenRight: return "ParenRight";
    case Key_Asterisk: return "Asterisk";
    case Key_Plus: return "Plus";
    case Key_Comma: return "Comma";
    case Key_Minus: return "Minus";
    case Key_Period: return "Period";
    case Key_Slash: return "Slash";
    case Key_Key_0: return "Key_0";
    case Key_Key_1: return "Key_1";
    case Key_Key_2: return "Key_2";
    case Key_Key_3: return "Key_3";
    case Key_Key_4: return "Key_4";
    case Key_Key_5: return "Key_5";
    case Key_Key_6: return "Key_6";
    case Key_Key_7: return "Key_7";
    case Key_Key_8: return "Key_8";
    case Key_Key_9: return "Key_9";
    case Key_Colon: return "Colon";
    case Key_Semicolon: return "Semicolon";
    case Key_Less: return "Less";
    case Key_Equal: return "Equal";
    case Key_Greater: return "Greater";
    case Key_Question: return "Question";
    case Key_At: return "At";
    case Key_A: return "A";
    case Key_B: return "B";
    case Key_C: return "C";
    case Key_D: return "D";
    case Key_E: return "E";
    case Key_F: return "F";
    case Key_G: return "G";
    case Key_H: return "H";
    case Key_I: return "I";
    case Key_J: return "J";
    case Key_K: return "K";
    case Key_L: return "L";
    case Key_M: return "M";
    case Key_N: return "N";
    case Key_O: return "O";
    case Key_P: return "P";
    case Key_Q: return "Q";
    case Key_R: return "R";
    case Key_S: return "S";
    case Key_T: return "T";
    case Key_U: return "U";
    case Key_V: return "V";
    case Key_W: return "W";
    case Key_X: return "X";
    case Key_Y: return "Y";
    case Key_Z: return "Z";
    case Key_BracketLeft: return "BracketLeft";
    case Key_Backslash: return "Backslash";
    case Key_BracketRight: return "BracketRight";
    case Key_AsciiCircum: return "AsciiCircum";
    case Key_Underscore: return "Underscore";
    case Key_QuoteLeft: return "QuoteLeft";
    case Key_BraceLeft: return "BraceLeft";
    case Key_Bar: return "Bar";
    case Key_BraceRight: return "BraceRight";
    case Key_AsciiTilde: return "AsciiTilde";
    case Key_nobreakspace: return "nobreakspace";
    case Key_exclamdown: return "exclamdown";
    case Key_cent: return "cent";
    case Key_sterling: return "sterling";
    case Key_currency: return "currency";
    case Key_yen: return "yen";
    case Key_brokenbar: return "brokenbar";
    case Key_section: return "section";
    case Key_diaeresis: return "diaeresis";
    case Key_copyright: return "copyright";
    case Key_ordfeminine: return "ordfeminine";
    case Key_guillemotleft: return "guillemotleft";
    case Key_notsign: return "notsign";
    case Key_hyphen: return "hyphen";
    case Key_registered: return "registered";
    case Key_macron: return "macron";
    case Key_degree: return "degree";
    case Key_plusminus: return "plusminus";
    case Key_twosuperior: return "twosuperior";
    case Key_threesuperior: return "threesuperior";
    case Key_acute: return "acute";
    case Key_mu: return "mu";
    case Key_paragraph: return "paragraph";
    case Key_periodcentered: return "periodcentered";
    case Key_cedilla: return "cedilla";
    case Key_onesuperior: return "onesuperior";
    case Key_masculine: return "masculine";
    case Key_guillemotright: return "guillemotright";
    case Key_onequarter: return "onequarter";
    case Key_onehalf: return "onehalf";
    case Key_threequarters: return "threequarters";
    case Key_questiondown: return "questiondown";
    case Key_Agrave: return "Agrave";
    case Key_Aacute: return "Aacute";
    case Key_Acircumflex: return "Acircumflex";
    case Key_Atilde: return "Atilde";
    case Key_Adiaeresis: return "Adiaeresis";
    case Key_Aring: return "Aring";
    case Key_AE: return "AE";
    case Key_Ccedilla: return "Ccedilla";
    case Key_Egrave: return "Egrave";
    case Key_Eacute: return "Eacute";
    case Key_Ecircumflex: return "Ecircumflex";
    case Key_Ediaeresis: return "Ediaeresis";
    case Key_Igrave: return "Igrave";
    case Key_Iacute: return "Iacute";
    case Key_Icircumflex: return "Icircumflex";
    case Key_Idiaeresis: return "Idiaeresis";
    case Key_ETH: return "ETH";
    case Key_Ntilde: return "Ntilde";
    case Key_Ograve: return "Ograve";
    case Key_Oacute: return "Oacute";
    case Key_Ocircumflex: return "Ocircumflex";
    case Key_Otilde: return "Otilde";
    case Key_Odiaeresis: return "Odiaeresis";
    case Key_multiply: return "multiply";
    case Key_Ooblique: return "Ooblique";
    case Key_Ugrave: return "Ugrave";
    case Key_Uacute: return "Uacute";
    case Key_Ucircumflex: return "Ucircumflex";
    case Key_Udiaeresis: return "Udiaeresis";
    case Key_Yacute: return "Yacute";
    case Key_THORN: return "THORN";
    case Key_ssharp: return "ssharp";
    case Key_division: return "division";
    case Key_ydiaeresis: return "ydiaeresis";
    case Key_Multi_key: return "Multi_key";
    case Key_Codeinput: return "Codeinput";
    case Key_SingleCandidate: return "SingleCandidate";
    case Key_MultipleCandidate: return "MultipleCandidate";
    case Key_PreviousCandidate: return "PreviousCandidate";
    case Key_Mode_switch: return "Mode_switch";
    case Key_Kanji: return "Kanji";
    case Key_Muhenkan: return "Muhenkan";
    case Key_Henkan: return "Henkan";
    case Key_Romaji: return "Romaji";
    case Key_Hiragana: return "Hiragana";
    case Key_Katakana: return "Katakana";
    case Key_Hiragana_Katakana: return "Hiragana_Katakana";
    case Key_Zenkaku: return "Zenkaku";
    case Key_Hankaku: return "Hankaku";
    case Key_Zenkaku_Hankaku: return "Zenkaku_Hankaku";
    case Key_Touroku: return "Touroku";
    case Key_Massyo: return "Massyo";
    case Key_Kana_Lock: return "Kana_Lock";
    case Key_Kana_Shift: return "Kana_Shift";
    case Key_Eisu_Shift: return "Eisu_Shift";
    case Key_Eisu_toggle: return "Eisu_toggle";
    case Key_Hangul: return "Hangul";
    case Key_Hangul_Start: return "Hangul_Start";
    case Key_Hangul_End: return "Hangul_End";
    case Key_Hangul_Hanja: return "Hangul_Hanja";
    case Key_Hangul_Jamo: return "Hangul_Jamo";
    case Key_Hangul_Romaja: return "Hangul_Romaja";
    case Key_Hangul_Jeonja: return "Hangul_Jeonja";
    case Key_Hangul_Banja: return "Hangul_Banja";
    case Key_Hangul_PreHanja: return "Hangul_PreHanja";
    case Key_Hangul_PostHanja: return "Hangul_PostHanja";
    case Key_Hangul_Special: return "Hangul_Special";
    case Key_Dead_Grave: return "Dead_Grave";
    case Key_Dead_Acute: return "Dead_Acute";
    case Key_Dead_Circumflex: return "Dead_Circumflex";
    case Key_Dead_Tilde: return "Dead_Tilde";
    case Key_Dead_Macron: return "Dead_Macron";
    case Key_Dead_Breve: return "Dead_Breve";
    case Key_Dead_Abovedot: return "Dead_Abovedot";
    case Key_Dead_Diaeresis: return "Dead_Diaeresis";
    case Key_Dead_Abovering: return "Dead_Abovering";
    case Key_Dead_Doubleacute: return "Dead_Doubleacute";
    case Key_Dead_Caron: return "Dead_Caron";
    case Key_Dead_Cedilla: return "Dead_Cedilla";
    case Key_Dead_Ogonek: return "Dead_Ogonek";
    case Key_Dead_Iota: return "Dead_Iota";
    case Key_Dead_Voiced_Sound: return "Dead_Voiced_Sound";
    case Key_Dead_Semivoiced_Sound: return "Dead_Semivoiced_Sound";
    case Key_Dead_Belowdot: return "Dead_Belowdot";
    case Key_Dead_Hook: return "Dead_Hook";
    case Key_Dead_Horn: return "Dead_Horn";
    case Key_Back: return "Back";
    case Key_Forward: return "Forward";
    case Key_Stop: return "Stop";
    case Key_Refresh: return "Refresh";
    case Key_VolumeDown: return "VolumeDown";
    case Key_VolumeMute: return "VolumeMute";
    case Key_VolumeUp: return "VolumeUp";
    case Key_BassBoost: return "BassBoost";
    case Key_BassUp: return "BassUp";
    case Key_BassDown: return "BassDown";
    case Key_TrebleUp: return "TrebleUp";
    case Key_TrebleDown: return "TrebleDown";
    case Key_MediaPlay: return "MediaPlay";
    case Key_MediaStop: return "MediaStop";
    case Key_MediaPrevious: return "MediaPrevious";
    case Key_MediaNext: return "MediaNext";
    case Key_MediaRecord: return "MediaRecord";
    case Key_MediaPause: return "MediaPause";
    case Key_MediaTogglePlayPause: return "MediaTogglePlayPause";
    case Key_HomePage: return "HomePage";
    case Key_Favorites: return "Favorites";
    case Key_Search: return "Search";
    case Key_Standby: return "Standby";
    case Key_OpenUrl: return "OpenUrl";
    case Key_LaunchMail: return "LaunchMail";
    case Key_LaunchMedia: return "LaunchMedia";
    case Key_Launch0: return "Launch0";
    case Key_Launch1: return "Launch1";
    case Key_Launch2: return "Launch2";
    case Key_Launch3: return "Launch3";
    case Key_Launch4: return "Launch4";
    case Key_Launch5: return "Launch5";
    case Key_Launch6: return "Launch6";
    case Key_Launch7: return "Launch7";
    case Key_Launch8: return "Launch8";
    case Key_Launch9: return "Launch9";
    case Key_LaunchA: return "LaunchA";
    case Key_LaunchB: return "LaunchB";
    case Key_LaunchC: return "LaunchC";
    case Key_LaunchD: return "LaunchD";
    case Key_LaunchE: return "LaunchE";
    case Key_LaunchF: return "LaunchF";
    case Key_LaunchG: return "LaunchG";
    case Key_LaunchH: return "LaunchH";
    case Key_MonBrightnessUp: return "MonBrightnessUp";
    case Key_MonBrightnessDown: return "MonBrightnessDown";
    case Key_KeyboardLightOnOff: return "KeyboardLightOnOff";
    case Key_KeyboardBrightnessUp: return "KeyboardBrightnessUp";
    case Key_KeyboardBrightnessDown: return "KeyboardBrightnessDown";
    case Key_PowerOff: return "PowerOff";
    case Key_WakeUp: return "WakeUp";
    case Key_Eject: return "Eject";
    case Key_ScreenSaver: return "ScreenSaver";
    case Key_WWW: return "WWW";
    case Key_Memo: return "Memo";
    case Key_LightBulb: return "LightBulb";
    case Key_Shop: return "Shop";
    case Key_History: return "History";
    case Key_AddFavorite: return "AddFavorite";
    case Key_HotLinks: return "HotLinks";
    case Key_BrightnessAdjust: return "BrightnessAdjust";
    case Key_Finance: return "Finance";
    case Key_Community: return "Community";
    case Key_AudioRewind: return "AudioRewind";
    case Key_BackForward: return "BackForward";
    case Key_ApplicationLeft: return "ApplicationLeft";
    case Key_ApplicationRight: return "ApplicationRight";
    case Key_Book: return "Book";
    case Key_CD: return "CD";
    case Key_ToDoList: return "ToDoList";
    case Key_ClearGrab: return "ClearGrab";
    case Key_Close: return "Close";
    case Key_Copy: return "Copy";
    case Key_Cut: return "Cut";
    case Key_Display: return "Display";
    case Key_DOS: return "DOS";
    case Key_Documents: return "Documents";
    case Key_Excel: return "Excel";
    case Key_Explorer: return "Explorer";
    case Key_Game: return "Game";
    case Key_Go: return "Go";
    case Key_iTouch: return "iTouch";
    case Key_LogOff: return "LogOff";
    case Key_Market: return "Market";
    case Key_Meeting: return "Meeting";
    case Key_MenuKB: return "MenuKB";
    case Key_MenuPB: return "MenuPB";
    case Key_MySites: return "MySites";
    case Key_News: return "News";
    case Key_OfficeHome: return "OfficeHome";
    case Key_Option: return "Option";
    case Key_Paste: return "Paste";
    case Key_Phone: return "Phone";
    case Key_Calendar: return "Calendar";
    case Key_Reply: return "Reply";
    case Key_Reload: return "Reload";
    case Key_RotateWindows: return "RotateWindows";
    case Key_RotationPB: return "RotationPB";
    case Key_RotationKB: return "RotationKB";
    case Key_Save: return "Save";
    case Key_Send: return "Send";
    case Key_Spell: return "Spell";
    case Key_SplitScreen: return "SplitScreen";
    case Key_Support: return "Support";
    case Key_TaskPane: return "TaskPane";
    case Key_Terminal: return "Terminal";
    case Key_Tools: return "Tools";
    case Key_Travel: return "Travel";
    case Key_Video: return "Video";
    case Key_Word: return "Word";
    case Key_Xfer: return "Xfer";
    case Key_ZoomIn: return "ZoomIn";
    case Key_ZoomOut: return "ZoomOut";
    case Key_Away: return "Away";
    case Key_Messenger: return "Messenger";
    case Key_WebCam: return "WebCam";
    case Key_MailForward: return "MailForward";
    case Key_Pictures: return "Pictures";
    case Key_Music: return "Music";
    case Key_Battery: return "Battery";
    case Key_Bluetooth: return "Bluetooth";
    case Key_WLAN: return "WLAN";
    case Key_UWB: return "UWB";
    case Key_AudioForward: return "AudioForward";
    case Key_AudioRepeat: return "AudioRepeat";
    case Key_AudioRandomPlay: return "AudioRandomPlay";
    case Key_Subtitle: return "Subtitle";
    case Key_AudioCycleTrack: return "AudioCycleTrack";
    case Key_Time: return "Time";
    case Key_Hibernate: return "Hibernate";
    case Key_View: return "View";
    case Key_TopMenu: return "TopMenu";
    case Key_PowerDown: return "PowerDown";
    case Key_Suspend: return "Suspend";
    case Key_ContrastAdjust: return "ContrastAdjust";
    case Key_MediaLast: return "MediaLast";
    case Key_unknown: return "unknown";
    case Key_Camera: return "Camera";
    case Key_CameraFocus: return "CameraFocus";
    case Key_Context1: return "Context1";
    case Key_Context2: return "Context2";
    case Key_Context3: return "Context3";
    case Key_Context4: return "Context4";
    case Key_Flip: return "Flip";
    case Key_No: return "No";
    case Key_Select: return "Select";
    case Key_Yes: return "Yes";
    case Key_Execute: return "Execute";
    case Key_Printer: return "Printer";
    case Key_Play: return "Play";
    case Key_Sleep: return "Sleep";
    case Key_Zoom: return "Zoom";
    case Key_Cancel: return "Cancel";
  }
  return "(unknownKey)";
}

alias UInt32 ModiferKey;
/// No modifier key is pressed.
const ModiferKey ModiferKey_NoModifier = 0x00000000;
/// A Shift key on the keyboard is pressed.
const ModiferKey ModiferKey_Shift = 0x02000000;
/// A Ctrl key on the keyboard is pressed.
const ModiferKey ModiferKey_Ctrl = 0x04000000;
/// An Alt key on the keyboard is pressed.
const ModiferKey ModiferKey_Alt = 0x08000000;
/// A Meta key on the keyboard is pressed.
const ModiferKey ModiferKey_Meta = 0x10000000;
/// A keypad button is pressed.
const ModiferKey ModiferKey_Keypad = 0x20000000;
/// X11 only. A Mode_switch key on the keyboard is pressed.
const ModiferKey ModiferKey_GroupSwitch = 0x40000000;

String DescribeModifiersIfAny( ModiferKey modiferKey ) {
  if( modiferKey == ModiferKey_NoModifier )
    return String();

  String result = "{";

  Boolean first = true;
  if( modiferKey & ModiferKey_Shift ) {
    result += "Shift";
    first = false;
  }
  if( modiferKey & ModiferKey_Ctrl ) {
    if( !first )
      result += ", ";
    result += "Ctrl";
    first = false;
  }
  if( modiferKey & ModiferKey_Alt ) {
    if( !first )
      result += ", ";
    result += "Alt";
    first = false;
  }
  if( modiferKey & ModiferKey_Meta ) {
    if( !first )
      result += ", ";
    result += "Meta";
    first = false;
  }
  if( modiferKey & ModiferKey_Keypad ) {
    if( !first )
      result += ", ";
    result += "Keypad";
    first = false;
  }
  if( modiferKey & ModiferKey_GroupSwitch ) {
    if( !first )
      result += ", ";
    result += "GroupSwitch";
    first = false;
  }
  result += "}";
  return result;
}
