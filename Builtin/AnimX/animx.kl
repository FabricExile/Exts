//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

namespace AnimX
{
  alias Float64 Seconds;

  inline Float64 fmod(Float64 numer, Float64 denom)
  {
    // todo: can we do this faster
    return numer % denom;
  }

  inline Float64 modf(Float64 x, io Float64 intpart )
  {
    intpart = x < 0 ? ceil(x) : floor(x);
    return x - intpart;
  }

  //! Defines span interpolation method determined by the tangents of boundary keys TODO: difference between this and the next enum
  alias SInt32 SpanInterpolationMethod;
  const SpanInterpolationMethod SpanInterpolationMethod_Bezier = 0;   //!< Bezier
  const SpanInterpolationMethod SpanInterpolationMethod_Linear = 1;   //!< Linear
  const SpanInterpolationMethod SpanInterpolationMethod_Step = 2;     //!< Step
  const SpanInterpolationMethod SpanInterpolationMethod_StepNext = 3; //!< StepNext

  //! Defines interpolation function within curve segments for non-rotation curves
  alias SInt32 CurveInterpolatorMethod;
  const CurveInterpolatorMethod CurveInterpolatorMethod_Bezier = 0;     //!< Bezier
  const CurveInterpolatorMethod CurveInterpolatorMethod_Hermite = 1;    //!< Hermite
  const CurveInterpolatorMethod CurveInterpolatorMethod_Sine = 2;       //!< Sine
  const CurveInterpolatorMethod CurveInterpolatorMethod_Parabolic = 3;  //!< Parabolic
  const CurveInterpolatorMethod CurveInterpolatorMethod_TangentLog = 4; //!< Log

  //! Defines interpolation mode for the rotation curves
  alias SInt32 CurveRotationInterpolationMethod;
  const CurveRotationInterpolationMethod CurveRotationInterpolationMethod_None = 0;       //!< Non-rotational curves or non-sync Euler. This is the behaviour for pre-Maya 4.0
  const CurveRotationInterpolationMethod CurveRotationInterpolationMethod_Euler = 1;      //!< Sync rotation curves & use Euler angles
  const CurveRotationInterpolationMethod CurveRotationInterpolationMethod_Slerp = 2;      //!< Use quaternion cubic interpolation
  const CurveRotationInterpolationMethod CurveRotationInterpolationMethod_Quaternion = 3; //!< Use quaternion tangent dependent interpolation
  const CurveRotationInterpolationMethod CurveRotationInterpolationMethod_Squad = 4;      //!< Use quaternion spherical interpolation

  //! Defines the type of the tangent
  alias SInt32 TangentType;
  const TangentType TangentType_Global = 0;     //!< Global
  const TangentType TangentType_Fixed = 1;      //!< Fixed
  const TangentType TangentType_Linear = 2;     //!< Linear
  const TangentType TangentType_Flat = 3;       //!< Flat
  const TangentType TangentType_Step = 4;       //!< Step
  const TangentType TangentType_Slow = 5;       //!< Slow
  const TangentType TangentType_Fast = 6;       //!< Fast
  const TangentType TangentType_Smooth = 7;     //!< Smooth
  const TangentType TangentType_Clamped = 8;    //!< Clamped
  const TangentType TangentType_Auto = 9;       //!< Auto
  const TangentType TangentType_Sine = 10;      //!< Sine
  const TangentType TangentType_Parabolic = 11; //!< Parabolic
  const TangentType TangentType_Log = 12;       //!< Log
  const TangentType TangentType_Plateau = 13;   //!< Plateau
  const TangentType TangentType_StepNext = 14;  //!< StepNext

  //! Defines the type of the infinity
  /*!
      The infinity controls the shape of the animation curve in the
      regions before the first key and after the last key.
  */
  alias SInt32 InfinityType;
  const InfinityType InfinityType_Constant = 0;      //!< Constant
  const InfinityType InfinityType_Linear = 1;        //!< Linear
  const InfinityType InfinityType_Cycle = 2;         //!< Cycle
  const InfinityType InfinityType_CycleRelative = 3; //!< CycleRelative
  const InfinityType InfinityType_Oscillate = 4;     //!< Oscillate

  //! Defines type of infinity
  alias SInt32 Infinity;
  const Infinity Infinity_Pre = 0;  //!< Pre-infinity
  const Infinity Infinity_Post = 1; //!< Post-infinity

  //! Single in- or out- tangent of a key
  struct Tangent
  {
    TangentType type;   //!< Tangent type
    Seconds x;          //!< Tangent x value
    Seconds y;          //!< Tangent y value
  };

  struct KeyTimeValue
  {
    Float64 time;  //!< Time
    Float64 value; //!< Value
  };

  //! Keyframe
  struct Keyframe : KeyTimeValue
  {
    SInt32 index;                //!< Sequential index of a key in a curve        
    Tangent tanIn;               //!< In-tangent
    Tangent tanOut;              //!< Out-tangent
    Float64 quaternionW;         //!< W component of a quaternion if rotation curve
    Boolean linearInterpolation; //!< Should curve be linearly interpolated? True if tangents of this key and the neighboring one are both linear.
  };

  SpanInterpolationMethod Keyframe.spanInterpolationMethod()
  {
    if (this.linearInterpolation)
      return SpanInterpolationMethod_Linear;
    if (this.tanOut.type == TangentType_Step)
      return SpanInterpolationMethod_Step;
    if (this.tanOut.type == TangentType_StepNext)
      return SpanInterpolationMethod_StepNext;
    return SpanInterpolationMethod_Bezier;
  }

  CurveInterpolatorMethod Keyframe.curveInterpolationMethod(Boolean isWeighted)
  {
    CurveInterpolatorMethod method = isWeighted ? CurveInterpolatorMethod_Bezier : CurveInterpolatorMethod_Hermite;

    switch (this.tanOut.type)
    {
    case TangentType_Sine:
        method = CurveInterpolatorMethod_Sine;
        break;
    case TangentType_Parabolic:
        method = CurveInterpolatorMethod_Parabolic;
        break;
    case TangentType_Log:
        method = CurveInterpolatorMethod_TangentLog;
        break;
    default:
        break;
    }

    return method;
  }

  /*!
      Adapter abstract class for a curve.

      Instance of a derived class of this adapter serves as an accessor for various basic
      curve information like its key frames or infinity types. This is to avoid introducing a new
      curve type the clients would have to convert their data to before invoking this library.

      The assumption about the curves are:
      - keys are stored sequentially, with indexes between [0 .. keyframeCount()-1]
      - each key has a broken in/out tangents
  */
  interface ICurve
  {
    /*!
        Returns a key at a particular index, if valid. False otherwise.
    */
    Boolean keyframeAtIndex(SInt32 index, io Keyframe key);

    /*!
        Returns the index of a keyframe at or after the specified time
    */
    Boolean keyframeIndex(Float64 time, io UInt32 index);

    /*!
        Returns closest key at or after the specified time, or the last key if time is
        beyond the end of the curve.
    */
    Boolean keyframe(Float64 time, io Keyframe key);

    /*!
        Returns the first key.
    */
    Boolean first(io Keyframe key);

    /*!
        Returns the last key
    */
    Boolean last(io Keyframe key);

    /*!
        Returns the pre infinity type.
    */
    InfinityType preInfinityType();

    /*!
        Returns the post infinity type.
    */
    InfinityType postInfinityType();

    /*!
        Returns whether a curve has weighted tangents.
    */
    Boolean isWeighted();

    /*!
        Returns the total number of key frames.
    */
    UInt32 keyframeCount();

    /*!
        Returns whether a curve is static (has a constant value).
    */
    Boolean isStatic();
  };



  /*!
      Evaluate a single curve.

      \param[in] time Time at which to evaluate the curve.
      \param[in] curve Curve accessor to operate on.

      \return
      Evaluated double value of a curve.
  */
  Float64 evaluateCurve(
    Float64 timeIn,
    Ref<ICurve> curve)
  {
    Float64 time = timeIn;

    Keyframe first, last;
    if (!curve.first(first) || !curve.last(last))
      return 0.0;

    if (curve.preInfinityType() != InfinityType_Constant && time < first.time)
    {
        return evaluateInfinity(time, curve, Infinity_Pre);
    }
    else if (curve.postInfinityType() != InfinityType_Constant && time > last.time)
    {
        return evaluateInfinity(time, curve, Infinity_Post);
    }

    if (curve.isStatic())
    {
        if (curve.keyframeCount() > 0)
            return first.value;
        return 0.0;
    }

    Keyframe prev, next;
    if (!curve.keyframe(time, next))
        return 0.0;
    if (equivalent(next.time, time) || (next.time < time && next.index == 0))
        return next.value;
    if (time >= last.time && next.index == last.index)
        return last.value;

    if (!curve.keyframeAtIndex(next.index - 1, prev))
      return next.value;

    // for Bezier interpolation we might need to drop the precision
    // in case not using 64-bit time precision
    if (prev.spanInterpolationMethod() == SpanInterpolationMethod_Bezier)
    {
      time = Seconds(time);
      prev.time = Seconds(prev.time);
      next.time = Seconds(next.time);
    }

    return evaluateCurveSegment(
      prev.spanInterpolationMethod(),
      prev.curveInterpolationMethod(curve.isWeighted()),
      time,
      prev.time, prev.value,
      prev.time + prev.tanOut.x * kOneThird, prev.value + prev.tanOut.y * kOneThird,
      next.time - next.tanIn.x  * kOneThird, next.value - next.tanIn.y  * kOneThird,
      next.time, next.value);
  }

  /*!
      Evaluate an individual curve segment.

      \param[in] interpolationMethod How should the segment be interpolated
      \param[in] curveInterpolatorMethod If span method is Bezier, choose desired evaluation model
      \param[in] time Time to evaluate segment at (startX <= time <= endX)
      \param[in] startX Time of the first key
      \param[in] startY Value of the first key
      \param[in] x1 Coordinate X of first control point
      \param[in] y1 Coordinate Y of first control point
      \param[in] x2 Coordinate X of second control point
      \param[in] y2 Coordinate Y of second control point
      \param[in] endX Time of the second key
      \param[in] endY Value of the second key

      \return
      Evaluated double value of a segment.
  */
  Float64 evaluateCurveSegment(
    SpanInterpolationMethod interpolationMethod,
    CurveInterpolatorMethod curveInterpolatorMethod,
    Float64 time,
    Float64 startX, Float64 startY,
    Float64 x1, Float64 y1,
    Float64 x2, Float64 y2,
    Float64 endX, Float64 endY)
  {
    Float64 result = 0.0;
    switch (interpolationMethod)
    {
    case SpanInterpolationMethod_Bezier:
      switch (curveInterpolatorMethod)
      {
      case CurveInterpolatorMethod_Bezier:
        result = bezier(startX, startY, x1, y1, x2, y2, endX, endY, time);
        break;

      case CurveInterpolatorMethod_Hermite:
        result = hermite(startX, startY, x1, y1, x2, y2, endX, endY, time);
        break;

      case CurveInterpolatorMethod_Sine:
        result = sine(startX, startY, x1, y1, x2, y2, endX, endY, time);
        break;

      case CurveInterpolatorMethod_Parabolic:
        result = parabolic(startX, startY, x1, y1, x2, y2, endX, endY, time);
        break;

      case CurveInterpolatorMethod_TangentLog:
        result = log(startX, startY, x1, y1, x2, y2, endX, endY, time);
        break;
      }
      break;

    case SpanInterpolationMethod_Linear:
      result = interpolateLinear(time, startX, startY, endX, endY);
      break;

    case SpanInterpolationMethod_Step:
      result = interpolateStep(time, startX, startY, endX, endY);
      break;

    case SpanInterpolationMethod_StepNext:
      result = interpolateStepNext(time, startX, startY, endX, endY);
      break;
    }
    return result;
  }

  /*!
      Evaluate rotation infinities using quaternion interpolation.

      \param[in] time Time to evaluate rotation curve's infinity (time <= first OR time >= last)
      \param[in] firstTime Time of the first key in the curve
      \param[in] firstValue Quat_d value of the first key
      \param[in] lastTime Time of the last key in the curve
      \param[in] lastValue Quat_d value of the last key       
      \param[in] preInfinityType Pre-infinity type of the curve
      \param[in] postInfinityType Post-infinity type of the curve
      \param[out] qOffset The rotation offset to add to the final quaternion evaluation
      \param[out] qStart First keyed rotation of the sequence, used in final quaternion evaluation to offset back to identity quaternion
      \param[out] inverse Depending on the infinity case, should the quaternion evaluation be inversed

      \return
      Boolean whether the resolved value needs post-processing. See more in evaluateQuaternionCurve() implementation
  */
  Boolean evaluateQuaternionInfinity(
    io Float64 time,
    Float64 firstTime, Quat_d firstValue,
    Float64 lastTime, Quat_d lastValue,
    InfinityType preInfinityType,
    InfinityType postInfinityType,
    io Quat_d qOffset,
    io Quat_d qStart,
    io Boolean inverse)
  {
    qOffset = Quat_d(0.0, 0.0, 0.0, 1.0);
    qStart = Quat_d(0.0, 0.0, 0.0, 1.0);
    inverse = false;

    Seconds start = Seconds(firstTime);
    Seconds end = Seconds(lastTime);
    Seconds range = Seconds((end - start));
    UInt32 cycles = 0;
    Boolean needsPostProcessing = false;

    if (time < start)
    {
      switch (preInfinityType)
      {
      case InfinityType_Constant:
        time = start;
        break;

      case InfinityType_Cycle:
      case InfinityType_CycleRelative:
      case InfinityType_Oscillate:
      {
        Seconds diff = Seconds(start - time);
        time = range - fmod(diff, range);
        if (preInfinityType == InfinityType_Oscillate)
        {
          Seconds mod2 = fmod(diff, 2 * range);
          if (mod2 < range)
            time = range - time;
        }
        else if (preInfinityType == InfinityType_CycleRelative)
        {
          cycles = UInt32(floor(diff / range));
          time = range - time;
          inverse = true;
          needsPostProcessing = true;
        }

        time += start;
      }
      break;

      case InfinityType_Linear:
        time = start;
        return false;
      }
    }
    else if (time > end)
    {
      switch (postInfinityType)
      {
      case InfinityType_Constant:
        time = end;
        break;

      case InfinityType_Cycle:
      case InfinityType_CycleRelative:
      case InfinityType_Oscillate:
      {
        Seconds diff = Seconds(time - end);
        time = range - fmod(diff, range);
        if (postInfinityType == InfinityType_Oscillate)
        {
          Seconds mod2 = fmod(diff, 2 * range);
          if (mod2 < range)
            time = range - time;
        }
        else if (postInfinityType == InfinityType_CycleRelative)
        {
          cycles = UInt32(floor(diff / range) + 1);
          needsPostProcessing = true;
        }

        time += start;
      }
      break;

      case InfinityType_Linear:
        time = end;
        return false;
      }
    }
    else
    {
      return false;
    }

    qStart = firstValue;

    if (cycles > 0)
    {
      Quat_d qEnd2(lastValue);
      Quat_d qStart2(firstValue);
      qOffset = (qStart2.conjugate() * qEnd2).pow(Float64(cycles)).unit();
    }

    return needsPostProcessing;
  }

  /*!
      Evaluate infinities of a single curve.

      \param[in] time Time to evaluate infinity at
      \param[in] curve Curve accessor to operate on
      \param[in] infinity Evaluating pre or post infinity

      \return
      Evaluated double value of the infinity.
  */
  Float64 evaluateInfinity(
    Float64 time,
    Ref<ICurve> curve,
    Infinity infinity)
  {
    Keyframe first, last;
    if (!curve.first(first) || !curve.last(last))
      return 0.0;

    InfinityType preInfinityTypeVar = curve.preInfinityType();
    InfinityType postInfinityTypeVar = curve.postInfinityType();

    Float64 value = 0.0;
    Float64 range = last.time - first.time;
    Float64 remainder, numCycles, notUsed, ratio;

    if (range == 0)
    {
      return value;
    }
    else if (time > last.time)
    {
      Float64 diff = time - last.time;
      ratio = diff / range;
      remainder = abs(modf(ratio, numCycles));
    }
    else
    {
      Float64 diff = time - first.time;
      ratio = diff / range;
      remainder = abs(modf(ratio, numCycles));
    }

    Float64 factoredTime = range * remainder;
    numCycles = abs(numCycles) + 1;

    if (infinity == Infinity_Pre)
    {
      if (preInfinityTypeVar == InfinityType_Oscillate)
      {
        if ((remainder = modf((numCycles / 2), notUsed)) != 0.0)
          factoredTime = first.time + factoredTime;
        else
          factoredTime = last.time - factoredTime;
      }
      else if (
        preInfinityTypeVar == InfinityType_Cycle ||
        preInfinityTypeVar == InfinityType_CycleRelative)
      {
        factoredTime = last.time - factoredTime;
      }
      else if (preInfinityTypeVar == InfinityType_Linear)
      {
        Float64 inc = first.time - time;
        Float64 angle = tangentAngle(curve, 0, true);
        value = first.value - inc * tan(angle);
        return value;
      }
    }
    else
    {
      if (postInfinityTypeVar == InfinityType_Oscillate)
      {
        if ((remainder = modf((numCycles / 2), notUsed)) != 0.0)
          factoredTime = last.time - factoredTime;
        else
          factoredTime = first.time + factoredTime;
      }
      else if (
        postInfinityTypeVar == InfinityType_Cycle ||
        postInfinityTypeVar == InfinityType_CycleRelative)
      {
        factoredTime = first.time + factoredTime;
      }
      else if (postInfinityTypeVar == InfinityType_Linear)
      {
        Float64 inc = time - last.time;
        Float64 angle = tangentAngle(curve, last.index, false);
        value = last.value + inc * tan(angle);
        return value;
      }
    }

    value = evaluateCurve(toTickDoubleTime(factoredTime), curve);

    if (infinity == Infinity_Pre && preInfinityTypeVar == InfinityType_CycleRelative)
    {
      Float64 range2 = last.value - first.value;
      value -= numCycles * range2;
    }
    else if (infinity == Infinity_Post && postInfinityTypeVar == InfinityType_CycleRelative)
    {
      Float64 range2 = last.value - first.value;
      value += numCycles * range2;
    }
    return value;
  }


  /*!
      Evaluate an individual rotation curve segment using quaternion interpolation.

      \param[in] time Time to evaluation rotation at
      \param[in] interpolationMethod Rotation interpolation method
      \param[in] spanInterpolationMethod Interpolation mode of the segment
      \param[in] startTime Time of the key at/before given time
      \param[in] startValue Quaternion value of the start key
      \param[in] endTime Time of the key after given time
      \param[in] endValue Quaternion value of the end key
      \param[in] tangentType Out-tangent type of the start key        
      \param[in] prevValue Quaternion value of the prev key
      \param[in] nextValue Quaternion value of the next key                       

      \return
      Evaluated quaternion value of a rotation segment.
  */
  Quat_d evaluateQuaternion(
    Seconds time,
    CurveRotationInterpolationMethod interpolationMethod,
    SpanInterpolationMethod spanInterpolationMethod,
    Seconds startTime, Quat_d startValue,
    Seconds endTime, Quat_d endValue,
    TangentType tangentType,
    Quat_d prevValue,
    Quat_d nextValue)
  {
    Quat_d q1(startValue);
    Quat_d q2(endValue);
    Quat_d q;
    Boolean notEvaluated = false;
    Float64 param = equivalent(startTime, endTime) ?
      1.0 :
      (time - startTime) / Float64(endTime - startTime);

    if (interpolationMethod == CurveRotationInterpolationMethod_Slerp)
    {
      q = slerp(q1, q2, param);
    }
    else if (interpolationMethod == CurveRotationInterpolationMethod_Quaternion)
    {
      if (time < startTime || spanInterpolationMethod == SpanInterpolationMethod_Step || tangentType == TangentType_Step)
      {
        q = q1;
      }
      else if (spanInterpolationMethod == SpanInterpolationMethod_Linear || tangentType == TangentType_Linear)
      {
        q = slerp(q1, q2, param);
      }
      else
      {
        notEvaluated = true;
      }
    }
    else
    {
      notEvaluated = true;
    }

    if (notEvaluated)
    {
      Quat_d q0(prevValue);
      Quat_d q3(nextValue);
      Quat_d ctrl0 = bezierPt(q0, q1, q2, true);
      Quat_d ctrl1 = bezierPt(q1, q2, q3, false);
      q = bezier(q1, ctrl0, ctrl1, q2, param);
    }

    return q;
  }

  /*!
      Evaluate rotation curves using quaternion interpolation.

      \param[in] time Time to evaluate at
      \param[in] pcX Curve accessor for rotation X
      \param[in] pcY Curve accessor for rotation Y
      \param[in] pcZ Curve accessor for rotation Z
      \param[in] interpolationMethod Rotation interpolation method

      \return
      Evaluated quaternion value of a rotation curve.
  */
  Quat_d evaluateQuaternionCurve(
    Float64 timeIn,
    Ref<ICurve> pcX, Ref<ICurve> pcY, Ref<ICurve> pcZ,
    CurveRotationInterpolationMethod interpolationMethod)
  {
    Float64 time = timeIn;

    Keyframe keyX, keyY, keyZ;
    if (pcX.keyframe(time, keyX) && keyX.time == time)
    {
      if (pcY.keyframe(time, keyY) && keyY.time == time)
      {
        if (pcZ.keyframe(time, keyZ) && keyZ.time == time)
        {
          return Quat_d(keyX.value, keyY.value, keyZ.value, Float32(keyZ.quaternionW) /* deliberate cast to float */);
        }
      }
    }

    Keyframe start, end;
    if (!pcX.first(start) || !pcX.last(end))
      return Quat_d();

    Keyframe first, last;
    Quat_d firstQ = findClosestKeyframe(start.time, pcX, pcY, pcZ, true, true, first);
    Quat_d lastQ = findClosestKeyframe(end.time, pcX, pcY, pcZ, true, false, last);

    Boolean isInfInversed;
    Quat_d qInfOffsetQ, qInfStartQ;
    Boolean needsInfPostProcessing = evaluateQuaternionInfinity(
      time,
      first.time, firstQ,
      last.time, lastQ,
      pcZ.preInfinityType(),
      pcZ.postInfinityType(),
      qInfOffsetQ, qInfStartQ, isInfInversed);

    Quat_d qInfOffset = qInfOffsetQ, qInfStart = qInfStartQ;

    Keyframe prev, next;
    Quat_d q1 = findClosestKeyframe(time, pcX, pcY, pcZ, true, true, start);
    Quat_d q2 = findClosestKeyframe(time + kOneTickInSeconds, pcX, pcY, pcZ, true, false, end);

    Quat_d q0 = findClosestKeyframe(start.time - kOneTickInSeconds, pcX, pcY, pcZ, false, false, prev);
    Quat_d q3 = findClosestKeyframe(end.time + kOneTickInSeconds, pcX, pcY, pcZ, true, false, next);

    Quat_d _q = evaluateQuaternion(
      Seconds(time),
      interpolationMethod,
      start.spanInterpolationMethod(),
      Seconds(start.time), q1,
      Seconds(end.time), q2,
      start.tanOut.type,
      q0,
      q3);


    if (needsInfPostProcessing)
    {
      Quat_d q = _q;
      q *= qInfOffset;

      if (isInfInversed) {
        q *= qInfStart.conjugate();
        q = q.inverse();
        q *= qInfStart;
      }
      return q;
    }

    return _q;
  }

  /*!
      Compute tangent values for a key with Auto tangent type.

      \param[in] calculateInTangent True when calculating "in" tangent. False if "out"
      \param[in] key Key tangent of we are calculating
      \param[in] prevKey Previous key, if present
      \param[in] nextKey Next key, if present
      \param[in] tanX Output tangent X value
      \param[in] tanY Output tangent Y value
  */
  autoTangent(
    Boolean calculateInTangent, 
    KeyTimeValue key, 
    io KeyTimeValue prevKey, 
    io KeyTimeValue nextKey, 
    CurveInterpolatorMethod curveInterpolationMethod,
    io Seconds tanX,
    io Seconds tanY,
    Boolean usePrevKey,
    Boolean useNextKey)
  {
    if (!usePrevKey || !useNextKey)
    {
      // calculate flat tangent
      Seconds tanInx = 0.0, tanIny = 0.0;
      Seconds tanOutx = 0.0, tanOuty = 0.0;
      Seconds x = Seconds(key.time);

      if (usePrevKey)
        tanInx = x - Seconds(prevKey.time);
      
      if (useNextKey)
        tanOutx = Seconds(nextKey.time) - x;
      
      if (!usePrevKey)
        tanInx = tanOutx;
      
      if (!useNextKey)
        tanOutx = tanInx;
      
      if (calculateInTangent)
      {
        tanX = tanInx;
        tanY = tanIny;
      }
      else
      {
        tanX = tanOutx;
        tanY = tanOuty;
      }
    }
    else
    {
      Seconds x = Seconds(key.time);
      Float64 y = key.value;
      Seconds px = Seconds(prevKey.time);
      Seconds nx = Seconds(nextKey.time);
      Float64 py = prevKey.value;
      Float64 ny = nextKey.value;
      
      if (calculateInTangent)
        tanX = Seconds(x - px);
      else
        tanX = Seconds(nx - x);

      Float64 targetSlope = 0.0, prevSlope3 = 0.0, nextSlope3 = 0.0;

      // Target slope is the default spline slope.
      // prevSlope3 and nextSlope3 are respectively the slopes to the left and right keys multiplied by 3.
      // Target slope needs to be adjusted to fit between these 2 last slope values to ensure that the
      // control points are not outside of the Y range defined by the prev and next keys

      targetSlope = (ny - py) / (nx - px);
      prevSlope3 = 3.0 * (y - py) / (x - px);
      nextSlope3 = 3.0 * (ny - y) / (nx - x);

      if (prevSlope3.signNoZero() != nextSlope3.signNoZero() ||
        targetSlope.signNoZero() != nextSlope3.signNoZero())
      {
        targetSlope = 0.0;
      }
      else if (nextSlope3 >= 0)
      {
        targetSlope = Math_min(Math_min(targetSlope, nextSlope3), prevSlope3);
      }
      else
      {
        targetSlope = Math_max(Math_max(targetSlope, nextSlope3), prevSlope3);
      }
      tanY = Seconds(targetSlope * tanX);      
    }

    if (tanX < 0)
      tanX = 0;

    if (curveInterpolationMethod == CurveInterpolatorMethod_Hermite)
    {
      Seconds length = sqrt(tanX*tanX + tanY * tanY);
      if (length > 0)
      {
        tanX /= length;
        tanY /= length;
      }
    }
  }

  /*!
      Compute tangent values for a key with Auto tangent type.

      \param[in] calculateInTangent True when calculating "in" tangent. False if "out"
      \param[in] key Key tangent of we are calculating
      \param[in] prevKey Previous key, if present
      \param[in] nextKey Next key, if present
      \param[in] tanX Output tangent X value
      \param[in] tanY Output tangent Y value
  */
  inline autoTangent(
    Boolean calculateInTangent, 
    KeyTimeValue key, 
    io KeyTimeValue prevKey, 
    io KeyTimeValue nextKey, 
    CurveInterpolatorMethod curveInterpolationMethod,
    io Seconds tanX,
    io Seconds tanY)
  {
    autoTangent(
      calculateInTangent,
      key,
      prevKey,
      nextKey,
      curveInterpolationMethod,
      tanX,
      tanY,
      true,
      true
    );
  }

  //! Utility functions to perform interpolation between two keys
  inline Float64 interpolateLinear(Float64 time, Float64 keyTime1, Float64 keyValue1, Float64 keyTime2, Float64 keyValue2)
  {
    // assert(keyTime2 >= keyTime1);
    // assert(time >= keyTime1);
    // assert(time <= keyTime2);

    if (keyTime1 == keyTime2)
      return keyValue1;

    Float64 t = (time - keyTime1) / (keyTime2 - keyTime1);
    return Math_linearInterpolate(keyValue1, keyValue2, t);
  }

  inline Float64 interpolateStep(Float64 time, Float64 keyTime1, Float64 keyValue1, Float64 keyTime2, Float64 keyValue2)
  {
    return keyValue1;
  }

  inline Float64 interpolateStepNext(Float64 time, Float64 keyTime1, Float64 keyValue1, Float64 keyTime2, Float64 keyValue2)
  {
    return keyValue2;
  }


  //! Utility function to compute tangent angle given its X and Y components
  Float64 tangentAngle(
    Ref<ICurve> curve,
    UInt32 index,
    Boolean inTangent,
    Float64 xScale,
    Float64 yScale
  )
  {
    Keyframe key;
    curve.keyframeAtIndex(index, key);
    Float64 tanTime, tanValue;

    if (inTangent)
    {
      tanTime = key.tanIn.x;
      tanValue = key.tanIn.y;
    }
    else
    {
      tanTime = key.tanOut.x;
      tanValue = key.tanOut.y;
    }

    if (!equivalent(tanTime, 0.0))
    {
      Float64 angleVal = atan((tanValue * yScale) / (tanTime * xScale));
      return angleVal;
    }

    Float64 angle(
      equivalent(tanValue, 0.0) ? 0.0 : tanValue.sign() * 90.0
    );
    return angle * kPI / 180.0;
  }

  //! Utility function to compute tangent angle given its X and Y components
  Float64 tangentAngle(
    Ref<ICurve> curve,
    UInt32 index,
    Boolean inTangent
  ) {
    return tangentAngle(curve, index, inTangent, 1.0, 1.0);
  }

  //! Given three rotation curves RX, Ry, RZ, find the closest key forward or backward in time
  //  common to all three curves
  Quat_d findClosestKeyframe(
    Float64 time,
    Ref<ICurve> pcX, Ref<ICurve> pcY, Ref<ICurve> pcZ,
    Boolean forward,
    Boolean atStart,
    io Keyframe keyframe)
  {
    SInt32 nX = pcX.keyframeCount();
    SInt32 nY = pcY.keyframeCount();
    SInt32 nZ = pcZ.keyframeCount();
    SInt32 iX = 0;
    Keyframe key;

    if (forward)
    {
      for (; iX < nX; ++iX)
      {
        pcX.keyframeAtIndex(iX, key);
        Float64 t = key.time;
        if (t >= time)
        {
          if (t > time && atStart)
            --iX;
          break;
        }
      }
    }
    else
    {
      for (iX = nX - 1; iX >= 0; --iX)
      {
        pcX.keyframeAtIndex(iX, key);
        if (key.time <= time)
          break;
      }
    }

    Float64 tX, tY, tZ;
    if (iX >= 0 && iX < nX)
    {
      Keyframe kx, ky, kz;
      pcX.keyframeAtIndex(iX, kx);
      pcY.keyframeAtIndex(iX, ky);
      pcZ.keyframeAtIndex(iX, kz);
      tX = kx.time;
      if ((iX < nY && equivalent(tX, ky.time)) &&
        (iX < nZ && equivalent(tX, kz.time)))
      {
        keyframe = kz;

        return Quat_d(
          kx.value,
          ky.value,
          kz.value,
          Float32(kz.quaternionW) /* deliberate cast to float */);
      }
    }
    else if (iX < 0)
    {
      Keyframe kx, ky, kz;
      pcX.first(kx);
      pcY.first(ky);
      pcZ.first(kz);
      tX = kx.time;
      tY = ky.time;
      tZ = kz.time;
      if (tY >= time && tZ >= time)
      {
        keyframe = kz;

        return Quat_d(
          kx.value,
          ky.value,
          kz.value,
          Float32(kz.quaternionW) /* deliberate cast to float */);
      }
    }
    else
    {
      Keyframe kx, ky, kz;
      pcX.last(kx);
      pcY.last(ky);
      pcZ.last(kz);
      tX = kx.time;
      tY = ky.time;
      tZ = kz.time;
      if (tY <= time && tZ <= time)
      {
        keyframe = kz;

        return Quat_d(
          kx.value,
          ky.value,
          kz.value,
          Float32(kz.quaternionW) /* deliberate cast to float */);
      }
    }

    iX = iX >= 0 ? iX : 0;
    SInt32 iY = Math_clamp(iX, 0, nY - 1);
    SInt32 iZ = Math_clamp(iX, 0, nZ - 1);

    Keyframe kx, ky, kz;
    pcX.keyframeAtIndex(iX, kx);
    pcY.keyframeAtIndex(iY, ky);
    pcZ.keyframeAtIndex(iZ, kz);

    keyframe = kx;

    return Quat_d(
      kx.value,
      ky.value,
      kz.value,
      Float32(kz.quaternionW) /* deliberate cast to float */);
  }

}
