//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

namespace AnimX
{
  Float64 sine(Float64 startX, Float64 startY, Float64 x1, Float64 y1, Float64 x2, Float64 y2, Float64 endX, Float64 endY, Float64 time)
  {
    Float64 t = time;
    Float64 t0 = startX;
    Float64 v0 = startY;
    if (t == t0) return v0;

    Float64 t3 = endX;
    Float64 v3 = y2;
    if (t == t3) return v3;
    Float64 len = t3 - t0; // length of seg

    Float64 ei = x1 - startX;
    Float64 eo = x2 - endX;
    if (ei < 0) ei = 0;
    else if (ei > len) ei = len;
    if (eo < 0) eo = 0;
    else if (eo > len - ei) eo = len - ei;

    Float64 t1 = t0 + ei;
    Float64 t2 = t3 - eo;

    // compute mid slope
    Float64 m = (v3 - v0) / (len - (ei + eo) * (1 - 2 / PI));

    if (t < t1) // ease in
      return v0 + m * ei * (2 / PI) * (1 - cos((t - t0)*(PI / 2) / ei));

    else if (t > t2) // ease out
      return v3 - m * eo * (2 / PI) * (1 - cos((t3 - t)*(PI / 2) / eo));

    else // middle (linear)
      return v0 + m * (ei * (2 / PI) + t - t1);
  }

  Float64 parabolic(Float64 startX, Float64 startY, Float64 x1, Float64 y1, Float64 x2, Float64 y2, Float64 endX, Float64 endY, Float64 time)
  {
    Float64 t = time;
    Float64 t0 = startX;
    Float64 v0 = startY;
    if (t == t0) return v0;

    Float64 t3 = endX;
    Float64 v3 = endY;
    if (t == t3) return v3;
    Float64 len = t3 - t0; // length of seg

    Float64 ei = x1 - startX;
    Float64 eo = x2 - endX;
    if (ei < 0) ei = 0;
    else if (ei > len) ei = len;
    if (eo < 0) eo = 0;
    else if (eo > len - ei) eo = len - ei;

    Float64 t1 = t0 + ei;
    Float64 t2 = t3 - eo;

    // compute mid slope
    Float64 m = (v3 - v0) / (len - 0.5 * (ei + eo));

    if (t < t1) { // ease in
      Float64 dt = t - t0;
      return v0 + m * dt * dt / (2 * ei);
    }
    else if (t < t2) { // middle (linear)
      return v0 + m * (0.5 * ei + t - t1);
    }
    else { // ease out
      Float64 dt = t3 - t;
      return v3 - m * dt * dt / (2 * eo);
    }
  }

  Float64 log(Float64 startX, Float64 startY, Float64 x1, Float64 y1, Float64 x2, Float64 y2, Float64 endX, Float64 endY, Float64 time)
  {
    Float64 t = time;
    Float64 t0 = startX;
    Float64 t3 = endX;
    Float64 len = t3 - t0; // length of seg

    if (t == t0) return startY;
    if (t == t3) return endY;

    Float64 ei = x1 - startX;
    Float64 wi = y1 - startY;
    Float64 eo = x2 - endX;
    Float64 wo = y2 - endY;

    if (ei < 0) ei = 0;
    else if (ei > len) ei = len;
    if (eo < 0) eo = 0;
    else if (eo > len - ei) eo = len - ei;

    if (wo <= 0) { wo = 1; }
    if (wi <= 0) { wi = 1; }
    Float64 r = wo / wi;

    // first compute a sin ease, but over normalized range [0..1]
    Float64 v0 = startY;
    Float64 v3 = endY;
    Float64 t1 = t0 + ei;
    Float64 t2 = t3 - eo;

    // compute midslope
    Float64 m = 1 / (len - (ei + eo) * (1 - 2 / PI));

    Float64 result;
    if (t < t1) { // ease in
      result = m * ei * (2 / PI) * (1 - cos((t - t0)*(PI / 2) / ei));
    }
    else if (t > t2) { // ease out
      result = m * (ei * (2 / PI) + (t2 - t1)
        + eo * (2 / PI) * sin((t - t2)*(PI / 2) / eo));
    }
    else { // middle (linear)
      result = m * (ei * (2 / PI) + t - t1);
    }

    // then compose with the exp function and re-normalize
    if (!equivalent(r, 1.0))
      result = (exp(::log(r)*result) - 1) / (r - 1);

    // finally, scale+translate to desired range of [v0..v3]
    return v0 + (v3 - v0) * result;
  }

  Float64 bezier(Float64 startX, Float64 startY, Float64 x1, Float64 y1, Float64 x2, Float64 y2, Float64 endX, Float64 endY, Float64 time)
  {
    Tbezier b;
    return b.evaluate(startX, startY, x1, y1, x2, y2, endX, endY, time);
  }

  Float64 hermite(Float64 startX, Float64 startY, Float64 x1, Float64 y1, Float64 x2, Float64 y2, Float64 endX, Float64 endY, Float64 time)
  {
    // save the control points
    //
    Float64 fX1 = startX;
    Float64 fY1 = startY;
    Float64 fX2 = x1;
    Float64 fY2 = y1;
    Float64 fX3 = x2;
    Float64 fY3 = y2;
    Float64 fX4 = endX;
    Float64 fY4 = endY;

    // Compute the difference between the 2 keyframes.          
    Float64 dx = fX4 - fX1;
    Float64 dy = fY4 - fY1;

    // Compute the tangent at the start of the curve segment.
    Float64 tan_x = fX2 - fX1;
    Float64 m1 = 0.0;
    if (tan_x != 0.0) {
        m1 = (fY2 - fY1) / tan_x;
    }

    tan_x = fX4 - fX3;
    Float64 m2 = 0.0;
    if (tan_x != 0.0) {
        m2 = (fY4 - fY3) / tan_x;
    }

    Float64 length = 1.0 / (dx * dx);
    Float64 double1 = dx * m1;
    Float64 double2 = dx * m2;
    Float64 fCoeff[4];

    fCoeff[0] = (double1 + double2 - dy - dy) * length / dx;
    fCoeff[1] = (dy + dy + dy - double1 - double1 - double2) * length;
    fCoeff[2] = m1;
    fCoeff[3] = fY1;

    Float64 t = time - fX1;
    Float64 val = t * (t * (t * fCoeff[0] + fCoeff[1]) + fCoeff[2]) + fCoeff[3];
    return (val);
  }
}
