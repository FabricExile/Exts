//
// Copyright (c) 2010-2017 Fabric Software Inc. All rights reserved.
//

namespace AnimX
{
  Float64 initTolerance()
  {
    Float64 one = 1.0, half = 0.5, sum = 0.0, tolerance = 1.0;
    Boolean exit = sum > one;
    while(!exit)
    {
      tolerance = tolerance * half;
      sum = tolerance + one;
      exit = sum <= one;
    }
    return tolerance * 2.0;
  }

  // todo: validate value, used to be result of initTolerance
  const Float64 epsilon = +2.220446049250313e-16;

  struct Polynomial
  {
    Float64 p<>;
    SInt32 deg;
  };

  inline Float64 horner1(Float64 P<>, SInt32 deg, Float64 s)
  {
    Float64 h;
    SInt32 d = deg;

    h = P[d];
    while (--d >= 0) h = s*h + P[d];

    return (h);
  }

  Float64 zeroin2(
    Float64 aIn, Float64 bIn, Float64 faIn, Float64 fbIn,
    Float64 tolIn, Polynomial pars)
  {
    SInt32 test;

    Float64 a = aIn;
    Float64 b = bIn;
    Float64 fa = faIn;
    Float64 fb = fbIn;
    Float64 tol = tolIn;

    Float64 c, d, e, fc, del, m, p, q, r, s;

    /* start iteration */
    Boolean gotoLabel1 = true;
    while(gotoLabel1) // label1
    {
      gotoLabel1 = false;
      Boolean gotoLabel2 = true;

      c = a;  fc = fa;  d = b - a;  e = d;

      while(gotoLabel2)
      {
        gotoLabel2 = false;

        if (abs(fc) < abs(fb)) 
        {
          a = b;   b = c;   c = a;   fa = fb;   fb = fc;   fc = fa;
        }

        /* convergence test */
        del = 2.0 * epsilon * abs(b) + 0.5*tol;
        m = 0.5 * (c - b);
        test = ((abs(m) > del) && (fb != 0.0));
        if (test) 
        {
          if ((abs(e) < del) || (abs(fa) <= abs(fb))) 
          {
            /* bisection */
            d = m;  e = d;
          }
          else 
          {
            s = fb / fa;
            if (a == c) 
            {
              /* linear interpolation */
              p = 2.0*m*s;    q = 1.0 - s;
            }
            else 
            {
              /* inverse quadratic interpolation */
              q = fa / fc;
              r = fb / fc;
              p = s*(2.0*m*q*(q - r) - (b - a)*(r - 1.0));
              q = (q - 1.0)*(r - 1.0)*(s - 1.0);
            }
            /* adjust the sign */
            if (p > 0.0) q = -q;  else p = -p;
            /* check if interpolation is acceptable */
            s = e;   e = d;
            if ((2.0*p < 3.0*m*q - abs(del*q)) && (p < abs(0.5*s*q))) 
            {
              d = p / q;
            }
            else 
            {
              d = m;     e = d;
            }
          }
          /* complete step */
          a = b;     fa = fb;
          if (abs(d) > del)   b += d;
          else if (m > 0.0) b += del;  else b -= del;
          fb = horner1(pars.p, pars.deg, b);
          if (fb*(fc / abs(fc)) > 0.0)
            gotoLabel1 = true;
          else
            gotoLabel2 = true;
        }
      }
    }

    return (b);
  }

  Float64 zeroin(Float64 a, Float64 b, Float64 tol, Polynomial pars)
  {
    Float64 fa = horner1(pars.p, pars.deg, a);
    if (abs(fa) < epsilon) return(a);

    Float64 fb = horner1(pars.p, pars.deg, b);
    if (abs(fb) < epsilon) return(b);

    return (zeroin2(a, b, fa, fb, tol, pars));
  }


  SInt32 polyZeroes(
    Float64 Poly<>,
    SInt32 degIn,
    Float64 a, Boolean a_closed,
    Float64 b, Boolean b_closed,
    io Float64 Roots<>)
  {
    SInt32         deg = degIn;
    SInt32         al, left_ok, right_ok, nr, ndr, skip;
    Float64        e, f, s, pe, ps, tol, p<>, p_v[], p_x[22], d<>, d_v[], d_x[22], dr<>, dr_v[], dr_x[22];
    Polynomial     ply;

    e = pe = 0.0;

    // f = v_len1(Poly, deg+1);
    //
    f = 0.0;
    SInt32 i;
    for (i = 0; i < deg + 1; ++i)
    {
      f += abs(Poly[i]);
    }
    tol = (abs(a) + abs(b))*(deg + 1)*epsilon;

    /* Zero polynomial to tolerance? */
    if (f <= tol)  return(-1);

    /* Check to see if work arrays large enough */
    if (deg <= 20) 
    { 
      p = p_x;  
      d = d_x;  
      dr = dr_x; 
      al = 0; 
    }
    else 
    {
      al = deg + 2;
      p_v.resize(al);
      d_v.resize(al);
      dr_v.resize(al);
      p = p_v;
      d = d_v;
      dr = dr_v;
    }

    // normalize the polynomial ( by absolute values) 
    // V_aA( 1.0/f, Poly, p, deg+1 );
    //
    for (i = 0; i < deg + 1; ++i) 
    {
        p[i] = 1.0 / f * Poly[i];
    }

    /* determine true degree */
    while (abs(p[deg]) < tol) deg--;

    /* Identically zero poly already caught so constant fn != 0 */
    nr = 0;

    Boolean firstLoop = deg != 0;
    while(firstLoop)
    {
      firstLoop = false;

      /* check for linear case */
      if (deg == 1) 
      {
        Roots[0] = -p[0] / p[1];
        left_ok = (a_closed) ? (a < Roots[0] + tol) : (a < Roots[0] - tol);
        right_ok = (b_closed) ? (b > Roots[0] - tol) : (b > Roots[0] + tol);
        nr = (left_ok && right_ok) ? 1 : 0;
        if (nr) 
        {
            if (a_closed && Roots[0] < a) Roots[0] = a;
            else if (b_closed && Roots[0] > b) Roots[0] = b;
        }
        break;
      }

      /* handle non-linear case */
      else 
      {
        ply.p = p;  ply.deg = deg;

        /* compute derivative */
        for (i = 1; i <= deg; i++) d[i - 1] = i*p[i];

        /* find roots of derivative */
        ndr = polyZeroes(d, deg - 1, a, 0, b, 0, dr);
        if (ndr == -1) 
        { 
          nr = 0; 
          break;
        }

        /* find roots between roots of the derivative */
        for (i = skip = 0; i <= ndr; i++) 
        {
          if (nr > deg) break; // exits loop + while loop
          if (i == 0) 
          {
            s = a; ps = horner1(p, deg, s);
            if (abs(ps) <= tol && a_closed) Roots[nr++] = a;
          }
          else 
          { 
            s = e; 
            ps = pe; 
          }
          if (i == ndr) 
          { 
            e = b; 
            skip = 0; 
          }
          else 
            e = dr[i];
          pe = horner1(p, deg, e);
          if (skip) skip = 0;
          else 
          {
            if (abs(pe) < tol) 
            {
              if (i != ndr || b_closed) 
              {
                Roots[nr++] = e;
                skip = 1;
              }
            }
            else if ((ps < 0 && pe>0) || (ps > 0 && pe < 0)) 
            {
              Roots[nr++] = zeroin(s, e, 0.0, ply);
              if ((nr > 1) && Roots[nr - 2] >= Roots[nr - 1] - tol) 
              {
                Roots[nr - 2] = (Roots[nr - 2] + Roots[nr - 1]) * 0.5;
                nr--;
              }
            }
          }
        }
      }
    }

    return nr;
  }
}
