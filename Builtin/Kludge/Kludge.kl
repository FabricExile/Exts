//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// KL definitions for Kludge extension
// Automatically generated by KLUDGE
// *** DO NOT EDIT ***
//
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Requires
//
// To require another KL extension, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_require('Math')  # -> require Math;
//
//////////////////////////////////////////////////////////////////////////////

// No requires specified

//////////////////////////////////////////////////////////////////////////////
//
// Prologs
//
// To add prolog code, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_prolog("""
//   MyGlobalFunc() {
//     report("MyGlobalFunc");
//   }
//
//////////////////////////////////////////////////////////////////////////////

// No prologs specified

//////////////////////////////////////////////////////////////////////////////
//
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Boolean] EDK[Fabric::EDK::KL::Boolean] LIB[bool]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Boolean] EDK[Fabric::EDK::KL::Boolean] LIB[bool]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanPtr] EDK[CxxBooleanMutablePtr] LIB[bool *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanConstPtr] EDK[CxxBooleanConstPtr] LIB[bool const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[size_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxBooleanStdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVectorPtr] EDK[CxxBooleanStdVectorMutablePtr] LIB[std::vector< bool > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVectorConstPtr] EDK[CxxBooleanStdVectorConstPtr] LIB[std::vector< bool > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
alias SInt8 CxxChar;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtr] EDK[CxxCharMutablePtr] LIB[char *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtr] EDK[CxxCharConstPtr] LIB[char const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxCharStdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVectorPtr] EDK[CxxCharStdVectorMutablePtr] LIB[std::vector< char > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVectorConstPtr] EDK[CxxCharStdVectorConstPtr] LIB[std::vector< char > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt8] EDK[Fabric::EDK::KL::SInt8] LIB[int8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt8] EDK[Fabric::EDK::KL::SInt8] LIB[int8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8Ptr] EDK[CxxSInt8MutablePtr] LIB[int8_t *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8ConstPtr] EDK[CxxSInt8ConstPtr] LIB[int8_t const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxSInt8StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVectorPtr] EDK[CxxSInt8StdVectorMutablePtr] LIB[std::vector< int8_t > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVectorConstPtr] EDK[CxxSInt8StdVectorConstPtr] LIB[std::vector< int8_t > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8Ptr] EDK[CxxUInt8MutablePtr] LIB[uint8_t *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8ConstPtr] EDK[CxxUInt8ConstPtr] LIB[uint8_t const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxUInt8StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVectorPtr] EDK[CxxUInt8StdVectorMutablePtr] LIB[std::vector< unsigned char > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVectorConstPtr] EDK[CxxUInt8StdVectorConstPtr] LIB[std::vector< unsigned char > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt16] EDK[Fabric::EDK::KL::SInt16] LIB[int16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt16] EDK[Fabric::EDK::KL::SInt16] LIB[int16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16Ptr] EDK[CxxSInt16MutablePtr] LIB[int16_t *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16ConstPtr] EDK[CxxSInt16ConstPtr] LIB[int16_t const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxSInt16StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVectorPtr] EDK[CxxSInt16StdVectorMutablePtr] LIB[std::vector< short > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVectorConstPtr] EDK[CxxSInt16StdVectorConstPtr] LIB[std::vector< short > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16Ptr] EDK[CxxUInt16MutablePtr] LIB[uint16_t *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16ConstPtr] EDK[CxxUInt16ConstPtr] LIB[uint16_t const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxUInt16StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVectorPtr] EDK[CxxUInt16StdVectorMutablePtr] LIB[std::vector< unsigned short > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVectorConstPtr] EDK[CxxUInt16StdVectorConstPtr] LIB[std::vector< unsigned short > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32Ptr] EDK[CxxSInt32MutablePtr] LIB[int32_t *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32ConstPtr] EDK[CxxSInt32ConstPtr] LIB[int32_t const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxSInt32StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVectorPtr] EDK[CxxSInt32StdVectorMutablePtr] LIB[std::vector< int > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVectorConstPtr] EDK[CxxSInt32StdVectorConstPtr] LIB[std::vector< int > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32Ptr] EDK[CxxUInt32MutablePtr] LIB[uint32_t *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32ConstPtr] EDK[CxxUInt32ConstPtr] LIB[uint32_t const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxUInt32StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVectorPtr] EDK[CxxUInt32StdVectorMutablePtr] LIB[std::vector< unsigned int > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVectorConstPtr] EDK[CxxUInt32StdVectorConstPtr] LIB[std::vector< unsigned int > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[long long]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[long long]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64Ptr] EDK[CxxSInt64MutablePtr] LIB[long long *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64ConstPtr] EDK[CxxSInt64ConstPtr] LIB[long long const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxSInt64StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVectorPtr] EDK[CxxSInt64StdVectorMutablePtr] LIB[std::vector< long long > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVectorConstPtr] EDK[CxxSInt64StdVectorConstPtr] LIB[std::vector< long long > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[int64_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[unsigned long long]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[unsigned long long]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64Ptr] EDK[CxxUInt64MutablePtr] LIB[unsigned long long *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64ConstPtr] EDK[CxxUInt64ConstPtr] LIB[unsigned long long const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxUInt64StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVectorPtr] EDK[CxxUInt64StdVectorMutablePtr] LIB[std::vector< unsigned long long > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVectorConstPtr] EDK[CxxUInt64StdVectorConstPtr] LIB[std::vector< unsigned long long > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[uint64_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[ptrdiff_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[intptr_t]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32Ptr] EDK[CxxFloat32MutablePtr] LIB[float *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32ConstPtr] EDK[CxxFloat32ConstPtr] LIB[float const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxFloat32StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVectorPtr] EDK[CxxFloat32StdVectorMutablePtr] LIB[std::vector< float > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVectorConstPtr] EDK[CxxFloat32StdVectorConstPtr] LIB[std::vector< float > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

// None


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64Ptr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64Ref;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64Ptr] EDK[CxxFloat64MutablePtr] LIB[double *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64PtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64PtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64PtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64PtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64ConstPtr] EDK[CxxFloat64ConstPtr] LIB[double const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxFloat64StdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVectorPtr] EDK[CxxFloat64StdVectorMutablePtr] LIB[std::vector< double > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVectorConstPtr] EDK[CxxFloat64StdVectorConstPtr] LIB[std::vector< double > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxStdString;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringPtr] EDK[CxxStdStringMutablePtr] LIB[std::string *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringConstPtr] EDK[CxxStdStringConstPtr] LIB[std::string const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxStdStringStdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVectorPtr] EDK[CxxStdStringStdVectorMutablePtr] LIB[std::vector< std::string > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVectorConstPtr] EDK[CxxStdStringStdVectorConstPtr] LIB[std::vector< std::string > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrPtr] EDK[CxxCharConstPtrMutablePtr] LIB[char const * *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrConstPtr] EDK[CxxCharConstPtrConstPtr] LIB[char const * const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxCharConstPtrStdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVectorPtr] EDK[CxxCharConstPtrStdVectorMutablePtr] LIB[std::vector< char const * > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVectorConstPtr] EDK[CxxCharConstPtrStdVectorConstPtr] LIB[std::vector< char const * > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrPtr] EDK[CxxCharPtrMutablePtr] LIB[char * *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrConstPtr] EDK[CxxCharPtrConstPtr] LIB[char * const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxCharPtrStdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVectorPtr] EDK[CxxCharPtrStdVectorMutablePtr] LIB[std::vector< char * > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVectorConstPtr] EDK[CxxCharPtrStdVectorConstPtr] LIB[std::vector< char * > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtrRef;



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Data] EDK[Fabric::EDK::KL::Data] LIB[void *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxDataRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataPtr] EDK[CxxDataMutablePtr] LIB[void * *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxDataPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataConstPtr] EDK[CxxDataConstPtr] LIB[void * const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxDataStdVector;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVectorPtr] EDK[CxxDataStdVectorMutablePtr] LIB[std::vector< void * > *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVectorConstPtr] EDK[CxxDataStdVectorConstPtr] LIB[std::vector< void * > const *]
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtrConstPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtrPtr;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtrConstRef;

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtrRef;


//////////////////////////////////////////////////////////////////////////////
//
// Declarations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Boolean] EDK[Fabric::EDK::KL::Boolean] LIB[bool]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_Boolean() {
  return Boolean().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Boolean] EDK[Fabric::EDK::KL::Boolean] LIB[bool]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtr permits CxxBooleanConstRef {
  protected Data ptr; // actual CxxBooleanPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtr : CxxBooleanConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstRef {
  protected Data ptr; // actual CxxBooleanPtr
  protected Boolean values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanRef : CxxBooleanConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanPtr] EDK[CxxBooleanMutablePtr] LIB[bool *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtrConstPtr permits CxxBooleanPtrConstRef {
  protected Data ptr; // actual CxxBooleanPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtrPtr : CxxBooleanPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtrConstRef {
  protected Data ptr; // actual CxxBooleanPtrPtr
  protected CxxBooleanPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanPtrRef : CxxBooleanPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanConstPtr] EDK[CxxBooleanConstPtr] LIB[bool const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtrConstPtr permits CxxBooleanConstPtrConstRef {
  protected Data ptr; // actual CxxBooleanConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtrPtr : CxxBooleanConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtrConstRef {
  protected Data ptr; // actual CxxBooleanConstPtrPtr
  protected CxxBooleanConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanConstPtrRef : CxxBooleanConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[size_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_UInt64() {
  return UInt64().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxBooleanStdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxBooleanStdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxBooleanStdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxBooleanStdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtr permits CxxBooleanStdVectorConstRef {
  protected Data ptr; // actual CxxBooleanStdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtr : CxxBooleanStdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstRef {
  protected Data ptr; // actual CxxBooleanStdVectorPtr
  protected CxxBooleanStdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorRef : CxxBooleanStdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVectorPtr] EDK[CxxBooleanStdVectorMutablePtr] LIB[std::vector< bool > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtrConstPtr permits CxxBooleanStdVectorPtrConstRef {
  protected Data ptr; // actual CxxBooleanStdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtrPtr : CxxBooleanStdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtrConstRef {
  protected Data ptr; // actual CxxBooleanStdVectorPtrPtr
  protected CxxBooleanStdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorPtrRef : CxxBooleanStdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVectorConstPtr] EDK[CxxBooleanStdVectorConstPtr] LIB[std::vector< bool > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtrConstPtr permits CxxBooleanStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxBooleanStdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtrPtr : CxxBooleanStdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxBooleanStdVectorConstPtrPtr
  protected CxxBooleanStdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxBooleanStdVectorConstPtrRef : CxxBooleanStdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxBooleanStdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_CxxChar() {
  return CxxChar().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtr permits CxxCharConstRef {
  protected Data ptr; // actual CxxCharPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtr : CxxCharConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstRef {
  protected Data ptr; // actual CxxCharPtr
  protected CxxChar values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharRef : CxxCharConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtr] EDK[CxxCharMutablePtr] LIB[char *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtr permits CxxCharPtrConstRef {
  protected Data ptr; // actual CxxCharPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtr : CxxCharPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstRef {
  protected Data ptr; // actual CxxCharPtrPtr
  protected CxxCharPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrRef : CxxCharPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtr] EDK[CxxCharConstPtr] LIB[char const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtr permits CxxCharConstPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtr : CxxCharConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrPtr
  protected CxxCharConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrRef : CxxCharConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxCharStdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxCharStdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxCharStdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxCharStdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtr permits CxxCharStdVectorConstRef {
  protected Data ptr; // actual CxxCharStdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtr : CxxCharStdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstRef {
  protected Data ptr; // actual CxxCharStdVectorPtr
  protected CxxCharStdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorRef : CxxCharStdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVectorPtr] EDK[CxxCharStdVectorMutablePtr] LIB[std::vector< char > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtrConstPtr permits CxxCharStdVectorPtrConstRef {
  protected Data ptr; // actual CxxCharStdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtrPtr : CxxCharStdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtrConstRef {
  protected Data ptr; // actual CxxCharStdVectorPtrPtr
  protected CxxCharStdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorPtrRef : CxxCharStdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVectorConstPtr] EDK[CxxCharStdVectorConstPtr] LIB[std::vector< char > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtrConstPtr permits CxxCharStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxCharStdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtrPtr : CxxCharStdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxCharStdVectorConstPtrPtr
  protected CxxCharStdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharStdVectorConstPtrRef : CxxCharStdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharStdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt8] EDK[Fabric::EDK::KL::SInt8] LIB[int8_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_SInt8() {
  return SInt8().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt8] EDK[Fabric::EDK::KL::SInt8] LIB[int8_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtr permits CxxSInt8ConstRef {
  protected Data ptr; // actual CxxSInt8Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8Ptr : CxxSInt8ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstRef {
  protected Data ptr; // actual CxxSInt8Ptr
  protected SInt8 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8Ref : CxxSInt8ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8Ptr] EDK[CxxSInt8MutablePtr] LIB[int8_t *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8PtrConstPtr permits CxxSInt8PtrConstRef {
  protected Data ptr; // actual CxxSInt8PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8PtrPtr : CxxSInt8PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8PtrConstRef {
  protected Data ptr; // actual CxxSInt8PtrPtr
  protected CxxSInt8Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8PtrRef : CxxSInt8PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8ConstPtr] EDK[CxxSInt8ConstPtr] LIB[int8_t const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtrConstPtr permits CxxSInt8ConstPtrConstRef {
  protected Data ptr; // actual CxxSInt8ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtrPtr : CxxSInt8ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtrConstRef {
  protected Data ptr; // actual CxxSInt8ConstPtrPtr
  protected CxxSInt8ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8ConstPtrRef : CxxSInt8ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxSInt8StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxSInt8StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxSInt8StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxSInt8StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtr permits CxxSInt8StdVectorConstRef {
  protected Data ptr; // actual CxxSInt8StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtr : CxxSInt8StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstRef {
  protected Data ptr; // actual CxxSInt8StdVectorPtr
  protected CxxSInt8StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorRef : CxxSInt8StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVectorPtr] EDK[CxxSInt8StdVectorMutablePtr] LIB[std::vector< int8_t > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtrConstPtr permits CxxSInt8StdVectorPtrConstRef {
  protected Data ptr; // actual CxxSInt8StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtrPtr : CxxSInt8StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtrConstRef {
  protected Data ptr; // actual CxxSInt8StdVectorPtrPtr
  protected CxxSInt8StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorPtrRef : CxxSInt8StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVectorConstPtr] EDK[CxxSInt8StdVectorConstPtr] LIB[std::vector< int8_t > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtrConstPtr permits CxxSInt8StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxSInt8StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtrPtr : CxxSInt8StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxSInt8StdVectorConstPtrPtr
  protected CxxSInt8StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt8StdVectorConstPtrRef : CxxSInt8StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt8StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_UInt8() {
  return UInt8().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtr permits CxxUInt8ConstRef {
  protected Data ptr; // actual CxxUInt8Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8Ptr : CxxUInt8ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstRef {
  protected Data ptr; // actual CxxUInt8Ptr
  protected UInt8 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8Ref : CxxUInt8ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8Ptr] EDK[CxxUInt8MutablePtr] LIB[uint8_t *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrConstPtr permits CxxUInt8PtrConstRef {
  protected Data ptr; // actual CxxUInt8PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrPtr : CxxUInt8PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrConstRef {
  protected Data ptr; // actual CxxUInt8PtrPtr
  protected CxxUInt8Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8PtrRef : CxxUInt8PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8ConstPtr] EDK[CxxUInt8ConstPtr] LIB[uint8_t const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrConstPtr permits CxxUInt8ConstPtrConstRef {
  protected Data ptr; // actual CxxUInt8ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrPtr : CxxUInt8ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrConstRef {
  protected Data ptr; // actual CxxUInt8ConstPtrPtr
  protected CxxUInt8ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8ConstPtrRef : CxxUInt8ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxUInt8StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxUInt8StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxUInt8StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxUInt8StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtr permits CxxUInt8StdVectorConstRef {
  protected Data ptr; // actual CxxUInt8StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtr : CxxUInt8StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstRef {
  protected Data ptr; // actual CxxUInt8StdVectorPtr
  protected CxxUInt8StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorRef : CxxUInt8StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVectorPtr] EDK[CxxUInt8StdVectorMutablePtr] LIB[std::vector< unsigned char > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtrConstPtr permits CxxUInt8StdVectorPtrConstRef {
  protected Data ptr; // actual CxxUInt8StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtrPtr : CxxUInt8StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtrConstRef {
  protected Data ptr; // actual CxxUInt8StdVectorPtrPtr
  protected CxxUInt8StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorPtrRef : CxxUInt8StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVectorConstPtr] EDK[CxxUInt8StdVectorConstPtr] LIB[std::vector< unsigned char > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtrConstPtr permits CxxUInt8StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxUInt8StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtrPtr : CxxUInt8StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxUInt8StdVectorConstPtrPtr
  protected CxxUInt8StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt8StdVectorConstPtrRef : CxxUInt8StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt8StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt16] EDK[Fabric::EDK::KL::SInt16] LIB[int16_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_SInt16() {
  return SInt16().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt16] EDK[Fabric::EDK::KL::SInt16] LIB[int16_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtr permits CxxSInt16ConstRef {
  protected Data ptr; // actual CxxSInt16Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16Ptr : CxxSInt16ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstRef {
  protected Data ptr; // actual CxxSInt16Ptr
  protected SInt16 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16Ref : CxxSInt16ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16Ptr] EDK[CxxSInt16MutablePtr] LIB[int16_t *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16PtrConstPtr permits CxxSInt16PtrConstRef {
  protected Data ptr; // actual CxxSInt16PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16PtrPtr : CxxSInt16PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16PtrConstRef {
  protected Data ptr; // actual CxxSInt16PtrPtr
  protected CxxSInt16Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16PtrRef : CxxSInt16PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16ConstPtr] EDK[CxxSInt16ConstPtr] LIB[int16_t const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtrConstPtr permits CxxSInt16ConstPtrConstRef {
  protected Data ptr; // actual CxxSInt16ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtrPtr : CxxSInt16ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtrConstRef {
  protected Data ptr; // actual CxxSInt16ConstPtrPtr
  protected CxxSInt16ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16ConstPtrRef : CxxSInt16ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxSInt16StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxSInt16StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxSInt16StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxSInt16StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtr permits CxxSInt16StdVectorConstRef {
  protected Data ptr; // actual CxxSInt16StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtr : CxxSInt16StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstRef {
  protected Data ptr; // actual CxxSInt16StdVectorPtr
  protected CxxSInt16StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorRef : CxxSInt16StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVectorPtr] EDK[CxxSInt16StdVectorMutablePtr] LIB[std::vector< short > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtrConstPtr permits CxxSInt16StdVectorPtrConstRef {
  protected Data ptr; // actual CxxSInt16StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtrPtr : CxxSInt16StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtrConstRef {
  protected Data ptr; // actual CxxSInt16StdVectorPtrPtr
  protected CxxSInt16StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorPtrRef : CxxSInt16StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVectorConstPtr] EDK[CxxSInt16StdVectorConstPtr] LIB[std::vector< short > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtrConstPtr permits CxxSInt16StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxSInt16StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtrPtr : CxxSInt16StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxSInt16StdVectorConstPtrPtr
  protected CxxSInt16StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt16StdVectorConstPtrRef : CxxSInt16StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt16StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_UInt16() {
  return UInt16().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtr permits CxxUInt16ConstRef {
  protected Data ptr; // actual CxxUInt16Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16Ptr : CxxUInt16ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstRef {
  protected Data ptr; // actual CxxUInt16Ptr
  protected UInt16 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16Ref : CxxUInt16ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16Ptr] EDK[CxxUInt16MutablePtr] LIB[uint16_t *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16PtrConstPtr permits CxxUInt16PtrConstRef {
  protected Data ptr; // actual CxxUInt16PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16PtrPtr : CxxUInt16PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16PtrConstRef {
  protected Data ptr; // actual CxxUInt16PtrPtr
  protected CxxUInt16Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16PtrRef : CxxUInt16PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16ConstPtr] EDK[CxxUInt16ConstPtr] LIB[uint16_t const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtrConstPtr permits CxxUInt16ConstPtrConstRef {
  protected Data ptr; // actual CxxUInt16ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtrPtr : CxxUInt16ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtrConstRef {
  protected Data ptr; // actual CxxUInt16ConstPtrPtr
  protected CxxUInt16ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16ConstPtrRef : CxxUInt16ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxUInt16StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxUInt16StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxUInt16StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxUInt16StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtr permits CxxUInt16StdVectorConstRef {
  protected Data ptr; // actual CxxUInt16StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtr : CxxUInt16StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstRef {
  protected Data ptr; // actual CxxUInt16StdVectorPtr
  protected CxxUInt16StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorRef : CxxUInt16StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVectorPtr] EDK[CxxUInt16StdVectorMutablePtr] LIB[std::vector< unsigned short > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtrConstPtr permits CxxUInt16StdVectorPtrConstRef {
  protected Data ptr; // actual CxxUInt16StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtrPtr : CxxUInt16StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtrConstRef {
  protected Data ptr; // actual CxxUInt16StdVectorPtrPtr
  protected CxxUInt16StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorPtrRef : CxxUInt16StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVectorConstPtr] EDK[CxxUInt16StdVectorConstPtr] LIB[std::vector< unsigned short > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtrConstPtr permits CxxUInt16StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxUInt16StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtrPtr : CxxUInt16StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxUInt16StdVectorConstPtrPtr
  protected CxxUInt16StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt16StdVectorConstPtrRef : CxxUInt16StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt16StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_SInt32() {
  return SInt32().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtr permits CxxSInt32ConstRef {
  protected Data ptr; // actual CxxSInt32Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32Ptr : CxxSInt32ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstRef {
  protected Data ptr; // actual CxxSInt32Ptr
  protected SInt32 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32Ref : CxxSInt32ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32Ptr] EDK[CxxSInt32MutablePtr] LIB[int32_t *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32PtrConstPtr permits CxxSInt32PtrConstRef {
  protected Data ptr; // actual CxxSInt32PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32PtrPtr : CxxSInt32PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32PtrConstRef {
  protected Data ptr; // actual CxxSInt32PtrPtr
  protected CxxSInt32Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32PtrRef : CxxSInt32PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32ConstPtr] EDK[CxxSInt32ConstPtr] LIB[int32_t const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtrConstPtr permits CxxSInt32ConstPtrConstRef {
  protected Data ptr; // actual CxxSInt32ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtrPtr : CxxSInt32ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtrConstRef {
  protected Data ptr; // actual CxxSInt32ConstPtrPtr
  protected CxxSInt32ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32ConstPtrRef : CxxSInt32ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxSInt32StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxSInt32StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxSInt32StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxSInt32StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtr permits CxxSInt32StdVectorConstRef {
  protected Data ptr; // actual CxxSInt32StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtr : CxxSInt32StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstRef {
  protected Data ptr; // actual CxxSInt32StdVectorPtr
  protected CxxSInt32StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorRef : CxxSInt32StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVectorPtr] EDK[CxxSInt32StdVectorMutablePtr] LIB[std::vector< int > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtrConstPtr permits CxxSInt32StdVectorPtrConstRef {
  protected Data ptr; // actual CxxSInt32StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtrPtr : CxxSInt32StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtrConstRef {
  protected Data ptr; // actual CxxSInt32StdVectorPtrPtr
  protected CxxSInt32StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorPtrRef : CxxSInt32StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVectorConstPtr] EDK[CxxSInt32StdVectorConstPtr] LIB[std::vector< int > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtrConstPtr permits CxxSInt32StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxSInt32StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtrPtr : CxxSInt32StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxSInt32StdVectorConstPtrPtr
  protected CxxSInt32StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt32StdVectorConstPtrRef : CxxSInt32StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt32StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_UInt32() {
  return UInt32().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtr permits CxxUInt32ConstRef {
  protected Data ptr; // actual CxxUInt32Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32Ptr : CxxUInt32ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstRef {
  protected Data ptr; // actual CxxUInt32Ptr
  protected UInt32 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32Ref : CxxUInt32ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32Ptr] EDK[CxxUInt32MutablePtr] LIB[uint32_t *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32PtrConstPtr permits CxxUInt32PtrConstRef {
  protected Data ptr; // actual CxxUInt32PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32PtrPtr : CxxUInt32PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32PtrConstRef {
  protected Data ptr; // actual CxxUInt32PtrPtr
  protected CxxUInt32Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32PtrRef : CxxUInt32PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32ConstPtr] EDK[CxxUInt32ConstPtr] LIB[uint32_t const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtrConstPtr permits CxxUInt32ConstPtrConstRef {
  protected Data ptr; // actual CxxUInt32ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtrPtr : CxxUInt32ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtrConstRef {
  protected Data ptr; // actual CxxUInt32ConstPtrPtr
  protected CxxUInt32ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32ConstPtrRef : CxxUInt32ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxUInt32StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxUInt32StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxUInt32StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxUInt32StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtr permits CxxUInt32StdVectorConstRef {
  protected Data ptr; // actual CxxUInt32StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtr : CxxUInt32StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstRef {
  protected Data ptr; // actual CxxUInt32StdVectorPtr
  protected CxxUInt32StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorRef : CxxUInt32StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVectorPtr] EDK[CxxUInt32StdVectorMutablePtr] LIB[std::vector< unsigned int > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtrConstPtr permits CxxUInt32StdVectorPtrConstRef {
  protected Data ptr; // actual CxxUInt32StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtrPtr : CxxUInt32StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtrConstRef {
  protected Data ptr; // actual CxxUInt32StdVectorPtrPtr
  protected CxxUInt32StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorPtrRef : CxxUInt32StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVectorConstPtr] EDK[CxxUInt32StdVectorConstPtr] LIB[std::vector< unsigned int > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtrConstPtr permits CxxUInt32StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxUInt32StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtrPtr : CxxUInt32StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxUInt32StdVectorConstPtrPtr
  protected CxxUInt32StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt32StdVectorConstPtrRef : CxxUInt32StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt32StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[long long]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_SInt64() {
  return SInt64().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[long long]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtr permits CxxSInt64ConstRef {
  protected Data ptr; // actual CxxSInt64Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64Ptr : CxxSInt64ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstRef {
  protected Data ptr; // actual CxxSInt64Ptr
  protected SInt64 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64Ref : CxxSInt64ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64Ptr] EDK[CxxSInt64MutablePtr] LIB[long long *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64PtrConstPtr permits CxxSInt64PtrConstRef {
  protected Data ptr; // actual CxxSInt64PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64PtrPtr : CxxSInt64PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64PtrConstRef {
  protected Data ptr; // actual CxxSInt64PtrPtr
  protected CxxSInt64Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64PtrRef : CxxSInt64PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64ConstPtr] EDK[CxxSInt64ConstPtr] LIB[long long const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtrConstPtr permits CxxSInt64ConstPtrConstRef {
  protected Data ptr; // actual CxxSInt64ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtrPtr : CxxSInt64ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtrConstRef {
  protected Data ptr; // actual CxxSInt64ConstPtrPtr
  protected CxxSInt64ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64ConstPtrRef : CxxSInt64ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxSInt64StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxSInt64StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxSInt64StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxSInt64StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtr permits CxxSInt64StdVectorConstRef {
  protected Data ptr; // actual CxxSInt64StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtr : CxxSInt64StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstRef {
  protected Data ptr; // actual CxxSInt64StdVectorPtr
  protected CxxSInt64StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorRef : CxxSInt64StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVectorPtr] EDK[CxxSInt64StdVectorMutablePtr] LIB[std::vector< long long > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtrConstPtr permits CxxSInt64StdVectorPtrConstRef {
  protected Data ptr; // actual CxxSInt64StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtrPtr : CxxSInt64StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtrConstRef {
  protected Data ptr; // actual CxxSInt64StdVectorPtrPtr
  protected CxxSInt64StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorPtrRef : CxxSInt64StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVectorConstPtr] EDK[CxxSInt64StdVectorConstPtr] LIB[std::vector< long long > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtrConstPtr permits CxxSInt64StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxSInt64StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtrPtr : CxxSInt64StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxSInt64StdVectorConstPtrPtr
  protected CxxSInt64StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxSInt64StdVectorConstPtrRef : CxxSInt64StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxSInt64StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[int64_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[unsigned long long]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[unsigned long long]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtr permits CxxUInt64ConstRef {
  protected Data ptr; // actual CxxUInt64Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64Ptr : CxxUInt64ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstRef {
  protected Data ptr; // actual CxxUInt64Ptr
  protected UInt64 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64Ref : CxxUInt64ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64Ptr] EDK[CxxUInt64MutablePtr] LIB[unsigned long long *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64PtrConstPtr permits CxxUInt64PtrConstRef {
  protected Data ptr; // actual CxxUInt64PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64PtrPtr : CxxUInt64PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64PtrConstRef {
  protected Data ptr; // actual CxxUInt64PtrPtr
  protected CxxUInt64Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64PtrRef : CxxUInt64PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64ConstPtr] EDK[CxxUInt64ConstPtr] LIB[unsigned long long const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtrConstPtr permits CxxUInt64ConstPtrConstRef {
  protected Data ptr; // actual CxxUInt64ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtrPtr : CxxUInt64ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtrConstRef {
  protected Data ptr; // actual CxxUInt64ConstPtrPtr
  protected CxxUInt64ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64ConstPtrRef : CxxUInt64ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxUInt64StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxUInt64StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxUInt64StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxUInt64StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtr permits CxxUInt64StdVectorConstRef {
  protected Data ptr; // actual CxxUInt64StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtr : CxxUInt64StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstRef {
  protected Data ptr; // actual CxxUInt64StdVectorPtr
  protected CxxUInt64StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorRef : CxxUInt64StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVectorPtr] EDK[CxxUInt64StdVectorMutablePtr] LIB[std::vector< unsigned long long > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtrConstPtr permits CxxUInt64StdVectorPtrConstRef {
  protected Data ptr; // actual CxxUInt64StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtrPtr : CxxUInt64StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtrConstRef {
  protected Data ptr; // actual CxxUInt64StdVectorPtrPtr
  protected CxxUInt64StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorPtrRef : CxxUInt64StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVectorConstPtr] EDK[CxxUInt64StdVectorConstPtr] LIB[std::vector< unsigned long long > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtrConstPtr permits CxxUInt64StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxUInt64StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtrPtr : CxxUInt64StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxUInt64StdVectorConstPtrPtr
  protected CxxUInt64StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxUInt64StdVectorConstPtrRef : CxxUInt64StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxUInt64StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[uint64_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[ptrdiff_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[intptr_t]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_Float32() {
  return Float32().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtr permits CxxFloat32ConstRef {
  protected Data ptr; // actual CxxFloat32Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32Ptr : CxxFloat32ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstRef {
  protected Data ptr; // actual CxxFloat32Ptr
  protected Float32 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32Ref : CxxFloat32ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32Ptr] EDK[CxxFloat32MutablePtr] LIB[float *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32PtrConstPtr permits CxxFloat32PtrConstRef {
  protected Data ptr; // actual CxxFloat32PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32PtrPtr : CxxFloat32PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32PtrConstRef {
  protected Data ptr; // actual CxxFloat32PtrPtr
  protected CxxFloat32Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32PtrRef : CxxFloat32PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32ConstPtr] EDK[CxxFloat32ConstPtr] LIB[float const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtrConstPtr permits CxxFloat32ConstPtrConstRef {
  protected Data ptr; // actual CxxFloat32ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtrPtr : CxxFloat32ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtrConstRef {
  protected Data ptr; // actual CxxFloat32ConstPtrPtr
  protected CxxFloat32ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32ConstPtrRef : CxxFloat32ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxFloat32StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxFloat32StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxFloat32StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxFloat32StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtr permits CxxFloat32StdVectorConstRef {
  protected Data ptr; // actual CxxFloat32StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtr : CxxFloat32StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstRef {
  protected Data ptr; // actual CxxFloat32StdVectorPtr
  protected CxxFloat32StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorRef : CxxFloat32StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVectorPtr] EDK[CxxFloat32StdVectorMutablePtr] LIB[std::vector< float > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtrConstPtr permits CxxFloat32StdVectorPtrConstRef {
  protected Data ptr; // actual CxxFloat32StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtrPtr : CxxFloat32StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtrConstRef {
  protected Data ptr; // actual CxxFloat32StdVectorPtrPtr
  protected CxxFloat32StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorPtrRef : CxxFloat32StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVectorConstPtr] EDK[CxxFloat32StdVectorConstPtr] LIB[std::vector< float > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtrConstPtr permits CxxFloat32StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxFloat32StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtrPtr : CxxFloat32StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxFloat32StdVectorConstPtrPtr
  protected CxxFloat32StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat32StdVectorConstPtrRef : CxxFloat32StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat32StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_Float64() {
  return Float64().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtr permits CxxFloat64ConstRef {
  protected Data ptr; // actual CxxFloat64Ptr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64ConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64Ptr : CxxFloat64ConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64MutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstRef {
  protected Data ptr; // actual CxxFloat64Ptr
  protected Float64 values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64ConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64Ref : CxxFloat64ConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64MutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64Ptr] EDK[CxxFloat64MutablePtr] LIB[double *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64PtrConstPtr permits CxxFloat64PtrConstRef {
  protected Data ptr; // actual CxxFloat64PtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64PtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64PtrPtr : CxxFloat64PtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64PtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64PtrConstRef {
  protected Data ptr; // actual CxxFloat64PtrPtr
  protected CxxFloat64Ptr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64PtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64PtrRef : CxxFloat64PtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64PtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64ConstPtr] EDK[CxxFloat64ConstPtr] LIB[double const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtrConstPtr permits CxxFloat64ConstPtrConstRef {
  protected Data ptr; // actual CxxFloat64ConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64ConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtrPtr : CxxFloat64ConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64ConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtrConstRef {
  protected Data ptr; // actual CxxFloat64ConstPtrPtr
  protected CxxFloat64ConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64ConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64ConstPtrRef : CxxFloat64ConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64ConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxFloat64StdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxFloat64StdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxFloat64StdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxFloat64StdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtr permits CxxFloat64StdVectorConstRef {
  protected Data ptr; // actual CxxFloat64StdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtr : CxxFloat64StdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstRef {
  protected Data ptr; // actual CxxFloat64StdVectorPtr
  protected CxxFloat64StdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorRef : CxxFloat64StdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVectorPtr] EDK[CxxFloat64StdVectorMutablePtr] LIB[std::vector< double > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtrConstPtr permits CxxFloat64StdVectorPtrConstRef {
  protected Data ptr; // actual CxxFloat64StdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtrPtr : CxxFloat64StdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtrConstRef {
  protected Data ptr; // actual CxxFloat64StdVectorPtrPtr
  protected CxxFloat64StdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorPtrRef : CxxFloat64StdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVectorConstPtr] EDK[CxxFloat64StdVectorConstPtr] LIB[std::vector< double > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtrConstPtr permits CxxFloat64StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxFloat64StdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtrPtr : CxxFloat64StdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxFloat64StdVectorConstPtrPtr
  protected CxxFloat64StdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxFloat64StdVectorConstPtrRef : CxxFloat64StdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxFloat64StdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxStdString
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxStdString.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxStdString()
  = "__CxxSize_Fabric_EDK_KL_CxxStdString";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtr permits CxxStdStringConstRef {
  protected Data ptr; // actual CxxStdStringPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtr : CxxStdStringConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstRef {
  protected Data ptr; // actual CxxStdStringPtr
  protected CxxStdString values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringRef : CxxStdStringConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringPtr] EDK[CxxStdStringMutablePtr] LIB[std::string *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtrConstPtr permits CxxStdStringPtrConstRef {
  protected Data ptr; // actual CxxStdStringPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtrPtr : CxxStdStringPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtrConstRef {
  protected Data ptr; // actual CxxStdStringPtrPtr
  protected CxxStdStringPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringPtrRef : CxxStdStringPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringConstPtr] EDK[CxxStdStringConstPtr] LIB[std::string const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtrConstPtr permits CxxStdStringConstPtrConstRef {
  protected Data ptr; // actual CxxStdStringConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtrPtr : CxxStdStringConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtrConstRef {
  protected Data ptr; // actual CxxStdStringConstPtrPtr
  protected CxxStdStringConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringConstPtrRef : CxxStdStringConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxStdStringStdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxStdStringStdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxStdStringStdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxStdStringStdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtr permits CxxStdStringStdVectorConstRef {
  protected Data ptr; // actual CxxStdStringStdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtr : CxxStdStringStdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstRef {
  protected Data ptr; // actual CxxStdStringStdVectorPtr
  protected CxxStdStringStdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorRef : CxxStdStringStdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVectorPtr] EDK[CxxStdStringStdVectorMutablePtr] LIB[std::vector< std::string > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtrConstPtr permits CxxStdStringStdVectorPtrConstRef {
  protected Data ptr; // actual CxxStdStringStdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtrPtr : CxxStdStringStdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtrConstRef {
  protected Data ptr; // actual CxxStdStringStdVectorPtrPtr
  protected CxxStdStringStdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorPtrRef : CxxStdStringStdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVectorConstPtr] EDK[CxxStdStringStdVectorConstPtr] LIB[std::vector< std::string > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtrConstPtr permits CxxStdStringStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxStdStringStdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtrPtr : CxxStdStringStdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxStdStringStdVectorConstPtrPtr
  protected CxxStdStringStdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxStdStringStdVectorConstPtrRef : CxxStdStringStdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxStdStringStdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrPtr] EDK[CxxCharConstPtrMutablePtr] LIB[char const * *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtrConstPtr permits CxxCharConstPtrPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtrPtr : CxxCharConstPtrPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrPtrPtr
  protected CxxCharConstPtrPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrPtrRef : CxxCharConstPtrPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrConstPtr] EDK[CxxCharConstPtrConstPtr] LIB[char const * const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtrConstPtr permits CxxCharConstPtrConstPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtrPtr : CxxCharConstPtrConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrConstPtrPtr
  protected CxxCharConstPtrConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrConstPtrRef : CxxCharConstPtrConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxCharConstPtrStdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxCharConstPtrStdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxCharConstPtrStdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxCharConstPtrStdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtr permits CxxCharConstPtrStdVectorConstRef {
  protected Data ptr; // actual CxxCharConstPtrStdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtr : CxxCharConstPtrStdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstRef {
  protected Data ptr; // actual CxxCharConstPtrStdVectorPtr
  protected CxxCharConstPtrStdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorRef : CxxCharConstPtrStdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVectorPtr] EDK[CxxCharConstPtrStdVectorMutablePtr] LIB[std::vector< char const * > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtrConstPtr permits CxxCharConstPtrStdVectorPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrStdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtrPtr : CxxCharConstPtrStdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrStdVectorPtrPtr
  protected CxxCharConstPtrStdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorPtrRef : CxxCharConstPtrStdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVectorConstPtr] EDK[CxxCharConstPtrStdVectorConstPtr] LIB[std::vector< char const * > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtrConstPtr permits CxxCharConstPtrStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrStdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtrPtr : CxxCharConstPtrStdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxCharConstPtrStdVectorConstPtrPtr
  protected CxxCharConstPtrStdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharConstPtrStdVectorConstPtrRef : CxxCharConstPtrStdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharConstPtrStdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrPtr] EDK[CxxCharPtrMutablePtr] LIB[char * *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtrConstPtr permits CxxCharPtrPtrConstRef {
  protected Data ptr; // actual CxxCharPtrPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtrPtr : CxxCharPtrPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtrConstRef {
  protected Data ptr; // actual CxxCharPtrPtrPtr
  protected CxxCharPtrPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrPtrRef : CxxCharPtrPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrConstPtr] EDK[CxxCharPtrConstPtr] LIB[char * const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtrConstPtr permits CxxCharPtrConstPtrConstRef {
  protected Data ptr; // actual CxxCharPtrConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtrPtr : CxxCharPtrConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtrConstRef {
  protected Data ptr; // actual CxxCharPtrConstPtrPtr
  protected CxxCharPtrConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrConstPtrRef : CxxCharPtrConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxCharPtrStdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxCharPtrStdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxCharPtrStdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxCharPtrStdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtr permits CxxCharPtrStdVectorConstRef {
  protected Data ptr; // actual CxxCharPtrStdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtr : CxxCharPtrStdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstRef {
  protected Data ptr; // actual CxxCharPtrStdVectorPtr
  protected CxxCharPtrStdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorRef : CxxCharPtrStdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVectorPtr] EDK[CxxCharPtrStdVectorMutablePtr] LIB[std::vector< char * > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtrConstPtr permits CxxCharPtrStdVectorPtrConstRef {
  protected Data ptr; // actual CxxCharPtrStdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtrPtr : CxxCharPtrStdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtrConstRef {
  protected Data ptr; // actual CxxCharPtrStdVectorPtrPtr
  protected CxxCharPtrStdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorPtrRef : CxxCharPtrStdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVectorConstPtr] EDK[CxxCharPtrStdVectorConstPtr] LIB[std::vector< char * > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtrConstPtr permits CxxCharPtrStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxCharPtrStdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtrPtr : CxxCharPtrStdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxCharPtrStdVectorConstPtrPtr
  protected CxxCharPtrStdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxCharPtrStdVectorConstPtrRef : CxxCharPtrStdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxCharPtrStdVectorConstPtrMutableRef() {
  return Data().dataSize();
}



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Data] EDK[Fabric::EDK::KL::Data] LIB[void *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtr permits CxxDataConstRef {
  protected Data ptr; // actual CxxDataPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataPtr : CxxDataConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataConstRef {
  protected Data ptr; // actual CxxDataPtr
  protected Data values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataRef : CxxDataConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataPtr] EDK[CxxDataMutablePtr] LIB[void * *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataPtrConstPtr permits CxxDataPtrConstRef {
  protected Data ptr; // actual CxxDataPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataPtrPtr : CxxDataPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataPtrConstRef {
  protected Data ptr; // actual CxxDataPtrPtr
  protected CxxDataPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataPtrRef : CxxDataPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataConstPtr] EDK[CxxDataConstPtr] LIB[void * const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtrConstPtr permits CxxDataConstPtrConstRef {
  protected Data ptr; // actual CxxDataConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtrPtr : CxxDataConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtrConstRef {
  protected Data ptr; // actual CxxDataConstPtrPtr
  protected CxxDataConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataConstPtrRef : CxxDataConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
struct CxxDataStdVector
{
  protected Data cpp_ptr;
};

/// \dfgPresetOmit
/// \internal
Data CxxDataStdVector.__getUnderlyingPtr() {
  return this.cpp_ptr;
}

/// \dfgPresetOmit
/// \internal
UInt64 __CxxSize_Fabric_EDK_KL_CxxDataStdVector()
  = "__CxxSize_Fabric_EDK_KL_CxxDataStdVector";


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtr permits CxxDataStdVectorConstRef {
  protected Data ptr; // actual CxxDataStdVectorPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtr : CxxDataStdVectorConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstRef {
  protected Data ptr; // actual CxxDataStdVectorPtr
  protected CxxDataStdVector values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorRef : CxxDataStdVectorConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVectorPtr] EDK[CxxDataStdVectorMutablePtr] LIB[std::vector< void * > *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtrConstPtr permits CxxDataStdVectorPtrConstRef {
  protected Data ptr; // actual CxxDataStdVectorPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtrPtr : CxxDataStdVectorPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtrConstRef {
  protected Data ptr; // actual CxxDataStdVectorPtrPtr
  protected CxxDataStdVectorPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorPtrRef : CxxDataStdVectorPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVectorConstPtr] EDK[CxxDataStdVectorConstPtr] LIB[std::vector< void * > const *]
// Definitions
//
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtrConstPtr permits CxxDataStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxDataStdVectorConstPtrPtr
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorConstPtrConstPtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtrPtr : CxxDataStdVectorConstPtrConstPtr {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorConstPtrMutablePtr() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtrConstRef {
  protected Data ptr; // actual CxxDataStdVectorConstPtrPtr
  protected CxxDataStdVectorConstPtr values[];
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorConstPtrConstRef() {
  return Data().dataSize();
}

/// \dfgPresetOmit
/// \internal
struct CxxDataStdVectorConstPtrRef : CxxDataStdVectorConstPtrConstRef {
};

/// \dfgPresetOmit
/// \internal
inline UInt64 __CxxSize_CxxDataStdVectorConstPtrMutableRef() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Boolean] EDK[Fabric::EDK::KL::Boolean] LIB[bool]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Boolean] EDK[Fabric::EDK::KL::Boolean] LIB[bool]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxBooleanConstPtr
// CxxBooleanPtr
// CxxBooleanConstRef
// CxxBooleanRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtr(Boolean array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtr(Boolean array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Boolean());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanConstPtr permits CxxBooleanConstPtr {
  private Data ptr;
  private Boolean value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtr(Boolean value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtr(io Boolean value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtr(Make_CxxBooleanConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtr(Boolean array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtr(Boolean array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Boolean());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanPtr permits CxxBooleanPtr {
  private Data ptr;
  private Boolean value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtr(Boolean value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtr(io Boolean value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtr(Make_CxxBooleanPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef(Boolean array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef(Boolean array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Boolean());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanConstRef permits CxxBooleanConstRef {
  private Data ptr;
  private Boolean value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstRef(Boolean value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstRef(io Boolean value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef(Make_CxxBooleanConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanRef(Boolean array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanRef(Boolean array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Boolean());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanRef permits CxxBooleanRef {
  private Data ptr;
  private Boolean value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanRef(Boolean value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanRef(io Boolean value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanRef(Make_CxxBooleanRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxBooleanConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxBooleanConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxBooleanConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef CxxBooleanConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanConstPtr.cxx_getAt on null CxxBooleanConstPtr";
  return CxxBooleanConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Boolean()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef CxxBooleanConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxBooleanConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanRef CxxBooleanPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanPtr.cxx_getAt on null CxxBooleanPtr";
  return CxxBooleanRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Boolean()));
}

/// Same as for CxxBooleanConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanRef CxxBooleanPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxBooleanPtr.cxx_setAt(Index i, Boolean v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanPtr.cxx_setAt on null CxxBooleanPtr";
  this.ptr.offset(i)->{ Boolean } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef(CxxBooleanConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef.=(CxxBooleanConstRef that) {
  this.ptr = that.ptr;
}

/// Get the Boolean value
/// \dfgPresetOmit
/// \internal
Boolean CxxBooleanConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanConstRef.cxx_get on null CxxBooleanConstRef";
  return this.ptr->{ Boolean };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxBooleanRef.cxx_set(Boolean value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanRef.cxx_set on null CxxBooleanRef";
  this.ptr->{ Boolean } = value;
}

/// Assignment of Boolean
/// \dfgPresetOmit
/// \internal
CxxBooleanRef.=(Boolean value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanPtr] EDK[CxxBooleanMutablePtr] LIB[bool *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxBooleanPtrConstPtr
// CxxBooleanPtrPtr
// CxxBooleanPtrConstRef
// CxxBooleanPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstPtr(CxxBooleanPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstPtr(CxxBooleanPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanPtrConstPtr permits CxxBooleanPtrConstPtr {
  private Data ptr;
  private CxxBooleanPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtrConstPtr(CxxBooleanPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtrConstPtr(io CxxBooleanPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstPtr(Make_CxxBooleanPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrPtr(CxxBooleanPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrPtr(CxxBooleanPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanPtrPtr permits CxxBooleanPtrPtr {
  private Data ptr;
  private CxxBooleanPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtrPtr(CxxBooleanPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtrPtr(io CxxBooleanPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrPtr(Make_CxxBooleanPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef(CxxBooleanPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef(CxxBooleanPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanPtrConstRef permits CxxBooleanPtrConstRef {
  private Data ptr;
  private CxxBooleanPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtrConstRef(CxxBooleanPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtrConstRef(io CxxBooleanPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef(Make_CxxBooleanPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef(CxxBooleanPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef(CxxBooleanPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanPtrRef permits CxxBooleanPtrRef {
  private Data ptr;
  private CxxBooleanPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtrRef(CxxBooleanPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanPtrRef(io CxxBooleanPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef(Make_CxxBooleanPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxBooleanPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxBooleanPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxBooleanPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef CxxBooleanPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanPtrConstPtr.cxx_getAt on null CxxBooleanPtrConstPtr";
  return CxxBooleanPtrConstRef(this.ptr.offset(index * __CxxSize_CxxBooleanMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef CxxBooleanPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxBooleanPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef CxxBooleanPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanPtrPtr.cxx_getAt on null CxxBooleanPtrPtr";
  return CxxBooleanPtrRef(this.ptr.offset(index * __CxxSize_CxxBooleanMutablePtr()));
}

/// Same as for CxxBooleanPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef CxxBooleanPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrPtr.cxx_setAt(Index i, CxxBooleanPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanPtrPtr.cxx_setAt on null CxxBooleanPtrPtr";
  this.ptr.offset(i)->{ CxxBooleanPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef(CxxBooleanPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef.=(CxxBooleanPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxBooleanPtr value
/// \dfgPresetOmit
/// \internal
CxxBooleanPtr CxxBooleanPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanPtrConstRef.cxx_get on null CxxBooleanPtrConstRef";
  return this.ptr->{ CxxBooleanPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxBooleanPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef.cxx_set(CxxBooleanPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanPtrRef.cxx_set on null CxxBooleanPtrRef";
  this.ptr->{ CxxBooleanPtr } = value;
}

/// Assignment of CxxBooleanPtr
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef.=(CxxBooleanPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanConstPtr] EDK[CxxBooleanConstPtr] LIB[bool const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxBooleanConstPtrConstPtr
// CxxBooleanConstPtrPtr
// CxxBooleanConstPtrConstRef
// CxxBooleanConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstPtr(CxxBooleanConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstPtr(CxxBooleanConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanConstPtrConstPtr permits CxxBooleanConstPtrConstPtr {
  private Data ptr;
  private CxxBooleanConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtrConstPtr(CxxBooleanConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtrConstPtr(io CxxBooleanConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstPtr(Make_CxxBooleanConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrPtr(CxxBooleanConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrPtr(CxxBooleanConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanConstPtrPtr permits CxxBooleanConstPtrPtr {
  private Data ptr;
  private CxxBooleanConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtrPtr(CxxBooleanConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtrPtr(io CxxBooleanConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrPtr(Make_CxxBooleanConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef(CxxBooleanConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef(CxxBooleanConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanConstPtrConstRef permits CxxBooleanConstPtrConstRef {
  private Data ptr;
  private CxxBooleanConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtrConstRef(CxxBooleanConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtrConstRef(io CxxBooleanConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef(Make_CxxBooleanConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef(CxxBooleanConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef(CxxBooleanConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxBooleanConstPtrRef permits CxxBooleanConstPtrRef {
  private Data ptr;
  private CxxBooleanConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtrRef(CxxBooleanConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxBooleanConstPtrRef(io CxxBooleanConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef(Make_CxxBooleanConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxBooleanConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxBooleanConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxBooleanConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef CxxBooleanConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanConstPtrConstPtr.cxx_getAt on null CxxBooleanConstPtrConstPtr";
  return CxxBooleanConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxBooleanConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef CxxBooleanConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxBooleanConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef CxxBooleanConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanConstPtrPtr.cxx_getAt on null CxxBooleanConstPtrPtr";
  return CxxBooleanConstPtrRef(this.ptr.offset(index * __CxxSize_CxxBooleanConstPtr()));
}

/// Same as for CxxBooleanConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef CxxBooleanConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrPtr.cxx_setAt(Index i, CxxBooleanConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanConstPtrPtr.cxx_setAt on null CxxBooleanConstPtrPtr";
  this.ptr.offset(i)->{ CxxBooleanConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef(CxxBooleanConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef.=(CxxBooleanConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxBooleanConstPtr value
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtr CxxBooleanConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanConstPtrConstRef.cxx_get on null CxxBooleanConstPtrConstRef";
  return this.ptr->{ CxxBooleanConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxBooleanConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef.cxx_set(CxxBooleanConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanConstPtrRef.cxx_set on null CxxBooleanConstPtrRef";
  this.ptr->{ CxxBooleanConstPtr } = value;
}

/// Assignment of CxxBooleanConstPtr
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef.=(CxxBooleanConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[size_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector(
    CxxBooleanStdVector that
    ) = "Kludge__CxxBooleanStdVector__MU__copy_ctor__d25f796cdaad619b37b8315268b86cf1";

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector.__ctor(
    ) = "Kludge__CxxBooleanStdVector__MU__ctor__63ba67f585c94f0c21ad2a3840884611";

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxBooleanStdVector__MU__ctor__58e068ed6d30761401b668331ad3f17d";

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector.__ctor(
    CxxBooleanConstPtr _arg0,
    CxxBooleanConstPtr _arg1
    ) = "Kludge__CxxBooleanStdVector__MU__ctor__0386e113e3f02890f8eec86194312c1b";

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector(
    CxxBooleanConstPtr _arg0,
    CxxBooleanConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector(
    in
    Boolean
    _arg0
    
    ,
    in
    Boolean
    _arg1
    
    
    ) {
    
    CxxBooleanConstPtr _arg0__cxx = Make_CxxBooleanConstPtr(_arg0);
    
    CxxBooleanConstPtr _arg1__cxx = Make_CxxBooleanConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxBooleanStdVector() = "Kludge__CxxBooleanStdVector__MU__dtor__f724f259cddede727061fa06ba424941";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVector.cxx_size?(
    )
 = "Kludge__CxxBooleanStdVector__CO__meth_size__d8d66ff3f6b118aa47c86445671b2fee";

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxBooleanStdVector__MU__meth_reserve__bcb45e555f4240e677fe5f41b7ea9e3c";

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVector.cxx_push_back!(
    Boolean _arg0
    )
 = "Kludge__CxxBooleanStdVector__MU__meth_push_back__44513c37e85d82c86ca988a27ce8212d";

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVector.cxx_pop_back!(
    )
 = "Kludge__CxxBooleanStdVector__MU__meth_pop_back__33a3b1c62aaaf8b00b0dd4da4ae2c318";

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVector.push_back!(
    in
    Boolean
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxBooleanStdVector.=(
    CxxBooleanStdVector that
    ) = "Kludge__CxxBooleanStdVector__MU__simple_ass_op__ee5e195033f9c2eac38ed6bddc72012d";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxBooleanStdVector__CO__get_ind_op__6cb3781635e1d19ade5664cea0778d7a";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanStdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxBooleanConstRef value
    )
  = "Kludge__CxxBooleanStdVector__MU__set_ind_op__c112d09f8fc41958c5ca3800ba69cc65";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector(Boolean array<>) {
  this = CxxBooleanStdVector(
    CxxBooleanConstPtr(array, 0),
    CxxBooleanConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector Make_CxxBooleanStdVector(Boolean array<>) {
  return CxxBooleanStdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline Boolean[] Make_BooleanVariableArray(CxxBooleanStdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  Boolean result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxBooleanConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector.appendDesc(io String string) {
  string += "CxxBooleanStdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVector] EDK[Fabric_EDK_KL_CxxBooleanStdVector] LIB[std::vector< bool >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtr] EDK[CxxBooleanStdVectorConstPtr] LIB[std::vector< bool > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtr] EDK[CxxBooleanStdVectorConstPtr] LIB[std::vector< bool > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtr.cxx_size on null CxxBooleanStdVectorConstPtr";
    return
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtr] EDK[CxxBooleanStdVectorConstPtr] LIB[std::vector< bool > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtr.cxx_getAtIndex on null CxxBooleanStdVectorConstPtr";
    return this.ptr.data()->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtr] EDK[CxxBooleanStdVectorMutablePtr] LIB[std::vector< bool > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtr] EDK[CxxBooleanStdVectorMutablePtr] LIB[std::vector< bool > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtr.cxx_size on null CxxBooleanStdVectorPtr";
    return
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtr.cxx_reserve on null CxxBooleanStdVectorPtr";
    
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtr.cxx_push_back!(
    Boolean _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtr.cxx_push_back on null CxxBooleanStdVectorPtr";
    
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtr.cxx_pop_back on null CxxBooleanStdVectorPtr";
    
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtr.push_back!(
    in
    Boolean
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtr] EDK[CxxBooleanStdVectorMutablePtr] LIB[std::vector< bool > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtr.cxx_getAtIndex on null CxxBooleanStdVectorPtr";
    return this.ptr.data()->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtr] EDK[CxxBooleanStdVectorMutablePtr] LIB[std::vector< bool > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanStdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxBooleanConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtr.cxx_setAtIndex on null CxxBooleanStdVectorPtr";
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstRef] EDK[CxxBooleanStdVectorConstRef] LIB[std::vector< bool > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstRef] EDK[CxxBooleanStdVectorConstRef] LIB[std::vector< bool > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstRef] EDK[CxxBooleanStdVectorConstRef] LIB[std::vector< bool > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstRef.cxx_size on null CxxBooleanStdVectorConstRef";
    return
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstRef] EDK[CxxBooleanStdVectorConstRef] LIB[std::vector< bool > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstRef.cxx_getAtIndex on null CxxBooleanStdVectorConstRef";
    return this.ptr.data()->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorRef] EDK[CxxBooleanStdVectorMutableRef] LIB[std::vector< bool > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorRef] EDK[CxxBooleanStdVectorMutableRef] LIB[std::vector< bool > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorRef.cxx_size on null CxxBooleanStdVectorRef";
    return
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorRef.cxx_reserve on null CxxBooleanStdVectorRef";
    
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorRef.cxx_push_back!(
    Boolean _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorRef.cxx_push_back on null CxxBooleanStdVectorRef";
    
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorRef.cxx_pop_back on null CxxBooleanStdVectorRef";
    
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorRef.push_back!(
    in
    Boolean
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorRef] EDK[CxxBooleanStdVectorMutableRef] LIB[std::vector< bool > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorRef.cxx_getAtIndex on null CxxBooleanStdVectorRef";
    return this.ptr.data()->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorRef] EDK[CxxBooleanStdVectorMutableRef] LIB[std::vector< bool > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanStdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxBooleanConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorRef.cxx_setAtIndex on null CxxBooleanStdVectorRef";
    this.ptr.data()->{ CxxBooleanStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxBooleanStdVectorConstPtr
// CxxBooleanStdVectorPtr
// CxxBooleanStdVectorConstRef
// CxxBooleanStdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtr(CxxBooleanStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtr(CxxBooleanStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxBooleanStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtr(CxxBooleanStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtr Make_CxxBooleanStdVectorConstPtr(CxxBooleanStdVector value) {
  return CxxBooleanStdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtr(CxxBooleanStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtr(CxxBooleanStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxBooleanStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtr(CxxBooleanStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtr Make_CxxBooleanStdVectorPtr(CxxBooleanStdVector value) {
  return CxxBooleanStdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef(CxxBooleanStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef(CxxBooleanStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxBooleanStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef(CxxBooleanStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef Make_CxxBooleanStdVectorConstRef(CxxBooleanStdVector value) {
  return CxxBooleanStdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef(CxxBooleanStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef(CxxBooleanStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxBooleanStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef(CxxBooleanStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef Make_CxxBooleanStdVectorRef(CxxBooleanStdVector value) {
  return CxxBooleanStdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxBooleanStdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxBooleanStdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxBooleanStdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef CxxBooleanStdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorConstPtr.cxx_getAt on null CxxBooleanStdVectorConstPtr";
  return CxxBooleanStdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxBooleanStdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef CxxBooleanStdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxBooleanStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef CxxBooleanStdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorPtr.cxx_getAt on null CxxBooleanStdVectorPtr";
  return CxxBooleanStdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxBooleanStdVector()));
}

/// Same as for CxxBooleanStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef CxxBooleanStdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtr.cxx_setAt(Index i, CxxBooleanStdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorPtr.cxx_setAt on null CxxBooleanStdVectorPtr";
  this.ptr.offset(i)->{ CxxBooleanStdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef(CxxBooleanStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef.=(CxxBooleanStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxBooleanStdVector value
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVector CxxBooleanStdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorConstRef.cxx_get on null CxxBooleanStdVectorConstRef";
  return this.ptr.data()->{ CxxBooleanStdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef.cxx_set(CxxBooleanStdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorRef.cxx_set on null CxxBooleanStdVectorRef";
  this.ptr.data()->{ CxxBooleanStdVector } = value;
}

/// Assignment of CxxBooleanStdVector
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef.=(CxxBooleanStdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVectorPtr] EDK[CxxBooleanStdVectorMutablePtr] LIB[std::vector< bool > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrConstPtr] EDK[CxxBooleanStdVectorPtrConstPtr] LIB[std::vector< bool > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrConstPtr] EDK[CxxBooleanStdVectorPtrConstPtr] LIB[std::vector< bool > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrConstPtr.cxx_size on null CxxBooleanStdVectorPtrConstPtr";
    return
    this.ptr->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrConstPtr] EDK[CxxBooleanStdVectorPtrConstPtr] LIB[std::vector< bool > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrConstPtr.cxx_getAtIndex on null CxxBooleanStdVectorPtrConstPtr";
    return this.ptr->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrPtr] EDK[CxxBooleanStdVectorPtrMutablePtr] LIB[std::vector< bool > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrPtr] EDK[CxxBooleanStdVectorPtrMutablePtr] LIB[std::vector< bool > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrPtr.cxx_size on null CxxBooleanStdVectorPtrPtr";
    return
    this.ptr->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrPtr.cxx_reserve on null CxxBooleanStdVectorPtrPtr";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrPtr.cxx_push_back!(
    Boolean _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrPtr.cxx_push_back on null CxxBooleanStdVectorPtrPtr";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrPtr.cxx_pop_back on null CxxBooleanStdVectorPtrPtr";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrPtr.push_back!(
    in
    Boolean
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrPtr] EDK[CxxBooleanStdVectorPtrMutablePtr] LIB[std::vector< bool > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrPtr.cxx_getAtIndex on null CxxBooleanStdVectorPtrPtr";
    return this.ptr->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrPtr] EDK[CxxBooleanStdVectorPtrMutablePtr] LIB[std::vector< bool > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanStdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxBooleanConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrPtr.cxx_setAtIndex on null CxxBooleanStdVectorPtrPtr";
    this.ptr->{ CxxBooleanStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrConstRef] EDK[CxxBooleanStdVectorPtrConstRef] LIB[std::vector< bool > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrConstRef] EDK[CxxBooleanStdVectorPtrConstRef] LIB[std::vector< bool > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrConstRef] EDK[CxxBooleanStdVectorPtrConstRef] LIB[std::vector< bool > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrConstRef.cxx_size on null CxxBooleanStdVectorPtrConstRef";
    return
    this.ptr->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrConstRef] EDK[CxxBooleanStdVectorPtrConstRef] LIB[std::vector< bool > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrConstRef.cxx_getAtIndex on null CxxBooleanStdVectorPtrConstRef";
    return this.ptr->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrRef] EDK[CxxBooleanStdVectorPtrMutableRef] LIB[std::vector< bool > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrRef] EDK[CxxBooleanStdVectorPtrMutableRef] LIB[std::vector< bool > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrRef.cxx_size on null CxxBooleanStdVectorPtrRef";
    return
    this.ptr->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrRef.cxx_reserve on null CxxBooleanStdVectorPtrRef";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrRef.cxx_push_back!(
    Boolean _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrRef.cxx_push_back on null CxxBooleanStdVectorPtrRef";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrRef.cxx_pop_back on null CxxBooleanStdVectorPtrRef";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorPtrRef.push_back!(
    in
    Boolean
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrRef] EDK[CxxBooleanStdVectorPtrMutableRef] LIB[std::vector< bool > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrRef.cxx_getAtIndex on null CxxBooleanStdVectorPtrRef";
    return this.ptr->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorPtrRef] EDK[CxxBooleanStdVectorPtrMutableRef] LIB[std::vector< bool > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanStdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxBooleanConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorPtrRef.cxx_setAtIndex on null CxxBooleanStdVectorPtrRef";
    this.ptr->{ CxxBooleanStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxBooleanStdVectorPtrConstPtr
// CxxBooleanStdVectorPtrPtr
// CxxBooleanStdVectorPtrConstRef
// CxxBooleanStdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstPtr(CxxBooleanStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstPtr(CxxBooleanStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstPtr(CxxBooleanStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstPtr Make_CxxBooleanStdVectorPtrConstPtr(CxxBooleanStdVectorPtr value) {
  return CxxBooleanStdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrPtr(CxxBooleanStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrPtr(CxxBooleanStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrPtr(CxxBooleanStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrPtr Make_CxxBooleanStdVectorPtrPtr(CxxBooleanStdVectorPtr value) {
  return CxxBooleanStdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef(CxxBooleanStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef(CxxBooleanStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef(CxxBooleanStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef Make_CxxBooleanStdVectorPtrConstRef(CxxBooleanStdVectorPtr value) {
  return CxxBooleanStdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef(CxxBooleanStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef(CxxBooleanStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef(CxxBooleanStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef Make_CxxBooleanStdVectorPtrRef(CxxBooleanStdVectorPtr value) {
  return CxxBooleanStdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxBooleanStdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxBooleanStdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxBooleanStdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef CxxBooleanStdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorPtrConstPtr.cxx_getAt on null CxxBooleanStdVectorPtrConstPtr";
  return CxxBooleanStdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxBooleanStdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef CxxBooleanStdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxBooleanStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef CxxBooleanStdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorPtrPtr.cxx_getAt on null CxxBooleanStdVectorPtrPtr";
  return CxxBooleanStdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxBooleanStdVectorMutablePtr()));
}

/// Same as for CxxBooleanStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef CxxBooleanStdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrPtr.cxx_setAt(Index i, CxxBooleanStdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorPtrPtr.cxx_setAt on null CxxBooleanStdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxBooleanStdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef(CxxBooleanStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef.=(CxxBooleanStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxBooleanStdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtr CxxBooleanStdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorPtrConstRef.cxx_get on null CxxBooleanStdVectorPtrConstRef";
  return this.ptr->{ CxxBooleanStdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef.cxx_set(CxxBooleanStdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorPtrRef.cxx_set on null CxxBooleanStdVectorPtrRef";
  this.ptr->{ CxxBooleanStdVectorPtr } = value;
}

/// Assignment of CxxBooleanStdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef.=(CxxBooleanStdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxBooleanStdVectorConstPtr] EDK[CxxBooleanStdVectorConstPtr] LIB[std::vector< bool > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrConstPtr] EDK[CxxBooleanStdVectorConstPtrConstPtr] LIB[std::vector< bool > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrConstPtr] EDK[CxxBooleanStdVectorConstPtrConstPtr] LIB[std::vector< bool > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrConstPtr.cxx_size on null CxxBooleanStdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrConstPtr] EDK[CxxBooleanStdVectorConstPtrConstPtr] LIB[std::vector< bool > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxBooleanStdVectorConstPtrConstPtr";
    return this.ptr->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrPtr] EDK[CxxBooleanStdVectorConstPtrMutablePtr] LIB[std::vector< bool > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrPtr] EDK[CxxBooleanStdVectorConstPtrMutablePtr] LIB[std::vector< bool > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrPtr.cxx_size on null CxxBooleanStdVectorConstPtrPtr";
    return
    this.ptr->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrPtr.cxx_reserve on null CxxBooleanStdVectorConstPtrPtr";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrPtr.cxx_push_back!(
    Boolean _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrPtr.cxx_push_back on null CxxBooleanStdVectorConstPtrPtr";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrPtr.cxx_pop_back on null CxxBooleanStdVectorConstPtrPtr";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrPtr.push_back!(
    in
    Boolean
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrPtr] EDK[CxxBooleanStdVectorConstPtrMutablePtr] LIB[std::vector< bool > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrPtr.cxx_getAtIndex on null CxxBooleanStdVectorConstPtrPtr";
    return this.ptr->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrPtr] EDK[CxxBooleanStdVectorConstPtrMutablePtr] LIB[std::vector< bool > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanStdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxBooleanConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrPtr.cxx_setAtIndex on null CxxBooleanStdVectorConstPtrPtr";
    this.ptr->{ CxxBooleanStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrConstRef] EDK[CxxBooleanStdVectorConstPtrConstRef] LIB[std::vector< bool > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrConstRef] EDK[CxxBooleanStdVectorConstPtrConstRef] LIB[std::vector< bool > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrConstRef] EDK[CxxBooleanStdVectorConstPtrConstRef] LIB[std::vector< bool > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrConstRef.cxx_size on null CxxBooleanStdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrConstRef] EDK[CxxBooleanStdVectorConstPtrConstRef] LIB[std::vector< bool > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrConstRef.cxx_getAtIndex on null CxxBooleanStdVectorConstPtrConstRef";
    return this.ptr->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrRef] EDK[CxxBooleanStdVectorConstPtrMutableRef] LIB[std::vector< bool > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrRef] EDK[CxxBooleanStdVectorConstPtrMutableRef] LIB[std::vector< bool > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrRef.cxx_size on null CxxBooleanStdVectorConstPtrRef";
    return
    this.ptr->{ CxxBooleanStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrRef.cxx_reserve on null CxxBooleanStdVectorConstPtrRef";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrRef.cxx_push_back!(
    Boolean _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrRef.cxx_push_back on null CxxBooleanStdVectorConstPtrRef";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrRef.cxx_pop_back on null CxxBooleanStdVectorConstPtrRef";
    
    this.ptr->{ CxxBooleanStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxBooleanStdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrRef.push_back!(
    in
    Boolean
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxBooleanStdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrRef] EDK[CxxBooleanStdVectorConstPtrMutableRef] LIB[std::vector< bool > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanConstRef
CxxBooleanStdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrRef.cxx_getAtIndex on null CxxBooleanStdVectorConstPtrRef";
    return this.ptr->{ CxxBooleanStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxBooleanStdVectorConstPtrRef] EDK[CxxBooleanStdVectorConstPtrMutableRef] LIB[std::vector< bool > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxBooleanStdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxBooleanConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxBooleanStdVectorConstPtrRef.cxx_setAtIndex on null CxxBooleanStdVectorConstPtrRef";
    this.ptr->{ CxxBooleanStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxBooleanStdVectorConstPtrConstPtr
// CxxBooleanStdVectorConstPtrPtr
// CxxBooleanStdVectorConstPtrConstRef
// CxxBooleanStdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstPtr(CxxBooleanStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstPtr(CxxBooleanStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstPtr(CxxBooleanStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstPtr Make_CxxBooleanStdVectorConstPtrConstPtr(CxxBooleanStdVectorConstPtr value) {
  return CxxBooleanStdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrPtr(CxxBooleanStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrPtr(CxxBooleanStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrPtr(CxxBooleanStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrPtr Make_CxxBooleanStdVectorConstPtrPtr(CxxBooleanStdVectorConstPtr value) {
  return CxxBooleanStdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef(CxxBooleanStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef(CxxBooleanStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef(CxxBooleanStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef Make_CxxBooleanStdVectorConstPtrConstRef(CxxBooleanStdVectorConstPtr value) {
  return CxxBooleanStdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef(CxxBooleanStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef(CxxBooleanStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxBooleanStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef(CxxBooleanStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef Make_CxxBooleanStdVectorConstPtrRef(CxxBooleanStdVectorConstPtr value) {
  return CxxBooleanStdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxBooleanStdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxBooleanStdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxBooleanStdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef CxxBooleanStdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorConstPtrConstPtr.cxx_getAt on null CxxBooleanStdVectorConstPtrConstPtr";
  return CxxBooleanStdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxBooleanStdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef CxxBooleanStdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxBooleanStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef CxxBooleanStdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorConstPtrPtr.cxx_getAt on null CxxBooleanStdVectorConstPtrPtr";
  return CxxBooleanStdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxBooleanStdVectorConstPtr()));
}

/// Same as for CxxBooleanStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef CxxBooleanStdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrPtr.cxx_setAt(Index i, CxxBooleanStdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorConstPtrPtr.cxx_setAt on null CxxBooleanStdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxBooleanStdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef(CxxBooleanStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef.=(CxxBooleanStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxBooleanStdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtr CxxBooleanStdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorConstPtrConstRef.cxx_get on null CxxBooleanStdVectorConstPtrConstRef";
  return this.ptr->{ CxxBooleanStdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef.cxx_set(CxxBooleanStdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxBooleanStdVectorConstPtrRef.cxx_set on null CxxBooleanStdVectorConstPtrRef";
  this.ptr->{ CxxBooleanStdVectorConstPtr } = value;
}

/// Assignment of CxxBooleanStdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef.=(CxxBooleanStdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxBooleanStdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxChar] EDK[Fabric_EDK_KL_CxxChar] LIB[char]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxCharConstPtr
// CxxCharPtr
// CxxCharConstRef
// CxxCharRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr(CxxChar array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr(CxxChar array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxChar());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtr permits CxxCharConstPtr {
  private Data ptr;
  private CxxChar value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtr(CxxChar value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtr(io CxxChar value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr(Make_CxxCharConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtr(CxxChar array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtr(CxxChar array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxChar());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtr permits CxxCharPtr {
  private Data ptr;
  private CxxChar value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtr(CxxChar value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtr(io CxxChar value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtr(Make_CxxCharPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstRef(CxxChar array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstRef(CxxChar array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxChar());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstRef permits CxxCharConstRef {
  private Data ptr;
  private CxxChar value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstRef(CxxChar value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstRef(io CxxChar value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstRef(Make_CxxCharConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharRef(CxxChar array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharRef(CxxChar array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxChar());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharRef permits CxxCharRef {
  private Data ptr;
  private CxxChar value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharRef(CxxChar value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharRef(io CxxChar value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharRef(Make_CxxCharRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharConstRef CxxCharConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtr.cxx_getAt on null CxxCharConstPtr";
  return CxxCharConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxChar()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharConstRef CxxCharConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Given a String, take a pointer to the bytes of the string
/// \dfgPresetOmit
/// \internal
CxxCharConstPtr(String s) {
  this.ptr = s.data();
}

/// Convert to a string
/// Note that this can potentially crash.  Converting a CxxCharConstPtr to
/// a String is not always safe, just as it is not always safe in C++
/// \dfgPresetOmit
/// \internal
CxxCharConstPtr.appendDesc(io String s) {
  Count size = 0;
  while (this.cxx_getAt(size))
    ++size;
  UInt8 bytes<>(this.ptr, size);
  String ss;
  ss.setFrom(bytes);
  s += ss;
}

/// Same as for CxxCharConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharRef CxxCharPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtr.cxx_getAt on null CxxCharPtr";
  return CxxCharRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxChar()));
}

/// Same as for CxxCharConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharRef CxxCharPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharPtr.cxx_setAt(Index i, CxxChar v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtr.cxx_setAt on null CxxCharPtr";
  this.ptr.offset(i)->{ CxxChar } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharConstRef(CxxCharConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharConstRef.=(CxxCharConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxChar value
/// \dfgPresetOmit
/// \internal
CxxChar CxxCharConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstRef.cxx_get on null CxxCharConstRef";
  return this.ptr->{ CxxChar };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharRef.cxx_set(CxxChar value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharRef.cxx_set on null CxxCharRef";
  this.ptr->{ CxxChar } = value;
}

/// Assignment of CxxChar
/// \dfgPresetOmit
/// \internal
CxxCharRef.=(CxxChar value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtr] EDK[CxxCharMutablePtr] LIB[char *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxCharPtrConstPtr
// CxxCharPtrPtr
// CxxCharPtrConstRef
// CxxCharPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtr(CxxCharPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtr(CxxCharPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrConstPtr permits CxxCharPtrConstPtr {
  private Data ptr;
  private CxxCharPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtr(CxxCharPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtr(io CxxCharPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtr(Make_CxxCharPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtr(CxxCharPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtr(CxxCharPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrPtr permits CxxCharPtrPtr {
  private Data ptr;
  private CxxCharPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtr(CxxCharPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtr(io CxxCharPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtr(Make_CxxCharPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef(CxxCharPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef(CxxCharPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrConstRef permits CxxCharPtrConstRef {
  private Data ptr;
  private CxxCharPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstRef(CxxCharPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstRef(io CxxCharPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef(Make_CxxCharPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrRef(CxxCharPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrRef(CxxCharPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrRef permits CxxCharPtrRef {
  private Data ptr;
  private CxxCharPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrRef(CxxCharPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrRef(io CxxCharPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrRef(Make_CxxCharPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef CxxCharPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrConstPtr.cxx_getAt on null CxxCharPtrConstPtr";
  return CxxCharPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef CxxCharPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrRef CxxCharPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrPtr.cxx_getAt on null CxxCharPtrPtr";
  return CxxCharPtrRef(this.ptr.offset(index * __CxxSize_CxxCharMutablePtr()));
}

/// Same as for CxxCharPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrRef CxxCharPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtr.cxx_setAt(Index i, CxxCharPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrPtr.cxx_setAt on null CxxCharPtrPtr";
  this.ptr.offset(i)->{ CxxCharPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef(CxxCharPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef.=(CxxCharPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharPtr value
/// \dfgPresetOmit
/// \internal
CxxCharPtr CxxCharPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrConstRef.cxx_get on null CxxCharPtrConstRef";
  return this.ptr->{ CxxCharPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharPtrRef.cxx_set(CxxCharPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrRef.cxx_set on null CxxCharPtrRef";
  this.ptr->{ CxxCharPtr } = value;
}

/// Assignment of CxxCharPtr
/// \dfgPresetOmit
/// \internal
CxxCharPtrRef.=(CxxCharPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtr] EDK[CxxCharConstPtr] LIB[char const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxCharConstPtrConstPtr
// CxxCharConstPtrPtr
// CxxCharConstPtrConstRef
// CxxCharConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtr(CxxCharConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtr(CxxCharConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrConstPtr permits CxxCharConstPtrConstPtr {
  private Data ptr;
  private CxxCharConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtr(CxxCharConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtr(io CxxCharConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtr(Make_CxxCharConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtr(CxxCharConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtr(CxxCharConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrPtr permits CxxCharConstPtrPtr {
  private Data ptr;
  private CxxCharConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtr(CxxCharConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtr(io CxxCharConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtr(Make_CxxCharConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef(CxxCharConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef(CxxCharConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrConstRef permits CxxCharConstPtrConstRef {
  private Data ptr;
  private CxxCharConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstRef(CxxCharConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstRef(io CxxCharConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef(Make_CxxCharConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef(CxxCharConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef(CxxCharConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrRef permits CxxCharConstPtrRef {
  private Data ptr;
  private CxxCharConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrRef(CxxCharConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrRef(io CxxCharConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef(Make_CxxCharConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef CxxCharConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrConstPtr.cxx_getAt on null CxxCharConstPtrConstPtr";
  return CxxCharConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef CxxCharConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef CxxCharConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrPtr.cxx_getAt on null CxxCharConstPtrPtr";
  return CxxCharConstPtrRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtr()));
}

/// Same as for CxxCharConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef CxxCharConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtr.cxx_setAt(Index i, CxxCharConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrPtr.cxx_setAt on null CxxCharConstPtrPtr";
  this.ptr.offset(i)->{ CxxCharConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef(CxxCharConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef.=(CxxCharConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharConstPtr value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtr CxxCharConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrConstRef.cxx_get on null CxxCharConstPtrConstRef";
  return this.ptr->{ CxxCharConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef.cxx_set(CxxCharConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrRef.cxx_set on null CxxCharConstPtrRef";
  this.ptr->{ CxxCharConstPtr } = value;
}

/// Assignment of CxxCharConstPtr
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef.=(CxxCharConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharStdVector(
    CxxCharStdVector that
    ) = "Kludge__CxxCharStdVector__MU__copy_ctor__54fc48a89de6a1df9c94e1e72cb572bb";

/// \dfgPresetOmit
/// \internal
CxxCharStdVector.__ctor(
    ) = "Kludge__CxxCharStdVector__MU__ctor__f94855122955d38b89655fdb87ee9424";

/// \dfgPresetOmit
/// \internal
CxxCharStdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxCharStdVector__MU__ctor__86803344b9a57bee36bf3ed08da968fd";

/// \dfgPresetOmit
/// \internal
CxxCharStdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVector.__ctor(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    ) = "Kludge__CxxCharStdVector__MU__ctor__c62c7a32218cfddbbaaa3688d5759235";

/// \dfgPresetOmit
/// \internal
CxxCharStdVector(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVector(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    ) {
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxCharStdVector() = "Kludge__CxxCharStdVector__MU__dtor__5ab8ddfb4d61a445a96cfbbb36928358";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVector.cxx_size?(
    )
 = "Kludge__CxxCharStdVector__CO__meth_size__d202a58646b0c1d4561ce9913f9044d6";

/// \dfgPresetOmit
/// \internal

CxxCharStdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxCharStdVector__MU__meth_reserve__a2d8b5d53467c1eee1480a0789e301cf";

/// \dfgPresetOmit
/// \internal

CxxCharStdVector.cxx_push_back!(
    CxxChar _arg0
    )
 = "Kludge__CxxCharStdVector__MU__meth_push_back__864925edf91a8f19574e72d88ff5ec3d";

/// \dfgPresetOmit
/// \internal

CxxCharStdVector.cxx_pop_back!(
    )
 = "Kludge__CxxCharStdVector__MU__meth_pop_back__2108d93dfe7270c4752337e14c961a5f";

/// \dfgPresetOmit
/// \internal

CxxCharStdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVector.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxCharStdVector.=(
    CxxCharStdVector that
    ) = "Kludge__CxxCharStdVector__MU__simple_ass_op__458ad769c30be5667c9b5923f49bd762";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxCharStdVector__CO__get_ind_op__6374f0e9ad1a7a47e252ac597440f165";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharStdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstRef value
    )
  = "Kludge__CxxCharStdVector__MU__set_ind_op__3cec40818988a2b308958a7bc6ec6707";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharStdVector(CxxChar array<>) {
  this = CxxCharStdVector(
    CxxCharConstPtr(array, 0),
    CxxCharConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVector Make_CxxCharStdVector(CxxChar array<>) {
  return CxxCharStdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline CxxChar[] Make_CxxCharVariableArray(CxxCharStdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  CxxChar result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxCharConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVector.appendDesc(io String string) {
  string += "CxxCharStdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVector] EDK[Fabric_EDK_KL_CxxCharStdVector] LIB[std::vector< char >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtr] EDK[CxxCharStdVectorConstPtr] LIB[std::vector< char > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtr] EDK[CxxCharStdVectorConstPtr] LIB[std::vector< char > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtr.cxx_size on null CxxCharStdVectorConstPtr";
    return
    this.ptr.data()->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtr] EDK[CxxCharStdVectorConstPtr] LIB[std::vector< char > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtr.cxx_getAtIndex on null CxxCharStdVectorConstPtr";
    return this.ptr.data()->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtr] EDK[CxxCharStdVectorMutablePtr] LIB[std::vector< char > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtr] EDK[CxxCharStdVectorMutablePtr] LIB[std::vector< char > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtr.cxx_size on null CxxCharStdVectorPtr";
    return
    this.ptr.data()->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtr.cxx_reserve on null CxxCharStdVectorPtr";
    
    this.ptr.data()->{ CxxCharStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtr.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtr.cxx_push_back on null CxxCharStdVectorPtr";
    
    this.ptr.data()->{ CxxCharStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtr.cxx_pop_back on null CxxCharStdVectorPtr";
    
    this.ptr.data()->{ CxxCharStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtr.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtr] EDK[CxxCharStdVectorMutablePtr] LIB[std::vector< char > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtr.cxx_getAtIndex on null CxxCharStdVectorPtr";
    return this.ptr.data()->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtr] EDK[CxxCharStdVectorMutablePtr] LIB[std::vector< char > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharStdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtr.cxx_setAtIndex on null CxxCharStdVectorPtr";
    this.ptr.data()->{ CxxCharStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstRef] EDK[CxxCharStdVectorConstRef] LIB[std::vector< char > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstRef] EDK[CxxCharStdVectorConstRef] LIB[std::vector< char > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstRef] EDK[CxxCharStdVectorConstRef] LIB[std::vector< char > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstRef.cxx_size on null CxxCharStdVectorConstRef";
    return
    this.ptr.data()->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstRef] EDK[CxxCharStdVectorConstRef] LIB[std::vector< char > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstRef.cxx_getAtIndex on null CxxCharStdVectorConstRef";
    return this.ptr.data()->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorRef] EDK[CxxCharStdVectorMutableRef] LIB[std::vector< char > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorRef] EDK[CxxCharStdVectorMutableRef] LIB[std::vector< char > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorRef.cxx_size on null CxxCharStdVectorRef";
    return
    this.ptr.data()->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorRef.cxx_reserve on null CxxCharStdVectorRef";
    
    this.ptr.data()->{ CxxCharStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorRef.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorRef.cxx_push_back on null CxxCharStdVectorRef";
    
    this.ptr.data()->{ CxxCharStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorRef.cxx_pop_back on null CxxCharStdVectorRef";
    
    this.ptr.data()->{ CxxCharStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorRef.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorRef] EDK[CxxCharStdVectorMutableRef] LIB[std::vector< char > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorRef.cxx_getAtIndex on null CxxCharStdVectorRef";
    return this.ptr.data()->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorRef] EDK[CxxCharStdVectorMutableRef] LIB[std::vector< char > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharStdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorRef.cxx_setAtIndex on null CxxCharStdVectorRef";
    this.ptr.data()->{ CxxCharStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharStdVectorConstPtr
// CxxCharStdVectorPtr
// CxxCharStdVectorConstRef
// CxxCharStdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtr(CxxCharStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtr(CxxCharStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtr(CxxCharStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtr Make_CxxCharStdVectorConstPtr(CxxCharStdVector value) {
  return CxxCharStdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtr(CxxCharStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtr(CxxCharStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtr(CxxCharStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtr Make_CxxCharStdVectorPtr(CxxCharStdVector value) {
  return CxxCharStdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef(CxxCharStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef(CxxCharStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef(CxxCharStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef Make_CxxCharStdVectorConstRef(CxxCharStdVector value) {
  return CxxCharStdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef(CxxCharStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef(CxxCharStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef(CxxCharStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef Make_CxxCharStdVectorRef(CxxCharStdVector value) {
  return CxxCharStdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharStdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharStdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharStdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef CxxCharStdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorConstPtr.cxx_getAt on null CxxCharStdVectorConstPtr";
  return CxxCharStdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxCharStdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef CxxCharStdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef CxxCharStdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorPtr.cxx_getAt on null CxxCharStdVectorPtr";
  return CxxCharStdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxCharStdVector()));
}

/// Same as for CxxCharStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef CxxCharStdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtr.cxx_setAt(Index i, CxxCharStdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorPtr.cxx_setAt on null CxxCharStdVectorPtr";
  this.ptr.offset(i)->{ CxxCharStdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef(CxxCharStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef.=(CxxCharStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharStdVector value
/// \dfgPresetOmit
/// \internal
CxxCharStdVector CxxCharStdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorConstRef.cxx_get on null CxxCharStdVectorConstRef";
  return this.ptr.data()->{ CxxCharStdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef.cxx_set(CxxCharStdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorRef.cxx_set on null CxxCharStdVectorRef";
  this.ptr.data()->{ CxxCharStdVector } = value;
}

/// Assignment of CxxCharStdVector
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef.=(CxxCharStdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVectorPtr] EDK[CxxCharStdVectorMutablePtr] LIB[std::vector< char > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrConstPtr] EDK[CxxCharStdVectorPtrConstPtr] LIB[std::vector< char > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrConstPtr] EDK[CxxCharStdVectorPtrConstPtr] LIB[std::vector< char > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrConstPtr.cxx_size on null CxxCharStdVectorPtrConstPtr";
    return
    this.ptr->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrConstPtr] EDK[CxxCharStdVectorPtrConstPtr] LIB[std::vector< char > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrConstPtr.cxx_getAtIndex on null CxxCharStdVectorPtrConstPtr";
    return this.ptr->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrPtr] EDK[CxxCharStdVectorPtrMutablePtr] LIB[std::vector< char > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrPtr] EDK[CxxCharStdVectorPtrMutablePtr] LIB[std::vector< char > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrPtr.cxx_size on null CxxCharStdVectorPtrPtr";
    return
    this.ptr->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrPtr.cxx_reserve on null CxxCharStdVectorPtrPtr";
    
    this.ptr->{ CxxCharStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrPtr.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrPtr.cxx_push_back on null CxxCharStdVectorPtrPtr";
    
    this.ptr->{ CxxCharStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrPtr.cxx_pop_back on null CxxCharStdVectorPtrPtr";
    
    this.ptr->{ CxxCharStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrPtr.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrPtr] EDK[CxxCharStdVectorPtrMutablePtr] LIB[std::vector< char > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrPtr.cxx_getAtIndex on null CxxCharStdVectorPtrPtr";
    return this.ptr->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrPtr] EDK[CxxCharStdVectorPtrMutablePtr] LIB[std::vector< char > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharStdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrPtr.cxx_setAtIndex on null CxxCharStdVectorPtrPtr";
    this.ptr->{ CxxCharStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrConstRef] EDK[CxxCharStdVectorPtrConstRef] LIB[std::vector< char > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrConstRef] EDK[CxxCharStdVectorPtrConstRef] LIB[std::vector< char > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrConstRef] EDK[CxxCharStdVectorPtrConstRef] LIB[std::vector< char > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrConstRef.cxx_size on null CxxCharStdVectorPtrConstRef";
    return
    this.ptr->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrConstRef] EDK[CxxCharStdVectorPtrConstRef] LIB[std::vector< char > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrConstRef.cxx_getAtIndex on null CxxCharStdVectorPtrConstRef";
    return this.ptr->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrRef] EDK[CxxCharStdVectorPtrMutableRef] LIB[std::vector< char > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrRef] EDK[CxxCharStdVectorPtrMutableRef] LIB[std::vector< char > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrRef.cxx_size on null CxxCharStdVectorPtrRef";
    return
    this.ptr->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrRef.cxx_reserve on null CxxCharStdVectorPtrRef";
    
    this.ptr->{ CxxCharStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrRef.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrRef.cxx_push_back on null CxxCharStdVectorPtrRef";
    
    this.ptr->{ CxxCharStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrRef.cxx_pop_back on null CxxCharStdVectorPtrRef";
    
    this.ptr->{ CxxCharStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorPtrRef.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrRef] EDK[CxxCharStdVectorPtrMutableRef] LIB[std::vector< char > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrRef.cxx_getAtIndex on null CxxCharStdVectorPtrRef";
    return this.ptr->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorPtrRef] EDK[CxxCharStdVectorPtrMutableRef] LIB[std::vector< char > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharStdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorPtrRef.cxx_setAtIndex on null CxxCharStdVectorPtrRef";
    this.ptr->{ CxxCharStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharStdVectorPtrConstPtr
// CxxCharStdVectorPtrPtr
// CxxCharStdVectorPtrConstRef
// CxxCharStdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstPtr(CxxCharStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstPtr(CxxCharStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstPtr(CxxCharStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstPtr Make_CxxCharStdVectorPtrConstPtr(CxxCharStdVectorPtr value) {
  return CxxCharStdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrPtr(CxxCharStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrPtr(CxxCharStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrPtr(CxxCharStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrPtr Make_CxxCharStdVectorPtrPtr(CxxCharStdVectorPtr value) {
  return CxxCharStdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef(CxxCharStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef(CxxCharStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef(CxxCharStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef Make_CxxCharStdVectorPtrConstRef(CxxCharStdVectorPtr value) {
  return CxxCharStdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef(CxxCharStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef(CxxCharStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef(CxxCharStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef Make_CxxCharStdVectorPtrRef(CxxCharStdVectorPtr value) {
  return CxxCharStdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharStdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharStdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharStdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef CxxCharStdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorPtrConstPtr.cxx_getAt on null CxxCharStdVectorPtrConstPtr";
  return CxxCharStdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharStdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef CxxCharStdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef CxxCharStdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorPtrPtr.cxx_getAt on null CxxCharStdVectorPtrPtr";
  return CxxCharStdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxCharStdVectorMutablePtr()));
}

/// Same as for CxxCharStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef CxxCharStdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrPtr.cxx_setAt(Index i, CxxCharStdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorPtrPtr.cxx_setAt on null CxxCharStdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxCharStdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef(CxxCharStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef.=(CxxCharStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharStdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtr CxxCharStdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorPtrConstRef.cxx_get on null CxxCharStdVectorPtrConstRef";
  return this.ptr->{ CxxCharStdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef.cxx_set(CxxCharStdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorPtrRef.cxx_set on null CxxCharStdVectorPtrRef";
  this.ptr->{ CxxCharStdVectorPtr } = value;
}

/// Assignment of CxxCharStdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef.=(CxxCharStdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharStdVectorConstPtr] EDK[CxxCharStdVectorConstPtr] LIB[std::vector< char > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrConstPtr] EDK[CxxCharStdVectorConstPtrConstPtr] LIB[std::vector< char > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrConstPtr] EDK[CxxCharStdVectorConstPtrConstPtr] LIB[std::vector< char > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrConstPtr.cxx_size on null CxxCharStdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrConstPtr] EDK[CxxCharStdVectorConstPtrConstPtr] LIB[std::vector< char > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxCharStdVectorConstPtrConstPtr";
    return this.ptr->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrPtr] EDK[CxxCharStdVectorConstPtrMutablePtr] LIB[std::vector< char > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrPtr] EDK[CxxCharStdVectorConstPtrMutablePtr] LIB[std::vector< char > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrPtr.cxx_size on null CxxCharStdVectorConstPtrPtr";
    return
    this.ptr->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrPtr.cxx_reserve on null CxxCharStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrPtr.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrPtr.cxx_push_back on null CxxCharStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrPtr.cxx_pop_back on null CxxCharStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrPtr.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrPtr] EDK[CxxCharStdVectorConstPtrMutablePtr] LIB[std::vector< char > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrPtr.cxx_getAtIndex on null CxxCharStdVectorConstPtrPtr";
    return this.ptr->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrPtr] EDK[CxxCharStdVectorConstPtrMutablePtr] LIB[std::vector< char > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharStdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrPtr.cxx_setAtIndex on null CxxCharStdVectorConstPtrPtr";
    this.ptr->{ CxxCharStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrConstRef] EDK[CxxCharStdVectorConstPtrConstRef] LIB[std::vector< char > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrConstRef] EDK[CxxCharStdVectorConstPtrConstRef] LIB[std::vector< char > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrConstRef] EDK[CxxCharStdVectorConstPtrConstRef] LIB[std::vector< char > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrConstRef.cxx_size on null CxxCharStdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrConstRef] EDK[CxxCharStdVectorConstPtrConstRef] LIB[std::vector< char > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrConstRef.cxx_getAtIndex on null CxxCharStdVectorConstPtrConstRef";
    return this.ptr->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrRef] EDK[CxxCharStdVectorConstPtrMutableRef] LIB[std::vector< char > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrRef] EDK[CxxCharStdVectorConstPtrMutableRef] LIB[std::vector< char > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrRef.cxx_size on null CxxCharStdVectorConstPtrRef";
    return
    this.ptr->{ CxxCharStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrRef.cxx_reserve on null CxxCharStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrRef.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrRef.cxx_push_back on null CxxCharStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrRef.cxx_pop_back on null CxxCharStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharStdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharStdVectorConstPtrRef.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrRef] EDK[CxxCharStdVectorConstPtrMutableRef] LIB[std::vector< char > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstRef
CxxCharStdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrRef.cxx_getAtIndex on null CxxCharStdVectorConstPtrRef";
    return this.ptr->{ CxxCharStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharStdVectorConstPtrRef] EDK[CxxCharStdVectorConstPtrMutableRef] LIB[std::vector< char > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharStdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharStdVectorConstPtrRef.cxx_setAtIndex on null CxxCharStdVectorConstPtrRef";
    this.ptr->{ CxxCharStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharStdVectorConstPtrConstPtr
// CxxCharStdVectorConstPtrPtr
// CxxCharStdVectorConstPtrConstRef
// CxxCharStdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstPtr(CxxCharStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstPtr(CxxCharStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstPtr(CxxCharStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstPtr Make_CxxCharStdVectorConstPtrConstPtr(CxxCharStdVectorConstPtr value) {
  return CxxCharStdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrPtr(CxxCharStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrPtr(CxxCharStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrPtr(CxxCharStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrPtr Make_CxxCharStdVectorConstPtrPtr(CxxCharStdVectorConstPtr value) {
  return CxxCharStdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef(CxxCharStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef(CxxCharStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef(CxxCharStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef Make_CxxCharStdVectorConstPtrConstRef(CxxCharStdVectorConstPtr value) {
  return CxxCharStdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef(CxxCharStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef(CxxCharStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef(CxxCharStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef Make_CxxCharStdVectorConstPtrRef(CxxCharStdVectorConstPtr value) {
  return CxxCharStdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharStdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharStdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharStdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef CxxCharStdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorConstPtrConstPtr.cxx_getAt on null CxxCharStdVectorConstPtrConstPtr";
  return CxxCharStdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharStdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef CxxCharStdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef CxxCharStdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorConstPtrPtr.cxx_getAt on null CxxCharStdVectorConstPtrPtr";
  return CxxCharStdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxCharStdVectorConstPtr()));
}

/// Same as for CxxCharStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef CxxCharStdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrPtr.cxx_setAt(Index i, CxxCharStdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorConstPtrPtr.cxx_setAt on null CxxCharStdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxCharStdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef(CxxCharStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef.=(CxxCharStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharStdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtr CxxCharStdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorConstPtrConstRef.cxx_get on null CxxCharStdVectorConstPtrConstRef";
  return this.ptr->{ CxxCharStdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef.cxx_set(CxxCharStdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharStdVectorConstPtrRef.cxx_set on null CxxCharStdVectorConstPtrRef";
  this.ptr->{ CxxCharStdVectorConstPtr } = value;
}

/// Assignment of CxxCharStdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef.=(CxxCharStdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharStdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt8] EDK[Fabric::EDK::KL::SInt8] LIB[int8_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt8] EDK[Fabric::EDK::KL::SInt8] LIB[int8_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt8ConstPtr
// CxxSInt8Ptr
// CxxSInt8ConstRef
// CxxSInt8Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtr(SInt8 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtr(SInt8 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt8());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8ConstPtr permits CxxSInt8ConstPtr {
  private Data ptr;
  private SInt8 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtr(SInt8 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtr(io SInt8 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtr(Make_CxxSInt8ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8Ptr(SInt8 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8Ptr(SInt8 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt8());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8Ptr permits CxxSInt8Ptr {
  private Data ptr;
  private SInt8 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8Ptr(SInt8 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8Ptr(io SInt8 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8Ptr(Make_CxxSInt8Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef(SInt8 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef(SInt8 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt8());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8ConstRef permits CxxSInt8ConstRef {
  private Data ptr;
  private SInt8 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstRef(SInt8 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstRef(io SInt8 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef(Make_CxxSInt8ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8Ref(SInt8 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8Ref(SInt8 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt8());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8Ref permits CxxSInt8Ref {
  private Data ptr;
  private SInt8 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8Ref(SInt8 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8Ref(io SInt8 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8Ref(Make_CxxSInt8Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt8ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt8ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef CxxSInt8ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8ConstPtr.cxx_getAt on null CxxSInt8ConstPtr";
  return CxxSInt8ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_SInt8()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef CxxSInt8ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt8ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8Ref CxxSInt8Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8Ptr.cxx_getAt on null CxxSInt8Ptr";
  return CxxSInt8Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_SInt8()));
}

/// Same as for CxxSInt8ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8Ref CxxSInt8Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt8Ptr.cxx_setAt(Index i, SInt8 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8Ptr.cxx_setAt on null CxxSInt8Ptr";
  this.ptr.offset(i)->{ SInt8 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef(CxxSInt8ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef.=(CxxSInt8ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the SInt8 value
/// \dfgPresetOmit
/// \internal
SInt8 CxxSInt8ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8ConstRef.cxx_get on null CxxSInt8ConstRef";
  return this.ptr->{ SInt8 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt8Ref.cxx_set(SInt8 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8Ref.cxx_set on null CxxSInt8Ref";
  this.ptr->{ SInt8 } = value;
}

/// Assignment of SInt8
/// \dfgPresetOmit
/// \internal
CxxSInt8Ref.=(SInt8 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8Ptr] EDK[CxxSInt8MutablePtr] LIB[int8_t *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt8PtrConstPtr
// CxxSInt8PtrPtr
// CxxSInt8PtrConstRef
// CxxSInt8PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstPtr(CxxSInt8Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstPtr(CxxSInt8Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8PtrConstPtr permits CxxSInt8PtrConstPtr {
  private Data ptr;
  private CxxSInt8Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8PtrConstPtr(CxxSInt8Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8PtrConstPtr(io CxxSInt8Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstPtr(Make_CxxSInt8PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrPtr(CxxSInt8Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrPtr(CxxSInt8Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8PtrPtr permits CxxSInt8PtrPtr {
  private Data ptr;
  private CxxSInt8Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8PtrPtr(CxxSInt8Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8PtrPtr(io CxxSInt8Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrPtr(Make_CxxSInt8PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef(CxxSInt8Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef(CxxSInt8Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8PtrConstRef permits CxxSInt8PtrConstRef {
  private Data ptr;
  private CxxSInt8Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8PtrConstRef(CxxSInt8Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8PtrConstRef(io CxxSInt8Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef(Make_CxxSInt8PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef(CxxSInt8Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef(CxxSInt8Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8PtrRef permits CxxSInt8PtrRef {
  private Data ptr;
  private CxxSInt8Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8PtrRef(CxxSInt8Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8PtrRef(io CxxSInt8Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef(Make_CxxSInt8PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt8PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt8PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef CxxSInt8PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8PtrConstPtr.cxx_getAt on null CxxSInt8PtrConstPtr";
  return CxxSInt8PtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt8MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef CxxSInt8PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt8PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef CxxSInt8PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8PtrPtr.cxx_getAt on null CxxSInt8PtrPtr";
  return CxxSInt8PtrRef(this.ptr.offset(index * __CxxSize_CxxSInt8MutablePtr()));
}

/// Same as for CxxSInt8PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef CxxSInt8PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrPtr.cxx_setAt(Index i, CxxSInt8Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8PtrPtr.cxx_setAt on null CxxSInt8PtrPtr";
  this.ptr.offset(i)->{ CxxSInt8Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef(CxxSInt8PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef.=(CxxSInt8PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt8Ptr value
/// \dfgPresetOmit
/// \internal
CxxSInt8Ptr CxxSInt8PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8PtrConstRef.cxx_get on null CxxSInt8PtrConstRef";
  return this.ptr->{ CxxSInt8Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef.cxx_set(CxxSInt8Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8PtrRef.cxx_set on null CxxSInt8PtrRef";
  this.ptr->{ CxxSInt8Ptr } = value;
}

/// Assignment of CxxSInt8Ptr
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef.=(CxxSInt8Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8ConstPtr] EDK[CxxSInt8ConstPtr] LIB[int8_t const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt8ConstPtrConstPtr
// CxxSInt8ConstPtrPtr
// CxxSInt8ConstPtrConstRef
// CxxSInt8ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstPtr(CxxSInt8ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstPtr(CxxSInt8ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8ConstPtrConstPtr permits CxxSInt8ConstPtrConstPtr {
  private Data ptr;
  private CxxSInt8ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtrConstPtr(CxxSInt8ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtrConstPtr(io CxxSInt8ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstPtr(Make_CxxSInt8ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrPtr(CxxSInt8ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrPtr(CxxSInt8ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8ConstPtrPtr permits CxxSInt8ConstPtrPtr {
  private Data ptr;
  private CxxSInt8ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtrPtr(CxxSInt8ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtrPtr(io CxxSInt8ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrPtr(Make_CxxSInt8ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef(CxxSInt8ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef(CxxSInt8ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8ConstPtrConstRef permits CxxSInt8ConstPtrConstRef {
  private Data ptr;
  private CxxSInt8ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtrConstRef(CxxSInt8ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtrConstRef(io CxxSInt8ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef(Make_CxxSInt8ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef(CxxSInt8ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef(CxxSInt8ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt8ConstPtrRef permits CxxSInt8ConstPtrRef {
  private Data ptr;
  private CxxSInt8ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtrRef(CxxSInt8ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt8ConstPtrRef(io CxxSInt8ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef(Make_CxxSInt8ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt8ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt8ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef CxxSInt8ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8ConstPtrConstPtr.cxx_getAt on null CxxSInt8ConstPtrConstPtr";
  return CxxSInt8ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt8ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef CxxSInt8ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt8ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef CxxSInt8ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8ConstPtrPtr.cxx_getAt on null CxxSInt8ConstPtrPtr";
  return CxxSInt8ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt8ConstPtr()));
}

/// Same as for CxxSInt8ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef CxxSInt8ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrPtr.cxx_setAt(Index i, CxxSInt8ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8ConstPtrPtr.cxx_setAt on null CxxSInt8ConstPtrPtr";
  this.ptr.offset(i)->{ CxxSInt8ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef(CxxSInt8ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef.=(CxxSInt8ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt8ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtr CxxSInt8ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8ConstPtrConstRef.cxx_get on null CxxSInt8ConstPtrConstRef";
  return this.ptr->{ CxxSInt8ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef.cxx_set(CxxSInt8ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8ConstPtrRef.cxx_set on null CxxSInt8ConstPtrRef";
  this.ptr->{ CxxSInt8ConstPtr } = value;
}

/// Assignment of CxxSInt8ConstPtr
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef.=(CxxSInt8ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector(
    CxxSInt8StdVector that
    ) = "Kludge__CxxSInt8StdVector__MU__copy_ctor__466d461d19e5cd181f4fb311888c9c13";

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector.__ctor(
    ) = "Kludge__CxxSInt8StdVector__MU__ctor__7478383ac2ddff923511301ac5bd8fde";

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxSInt8StdVector__MU__ctor__f8ec2e71db501fe54df71cca4bd99999";

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector.__ctor(
    CxxSInt8ConstPtr _arg0,
    CxxSInt8ConstPtr _arg1
    ) = "Kludge__CxxSInt8StdVector__MU__ctor__b5486e7a4dcb77e05ea6d2df46a0720a";

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector(
    CxxSInt8ConstPtr _arg0,
    CxxSInt8ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector(
    in
    SInt8
    _arg0
    
    ,
    in
    SInt8
    _arg1
    
    
    ) {
    
    CxxSInt8ConstPtr _arg0__cxx = Make_CxxSInt8ConstPtr(_arg0);
    
    CxxSInt8ConstPtr _arg1__cxx = Make_CxxSInt8ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxSInt8StdVector() = "Kludge__CxxSInt8StdVector__MU__dtor__caa9f9fda29fe3f9a8f31f4d8d0ea28f";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVector.cxx_size?(
    )
 = "Kludge__CxxSInt8StdVector__CO__meth_size__2a76e1f5402c9f99dd30a280fa6cb34c";

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxSInt8StdVector__MU__meth_reserve__16158647fa7d4fc3a2cb60f0735828bd";

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVector.cxx_push_back!(
    SInt8 _arg0
    )
 = "Kludge__CxxSInt8StdVector__MU__meth_push_back__5412c0bbf2035ea88d5af565a1922f78";

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxSInt8StdVector__MU__meth_pop_back__41e7d687d0da154c015990b2103436fe";

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVector.push_back!(
    in
    SInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxSInt8StdVector.=(
    CxxSInt8StdVector that
    ) = "Kludge__CxxSInt8StdVector__MU__simple_ass_op__2781ff07229054414d51bf122912c0e5";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxSInt8StdVector__CO__get_ind_op__8f2cbbe9a1baa66c8c82ecb25bffa8b2";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt8ConstRef value
    )
  = "Kludge__CxxSInt8StdVector__MU__set_ind_op__ec3304e12d4bc43b6dbca421dea483dd";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector(SInt8 array<>) {
  this = CxxSInt8StdVector(
    CxxSInt8ConstPtr(array, 0),
    CxxSInt8ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector Make_CxxSInt8StdVector(SInt8 array<>) {
  return CxxSInt8StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline SInt8[] Make_SInt8VariableArray(CxxSInt8StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  SInt8 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxSInt8ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector.appendDesc(io String string) {
  string += "CxxSInt8StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVector] EDK[Fabric_EDK_KL_CxxSInt8StdVector] LIB[std::vector< int8_t >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtr] EDK[CxxSInt8StdVectorConstPtr] LIB[std::vector< int8_t > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtr] EDK[CxxSInt8StdVectorConstPtr] LIB[std::vector< int8_t > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtr.cxx_size on null CxxSInt8StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtr] EDK[CxxSInt8StdVectorConstPtr] LIB[std::vector< int8_t > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtr.cxx_getAtIndex on null CxxSInt8StdVectorConstPtr";
    return this.ptr.data()->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtr] EDK[CxxSInt8StdVectorMutablePtr] LIB[std::vector< int8_t > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtr] EDK[CxxSInt8StdVectorMutablePtr] LIB[std::vector< int8_t > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtr.cxx_size on null CxxSInt8StdVectorPtr";
    return
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtr.cxx_reserve on null CxxSInt8StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtr.cxx_push_back!(
    SInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtr.cxx_push_back on null CxxSInt8StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtr.cxx_pop_back on null CxxSInt8StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtr.push_back!(
    in
    SInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtr] EDK[CxxSInt8StdVectorMutablePtr] LIB[std::vector< int8_t > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtr.cxx_getAtIndex on null CxxSInt8StdVectorPtr";
    return this.ptr.data()->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtr] EDK[CxxSInt8StdVectorMutablePtr] LIB[std::vector< int8_t > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtr.cxx_setAtIndex on null CxxSInt8StdVectorPtr";
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstRef] EDK[CxxSInt8StdVectorConstRef] LIB[std::vector< int8_t > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstRef] EDK[CxxSInt8StdVectorConstRef] LIB[std::vector< int8_t > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstRef] EDK[CxxSInt8StdVectorConstRef] LIB[std::vector< int8_t > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstRef.cxx_size on null CxxSInt8StdVectorConstRef";
    return
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstRef] EDK[CxxSInt8StdVectorConstRef] LIB[std::vector< int8_t > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstRef.cxx_getAtIndex on null CxxSInt8StdVectorConstRef";
    return this.ptr.data()->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorRef] EDK[CxxSInt8StdVectorMutableRef] LIB[std::vector< int8_t > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorRef] EDK[CxxSInt8StdVectorMutableRef] LIB[std::vector< int8_t > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorRef.cxx_size on null CxxSInt8StdVectorRef";
    return
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorRef.cxx_reserve on null CxxSInt8StdVectorRef";
    
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorRef.cxx_push_back!(
    SInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorRef.cxx_push_back on null CxxSInt8StdVectorRef";
    
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorRef.cxx_pop_back on null CxxSInt8StdVectorRef";
    
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorRef.push_back!(
    in
    SInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorRef] EDK[CxxSInt8StdVectorMutableRef] LIB[std::vector< int8_t > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorRef.cxx_getAtIndex on null CxxSInt8StdVectorRef";
    return this.ptr.data()->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorRef] EDK[CxxSInt8StdVectorMutableRef] LIB[std::vector< int8_t > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorRef.cxx_setAtIndex on null CxxSInt8StdVectorRef";
    this.ptr.data()->{ CxxSInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt8StdVectorConstPtr
// CxxSInt8StdVectorPtr
// CxxSInt8StdVectorConstRef
// CxxSInt8StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtr(CxxSInt8StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtr(CxxSInt8StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt8StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtr(CxxSInt8StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtr Make_CxxSInt8StdVectorConstPtr(CxxSInt8StdVector value) {
  return CxxSInt8StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtr(CxxSInt8StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtr(CxxSInt8StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt8StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtr(CxxSInt8StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtr Make_CxxSInt8StdVectorPtr(CxxSInt8StdVector value) {
  return CxxSInt8StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef(CxxSInt8StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef(CxxSInt8StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt8StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef(CxxSInt8StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef Make_CxxSInt8StdVectorConstRef(CxxSInt8StdVector value) {
  return CxxSInt8StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef(CxxSInt8StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef(CxxSInt8StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt8StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef(CxxSInt8StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef Make_CxxSInt8StdVectorRef(CxxSInt8StdVector value) {
  return CxxSInt8StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt8StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt8StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef CxxSInt8StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorConstPtr.cxx_getAt on null CxxSInt8StdVectorConstPtr";
  return CxxSInt8StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt8StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef CxxSInt8StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt8StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef CxxSInt8StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorPtr.cxx_getAt on null CxxSInt8StdVectorPtr";
  return CxxSInt8StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt8StdVector()));
}

/// Same as for CxxSInt8StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef CxxSInt8StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtr.cxx_setAt(Index i, CxxSInt8StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorPtr.cxx_setAt on null CxxSInt8StdVectorPtr";
  this.ptr.offset(i)->{ CxxSInt8StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef(CxxSInt8StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef.=(CxxSInt8StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt8StdVector value
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVector CxxSInt8StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorConstRef.cxx_get on null CxxSInt8StdVectorConstRef";
  return this.ptr.data()->{ CxxSInt8StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef.cxx_set(CxxSInt8StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorRef.cxx_set on null CxxSInt8StdVectorRef";
  this.ptr.data()->{ CxxSInt8StdVector } = value;
}

/// Assignment of CxxSInt8StdVector
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef.=(CxxSInt8StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVectorPtr] EDK[CxxSInt8StdVectorMutablePtr] LIB[std::vector< int8_t > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrConstPtr] EDK[CxxSInt8StdVectorPtrConstPtr] LIB[std::vector< int8_t > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrConstPtr] EDK[CxxSInt8StdVectorPtrConstPtr] LIB[std::vector< int8_t > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrConstPtr.cxx_size on null CxxSInt8StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrConstPtr] EDK[CxxSInt8StdVectorPtrConstPtr] LIB[std::vector< int8_t > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrConstPtr.cxx_getAtIndex on null CxxSInt8StdVectorPtrConstPtr";
    return this.ptr->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrPtr] EDK[CxxSInt8StdVectorPtrMutablePtr] LIB[std::vector< int8_t > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrPtr] EDK[CxxSInt8StdVectorPtrMutablePtr] LIB[std::vector< int8_t > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrPtr.cxx_size on null CxxSInt8StdVectorPtrPtr";
    return
    this.ptr->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrPtr.cxx_reserve on null CxxSInt8StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrPtr.cxx_push_back!(
    SInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrPtr.cxx_push_back on null CxxSInt8StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrPtr.cxx_pop_back on null CxxSInt8StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrPtr.push_back!(
    in
    SInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrPtr] EDK[CxxSInt8StdVectorPtrMutablePtr] LIB[std::vector< int8_t > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrPtr.cxx_getAtIndex on null CxxSInt8StdVectorPtrPtr";
    return this.ptr->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrPtr] EDK[CxxSInt8StdVectorPtrMutablePtr] LIB[std::vector< int8_t > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrPtr.cxx_setAtIndex on null CxxSInt8StdVectorPtrPtr";
    this.ptr->{ CxxSInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrConstRef] EDK[CxxSInt8StdVectorPtrConstRef] LIB[std::vector< int8_t > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrConstRef] EDK[CxxSInt8StdVectorPtrConstRef] LIB[std::vector< int8_t > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrConstRef] EDK[CxxSInt8StdVectorPtrConstRef] LIB[std::vector< int8_t > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrConstRef.cxx_size on null CxxSInt8StdVectorPtrConstRef";
    return
    this.ptr->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrConstRef] EDK[CxxSInt8StdVectorPtrConstRef] LIB[std::vector< int8_t > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrConstRef.cxx_getAtIndex on null CxxSInt8StdVectorPtrConstRef";
    return this.ptr->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrRef] EDK[CxxSInt8StdVectorPtrMutableRef] LIB[std::vector< int8_t > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrRef] EDK[CxxSInt8StdVectorPtrMutableRef] LIB[std::vector< int8_t > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrRef.cxx_size on null CxxSInt8StdVectorPtrRef";
    return
    this.ptr->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrRef.cxx_reserve on null CxxSInt8StdVectorPtrRef";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrRef.cxx_push_back!(
    SInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrRef.cxx_push_back on null CxxSInt8StdVectorPtrRef";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrRef.cxx_pop_back on null CxxSInt8StdVectorPtrRef";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrRef.push_back!(
    in
    SInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrRef] EDK[CxxSInt8StdVectorPtrMutableRef] LIB[std::vector< int8_t > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrRef.cxx_getAtIndex on null CxxSInt8StdVectorPtrRef";
    return this.ptr->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorPtrRef] EDK[CxxSInt8StdVectorPtrMutableRef] LIB[std::vector< int8_t > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorPtrRef.cxx_setAtIndex on null CxxSInt8StdVectorPtrRef";
    this.ptr->{ CxxSInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt8StdVectorPtrConstPtr
// CxxSInt8StdVectorPtrPtr
// CxxSInt8StdVectorPtrConstRef
// CxxSInt8StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstPtr(CxxSInt8StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstPtr(CxxSInt8StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstPtr(CxxSInt8StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstPtr Make_CxxSInt8StdVectorPtrConstPtr(CxxSInt8StdVectorPtr value) {
  return CxxSInt8StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrPtr(CxxSInt8StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrPtr(CxxSInt8StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrPtr(CxxSInt8StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrPtr Make_CxxSInt8StdVectorPtrPtr(CxxSInt8StdVectorPtr value) {
  return CxxSInt8StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef(CxxSInt8StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef(CxxSInt8StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef(CxxSInt8StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef Make_CxxSInt8StdVectorPtrConstRef(CxxSInt8StdVectorPtr value) {
  return CxxSInt8StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef(CxxSInt8StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef(CxxSInt8StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef(CxxSInt8StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef Make_CxxSInt8StdVectorPtrRef(CxxSInt8StdVectorPtr value) {
  return CxxSInt8StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt8StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt8StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef CxxSInt8StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorPtrConstPtr.cxx_getAt on null CxxSInt8StdVectorPtrConstPtr";
  return CxxSInt8StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt8StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef CxxSInt8StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt8StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef CxxSInt8StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorPtrPtr.cxx_getAt on null CxxSInt8StdVectorPtrPtr";
  return CxxSInt8StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt8StdVectorMutablePtr()));
}

/// Same as for CxxSInt8StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef CxxSInt8StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrPtr.cxx_setAt(Index i, CxxSInt8StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorPtrPtr.cxx_setAt on null CxxSInt8StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxSInt8StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef(CxxSInt8StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef.=(CxxSInt8StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt8StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtr CxxSInt8StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorPtrConstRef.cxx_get on null CxxSInt8StdVectorPtrConstRef";
  return this.ptr->{ CxxSInt8StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef.cxx_set(CxxSInt8StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorPtrRef.cxx_set on null CxxSInt8StdVectorPtrRef";
  this.ptr->{ CxxSInt8StdVectorPtr } = value;
}

/// Assignment of CxxSInt8StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef.=(CxxSInt8StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt8StdVectorConstPtr] EDK[CxxSInt8StdVectorConstPtr] LIB[std::vector< int8_t > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrConstPtr] EDK[CxxSInt8StdVectorConstPtrConstPtr] LIB[std::vector< int8_t > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrConstPtr] EDK[CxxSInt8StdVectorConstPtrConstPtr] LIB[std::vector< int8_t > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrConstPtr.cxx_size on null CxxSInt8StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrConstPtr] EDK[CxxSInt8StdVectorConstPtrConstPtr] LIB[std::vector< int8_t > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxSInt8StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrPtr] EDK[CxxSInt8StdVectorConstPtrMutablePtr] LIB[std::vector< int8_t > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrPtr] EDK[CxxSInt8StdVectorConstPtrMutablePtr] LIB[std::vector< int8_t > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrPtr.cxx_size on null CxxSInt8StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrPtr.cxx_reserve on null CxxSInt8StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrPtr.cxx_push_back!(
    SInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrPtr.cxx_push_back on null CxxSInt8StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrPtr.cxx_pop_back on null CxxSInt8StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrPtr.push_back!(
    in
    SInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrPtr] EDK[CxxSInt8StdVectorConstPtrMutablePtr] LIB[std::vector< int8_t > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrPtr.cxx_getAtIndex on null CxxSInt8StdVectorConstPtrPtr";
    return this.ptr->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrPtr] EDK[CxxSInt8StdVectorConstPtrMutablePtr] LIB[std::vector< int8_t > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrPtr.cxx_setAtIndex on null CxxSInt8StdVectorConstPtrPtr";
    this.ptr->{ CxxSInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrConstRef] EDK[CxxSInt8StdVectorConstPtrConstRef] LIB[std::vector< int8_t > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrConstRef] EDK[CxxSInt8StdVectorConstPtrConstRef] LIB[std::vector< int8_t > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrConstRef] EDK[CxxSInt8StdVectorConstPtrConstRef] LIB[std::vector< int8_t > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrConstRef.cxx_size on null CxxSInt8StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrConstRef] EDK[CxxSInt8StdVectorConstPtrConstRef] LIB[std::vector< int8_t > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxSInt8StdVectorConstPtrConstRef";
    return this.ptr->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrRef] EDK[CxxSInt8StdVectorConstPtrMutableRef] LIB[std::vector< int8_t > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrRef] EDK[CxxSInt8StdVectorConstPtrMutableRef] LIB[std::vector< int8_t > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrRef.cxx_size on null CxxSInt8StdVectorConstPtrRef";
    return
    this.ptr->{ CxxSInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrRef.cxx_reserve on null CxxSInt8StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrRef.cxx_push_back!(
    SInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrRef.cxx_push_back on null CxxSInt8StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrRef.cxx_pop_back on null CxxSInt8StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt8StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrRef.push_back!(
    in
    SInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt8StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrRef] EDK[CxxSInt8StdVectorConstPtrMutableRef] LIB[std::vector< int8_t > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8ConstRef
CxxSInt8StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrRef.cxx_getAtIndex on null CxxSInt8StdVectorConstPtrRef";
    return this.ptr->{ CxxSInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt8StdVectorConstPtrRef] EDK[CxxSInt8StdVectorConstPtrMutableRef] LIB[std::vector< int8_t > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt8StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt8StdVectorConstPtrRef.cxx_setAtIndex on null CxxSInt8StdVectorConstPtrRef";
    this.ptr->{ CxxSInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt8StdVectorConstPtrConstPtr
// CxxSInt8StdVectorConstPtrPtr
// CxxSInt8StdVectorConstPtrConstRef
// CxxSInt8StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstPtr(CxxSInt8StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstPtr(CxxSInt8StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstPtr(CxxSInt8StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstPtr Make_CxxSInt8StdVectorConstPtrConstPtr(CxxSInt8StdVectorConstPtr value) {
  return CxxSInt8StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrPtr(CxxSInt8StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrPtr(CxxSInt8StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrPtr(CxxSInt8StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrPtr Make_CxxSInt8StdVectorConstPtrPtr(CxxSInt8StdVectorConstPtr value) {
  return CxxSInt8StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef(CxxSInt8StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef(CxxSInt8StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef(CxxSInt8StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef Make_CxxSInt8StdVectorConstPtrConstRef(CxxSInt8StdVectorConstPtr value) {
  return CxxSInt8StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef(CxxSInt8StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef(CxxSInt8StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt8StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef(CxxSInt8StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef Make_CxxSInt8StdVectorConstPtrRef(CxxSInt8StdVectorConstPtr value) {
  return CxxSInt8StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt8StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt8StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt8StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef CxxSInt8StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorConstPtrConstPtr.cxx_getAt on null CxxSInt8StdVectorConstPtrConstPtr";
  return CxxSInt8StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt8StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef CxxSInt8StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt8StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef CxxSInt8StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorConstPtrPtr.cxx_getAt on null CxxSInt8StdVectorConstPtrPtr";
  return CxxSInt8StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt8StdVectorConstPtr()));
}

/// Same as for CxxSInt8StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef CxxSInt8StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrPtr.cxx_setAt(Index i, CxxSInt8StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorConstPtrPtr.cxx_setAt on null CxxSInt8StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxSInt8StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef(CxxSInt8StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef.=(CxxSInt8StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt8StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtr CxxSInt8StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorConstPtrConstRef.cxx_get on null CxxSInt8StdVectorConstPtrConstRef";
  return this.ptr->{ CxxSInt8StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef.cxx_set(CxxSInt8StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt8StdVectorConstPtrRef.cxx_set on null CxxSInt8StdVectorConstPtrRef";
  this.ptr->{ CxxSInt8StdVectorConstPtr } = value;
}

/// Assignment of CxxSInt8StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef.=(CxxSInt8StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt8StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt8] EDK[Fabric::EDK::KL::UInt8] LIB[uint8_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt8ConstPtr
// CxxUInt8Ptr
// CxxUInt8ConstRef
// CxxUInt8Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtr(UInt8 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtr(UInt8 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt8());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8ConstPtr permits CxxUInt8ConstPtr {
  private Data ptr;
  private UInt8 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtr(UInt8 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtr(io UInt8 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtr(Make_CxxUInt8ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8Ptr(UInt8 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8Ptr(UInt8 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt8());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8Ptr permits CxxUInt8Ptr {
  private Data ptr;
  private UInt8 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8Ptr(UInt8 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8Ptr(io UInt8 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8Ptr(Make_CxxUInt8Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef(UInt8 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef(UInt8 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt8());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8ConstRef permits CxxUInt8ConstRef {
  private Data ptr;
  private UInt8 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstRef(UInt8 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstRef(io UInt8 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef(Make_CxxUInt8ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8Ref(UInt8 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8Ref(UInt8 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt8());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8Ref permits CxxUInt8Ref {
  private Data ptr;
  private UInt8 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8Ref(UInt8 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8Ref(io UInt8 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8Ref(Make_CxxUInt8Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt8ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt8ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef CxxUInt8ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8ConstPtr.cxx_getAt on null CxxUInt8ConstPtr";
  return CxxUInt8ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_UInt8()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef CxxUInt8ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt8ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8Ref CxxUInt8Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8Ptr.cxx_getAt on null CxxUInt8Ptr";
  return CxxUInt8Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_UInt8()));
}

/// Same as for CxxUInt8ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8Ref CxxUInt8Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt8Ptr.cxx_setAt(Index i, UInt8 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8Ptr.cxx_setAt on null CxxUInt8Ptr";
  this.ptr.offset(i)->{ UInt8 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef(CxxUInt8ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef.=(CxxUInt8ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the UInt8 value
/// \dfgPresetOmit
/// \internal
UInt8 CxxUInt8ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8ConstRef.cxx_get on null CxxUInt8ConstRef";
  return this.ptr->{ UInt8 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt8Ref.cxx_set(UInt8 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8Ref.cxx_set on null CxxUInt8Ref";
  this.ptr->{ UInt8 } = value;
}

/// Assignment of UInt8
/// \dfgPresetOmit
/// \internal
CxxUInt8Ref.=(UInt8 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8Ptr] EDK[CxxUInt8MutablePtr] LIB[uint8_t *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt8PtrConstPtr
// CxxUInt8PtrPtr
// CxxUInt8PtrConstRef
// CxxUInt8PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstPtr(CxxUInt8Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstPtr(CxxUInt8Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8PtrConstPtr permits CxxUInt8PtrConstPtr {
  private Data ptr;
  private CxxUInt8Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8PtrConstPtr(CxxUInt8Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8PtrConstPtr(io CxxUInt8Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstPtr(Make_CxxUInt8PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrPtr(CxxUInt8Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrPtr(CxxUInt8Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8PtrPtr permits CxxUInt8PtrPtr {
  private Data ptr;
  private CxxUInt8Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8PtrPtr(CxxUInt8Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8PtrPtr(io CxxUInt8Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrPtr(Make_CxxUInt8PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef(CxxUInt8Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef(CxxUInt8Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8PtrConstRef permits CxxUInt8PtrConstRef {
  private Data ptr;
  private CxxUInt8Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8PtrConstRef(CxxUInt8Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8PtrConstRef(io CxxUInt8Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef(Make_CxxUInt8PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef(CxxUInt8Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef(CxxUInt8Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8PtrRef permits CxxUInt8PtrRef {
  private Data ptr;
  private CxxUInt8Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8PtrRef(CxxUInt8Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8PtrRef(io CxxUInt8Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef(Make_CxxUInt8PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt8PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt8PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef CxxUInt8PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8PtrConstPtr.cxx_getAt on null CxxUInt8PtrConstPtr";
  return CxxUInt8PtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt8MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef CxxUInt8PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt8PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef CxxUInt8PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8PtrPtr.cxx_getAt on null CxxUInt8PtrPtr";
  return CxxUInt8PtrRef(this.ptr.offset(index * __CxxSize_CxxUInt8MutablePtr()));
}

/// Same as for CxxUInt8PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef CxxUInt8PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrPtr.cxx_setAt(Index i, CxxUInt8Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8PtrPtr.cxx_setAt on null CxxUInt8PtrPtr";
  this.ptr.offset(i)->{ CxxUInt8Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef(CxxUInt8PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef.=(CxxUInt8PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt8Ptr value
/// \dfgPresetOmit
/// \internal
CxxUInt8Ptr CxxUInt8PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8PtrConstRef.cxx_get on null CxxUInt8PtrConstRef";
  return this.ptr->{ CxxUInt8Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef.cxx_set(CxxUInt8Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8PtrRef.cxx_set on null CxxUInt8PtrRef";
  this.ptr->{ CxxUInt8Ptr } = value;
}

/// Assignment of CxxUInt8Ptr
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef.=(CxxUInt8Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8ConstPtr] EDK[CxxUInt8ConstPtr] LIB[uint8_t const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt8ConstPtrConstPtr
// CxxUInt8ConstPtrPtr
// CxxUInt8ConstPtrConstRef
// CxxUInt8ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstPtr(CxxUInt8ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstPtr(CxxUInt8ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8ConstPtrConstPtr permits CxxUInt8ConstPtrConstPtr {
  private Data ptr;
  private CxxUInt8ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtrConstPtr(CxxUInt8ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtrConstPtr(io CxxUInt8ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstPtr(Make_CxxUInt8ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrPtr(CxxUInt8ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrPtr(CxxUInt8ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8ConstPtrPtr permits CxxUInt8ConstPtrPtr {
  private Data ptr;
  private CxxUInt8ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtrPtr(CxxUInt8ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtrPtr(io CxxUInt8ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrPtr(Make_CxxUInt8ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef(CxxUInt8ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef(CxxUInt8ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8ConstPtrConstRef permits CxxUInt8ConstPtrConstRef {
  private Data ptr;
  private CxxUInt8ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtrConstRef(CxxUInt8ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtrConstRef(io CxxUInt8ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef(Make_CxxUInt8ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef(CxxUInt8ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef(CxxUInt8ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt8ConstPtrRef permits CxxUInt8ConstPtrRef {
  private Data ptr;
  private CxxUInt8ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtrRef(CxxUInt8ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt8ConstPtrRef(io CxxUInt8ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef(Make_CxxUInt8ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt8ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt8ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef CxxUInt8ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8ConstPtrConstPtr.cxx_getAt on null CxxUInt8ConstPtrConstPtr";
  return CxxUInt8ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt8ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef CxxUInt8ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt8ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef CxxUInt8ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8ConstPtrPtr.cxx_getAt on null CxxUInt8ConstPtrPtr";
  return CxxUInt8ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt8ConstPtr()));
}

/// Same as for CxxUInt8ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef CxxUInt8ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrPtr.cxx_setAt(Index i, CxxUInt8ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8ConstPtrPtr.cxx_setAt on null CxxUInt8ConstPtrPtr";
  this.ptr.offset(i)->{ CxxUInt8ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef(CxxUInt8ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef.=(CxxUInt8ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt8ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtr CxxUInt8ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8ConstPtrConstRef.cxx_get on null CxxUInt8ConstPtrConstRef";
  return this.ptr->{ CxxUInt8ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef.cxx_set(CxxUInt8ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8ConstPtrRef.cxx_set on null CxxUInt8ConstPtrRef";
  this.ptr->{ CxxUInt8ConstPtr } = value;
}

/// Assignment of CxxUInt8ConstPtr
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef.=(CxxUInt8ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector(
    CxxUInt8StdVector that
    ) = "Kludge__CxxUInt8StdVector__MU__copy_ctor__8ab539e14e6a4e1d8494873796b9ffbb";

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector.__ctor(
    ) = "Kludge__CxxUInt8StdVector__MU__ctor__ed9c67ae6dff766e9d79078e2dceab6d";

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxUInt8StdVector__MU__ctor__73af9158cdcf48bcad749d81ef7e2978";

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector.__ctor(
    CxxUInt8ConstPtr _arg0,
    CxxUInt8ConstPtr _arg1
    ) = "Kludge__CxxUInt8StdVector__MU__ctor__6bc45cf989689ec2ffb63adb2034adee";

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector(
    CxxUInt8ConstPtr _arg0,
    CxxUInt8ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector(
    in
    UInt8
    _arg0
    
    ,
    in
    UInt8
    _arg1
    
    
    ) {
    
    CxxUInt8ConstPtr _arg0__cxx = Make_CxxUInt8ConstPtr(_arg0);
    
    CxxUInt8ConstPtr _arg1__cxx = Make_CxxUInt8ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxUInt8StdVector() = "Kludge__CxxUInt8StdVector__MU__dtor__c61294e2671af39d3aab1c6ce192effe";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVector.cxx_size?(
    )
 = "Kludge__CxxUInt8StdVector__CO__meth_size__ebabc60ca06bd1783d1867d14ef8871b";

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxUInt8StdVector__MU__meth_reserve__338777342a6e3872e04198a62e117178";

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVector.cxx_push_back!(
    UInt8 _arg0
    )
 = "Kludge__CxxUInt8StdVector__MU__meth_push_back__dca6e9e6785b05026e005b094d868602";

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxUInt8StdVector__MU__meth_pop_back__09d5b10b5bfe7d1290873c30109157cd";

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVector.push_back!(
    in
    UInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxUInt8StdVector.=(
    CxxUInt8StdVector that
    ) = "Kludge__CxxUInt8StdVector__MU__simple_ass_op__7dba2fd0322ac2f5ae861dce5018789b";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxUInt8StdVector__CO__get_ind_op__efa6355d56b97a9da932be4495b2c55d";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt8ConstRef value
    )
  = "Kludge__CxxUInt8StdVector__MU__set_ind_op__024d817fbafc6b2750adfecb6ac679bd";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector(UInt8 array<>) {
  this = CxxUInt8StdVector(
    CxxUInt8ConstPtr(array, 0),
    CxxUInt8ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector Make_CxxUInt8StdVector(UInt8 array<>) {
  return CxxUInt8StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline UInt8[] Make_UInt8VariableArray(CxxUInt8StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  UInt8 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxUInt8ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector.appendDesc(io String string) {
  string += "CxxUInt8StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVector] EDK[Fabric_EDK_KL_CxxUInt8StdVector] LIB[std::vector< unsigned char >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtr] EDK[CxxUInt8StdVectorConstPtr] LIB[std::vector< unsigned char > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtr] EDK[CxxUInt8StdVectorConstPtr] LIB[std::vector< unsigned char > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtr.cxx_size on null CxxUInt8StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtr] EDK[CxxUInt8StdVectorConstPtr] LIB[std::vector< unsigned char > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtr.cxx_getAtIndex on null CxxUInt8StdVectorConstPtr";
    return this.ptr.data()->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtr] EDK[CxxUInt8StdVectorMutablePtr] LIB[std::vector< unsigned char > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtr] EDK[CxxUInt8StdVectorMutablePtr] LIB[std::vector< unsigned char > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtr.cxx_size on null CxxUInt8StdVectorPtr";
    return
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtr.cxx_reserve on null CxxUInt8StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtr.cxx_push_back!(
    UInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtr.cxx_push_back on null CxxUInt8StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtr.cxx_pop_back on null CxxUInt8StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtr.push_back!(
    in
    UInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtr] EDK[CxxUInt8StdVectorMutablePtr] LIB[std::vector< unsigned char > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtr.cxx_getAtIndex on null CxxUInt8StdVectorPtr";
    return this.ptr.data()->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtr] EDK[CxxUInt8StdVectorMutablePtr] LIB[std::vector< unsigned char > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtr.cxx_setAtIndex on null CxxUInt8StdVectorPtr";
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstRef] EDK[CxxUInt8StdVectorConstRef] LIB[std::vector< unsigned char > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstRef] EDK[CxxUInt8StdVectorConstRef] LIB[std::vector< unsigned char > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstRef] EDK[CxxUInt8StdVectorConstRef] LIB[std::vector< unsigned char > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstRef.cxx_size on null CxxUInt8StdVectorConstRef";
    return
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstRef] EDK[CxxUInt8StdVectorConstRef] LIB[std::vector< unsigned char > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstRef.cxx_getAtIndex on null CxxUInt8StdVectorConstRef";
    return this.ptr.data()->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorRef] EDK[CxxUInt8StdVectorMutableRef] LIB[std::vector< unsigned char > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorRef] EDK[CxxUInt8StdVectorMutableRef] LIB[std::vector< unsigned char > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorRef.cxx_size on null CxxUInt8StdVectorRef";
    return
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorRef.cxx_reserve on null CxxUInt8StdVectorRef";
    
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorRef.cxx_push_back!(
    UInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorRef.cxx_push_back on null CxxUInt8StdVectorRef";
    
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorRef.cxx_pop_back on null CxxUInt8StdVectorRef";
    
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorRef.push_back!(
    in
    UInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorRef] EDK[CxxUInt8StdVectorMutableRef] LIB[std::vector< unsigned char > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorRef.cxx_getAtIndex on null CxxUInt8StdVectorRef";
    return this.ptr.data()->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorRef] EDK[CxxUInt8StdVectorMutableRef] LIB[std::vector< unsigned char > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorRef.cxx_setAtIndex on null CxxUInt8StdVectorRef";
    this.ptr.data()->{ CxxUInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt8StdVectorConstPtr
// CxxUInt8StdVectorPtr
// CxxUInt8StdVectorConstRef
// CxxUInt8StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtr(CxxUInt8StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtr(CxxUInt8StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt8StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtr(CxxUInt8StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtr Make_CxxUInt8StdVectorConstPtr(CxxUInt8StdVector value) {
  return CxxUInt8StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtr(CxxUInt8StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtr(CxxUInt8StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt8StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtr(CxxUInt8StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtr Make_CxxUInt8StdVectorPtr(CxxUInt8StdVector value) {
  return CxxUInt8StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef(CxxUInt8StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef(CxxUInt8StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt8StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef(CxxUInt8StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef Make_CxxUInt8StdVectorConstRef(CxxUInt8StdVector value) {
  return CxxUInt8StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef(CxxUInt8StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef(CxxUInt8StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt8StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef(CxxUInt8StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef Make_CxxUInt8StdVectorRef(CxxUInt8StdVector value) {
  return CxxUInt8StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt8StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt8StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef CxxUInt8StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorConstPtr.cxx_getAt on null CxxUInt8StdVectorConstPtr";
  return CxxUInt8StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt8StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef CxxUInt8StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt8StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef CxxUInt8StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorPtr.cxx_getAt on null CxxUInt8StdVectorPtr";
  return CxxUInt8StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt8StdVector()));
}

/// Same as for CxxUInt8StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef CxxUInt8StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtr.cxx_setAt(Index i, CxxUInt8StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorPtr.cxx_setAt on null CxxUInt8StdVectorPtr";
  this.ptr.offset(i)->{ CxxUInt8StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef(CxxUInt8StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef.=(CxxUInt8StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt8StdVector value
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVector CxxUInt8StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorConstRef.cxx_get on null CxxUInt8StdVectorConstRef";
  return this.ptr.data()->{ CxxUInt8StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef.cxx_set(CxxUInt8StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorRef.cxx_set on null CxxUInt8StdVectorRef";
  this.ptr.data()->{ CxxUInt8StdVector } = value;
}

/// Assignment of CxxUInt8StdVector
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef.=(CxxUInt8StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVectorPtr] EDK[CxxUInt8StdVectorMutablePtr] LIB[std::vector< unsigned char > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrConstPtr] EDK[CxxUInt8StdVectorPtrConstPtr] LIB[std::vector< unsigned char > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrConstPtr] EDK[CxxUInt8StdVectorPtrConstPtr] LIB[std::vector< unsigned char > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrConstPtr.cxx_size on null CxxUInt8StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrConstPtr] EDK[CxxUInt8StdVectorPtrConstPtr] LIB[std::vector< unsigned char > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrConstPtr.cxx_getAtIndex on null CxxUInt8StdVectorPtrConstPtr";
    return this.ptr->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrPtr] EDK[CxxUInt8StdVectorPtrMutablePtr] LIB[std::vector< unsigned char > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrPtr] EDK[CxxUInt8StdVectorPtrMutablePtr] LIB[std::vector< unsigned char > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrPtr.cxx_size on null CxxUInt8StdVectorPtrPtr";
    return
    this.ptr->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrPtr.cxx_reserve on null CxxUInt8StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrPtr.cxx_push_back!(
    UInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrPtr.cxx_push_back on null CxxUInt8StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrPtr.cxx_pop_back on null CxxUInt8StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrPtr.push_back!(
    in
    UInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrPtr] EDK[CxxUInt8StdVectorPtrMutablePtr] LIB[std::vector< unsigned char > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrPtr.cxx_getAtIndex on null CxxUInt8StdVectorPtrPtr";
    return this.ptr->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrPtr] EDK[CxxUInt8StdVectorPtrMutablePtr] LIB[std::vector< unsigned char > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrPtr.cxx_setAtIndex on null CxxUInt8StdVectorPtrPtr";
    this.ptr->{ CxxUInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrConstRef] EDK[CxxUInt8StdVectorPtrConstRef] LIB[std::vector< unsigned char > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrConstRef] EDK[CxxUInt8StdVectorPtrConstRef] LIB[std::vector< unsigned char > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrConstRef] EDK[CxxUInt8StdVectorPtrConstRef] LIB[std::vector< unsigned char > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrConstRef.cxx_size on null CxxUInt8StdVectorPtrConstRef";
    return
    this.ptr->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrConstRef] EDK[CxxUInt8StdVectorPtrConstRef] LIB[std::vector< unsigned char > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrConstRef.cxx_getAtIndex on null CxxUInt8StdVectorPtrConstRef";
    return this.ptr->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrRef] EDK[CxxUInt8StdVectorPtrMutableRef] LIB[std::vector< unsigned char > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrRef] EDK[CxxUInt8StdVectorPtrMutableRef] LIB[std::vector< unsigned char > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrRef.cxx_size on null CxxUInt8StdVectorPtrRef";
    return
    this.ptr->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrRef.cxx_reserve on null CxxUInt8StdVectorPtrRef";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrRef.cxx_push_back!(
    UInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrRef.cxx_push_back on null CxxUInt8StdVectorPtrRef";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrRef.cxx_pop_back on null CxxUInt8StdVectorPtrRef";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrRef.push_back!(
    in
    UInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrRef] EDK[CxxUInt8StdVectorPtrMutableRef] LIB[std::vector< unsigned char > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrRef.cxx_getAtIndex on null CxxUInt8StdVectorPtrRef";
    return this.ptr->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorPtrRef] EDK[CxxUInt8StdVectorPtrMutableRef] LIB[std::vector< unsigned char > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorPtrRef.cxx_setAtIndex on null CxxUInt8StdVectorPtrRef";
    this.ptr->{ CxxUInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt8StdVectorPtrConstPtr
// CxxUInt8StdVectorPtrPtr
// CxxUInt8StdVectorPtrConstRef
// CxxUInt8StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstPtr(CxxUInt8StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstPtr(CxxUInt8StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstPtr(CxxUInt8StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstPtr Make_CxxUInt8StdVectorPtrConstPtr(CxxUInt8StdVectorPtr value) {
  return CxxUInt8StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrPtr(CxxUInt8StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrPtr(CxxUInt8StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrPtr(CxxUInt8StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrPtr Make_CxxUInt8StdVectorPtrPtr(CxxUInt8StdVectorPtr value) {
  return CxxUInt8StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef(CxxUInt8StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef(CxxUInt8StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef(CxxUInt8StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef Make_CxxUInt8StdVectorPtrConstRef(CxxUInt8StdVectorPtr value) {
  return CxxUInt8StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef(CxxUInt8StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef(CxxUInt8StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef(CxxUInt8StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef Make_CxxUInt8StdVectorPtrRef(CxxUInt8StdVectorPtr value) {
  return CxxUInt8StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt8StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt8StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef CxxUInt8StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorPtrConstPtr.cxx_getAt on null CxxUInt8StdVectorPtrConstPtr";
  return CxxUInt8StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt8StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef CxxUInt8StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt8StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef CxxUInt8StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorPtrPtr.cxx_getAt on null CxxUInt8StdVectorPtrPtr";
  return CxxUInt8StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt8StdVectorMutablePtr()));
}

/// Same as for CxxUInt8StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef CxxUInt8StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrPtr.cxx_setAt(Index i, CxxUInt8StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorPtrPtr.cxx_setAt on null CxxUInt8StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxUInt8StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef(CxxUInt8StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef.=(CxxUInt8StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt8StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtr CxxUInt8StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorPtrConstRef.cxx_get on null CxxUInt8StdVectorPtrConstRef";
  return this.ptr->{ CxxUInt8StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef.cxx_set(CxxUInt8StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorPtrRef.cxx_set on null CxxUInt8StdVectorPtrRef";
  this.ptr->{ CxxUInt8StdVectorPtr } = value;
}

/// Assignment of CxxUInt8StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef.=(CxxUInt8StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt8StdVectorConstPtr] EDK[CxxUInt8StdVectorConstPtr] LIB[std::vector< unsigned char > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrConstPtr] EDK[CxxUInt8StdVectorConstPtrConstPtr] LIB[std::vector< unsigned char > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrConstPtr] EDK[CxxUInt8StdVectorConstPtrConstPtr] LIB[std::vector< unsigned char > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrConstPtr.cxx_size on null CxxUInt8StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrConstPtr] EDK[CxxUInt8StdVectorConstPtrConstPtr] LIB[std::vector< unsigned char > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxUInt8StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrPtr] EDK[CxxUInt8StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned char > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrPtr] EDK[CxxUInt8StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned char > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrPtr.cxx_size on null CxxUInt8StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrPtr.cxx_reserve on null CxxUInt8StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrPtr.cxx_push_back!(
    UInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrPtr.cxx_push_back on null CxxUInt8StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrPtr.cxx_pop_back on null CxxUInt8StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrPtr.push_back!(
    in
    UInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrPtr] EDK[CxxUInt8StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned char > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrPtr.cxx_getAtIndex on null CxxUInt8StdVectorConstPtrPtr";
    return this.ptr->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrPtr] EDK[CxxUInt8StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned char > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrPtr.cxx_setAtIndex on null CxxUInt8StdVectorConstPtrPtr";
    this.ptr->{ CxxUInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrConstRef] EDK[CxxUInt8StdVectorConstPtrConstRef] LIB[std::vector< unsigned char > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrConstRef] EDK[CxxUInt8StdVectorConstPtrConstRef] LIB[std::vector< unsigned char > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrConstRef] EDK[CxxUInt8StdVectorConstPtrConstRef] LIB[std::vector< unsigned char > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrConstRef.cxx_size on null CxxUInt8StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrConstRef] EDK[CxxUInt8StdVectorConstPtrConstRef] LIB[std::vector< unsigned char > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxUInt8StdVectorConstPtrConstRef";
    return this.ptr->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrRef] EDK[CxxUInt8StdVectorConstPtrMutableRef] LIB[std::vector< unsigned char > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrRef] EDK[CxxUInt8StdVectorConstPtrMutableRef] LIB[std::vector< unsigned char > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrRef.cxx_size on null CxxUInt8StdVectorConstPtrRef";
    return
    this.ptr->{ CxxUInt8StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrRef.cxx_reserve on null CxxUInt8StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrRef.cxx_push_back!(
    UInt8 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrRef.cxx_push_back on null CxxUInt8StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrRef.cxx_pop_back on null CxxUInt8StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt8StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrRef.push_back!(
    in
    UInt8
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt8StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt8StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrRef] EDK[CxxUInt8StdVectorConstPtrMutableRef] LIB[std::vector< unsigned char > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8ConstRef
CxxUInt8StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrRef.cxx_getAtIndex on null CxxUInt8StdVectorConstPtrRef";
    return this.ptr->{ CxxUInt8StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt8StdVectorConstPtrRef] EDK[CxxUInt8StdVectorConstPtrMutableRef] LIB[std::vector< unsigned char > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt8StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt8ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt8StdVectorConstPtrRef.cxx_setAtIndex on null CxxUInt8StdVectorConstPtrRef";
    this.ptr->{ CxxUInt8StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt8StdVectorConstPtrConstPtr
// CxxUInt8StdVectorConstPtrPtr
// CxxUInt8StdVectorConstPtrConstRef
// CxxUInt8StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstPtr(CxxUInt8StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstPtr(CxxUInt8StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstPtr(CxxUInt8StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstPtr Make_CxxUInt8StdVectorConstPtrConstPtr(CxxUInt8StdVectorConstPtr value) {
  return CxxUInt8StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrPtr(CxxUInt8StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrPtr(CxxUInt8StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrPtr(CxxUInt8StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrPtr Make_CxxUInt8StdVectorConstPtrPtr(CxxUInt8StdVectorConstPtr value) {
  return CxxUInt8StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef(CxxUInt8StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef(CxxUInt8StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef(CxxUInt8StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef Make_CxxUInt8StdVectorConstPtrConstRef(CxxUInt8StdVectorConstPtr value) {
  return CxxUInt8StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef(CxxUInt8StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef(CxxUInt8StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt8StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef(CxxUInt8StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef Make_CxxUInt8StdVectorConstPtrRef(CxxUInt8StdVectorConstPtr value) {
  return CxxUInt8StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt8StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt8StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt8StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef CxxUInt8StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorConstPtrConstPtr.cxx_getAt on null CxxUInt8StdVectorConstPtrConstPtr";
  return CxxUInt8StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt8StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef CxxUInt8StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt8StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef CxxUInt8StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorConstPtrPtr.cxx_getAt on null CxxUInt8StdVectorConstPtrPtr";
  return CxxUInt8StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt8StdVectorConstPtr()));
}

/// Same as for CxxUInt8StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef CxxUInt8StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrPtr.cxx_setAt(Index i, CxxUInt8StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorConstPtrPtr.cxx_setAt on null CxxUInt8StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxUInt8StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef(CxxUInt8StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef.=(CxxUInt8StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt8StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtr CxxUInt8StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorConstPtrConstRef.cxx_get on null CxxUInt8StdVectorConstPtrConstRef";
  return this.ptr->{ CxxUInt8StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef.cxx_set(CxxUInt8StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt8StdVectorConstPtrRef.cxx_set on null CxxUInt8StdVectorConstPtrRef";
  this.ptr->{ CxxUInt8StdVectorConstPtr } = value;
}

/// Assignment of CxxUInt8StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef.=(CxxUInt8StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt8StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt16] EDK[Fabric::EDK::KL::SInt16] LIB[int16_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt16] EDK[Fabric::EDK::KL::SInt16] LIB[int16_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt16ConstPtr
// CxxSInt16Ptr
// CxxSInt16ConstRef
// CxxSInt16Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtr(SInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtr(SInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt16());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16ConstPtr permits CxxSInt16ConstPtr {
  private Data ptr;
  private SInt16 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtr(SInt16 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtr(io SInt16 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtr(Make_CxxSInt16ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16Ptr(SInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16Ptr(SInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt16());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16Ptr permits CxxSInt16Ptr {
  private Data ptr;
  private SInt16 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16Ptr(SInt16 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16Ptr(io SInt16 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16Ptr(Make_CxxSInt16Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef(SInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef(SInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt16());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16ConstRef permits CxxSInt16ConstRef {
  private Data ptr;
  private SInt16 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstRef(SInt16 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstRef(io SInt16 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef(Make_CxxSInt16ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16Ref(SInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16Ref(SInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt16());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16Ref permits CxxSInt16Ref {
  private Data ptr;
  private SInt16 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16Ref(SInt16 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16Ref(io SInt16 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16Ref(Make_CxxSInt16Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt16ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt16ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef CxxSInt16ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16ConstPtr.cxx_getAt on null CxxSInt16ConstPtr";
  return CxxSInt16ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_SInt16()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef CxxSInt16ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt16ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16Ref CxxSInt16Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16Ptr.cxx_getAt on null CxxSInt16Ptr";
  return CxxSInt16Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_SInt16()));
}

/// Same as for CxxSInt16ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16Ref CxxSInt16Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt16Ptr.cxx_setAt(Index i, SInt16 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16Ptr.cxx_setAt on null CxxSInt16Ptr";
  this.ptr.offset(i)->{ SInt16 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef(CxxSInt16ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef.=(CxxSInt16ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the SInt16 value
/// \dfgPresetOmit
/// \internal
SInt16 CxxSInt16ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16ConstRef.cxx_get on null CxxSInt16ConstRef";
  return this.ptr->{ SInt16 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt16Ref.cxx_set(SInt16 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16Ref.cxx_set on null CxxSInt16Ref";
  this.ptr->{ SInt16 } = value;
}

/// Assignment of SInt16
/// \dfgPresetOmit
/// \internal
CxxSInt16Ref.=(SInt16 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16Ptr] EDK[CxxSInt16MutablePtr] LIB[int16_t *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt16PtrConstPtr
// CxxSInt16PtrPtr
// CxxSInt16PtrConstRef
// CxxSInt16PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstPtr(CxxSInt16Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstPtr(CxxSInt16Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16PtrConstPtr permits CxxSInt16PtrConstPtr {
  private Data ptr;
  private CxxSInt16Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16PtrConstPtr(CxxSInt16Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16PtrConstPtr(io CxxSInt16Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstPtr(Make_CxxSInt16PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrPtr(CxxSInt16Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrPtr(CxxSInt16Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16PtrPtr permits CxxSInt16PtrPtr {
  private Data ptr;
  private CxxSInt16Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16PtrPtr(CxxSInt16Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16PtrPtr(io CxxSInt16Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrPtr(Make_CxxSInt16PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef(CxxSInt16Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef(CxxSInt16Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16PtrConstRef permits CxxSInt16PtrConstRef {
  private Data ptr;
  private CxxSInt16Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16PtrConstRef(CxxSInt16Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16PtrConstRef(io CxxSInt16Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef(Make_CxxSInt16PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef(CxxSInt16Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef(CxxSInt16Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16PtrRef permits CxxSInt16PtrRef {
  private Data ptr;
  private CxxSInt16Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16PtrRef(CxxSInt16Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16PtrRef(io CxxSInt16Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef(Make_CxxSInt16PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt16PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt16PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef CxxSInt16PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16PtrConstPtr.cxx_getAt on null CxxSInt16PtrConstPtr";
  return CxxSInt16PtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt16MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef CxxSInt16PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt16PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef CxxSInt16PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16PtrPtr.cxx_getAt on null CxxSInt16PtrPtr";
  return CxxSInt16PtrRef(this.ptr.offset(index * __CxxSize_CxxSInt16MutablePtr()));
}

/// Same as for CxxSInt16PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef CxxSInt16PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrPtr.cxx_setAt(Index i, CxxSInt16Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16PtrPtr.cxx_setAt on null CxxSInt16PtrPtr";
  this.ptr.offset(i)->{ CxxSInt16Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef(CxxSInt16PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef.=(CxxSInt16PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt16Ptr value
/// \dfgPresetOmit
/// \internal
CxxSInt16Ptr CxxSInt16PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16PtrConstRef.cxx_get on null CxxSInt16PtrConstRef";
  return this.ptr->{ CxxSInt16Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef.cxx_set(CxxSInt16Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16PtrRef.cxx_set on null CxxSInt16PtrRef";
  this.ptr->{ CxxSInt16Ptr } = value;
}

/// Assignment of CxxSInt16Ptr
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef.=(CxxSInt16Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16ConstPtr] EDK[CxxSInt16ConstPtr] LIB[int16_t const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt16ConstPtrConstPtr
// CxxSInt16ConstPtrPtr
// CxxSInt16ConstPtrConstRef
// CxxSInt16ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstPtr(CxxSInt16ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstPtr(CxxSInt16ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16ConstPtrConstPtr permits CxxSInt16ConstPtrConstPtr {
  private Data ptr;
  private CxxSInt16ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtrConstPtr(CxxSInt16ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtrConstPtr(io CxxSInt16ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstPtr(Make_CxxSInt16ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrPtr(CxxSInt16ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrPtr(CxxSInt16ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16ConstPtrPtr permits CxxSInt16ConstPtrPtr {
  private Data ptr;
  private CxxSInt16ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtrPtr(CxxSInt16ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtrPtr(io CxxSInt16ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrPtr(Make_CxxSInt16ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef(CxxSInt16ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef(CxxSInt16ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16ConstPtrConstRef permits CxxSInt16ConstPtrConstRef {
  private Data ptr;
  private CxxSInt16ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtrConstRef(CxxSInt16ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtrConstRef(io CxxSInt16ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef(Make_CxxSInt16ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef(CxxSInt16ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef(CxxSInt16ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt16ConstPtrRef permits CxxSInt16ConstPtrRef {
  private Data ptr;
  private CxxSInt16ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtrRef(CxxSInt16ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt16ConstPtrRef(io CxxSInt16ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef(Make_CxxSInt16ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt16ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt16ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef CxxSInt16ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16ConstPtrConstPtr.cxx_getAt on null CxxSInt16ConstPtrConstPtr";
  return CxxSInt16ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt16ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef CxxSInt16ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt16ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef CxxSInt16ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16ConstPtrPtr.cxx_getAt on null CxxSInt16ConstPtrPtr";
  return CxxSInt16ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt16ConstPtr()));
}

/// Same as for CxxSInt16ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef CxxSInt16ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrPtr.cxx_setAt(Index i, CxxSInt16ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16ConstPtrPtr.cxx_setAt on null CxxSInt16ConstPtrPtr";
  this.ptr.offset(i)->{ CxxSInt16ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef(CxxSInt16ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef.=(CxxSInt16ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt16ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtr CxxSInt16ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16ConstPtrConstRef.cxx_get on null CxxSInt16ConstPtrConstRef";
  return this.ptr->{ CxxSInt16ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef.cxx_set(CxxSInt16ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16ConstPtrRef.cxx_set on null CxxSInt16ConstPtrRef";
  this.ptr->{ CxxSInt16ConstPtr } = value;
}

/// Assignment of CxxSInt16ConstPtr
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef.=(CxxSInt16ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector(
    CxxSInt16StdVector that
    ) = "Kludge__CxxSInt16StdVector__MU__copy_ctor__4d510ab42e4f3191b9f986035fc34ec9";

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector.__ctor(
    ) = "Kludge__CxxSInt16StdVector__MU__ctor__4c9b0e473ac2eeb3052aa281ca57cfb5";

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxSInt16StdVector__MU__ctor__880565fe37b2260117d95e88de329d0c";

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector.__ctor(
    CxxSInt16ConstPtr _arg0,
    CxxSInt16ConstPtr _arg1
    ) = "Kludge__CxxSInt16StdVector__MU__ctor__0ac780251c80cce56790c0fbbe5827c4";

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector(
    CxxSInt16ConstPtr _arg0,
    CxxSInt16ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector(
    in
    SInt16
    _arg0
    
    ,
    in
    SInt16
    _arg1
    
    
    ) {
    
    CxxSInt16ConstPtr _arg0__cxx = Make_CxxSInt16ConstPtr(_arg0);
    
    CxxSInt16ConstPtr _arg1__cxx = Make_CxxSInt16ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxSInt16StdVector() = "Kludge__CxxSInt16StdVector__MU__dtor__ed80d63d2572a974ba251d217e72ff0a";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVector.cxx_size?(
    )
 = "Kludge__CxxSInt16StdVector__CO__meth_size__8e67ff5576b8bda462c73183299d2cf8";

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxSInt16StdVector__MU__meth_reserve__2400da67eaf97ff8a66b41a997c99cb8";

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVector.cxx_push_back!(
    SInt16 _arg0
    )
 = "Kludge__CxxSInt16StdVector__MU__meth_push_back__ce580fc3abcfa25f5db8a51202f283b3";

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxSInt16StdVector__MU__meth_pop_back__33c89764284df9336cadd5be237cd964";

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVector.push_back!(
    in
    SInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxSInt16StdVector.=(
    CxxSInt16StdVector that
    ) = "Kludge__CxxSInt16StdVector__MU__simple_ass_op__6df20c08e43e4db1773f885b6628c87b";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxSInt16StdVector__CO__get_ind_op__f311264d8a6f92f2ac058e484998dac8";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt16ConstRef value
    )
  = "Kludge__CxxSInt16StdVector__MU__set_ind_op__b84731a724babb80a39dc303dd2dd1c1";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector(SInt16 array<>) {
  this = CxxSInt16StdVector(
    CxxSInt16ConstPtr(array, 0),
    CxxSInt16ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector Make_CxxSInt16StdVector(SInt16 array<>) {
  return CxxSInt16StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline SInt16[] Make_SInt16VariableArray(CxxSInt16StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  SInt16 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxSInt16ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector.appendDesc(io String string) {
  string += "CxxSInt16StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVector] EDK[Fabric_EDK_KL_CxxSInt16StdVector] LIB[std::vector< short >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtr] EDK[CxxSInt16StdVectorConstPtr] LIB[std::vector< short > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtr] EDK[CxxSInt16StdVectorConstPtr] LIB[std::vector< short > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtr.cxx_size on null CxxSInt16StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtr] EDK[CxxSInt16StdVectorConstPtr] LIB[std::vector< short > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtr.cxx_getAtIndex on null CxxSInt16StdVectorConstPtr";
    return this.ptr.data()->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtr] EDK[CxxSInt16StdVectorMutablePtr] LIB[std::vector< short > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtr] EDK[CxxSInt16StdVectorMutablePtr] LIB[std::vector< short > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtr.cxx_size on null CxxSInt16StdVectorPtr";
    return
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtr.cxx_reserve on null CxxSInt16StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtr.cxx_push_back!(
    SInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtr.cxx_push_back on null CxxSInt16StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtr.cxx_pop_back on null CxxSInt16StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtr.push_back!(
    in
    SInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtr] EDK[CxxSInt16StdVectorMutablePtr] LIB[std::vector< short > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtr.cxx_getAtIndex on null CxxSInt16StdVectorPtr";
    return this.ptr.data()->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtr] EDK[CxxSInt16StdVectorMutablePtr] LIB[std::vector< short > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtr.cxx_setAtIndex on null CxxSInt16StdVectorPtr";
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstRef] EDK[CxxSInt16StdVectorConstRef] LIB[std::vector< short > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstRef] EDK[CxxSInt16StdVectorConstRef] LIB[std::vector< short > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstRef] EDK[CxxSInt16StdVectorConstRef] LIB[std::vector< short > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstRef.cxx_size on null CxxSInt16StdVectorConstRef";
    return
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstRef] EDK[CxxSInt16StdVectorConstRef] LIB[std::vector< short > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstRef.cxx_getAtIndex on null CxxSInt16StdVectorConstRef";
    return this.ptr.data()->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorRef] EDK[CxxSInt16StdVectorMutableRef] LIB[std::vector< short > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorRef] EDK[CxxSInt16StdVectorMutableRef] LIB[std::vector< short > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorRef.cxx_size on null CxxSInt16StdVectorRef";
    return
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorRef.cxx_reserve on null CxxSInt16StdVectorRef";
    
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorRef.cxx_push_back!(
    SInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorRef.cxx_push_back on null CxxSInt16StdVectorRef";
    
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorRef.cxx_pop_back on null CxxSInt16StdVectorRef";
    
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorRef.push_back!(
    in
    SInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorRef] EDK[CxxSInt16StdVectorMutableRef] LIB[std::vector< short > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorRef.cxx_getAtIndex on null CxxSInt16StdVectorRef";
    return this.ptr.data()->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorRef] EDK[CxxSInt16StdVectorMutableRef] LIB[std::vector< short > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorRef.cxx_setAtIndex on null CxxSInt16StdVectorRef";
    this.ptr.data()->{ CxxSInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt16StdVectorConstPtr
// CxxSInt16StdVectorPtr
// CxxSInt16StdVectorConstRef
// CxxSInt16StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtr(CxxSInt16StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtr(CxxSInt16StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt16StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtr(CxxSInt16StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtr Make_CxxSInt16StdVectorConstPtr(CxxSInt16StdVector value) {
  return CxxSInt16StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtr(CxxSInt16StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtr(CxxSInt16StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt16StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtr(CxxSInt16StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtr Make_CxxSInt16StdVectorPtr(CxxSInt16StdVector value) {
  return CxxSInt16StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef(CxxSInt16StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef(CxxSInt16StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt16StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef(CxxSInt16StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef Make_CxxSInt16StdVectorConstRef(CxxSInt16StdVector value) {
  return CxxSInt16StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef(CxxSInt16StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef(CxxSInt16StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt16StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef(CxxSInt16StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef Make_CxxSInt16StdVectorRef(CxxSInt16StdVector value) {
  return CxxSInt16StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt16StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt16StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef CxxSInt16StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorConstPtr.cxx_getAt on null CxxSInt16StdVectorConstPtr";
  return CxxSInt16StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt16StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef CxxSInt16StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt16StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef CxxSInt16StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorPtr.cxx_getAt on null CxxSInt16StdVectorPtr";
  return CxxSInt16StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt16StdVector()));
}

/// Same as for CxxSInt16StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef CxxSInt16StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtr.cxx_setAt(Index i, CxxSInt16StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorPtr.cxx_setAt on null CxxSInt16StdVectorPtr";
  this.ptr.offset(i)->{ CxxSInt16StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef(CxxSInt16StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef.=(CxxSInt16StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt16StdVector value
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVector CxxSInt16StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorConstRef.cxx_get on null CxxSInt16StdVectorConstRef";
  return this.ptr.data()->{ CxxSInt16StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef.cxx_set(CxxSInt16StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorRef.cxx_set on null CxxSInt16StdVectorRef";
  this.ptr.data()->{ CxxSInt16StdVector } = value;
}

/// Assignment of CxxSInt16StdVector
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef.=(CxxSInt16StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVectorPtr] EDK[CxxSInt16StdVectorMutablePtr] LIB[std::vector< short > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrConstPtr] EDK[CxxSInt16StdVectorPtrConstPtr] LIB[std::vector< short > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrConstPtr] EDK[CxxSInt16StdVectorPtrConstPtr] LIB[std::vector< short > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrConstPtr.cxx_size on null CxxSInt16StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrConstPtr] EDK[CxxSInt16StdVectorPtrConstPtr] LIB[std::vector< short > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrConstPtr.cxx_getAtIndex on null CxxSInt16StdVectorPtrConstPtr";
    return this.ptr->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrPtr] EDK[CxxSInt16StdVectorPtrMutablePtr] LIB[std::vector< short > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrPtr] EDK[CxxSInt16StdVectorPtrMutablePtr] LIB[std::vector< short > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrPtr.cxx_size on null CxxSInt16StdVectorPtrPtr";
    return
    this.ptr->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrPtr.cxx_reserve on null CxxSInt16StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrPtr.cxx_push_back!(
    SInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrPtr.cxx_push_back on null CxxSInt16StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrPtr.cxx_pop_back on null CxxSInt16StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrPtr.push_back!(
    in
    SInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrPtr] EDK[CxxSInt16StdVectorPtrMutablePtr] LIB[std::vector< short > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrPtr.cxx_getAtIndex on null CxxSInt16StdVectorPtrPtr";
    return this.ptr->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrPtr] EDK[CxxSInt16StdVectorPtrMutablePtr] LIB[std::vector< short > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrPtr.cxx_setAtIndex on null CxxSInt16StdVectorPtrPtr";
    this.ptr->{ CxxSInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrConstRef] EDK[CxxSInt16StdVectorPtrConstRef] LIB[std::vector< short > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrConstRef] EDK[CxxSInt16StdVectorPtrConstRef] LIB[std::vector< short > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrConstRef] EDK[CxxSInt16StdVectorPtrConstRef] LIB[std::vector< short > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrConstRef.cxx_size on null CxxSInt16StdVectorPtrConstRef";
    return
    this.ptr->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrConstRef] EDK[CxxSInt16StdVectorPtrConstRef] LIB[std::vector< short > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrConstRef.cxx_getAtIndex on null CxxSInt16StdVectorPtrConstRef";
    return this.ptr->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrRef] EDK[CxxSInt16StdVectorPtrMutableRef] LIB[std::vector< short > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrRef] EDK[CxxSInt16StdVectorPtrMutableRef] LIB[std::vector< short > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrRef.cxx_size on null CxxSInt16StdVectorPtrRef";
    return
    this.ptr->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrRef.cxx_reserve on null CxxSInt16StdVectorPtrRef";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrRef.cxx_push_back!(
    SInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrRef.cxx_push_back on null CxxSInt16StdVectorPtrRef";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrRef.cxx_pop_back on null CxxSInt16StdVectorPtrRef";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorPtrRef.push_back!(
    in
    SInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrRef] EDK[CxxSInt16StdVectorPtrMutableRef] LIB[std::vector< short > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrRef.cxx_getAtIndex on null CxxSInt16StdVectorPtrRef";
    return this.ptr->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorPtrRef] EDK[CxxSInt16StdVectorPtrMutableRef] LIB[std::vector< short > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorPtrRef.cxx_setAtIndex on null CxxSInt16StdVectorPtrRef";
    this.ptr->{ CxxSInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt16StdVectorPtrConstPtr
// CxxSInt16StdVectorPtrPtr
// CxxSInt16StdVectorPtrConstRef
// CxxSInt16StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstPtr(CxxSInt16StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstPtr(CxxSInt16StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstPtr(CxxSInt16StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstPtr Make_CxxSInt16StdVectorPtrConstPtr(CxxSInt16StdVectorPtr value) {
  return CxxSInt16StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrPtr(CxxSInt16StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrPtr(CxxSInt16StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrPtr(CxxSInt16StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrPtr Make_CxxSInt16StdVectorPtrPtr(CxxSInt16StdVectorPtr value) {
  return CxxSInt16StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef(CxxSInt16StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef(CxxSInt16StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef(CxxSInt16StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef Make_CxxSInt16StdVectorPtrConstRef(CxxSInt16StdVectorPtr value) {
  return CxxSInt16StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef(CxxSInt16StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef(CxxSInt16StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef(CxxSInt16StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef Make_CxxSInt16StdVectorPtrRef(CxxSInt16StdVectorPtr value) {
  return CxxSInt16StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt16StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt16StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef CxxSInt16StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorPtrConstPtr.cxx_getAt on null CxxSInt16StdVectorPtrConstPtr";
  return CxxSInt16StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt16StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef CxxSInt16StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt16StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef CxxSInt16StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorPtrPtr.cxx_getAt on null CxxSInt16StdVectorPtrPtr";
  return CxxSInt16StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt16StdVectorMutablePtr()));
}

/// Same as for CxxSInt16StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef CxxSInt16StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrPtr.cxx_setAt(Index i, CxxSInt16StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorPtrPtr.cxx_setAt on null CxxSInt16StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxSInt16StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef(CxxSInt16StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef.=(CxxSInt16StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt16StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtr CxxSInt16StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorPtrConstRef.cxx_get on null CxxSInt16StdVectorPtrConstRef";
  return this.ptr->{ CxxSInt16StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef.cxx_set(CxxSInt16StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorPtrRef.cxx_set on null CxxSInt16StdVectorPtrRef";
  this.ptr->{ CxxSInt16StdVectorPtr } = value;
}

/// Assignment of CxxSInt16StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef.=(CxxSInt16StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt16StdVectorConstPtr] EDK[CxxSInt16StdVectorConstPtr] LIB[std::vector< short > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrConstPtr] EDK[CxxSInt16StdVectorConstPtrConstPtr] LIB[std::vector< short > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrConstPtr] EDK[CxxSInt16StdVectorConstPtrConstPtr] LIB[std::vector< short > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrConstPtr.cxx_size on null CxxSInt16StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrConstPtr] EDK[CxxSInt16StdVectorConstPtrConstPtr] LIB[std::vector< short > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxSInt16StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrPtr] EDK[CxxSInt16StdVectorConstPtrMutablePtr] LIB[std::vector< short > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrPtr] EDK[CxxSInt16StdVectorConstPtrMutablePtr] LIB[std::vector< short > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrPtr.cxx_size on null CxxSInt16StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrPtr.cxx_reserve on null CxxSInt16StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrPtr.cxx_push_back!(
    SInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrPtr.cxx_push_back on null CxxSInt16StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrPtr.cxx_pop_back on null CxxSInt16StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrPtr.push_back!(
    in
    SInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrPtr] EDK[CxxSInt16StdVectorConstPtrMutablePtr] LIB[std::vector< short > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrPtr.cxx_getAtIndex on null CxxSInt16StdVectorConstPtrPtr";
    return this.ptr->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrPtr] EDK[CxxSInt16StdVectorConstPtrMutablePtr] LIB[std::vector< short > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrPtr.cxx_setAtIndex on null CxxSInt16StdVectorConstPtrPtr";
    this.ptr->{ CxxSInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrConstRef] EDK[CxxSInt16StdVectorConstPtrConstRef] LIB[std::vector< short > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrConstRef] EDK[CxxSInt16StdVectorConstPtrConstRef] LIB[std::vector< short > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrConstRef] EDK[CxxSInt16StdVectorConstPtrConstRef] LIB[std::vector< short > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrConstRef.cxx_size on null CxxSInt16StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrConstRef] EDK[CxxSInt16StdVectorConstPtrConstRef] LIB[std::vector< short > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxSInt16StdVectorConstPtrConstRef";
    return this.ptr->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrRef] EDK[CxxSInt16StdVectorConstPtrMutableRef] LIB[std::vector< short > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrRef] EDK[CxxSInt16StdVectorConstPtrMutableRef] LIB[std::vector< short > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrRef.cxx_size on null CxxSInt16StdVectorConstPtrRef";
    return
    this.ptr->{ CxxSInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrRef.cxx_reserve on null CxxSInt16StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrRef.cxx_push_back!(
    SInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrRef.cxx_push_back on null CxxSInt16StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrRef.cxx_pop_back on null CxxSInt16StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrRef.push_back!(
    in
    SInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt16StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt16StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrRef] EDK[CxxSInt16StdVectorConstPtrMutableRef] LIB[std::vector< short > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16ConstRef
CxxSInt16StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrRef.cxx_getAtIndex on null CxxSInt16StdVectorConstPtrRef";
    return this.ptr->{ CxxSInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt16StdVectorConstPtrRef] EDK[CxxSInt16StdVectorConstPtrMutableRef] LIB[std::vector< short > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt16StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt16StdVectorConstPtrRef.cxx_setAtIndex on null CxxSInt16StdVectorConstPtrRef";
    this.ptr->{ CxxSInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt16StdVectorConstPtrConstPtr
// CxxSInt16StdVectorConstPtrPtr
// CxxSInt16StdVectorConstPtrConstRef
// CxxSInt16StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstPtr(CxxSInt16StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstPtr(CxxSInt16StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstPtr(CxxSInt16StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstPtr Make_CxxSInt16StdVectorConstPtrConstPtr(CxxSInt16StdVectorConstPtr value) {
  return CxxSInt16StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrPtr(CxxSInt16StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrPtr(CxxSInt16StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrPtr(CxxSInt16StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrPtr Make_CxxSInt16StdVectorConstPtrPtr(CxxSInt16StdVectorConstPtr value) {
  return CxxSInt16StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef(CxxSInt16StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef(CxxSInt16StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef(CxxSInt16StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef Make_CxxSInt16StdVectorConstPtrConstRef(CxxSInt16StdVectorConstPtr value) {
  return CxxSInt16StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef(CxxSInt16StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef(CxxSInt16StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt16StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef(CxxSInt16StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef Make_CxxSInt16StdVectorConstPtrRef(CxxSInt16StdVectorConstPtr value) {
  return CxxSInt16StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt16StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt16StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt16StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef CxxSInt16StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorConstPtrConstPtr.cxx_getAt on null CxxSInt16StdVectorConstPtrConstPtr";
  return CxxSInt16StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt16StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef CxxSInt16StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt16StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef CxxSInt16StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorConstPtrPtr.cxx_getAt on null CxxSInt16StdVectorConstPtrPtr";
  return CxxSInt16StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt16StdVectorConstPtr()));
}

/// Same as for CxxSInt16StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef CxxSInt16StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrPtr.cxx_setAt(Index i, CxxSInt16StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorConstPtrPtr.cxx_setAt on null CxxSInt16StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxSInt16StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef(CxxSInt16StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef.=(CxxSInt16StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt16StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtr CxxSInt16StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorConstPtrConstRef.cxx_get on null CxxSInt16StdVectorConstPtrConstRef";
  return this.ptr->{ CxxSInt16StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef.cxx_set(CxxSInt16StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt16StdVectorConstPtrRef.cxx_set on null CxxSInt16StdVectorConstPtrRef";
  this.ptr->{ CxxSInt16StdVectorConstPtr } = value;
}

/// Assignment of CxxSInt16StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef.=(CxxSInt16StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt16StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt16] EDK[Fabric::EDK::KL::UInt16] LIB[uint16_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt16ConstPtr
// CxxUInt16Ptr
// CxxUInt16ConstRef
// CxxUInt16Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtr(UInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtr(UInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt16());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16ConstPtr permits CxxUInt16ConstPtr {
  private Data ptr;
  private UInt16 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtr(UInt16 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtr(io UInt16 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtr(Make_CxxUInt16ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16Ptr(UInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16Ptr(UInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt16());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16Ptr permits CxxUInt16Ptr {
  private Data ptr;
  private UInt16 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16Ptr(UInt16 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16Ptr(io UInt16 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16Ptr(Make_CxxUInt16Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef(UInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef(UInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt16());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16ConstRef permits CxxUInt16ConstRef {
  private Data ptr;
  private UInt16 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstRef(UInt16 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstRef(io UInt16 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef(Make_CxxUInt16ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16Ref(UInt16 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16Ref(UInt16 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt16());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16Ref permits CxxUInt16Ref {
  private Data ptr;
  private UInt16 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16Ref(UInt16 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16Ref(io UInt16 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16Ref(Make_CxxUInt16Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt16ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt16ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef CxxUInt16ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16ConstPtr.cxx_getAt on null CxxUInt16ConstPtr";
  return CxxUInt16ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_UInt16()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef CxxUInt16ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt16ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16Ref CxxUInt16Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16Ptr.cxx_getAt on null CxxUInt16Ptr";
  return CxxUInt16Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_UInt16()));
}

/// Same as for CxxUInt16ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16Ref CxxUInt16Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt16Ptr.cxx_setAt(Index i, UInt16 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16Ptr.cxx_setAt on null CxxUInt16Ptr";
  this.ptr.offset(i)->{ UInt16 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef(CxxUInt16ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef.=(CxxUInt16ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the UInt16 value
/// \dfgPresetOmit
/// \internal
UInt16 CxxUInt16ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16ConstRef.cxx_get on null CxxUInt16ConstRef";
  return this.ptr->{ UInt16 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt16Ref.cxx_set(UInt16 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16Ref.cxx_set on null CxxUInt16Ref";
  this.ptr->{ UInt16 } = value;
}

/// Assignment of UInt16
/// \dfgPresetOmit
/// \internal
CxxUInt16Ref.=(UInt16 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16Ptr] EDK[CxxUInt16MutablePtr] LIB[uint16_t *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt16PtrConstPtr
// CxxUInt16PtrPtr
// CxxUInt16PtrConstRef
// CxxUInt16PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstPtr(CxxUInt16Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstPtr(CxxUInt16Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16PtrConstPtr permits CxxUInt16PtrConstPtr {
  private Data ptr;
  private CxxUInt16Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16PtrConstPtr(CxxUInt16Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16PtrConstPtr(io CxxUInt16Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstPtr(Make_CxxUInt16PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrPtr(CxxUInt16Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrPtr(CxxUInt16Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16PtrPtr permits CxxUInt16PtrPtr {
  private Data ptr;
  private CxxUInt16Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16PtrPtr(CxxUInt16Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16PtrPtr(io CxxUInt16Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrPtr(Make_CxxUInt16PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef(CxxUInt16Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef(CxxUInt16Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16PtrConstRef permits CxxUInt16PtrConstRef {
  private Data ptr;
  private CxxUInt16Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16PtrConstRef(CxxUInt16Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16PtrConstRef(io CxxUInt16Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef(Make_CxxUInt16PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef(CxxUInt16Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef(CxxUInt16Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16PtrRef permits CxxUInt16PtrRef {
  private Data ptr;
  private CxxUInt16Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16PtrRef(CxxUInt16Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16PtrRef(io CxxUInt16Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef(Make_CxxUInt16PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt16PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt16PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef CxxUInt16PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16PtrConstPtr.cxx_getAt on null CxxUInt16PtrConstPtr";
  return CxxUInt16PtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt16MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef CxxUInt16PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt16PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef CxxUInt16PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16PtrPtr.cxx_getAt on null CxxUInt16PtrPtr";
  return CxxUInt16PtrRef(this.ptr.offset(index * __CxxSize_CxxUInt16MutablePtr()));
}

/// Same as for CxxUInt16PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef CxxUInt16PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrPtr.cxx_setAt(Index i, CxxUInt16Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16PtrPtr.cxx_setAt on null CxxUInt16PtrPtr";
  this.ptr.offset(i)->{ CxxUInt16Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef(CxxUInt16PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef.=(CxxUInt16PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt16Ptr value
/// \dfgPresetOmit
/// \internal
CxxUInt16Ptr CxxUInt16PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16PtrConstRef.cxx_get on null CxxUInt16PtrConstRef";
  return this.ptr->{ CxxUInt16Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef.cxx_set(CxxUInt16Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16PtrRef.cxx_set on null CxxUInt16PtrRef";
  this.ptr->{ CxxUInt16Ptr } = value;
}

/// Assignment of CxxUInt16Ptr
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef.=(CxxUInt16Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16ConstPtr] EDK[CxxUInt16ConstPtr] LIB[uint16_t const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt16ConstPtrConstPtr
// CxxUInt16ConstPtrPtr
// CxxUInt16ConstPtrConstRef
// CxxUInt16ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstPtr(CxxUInt16ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstPtr(CxxUInt16ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16ConstPtrConstPtr permits CxxUInt16ConstPtrConstPtr {
  private Data ptr;
  private CxxUInt16ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtrConstPtr(CxxUInt16ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtrConstPtr(io CxxUInt16ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstPtr(Make_CxxUInt16ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrPtr(CxxUInt16ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrPtr(CxxUInt16ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16ConstPtrPtr permits CxxUInt16ConstPtrPtr {
  private Data ptr;
  private CxxUInt16ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtrPtr(CxxUInt16ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtrPtr(io CxxUInt16ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrPtr(Make_CxxUInt16ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef(CxxUInt16ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef(CxxUInt16ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16ConstPtrConstRef permits CxxUInt16ConstPtrConstRef {
  private Data ptr;
  private CxxUInt16ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtrConstRef(CxxUInt16ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtrConstRef(io CxxUInt16ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef(Make_CxxUInt16ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef(CxxUInt16ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef(CxxUInt16ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt16ConstPtrRef permits CxxUInt16ConstPtrRef {
  private Data ptr;
  private CxxUInt16ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtrRef(CxxUInt16ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt16ConstPtrRef(io CxxUInt16ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef(Make_CxxUInt16ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt16ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt16ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef CxxUInt16ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16ConstPtrConstPtr.cxx_getAt on null CxxUInt16ConstPtrConstPtr";
  return CxxUInt16ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt16ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef CxxUInt16ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt16ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef CxxUInt16ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16ConstPtrPtr.cxx_getAt on null CxxUInt16ConstPtrPtr";
  return CxxUInt16ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt16ConstPtr()));
}

/// Same as for CxxUInt16ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef CxxUInt16ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrPtr.cxx_setAt(Index i, CxxUInt16ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16ConstPtrPtr.cxx_setAt on null CxxUInt16ConstPtrPtr";
  this.ptr.offset(i)->{ CxxUInt16ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef(CxxUInt16ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef.=(CxxUInt16ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt16ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtr CxxUInt16ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16ConstPtrConstRef.cxx_get on null CxxUInt16ConstPtrConstRef";
  return this.ptr->{ CxxUInt16ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef.cxx_set(CxxUInt16ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16ConstPtrRef.cxx_set on null CxxUInt16ConstPtrRef";
  this.ptr->{ CxxUInt16ConstPtr } = value;
}

/// Assignment of CxxUInt16ConstPtr
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef.=(CxxUInt16ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector(
    CxxUInt16StdVector that
    ) = "Kludge__CxxUInt16StdVector__MU__copy_ctor__2a6c2a59f6f6e050220ae3c61bdb3b1f";

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector.__ctor(
    ) = "Kludge__CxxUInt16StdVector__MU__ctor__8a271206ca283a206d5f5b2c11190bc8";

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxUInt16StdVector__MU__ctor__742e4329d9cb15e12c4e4485622270f3";

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector.__ctor(
    CxxUInt16ConstPtr _arg0,
    CxxUInt16ConstPtr _arg1
    ) = "Kludge__CxxUInt16StdVector__MU__ctor__a52f9d0e1500f4200966dc010f8a33ff";

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector(
    CxxUInt16ConstPtr _arg0,
    CxxUInt16ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector(
    in
    UInt16
    _arg0
    
    ,
    in
    UInt16
    _arg1
    
    
    ) {
    
    CxxUInt16ConstPtr _arg0__cxx = Make_CxxUInt16ConstPtr(_arg0);
    
    CxxUInt16ConstPtr _arg1__cxx = Make_CxxUInt16ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxUInt16StdVector() = "Kludge__CxxUInt16StdVector__MU__dtor__1a9c25f88604a27bd029e7d5cc45ecce";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVector.cxx_size?(
    )
 = "Kludge__CxxUInt16StdVector__CO__meth_size__555606c68aecc5553a5c3e33dbccd79a";

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxUInt16StdVector__MU__meth_reserve__1b0bca7b5b69eab577228db3acefe4d5";

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVector.cxx_push_back!(
    UInt16 _arg0
    )
 = "Kludge__CxxUInt16StdVector__MU__meth_push_back__37281385c583576584556951399b7320";

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxUInt16StdVector__MU__meth_pop_back__499bc332d044b061d13f42a0077a1431";

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVector.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxUInt16StdVector.=(
    CxxUInt16StdVector that
    ) = "Kludge__CxxUInt16StdVector__MU__simple_ass_op__8fc0d7f2dddfb47177afac6268cb2d13";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxUInt16StdVector__CO__get_ind_op__48ae4c3a3b1bb20b751745e2cd81eb20";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt16ConstRef value
    )
  = "Kludge__CxxUInt16StdVector__MU__set_ind_op__151e9045d98aee0f44c1f49fe6fba607";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector(UInt16 array<>) {
  this = CxxUInt16StdVector(
    CxxUInt16ConstPtr(array, 0),
    CxxUInt16ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector Make_CxxUInt16StdVector(UInt16 array<>) {
  return CxxUInt16StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline UInt16[] Make_UInt16VariableArray(CxxUInt16StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  UInt16 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxUInt16ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector.appendDesc(io String string) {
  string += "CxxUInt16StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVector] EDK[Fabric_EDK_KL_CxxUInt16StdVector] LIB[std::vector< unsigned short >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtr] EDK[CxxUInt16StdVectorConstPtr] LIB[std::vector< unsigned short > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtr] EDK[CxxUInt16StdVectorConstPtr] LIB[std::vector< unsigned short > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtr.cxx_size on null CxxUInt16StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtr] EDK[CxxUInt16StdVectorConstPtr] LIB[std::vector< unsigned short > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtr.cxx_getAtIndex on null CxxUInt16StdVectorConstPtr";
    return this.ptr.data()->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtr] EDK[CxxUInt16StdVectorMutablePtr] LIB[std::vector< unsigned short > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtr] EDK[CxxUInt16StdVectorMutablePtr] LIB[std::vector< unsigned short > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtr.cxx_size on null CxxUInt16StdVectorPtr";
    return
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtr.cxx_reserve on null CxxUInt16StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtr.cxx_push_back!(
    UInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtr.cxx_push_back on null CxxUInt16StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtr.cxx_pop_back on null CxxUInt16StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtr.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtr] EDK[CxxUInt16StdVectorMutablePtr] LIB[std::vector< unsigned short > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtr.cxx_getAtIndex on null CxxUInt16StdVectorPtr";
    return this.ptr.data()->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtr] EDK[CxxUInt16StdVectorMutablePtr] LIB[std::vector< unsigned short > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtr.cxx_setAtIndex on null CxxUInt16StdVectorPtr";
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstRef] EDK[CxxUInt16StdVectorConstRef] LIB[std::vector< unsigned short > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstRef] EDK[CxxUInt16StdVectorConstRef] LIB[std::vector< unsigned short > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstRef] EDK[CxxUInt16StdVectorConstRef] LIB[std::vector< unsigned short > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstRef.cxx_size on null CxxUInt16StdVectorConstRef";
    return
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstRef] EDK[CxxUInt16StdVectorConstRef] LIB[std::vector< unsigned short > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstRef.cxx_getAtIndex on null CxxUInt16StdVectorConstRef";
    return this.ptr.data()->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorRef] EDK[CxxUInt16StdVectorMutableRef] LIB[std::vector< unsigned short > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorRef] EDK[CxxUInt16StdVectorMutableRef] LIB[std::vector< unsigned short > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorRef.cxx_size on null CxxUInt16StdVectorRef";
    return
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorRef.cxx_reserve on null CxxUInt16StdVectorRef";
    
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorRef.cxx_push_back!(
    UInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorRef.cxx_push_back on null CxxUInt16StdVectorRef";
    
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorRef.cxx_pop_back on null CxxUInt16StdVectorRef";
    
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorRef.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorRef] EDK[CxxUInt16StdVectorMutableRef] LIB[std::vector< unsigned short > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorRef.cxx_getAtIndex on null CxxUInt16StdVectorRef";
    return this.ptr.data()->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorRef] EDK[CxxUInt16StdVectorMutableRef] LIB[std::vector< unsigned short > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorRef.cxx_setAtIndex on null CxxUInt16StdVectorRef";
    this.ptr.data()->{ CxxUInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt16StdVectorConstPtr
// CxxUInt16StdVectorPtr
// CxxUInt16StdVectorConstRef
// CxxUInt16StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtr(CxxUInt16StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtr(CxxUInt16StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt16StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtr(CxxUInt16StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtr Make_CxxUInt16StdVectorConstPtr(CxxUInt16StdVector value) {
  return CxxUInt16StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtr(CxxUInt16StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtr(CxxUInt16StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt16StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtr(CxxUInt16StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtr Make_CxxUInt16StdVectorPtr(CxxUInt16StdVector value) {
  return CxxUInt16StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef(CxxUInt16StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef(CxxUInt16StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt16StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef(CxxUInt16StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef Make_CxxUInt16StdVectorConstRef(CxxUInt16StdVector value) {
  return CxxUInt16StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef(CxxUInt16StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef(CxxUInt16StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt16StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef(CxxUInt16StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef Make_CxxUInt16StdVectorRef(CxxUInt16StdVector value) {
  return CxxUInt16StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt16StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt16StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef CxxUInt16StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorConstPtr.cxx_getAt on null CxxUInt16StdVectorConstPtr";
  return CxxUInt16StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt16StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef CxxUInt16StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt16StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef CxxUInt16StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorPtr.cxx_getAt on null CxxUInt16StdVectorPtr";
  return CxxUInt16StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt16StdVector()));
}

/// Same as for CxxUInt16StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef CxxUInt16StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtr.cxx_setAt(Index i, CxxUInt16StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorPtr.cxx_setAt on null CxxUInt16StdVectorPtr";
  this.ptr.offset(i)->{ CxxUInt16StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef(CxxUInt16StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef.=(CxxUInt16StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt16StdVector value
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVector CxxUInt16StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorConstRef.cxx_get on null CxxUInt16StdVectorConstRef";
  return this.ptr.data()->{ CxxUInt16StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef.cxx_set(CxxUInt16StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorRef.cxx_set on null CxxUInt16StdVectorRef";
  this.ptr.data()->{ CxxUInt16StdVector } = value;
}

/// Assignment of CxxUInt16StdVector
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef.=(CxxUInt16StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVectorPtr] EDK[CxxUInt16StdVectorMutablePtr] LIB[std::vector< unsigned short > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrConstPtr] EDK[CxxUInt16StdVectorPtrConstPtr] LIB[std::vector< unsigned short > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrConstPtr] EDK[CxxUInt16StdVectorPtrConstPtr] LIB[std::vector< unsigned short > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrConstPtr.cxx_size on null CxxUInt16StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrConstPtr] EDK[CxxUInt16StdVectorPtrConstPtr] LIB[std::vector< unsigned short > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrConstPtr.cxx_getAtIndex on null CxxUInt16StdVectorPtrConstPtr";
    return this.ptr->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrPtr] EDK[CxxUInt16StdVectorPtrMutablePtr] LIB[std::vector< unsigned short > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrPtr] EDK[CxxUInt16StdVectorPtrMutablePtr] LIB[std::vector< unsigned short > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrPtr.cxx_size on null CxxUInt16StdVectorPtrPtr";
    return
    this.ptr->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrPtr.cxx_reserve on null CxxUInt16StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrPtr.cxx_push_back!(
    UInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrPtr.cxx_push_back on null CxxUInt16StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrPtr.cxx_pop_back on null CxxUInt16StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrPtr.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrPtr] EDK[CxxUInt16StdVectorPtrMutablePtr] LIB[std::vector< unsigned short > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrPtr.cxx_getAtIndex on null CxxUInt16StdVectorPtrPtr";
    return this.ptr->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrPtr] EDK[CxxUInt16StdVectorPtrMutablePtr] LIB[std::vector< unsigned short > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrPtr.cxx_setAtIndex on null CxxUInt16StdVectorPtrPtr";
    this.ptr->{ CxxUInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrConstRef] EDK[CxxUInt16StdVectorPtrConstRef] LIB[std::vector< unsigned short > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrConstRef] EDK[CxxUInt16StdVectorPtrConstRef] LIB[std::vector< unsigned short > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrConstRef] EDK[CxxUInt16StdVectorPtrConstRef] LIB[std::vector< unsigned short > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrConstRef.cxx_size on null CxxUInt16StdVectorPtrConstRef";
    return
    this.ptr->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrConstRef] EDK[CxxUInt16StdVectorPtrConstRef] LIB[std::vector< unsigned short > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrConstRef.cxx_getAtIndex on null CxxUInt16StdVectorPtrConstRef";
    return this.ptr->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrRef] EDK[CxxUInt16StdVectorPtrMutableRef] LIB[std::vector< unsigned short > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrRef] EDK[CxxUInt16StdVectorPtrMutableRef] LIB[std::vector< unsigned short > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrRef.cxx_size on null CxxUInt16StdVectorPtrRef";
    return
    this.ptr->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrRef.cxx_reserve on null CxxUInt16StdVectorPtrRef";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrRef.cxx_push_back!(
    UInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrRef.cxx_push_back on null CxxUInt16StdVectorPtrRef";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrRef.cxx_pop_back on null CxxUInt16StdVectorPtrRef";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrRef.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrRef] EDK[CxxUInt16StdVectorPtrMutableRef] LIB[std::vector< unsigned short > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrRef.cxx_getAtIndex on null CxxUInt16StdVectorPtrRef";
    return this.ptr->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorPtrRef] EDK[CxxUInt16StdVectorPtrMutableRef] LIB[std::vector< unsigned short > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorPtrRef.cxx_setAtIndex on null CxxUInt16StdVectorPtrRef";
    this.ptr->{ CxxUInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt16StdVectorPtrConstPtr
// CxxUInt16StdVectorPtrPtr
// CxxUInt16StdVectorPtrConstRef
// CxxUInt16StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstPtr(CxxUInt16StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstPtr(CxxUInt16StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstPtr(CxxUInt16StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstPtr Make_CxxUInt16StdVectorPtrConstPtr(CxxUInt16StdVectorPtr value) {
  return CxxUInt16StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrPtr(CxxUInt16StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrPtr(CxxUInt16StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrPtr(CxxUInt16StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrPtr Make_CxxUInt16StdVectorPtrPtr(CxxUInt16StdVectorPtr value) {
  return CxxUInt16StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef(CxxUInt16StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef(CxxUInt16StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef(CxxUInt16StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef Make_CxxUInt16StdVectorPtrConstRef(CxxUInt16StdVectorPtr value) {
  return CxxUInt16StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef(CxxUInt16StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef(CxxUInt16StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef(CxxUInt16StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef Make_CxxUInt16StdVectorPtrRef(CxxUInt16StdVectorPtr value) {
  return CxxUInt16StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt16StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt16StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef CxxUInt16StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorPtrConstPtr.cxx_getAt on null CxxUInt16StdVectorPtrConstPtr";
  return CxxUInt16StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt16StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef CxxUInt16StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt16StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef CxxUInt16StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorPtrPtr.cxx_getAt on null CxxUInt16StdVectorPtrPtr";
  return CxxUInt16StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt16StdVectorMutablePtr()));
}

/// Same as for CxxUInt16StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef CxxUInt16StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrPtr.cxx_setAt(Index i, CxxUInt16StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorPtrPtr.cxx_setAt on null CxxUInt16StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxUInt16StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef(CxxUInt16StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef.=(CxxUInt16StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt16StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtr CxxUInt16StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorPtrConstRef.cxx_get on null CxxUInt16StdVectorPtrConstRef";
  return this.ptr->{ CxxUInt16StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef.cxx_set(CxxUInt16StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorPtrRef.cxx_set on null CxxUInt16StdVectorPtrRef";
  this.ptr->{ CxxUInt16StdVectorPtr } = value;
}

/// Assignment of CxxUInt16StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef.=(CxxUInt16StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt16StdVectorConstPtr] EDK[CxxUInt16StdVectorConstPtr] LIB[std::vector< unsigned short > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrConstPtr] EDK[CxxUInt16StdVectorConstPtrConstPtr] LIB[std::vector< unsigned short > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrConstPtr] EDK[CxxUInt16StdVectorConstPtrConstPtr] LIB[std::vector< unsigned short > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrConstPtr.cxx_size on null CxxUInt16StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrConstPtr] EDK[CxxUInt16StdVectorConstPtrConstPtr] LIB[std::vector< unsigned short > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxUInt16StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrPtr] EDK[CxxUInt16StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned short > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrPtr] EDK[CxxUInt16StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned short > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrPtr.cxx_size on null CxxUInt16StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrPtr.cxx_reserve on null CxxUInt16StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrPtr.cxx_push_back!(
    UInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrPtr.cxx_push_back on null CxxUInt16StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrPtr.cxx_pop_back on null CxxUInt16StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrPtr.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrPtr] EDK[CxxUInt16StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned short > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrPtr.cxx_getAtIndex on null CxxUInt16StdVectorConstPtrPtr";
    return this.ptr->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrPtr] EDK[CxxUInt16StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned short > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrPtr.cxx_setAtIndex on null CxxUInt16StdVectorConstPtrPtr";
    this.ptr->{ CxxUInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrConstRef] EDK[CxxUInt16StdVectorConstPtrConstRef] LIB[std::vector< unsigned short > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrConstRef] EDK[CxxUInt16StdVectorConstPtrConstRef] LIB[std::vector< unsigned short > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrConstRef] EDK[CxxUInt16StdVectorConstPtrConstRef] LIB[std::vector< unsigned short > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrConstRef.cxx_size on null CxxUInt16StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrConstRef] EDK[CxxUInt16StdVectorConstPtrConstRef] LIB[std::vector< unsigned short > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxUInt16StdVectorConstPtrConstRef";
    return this.ptr->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrRef] EDK[CxxUInt16StdVectorConstPtrMutableRef] LIB[std::vector< unsigned short > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrRef] EDK[CxxUInt16StdVectorConstPtrMutableRef] LIB[std::vector< unsigned short > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrRef.cxx_size on null CxxUInt16StdVectorConstPtrRef";
    return
    this.ptr->{ CxxUInt16StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrRef.cxx_reserve on null CxxUInt16StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrRef.cxx_push_back!(
    UInt16 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrRef.cxx_push_back on null CxxUInt16StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrRef.cxx_pop_back on null CxxUInt16StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt16StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt16StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrRef.push_back!(
    in
    UInt16
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt16StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrRef] EDK[CxxUInt16StdVectorConstPtrMutableRef] LIB[std::vector< unsigned short > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16ConstRef
CxxUInt16StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrRef.cxx_getAtIndex on null CxxUInt16StdVectorConstPtrRef";
    return this.ptr->{ CxxUInt16StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt16StdVectorConstPtrRef] EDK[CxxUInt16StdVectorConstPtrMutableRef] LIB[std::vector< unsigned short > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt16StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt16ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt16StdVectorConstPtrRef.cxx_setAtIndex on null CxxUInt16StdVectorConstPtrRef";
    this.ptr->{ CxxUInt16StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt16StdVectorConstPtrConstPtr
// CxxUInt16StdVectorConstPtrPtr
// CxxUInt16StdVectorConstPtrConstRef
// CxxUInt16StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstPtr(CxxUInt16StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstPtr(CxxUInt16StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstPtr(CxxUInt16StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstPtr Make_CxxUInt16StdVectorConstPtrConstPtr(CxxUInt16StdVectorConstPtr value) {
  return CxxUInt16StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrPtr(CxxUInt16StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrPtr(CxxUInt16StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrPtr(CxxUInt16StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrPtr Make_CxxUInt16StdVectorConstPtrPtr(CxxUInt16StdVectorConstPtr value) {
  return CxxUInt16StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef(CxxUInt16StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef(CxxUInt16StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef(CxxUInt16StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef Make_CxxUInt16StdVectorConstPtrConstRef(CxxUInt16StdVectorConstPtr value) {
  return CxxUInt16StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef(CxxUInt16StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef(CxxUInt16StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt16StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef(CxxUInt16StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef Make_CxxUInt16StdVectorConstPtrRef(CxxUInt16StdVectorConstPtr value) {
  return CxxUInt16StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt16StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt16StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt16StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef CxxUInt16StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorConstPtrConstPtr.cxx_getAt on null CxxUInt16StdVectorConstPtrConstPtr";
  return CxxUInt16StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt16StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef CxxUInt16StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt16StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef CxxUInt16StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorConstPtrPtr.cxx_getAt on null CxxUInt16StdVectorConstPtrPtr";
  return CxxUInt16StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt16StdVectorConstPtr()));
}

/// Same as for CxxUInt16StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef CxxUInt16StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrPtr.cxx_setAt(Index i, CxxUInt16StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorConstPtrPtr.cxx_setAt on null CxxUInt16StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxUInt16StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef(CxxUInt16StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef.=(CxxUInt16StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt16StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtr CxxUInt16StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorConstPtrConstRef.cxx_get on null CxxUInt16StdVectorConstPtrConstRef";
  return this.ptr->{ CxxUInt16StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef.cxx_set(CxxUInt16StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt16StdVectorConstPtrRef.cxx_set on null CxxUInt16StdVectorConstPtrRef";
  this.ptr->{ CxxUInt16StdVectorConstPtr } = value;
}

/// Assignment of CxxUInt16StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef.=(CxxUInt16StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt16StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt32] EDK[Fabric::EDK::KL::SInt32] LIB[int32_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt32ConstPtr
// CxxSInt32Ptr
// CxxSInt32ConstRef
// CxxSInt32Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtr(SInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtr(SInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32ConstPtr permits CxxSInt32ConstPtr {
  private Data ptr;
  private SInt32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtr(SInt32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtr(io SInt32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtr(Make_CxxSInt32ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32Ptr(SInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32Ptr(SInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32Ptr permits CxxSInt32Ptr {
  private Data ptr;
  private SInt32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32Ptr(SInt32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32Ptr(io SInt32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32Ptr(Make_CxxSInt32Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef(SInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef(SInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32ConstRef permits CxxSInt32ConstRef {
  private Data ptr;
  private SInt32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstRef(SInt32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstRef(io SInt32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef(Make_CxxSInt32ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32Ref(SInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32Ref(SInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32Ref permits CxxSInt32Ref {
  private Data ptr;
  private SInt32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32Ref(SInt32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32Ref(io SInt32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32Ref(Make_CxxSInt32Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt32ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt32ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef CxxSInt32ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32ConstPtr.cxx_getAt on null CxxSInt32ConstPtr";
  return CxxSInt32ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_SInt32()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef CxxSInt32ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32Ref CxxSInt32Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32Ptr.cxx_getAt on null CxxSInt32Ptr";
  return CxxSInt32Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_SInt32()));
}

/// Same as for CxxSInt32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32Ref CxxSInt32Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt32Ptr.cxx_setAt(Index i, SInt32 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32Ptr.cxx_setAt on null CxxSInt32Ptr";
  this.ptr.offset(i)->{ SInt32 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef(CxxSInt32ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef.=(CxxSInt32ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the SInt32 value
/// \dfgPresetOmit
/// \internal
SInt32 CxxSInt32ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32ConstRef.cxx_get on null CxxSInt32ConstRef";
  return this.ptr->{ SInt32 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt32Ref.cxx_set(SInt32 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32Ref.cxx_set on null CxxSInt32Ref";
  this.ptr->{ SInt32 } = value;
}

/// Assignment of SInt32
/// \dfgPresetOmit
/// \internal
CxxSInt32Ref.=(SInt32 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32Ptr] EDK[CxxSInt32MutablePtr] LIB[int32_t *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt32PtrConstPtr
// CxxSInt32PtrPtr
// CxxSInt32PtrConstRef
// CxxSInt32PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstPtr(CxxSInt32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstPtr(CxxSInt32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32PtrConstPtr permits CxxSInt32PtrConstPtr {
  private Data ptr;
  private CxxSInt32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32PtrConstPtr(CxxSInt32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32PtrConstPtr(io CxxSInt32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstPtr(Make_CxxSInt32PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrPtr(CxxSInt32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrPtr(CxxSInt32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32PtrPtr permits CxxSInt32PtrPtr {
  private Data ptr;
  private CxxSInt32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32PtrPtr(CxxSInt32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32PtrPtr(io CxxSInt32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrPtr(Make_CxxSInt32PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef(CxxSInt32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef(CxxSInt32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32PtrConstRef permits CxxSInt32PtrConstRef {
  private Data ptr;
  private CxxSInt32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32PtrConstRef(CxxSInt32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32PtrConstRef(io CxxSInt32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef(Make_CxxSInt32PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef(CxxSInt32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef(CxxSInt32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32PtrRef permits CxxSInt32PtrRef {
  private Data ptr;
  private CxxSInt32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32PtrRef(CxxSInt32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32PtrRef(io CxxSInt32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef(Make_CxxSInt32PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt32PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt32PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef CxxSInt32PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32PtrConstPtr.cxx_getAt on null CxxSInt32PtrConstPtr";
  return CxxSInt32PtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt32MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef CxxSInt32PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt32PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef CxxSInt32PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32PtrPtr.cxx_getAt on null CxxSInt32PtrPtr";
  return CxxSInt32PtrRef(this.ptr.offset(index * __CxxSize_CxxSInt32MutablePtr()));
}

/// Same as for CxxSInt32PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef CxxSInt32PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrPtr.cxx_setAt(Index i, CxxSInt32Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32PtrPtr.cxx_setAt on null CxxSInt32PtrPtr";
  this.ptr.offset(i)->{ CxxSInt32Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef(CxxSInt32PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef.=(CxxSInt32PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt32Ptr value
/// \dfgPresetOmit
/// \internal
CxxSInt32Ptr CxxSInt32PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32PtrConstRef.cxx_get on null CxxSInt32PtrConstRef";
  return this.ptr->{ CxxSInt32Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef.cxx_set(CxxSInt32Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32PtrRef.cxx_set on null CxxSInt32PtrRef";
  this.ptr->{ CxxSInt32Ptr } = value;
}

/// Assignment of CxxSInt32Ptr
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef.=(CxxSInt32Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32ConstPtr] EDK[CxxSInt32ConstPtr] LIB[int32_t const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt32ConstPtrConstPtr
// CxxSInt32ConstPtrPtr
// CxxSInt32ConstPtrConstRef
// CxxSInt32ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstPtr(CxxSInt32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstPtr(CxxSInt32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32ConstPtrConstPtr permits CxxSInt32ConstPtrConstPtr {
  private Data ptr;
  private CxxSInt32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtrConstPtr(CxxSInt32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtrConstPtr(io CxxSInt32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstPtr(Make_CxxSInt32ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrPtr(CxxSInt32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrPtr(CxxSInt32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32ConstPtrPtr permits CxxSInt32ConstPtrPtr {
  private Data ptr;
  private CxxSInt32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtrPtr(CxxSInt32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtrPtr(io CxxSInt32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrPtr(Make_CxxSInt32ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef(CxxSInt32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef(CxxSInt32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32ConstPtrConstRef permits CxxSInt32ConstPtrConstRef {
  private Data ptr;
  private CxxSInt32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtrConstRef(CxxSInt32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtrConstRef(io CxxSInt32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef(Make_CxxSInt32ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef(CxxSInt32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef(CxxSInt32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt32ConstPtrRef permits CxxSInt32ConstPtrRef {
  private Data ptr;
  private CxxSInt32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtrRef(CxxSInt32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt32ConstPtrRef(io CxxSInt32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef(Make_CxxSInt32ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt32ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt32ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef CxxSInt32ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32ConstPtrConstPtr.cxx_getAt on null CxxSInt32ConstPtrConstPtr";
  return CxxSInt32ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt32ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef CxxSInt32ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt32ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef CxxSInt32ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32ConstPtrPtr.cxx_getAt on null CxxSInt32ConstPtrPtr";
  return CxxSInt32ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt32ConstPtr()));
}

/// Same as for CxxSInt32ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef CxxSInt32ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrPtr.cxx_setAt(Index i, CxxSInt32ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32ConstPtrPtr.cxx_setAt on null CxxSInt32ConstPtrPtr";
  this.ptr.offset(i)->{ CxxSInt32ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef(CxxSInt32ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef.=(CxxSInt32ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt32ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtr CxxSInt32ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32ConstPtrConstRef.cxx_get on null CxxSInt32ConstPtrConstRef";
  return this.ptr->{ CxxSInt32ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef.cxx_set(CxxSInt32ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32ConstPtrRef.cxx_set on null CxxSInt32ConstPtrRef";
  this.ptr->{ CxxSInt32ConstPtr } = value;
}

/// Assignment of CxxSInt32ConstPtr
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef.=(CxxSInt32ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector(
    CxxSInt32StdVector that
    ) = "Kludge__CxxSInt32StdVector__MU__copy_ctor__0a195625ad042beee279282a09be71a0";

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector.__ctor(
    ) = "Kludge__CxxSInt32StdVector__MU__ctor__442a07cf0c42f947e0d4b42f3f02e1f9";

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxSInt32StdVector__MU__ctor__a35fb58ec225b5b8a8d9b26b45a3d04d";

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector.__ctor(
    CxxSInt32ConstPtr _arg0,
    CxxSInt32ConstPtr _arg1
    ) = "Kludge__CxxSInt32StdVector__MU__ctor__628125b64ce58583adfdd274c225d05a";

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector(
    CxxSInt32ConstPtr _arg0,
    CxxSInt32ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector(
    in
    SInt32
    _arg0
    
    ,
    in
    SInt32
    _arg1
    
    
    ) {
    
    CxxSInt32ConstPtr _arg0__cxx = Make_CxxSInt32ConstPtr(_arg0);
    
    CxxSInt32ConstPtr _arg1__cxx = Make_CxxSInt32ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxSInt32StdVector() = "Kludge__CxxSInt32StdVector__MU__dtor__e7013287fd14aecf8c9627b0aca77444";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVector.cxx_size?(
    )
 = "Kludge__CxxSInt32StdVector__CO__meth_size__f576894f7164d320d8c7f4cf9e7370e3";

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxSInt32StdVector__MU__meth_reserve__30fe9e70530a960c2f47de4c1c81babe";

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVector.cxx_push_back!(
    SInt32 _arg0
    )
 = "Kludge__CxxSInt32StdVector__MU__meth_push_back__a8cac5f9d5961ed710a5606f1d07fa86";

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxSInt32StdVector__MU__meth_pop_back__11e9c61f8a4760bca42d6eb64b45f122";

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVector.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxSInt32StdVector.=(
    CxxSInt32StdVector that
    ) = "Kludge__CxxSInt32StdVector__MU__simple_ass_op__457ab4efeac24f43b32da8bcb90f06b4";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxSInt32StdVector__CO__get_ind_op__e14b1399037ef3a60c95c2a171fbc988";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt32ConstRef value
    )
  = "Kludge__CxxSInt32StdVector__MU__set_ind_op__c9f1774fd78f209904d9bf860fa4f96c";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector(SInt32 array<>) {
  this = CxxSInt32StdVector(
    CxxSInt32ConstPtr(array, 0),
    CxxSInt32ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector Make_CxxSInt32StdVector(SInt32 array<>) {
  return CxxSInt32StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline SInt32[] Make_SInt32VariableArray(CxxSInt32StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  SInt32 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxSInt32ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector.appendDesc(io String string) {
  string += "CxxSInt32StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVector] EDK[Fabric_EDK_KL_CxxSInt32StdVector] LIB[std::vector< int >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtr] EDK[CxxSInt32StdVectorConstPtr] LIB[std::vector< int > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtr] EDK[CxxSInt32StdVectorConstPtr] LIB[std::vector< int > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtr.cxx_size on null CxxSInt32StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtr] EDK[CxxSInt32StdVectorConstPtr] LIB[std::vector< int > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtr.cxx_getAtIndex on null CxxSInt32StdVectorConstPtr";
    return this.ptr.data()->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtr] EDK[CxxSInt32StdVectorMutablePtr] LIB[std::vector< int > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtr] EDK[CxxSInt32StdVectorMutablePtr] LIB[std::vector< int > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtr.cxx_size on null CxxSInt32StdVectorPtr";
    return
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtr.cxx_reserve on null CxxSInt32StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtr.cxx_push_back!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtr.cxx_push_back on null CxxSInt32StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtr.cxx_pop_back on null CxxSInt32StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtr.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtr] EDK[CxxSInt32StdVectorMutablePtr] LIB[std::vector< int > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtr.cxx_getAtIndex on null CxxSInt32StdVectorPtr";
    return this.ptr.data()->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtr] EDK[CxxSInt32StdVectorMutablePtr] LIB[std::vector< int > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtr.cxx_setAtIndex on null CxxSInt32StdVectorPtr";
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstRef] EDK[CxxSInt32StdVectorConstRef] LIB[std::vector< int > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstRef] EDK[CxxSInt32StdVectorConstRef] LIB[std::vector< int > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstRef] EDK[CxxSInt32StdVectorConstRef] LIB[std::vector< int > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstRef.cxx_size on null CxxSInt32StdVectorConstRef";
    return
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstRef] EDK[CxxSInt32StdVectorConstRef] LIB[std::vector< int > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstRef.cxx_getAtIndex on null CxxSInt32StdVectorConstRef";
    return this.ptr.data()->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorRef] EDK[CxxSInt32StdVectorMutableRef] LIB[std::vector< int > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorRef] EDK[CxxSInt32StdVectorMutableRef] LIB[std::vector< int > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorRef.cxx_size on null CxxSInt32StdVectorRef";
    return
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorRef.cxx_reserve on null CxxSInt32StdVectorRef";
    
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorRef.cxx_push_back!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorRef.cxx_push_back on null CxxSInt32StdVectorRef";
    
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorRef.cxx_pop_back on null CxxSInt32StdVectorRef";
    
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorRef.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorRef] EDK[CxxSInt32StdVectorMutableRef] LIB[std::vector< int > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorRef.cxx_getAtIndex on null CxxSInt32StdVectorRef";
    return this.ptr.data()->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorRef] EDK[CxxSInt32StdVectorMutableRef] LIB[std::vector< int > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorRef.cxx_setAtIndex on null CxxSInt32StdVectorRef";
    this.ptr.data()->{ CxxSInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt32StdVectorConstPtr
// CxxSInt32StdVectorPtr
// CxxSInt32StdVectorConstRef
// CxxSInt32StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtr(CxxSInt32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtr(CxxSInt32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtr(CxxSInt32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtr Make_CxxSInt32StdVectorConstPtr(CxxSInt32StdVector value) {
  return CxxSInt32StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtr(CxxSInt32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtr(CxxSInt32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtr(CxxSInt32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtr Make_CxxSInt32StdVectorPtr(CxxSInt32StdVector value) {
  return CxxSInt32StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef(CxxSInt32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef(CxxSInt32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef(CxxSInt32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef Make_CxxSInt32StdVectorConstRef(CxxSInt32StdVector value) {
  return CxxSInt32StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef(CxxSInt32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef(CxxSInt32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef(CxxSInt32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef Make_CxxSInt32StdVectorRef(CxxSInt32StdVector value) {
  return CxxSInt32StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt32StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt32StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef CxxSInt32StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorConstPtr.cxx_getAt on null CxxSInt32StdVectorConstPtr";
  return CxxSInt32StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt32StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef CxxSInt32StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt32StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef CxxSInt32StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorPtr.cxx_getAt on null CxxSInt32StdVectorPtr";
  return CxxSInt32StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt32StdVector()));
}

/// Same as for CxxSInt32StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef CxxSInt32StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtr.cxx_setAt(Index i, CxxSInt32StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorPtr.cxx_setAt on null CxxSInt32StdVectorPtr";
  this.ptr.offset(i)->{ CxxSInt32StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef(CxxSInt32StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef.=(CxxSInt32StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt32StdVector value
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVector CxxSInt32StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorConstRef.cxx_get on null CxxSInt32StdVectorConstRef";
  return this.ptr.data()->{ CxxSInt32StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef.cxx_set(CxxSInt32StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorRef.cxx_set on null CxxSInt32StdVectorRef";
  this.ptr.data()->{ CxxSInt32StdVector } = value;
}

/// Assignment of CxxSInt32StdVector
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef.=(CxxSInt32StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVectorPtr] EDK[CxxSInt32StdVectorMutablePtr] LIB[std::vector< int > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrConstPtr] EDK[CxxSInt32StdVectorPtrConstPtr] LIB[std::vector< int > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrConstPtr] EDK[CxxSInt32StdVectorPtrConstPtr] LIB[std::vector< int > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrConstPtr.cxx_size on null CxxSInt32StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrConstPtr] EDK[CxxSInt32StdVectorPtrConstPtr] LIB[std::vector< int > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrConstPtr.cxx_getAtIndex on null CxxSInt32StdVectorPtrConstPtr";
    return this.ptr->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrPtr] EDK[CxxSInt32StdVectorPtrMutablePtr] LIB[std::vector< int > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrPtr] EDK[CxxSInt32StdVectorPtrMutablePtr] LIB[std::vector< int > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrPtr.cxx_size on null CxxSInt32StdVectorPtrPtr";
    return
    this.ptr->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrPtr.cxx_reserve on null CxxSInt32StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrPtr.cxx_push_back!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrPtr.cxx_push_back on null CxxSInt32StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrPtr.cxx_pop_back on null CxxSInt32StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrPtr.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrPtr] EDK[CxxSInt32StdVectorPtrMutablePtr] LIB[std::vector< int > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrPtr.cxx_getAtIndex on null CxxSInt32StdVectorPtrPtr";
    return this.ptr->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrPtr] EDK[CxxSInt32StdVectorPtrMutablePtr] LIB[std::vector< int > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrPtr.cxx_setAtIndex on null CxxSInt32StdVectorPtrPtr";
    this.ptr->{ CxxSInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrConstRef] EDK[CxxSInt32StdVectorPtrConstRef] LIB[std::vector< int > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrConstRef] EDK[CxxSInt32StdVectorPtrConstRef] LIB[std::vector< int > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrConstRef] EDK[CxxSInt32StdVectorPtrConstRef] LIB[std::vector< int > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrConstRef.cxx_size on null CxxSInt32StdVectorPtrConstRef";
    return
    this.ptr->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrConstRef] EDK[CxxSInt32StdVectorPtrConstRef] LIB[std::vector< int > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrConstRef.cxx_getAtIndex on null CxxSInt32StdVectorPtrConstRef";
    return this.ptr->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrRef] EDK[CxxSInt32StdVectorPtrMutableRef] LIB[std::vector< int > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrRef] EDK[CxxSInt32StdVectorPtrMutableRef] LIB[std::vector< int > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrRef.cxx_size on null CxxSInt32StdVectorPtrRef";
    return
    this.ptr->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrRef.cxx_reserve on null CxxSInt32StdVectorPtrRef";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrRef.cxx_push_back!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrRef.cxx_push_back on null CxxSInt32StdVectorPtrRef";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrRef.cxx_pop_back on null CxxSInt32StdVectorPtrRef";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrRef.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrRef] EDK[CxxSInt32StdVectorPtrMutableRef] LIB[std::vector< int > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrRef.cxx_getAtIndex on null CxxSInt32StdVectorPtrRef";
    return this.ptr->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorPtrRef] EDK[CxxSInt32StdVectorPtrMutableRef] LIB[std::vector< int > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorPtrRef.cxx_setAtIndex on null CxxSInt32StdVectorPtrRef";
    this.ptr->{ CxxSInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt32StdVectorPtrConstPtr
// CxxSInt32StdVectorPtrPtr
// CxxSInt32StdVectorPtrConstRef
// CxxSInt32StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstPtr(CxxSInt32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstPtr(CxxSInt32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstPtr(CxxSInt32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstPtr Make_CxxSInt32StdVectorPtrConstPtr(CxxSInt32StdVectorPtr value) {
  return CxxSInt32StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrPtr(CxxSInt32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrPtr(CxxSInt32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrPtr(CxxSInt32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrPtr Make_CxxSInt32StdVectorPtrPtr(CxxSInt32StdVectorPtr value) {
  return CxxSInt32StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef(CxxSInt32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef(CxxSInt32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef(CxxSInt32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef Make_CxxSInt32StdVectorPtrConstRef(CxxSInt32StdVectorPtr value) {
  return CxxSInt32StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef(CxxSInt32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef(CxxSInt32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef(CxxSInt32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef Make_CxxSInt32StdVectorPtrRef(CxxSInt32StdVectorPtr value) {
  return CxxSInt32StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt32StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt32StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef CxxSInt32StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorPtrConstPtr.cxx_getAt on null CxxSInt32StdVectorPtrConstPtr";
  return CxxSInt32StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt32StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef CxxSInt32StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt32StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef CxxSInt32StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorPtrPtr.cxx_getAt on null CxxSInt32StdVectorPtrPtr";
  return CxxSInt32StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt32StdVectorMutablePtr()));
}

/// Same as for CxxSInt32StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef CxxSInt32StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrPtr.cxx_setAt(Index i, CxxSInt32StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorPtrPtr.cxx_setAt on null CxxSInt32StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxSInt32StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef(CxxSInt32StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef.=(CxxSInt32StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt32StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtr CxxSInt32StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorPtrConstRef.cxx_get on null CxxSInt32StdVectorPtrConstRef";
  return this.ptr->{ CxxSInt32StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef.cxx_set(CxxSInt32StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorPtrRef.cxx_set on null CxxSInt32StdVectorPtrRef";
  this.ptr->{ CxxSInt32StdVectorPtr } = value;
}

/// Assignment of CxxSInt32StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef.=(CxxSInt32StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt32StdVectorConstPtr] EDK[CxxSInt32StdVectorConstPtr] LIB[std::vector< int > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrConstPtr] EDK[CxxSInt32StdVectorConstPtrConstPtr] LIB[std::vector< int > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrConstPtr] EDK[CxxSInt32StdVectorConstPtrConstPtr] LIB[std::vector< int > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrConstPtr.cxx_size on null CxxSInt32StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrConstPtr] EDK[CxxSInt32StdVectorConstPtrConstPtr] LIB[std::vector< int > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxSInt32StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrPtr] EDK[CxxSInt32StdVectorConstPtrMutablePtr] LIB[std::vector< int > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrPtr] EDK[CxxSInt32StdVectorConstPtrMutablePtr] LIB[std::vector< int > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrPtr.cxx_size on null CxxSInt32StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrPtr.cxx_reserve on null CxxSInt32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrPtr.cxx_push_back!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrPtr.cxx_push_back on null CxxSInt32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrPtr.cxx_pop_back on null CxxSInt32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrPtr.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrPtr] EDK[CxxSInt32StdVectorConstPtrMutablePtr] LIB[std::vector< int > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrPtr.cxx_getAtIndex on null CxxSInt32StdVectorConstPtrPtr";
    return this.ptr->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrPtr] EDK[CxxSInt32StdVectorConstPtrMutablePtr] LIB[std::vector< int > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrPtr.cxx_setAtIndex on null CxxSInt32StdVectorConstPtrPtr";
    this.ptr->{ CxxSInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrConstRef] EDK[CxxSInt32StdVectorConstPtrConstRef] LIB[std::vector< int > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrConstRef] EDK[CxxSInt32StdVectorConstPtrConstRef] LIB[std::vector< int > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrConstRef] EDK[CxxSInt32StdVectorConstPtrConstRef] LIB[std::vector< int > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrConstRef.cxx_size on null CxxSInt32StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrConstRef] EDK[CxxSInt32StdVectorConstPtrConstRef] LIB[std::vector< int > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxSInt32StdVectorConstPtrConstRef";
    return this.ptr->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrRef] EDK[CxxSInt32StdVectorConstPtrMutableRef] LIB[std::vector< int > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrRef] EDK[CxxSInt32StdVectorConstPtrMutableRef] LIB[std::vector< int > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrRef.cxx_size on null CxxSInt32StdVectorConstPtrRef";
    return
    this.ptr->{ CxxSInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrRef.cxx_reserve on null CxxSInt32StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrRef.cxx_push_back!(
    SInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrRef.cxx_push_back on null CxxSInt32StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrRef.cxx_pop_back on null CxxSInt32StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt32StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt32StdVectorConstPtrRef.push_back!(
    in
    SInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrRef] EDK[CxxSInt32StdVectorConstPtrMutableRef] LIB[std::vector< int > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32ConstRef
CxxSInt32StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrRef.cxx_getAtIndex on null CxxSInt32StdVectorConstPtrRef";
    return this.ptr->{ CxxSInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt32StdVectorConstPtrRef] EDK[CxxSInt32StdVectorConstPtrMutableRef] LIB[std::vector< int > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt32StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt32StdVectorConstPtrRef.cxx_setAtIndex on null CxxSInt32StdVectorConstPtrRef";
    this.ptr->{ CxxSInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt32StdVectorConstPtrConstPtr
// CxxSInt32StdVectorConstPtrPtr
// CxxSInt32StdVectorConstPtrConstRef
// CxxSInt32StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstPtr(CxxSInt32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstPtr(CxxSInt32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstPtr(CxxSInt32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstPtr Make_CxxSInt32StdVectorConstPtrConstPtr(CxxSInt32StdVectorConstPtr value) {
  return CxxSInt32StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrPtr(CxxSInt32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrPtr(CxxSInt32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrPtr(CxxSInt32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrPtr Make_CxxSInt32StdVectorConstPtrPtr(CxxSInt32StdVectorConstPtr value) {
  return CxxSInt32StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef(CxxSInt32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef(CxxSInt32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef(CxxSInt32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef Make_CxxSInt32StdVectorConstPtrConstRef(CxxSInt32StdVectorConstPtr value) {
  return CxxSInt32StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef(CxxSInt32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef(CxxSInt32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef(CxxSInt32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef Make_CxxSInt32StdVectorConstPtrRef(CxxSInt32StdVectorConstPtr value) {
  return CxxSInt32StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt32StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt32StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt32StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef CxxSInt32StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorConstPtrConstPtr.cxx_getAt on null CxxSInt32StdVectorConstPtrConstPtr";
  return CxxSInt32StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt32StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef CxxSInt32StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt32StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef CxxSInt32StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorConstPtrPtr.cxx_getAt on null CxxSInt32StdVectorConstPtrPtr";
  return CxxSInt32StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt32StdVectorConstPtr()));
}

/// Same as for CxxSInt32StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef CxxSInt32StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrPtr.cxx_setAt(Index i, CxxSInt32StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorConstPtrPtr.cxx_setAt on null CxxSInt32StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxSInt32StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef(CxxSInt32StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef.=(CxxSInt32StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt32StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtr CxxSInt32StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorConstPtrConstRef.cxx_get on null CxxSInt32StdVectorConstPtrConstRef";
  return this.ptr->{ CxxSInt32StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef.cxx_set(CxxSInt32StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt32StdVectorConstPtrRef.cxx_set on null CxxSInt32StdVectorConstPtrRef";
  this.ptr->{ CxxSInt32StdVectorConstPtr } = value;
}

/// Assignment of CxxSInt32StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef.=(CxxSInt32StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt32StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt32] EDK[Fabric::EDK::KL::UInt32] LIB[uint32_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt32ConstPtr
// CxxUInt32Ptr
// CxxUInt32ConstRef
// CxxUInt32Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtr(UInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtr(UInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32ConstPtr permits CxxUInt32ConstPtr {
  private Data ptr;
  private UInt32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtr(UInt32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtr(io UInt32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtr(Make_CxxUInt32ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32Ptr(UInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32Ptr(UInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32Ptr permits CxxUInt32Ptr {
  private Data ptr;
  private UInt32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32Ptr(UInt32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32Ptr(io UInt32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32Ptr(Make_CxxUInt32Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef(UInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef(UInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32ConstRef permits CxxUInt32ConstRef {
  private Data ptr;
  private UInt32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstRef(UInt32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstRef(io UInt32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef(Make_CxxUInt32ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32Ref(UInt32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32Ref(UInt32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32Ref permits CxxUInt32Ref {
  private Data ptr;
  private UInt32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32Ref(UInt32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32Ref(io UInt32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32Ref(Make_CxxUInt32Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt32ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt32ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef CxxUInt32ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32ConstPtr.cxx_getAt on null CxxUInt32ConstPtr";
  return CxxUInt32ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_UInt32()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef CxxUInt32ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32Ref CxxUInt32Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32Ptr.cxx_getAt on null CxxUInt32Ptr";
  return CxxUInt32Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_UInt32()));
}

/// Same as for CxxUInt32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32Ref CxxUInt32Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt32Ptr.cxx_setAt(Index i, UInt32 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32Ptr.cxx_setAt on null CxxUInt32Ptr";
  this.ptr.offset(i)->{ UInt32 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef(CxxUInt32ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef.=(CxxUInt32ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the UInt32 value
/// \dfgPresetOmit
/// \internal
UInt32 CxxUInt32ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32ConstRef.cxx_get on null CxxUInt32ConstRef";
  return this.ptr->{ UInt32 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt32Ref.cxx_set(UInt32 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32Ref.cxx_set on null CxxUInt32Ref";
  this.ptr->{ UInt32 } = value;
}

/// Assignment of UInt32
/// \dfgPresetOmit
/// \internal
CxxUInt32Ref.=(UInt32 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32Ptr] EDK[CxxUInt32MutablePtr] LIB[uint32_t *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt32PtrConstPtr
// CxxUInt32PtrPtr
// CxxUInt32PtrConstRef
// CxxUInt32PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstPtr(CxxUInt32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstPtr(CxxUInt32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32PtrConstPtr permits CxxUInt32PtrConstPtr {
  private Data ptr;
  private CxxUInt32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32PtrConstPtr(CxxUInt32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32PtrConstPtr(io CxxUInt32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstPtr(Make_CxxUInt32PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrPtr(CxxUInt32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrPtr(CxxUInt32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32PtrPtr permits CxxUInt32PtrPtr {
  private Data ptr;
  private CxxUInt32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32PtrPtr(CxxUInt32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32PtrPtr(io CxxUInt32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrPtr(Make_CxxUInt32PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef(CxxUInt32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef(CxxUInt32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32PtrConstRef permits CxxUInt32PtrConstRef {
  private Data ptr;
  private CxxUInt32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32PtrConstRef(CxxUInt32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32PtrConstRef(io CxxUInt32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef(Make_CxxUInt32PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef(CxxUInt32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef(CxxUInt32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32PtrRef permits CxxUInt32PtrRef {
  private Data ptr;
  private CxxUInt32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32PtrRef(CxxUInt32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32PtrRef(io CxxUInt32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef(Make_CxxUInt32PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt32PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt32PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef CxxUInt32PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32PtrConstPtr.cxx_getAt on null CxxUInt32PtrConstPtr";
  return CxxUInt32PtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt32MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef CxxUInt32PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt32PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef CxxUInt32PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32PtrPtr.cxx_getAt on null CxxUInt32PtrPtr";
  return CxxUInt32PtrRef(this.ptr.offset(index * __CxxSize_CxxUInt32MutablePtr()));
}

/// Same as for CxxUInt32PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef CxxUInt32PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrPtr.cxx_setAt(Index i, CxxUInt32Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32PtrPtr.cxx_setAt on null CxxUInt32PtrPtr";
  this.ptr.offset(i)->{ CxxUInt32Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef(CxxUInt32PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef.=(CxxUInt32PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt32Ptr value
/// \dfgPresetOmit
/// \internal
CxxUInt32Ptr CxxUInt32PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32PtrConstRef.cxx_get on null CxxUInt32PtrConstRef";
  return this.ptr->{ CxxUInt32Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef.cxx_set(CxxUInt32Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32PtrRef.cxx_set on null CxxUInt32PtrRef";
  this.ptr->{ CxxUInt32Ptr } = value;
}

/// Assignment of CxxUInt32Ptr
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef.=(CxxUInt32Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32ConstPtr] EDK[CxxUInt32ConstPtr] LIB[uint32_t const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt32ConstPtrConstPtr
// CxxUInt32ConstPtrPtr
// CxxUInt32ConstPtrConstRef
// CxxUInt32ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstPtr(CxxUInt32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstPtr(CxxUInt32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32ConstPtrConstPtr permits CxxUInt32ConstPtrConstPtr {
  private Data ptr;
  private CxxUInt32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtrConstPtr(CxxUInt32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtrConstPtr(io CxxUInt32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstPtr(Make_CxxUInt32ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrPtr(CxxUInt32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrPtr(CxxUInt32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32ConstPtrPtr permits CxxUInt32ConstPtrPtr {
  private Data ptr;
  private CxxUInt32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtrPtr(CxxUInt32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtrPtr(io CxxUInt32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrPtr(Make_CxxUInt32ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef(CxxUInt32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef(CxxUInt32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32ConstPtrConstRef permits CxxUInt32ConstPtrConstRef {
  private Data ptr;
  private CxxUInt32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtrConstRef(CxxUInt32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtrConstRef(io CxxUInt32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef(Make_CxxUInt32ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef(CxxUInt32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef(CxxUInt32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt32ConstPtrRef permits CxxUInt32ConstPtrRef {
  private Data ptr;
  private CxxUInt32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtrRef(CxxUInt32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt32ConstPtrRef(io CxxUInt32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef(Make_CxxUInt32ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt32ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt32ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef CxxUInt32ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32ConstPtrConstPtr.cxx_getAt on null CxxUInt32ConstPtrConstPtr";
  return CxxUInt32ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt32ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef CxxUInt32ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt32ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef CxxUInt32ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32ConstPtrPtr.cxx_getAt on null CxxUInt32ConstPtrPtr";
  return CxxUInt32ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt32ConstPtr()));
}

/// Same as for CxxUInt32ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef CxxUInt32ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrPtr.cxx_setAt(Index i, CxxUInt32ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32ConstPtrPtr.cxx_setAt on null CxxUInt32ConstPtrPtr";
  this.ptr.offset(i)->{ CxxUInt32ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef(CxxUInt32ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef.=(CxxUInt32ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt32ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtr CxxUInt32ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32ConstPtrConstRef.cxx_get on null CxxUInt32ConstPtrConstRef";
  return this.ptr->{ CxxUInt32ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef.cxx_set(CxxUInt32ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32ConstPtrRef.cxx_set on null CxxUInt32ConstPtrRef";
  this.ptr->{ CxxUInt32ConstPtr } = value;
}

/// Assignment of CxxUInt32ConstPtr
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef.=(CxxUInt32ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector(
    CxxUInt32StdVector that
    ) = "Kludge__CxxUInt32StdVector__MU__copy_ctor__2afa4735fa7c7de868a9fe6efc1d1295";

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector.__ctor(
    ) = "Kludge__CxxUInt32StdVector__MU__ctor__108fd24776d3985b4f6e9886a2cf34e7";

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxUInt32StdVector__MU__ctor__14a7219a248fe99692b128746eea248e";

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector.__ctor(
    CxxUInt32ConstPtr _arg0,
    CxxUInt32ConstPtr _arg1
    ) = "Kludge__CxxUInt32StdVector__MU__ctor__36d1c54f67f08851541471bdd0b88610";

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector(
    CxxUInt32ConstPtr _arg0,
    CxxUInt32ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector(
    in
    UInt32
    _arg0
    
    ,
    in
    UInt32
    _arg1
    
    
    ) {
    
    CxxUInt32ConstPtr _arg0__cxx = Make_CxxUInt32ConstPtr(_arg0);
    
    CxxUInt32ConstPtr _arg1__cxx = Make_CxxUInt32ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxUInt32StdVector() = "Kludge__CxxUInt32StdVector__MU__dtor__b0c374cab7517211c251e757f0ca14b1";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVector.cxx_size?(
    )
 = "Kludge__CxxUInt32StdVector__CO__meth_size__2ed1dd8c0c6b58505d2c66b8672ad960";

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxUInt32StdVector__MU__meth_reserve__5fbb15e6791ec9b1d615a8e8cabce7da";

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVector.cxx_push_back!(
    UInt32 _arg0
    )
 = "Kludge__CxxUInt32StdVector__MU__meth_push_back__fd9a91b2be9b928ce0633f279d36912f";

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxUInt32StdVector__MU__meth_pop_back__601fe8bd3c1157c54ae83f918d12ace9";

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVector.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxUInt32StdVector.=(
    CxxUInt32StdVector that
    ) = "Kludge__CxxUInt32StdVector__MU__simple_ass_op__45be375be888d3717975b665c9f697ec";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxUInt32StdVector__CO__get_ind_op__3fa3c3f4c6289bf07d17c99c92a67109";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt32ConstRef value
    )
  = "Kludge__CxxUInt32StdVector__MU__set_ind_op__9f210a66e932943ec7270e37e17a59ed";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector(UInt32 array<>) {
  this = CxxUInt32StdVector(
    CxxUInt32ConstPtr(array, 0),
    CxxUInt32ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector Make_CxxUInt32StdVector(UInt32 array<>) {
  return CxxUInt32StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline UInt32[] Make_UInt32VariableArray(CxxUInt32StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  UInt32 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxUInt32ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector.appendDesc(io String string) {
  string += "CxxUInt32StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVector] EDK[Fabric_EDK_KL_CxxUInt32StdVector] LIB[std::vector< unsigned int >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtr] EDK[CxxUInt32StdVectorConstPtr] LIB[std::vector< unsigned int > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtr] EDK[CxxUInt32StdVectorConstPtr] LIB[std::vector< unsigned int > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtr.cxx_size on null CxxUInt32StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtr] EDK[CxxUInt32StdVectorConstPtr] LIB[std::vector< unsigned int > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtr.cxx_getAtIndex on null CxxUInt32StdVectorConstPtr";
    return this.ptr.data()->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtr] EDK[CxxUInt32StdVectorMutablePtr] LIB[std::vector< unsigned int > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtr] EDK[CxxUInt32StdVectorMutablePtr] LIB[std::vector< unsigned int > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtr.cxx_size on null CxxUInt32StdVectorPtr";
    return
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtr.cxx_reserve on null CxxUInt32StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtr.cxx_push_back!(
    UInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtr.cxx_push_back on null CxxUInt32StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtr.cxx_pop_back on null CxxUInt32StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtr.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtr] EDK[CxxUInt32StdVectorMutablePtr] LIB[std::vector< unsigned int > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtr.cxx_getAtIndex on null CxxUInt32StdVectorPtr";
    return this.ptr.data()->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtr] EDK[CxxUInt32StdVectorMutablePtr] LIB[std::vector< unsigned int > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtr.cxx_setAtIndex on null CxxUInt32StdVectorPtr";
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstRef] EDK[CxxUInt32StdVectorConstRef] LIB[std::vector< unsigned int > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstRef] EDK[CxxUInt32StdVectorConstRef] LIB[std::vector< unsigned int > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstRef] EDK[CxxUInt32StdVectorConstRef] LIB[std::vector< unsigned int > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstRef.cxx_size on null CxxUInt32StdVectorConstRef";
    return
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstRef] EDK[CxxUInt32StdVectorConstRef] LIB[std::vector< unsigned int > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstRef.cxx_getAtIndex on null CxxUInt32StdVectorConstRef";
    return this.ptr.data()->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorRef] EDK[CxxUInt32StdVectorMutableRef] LIB[std::vector< unsigned int > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorRef] EDK[CxxUInt32StdVectorMutableRef] LIB[std::vector< unsigned int > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorRef.cxx_size on null CxxUInt32StdVectorRef";
    return
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorRef.cxx_reserve on null CxxUInt32StdVectorRef";
    
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorRef.cxx_push_back!(
    UInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorRef.cxx_push_back on null CxxUInt32StdVectorRef";
    
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorRef.cxx_pop_back on null CxxUInt32StdVectorRef";
    
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorRef.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorRef] EDK[CxxUInt32StdVectorMutableRef] LIB[std::vector< unsigned int > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorRef.cxx_getAtIndex on null CxxUInt32StdVectorRef";
    return this.ptr.data()->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorRef] EDK[CxxUInt32StdVectorMutableRef] LIB[std::vector< unsigned int > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorRef.cxx_setAtIndex on null CxxUInt32StdVectorRef";
    this.ptr.data()->{ CxxUInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt32StdVectorConstPtr
// CxxUInt32StdVectorPtr
// CxxUInt32StdVectorConstRef
// CxxUInt32StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtr(CxxUInt32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtr(CxxUInt32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtr(CxxUInt32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtr Make_CxxUInt32StdVectorConstPtr(CxxUInt32StdVector value) {
  return CxxUInt32StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtr(CxxUInt32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtr(CxxUInt32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtr(CxxUInt32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtr Make_CxxUInt32StdVectorPtr(CxxUInt32StdVector value) {
  return CxxUInt32StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef(CxxUInt32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef(CxxUInt32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef(CxxUInt32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef Make_CxxUInt32StdVectorConstRef(CxxUInt32StdVector value) {
  return CxxUInt32StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef(CxxUInt32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef(CxxUInt32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef(CxxUInt32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef Make_CxxUInt32StdVectorRef(CxxUInt32StdVector value) {
  return CxxUInt32StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt32StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt32StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef CxxUInt32StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorConstPtr.cxx_getAt on null CxxUInt32StdVectorConstPtr";
  return CxxUInt32StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt32StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef CxxUInt32StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt32StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef CxxUInt32StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorPtr.cxx_getAt on null CxxUInt32StdVectorPtr";
  return CxxUInt32StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt32StdVector()));
}

/// Same as for CxxUInt32StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef CxxUInt32StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtr.cxx_setAt(Index i, CxxUInt32StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorPtr.cxx_setAt on null CxxUInt32StdVectorPtr";
  this.ptr.offset(i)->{ CxxUInt32StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef(CxxUInt32StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef.=(CxxUInt32StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt32StdVector value
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVector CxxUInt32StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorConstRef.cxx_get on null CxxUInt32StdVectorConstRef";
  return this.ptr.data()->{ CxxUInt32StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef.cxx_set(CxxUInt32StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorRef.cxx_set on null CxxUInt32StdVectorRef";
  this.ptr.data()->{ CxxUInt32StdVector } = value;
}

/// Assignment of CxxUInt32StdVector
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef.=(CxxUInt32StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVectorPtr] EDK[CxxUInt32StdVectorMutablePtr] LIB[std::vector< unsigned int > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrConstPtr] EDK[CxxUInt32StdVectorPtrConstPtr] LIB[std::vector< unsigned int > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrConstPtr] EDK[CxxUInt32StdVectorPtrConstPtr] LIB[std::vector< unsigned int > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrConstPtr.cxx_size on null CxxUInt32StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrConstPtr] EDK[CxxUInt32StdVectorPtrConstPtr] LIB[std::vector< unsigned int > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrConstPtr.cxx_getAtIndex on null CxxUInt32StdVectorPtrConstPtr";
    return this.ptr->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrPtr] EDK[CxxUInt32StdVectorPtrMutablePtr] LIB[std::vector< unsigned int > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrPtr] EDK[CxxUInt32StdVectorPtrMutablePtr] LIB[std::vector< unsigned int > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrPtr.cxx_size on null CxxUInt32StdVectorPtrPtr";
    return
    this.ptr->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrPtr.cxx_reserve on null CxxUInt32StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrPtr.cxx_push_back!(
    UInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrPtr.cxx_push_back on null CxxUInt32StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrPtr.cxx_pop_back on null CxxUInt32StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrPtr.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrPtr] EDK[CxxUInt32StdVectorPtrMutablePtr] LIB[std::vector< unsigned int > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrPtr.cxx_getAtIndex on null CxxUInt32StdVectorPtrPtr";
    return this.ptr->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrPtr] EDK[CxxUInt32StdVectorPtrMutablePtr] LIB[std::vector< unsigned int > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrPtr.cxx_setAtIndex on null CxxUInt32StdVectorPtrPtr";
    this.ptr->{ CxxUInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrConstRef] EDK[CxxUInt32StdVectorPtrConstRef] LIB[std::vector< unsigned int > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrConstRef] EDK[CxxUInt32StdVectorPtrConstRef] LIB[std::vector< unsigned int > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrConstRef] EDK[CxxUInt32StdVectorPtrConstRef] LIB[std::vector< unsigned int > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrConstRef.cxx_size on null CxxUInt32StdVectorPtrConstRef";
    return
    this.ptr->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrConstRef] EDK[CxxUInt32StdVectorPtrConstRef] LIB[std::vector< unsigned int > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrConstRef.cxx_getAtIndex on null CxxUInt32StdVectorPtrConstRef";
    return this.ptr->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrRef] EDK[CxxUInt32StdVectorPtrMutableRef] LIB[std::vector< unsigned int > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrRef] EDK[CxxUInt32StdVectorPtrMutableRef] LIB[std::vector< unsigned int > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrRef.cxx_size on null CxxUInt32StdVectorPtrRef";
    return
    this.ptr->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrRef.cxx_reserve on null CxxUInt32StdVectorPtrRef";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrRef.cxx_push_back!(
    UInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrRef.cxx_push_back on null CxxUInt32StdVectorPtrRef";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrRef.cxx_pop_back on null CxxUInt32StdVectorPtrRef";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorPtrRef.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrRef] EDK[CxxUInt32StdVectorPtrMutableRef] LIB[std::vector< unsigned int > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrRef.cxx_getAtIndex on null CxxUInt32StdVectorPtrRef";
    return this.ptr->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorPtrRef] EDK[CxxUInt32StdVectorPtrMutableRef] LIB[std::vector< unsigned int > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorPtrRef.cxx_setAtIndex on null CxxUInt32StdVectorPtrRef";
    this.ptr->{ CxxUInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt32StdVectorPtrConstPtr
// CxxUInt32StdVectorPtrPtr
// CxxUInt32StdVectorPtrConstRef
// CxxUInt32StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstPtr(CxxUInt32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstPtr(CxxUInt32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstPtr(CxxUInt32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstPtr Make_CxxUInt32StdVectorPtrConstPtr(CxxUInt32StdVectorPtr value) {
  return CxxUInt32StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrPtr(CxxUInt32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrPtr(CxxUInt32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrPtr(CxxUInt32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrPtr Make_CxxUInt32StdVectorPtrPtr(CxxUInt32StdVectorPtr value) {
  return CxxUInt32StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef(CxxUInt32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef(CxxUInt32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef(CxxUInt32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef Make_CxxUInt32StdVectorPtrConstRef(CxxUInt32StdVectorPtr value) {
  return CxxUInt32StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef(CxxUInt32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef(CxxUInt32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef(CxxUInt32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef Make_CxxUInt32StdVectorPtrRef(CxxUInt32StdVectorPtr value) {
  return CxxUInt32StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt32StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt32StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef CxxUInt32StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorPtrConstPtr.cxx_getAt on null CxxUInt32StdVectorPtrConstPtr";
  return CxxUInt32StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt32StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef CxxUInt32StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt32StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef CxxUInt32StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorPtrPtr.cxx_getAt on null CxxUInt32StdVectorPtrPtr";
  return CxxUInt32StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt32StdVectorMutablePtr()));
}

/// Same as for CxxUInt32StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef CxxUInt32StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrPtr.cxx_setAt(Index i, CxxUInt32StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorPtrPtr.cxx_setAt on null CxxUInt32StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxUInt32StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef(CxxUInt32StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef.=(CxxUInt32StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt32StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtr CxxUInt32StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorPtrConstRef.cxx_get on null CxxUInt32StdVectorPtrConstRef";
  return this.ptr->{ CxxUInt32StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef.cxx_set(CxxUInt32StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorPtrRef.cxx_set on null CxxUInt32StdVectorPtrRef";
  this.ptr->{ CxxUInt32StdVectorPtr } = value;
}

/// Assignment of CxxUInt32StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef.=(CxxUInt32StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt32StdVectorConstPtr] EDK[CxxUInt32StdVectorConstPtr] LIB[std::vector< unsigned int > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrConstPtr] EDK[CxxUInt32StdVectorConstPtrConstPtr] LIB[std::vector< unsigned int > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrConstPtr] EDK[CxxUInt32StdVectorConstPtrConstPtr] LIB[std::vector< unsigned int > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrConstPtr.cxx_size on null CxxUInt32StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrConstPtr] EDK[CxxUInt32StdVectorConstPtrConstPtr] LIB[std::vector< unsigned int > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxUInt32StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrPtr] EDK[CxxUInt32StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned int > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrPtr] EDK[CxxUInt32StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned int > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrPtr.cxx_size on null CxxUInt32StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrPtr.cxx_reserve on null CxxUInt32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrPtr.cxx_push_back!(
    UInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrPtr.cxx_push_back on null CxxUInt32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrPtr.cxx_pop_back on null CxxUInt32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrPtr.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrPtr] EDK[CxxUInt32StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned int > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrPtr.cxx_getAtIndex on null CxxUInt32StdVectorConstPtrPtr";
    return this.ptr->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrPtr] EDK[CxxUInt32StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned int > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrPtr.cxx_setAtIndex on null CxxUInt32StdVectorConstPtrPtr";
    this.ptr->{ CxxUInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrConstRef] EDK[CxxUInt32StdVectorConstPtrConstRef] LIB[std::vector< unsigned int > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrConstRef] EDK[CxxUInt32StdVectorConstPtrConstRef] LIB[std::vector< unsigned int > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrConstRef] EDK[CxxUInt32StdVectorConstPtrConstRef] LIB[std::vector< unsigned int > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrConstRef.cxx_size on null CxxUInt32StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrConstRef] EDK[CxxUInt32StdVectorConstPtrConstRef] LIB[std::vector< unsigned int > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxUInt32StdVectorConstPtrConstRef";
    return this.ptr->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrRef] EDK[CxxUInt32StdVectorConstPtrMutableRef] LIB[std::vector< unsigned int > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrRef] EDK[CxxUInt32StdVectorConstPtrMutableRef] LIB[std::vector< unsigned int > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrRef.cxx_size on null CxxUInt32StdVectorConstPtrRef";
    return
    this.ptr->{ CxxUInt32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrRef.cxx_reserve on null CxxUInt32StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrRef.cxx_push_back!(
    UInt32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrRef.cxx_push_back on null CxxUInt32StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrRef.cxx_pop_back on null CxxUInt32StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrRef.push_back!(
    in
    UInt32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt32StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt32StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrRef] EDK[CxxUInt32StdVectorConstPtrMutableRef] LIB[std::vector< unsigned int > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32ConstRef
CxxUInt32StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrRef.cxx_getAtIndex on null CxxUInt32StdVectorConstPtrRef";
    return this.ptr->{ CxxUInt32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt32StdVectorConstPtrRef] EDK[CxxUInt32StdVectorConstPtrMutableRef] LIB[std::vector< unsigned int > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt32StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt32StdVectorConstPtrRef.cxx_setAtIndex on null CxxUInt32StdVectorConstPtrRef";
    this.ptr->{ CxxUInt32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt32StdVectorConstPtrConstPtr
// CxxUInt32StdVectorConstPtrPtr
// CxxUInt32StdVectorConstPtrConstRef
// CxxUInt32StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstPtr(CxxUInt32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstPtr(CxxUInt32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstPtr(CxxUInt32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstPtr Make_CxxUInt32StdVectorConstPtrConstPtr(CxxUInt32StdVectorConstPtr value) {
  return CxxUInt32StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrPtr(CxxUInt32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrPtr(CxxUInt32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrPtr(CxxUInt32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrPtr Make_CxxUInt32StdVectorConstPtrPtr(CxxUInt32StdVectorConstPtr value) {
  return CxxUInt32StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef(CxxUInt32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef(CxxUInt32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef(CxxUInt32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef Make_CxxUInt32StdVectorConstPtrConstRef(CxxUInt32StdVectorConstPtr value) {
  return CxxUInt32StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef(CxxUInt32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef(CxxUInt32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef(CxxUInt32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef Make_CxxUInt32StdVectorConstPtrRef(CxxUInt32StdVectorConstPtr value) {
  return CxxUInt32StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt32StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt32StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt32StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef CxxUInt32StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorConstPtrConstPtr.cxx_getAt on null CxxUInt32StdVectorConstPtrConstPtr";
  return CxxUInt32StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt32StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef CxxUInt32StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt32StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef CxxUInt32StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorConstPtrPtr.cxx_getAt on null CxxUInt32StdVectorConstPtrPtr";
  return CxxUInt32StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt32StdVectorConstPtr()));
}

/// Same as for CxxUInt32StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef CxxUInt32StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrPtr.cxx_setAt(Index i, CxxUInt32StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorConstPtrPtr.cxx_setAt on null CxxUInt32StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxUInt32StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef(CxxUInt32StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef.=(CxxUInt32StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt32StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtr CxxUInt32StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorConstPtrConstRef.cxx_get on null CxxUInt32StdVectorConstPtrConstRef";
  return this.ptr->{ CxxUInt32StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef.cxx_set(CxxUInt32StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt32StdVectorConstPtrRef.cxx_set on null CxxUInt32StdVectorConstPtrRef";
  this.ptr->{ CxxUInt32StdVectorConstPtr } = value;
}

/// Assignment of CxxUInt32StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef.=(CxxUInt32StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt32StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[long long]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[long long]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt64ConstPtr
// CxxSInt64Ptr
// CxxSInt64ConstRef
// CxxSInt64Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtr(SInt64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtr(SInt64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64ConstPtr permits CxxSInt64ConstPtr {
  private Data ptr;
  private SInt64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtr(SInt64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtr(io SInt64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtr(Make_CxxSInt64ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64Ptr(SInt64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64Ptr(SInt64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64Ptr permits CxxSInt64Ptr {
  private Data ptr;
  private SInt64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64Ptr(SInt64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64Ptr(io SInt64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64Ptr(Make_CxxSInt64Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef(SInt64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef(SInt64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64ConstRef permits CxxSInt64ConstRef {
  private Data ptr;
  private SInt64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstRef(SInt64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstRef(io SInt64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef(Make_CxxSInt64ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64Ref(SInt64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64Ref(SInt64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_SInt64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64Ref permits CxxSInt64Ref {
  private Data ptr;
  private SInt64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64Ref(SInt64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64Ref(io SInt64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64Ref(Make_CxxSInt64Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt64ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt64ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef CxxSInt64ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64ConstPtr.cxx_getAt on null CxxSInt64ConstPtr";
  return CxxSInt64ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_SInt64()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef CxxSInt64ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt64ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64Ref CxxSInt64Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64Ptr.cxx_getAt on null CxxSInt64Ptr";
  return CxxSInt64Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_SInt64()));
}

/// Same as for CxxSInt64ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64Ref CxxSInt64Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt64Ptr.cxx_setAt(Index i, SInt64 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64Ptr.cxx_setAt on null CxxSInt64Ptr";
  this.ptr.offset(i)->{ SInt64 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef(CxxSInt64ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef.=(CxxSInt64ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the SInt64 value
/// \dfgPresetOmit
/// \internal
SInt64 CxxSInt64ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64ConstRef.cxx_get on null CxxSInt64ConstRef";
  return this.ptr->{ SInt64 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt64Ref.cxx_set(SInt64 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64Ref.cxx_set on null CxxSInt64Ref";
  this.ptr->{ SInt64 } = value;
}

/// Assignment of SInt64
/// \dfgPresetOmit
/// \internal
CxxSInt64Ref.=(SInt64 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64Ptr] EDK[CxxSInt64MutablePtr] LIB[long long *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt64PtrConstPtr
// CxxSInt64PtrPtr
// CxxSInt64PtrConstRef
// CxxSInt64PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstPtr(CxxSInt64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstPtr(CxxSInt64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64PtrConstPtr permits CxxSInt64PtrConstPtr {
  private Data ptr;
  private CxxSInt64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64PtrConstPtr(CxxSInt64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64PtrConstPtr(io CxxSInt64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstPtr(Make_CxxSInt64PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrPtr(CxxSInt64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrPtr(CxxSInt64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64PtrPtr permits CxxSInt64PtrPtr {
  private Data ptr;
  private CxxSInt64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64PtrPtr(CxxSInt64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64PtrPtr(io CxxSInt64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrPtr(Make_CxxSInt64PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef(CxxSInt64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef(CxxSInt64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64PtrConstRef permits CxxSInt64PtrConstRef {
  private Data ptr;
  private CxxSInt64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64PtrConstRef(CxxSInt64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64PtrConstRef(io CxxSInt64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef(Make_CxxSInt64PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef(CxxSInt64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef(CxxSInt64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64PtrRef permits CxxSInt64PtrRef {
  private Data ptr;
  private CxxSInt64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64PtrRef(CxxSInt64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64PtrRef(io CxxSInt64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef(Make_CxxSInt64PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt64PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt64PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef CxxSInt64PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64PtrConstPtr.cxx_getAt on null CxxSInt64PtrConstPtr";
  return CxxSInt64PtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt64MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef CxxSInt64PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt64PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef CxxSInt64PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64PtrPtr.cxx_getAt on null CxxSInt64PtrPtr";
  return CxxSInt64PtrRef(this.ptr.offset(index * __CxxSize_CxxSInt64MutablePtr()));
}

/// Same as for CxxSInt64PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef CxxSInt64PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrPtr.cxx_setAt(Index i, CxxSInt64Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64PtrPtr.cxx_setAt on null CxxSInt64PtrPtr";
  this.ptr.offset(i)->{ CxxSInt64Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef(CxxSInt64PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef.=(CxxSInt64PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt64Ptr value
/// \dfgPresetOmit
/// \internal
CxxSInt64Ptr CxxSInt64PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64PtrConstRef.cxx_get on null CxxSInt64PtrConstRef";
  return this.ptr->{ CxxSInt64Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef.cxx_set(CxxSInt64Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64PtrRef.cxx_set on null CxxSInt64PtrRef";
  this.ptr->{ CxxSInt64Ptr } = value;
}

/// Assignment of CxxSInt64Ptr
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef.=(CxxSInt64Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64ConstPtr] EDK[CxxSInt64ConstPtr] LIB[long long const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxSInt64ConstPtrConstPtr
// CxxSInt64ConstPtrPtr
// CxxSInt64ConstPtrConstRef
// CxxSInt64ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstPtr(CxxSInt64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstPtr(CxxSInt64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64ConstPtrConstPtr permits CxxSInt64ConstPtrConstPtr {
  private Data ptr;
  private CxxSInt64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtrConstPtr(CxxSInt64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtrConstPtr(io CxxSInt64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstPtr(Make_CxxSInt64ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrPtr(CxxSInt64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrPtr(CxxSInt64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64ConstPtrPtr permits CxxSInt64ConstPtrPtr {
  private Data ptr;
  private CxxSInt64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtrPtr(CxxSInt64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtrPtr(io CxxSInt64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrPtr(Make_CxxSInt64ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef(CxxSInt64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef(CxxSInt64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64ConstPtrConstRef permits CxxSInt64ConstPtrConstRef {
  private Data ptr;
  private CxxSInt64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtrConstRef(CxxSInt64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtrConstRef(io CxxSInt64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef(Make_CxxSInt64ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef(CxxSInt64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef(CxxSInt64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxSInt64ConstPtrRef permits CxxSInt64ConstPtrRef {
  private Data ptr;
  private CxxSInt64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtrRef(CxxSInt64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxSInt64ConstPtrRef(io CxxSInt64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef(Make_CxxSInt64ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt64ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt64ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef CxxSInt64ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64ConstPtrConstPtr.cxx_getAt on null CxxSInt64ConstPtrConstPtr";
  return CxxSInt64ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt64ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef CxxSInt64ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt64ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef CxxSInt64ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64ConstPtrPtr.cxx_getAt on null CxxSInt64ConstPtrPtr";
  return CxxSInt64ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt64ConstPtr()));
}

/// Same as for CxxSInt64ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef CxxSInt64ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrPtr.cxx_setAt(Index i, CxxSInt64ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64ConstPtrPtr.cxx_setAt on null CxxSInt64ConstPtrPtr";
  this.ptr.offset(i)->{ CxxSInt64ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef(CxxSInt64ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef.=(CxxSInt64ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt64ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtr CxxSInt64ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64ConstPtrConstRef.cxx_get on null CxxSInt64ConstPtrConstRef";
  return this.ptr->{ CxxSInt64ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef.cxx_set(CxxSInt64ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64ConstPtrRef.cxx_set on null CxxSInt64ConstPtrRef";
  this.ptr->{ CxxSInt64ConstPtr } = value;
}

/// Assignment of CxxSInt64ConstPtr
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef.=(CxxSInt64ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector(
    CxxSInt64StdVector that
    ) = "Kludge__CxxSInt64StdVector__MU__copy_ctor__912b528ec2c43cb4391f0f0a259b2ca4";

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector.__ctor(
    ) = "Kludge__CxxSInt64StdVector__MU__ctor__d62cb0fd346a96af289b73d4b7f03cd8";

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxSInt64StdVector__MU__ctor__c514134566343de5ec89f4964aeca415";

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector.__ctor(
    CxxSInt64ConstPtr _arg0,
    CxxSInt64ConstPtr _arg1
    ) = "Kludge__CxxSInt64StdVector__MU__ctor__f00b42239cea31e1392258893d71c749";

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector(
    CxxSInt64ConstPtr _arg0,
    CxxSInt64ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector(
    in
    SInt64
    _arg0
    
    ,
    in
    SInt64
    _arg1
    
    
    ) {
    
    CxxSInt64ConstPtr _arg0__cxx = Make_CxxSInt64ConstPtr(_arg0);
    
    CxxSInt64ConstPtr _arg1__cxx = Make_CxxSInt64ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxSInt64StdVector() = "Kludge__CxxSInt64StdVector__MU__dtor__53fff3240886219743e1e8ba21dcd928";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVector.cxx_size?(
    )
 = "Kludge__CxxSInt64StdVector__CO__meth_size__4b8b46df14c6f09f741f721795fec521";

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxSInt64StdVector__MU__meth_reserve__e35c1bd561fd966976bc43efc612c67e";

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVector.cxx_push_back!(
    SInt64 _arg0
    )
 = "Kludge__CxxSInt64StdVector__MU__meth_push_back__073f4127b7723cdb10f7c0bf8c37b811";

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxSInt64StdVector__MU__meth_pop_back__678e91cffd73d326cddc4cde0a504cdb";

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVector.push_back!(
    in
    SInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxSInt64StdVector.=(
    CxxSInt64StdVector that
    ) = "Kludge__CxxSInt64StdVector__MU__simple_ass_op__cf465ee60edd86df6a869c1579b0d427";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxSInt64StdVector__CO__get_ind_op__d86a99d1acfdd84d513024e7a2d7b75c";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt64ConstRef value
    )
  = "Kludge__CxxSInt64StdVector__MU__set_ind_op__656a8435d1d56506fa3207ac8a1fe023";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector(SInt64 array<>) {
  this = CxxSInt64StdVector(
    CxxSInt64ConstPtr(array, 0),
    CxxSInt64ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector Make_CxxSInt64StdVector(SInt64 array<>) {
  return CxxSInt64StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline SInt64[] Make_SInt64VariableArray(CxxSInt64StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  SInt64 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxSInt64ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector.appendDesc(io String string) {
  string += "CxxSInt64StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVector] EDK[Fabric_EDK_KL_CxxSInt64StdVector] LIB[std::vector< long long >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtr] EDK[CxxSInt64StdVectorConstPtr] LIB[std::vector< long long > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtr] EDK[CxxSInt64StdVectorConstPtr] LIB[std::vector< long long > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtr.cxx_size on null CxxSInt64StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtr] EDK[CxxSInt64StdVectorConstPtr] LIB[std::vector< long long > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtr.cxx_getAtIndex on null CxxSInt64StdVectorConstPtr";
    return this.ptr.data()->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtr] EDK[CxxSInt64StdVectorMutablePtr] LIB[std::vector< long long > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtr] EDK[CxxSInt64StdVectorMutablePtr] LIB[std::vector< long long > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtr.cxx_size on null CxxSInt64StdVectorPtr";
    return
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtr.cxx_reserve on null CxxSInt64StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtr.cxx_push_back!(
    SInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtr.cxx_push_back on null CxxSInt64StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtr.cxx_pop_back on null CxxSInt64StdVectorPtr";
    
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtr.push_back!(
    in
    SInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtr] EDK[CxxSInt64StdVectorMutablePtr] LIB[std::vector< long long > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtr.cxx_getAtIndex on null CxxSInt64StdVectorPtr";
    return this.ptr.data()->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtr] EDK[CxxSInt64StdVectorMutablePtr] LIB[std::vector< long long > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtr.cxx_setAtIndex on null CxxSInt64StdVectorPtr";
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstRef] EDK[CxxSInt64StdVectorConstRef] LIB[std::vector< long long > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstRef] EDK[CxxSInt64StdVectorConstRef] LIB[std::vector< long long > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstRef] EDK[CxxSInt64StdVectorConstRef] LIB[std::vector< long long > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstRef.cxx_size on null CxxSInt64StdVectorConstRef";
    return
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstRef] EDK[CxxSInt64StdVectorConstRef] LIB[std::vector< long long > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstRef.cxx_getAtIndex on null CxxSInt64StdVectorConstRef";
    return this.ptr.data()->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorRef] EDK[CxxSInt64StdVectorMutableRef] LIB[std::vector< long long > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorRef] EDK[CxxSInt64StdVectorMutableRef] LIB[std::vector< long long > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorRef.cxx_size on null CxxSInt64StdVectorRef";
    return
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorRef.cxx_reserve on null CxxSInt64StdVectorRef";
    
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorRef.cxx_push_back!(
    SInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorRef.cxx_push_back on null CxxSInt64StdVectorRef";
    
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorRef.cxx_pop_back on null CxxSInt64StdVectorRef";
    
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorRef.push_back!(
    in
    SInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorRef] EDK[CxxSInt64StdVectorMutableRef] LIB[std::vector< long long > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorRef.cxx_getAtIndex on null CxxSInt64StdVectorRef";
    return this.ptr.data()->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorRef] EDK[CxxSInt64StdVectorMutableRef] LIB[std::vector< long long > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorRef.cxx_setAtIndex on null CxxSInt64StdVectorRef";
    this.ptr.data()->{ CxxSInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt64StdVectorConstPtr
// CxxSInt64StdVectorPtr
// CxxSInt64StdVectorConstRef
// CxxSInt64StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtr(CxxSInt64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtr(CxxSInt64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtr(CxxSInt64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtr Make_CxxSInt64StdVectorConstPtr(CxxSInt64StdVector value) {
  return CxxSInt64StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtr(CxxSInt64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtr(CxxSInt64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtr(CxxSInt64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtr Make_CxxSInt64StdVectorPtr(CxxSInt64StdVector value) {
  return CxxSInt64StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef(CxxSInt64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef(CxxSInt64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef(CxxSInt64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef Make_CxxSInt64StdVectorConstRef(CxxSInt64StdVector value) {
  return CxxSInt64StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef(CxxSInt64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef(CxxSInt64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef(CxxSInt64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef Make_CxxSInt64StdVectorRef(CxxSInt64StdVector value) {
  return CxxSInt64StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt64StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt64StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef CxxSInt64StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorConstPtr.cxx_getAt on null CxxSInt64StdVectorConstPtr";
  return CxxSInt64StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt64StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef CxxSInt64StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt64StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef CxxSInt64StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorPtr.cxx_getAt on null CxxSInt64StdVectorPtr";
  return CxxSInt64StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxSInt64StdVector()));
}

/// Same as for CxxSInt64StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef CxxSInt64StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtr.cxx_setAt(Index i, CxxSInt64StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorPtr.cxx_setAt on null CxxSInt64StdVectorPtr";
  this.ptr.offset(i)->{ CxxSInt64StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef(CxxSInt64StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef.=(CxxSInt64StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt64StdVector value
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVector CxxSInt64StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorConstRef.cxx_get on null CxxSInt64StdVectorConstRef";
  return this.ptr.data()->{ CxxSInt64StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef.cxx_set(CxxSInt64StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorRef.cxx_set on null CxxSInt64StdVectorRef";
  this.ptr.data()->{ CxxSInt64StdVector } = value;
}

/// Assignment of CxxSInt64StdVector
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef.=(CxxSInt64StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVectorPtr] EDK[CxxSInt64StdVectorMutablePtr] LIB[std::vector< long long > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrConstPtr] EDK[CxxSInt64StdVectorPtrConstPtr] LIB[std::vector< long long > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrConstPtr] EDK[CxxSInt64StdVectorPtrConstPtr] LIB[std::vector< long long > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrConstPtr.cxx_size on null CxxSInt64StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrConstPtr] EDK[CxxSInt64StdVectorPtrConstPtr] LIB[std::vector< long long > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrConstPtr.cxx_getAtIndex on null CxxSInt64StdVectorPtrConstPtr";
    return this.ptr->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrPtr] EDK[CxxSInt64StdVectorPtrMutablePtr] LIB[std::vector< long long > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrPtr] EDK[CxxSInt64StdVectorPtrMutablePtr] LIB[std::vector< long long > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrPtr.cxx_size on null CxxSInt64StdVectorPtrPtr";
    return
    this.ptr->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrPtr.cxx_reserve on null CxxSInt64StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrPtr.cxx_push_back!(
    SInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrPtr.cxx_push_back on null CxxSInt64StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrPtr.cxx_pop_back on null CxxSInt64StdVectorPtrPtr";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrPtr.push_back!(
    in
    SInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrPtr] EDK[CxxSInt64StdVectorPtrMutablePtr] LIB[std::vector< long long > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrPtr.cxx_getAtIndex on null CxxSInt64StdVectorPtrPtr";
    return this.ptr->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrPtr] EDK[CxxSInt64StdVectorPtrMutablePtr] LIB[std::vector< long long > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrPtr.cxx_setAtIndex on null CxxSInt64StdVectorPtrPtr";
    this.ptr->{ CxxSInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrConstRef] EDK[CxxSInt64StdVectorPtrConstRef] LIB[std::vector< long long > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrConstRef] EDK[CxxSInt64StdVectorPtrConstRef] LIB[std::vector< long long > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrConstRef] EDK[CxxSInt64StdVectorPtrConstRef] LIB[std::vector< long long > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrConstRef.cxx_size on null CxxSInt64StdVectorPtrConstRef";
    return
    this.ptr->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrConstRef] EDK[CxxSInt64StdVectorPtrConstRef] LIB[std::vector< long long > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrConstRef.cxx_getAtIndex on null CxxSInt64StdVectorPtrConstRef";
    return this.ptr->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrRef] EDK[CxxSInt64StdVectorPtrMutableRef] LIB[std::vector< long long > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrRef] EDK[CxxSInt64StdVectorPtrMutableRef] LIB[std::vector< long long > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrRef.cxx_size on null CxxSInt64StdVectorPtrRef";
    return
    this.ptr->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrRef.cxx_reserve on null CxxSInt64StdVectorPtrRef";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrRef.cxx_push_back!(
    SInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrRef.cxx_push_back on null CxxSInt64StdVectorPtrRef";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrRef.cxx_pop_back on null CxxSInt64StdVectorPtrRef";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorPtrRef.push_back!(
    in
    SInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrRef] EDK[CxxSInt64StdVectorPtrMutableRef] LIB[std::vector< long long > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrRef.cxx_getAtIndex on null CxxSInt64StdVectorPtrRef";
    return this.ptr->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorPtrRef] EDK[CxxSInt64StdVectorPtrMutableRef] LIB[std::vector< long long > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorPtrRef.cxx_setAtIndex on null CxxSInt64StdVectorPtrRef";
    this.ptr->{ CxxSInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt64StdVectorPtrConstPtr
// CxxSInt64StdVectorPtrPtr
// CxxSInt64StdVectorPtrConstRef
// CxxSInt64StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstPtr(CxxSInt64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstPtr(CxxSInt64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstPtr(CxxSInt64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstPtr Make_CxxSInt64StdVectorPtrConstPtr(CxxSInt64StdVectorPtr value) {
  return CxxSInt64StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrPtr(CxxSInt64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrPtr(CxxSInt64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrPtr(CxxSInt64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrPtr Make_CxxSInt64StdVectorPtrPtr(CxxSInt64StdVectorPtr value) {
  return CxxSInt64StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef(CxxSInt64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef(CxxSInt64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef(CxxSInt64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef Make_CxxSInt64StdVectorPtrConstRef(CxxSInt64StdVectorPtr value) {
  return CxxSInt64StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef(CxxSInt64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef(CxxSInt64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef(CxxSInt64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef Make_CxxSInt64StdVectorPtrRef(CxxSInt64StdVectorPtr value) {
  return CxxSInt64StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt64StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt64StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef CxxSInt64StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorPtrConstPtr.cxx_getAt on null CxxSInt64StdVectorPtrConstPtr";
  return CxxSInt64StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt64StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef CxxSInt64StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt64StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef CxxSInt64StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorPtrPtr.cxx_getAt on null CxxSInt64StdVectorPtrPtr";
  return CxxSInt64StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt64StdVectorMutablePtr()));
}

/// Same as for CxxSInt64StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef CxxSInt64StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrPtr.cxx_setAt(Index i, CxxSInt64StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorPtrPtr.cxx_setAt on null CxxSInt64StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxSInt64StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef(CxxSInt64StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef.=(CxxSInt64StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt64StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtr CxxSInt64StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorPtrConstRef.cxx_get on null CxxSInt64StdVectorPtrConstRef";
  return this.ptr->{ CxxSInt64StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef.cxx_set(CxxSInt64StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorPtrRef.cxx_set on null CxxSInt64StdVectorPtrRef";
  this.ptr->{ CxxSInt64StdVectorPtr } = value;
}

/// Assignment of CxxSInt64StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef.=(CxxSInt64StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxSInt64StdVectorConstPtr] EDK[CxxSInt64StdVectorConstPtr] LIB[std::vector< long long > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrConstPtr] EDK[CxxSInt64StdVectorConstPtrConstPtr] LIB[std::vector< long long > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrConstPtr] EDK[CxxSInt64StdVectorConstPtrConstPtr] LIB[std::vector< long long > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrConstPtr.cxx_size on null CxxSInt64StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrConstPtr] EDK[CxxSInt64StdVectorConstPtrConstPtr] LIB[std::vector< long long > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxSInt64StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrPtr] EDK[CxxSInt64StdVectorConstPtrMutablePtr] LIB[std::vector< long long > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrPtr] EDK[CxxSInt64StdVectorConstPtrMutablePtr] LIB[std::vector< long long > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrPtr.cxx_size on null CxxSInt64StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrPtr.cxx_reserve on null CxxSInt64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrPtr.cxx_push_back!(
    SInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrPtr.cxx_push_back on null CxxSInt64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrPtr.cxx_pop_back on null CxxSInt64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrPtr.push_back!(
    in
    SInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrPtr] EDK[CxxSInt64StdVectorConstPtrMutablePtr] LIB[std::vector< long long > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrPtr.cxx_getAtIndex on null CxxSInt64StdVectorConstPtrPtr";
    return this.ptr->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrPtr] EDK[CxxSInt64StdVectorConstPtrMutablePtr] LIB[std::vector< long long > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrPtr.cxx_setAtIndex on null CxxSInt64StdVectorConstPtrPtr";
    this.ptr->{ CxxSInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrConstRef] EDK[CxxSInt64StdVectorConstPtrConstRef] LIB[std::vector< long long > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrConstRef] EDK[CxxSInt64StdVectorConstPtrConstRef] LIB[std::vector< long long > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrConstRef] EDK[CxxSInt64StdVectorConstPtrConstRef] LIB[std::vector< long long > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrConstRef.cxx_size on null CxxSInt64StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrConstRef] EDK[CxxSInt64StdVectorConstPtrConstRef] LIB[std::vector< long long > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxSInt64StdVectorConstPtrConstRef";
    return this.ptr->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrRef] EDK[CxxSInt64StdVectorConstPtrMutableRef] LIB[std::vector< long long > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrRef] EDK[CxxSInt64StdVectorConstPtrMutableRef] LIB[std::vector< long long > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrRef.cxx_size on null CxxSInt64StdVectorConstPtrRef";
    return
    this.ptr->{ CxxSInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrRef.cxx_reserve on null CxxSInt64StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrRef.cxx_push_back!(
    SInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrRef.cxx_push_back on null CxxSInt64StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrRef.cxx_pop_back on null CxxSInt64StdVectorConstPtrRef";
    
    this.ptr->{ CxxSInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxSInt64StdVectorConstPtrRef.push_back!(
    in
    SInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxSInt64StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrRef] EDK[CxxSInt64StdVectorConstPtrMutableRef] LIB[std::vector< long long > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64ConstRef
CxxSInt64StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrRef.cxx_getAtIndex on null CxxSInt64StdVectorConstPtrRef";
    return this.ptr->{ CxxSInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxSInt64StdVectorConstPtrRef] EDK[CxxSInt64StdVectorConstPtrMutableRef] LIB[std::vector< long long > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxSInt64StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxSInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxSInt64StdVectorConstPtrRef.cxx_setAtIndex on null CxxSInt64StdVectorConstPtrRef";
    this.ptr->{ CxxSInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxSInt64StdVectorConstPtrConstPtr
// CxxSInt64StdVectorConstPtrPtr
// CxxSInt64StdVectorConstPtrConstRef
// CxxSInt64StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstPtr(CxxSInt64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstPtr(CxxSInt64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstPtr(CxxSInt64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstPtr Make_CxxSInt64StdVectorConstPtrConstPtr(CxxSInt64StdVectorConstPtr value) {
  return CxxSInt64StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrPtr(CxxSInt64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrPtr(CxxSInt64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrPtr(CxxSInt64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrPtr Make_CxxSInt64StdVectorConstPtrPtr(CxxSInt64StdVectorConstPtr value) {
  return CxxSInt64StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef(CxxSInt64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef(CxxSInt64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef(CxxSInt64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef Make_CxxSInt64StdVectorConstPtrConstRef(CxxSInt64StdVectorConstPtr value) {
  return CxxSInt64StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef(CxxSInt64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef(CxxSInt64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxSInt64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef(CxxSInt64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef Make_CxxSInt64StdVectorConstPtrRef(CxxSInt64StdVectorConstPtr value) {
  return CxxSInt64StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxSInt64StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxSInt64StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxSInt64StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef CxxSInt64StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorConstPtrConstPtr.cxx_getAt on null CxxSInt64StdVectorConstPtrConstPtr";
  return CxxSInt64StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxSInt64StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef CxxSInt64StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxSInt64StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef CxxSInt64StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorConstPtrPtr.cxx_getAt on null CxxSInt64StdVectorConstPtrPtr";
  return CxxSInt64StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxSInt64StdVectorConstPtr()));
}

/// Same as for CxxSInt64StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef CxxSInt64StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrPtr.cxx_setAt(Index i, CxxSInt64StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorConstPtrPtr.cxx_setAt on null CxxSInt64StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxSInt64StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef(CxxSInt64StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef.=(CxxSInt64StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxSInt64StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtr CxxSInt64StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorConstPtrConstRef.cxx_get on null CxxSInt64StdVectorConstPtrConstRef";
  return this.ptr->{ CxxSInt64StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef.cxx_set(CxxSInt64StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxSInt64StdVectorConstPtrRef.cxx_set on null CxxSInt64StdVectorConstPtrRef";
  this.ptr->{ CxxSInt64StdVectorConstPtr } = value;
}

/// Assignment of CxxSInt64StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef.=(CxxSInt64StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxSInt64StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[SInt64] EDK[Fabric::EDK::KL::SInt64] LIB[int64_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[unsigned long long]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[unsigned long long]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt64ConstPtr
// CxxUInt64Ptr
// CxxUInt64ConstRef
// CxxUInt64Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtr(UInt64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtr(UInt64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64ConstPtr permits CxxUInt64ConstPtr {
  private Data ptr;
  private UInt64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtr(UInt64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtr(io UInt64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtr(Make_CxxUInt64ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64Ptr(UInt64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64Ptr(UInt64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64Ptr permits CxxUInt64Ptr {
  private Data ptr;
  private UInt64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64Ptr(UInt64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64Ptr(io UInt64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64Ptr(Make_CxxUInt64Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef(UInt64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef(UInt64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64ConstRef permits CxxUInt64ConstRef {
  private Data ptr;
  private UInt64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstRef(UInt64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstRef(io UInt64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef(Make_CxxUInt64ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64Ref(UInt64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64Ref(UInt64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_UInt64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64Ref permits CxxUInt64Ref {
  private Data ptr;
  private UInt64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64Ref(UInt64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64Ref(io UInt64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64Ref(Make_CxxUInt64Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt64ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt64ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef CxxUInt64ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64ConstPtr.cxx_getAt on null CxxUInt64ConstPtr";
  return CxxUInt64ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_UInt64()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef CxxUInt64ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt64ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64Ref CxxUInt64Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64Ptr.cxx_getAt on null CxxUInt64Ptr";
  return CxxUInt64Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_UInt64()));
}

/// Same as for CxxUInt64ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64Ref CxxUInt64Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt64Ptr.cxx_setAt(Index i, UInt64 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64Ptr.cxx_setAt on null CxxUInt64Ptr";
  this.ptr.offset(i)->{ UInt64 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef(CxxUInt64ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef.=(CxxUInt64ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the UInt64 value
/// \dfgPresetOmit
/// \internal
UInt64 CxxUInt64ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64ConstRef.cxx_get on null CxxUInt64ConstRef";
  return this.ptr->{ UInt64 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt64Ref.cxx_set(UInt64 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64Ref.cxx_set on null CxxUInt64Ref";
  this.ptr->{ UInt64 } = value;
}

/// Assignment of UInt64
/// \dfgPresetOmit
/// \internal
CxxUInt64Ref.=(UInt64 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64Ptr] EDK[CxxUInt64MutablePtr] LIB[unsigned long long *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt64PtrConstPtr
// CxxUInt64PtrPtr
// CxxUInt64PtrConstRef
// CxxUInt64PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstPtr(CxxUInt64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstPtr(CxxUInt64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64PtrConstPtr permits CxxUInt64PtrConstPtr {
  private Data ptr;
  private CxxUInt64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64PtrConstPtr(CxxUInt64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64PtrConstPtr(io CxxUInt64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstPtr(Make_CxxUInt64PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrPtr(CxxUInt64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrPtr(CxxUInt64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64PtrPtr permits CxxUInt64PtrPtr {
  private Data ptr;
  private CxxUInt64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64PtrPtr(CxxUInt64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64PtrPtr(io CxxUInt64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrPtr(Make_CxxUInt64PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef(CxxUInt64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef(CxxUInt64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64PtrConstRef permits CxxUInt64PtrConstRef {
  private Data ptr;
  private CxxUInt64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64PtrConstRef(CxxUInt64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64PtrConstRef(io CxxUInt64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef(Make_CxxUInt64PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef(CxxUInt64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef(CxxUInt64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64PtrRef permits CxxUInt64PtrRef {
  private Data ptr;
  private CxxUInt64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64PtrRef(CxxUInt64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64PtrRef(io CxxUInt64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef(Make_CxxUInt64PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt64PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt64PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef CxxUInt64PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64PtrConstPtr.cxx_getAt on null CxxUInt64PtrConstPtr";
  return CxxUInt64PtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt64MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef CxxUInt64PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt64PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef CxxUInt64PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64PtrPtr.cxx_getAt on null CxxUInt64PtrPtr";
  return CxxUInt64PtrRef(this.ptr.offset(index * __CxxSize_CxxUInt64MutablePtr()));
}

/// Same as for CxxUInt64PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef CxxUInt64PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrPtr.cxx_setAt(Index i, CxxUInt64Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64PtrPtr.cxx_setAt on null CxxUInt64PtrPtr";
  this.ptr.offset(i)->{ CxxUInt64Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef(CxxUInt64PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef.=(CxxUInt64PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt64Ptr value
/// \dfgPresetOmit
/// \internal
CxxUInt64Ptr CxxUInt64PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64PtrConstRef.cxx_get on null CxxUInt64PtrConstRef";
  return this.ptr->{ CxxUInt64Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef.cxx_set(CxxUInt64Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64PtrRef.cxx_set on null CxxUInt64PtrRef";
  this.ptr->{ CxxUInt64Ptr } = value;
}

/// Assignment of CxxUInt64Ptr
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef.=(CxxUInt64Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64ConstPtr] EDK[CxxUInt64ConstPtr] LIB[unsigned long long const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxUInt64ConstPtrConstPtr
// CxxUInt64ConstPtrPtr
// CxxUInt64ConstPtrConstRef
// CxxUInt64ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstPtr(CxxUInt64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstPtr(CxxUInt64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64ConstPtrConstPtr permits CxxUInt64ConstPtrConstPtr {
  private Data ptr;
  private CxxUInt64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtrConstPtr(CxxUInt64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtrConstPtr(io CxxUInt64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstPtr(Make_CxxUInt64ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrPtr(CxxUInt64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrPtr(CxxUInt64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64ConstPtrPtr permits CxxUInt64ConstPtrPtr {
  private Data ptr;
  private CxxUInt64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtrPtr(CxxUInt64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtrPtr(io CxxUInt64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrPtr(Make_CxxUInt64ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef(CxxUInt64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef(CxxUInt64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64ConstPtrConstRef permits CxxUInt64ConstPtrConstRef {
  private Data ptr;
  private CxxUInt64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtrConstRef(CxxUInt64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtrConstRef(io CxxUInt64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef(Make_CxxUInt64ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef(CxxUInt64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef(CxxUInt64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxUInt64ConstPtrRef permits CxxUInt64ConstPtrRef {
  private Data ptr;
  private CxxUInt64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtrRef(CxxUInt64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxUInt64ConstPtrRef(io CxxUInt64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef(Make_CxxUInt64ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt64ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt64ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef CxxUInt64ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64ConstPtrConstPtr.cxx_getAt on null CxxUInt64ConstPtrConstPtr";
  return CxxUInt64ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt64ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef CxxUInt64ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt64ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef CxxUInt64ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64ConstPtrPtr.cxx_getAt on null CxxUInt64ConstPtrPtr";
  return CxxUInt64ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt64ConstPtr()));
}

/// Same as for CxxUInt64ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef CxxUInt64ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrPtr.cxx_setAt(Index i, CxxUInt64ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64ConstPtrPtr.cxx_setAt on null CxxUInt64ConstPtrPtr";
  this.ptr.offset(i)->{ CxxUInt64ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef(CxxUInt64ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef.=(CxxUInt64ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt64ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtr CxxUInt64ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64ConstPtrConstRef.cxx_get on null CxxUInt64ConstPtrConstRef";
  return this.ptr->{ CxxUInt64ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef.cxx_set(CxxUInt64ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64ConstPtrRef.cxx_set on null CxxUInt64ConstPtrRef";
  this.ptr->{ CxxUInt64ConstPtr } = value;
}

/// Assignment of CxxUInt64ConstPtr
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef.=(CxxUInt64ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector(
    CxxUInt64StdVector that
    ) = "Kludge__CxxUInt64StdVector__MU__copy_ctor__49584f1b3a888d5f1842d9daf729c01e";

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector.__ctor(
    ) = "Kludge__CxxUInt64StdVector__MU__ctor__f12db67760efb3115408925335a09711";

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxUInt64StdVector__MU__ctor__f4a32475597f65bd71afc83b1652aa5f";

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector.__ctor(
    CxxUInt64ConstPtr _arg0,
    CxxUInt64ConstPtr _arg1
    ) = "Kludge__CxxUInt64StdVector__MU__ctor__e78041d3bfa9b34f5b2ed15cea8ddd6e";

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector(
    CxxUInt64ConstPtr _arg0,
    CxxUInt64ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector(
    in
    UInt64
    _arg0
    
    ,
    in
    UInt64
    _arg1
    
    
    ) {
    
    CxxUInt64ConstPtr _arg0__cxx = Make_CxxUInt64ConstPtr(_arg0);
    
    CxxUInt64ConstPtr _arg1__cxx = Make_CxxUInt64ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxUInt64StdVector() = "Kludge__CxxUInt64StdVector__MU__dtor__f96d21d407e266bd8f32c98629a2f9f7";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVector.cxx_size?(
    )
 = "Kludge__CxxUInt64StdVector__CO__meth_size__b327c81ad7bfcbf06c47d859ce6436cb";

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxUInt64StdVector__MU__meth_reserve__58ff8ebb55572221f6d2051619c9d720";

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVector.cxx_push_back!(
    UInt64 _arg0
    )
 = "Kludge__CxxUInt64StdVector__MU__meth_push_back__6e17a454f89155dab8a363f84e853449";

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxUInt64StdVector__MU__meth_pop_back__faf5f3d296ef52c35417d11bfd837009";

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVector.push_back!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxUInt64StdVector.=(
    CxxUInt64StdVector that
    ) = "Kludge__CxxUInt64StdVector__MU__simple_ass_op__1020b665160601ee09dc52d812b6b654";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxUInt64StdVector__CO__get_ind_op__13de99ba4d15430a673e0206a23139b3";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt64ConstRef value
    )
  = "Kludge__CxxUInt64StdVector__MU__set_ind_op__f7c9a202e0d13203704b15d432ff44aa";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector(UInt64 array<>) {
  this = CxxUInt64StdVector(
    CxxUInt64ConstPtr(array, 0),
    CxxUInt64ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector Make_CxxUInt64StdVector(UInt64 array<>) {
  return CxxUInt64StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline UInt64[] Make_UInt64VariableArray(CxxUInt64StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  UInt64 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxUInt64ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector.appendDesc(io String string) {
  string += "CxxUInt64StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVector] EDK[Fabric_EDK_KL_CxxUInt64StdVector] LIB[std::vector< unsigned long long >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtr] EDK[CxxUInt64StdVectorConstPtr] LIB[std::vector< unsigned long long > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtr] EDK[CxxUInt64StdVectorConstPtr] LIB[std::vector< unsigned long long > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtr.cxx_size on null CxxUInt64StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtr] EDK[CxxUInt64StdVectorConstPtr] LIB[std::vector< unsigned long long > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtr.cxx_getAtIndex on null CxxUInt64StdVectorConstPtr";
    return this.ptr.data()->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtr] EDK[CxxUInt64StdVectorMutablePtr] LIB[std::vector< unsigned long long > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtr] EDK[CxxUInt64StdVectorMutablePtr] LIB[std::vector< unsigned long long > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtr.cxx_size on null CxxUInt64StdVectorPtr";
    return
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtr.cxx_reserve on null CxxUInt64StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtr.cxx_push_back!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtr.cxx_push_back on null CxxUInt64StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtr.cxx_pop_back on null CxxUInt64StdVectorPtr";
    
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtr.push_back!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtr] EDK[CxxUInt64StdVectorMutablePtr] LIB[std::vector< unsigned long long > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtr.cxx_getAtIndex on null CxxUInt64StdVectorPtr";
    return this.ptr.data()->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtr] EDK[CxxUInt64StdVectorMutablePtr] LIB[std::vector< unsigned long long > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtr.cxx_setAtIndex on null CxxUInt64StdVectorPtr";
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstRef] EDK[CxxUInt64StdVectorConstRef] LIB[std::vector< unsigned long long > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstRef] EDK[CxxUInt64StdVectorConstRef] LIB[std::vector< unsigned long long > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstRef] EDK[CxxUInt64StdVectorConstRef] LIB[std::vector< unsigned long long > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstRef.cxx_size on null CxxUInt64StdVectorConstRef";
    return
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstRef] EDK[CxxUInt64StdVectorConstRef] LIB[std::vector< unsigned long long > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstRef.cxx_getAtIndex on null CxxUInt64StdVectorConstRef";
    return this.ptr.data()->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorRef] EDK[CxxUInt64StdVectorMutableRef] LIB[std::vector< unsigned long long > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorRef] EDK[CxxUInt64StdVectorMutableRef] LIB[std::vector< unsigned long long > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorRef.cxx_size on null CxxUInt64StdVectorRef";
    return
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorRef.cxx_reserve on null CxxUInt64StdVectorRef";
    
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorRef.cxx_push_back!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorRef.cxx_push_back on null CxxUInt64StdVectorRef";
    
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorRef.cxx_pop_back on null CxxUInt64StdVectorRef";
    
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorRef.push_back!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorRef] EDK[CxxUInt64StdVectorMutableRef] LIB[std::vector< unsigned long long > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorRef.cxx_getAtIndex on null CxxUInt64StdVectorRef";
    return this.ptr.data()->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorRef] EDK[CxxUInt64StdVectorMutableRef] LIB[std::vector< unsigned long long > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorRef.cxx_setAtIndex on null CxxUInt64StdVectorRef";
    this.ptr.data()->{ CxxUInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt64StdVectorConstPtr
// CxxUInt64StdVectorPtr
// CxxUInt64StdVectorConstRef
// CxxUInt64StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtr(CxxUInt64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtr(CxxUInt64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtr(CxxUInt64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtr Make_CxxUInt64StdVectorConstPtr(CxxUInt64StdVector value) {
  return CxxUInt64StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtr(CxxUInt64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtr(CxxUInt64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtr(CxxUInt64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtr Make_CxxUInt64StdVectorPtr(CxxUInt64StdVector value) {
  return CxxUInt64StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef(CxxUInt64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef(CxxUInt64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef(CxxUInt64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef Make_CxxUInt64StdVectorConstRef(CxxUInt64StdVector value) {
  return CxxUInt64StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef(CxxUInt64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef(CxxUInt64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef(CxxUInt64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef Make_CxxUInt64StdVectorRef(CxxUInt64StdVector value) {
  return CxxUInt64StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt64StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt64StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef CxxUInt64StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorConstPtr.cxx_getAt on null CxxUInt64StdVectorConstPtr";
  return CxxUInt64StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt64StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef CxxUInt64StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt64StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef CxxUInt64StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorPtr.cxx_getAt on null CxxUInt64StdVectorPtr";
  return CxxUInt64StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxUInt64StdVector()));
}

/// Same as for CxxUInt64StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef CxxUInt64StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtr.cxx_setAt(Index i, CxxUInt64StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorPtr.cxx_setAt on null CxxUInt64StdVectorPtr";
  this.ptr.offset(i)->{ CxxUInt64StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef(CxxUInt64StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef.=(CxxUInt64StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt64StdVector value
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVector CxxUInt64StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorConstRef.cxx_get on null CxxUInt64StdVectorConstRef";
  return this.ptr.data()->{ CxxUInt64StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef.cxx_set(CxxUInt64StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorRef.cxx_set on null CxxUInt64StdVectorRef";
  this.ptr.data()->{ CxxUInt64StdVector } = value;
}

/// Assignment of CxxUInt64StdVector
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef.=(CxxUInt64StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVectorPtr] EDK[CxxUInt64StdVectorMutablePtr] LIB[std::vector< unsigned long long > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrConstPtr] EDK[CxxUInt64StdVectorPtrConstPtr] LIB[std::vector< unsigned long long > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrConstPtr] EDK[CxxUInt64StdVectorPtrConstPtr] LIB[std::vector< unsigned long long > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrConstPtr.cxx_size on null CxxUInt64StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrConstPtr] EDK[CxxUInt64StdVectorPtrConstPtr] LIB[std::vector< unsigned long long > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrConstPtr.cxx_getAtIndex on null CxxUInt64StdVectorPtrConstPtr";
    return this.ptr->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrPtr] EDK[CxxUInt64StdVectorPtrMutablePtr] LIB[std::vector< unsigned long long > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrPtr] EDK[CxxUInt64StdVectorPtrMutablePtr] LIB[std::vector< unsigned long long > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrPtr.cxx_size on null CxxUInt64StdVectorPtrPtr";
    return
    this.ptr->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrPtr.cxx_reserve on null CxxUInt64StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrPtr.cxx_push_back!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrPtr.cxx_push_back on null CxxUInt64StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrPtr.cxx_pop_back on null CxxUInt64StdVectorPtrPtr";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrPtr.push_back!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrPtr] EDK[CxxUInt64StdVectorPtrMutablePtr] LIB[std::vector< unsigned long long > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrPtr.cxx_getAtIndex on null CxxUInt64StdVectorPtrPtr";
    return this.ptr->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrPtr] EDK[CxxUInt64StdVectorPtrMutablePtr] LIB[std::vector< unsigned long long > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrPtr.cxx_setAtIndex on null CxxUInt64StdVectorPtrPtr";
    this.ptr->{ CxxUInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrConstRef] EDK[CxxUInt64StdVectorPtrConstRef] LIB[std::vector< unsigned long long > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrConstRef] EDK[CxxUInt64StdVectorPtrConstRef] LIB[std::vector< unsigned long long > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrConstRef] EDK[CxxUInt64StdVectorPtrConstRef] LIB[std::vector< unsigned long long > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrConstRef.cxx_size on null CxxUInt64StdVectorPtrConstRef";
    return
    this.ptr->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrConstRef] EDK[CxxUInt64StdVectorPtrConstRef] LIB[std::vector< unsigned long long > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrConstRef.cxx_getAtIndex on null CxxUInt64StdVectorPtrConstRef";
    return this.ptr->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrRef] EDK[CxxUInt64StdVectorPtrMutableRef] LIB[std::vector< unsigned long long > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrRef] EDK[CxxUInt64StdVectorPtrMutableRef] LIB[std::vector< unsigned long long > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrRef.cxx_size on null CxxUInt64StdVectorPtrRef";
    return
    this.ptr->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrRef.cxx_reserve on null CxxUInt64StdVectorPtrRef";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrRef.cxx_push_back!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrRef.cxx_push_back on null CxxUInt64StdVectorPtrRef";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrRef.cxx_pop_back on null CxxUInt64StdVectorPtrRef";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrRef.push_back!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrRef] EDK[CxxUInt64StdVectorPtrMutableRef] LIB[std::vector< unsigned long long > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrRef.cxx_getAtIndex on null CxxUInt64StdVectorPtrRef";
    return this.ptr->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorPtrRef] EDK[CxxUInt64StdVectorPtrMutableRef] LIB[std::vector< unsigned long long > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorPtrRef.cxx_setAtIndex on null CxxUInt64StdVectorPtrRef";
    this.ptr->{ CxxUInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt64StdVectorPtrConstPtr
// CxxUInt64StdVectorPtrPtr
// CxxUInt64StdVectorPtrConstRef
// CxxUInt64StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstPtr(CxxUInt64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstPtr(CxxUInt64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstPtr(CxxUInt64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstPtr Make_CxxUInt64StdVectorPtrConstPtr(CxxUInt64StdVectorPtr value) {
  return CxxUInt64StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrPtr(CxxUInt64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrPtr(CxxUInt64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrPtr(CxxUInt64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrPtr Make_CxxUInt64StdVectorPtrPtr(CxxUInt64StdVectorPtr value) {
  return CxxUInt64StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef(CxxUInt64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef(CxxUInt64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef(CxxUInt64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef Make_CxxUInt64StdVectorPtrConstRef(CxxUInt64StdVectorPtr value) {
  return CxxUInt64StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef(CxxUInt64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef(CxxUInt64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef(CxxUInt64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef Make_CxxUInt64StdVectorPtrRef(CxxUInt64StdVectorPtr value) {
  return CxxUInt64StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt64StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt64StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef CxxUInt64StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorPtrConstPtr.cxx_getAt on null CxxUInt64StdVectorPtrConstPtr";
  return CxxUInt64StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt64StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef CxxUInt64StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt64StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef CxxUInt64StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorPtrPtr.cxx_getAt on null CxxUInt64StdVectorPtrPtr";
  return CxxUInt64StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt64StdVectorMutablePtr()));
}

/// Same as for CxxUInt64StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef CxxUInt64StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrPtr.cxx_setAt(Index i, CxxUInt64StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorPtrPtr.cxx_setAt on null CxxUInt64StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxUInt64StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef(CxxUInt64StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef.=(CxxUInt64StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt64StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtr CxxUInt64StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorPtrConstRef.cxx_get on null CxxUInt64StdVectorPtrConstRef";
  return this.ptr->{ CxxUInt64StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef.cxx_set(CxxUInt64StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorPtrRef.cxx_set on null CxxUInt64StdVectorPtrRef";
  this.ptr->{ CxxUInt64StdVectorPtr } = value;
}

/// Assignment of CxxUInt64StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef.=(CxxUInt64StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxUInt64StdVectorConstPtr] EDK[CxxUInt64StdVectorConstPtr] LIB[std::vector< unsigned long long > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrConstPtr] EDK[CxxUInt64StdVectorConstPtrConstPtr] LIB[std::vector< unsigned long long > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrConstPtr] EDK[CxxUInt64StdVectorConstPtrConstPtr] LIB[std::vector< unsigned long long > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrConstPtr.cxx_size on null CxxUInt64StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrConstPtr] EDK[CxxUInt64StdVectorConstPtrConstPtr] LIB[std::vector< unsigned long long > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxUInt64StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrPtr] EDK[CxxUInt64StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned long long > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrPtr] EDK[CxxUInt64StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned long long > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrPtr.cxx_size on null CxxUInt64StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrPtr.cxx_reserve on null CxxUInt64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrPtr.cxx_push_back!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrPtr.cxx_push_back on null CxxUInt64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrPtr.cxx_pop_back on null CxxUInt64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrPtr.push_back!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrPtr] EDK[CxxUInt64StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned long long > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrPtr.cxx_getAtIndex on null CxxUInt64StdVectorConstPtrPtr";
    return this.ptr->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrPtr] EDK[CxxUInt64StdVectorConstPtrMutablePtr] LIB[std::vector< unsigned long long > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrPtr.cxx_setAtIndex on null CxxUInt64StdVectorConstPtrPtr";
    this.ptr->{ CxxUInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrConstRef] EDK[CxxUInt64StdVectorConstPtrConstRef] LIB[std::vector< unsigned long long > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrConstRef] EDK[CxxUInt64StdVectorConstPtrConstRef] LIB[std::vector< unsigned long long > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrConstRef] EDK[CxxUInt64StdVectorConstPtrConstRef] LIB[std::vector< unsigned long long > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrConstRef.cxx_size on null CxxUInt64StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrConstRef] EDK[CxxUInt64StdVectorConstPtrConstRef] LIB[std::vector< unsigned long long > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxUInt64StdVectorConstPtrConstRef";
    return this.ptr->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrRef] EDK[CxxUInt64StdVectorConstPtrMutableRef] LIB[std::vector< unsigned long long > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrRef] EDK[CxxUInt64StdVectorConstPtrMutableRef] LIB[std::vector< unsigned long long > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrRef.cxx_size on null CxxUInt64StdVectorConstPtrRef";
    return
    this.ptr->{ CxxUInt64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrRef.cxx_reserve on null CxxUInt64StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrRef.cxx_push_back!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrRef.cxx_push_back on null CxxUInt64StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrRef.cxx_pop_back on null CxxUInt64StdVectorConstPtrRef";
    
    this.ptr->{ CxxUInt64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrRef.push_back!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxUInt64StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxUInt64StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrRef] EDK[CxxUInt64StdVectorConstPtrMutableRef] LIB[std::vector< unsigned long long > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64ConstRef
CxxUInt64StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrRef.cxx_getAtIndex on null CxxUInt64StdVectorConstPtrRef";
    return this.ptr->{ CxxUInt64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxUInt64StdVectorConstPtrRef] EDK[CxxUInt64StdVectorConstPtrMutableRef] LIB[std::vector< unsigned long long > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxUInt64StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxUInt64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxUInt64StdVectorConstPtrRef.cxx_setAtIndex on null CxxUInt64StdVectorConstPtrRef";
    this.ptr->{ CxxUInt64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxUInt64StdVectorConstPtrConstPtr
// CxxUInt64StdVectorConstPtrPtr
// CxxUInt64StdVectorConstPtrConstRef
// CxxUInt64StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstPtr(CxxUInt64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstPtr(CxxUInt64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstPtr(CxxUInt64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstPtr Make_CxxUInt64StdVectorConstPtrConstPtr(CxxUInt64StdVectorConstPtr value) {
  return CxxUInt64StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrPtr(CxxUInt64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrPtr(CxxUInt64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrPtr(CxxUInt64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrPtr Make_CxxUInt64StdVectorConstPtrPtr(CxxUInt64StdVectorConstPtr value) {
  return CxxUInt64StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef(CxxUInt64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef(CxxUInt64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef(CxxUInt64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef Make_CxxUInt64StdVectorConstPtrConstRef(CxxUInt64StdVectorConstPtr value) {
  return CxxUInt64StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef(CxxUInt64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef(CxxUInt64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxUInt64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef(CxxUInt64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef Make_CxxUInt64StdVectorConstPtrRef(CxxUInt64StdVectorConstPtr value) {
  return CxxUInt64StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxUInt64StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxUInt64StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxUInt64StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef CxxUInt64StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorConstPtrConstPtr.cxx_getAt on null CxxUInt64StdVectorConstPtrConstPtr";
  return CxxUInt64StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxUInt64StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef CxxUInt64StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxUInt64StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef CxxUInt64StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorConstPtrPtr.cxx_getAt on null CxxUInt64StdVectorConstPtrPtr";
  return CxxUInt64StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxUInt64StdVectorConstPtr()));
}

/// Same as for CxxUInt64StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef CxxUInt64StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrPtr.cxx_setAt(Index i, CxxUInt64StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorConstPtrPtr.cxx_setAt on null CxxUInt64StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxUInt64StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef(CxxUInt64StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef.=(CxxUInt64StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxUInt64StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtr CxxUInt64StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorConstPtrConstRef.cxx_get on null CxxUInt64StdVectorConstPtrConstRef";
  return this.ptr->{ CxxUInt64StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef.cxx_set(CxxUInt64StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxUInt64StdVectorConstPtrRef.cxx_set on null CxxUInt64StdVectorConstPtrRef";
  this.ptr->{ CxxUInt64StdVectorConstPtr } = value;
}

/// Assignment of CxxUInt64StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef.=(CxxUInt64StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxUInt64StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[uint64_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[ptrdiff_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[UInt64] EDK[Fabric::EDK::KL::UInt64] LIB[intptr_t]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float32] EDK[Fabric::EDK::KL::Float32] LIB[float]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxFloat32ConstPtr
// CxxFloat32Ptr
// CxxFloat32ConstRef
// CxxFloat32Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr(Float32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr(Float32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Float32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32ConstPtr permits CxxFloat32ConstPtr {
  private Data ptr;
  private Float32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtr(Float32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtr(io Float32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr(Make_CxxFloat32ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr(Float32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr(Float32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Float32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32Ptr permits CxxFloat32Ptr {
  private Data ptr;
  private Float32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32Ptr(Float32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32Ptr(io Float32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr(Make_CxxFloat32Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef(Float32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef(Float32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Float32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32ConstRef permits CxxFloat32ConstRef {
  private Data ptr;
  private Float32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstRef(Float32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstRef(io Float32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef(Make_CxxFloat32ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32Ref(Float32 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32Ref(Float32 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Float32());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32Ref permits CxxFloat32Ref {
  private Data ptr;
  private Float32 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32Ref(Float32 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32Ref(io Float32 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32Ref(Make_CxxFloat32Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat32ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat32ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef CxxFloat32ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32ConstPtr.cxx_getAt on null CxxFloat32ConstPtr";
  return CxxFloat32ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Float32()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef CxxFloat32ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32Ref CxxFloat32Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32Ptr.cxx_getAt on null CxxFloat32Ptr";
  return CxxFloat32Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Float32()));
}

/// Same as for CxxFloat32ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32Ref CxxFloat32Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr.cxx_setAt(Index i, Float32 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32Ptr.cxx_setAt on null CxxFloat32Ptr";
  this.ptr.offset(i)->{ Float32 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef(CxxFloat32ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef.=(CxxFloat32ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the Float32 value
/// \dfgPresetOmit
/// \internal
Float32 CxxFloat32ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32ConstRef.cxx_get on null CxxFloat32ConstRef";
  return this.ptr->{ Float32 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat32Ref.cxx_set(Float32 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32Ref.cxx_set on null CxxFloat32Ref";
  this.ptr->{ Float32 } = value;
}

/// Assignment of Float32
/// \dfgPresetOmit
/// \internal
CxxFloat32Ref.=(Float32 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32Ptr] EDK[CxxFloat32MutablePtr] LIB[float *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxFloat32PtrConstPtr
// CxxFloat32PtrPtr
// CxxFloat32PtrConstRef
// CxxFloat32PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstPtr(CxxFloat32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstPtr(CxxFloat32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32PtrConstPtr permits CxxFloat32PtrConstPtr {
  private Data ptr;
  private CxxFloat32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32PtrConstPtr(CxxFloat32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32PtrConstPtr(io CxxFloat32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstPtr(Make_CxxFloat32PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrPtr(CxxFloat32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrPtr(CxxFloat32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32PtrPtr permits CxxFloat32PtrPtr {
  private Data ptr;
  private CxxFloat32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32PtrPtr(CxxFloat32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32PtrPtr(io CxxFloat32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrPtr(Make_CxxFloat32PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef(CxxFloat32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef(CxxFloat32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32PtrConstRef permits CxxFloat32PtrConstRef {
  private Data ptr;
  private CxxFloat32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32PtrConstRef(CxxFloat32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32PtrConstRef(io CxxFloat32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef(Make_CxxFloat32PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef(CxxFloat32Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef(CxxFloat32Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32PtrRef permits CxxFloat32PtrRef {
  private Data ptr;
  private CxxFloat32Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32PtrRef(CxxFloat32Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32PtrRef(io CxxFloat32Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef(Make_CxxFloat32PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat32PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat32PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef CxxFloat32PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32PtrConstPtr.cxx_getAt on null CxxFloat32PtrConstPtr";
  return CxxFloat32PtrConstRef(this.ptr.offset(index * __CxxSize_CxxFloat32MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef CxxFloat32PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat32PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef CxxFloat32PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32PtrPtr.cxx_getAt on null CxxFloat32PtrPtr";
  return CxxFloat32PtrRef(this.ptr.offset(index * __CxxSize_CxxFloat32MutablePtr()));
}

/// Same as for CxxFloat32PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef CxxFloat32PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrPtr.cxx_setAt(Index i, CxxFloat32Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32PtrPtr.cxx_setAt on null CxxFloat32PtrPtr";
  this.ptr.offset(i)->{ CxxFloat32Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef(CxxFloat32PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef.=(CxxFloat32PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat32Ptr value
/// \dfgPresetOmit
/// \internal
CxxFloat32Ptr CxxFloat32PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32PtrConstRef.cxx_get on null CxxFloat32PtrConstRef";
  return this.ptr->{ CxxFloat32Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef.cxx_set(CxxFloat32Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32PtrRef.cxx_set on null CxxFloat32PtrRef";
  this.ptr->{ CxxFloat32Ptr } = value;
}

/// Assignment of CxxFloat32Ptr
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef.=(CxxFloat32Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32ConstPtr] EDK[CxxFloat32ConstPtr] LIB[float const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxFloat32ConstPtrConstPtr
// CxxFloat32ConstPtrPtr
// CxxFloat32ConstPtrConstRef
// CxxFloat32ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstPtr(CxxFloat32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstPtr(CxxFloat32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32ConstPtrConstPtr permits CxxFloat32ConstPtrConstPtr {
  private Data ptr;
  private CxxFloat32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtrConstPtr(CxxFloat32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtrConstPtr(io CxxFloat32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstPtr(Make_CxxFloat32ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrPtr(CxxFloat32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrPtr(CxxFloat32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32ConstPtrPtr permits CxxFloat32ConstPtrPtr {
  private Data ptr;
  private CxxFloat32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtrPtr(CxxFloat32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtrPtr(io CxxFloat32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrPtr(Make_CxxFloat32ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef(CxxFloat32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef(CxxFloat32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32ConstPtrConstRef permits CxxFloat32ConstPtrConstRef {
  private Data ptr;
  private CxxFloat32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtrConstRef(CxxFloat32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtrConstRef(io CxxFloat32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef(Make_CxxFloat32ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef(CxxFloat32ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef(CxxFloat32ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat32ConstPtrRef permits CxxFloat32ConstPtrRef {
  private Data ptr;
  private CxxFloat32ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtrRef(CxxFloat32ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat32ConstPtrRef(io CxxFloat32ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef(Make_CxxFloat32ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat32ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat32ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef CxxFloat32ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32ConstPtrConstPtr.cxx_getAt on null CxxFloat32ConstPtrConstPtr";
  return CxxFloat32ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxFloat32ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef CxxFloat32ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat32ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef CxxFloat32ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32ConstPtrPtr.cxx_getAt on null CxxFloat32ConstPtrPtr";
  return CxxFloat32ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxFloat32ConstPtr()));
}

/// Same as for CxxFloat32ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef CxxFloat32ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrPtr.cxx_setAt(Index i, CxxFloat32ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32ConstPtrPtr.cxx_setAt on null CxxFloat32ConstPtrPtr";
  this.ptr.offset(i)->{ CxxFloat32ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef(CxxFloat32ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef.=(CxxFloat32ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat32ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtr CxxFloat32ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32ConstPtrConstRef.cxx_get on null CxxFloat32ConstPtrConstRef";
  return this.ptr->{ CxxFloat32ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef.cxx_set(CxxFloat32ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32ConstPtrRef.cxx_set on null CxxFloat32ConstPtrRef";
  this.ptr->{ CxxFloat32ConstPtr } = value;
}

/// Assignment of CxxFloat32ConstPtr
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef.=(CxxFloat32ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector(
    CxxFloat32StdVector that
    ) = "Kludge__CxxFloat32StdVector__MU__copy_ctor__13859eac7b0ac846494be25b9abca6c9";

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector.__ctor(
    ) = "Kludge__CxxFloat32StdVector__MU__ctor__7b3893dfe85abcb600be5f3ae283753b";

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxFloat32StdVector__MU__ctor__0de9992a0d6f9812d52554d37e934213";

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector.__ctor(
    CxxFloat32ConstPtr _arg0,
    CxxFloat32ConstPtr _arg1
    ) = "Kludge__CxxFloat32StdVector__MU__ctor__f90a0975258bf9a6f5e61e6ab9428130";

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector(
    CxxFloat32ConstPtr _arg0,
    CxxFloat32ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector(
    in
    Float32
    _arg0
    
    ,
    in
    Float32
    _arg1
    
    
    ) {
    
    CxxFloat32ConstPtr _arg0__cxx = Make_CxxFloat32ConstPtr(_arg0);
    
    CxxFloat32ConstPtr _arg1__cxx = Make_CxxFloat32ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxFloat32StdVector() = "Kludge__CxxFloat32StdVector__MU__dtor__7bcd485f9949a92132f5a0d9d39aa38c";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVector.cxx_size?(
    )
 = "Kludge__CxxFloat32StdVector__CO__meth_size__1812d166dbe63a204cfc3e984d649968";

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxFloat32StdVector__MU__meth_reserve__d13a52c1aee1937c884979a3c7493352";

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVector.cxx_push_back!(
    Float32 _arg0
    )
 = "Kludge__CxxFloat32StdVector__MU__meth_push_back__d59ebe8b3a49dcd71b04d625a3267190";

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxFloat32StdVector__MU__meth_pop_back__0406c1122ef43bf12ce40787292487ac";

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVector.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxFloat32StdVector.=(
    CxxFloat32StdVector that
    ) = "Kludge__CxxFloat32StdVector__MU__simple_ass_op__dd56ddc110cc3a6aa06ab3b9a19f9fcc";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxFloat32StdVector__CO__get_ind_op__aaccab3fd85bbee4108acfe51bafdcf9";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat32ConstRef value
    )
  = "Kludge__CxxFloat32StdVector__MU__set_ind_op__78ed3d5f9cc3c518410677780da33ede";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector(Float32 array<>) {
  this = CxxFloat32StdVector(
    CxxFloat32ConstPtr(array, 0),
    CxxFloat32ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector Make_CxxFloat32StdVector(Float32 array<>) {
  return CxxFloat32StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline Float32[] Make_Float32VariableArray(CxxFloat32StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  Float32 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxFloat32ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector.appendDesc(io String string) {
  string += "CxxFloat32StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVector] EDK[Fabric_EDK_KL_CxxFloat32StdVector] LIB[std::vector< float >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtr] EDK[CxxFloat32StdVectorConstPtr] LIB[std::vector< float > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtr] EDK[CxxFloat32StdVectorConstPtr] LIB[std::vector< float > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtr.cxx_size on null CxxFloat32StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtr] EDK[CxxFloat32StdVectorConstPtr] LIB[std::vector< float > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtr.cxx_getAtIndex on null CxxFloat32StdVectorConstPtr";
    return this.ptr.data()->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtr] EDK[CxxFloat32StdVectorMutablePtr] LIB[std::vector< float > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtr] EDK[CxxFloat32StdVectorMutablePtr] LIB[std::vector< float > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtr.cxx_size on null CxxFloat32StdVectorPtr";
    return
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtr.cxx_reserve on null CxxFloat32StdVectorPtr";
    
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtr.cxx_push_back!(
    Float32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtr.cxx_push_back on null CxxFloat32StdVectorPtr";
    
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtr.cxx_pop_back on null CxxFloat32StdVectorPtr";
    
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtr.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtr] EDK[CxxFloat32StdVectorMutablePtr] LIB[std::vector< float > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtr.cxx_getAtIndex on null CxxFloat32StdVectorPtr";
    return this.ptr.data()->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtr] EDK[CxxFloat32StdVectorMutablePtr] LIB[std::vector< float > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtr.cxx_setAtIndex on null CxxFloat32StdVectorPtr";
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstRef] EDK[CxxFloat32StdVectorConstRef] LIB[std::vector< float > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstRef] EDK[CxxFloat32StdVectorConstRef] LIB[std::vector< float > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstRef] EDK[CxxFloat32StdVectorConstRef] LIB[std::vector< float > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstRef.cxx_size on null CxxFloat32StdVectorConstRef";
    return
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstRef] EDK[CxxFloat32StdVectorConstRef] LIB[std::vector< float > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstRef.cxx_getAtIndex on null CxxFloat32StdVectorConstRef";
    return this.ptr.data()->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorRef] EDK[CxxFloat32StdVectorMutableRef] LIB[std::vector< float > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorRef] EDK[CxxFloat32StdVectorMutableRef] LIB[std::vector< float > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorRef.cxx_size on null CxxFloat32StdVectorRef";
    return
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorRef.cxx_reserve on null CxxFloat32StdVectorRef";
    
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorRef.cxx_push_back!(
    Float32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorRef.cxx_push_back on null CxxFloat32StdVectorRef";
    
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorRef.cxx_pop_back on null CxxFloat32StdVectorRef";
    
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorRef.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorRef] EDK[CxxFloat32StdVectorMutableRef] LIB[std::vector< float > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorRef.cxx_getAtIndex on null CxxFloat32StdVectorRef";
    return this.ptr.data()->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorRef] EDK[CxxFloat32StdVectorMutableRef] LIB[std::vector< float > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorRef.cxx_setAtIndex on null CxxFloat32StdVectorRef";
    this.ptr.data()->{ CxxFloat32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxFloat32StdVectorConstPtr
// CxxFloat32StdVectorPtr
// CxxFloat32StdVectorConstRef
// CxxFloat32StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtr(CxxFloat32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtr(CxxFloat32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtr(CxxFloat32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtr Make_CxxFloat32StdVectorConstPtr(CxxFloat32StdVector value) {
  return CxxFloat32StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtr(CxxFloat32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtr(CxxFloat32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtr(CxxFloat32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtr Make_CxxFloat32StdVectorPtr(CxxFloat32StdVector value) {
  return CxxFloat32StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef(CxxFloat32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef(CxxFloat32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef(CxxFloat32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef Make_CxxFloat32StdVectorConstRef(CxxFloat32StdVector value) {
  return CxxFloat32StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef(CxxFloat32StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef(CxxFloat32StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat32StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef(CxxFloat32StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef Make_CxxFloat32StdVectorRef(CxxFloat32StdVector value) {
  return CxxFloat32StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat32StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat32StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef CxxFloat32StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorConstPtr.cxx_getAt on null CxxFloat32StdVectorConstPtr";
  return CxxFloat32StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat32StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef CxxFloat32StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat32StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef CxxFloat32StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorPtr.cxx_getAt on null CxxFloat32StdVectorPtr";
  return CxxFloat32StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat32StdVector()));
}

/// Same as for CxxFloat32StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef CxxFloat32StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtr.cxx_setAt(Index i, CxxFloat32StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorPtr.cxx_setAt on null CxxFloat32StdVectorPtr";
  this.ptr.offset(i)->{ CxxFloat32StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef(CxxFloat32StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef.=(CxxFloat32StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat32StdVector value
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVector CxxFloat32StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorConstRef.cxx_get on null CxxFloat32StdVectorConstRef";
  return this.ptr.data()->{ CxxFloat32StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef.cxx_set(CxxFloat32StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorRef.cxx_set on null CxxFloat32StdVectorRef";
  this.ptr.data()->{ CxxFloat32StdVector } = value;
}

/// Assignment of CxxFloat32StdVector
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef.=(CxxFloat32StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVectorPtr] EDK[CxxFloat32StdVectorMutablePtr] LIB[std::vector< float > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrConstPtr] EDK[CxxFloat32StdVectorPtrConstPtr] LIB[std::vector< float > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrConstPtr] EDK[CxxFloat32StdVectorPtrConstPtr] LIB[std::vector< float > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrConstPtr.cxx_size on null CxxFloat32StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrConstPtr] EDK[CxxFloat32StdVectorPtrConstPtr] LIB[std::vector< float > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrConstPtr.cxx_getAtIndex on null CxxFloat32StdVectorPtrConstPtr";
    return this.ptr->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrPtr] EDK[CxxFloat32StdVectorPtrMutablePtr] LIB[std::vector< float > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrPtr] EDK[CxxFloat32StdVectorPtrMutablePtr] LIB[std::vector< float > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrPtr.cxx_size on null CxxFloat32StdVectorPtrPtr";
    return
    this.ptr->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrPtr.cxx_reserve on null CxxFloat32StdVectorPtrPtr";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrPtr.cxx_push_back!(
    Float32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrPtr.cxx_push_back on null CxxFloat32StdVectorPtrPtr";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrPtr.cxx_pop_back on null CxxFloat32StdVectorPtrPtr";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrPtr.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrPtr] EDK[CxxFloat32StdVectorPtrMutablePtr] LIB[std::vector< float > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrPtr.cxx_getAtIndex on null CxxFloat32StdVectorPtrPtr";
    return this.ptr->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrPtr] EDK[CxxFloat32StdVectorPtrMutablePtr] LIB[std::vector< float > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrPtr.cxx_setAtIndex on null CxxFloat32StdVectorPtrPtr";
    this.ptr->{ CxxFloat32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrConstRef] EDK[CxxFloat32StdVectorPtrConstRef] LIB[std::vector< float > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrConstRef] EDK[CxxFloat32StdVectorPtrConstRef] LIB[std::vector< float > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrConstRef] EDK[CxxFloat32StdVectorPtrConstRef] LIB[std::vector< float > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrConstRef.cxx_size on null CxxFloat32StdVectorPtrConstRef";
    return
    this.ptr->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrConstRef] EDK[CxxFloat32StdVectorPtrConstRef] LIB[std::vector< float > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrConstRef.cxx_getAtIndex on null CxxFloat32StdVectorPtrConstRef";
    return this.ptr->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrRef] EDK[CxxFloat32StdVectorPtrMutableRef] LIB[std::vector< float > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrRef] EDK[CxxFloat32StdVectorPtrMutableRef] LIB[std::vector< float > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrRef.cxx_size on null CxxFloat32StdVectorPtrRef";
    return
    this.ptr->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrRef.cxx_reserve on null CxxFloat32StdVectorPtrRef";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrRef.cxx_push_back!(
    Float32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrRef.cxx_push_back on null CxxFloat32StdVectorPtrRef";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrRef.cxx_pop_back on null CxxFloat32StdVectorPtrRef";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrRef.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrRef] EDK[CxxFloat32StdVectorPtrMutableRef] LIB[std::vector< float > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrRef.cxx_getAtIndex on null CxxFloat32StdVectorPtrRef";
    return this.ptr->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorPtrRef] EDK[CxxFloat32StdVectorPtrMutableRef] LIB[std::vector< float > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorPtrRef.cxx_setAtIndex on null CxxFloat32StdVectorPtrRef";
    this.ptr->{ CxxFloat32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxFloat32StdVectorPtrConstPtr
// CxxFloat32StdVectorPtrPtr
// CxxFloat32StdVectorPtrConstRef
// CxxFloat32StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstPtr(CxxFloat32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstPtr(CxxFloat32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstPtr(CxxFloat32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstPtr Make_CxxFloat32StdVectorPtrConstPtr(CxxFloat32StdVectorPtr value) {
  return CxxFloat32StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrPtr(CxxFloat32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrPtr(CxxFloat32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrPtr(CxxFloat32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrPtr Make_CxxFloat32StdVectorPtrPtr(CxxFloat32StdVectorPtr value) {
  return CxxFloat32StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef(CxxFloat32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef(CxxFloat32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef(CxxFloat32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef Make_CxxFloat32StdVectorPtrConstRef(CxxFloat32StdVectorPtr value) {
  return CxxFloat32StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef(CxxFloat32StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef(CxxFloat32StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef(CxxFloat32StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef Make_CxxFloat32StdVectorPtrRef(CxxFloat32StdVectorPtr value) {
  return CxxFloat32StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat32StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat32StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef CxxFloat32StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorPtrConstPtr.cxx_getAt on null CxxFloat32StdVectorPtrConstPtr";
  return CxxFloat32StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxFloat32StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef CxxFloat32StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat32StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef CxxFloat32StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorPtrPtr.cxx_getAt on null CxxFloat32StdVectorPtrPtr";
  return CxxFloat32StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxFloat32StdVectorMutablePtr()));
}

/// Same as for CxxFloat32StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef CxxFloat32StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrPtr.cxx_setAt(Index i, CxxFloat32StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorPtrPtr.cxx_setAt on null CxxFloat32StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxFloat32StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef(CxxFloat32StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef.=(CxxFloat32StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat32StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtr CxxFloat32StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorPtrConstRef.cxx_get on null CxxFloat32StdVectorPtrConstRef";
  return this.ptr->{ CxxFloat32StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef.cxx_set(CxxFloat32StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorPtrRef.cxx_set on null CxxFloat32StdVectorPtrRef";
  this.ptr->{ CxxFloat32StdVectorPtr } = value;
}

/// Assignment of CxxFloat32StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef.=(CxxFloat32StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat32StdVectorConstPtr] EDK[CxxFloat32StdVectorConstPtr] LIB[std::vector< float > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrConstPtr] EDK[CxxFloat32StdVectorConstPtrConstPtr] LIB[std::vector< float > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrConstPtr] EDK[CxxFloat32StdVectorConstPtrConstPtr] LIB[std::vector< float > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrConstPtr.cxx_size on null CxxFloat32StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrConstPtr] EDK[CxxFloat32StdVectorConstPtrConstPtr] LIB[std::vector< float > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxFloat32StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrPtr] EDK[CxxFloat32StdVectorConstPtrMutablePtr] LIB[std::vector< float > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrPtr] EDK[CxxFloat32StdVectorConstPtrMutablePtr] LIB[std::vector< float > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrPtr.cxx_size on null CxxFloat32StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrPtr.cxx_reserve on null CxxFloat32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrPtr.cxx_push_back!(
    Float32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrPtr.cxx_push_back on null CxxFloat32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrPtr.cxx_pop_back on null CxxFloat32StdVectorConstPtrPtr";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrPtr.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrPtr] EDK[CxxFloat32StdVectorConstPtrMutablePtr] LIB[std::vector< float > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrPtr.cxx_getAtIndex on null CxxFloat32StdVectorConstPtrPtr";
    return this.ptr->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrPtr] EDK[CxxFloat32StdVectorConstPtrMutablePtr] LIB[std::vector< float > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrPtr.cxx_setAtIndex on null CxxFloat32StdVectorConstPtrPtr";
    this.ptr->{ CxxFloat32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrConstRef] EDK[CxxFloat32StdVectorConstPtrConstRef] LIB[std::vector< float > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrConstRef] EDK[CxxFloat32StdVectorConstPtrConstRef] LIB[std::vector< float > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrConstRef] EDK[CxxFloat32StdVectorConstPtrConstRef] LIB[std::vector< float > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrConstRef.cxx_size on null CxxFloat32StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrConstRef] EDK[CxxFloat32StdVectorConstPtrConstRef] LIB[std::vector< float > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxFloat32StdVectorConstPtrConstRef";
    return this.ptr->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrRef] EDK[CxxFloat32StdVectorConstPtrMutableRef] LIB[std::vector< float > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrRef] EDK[CxxFloat32StdVectorConstPtrMutableRef] LIB[std::vector< float > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrRef.cxx_size on null CxxFloat32StdVectorConstPtrRef";
    return
    this.ptr->{ CxxFloat32StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrRef.cxx_reserve on null CxxFloat32StdVectorConstPtrRef";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrRef.cxx_push_back!(
    Float32 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrRef.cxx_push_back on null CxxFloat32StdVectorConstPtrRef";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrRef.cxx_pop_back on null CxxFloat32StdVectorConstPtrRef";
    
    this.ptr->{ CxxFloat32StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat32StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrRef.push_back!(
    in
    Float32
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat32StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrRef] EDK[CxxFloat32StdVectorConstPtrMutableRef] LIB[std::vector< float > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32ConstRef
CxxFloat32StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrRef.cxx_getAtIndex on null CxxFloat32StdVectorConstPtrRef";
    return this.ptr->{ CxxFloat32StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat32StdVectorConstPtrRef] EDK[CxxFloat32StdVectorConstPtrMutableRef] LIB[std::vector< float > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat32StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat32ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat32StdVectorConstPtrRef.cxx_setAtIndex on null CxxFloat32StdVectorConstPtrRef";
    this.ptr->{ CxxFloat32StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxFloat32StdVectorConstPtrConstPtr
// CxxFloat32StdVectorConstPtrPtr
// CxxFloat32StdVectorConstPtrConstRef
// CxxFloat32StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstPtr(CxxFloat32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstPtr(CxxFloat32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstPtr(CxxFloat32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstPtr Make_CxxFloat32StdVectorConstPtrConstPtr(CxxFloat32StdVectorConstPtr value) {
  return CxxFloat32StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrPtr(CxxFloat32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrPtr(CxxFloat32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrPtr(CxxFloat32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrPtr Make_CxxFloat32StdVectorConstPtrPtr(CxxFloat32StdVectorConstPtr value) {
  return CxxFloat32StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef(CxxFloat32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef(CxxFloat32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef(CxxFloat32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef Make_CxxFloat32StdVectorConstPtrConstRef(CxxFloat32StdVectorConstPtr value) {
  return CxxFloat32StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef(CxxFloat32StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef(CxxFloat32StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat32StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef(CxxFloat32StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef Make_CxxFloat32StdVectorConstPtrRef(CxxFloat32StdVectorConstPtr value) {
  return CxxFloat32StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat32StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat32StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat32StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef CxxFloat32StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorConstPtrConstPtr.cxx_getAt on null CxxFloat32StdVectorConstPtrConstPtr";
  return CxxFloat32StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxFloat32StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef CxxFloat32StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat32StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef CxxFloat32StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorConstPtrPtr.cxx_getAt on null CxxFloat32StdVectorConstPtrPtr";
  return CxxFloat32StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxFloat32StdVectorConstPtr()));
}

/// Same as for CxxFloat32StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef CxxFloat32StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrPtr.cxx_setAt(Index i, CxxFloat32StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorConstPtrPtr.cxx_setAt on null CxxFloat32StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxFloat32StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef(CxxFloat32StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef.=(CxxFloat32StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat32StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtr CxxFloat32StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorConstPtrConstRef.cxx_get on null CxxFloat32StdVectorConstPtrConstRef";
  return this.ptr->{ CxxFloat32StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef.cxx_set(CxxFloat32StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat32StdVectorConstPtrRef.cxx_set on null CxxFloat32StdVectorConstPtrRef";
  this.ptr->{ CxxFloat32StdVectorConstPtr } = value;
}

/// Assignment of CxxFloat32StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef.=(CxxFloat32StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat32StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// InPlace KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Float64] EDK[Fabric::EDK::KL::Float64] LIB[double]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxFloat64ConstPtr
// CxxFloat64Ptr
// CxxFloat64ConstRef
// CxxFloat64Ref
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtr(Float64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtr(Float64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Float64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64ConstPtr permits CxxFloat64ConstPtr {
  private Data ptr;
  private Float64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtr(Float64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtr(io Float64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtr(Make_CxxFloat64ConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64Ptr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64Ptr(Float64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64Ptr(Float64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Float64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64Ptr permits CxxFloat64Ptr {
  private Data ptr;
  private Float64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64Ptr(Float64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64Ptr(io Float64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64Ptr(Make_CxxFloat64Ptr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef(Float64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef(Float64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Float64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64ConstRef permits CxxFloat64ConstRef {
  private Data ptr;
  private Float64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstRef(Float64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstRef(io Float64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef(Make_CxxFloat64ConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64Ref(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64Ref(Float64 array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64Ref(Float64 array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Float64());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64Ref permits CxxFloat64Ref {
  private Data ptr;
  private Float64 value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64Ref(Float64 value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64Ref(io Float64 value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64Ref(Make_CxxFloat64Ref maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat64ConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat64ConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64ConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef CxxFloat64ConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64ConstPtr.cxx_getAt on null CxxFloat64ConstPtr";
  return CxxFloat64ConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Float64()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef CxxFloat64ConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat64ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64Ref CxxFloat64Ptr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64Ptr.cxx_getAt on null CxxFloat64Ptr";
  return CxxFloat64Ref(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Float64()));
}

/// Same as for CxxFloat64ConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64Ref CxxFloat64Ptr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat64Ptr.cxx_setAt(Index i, Float64 v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64Ptr.cxx_setAt on null CxxFloat64Ptr";
  this.ptr.offset(i)->{ Float64 } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef(CxxFloat64ConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef.=(CxxFloat64ConstRef that) {
  this.ptr = that.ptr;
}

/// Get the Float64 value
/// \dfgPresetOmit
/// \internal
Float64 CxxFloat64ConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64ConstRef.cxx_get on null CxxFloat64ConstRef";
  return this.ptr->{ Float64 };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64ConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat64Ref.cxx_set(Float64 value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64Ref.cxx_set on null CxxFloat64Ref";
  this.ptr->{ Float64 } = value;
}

/// Assignment of Float64
/// \dfgPresetOmit
/// \internal
CxxFloat64Ref.=(Float64 value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64Ref.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64Ptr] EDK[CxxFloat64MutablePtr] LIB[double *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxFloat64PtrConstPtr
// CxxFloat64PtrPtr
// CxxFloat64PtrConstRef
// CxxFloat64PtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstPtr(CxxFloat64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstPtr(CxxFloat64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64PtrConstPtr permits CxxFloat64PtrConstPtr {
  private Data ptr;
  private CxxFloat64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64PtrConstPtr(CxxFloat64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64PtrConstPtr(io CxxFloat64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstPtr(Make_CxxFloat64PtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrPtr(CxxFloat64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrPtr(CxxFloat64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64PtrPtr permits CxxFloat64PtrPtr {
  private Data ptr;
  private CxxFloat64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64PtrPtr(CxxFloat64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64PtrPtr(io CxxFloat64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrPtr(Make_CxxFloat64PtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef(CxxFloat64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef(CxxFloat64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64PtrConstRef permits CxxFloat64PtrConstRef {
  private Data ptr;
  private CxxFloat64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64PtrConstRef(CxxFloat64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64PtrConstRef(io CxxFloat64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef(Make_CxxFloat64PtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef(CxxFloat64Ptr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef(CxxFloat64Ptr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64MutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64PtrRef permits CxxFloat64PtrRef {
  private Data ptr;
  private CxxFloat64Ptr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64PtrRef(CxxFloat64Ptr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64PtrRef(io CxxFloat64Ptr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef(Make_CxxFloat64PtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat64PtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat64PtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64PtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef CxxFloat64PtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64PtrConstPtr.cxx_getAt on null CxxFloat64PtrConstPtr";
  return CxxFloat64PtrConstRef(this.ptr.offset(index * __CxxSize_CxxFloat64MutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef CxxFloat64PtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat64PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef CxxFloat64PtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64PtrPtr.cxx_getAt on null CxxFloat64PtrPtr";
  return CxxFloat64PtrRef(this.ptr.offset(index * __CxxSize_CxxFloat64MutablePtr()));
}

/// Same as for CxxFloat64PtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef CxxFloat64PtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrPtr.cxx_setAt(Index i, CxxFloat64Ptr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64PtrPtr.cxx_setAt on null CxxFloat64PtrPtr";
  this.ptr.offset(i)->{ CxxFloat64Ptr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef(CxxFloat64PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef.=(CxxFloat64PtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat64Ptr value
/// \dfgPresetOmit
/// \internal
CxxFloat64Ptr CxxFloat64PtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64PtrConstRef.cxx_get on null CxxFloat64PtrConstRef";
  return this.ptr->{ CxxFloat64Ptr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64PtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef.cxx_set(CxxFloat64Ptr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64PtrRef.cxx_set on null CxxFloat64PtrRef";
  this.ptr->{ CxxFloat64Ptr } = value;
}

/// Assignment of CxxFloat64Ptr
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef.=(CxxFloat64Ptr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64PtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64ConstPtr] EDK[CxxFloat64ConstPtr] LIB[double const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxFloat64ConstPtrConstPtr
// CxxFloat64ConstPtrPtr
// CxxFloat64ConstPtrConstRef
// CxxFloat64ConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstPtr(CxxFloat64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstPtr(CxxFloat64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64ConstPtrConstPtr permits CxxFloat64ConstPtrConstPtr {
  private Data ptr;
  private CxxFloat64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtrConstPtr(CxxFloat64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtrConstPtr(io CxxFloat64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstPtr(Make_CxxFloat64ConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrPtr(CxxFloat64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrPtr(CxxFloat64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64ConstPtrPtr permits CxxFloat64ConstPtrPtr {
  private Data ptr;
  private CxxFloat64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtrPtr(CxxFloat64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtrPtr(io CxxFloat64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrPtr(Make_CxxFloat64ConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef(CxxFloat64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef(CxxFloat64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64ConstPtrConstRef permits CxxFloat64ConstPtrConstRef {
  private Data ptr;
  private CxxFloat64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtrConstRef(CxxFloat64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtrConstRef(io CxxFloat64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef(Make_CxxFloat64ConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef(CxxFloat64ConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef(CxxFloat64ConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64ConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxFloat64ConstPtrRef permits CxxFloat64ConstPtrRef {
  private Data ptr;
  private CxxFloat64ConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtrRef(CxxFloat64ConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxFloat64ConstPtrRef(io CxxFloat64ConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef(Make_CxxFloat64ConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat64ConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat64ConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64ConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef CxxFloat64ConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64ConstPtrConstPtr.cxx_getAt on null CxxFloat64ConstPtrConstPtr";
  return CxxFloat64ConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxFloat64ConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef CxxFloat64ConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat64ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef CxxFloat64ConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64ConstPtrPtr.cxx_getAt on null CxxFloat64ConstPtrPtr";
  return CxxFloat64ConstPtrRef(this.ptr.offset(index * __CxxSize_CxxFloat64ConstPtr()));
}

/// Same as for CxxFloat64ConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef CxxFloat64ConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrPtr.cxx_setAt(Index i, CxxFloat64ConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64ConstPtrPtr.cxx_setAt on null CxxFloat64ConstPtrPtr";
  this.ptr.offset(i)->{ CxxFloat64ConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef(CxxFloat64ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef.=(CxxFloat64ConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat64ConstPtr value
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtr CxxFloat64ConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64ConstPtrConstRef.cxx_get on null CxxFloat64ConstPtrConstRef";
  return this.ptr->{ CxxFloat64ConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64ConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef.cxx_set(CxxFloat64ConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64ConstPtrRef.cxx_set on null CxxFloat64ConstPtrRef";
  this.ptr->{ CxxFloat64ConstPtr } = value;
}

/// Assignment of CxxFloat64ConstPtr
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef.=(CxxFloat64ConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64ConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector(
    CxxFloat64StdVector that
    ) = "Kludge__CxxFloat64StdVector__MU__copy_ctor__b362dcdf540937dca29cc8d3475446ab";

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector.__ctor(
    ) = "Kludge__CxxFloat64StdVector__MU__ctor__fab73f703b22a12ea3fa2f9d33444d8e";

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxFloat64StdVector__MU__ctor__68f3b5ecd552770956dfc0b173a97ec0";

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector.__ctor(
    CxxFloat64ConstPtr _arg0,
    CxxFloat64ConstPtr _arg1
    ) = "Kludge__CxxFloat64StdVector__MU__ctor__b83464249f54e7562dd9d2f3a23c2afa";

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector(
    CxxFloat64ConstPtr _arg0,
    CxxFloat64ConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector(
    in
    Float64
    _arg0
    
    ,
    in
    Float64
    _arg1
    
    
    ) {
    
    CxxFloat64ConstPtr _arg0__cxx = Make_CxxFloat64ConstPtr(_arg0);
    
    CxxFloat64ConstPtr _arg1__cxx = Make_CxxFloat64ConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxFloat64StdVector() = "Kludge__CxxFloat64StdVector__MU__dtor__2420ed5a53a79a0435306cfdc0fa572a";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVector.cxx_size?(
    )
 = "Kludge__CxxFloat64StdVector__CO__meth_size__9ebef95d320ebfdbe4e7a509af41e0e1";

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxFloat64StdVector__MU__meth_reserve__72303dc6c7beea7c8baec955cc299979";

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVector.cxx_push_back!(
    Float64 _arg0
    )
 = "Kludge__CxxFloat64StdVector__MU__meth_push_back__b049640c606ad06f3e1f31f99c10a653";

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVector.cxx_pop_back!(
    )
 = "Kludge__CxxFloat64StdVector__MU__meth_pop_back__066d386a542243904cca2a01d7e6df54";

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVector.push_back!(
    in
    Float64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxFloat64StdVector.=(
    CxxFloat64StdVector that
    ) = "Kludge__CxxFloat64StdVector__MU__simple_ass_op__dd881589c1961baa893a51a04738e2ac";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxFloat64StdVector__CO__get_ind_op__7516e510e26de57b2c1f2aae3cb515e2";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64StdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat64ConstRef value
    )
  = "Kludge__CxxFloat64StdVector__MU__set_ind_op__026ac28552d5917c48fd5b59d69a8c07";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector(Float64 array<>) {
  this = CxxFloat64StdVector(
    CxxFloat64ConstPtr(array, 0),
    CxxFloat64ConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector Make_CxxFloat64StdVector(Float64 array<>) {
  return CxxFloat64StdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline Float64[] Make_Float64VariableArray(CxxFloat64StdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  Float64 result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxFloat64ConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector.appendDesc(io String string) {
  string += "CxxFloat64StdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVector] EDK[Fabric_EDK_KL_CxxFloat64StdVector] LIB[std::vector< double >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtr] EDK[CxxFloat64StdVectorConstPtr] LIB[std::vector< double > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtr] EDK[CxxFloat64StdVectorConstPtr] LIB[std::vector< double > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtr.cxx_size on null CxxFloat64StdVectorConstPtr";
    return
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtr] EDK[CxxFloat64StdVectorConstPtr] LIB[std::vector< double > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtr.cxx_getAtIndex on null CxxFloat64StdVectorConstPtr";
    return this.ptr.data()->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtr] EDK[CxxFloat64StdVectorMutablePtr] LIB[std::vector< double > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtr] EDK[CxxFloat64StdVectorMutablePtr] LIB[std::vector< double > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtr.cxx_size on null CxxFloat64StdVectorPtr";
    return
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtr.cxx_reserve on null CxxFloat64StdVectorPtr";
    
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtr.cxx_push_back!(
    Float64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtr.cxx_push_back on null CxxFloat64StdVectorPtr";
    
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtr.cxx_pop_back on null CxxFloat64StdVectorPtr";
    
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtr.push_back!(
    in
    Float64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtr] EDK[CxxFloat64StdVectorMutablePtr] LIB[std::vector< double > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtr.cxx_getAtIndex on null CxxFloat64StdVectorPtr";
    return this.ptr.data()->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtr] EDK[CxxFloat64StdVectorMutablePtr] LIB[std::vector< double > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64StdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtr.cxx_setAtIndex on null CxxFloat64StdVectorPtr";
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstRef] EDK[CxxFloat64StdVectorConstRef] LIB[std::vector< double > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstRef] EDK[CxxFloat64StdVectorConstRef] LIB[std::vector< double > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstRef] EDK[CxxFloat64StdVectorConstRef] LIB[std::vector< double > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstRef.cxx_size on null CxxFloat64StdVectorConstRef";
    return
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstRef] EDK[CxxFloat64StdVectorConstRef] LIB[std::vector< double > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstRef.cxx_getAtIndex on null CxxFloat64StdVectorConstRef";
    return this.ptr.data()->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorRef] EDK[CxxFloat64StdVectorMutableRef] LIB[std::vector< double > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorRef] EDK[CxxFloat64StdVectorMutableRef] LIB[std::vector< double > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorRef.cxx_size on null CxxFloat64StdVectorRef";
    return
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorRef.cxx_reserve on null CxxFloat64StdVectorRef";
    
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorRef.cxx_push_back!(
    Float64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorRef.cxx_push_back on null CxxFloat64StdVectorRef";
    
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorRef.cxx_pop_back on null CxxFloat64StdVectorRef";
    
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorRef.push_back!(
    in
    Float64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorRef] EDK[CxxFloat64StdVectorMutableRef] LIB[std::vector< double > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorRef.cxx_getAtIndex on null CxxFloat64StdVectorRef";
    return this.ptr.data()->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorRef] EDK[CxxFloat64StdVectorMutableRef] LIB[std::vector< double > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64StdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorRef.cxx_setAtIndex on null CxxFloat64StdVectorRef";
    this.ptr.data()->{ CxxFloat64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxFloat64StdVectorConstPtr
// CxxFloat64StdVectorPtr
// CxxFloat64StdVectorConstRef
// CxxFloat64StdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtr(CxxFloat64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtr(CxxFloat64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtr(CxxFloat64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtr Make_CxxFloat64StdVectorConstPtr(CxxFloat64StdVector value) {
  return CxxFloat64StdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtr(CxxFloat64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtr(CxxFloat64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtr(CxxFloat64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtr Make_CxxFloat64StdVectorPtr(CxxFloat64StdVector value) {
  return CxxFloat64StdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef(CxxFloat64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef(CxxFloat64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef(CxxFloat64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef Make_CxxFloat64StdVectorConstRef(CxxFloat64StdVector value) {
  return CxxFloat64StdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef(CxxFloat64StdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef(CxxFloat64StdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat64StdVector());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef(CxxFloat64StdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef Make_CxxFloat64StdVectorRef(CxxFloat64StdVector value) {
  return CxxFloat64StdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat64StdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat64StdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64StdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef CxxFloat64StdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorConstPtr.cxx_getAt on null CxxFloat64StdVectorConstPtr";
  return CxxFloat64StdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat64StdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef CxxFloat64StdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat64StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef CxxFloat64StdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorPtr.cxx_getAt on null CxxFloat64StdVectorPtr";
  return CxxFloat64StdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxFloat64StdVector()));
}

/// Same as for CxxFloat64StdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef CxxFloat64StdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtr.cxx_setAt(Index i, CxxFloat64StdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorPtr.cxx_setAt on null CxxFloat64StdVectorPtr";
  this.ptr.offset(i)->{ CxxFloat64StdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef(CxxFloat64StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef.=(CxxFloat64StdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat64StdVector value
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVector CxxFloat64StdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorConstRef.cxx_get on null CxxFloat64StdVectorConstRef";
  return this.ptr.data()->{ CxxFloat64StdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef.cxx_set(CxxFloat64StdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorRef.cxx_set on null CxxFloat64StdVectorRef";
  this.ptr.data()->{ CxxFloat64StdVector } = value;
}

/// Assignment of CxxFloat64StdVector
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef.=(CxxFloat64StdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVectorPtr] EDK[CxxFloat64StdVectorMutablePtr] LIB[std::vector< double > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrConstPtr] EDK[CxxFloat64StdVectorPtrConstPtr] LIB[std::vector< double > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrConstPtr] EDK[CxxFloat64StdVectorPtrConstPtr] LIB[std::vector< double > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrConstPtr.cxx_size on null CxxFloat64StdVectorPtrConstPtr";
    return
    this.ptr->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrConstPtr] EDK[CxxFloat64StdVectorPtrConstPtr] LIB[std::vector< double > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrConstPtr.cxx_getAtIndex on null CxxFloat64StdVectorPtrConstPtr";
    return this.ptr->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrPtr] EDK[CxxFloat64StdVectorPtrMutablePtr] LIB[std::vector< double > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrPtr] EDK[CxxFloat64StdVectorPtrMutablePtr] LIB[std::vector< double > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrPtr.cxx_size on null CxxFloat64StdVectorPtrPtr";
    return
    this.ptr->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrPtr.cxx_reserve on null CxxFloat64StdVectorPtrPtr";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrPtr.cxx_push_back!(
    Float64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrPtr.cxx_push_back on null CxxFloat64StdVectorPtrPtr";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrPtr.cxx_pop_back on null CxxFloat64StdVectorPtrPtr";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrPtr.push_back!(
    in
    Float64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrPtr] EDK[CxxFloat64StdVectorPtrMutablePtr] LIB[std::vector< double > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrPtr.cxx_getAtIndex on null CxxFloat64StdVectorPtrPtr";
    return this.ptr->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrPtr] EDK[CxxFloat64StdVectorPtrMutablePtr] LIB[std::vector< double > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64StdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrPtr.cxx_setAtIndex on null CxxFloat64StdVectorPtrPtr";
    this.ptr->{ CxxFloat64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrConstRef] EDK[CxxFloat64StdVectorPtrConstRef] LIB[std::vector< double > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrConstRef] EDK[CxxFloat64StdVectorPtrConstRef] LIB[std::vector< double > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrConstRef] EDK[CxxFloat64StdVectorPtrConstRef] LIB[std::vector< double > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrConstRef.cxx_size on null CxxFloat64StdVectorPtrConstRef";
    return
    this.ptr->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrConstRef] EDK[CxxFloat64StdVectorPtrConstRef] LIB[std::vector< double > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrConstRef.cxx_getAtIndex on null CxxFloat64StdVectorPtrConstRef";
    return this.ptr->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrRef] EDK[CxxFloat64StdVectorPtrMutableRef] LIB[std::vector< double > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrRef] EDK[CxxFloat64StdVectorPtrMutableRef] LIB[std::vector< double > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrRef.cxx_size on null CxxFloat64StdVectorPtrRef";
    return
    this.ptr->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrRef.cxx_reserve on null CxxFloat64StdVectorPtrRef";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrRef.cxx_push_back!(
    Float64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrRef.cxx_push_back on null CxxFloat64StdVectorPtrRef";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrRef.cxx_pop_back on null CxxFloat64StdVectorPtrRef";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorPtrRef.push_back!(
    in
    Float64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrRef] EDK[CxxFloat64StdVectorPtrMutableRef] LIB[std::vector< double > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrRef.cxx_getAtIndex on null CxxFloat64StdVectorPtrRef";
    return this.ptr->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorPtrRef] EDK[CxxFloat64StdVectorPtrMutableRef] LIB[std::vector< double > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64StdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorPtrRef.cxx_setAtIndex on null CxxFloat64StdVectorPtrRef";
    this.ptr->{ CxxFloat64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxFloat64StdVectorPtrConstPtr
// CxxFloat64StdVectorPtrPtr
// CxxFloat64StdVectorPtrConstRef
// CxxFloat64StdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstPtr(CxxFloat64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstPtr(CxxFloat64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstPtr(CxxFloat64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstPtr Make_CxxFloat64StdVectorPtrConstPtr(CxxFloat64StdVectorPtr value) {
  return CxxFloat64StdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrPtr(CxxFloat64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrPtr(CxxFloat64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrPtr(CxxFloat64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrPtr Make_CxxFloat64StdVectorPtrPtr(CxxFloat64StdVectorPtr value) {
  return CxxFloat64StdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef(CxxFloat64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef(CxxFloat64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef(CxxFloat64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef Make_CxxFloat64StdVectorPtrConstRef(CxxFloat64StdVectorPtr value) {
  return CxxFloat64StdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef(CxxFloat64StdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef(CxxFloat64StdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64StdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef(CxxFloat64StdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef Make_CxxFloat64StdVectorPtrRef(CxxFloat64StdVectorPtr value) {
  return CxxFloat64StdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat64StdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat64StdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64StdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef CxxFloat64StdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorPtrConstPtr.cxx_getAt on null CxxFloat64StdVectorPtrConstPtr";
  return CxxFloat64StdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxFloat64StdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef CxxFloat64StdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat64StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef CxxFloat64StdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorPtrPtr.cxx_getAt on null CxxFloat64StdVectorPtrPtr";
  return CxxFloat64StdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxFloat64StdVectorMutablePtr()));
}

/// Same as for CxxFloat64StdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef CxxFloat64StdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrPtr.cxx_setAt(Index i, CxxFloat64StdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorPtrPtr.cxx_setAt on null CxxFloat64StdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxFloat64StdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef(CxxFloat64StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef.=(CxxFloat64StdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat64StdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtr CxxFloat64StdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorPtrConstRef.cxx_get on null CxxFloat64StdVectorPtrConstRef";
  return this.ptr->{ CxxFloat64StdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef.cxx_set(CxxFloat64StdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorPtrRef.cxx_set on null CxxFloat64StdVectorPtrRef";
  this.ptr->{ CxxFloat64StdVectorPtr } = value;
}

/// Assignment of CxxFloat64StdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef.=(CxxFloat64StdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxFloat64StdVectorConstPtr] EDK[CxxFloat64StdVectorConstPtr] LIB[std::vector< double > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrConstPtr] EDK[CxxFloat64StdVectorConstPtrConstPtr] LIB[std::vector< double > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrConstPtr] EDK[CxxFloat64StdVectorConstPtrConstPtr] LIB[std::vector< double > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrConstPtr.cxx_size on null CxxFloat64StdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrConstPtr] EDK[CxxFloat64StdVectorConstPtrConstPtr] LIB[std::vector< double > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxFloat64StdVectorConstPtrConstPtr";
    return this.ptr->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrPtr] EDK[CxxFloat64StdVectorConstPtrMutablePtr] LIB[std::vector< double > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrPtr] EDK[CxxFloat64StdVectorConstPtrMutablePtr] LIB[std::vector< double > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrPtr.cxx_size on null CxxFloat64StdVectorConstPtrPtr";
    return
    this.ptr->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrPtr.cxx_reserve on null CxxFloat64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrPtr.cxx_push_back!(
    Float64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrPtr.cxx_push_back on null CxxFloat64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrPtr.cxx_pop_back on null CxxFloat64StdVectorConstPtrPtr";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrPtr.push_back!(
    in
    Float64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrPtr] EDK[CxxFloat64StdVectorConstPtrMutablePtr] LIB[std::vector< double > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrPtr.cxx_getAtIndex on null CxxFloat64StdVectorConstPtrPtr";
    return this.ptr->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrPtr] EDK[CxxFloat64StdVectorConstPtrMutablePtr] LIB[std::vector< double > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64StdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrPtr.cxx_setAtIndex on null CxxFloat64StdVectorConstPtrPtr";
    this.ptr->{ CxxFloat64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrConstRef] EDK[CxxFloat64StdVectorConstPtrConstRef] LIB[std::vector< double > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrConstRef] EDK[CxxFloat64StdVectorConstPtrConstRef] LIB[std::vector< double > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrConstRef] EDK[CxxFloat64StdVectorConstPtrConstRef] LIB[std::vector< double > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrConstRef.cxx_size on null CxxFloat64StdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrConstRef] EDK[CxxFloat64StdVectorConstPtrConstRef] LIB[std::vector< double > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrConstRef.cxx_getAtIndex on null CxxFloat64StdVectorConstPtrConstRef";
    return this.ptr->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrRef] EDK[CxxFloat64StdVectorConstPtrMutableRef] LIB[std::vector< double > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrRef] EDK[CxxFloat64StdVectorConstPtrMutableRef] LIB[std::vector< double > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrRef.cxx_size on null CxxFloat64StdVectorConstPtrRef";
    return
    this.ptr->{ CxxFloat64StdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrRef.cxx_reserve on null CxxFloat64StdVectorConstPtrRef";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrRef.cxx_push_back!(
    Float64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrRef.cxx_push_back on null CxxFloat64StdVectorConstPtrRef";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrRef.cxx_pop_back on null CxxFloat64StdVectorConstPtrRef";
    
    this.ptr->{ CxxFloat64StdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxFloat64StdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxFloat64StdVectorConstPtrRef.push_back!(
    in
    Float64
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrRef] EDK[CxxFloat64StdVectorConstPtrMutableRef] LIB[std::vector< double > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64ConstRef
CxxFloat64StdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrRef.cxx_getAtIndex on null CxxFloat64StdVectorConstPtrRef";
    return this.ptr->{ CxxFloat64StdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxFloat64StdVectorConstPtrRef] EDK[CxxFloat64StdVectorConstPtrMutableRef] LIB[std::vector< double > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxFloat64StdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxFloat64ConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxFloat64StdVectorConstPtrRef.cxx_setAtIndex on null CxxFloat64StdVectorConstPtrRef";
    this.ptr->{ CxxFloat64StdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxFloat64StdVectorConstPtrConstPtr
// CxxFloat64StdVectorConstPtrPtr
// CxxFloat64StdVectorConstPtrConstRef
// CxxFloat64StdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstPtr(CxxFloat64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstPtr(CxxFloat64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstPtr(CxxFloat64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstPtr Make_CxxFloat64StdVectorConstPtrConstPtr(CxxFloat64StdVectorConstPtr value) {
  return CxxFloat64StdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrPtr(CxxFloat64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrPtr(CxxFloat64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrPtr(CxxFloat64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrPtr Make_CxxFloat64StdVectorConstPtrPtr(CxxFloat64StdVectorConstPtr value) {
  return CxxFloat64StdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef(CxxFloat64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef(CxxFloat64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef(CxxFloat64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef Make_CxxFloat64StdVectorConstPtrConstRef(CxxFloat64StdVectorConstPtr value) {
  return CxxFloat64StdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef(CxxFloat64StdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef(CxxFloat64StdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxFloat64StdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef(CxxFloat64StdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef Make_CxxFloat64StdVectorConstPtrRef(CxxFloat64StdVectorConstPtr value) {
  return CxxFloat64StdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxFloat64StdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxFloat64StdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxFloat64StdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef CxxFloat64StdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorConstPtrConstPtr.cxx_getAt on null CxxFloat64StdVectorConstPtrConstPtr";
  return CxxFloat64StdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxFloat64StdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef CxxFloat64StdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxFloat64StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef CxxFloat64StdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorConstPtrPtr.cxx_getAt on null CxxFloat64StdVectorConstPtrPtr";
  return CxxFloat64StdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxFloat64StdVectorConstPtr()));
}

/// Same as for CxxFloat64StdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef CxxFloat64StdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrPtr.cxx_setAt(Index i, CxxFloat64StdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorConstPtrPtr.cxx_setAt on null CxxFloat64StdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxFloat64StdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef(CxxFloat64StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef.=(CxxFloat64StdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxFloat64StdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtr CxxFloat64StdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorConstPtrConstRef.cxx_get on null CxxFloat64StdVectorConstPtrConstRef";
  return this.ptr->{ CxxFloat64StdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef.cxx_set(CxxFloat64StdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxFloat64StdVectorConstPtrRef.cxx_set on null CxxFloat64StdVectorConstPtrRef";
  this.ptr->{ CxxFloat64StdVectorConstPtr } = value;
}

/// Assignment of CxxFloat64StdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef.=(CxxFloat64StdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxFloat64StdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdString(
    CxxStdString that
    ) = "Kludge__CxxStdString__MU__copy_ctor__180c47bcf07de6cf31d46278aaa8855f";

/// \dfgPresetOmit
/// \internal
CxxStdString.__ctor(
    ) = "Kludge__CxxStdString__MU__ctor__ace0740255a9ab056990542e299aa76c";

/// \dfgPresetOmit
/// \internal
CxxStdString(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxStdString.__ctor(
    CxxCharConstPtr _arg0
    ) = "Kludge__CxxStdString__MU__ctor__8edda61cb64d310d24b7877632af879c";

/// \dfgPresetOmit
/// \internal
CxxStdString(
    CxxCharConstPtr _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxStdString.__ctor(
    CxxCharConstPtr _arg0,
    UInt64 _arg1
    ) = "Kludge__CxxStdString__MU__ctor__7f58ec4dc51d8e5dbf2e375543cc48c4";

/// \dfgPresetOmit
/// \internal
CxxStdString(
    CxxCharConstPtr _arg0,
    UInt64 _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxStdString.__ctor(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    ) = "Kludge__CxxStdString__MU__ctor__49fd726dc03004a6ef768dda8f89525c";

/// \dfgPresetOmit
/// \internal
CxxStdString(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxStdString(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    ) {
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
CxxStdString(
    in
    String
    _arg0
    
    ,
    in
    UInt64
    _arg1
    
    
    ) {
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.__ctor(
        _arg0__cxx,
        _arg1
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxStdString() = "Kludge__CxxStdString__MU__dtor__56f323c845e7d32314fb21167153c1cc";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdString.cxx_c_str?(
    )
 = "Kludge__CxxStdString__CO__meth_c_str__a6220ccbd026debd2fa90807cca87723";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdString.cxx_cxxData?(
    )
 = "Kludge__CxxStdString__CO__meth_data__b641a03da0f355d791b228d3b4c64e90";

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdString.cxx_size?(
    )
 = "Kludge__CxxStdString__CO__meth_size__ee8f19ca9eb50b54e54640185452dd03";

/// \dfgPresetOmit
/// \internal

CxxStdString.cxx_clear!(
    )
 = "Kludge__CxxStdString__MU__meth_clear__a2e963279a28c906e7e82b19ed1d3cd4";

/// \dfgPresetOmit
/// \internal

CxxStdString.cxx_append!(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    )
 = "Kludge__CxxStdString__MU__meth_append__170e8fd8bfa750e210cfa61258ab3291";

/// \dfgPresetOmit
/// \internal

CxxStdString.cxx_push_back!(
    CxxChar _arg0
    )
 = "Kludge__CxxStdString__MU__meth_push_back__7e54f09b4fa4e59e2090d83ff95f9f6f";

/// \dfgPresetOmit
/// \internal
String
CxxStdString.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdString.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdString.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdString.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdString.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdString.append!(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    
    this.cxx_append(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxStdString.=(
    CxxStdString that
    ) = "Kludge__CxxStdString__MU__simple_ass_op__c205518ef1bfd3af372d57c53f19ef8a";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdString.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxStdString__CO__get_ind_op__53be2d8e839958ec74ec4ec30fdb0650";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdString.cxx_setAtIndex!(
    UInt64 index,
    CxxChar value
    )
  = "Kludge__CxxStdString__MU__set_ind_op__2c2493872b5422c2d40fa6d21586015c";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
inline CxxStdString(String string) {
  CxxChar array<>(string.data(), string.length());
  this = CxxStdString(CxxCharConstPtr(array, 0), CxxCharConstPtr(array, string.length()));
}

/// \dfgPresetOmit
/// \internal
inline CxxStdString Make_CxxStdString(String string) {
  return CxxStdString(string);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxStdString.appendDesc(io String string) {
  CxxCharConstPtr ptr = this.cxx_c_str();
  string += String(ptr);
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdString] EDK[Fabric_EDK_KL_CxxStdString] LIB[std::string]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtr] EDK[CxxStdStringConstPtr] LIB[std::string const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtr] EDK[CxxStdStringConstPtr] LIB[std::string const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtr.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtr.cxx_c_str on null CxxStdStringConstPtr";
    return
    this.ptr.data()->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtr.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtr.cxx_cxxData on null CxxStdStringConstPtr";
    return
    this.ptr.data()->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtr.cxx_size on null CxxStdStringConstPtr";
    return
    this.ptr.data()->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtr.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtr.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtr] EDK[CxxStdStringConstPtr] LIB[std::string const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtr.cxx_getAtIndex on null CxxStdStringConstPtr";
    return this.ptr.data()->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtr] EDK[CxxStdStringMutablePtr] LIB[std::string *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtr] EDK[CxxStdStringMutablePtr] LIB[std::string *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtr.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtr.cxx_c_str on null CxxStdStringPtr";
    return
    this.ptr.data()->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtr.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtr.cxx_cxxData on null CxxStdStringPtr";
    return
    this.ptr.data()->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtr.cxx_size on null CxxStdStringPtr";
    return
    this.ptr.data()->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtr.cxx_clear on null CxxStdStringPtr";
    
    this.ptr.data()->{ CxxStdString }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtr.cxx_append!(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtr.cxx_append on null CxxStdStringPtr";
    
    this.ptr.data()->{ CxxStdString }.cxx_append(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtr.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtr.cxx_push_back on null CxxStdStringPtr";
    
    this.ptr.data()->{ CxxStdString }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtr.append!(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    
    this.cxx_append(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtr.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtr.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtr.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtr] EDK[CxxStdStringMutablePtr] LIB[std::string *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtr.cxx_getAtIndex on null CxxStdStringPtr";
    return this.ptr.data()->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtr] EDK[CxxStdStringMutablePtr] LIB[std::string *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxChar value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtr.cxx_setAtIndex on null CxxStdStringPtr";
    this.ptr.data()->{ CxxStdString }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstRef] EDK[CxxStdStringConstRef] LIB[std::string const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstRef] EDK[CxxStdStringConstRef] LIB[std::string const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstRef] EDK[CxxStdStringConstRef] LIB[std::string const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstRef.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstRef.cxx_c_str on null CxxStdStringConstRef";
    return
    this.ptr.data()->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstRef.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstRef.cxx_cxxData on null CxxStdStringConstRef";
    return
    this.ptr.data()->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstRef.cxx_size on null CxxStdStringConstRef";
    return
    this.ptr.data()->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstRef.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstRef.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstRef] EDK[CxxStdStringConstRef] LIB[std::string const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstRef.cxx_getAtIndex on null CxxStdStringConstRef";
    return this.ptr.data()->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringRef] EDK[CxxStdStringMutableRef] LIB[std::string &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringRef] EDK[CxxStdStringMutableRef] LIB[std::string &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringRef.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringRef.cxx_c_str on null CxxStdStringRef";
    return
    this.ptr.data()->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringRef.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringRef.cxx_cxxData on null CxxStdStringRef";
    return
    this.ptr.data()->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringRef.cxx_size on null CxxStdStringRef";
    return
    this.ptr.data()->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringRef.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringRef.cxx_clear on null CxxStdStringRef";
    
    this.ptr.data()->{ CxxStdString }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringRef.cxx_append!(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringRef.cxx_append on null CxxStdStringRef";
    
    this.ptr.data()->{ CxxStdString }.cxx_append(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringRef.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringRef.cxx_push_back on null CxxStdStringRef";
    
    this.ptr.data()->{ CxxStdString }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringRef.append!(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    
    this.cxx_append(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringRef.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringRef.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringRef.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringRef.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringRef] EDK[CxxStdStringMutableRef] LIB[std::string &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringRef.cxx_getAtIndex on null CxxStdStringRef";
    return this.ptr.data()->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringRef] EDK[CxxStdStringMutableRef] LIB[std::string &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringRef.cxx_setAtIndex!(
    UInt64 index,
    CxxChar value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringRef.cxx_setAtIndex on null CxxStdStringRef";
    this.ptr.data()->{ CxxStdString }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxStdStringConstPtr
// CxxStdStringPtr
// CxxStdStringConstRef
// CxxStdStringRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtr(CxxStdString array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtr(CxxStdString array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxStdString());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtr(CxxStdString value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtr Make_CxxStdStringConstPtr(CxxStdString value) {
  return CxxStdStringConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtr(CxxStdString array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtr(CxxStdString array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxStdString());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtr(CxxStdString value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtr Make_CxxStdStringPtr(CxxStdString value) {
  return CxxStdStringPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef(CxxStdString array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef(CxxStdString array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxStdString());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef(CxxStdString value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef Make_CxxStdStringConstRef(CxxStdString value) {
  return CxxStdStringConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringRef(CxxStdString array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringRef(CxxStdString array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxStdString());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringRef(CxxStdString value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringRef Make_CxxStdStringRef(CxxStdString value) {
  return CxxStdStringRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxStdStringConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxStdStringConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxStdStringConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef CxxStdStringConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringConstPtr.cxx_getAt on null CxxStdStringConstPtr";
  return CxxStdStringConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxStdString()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef CxxStdStringConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxStdStringConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringRef CxxStdStringPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringPtr.cxx_getAt on null CxxStdStringPtr";
  return CxxStdStringRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxStdString()));
}

/// Same as for CxxStdStringConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringRef CxxStdStringPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxStdStringPtr.cxx_setAt(Index i, CxxStdString v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringPtr.cxx_setAt on null CxxStdStringPtr";
  this.ptr.offset(i)->{ CxxStdString } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef(CxxStdStringConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef.=(CxxStdStringConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxStdString value
/// \dfgPresetOmit
/// \internal
CxxStdString CxxStdStringConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringConstRef.cxx_get on null CxxStdStringConstRef";
  return this.ptr.data()->{ CxxStdString };
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef.appendDesc(io String string) {
  CxxCharConstPtr ptr = this.cxx_c_str();
  string += String(ptr);
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxStdStringRef.cxx_set(CxxStdString value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringRef.cxx_set on null CxxStdStringRef";
  this.ptr.data()->{ CxxStdString } = value;
}

/// Assignment of CxxStdString
/// \dfgPresetOmit
/// \internal
CxxStdStringRef.=(CxxStdString value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstRef(String string) {
  this.values.push(CxxStdString(string));
  this.ptr = this.values[0].__getUnderlyingPtr();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringPtr] EDK[CxxStdStringMutablePtr] LIB[std::string *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrConstPtr] EDK[CxxStdStringPtrConstPtr] LIB[std::string * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrConstPtr] EDK[CxxStdStringPtrConstPtr] LIB[std::string * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtrConstPtr.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrConstPtr.cxx_c_str on null CxxStdStringPtrConstPtr";
    return
    this.ptr->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtrConstPtr.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrConstPtr.cxx_cxxData on null CxxStdStringPtrConstPtr";
    return
    this.ptr->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrConstPtr.cxx_size on null CxxStdStringPtrConstPtr";
    return
    this.ptr->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtrConstPtr.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtrConstPtr.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrConstPtr] EDK[CxxStdStringPtrConstPtr] LIB[std::string * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrConstPtr.cxx_getAtIndex on null CxxStdStringPtrConstPtr";
    return this.ptr->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrPtr] EDK[CxxStdStringPtrMutablePtr] LIB[std::string * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrPtr] EDK[CxxStdStringPtrMutablePtr] LIB[std::string * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtrPtr.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrPtr.cxx_c_str on null CxxStdStringPtrPtr";
    return
    this.ptr->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtrPtr.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrPtr.cxx_cxxData on null CxxStdStringPtrPtr";
    return
    this.ptr->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrPtr.cxx_size on null CxxStdStringPtrPtr";
    return
    this.ptr->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrPtr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrPtr.cxx_clear on null CxxStdStringPtrPtr";
    
    this.ptr->{ CxxStdString }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrPtr.cxx_append!(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrPtr.cxx_append on null CxxStdStringPtrPtr";
    
    this.ptr->{ CxxStdString }.cxx_append(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrPtr.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrPtr.cxx_push_back on null CxxStdStringPtrPtr";
    
    this.ptr->{ CxxStdString }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrPtr.append!(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    
    this.cxx_append(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtrPtr.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtrPtr.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrPtr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrPtr.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrPtr] EDK[CxxStdStringPtrMutablePtr] LIB[std::string * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrPtr.cxx_getAtIndex on null CxxStdStringPtrPtr";
    return this.ptr->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrPtr] EDK[CxxStdStringPtrMutablePtr] LIB[std::string * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxChar value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrPtr.cxx_setAtIndex on null CxxStdStringPtrPtr";
    this.ptr->{ CxxStdString }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrConstRef] EDK[CxxStdStringPtrConstRef] LIB[std::string * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrConstRef] EDK[CxxStdStringPtrConstRef] LIB[std::string * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringPtrConstRef(String string) {
    this.values.push(CxxStdStringPtr(CxxCharConstPtr(string)));
    this.ptr = this.values[0].data();
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrConstRef] EDK[CxxStdStringPtrConstRef] LIB[std::string * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtrConstRef.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrConstRef.cxx_c_str on null CxxStdStringPtrConstRef";
    return
    this.ptr->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtrConstRef.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrConstRef.cxx_cxxData on null CxxStdStringPtrConstRef";
    return
    this.ptr->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrConstRef.cxx_size on null CxxStdStringPtrConstRef";
    return
    this.ptr->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtrConstRef.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtrConstRef.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrConstRef] EDK[CxxStdStringPtrConstRef] LIB[std::string * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrConstRef.cxx_getAtIndex on null CxxStdStringPtrConstRef";
    return this.ptr->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrRef] EDK[CxxStdStringPtrMutableRef] LIB[std::string * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrRef] EDK[CxxStdStringPtrMutableRef] LIB[std::string * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtrRef.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrRef.cxx_c_str on null CxxStdStringPtrRef";
    return
    this.ptr->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringPtrRef.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrRef.cxx_cxxData on null CxxStdStringPtrRef";
    return
    this.ptr->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrRef.cxx_size on null CxxStdStringPtrRef";
    return
    this.ptr->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrRef.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrRef.cxx_clear on null CxxStdStringPtrRef";
    
    this.ptr->{ CxxStdString }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrRef.cxx_append!(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrRef.cxx_append on null CxxStdStringPtrRef";
    
    this.ptr->{ CxxStdString }.cxx_append(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrRef.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrRef.cxx_push_back on null CxxStdStringPtrRef";
    
    this.ptr->{ CxxStdString }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtrRef.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrRef.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrRef.append!(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    
    this.cxx_append(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringPtrRef.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringPtrRef.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrRef] EDK[CxxStdStringPtrMutableRef] LIB[std::string * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrRef.cxx_getAtIndex on null CxxStdStringPtrRef";
    return this.ptr->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringPtrRef] EDK[CxxStdStringPtrMutableRef] LIB[std::string * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxChar value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringPtrRef.cxx_setAtIndex on null CxxStdStringPtrRef";
    this.ptr->{ CxxStdString }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxStdStringPtrConstPtr
// CxxStdStringPtrPtr
// CxxStdStringPtrConstRef
// CxxStdStringPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstPtr(CxxStdStringPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstPtr(CxxStdStringPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstPtr(CxxStdStringPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstPtr Make_CxxStdStringPtrConstPtr(CxxStdStringPtr value) {
  return CxxStdStringPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrPtr(CxxStdStringPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrPtr(CxxStdStringPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrPtr(CxxStdStringPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrPtr Make_CxxStdStringPtrPtr(CxxStdStringPtr value) {
  return CxxStdStringPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef(CxxStdStringPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef(CxxStdStringPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef(CxxStdStringPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef Make_CxxStdStringPtrConstRef(CxxStdStringPtr value) {
  return CxxStdStringPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef(CxxStdStringPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef(CxxStdStringPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef(CxxStdStringPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef Make_CxxStdStringPtrRef(CxxStdStringPtr value) {
  return CxxStdStringPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxStdStringPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxStdStringPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxStdStringPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef CxxStdStringPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringPtrConstPtr.cxx_getAt on null CxxStdStringPtrConstPtr";
  return CxxStdStringPtrConstRef(this.ptr.offset(index * __CxxSize_CxxStdStringMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef CxxStdStringPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxStdStringPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef CxxStdStringPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringPtrPtr.cxx_getAt on null CxxStdStringPtrPtr";
  return CxxStdStringPtrRef(this.ptr.offset(index * __CxxSize_CxxStdStringMutablePtr()));
}

/// Same as for CxxStdStringPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef CxxStdStringPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrPtr.cxx_setAt(Index i, CxxStdStringPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringPtrPtr.cxx_setAt on null CxxStdStringPtrPtr";
  this.ptr.offset(i)->{ CxxStdStringPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef(CxxStdStringPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef.=(CxxStdStringPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxStdStringPtr value
/// \dfgPresetOmit
/// \internal
CxxStdStringPtr CxxStdStringPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringPtrConstRef.cxx_get on null CxxStdStringPtrConstRef";
  return this.ptr->{ CxxStdStringPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef.cxx_set(CxxStdStringPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringPtrRef.cxx_set on null CxxStdStringPtrRef";
  this.ptr->{ CxxStdStringPtr } = value;
}

/// Assignment of CxxStdStringPtr
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef.=(CxxStdStringPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringConstPtr] EDK[CxxStdStringConstPtr] LIB[std::string const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrConstPtr] EDK[CxxStdStringConstPtrConstPtr] LIB[std::string const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrConstPtr] EDK[CxxStdStringConstPtrConstPtr] LIB[std::string const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtrConstPtr.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrConstPtr.cxx_c_str on null CxxStdStringConstPtrConstPtr";
    return
    this.ptr->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtrConstPtr.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrConstPtr.cxx_cxxData on null CxxStdStringConstPtrConstPtr";
    return
    this.ptr->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrConstPtr.cxx_size on null CxxStdStringConstPtrConstPtr";
    return
    this.ptr->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtrConstPtr.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtrConstPtr.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrConstPtr] EDK[CxxStdStringConstPtrConstPtr] LIB[std::string const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrConstPtr.cxx_getAtIndex on null CxxStdStringConstPtrConstPtr";
    return this.ptr->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrPtr] EDK[CxxStdStringConstPtrMutablePtr] LIB[std::string const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrPtr] EDK[CxxStdStringConstPtrMutablePtr] LIB[std::string const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtrPtr.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrPtr.cxx_c_str on null CxxStdStringConstPtrPtr";
    return
    this.ptr->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtrPtr.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrPtr.cxx_cxxData on null CxxStdStringConstPtrPtr";
    return
    this.ptr->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrPtr.cxx_size on null CxxStdStringConstPtrPtr";
    return
    this.ptr->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrPtr.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrPtr.cxx_clear on null CxxStdStringConstPtrPtr";
    
    this.ptr->{ CxxStdString }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrPtr.cxx_append!(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrPtr.cxx_append on null CxxStdStringConstPtrPtr";
    
    this.ptr->{ CxxStdString }.cxx_append(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrPtr.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrPtr.cxx_push_back on null CxxStdStringConstPtrPtr";
    
    this.ptr->{ CxxStdString }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrPtr.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrPtr.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtrPtr.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtrPtr.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrPtr.append!(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    
    this.cxx_append(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrPtr] EDK[CxxStdStringConstPtrMutablePtr] LIB[std::string const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrPtr.cxx_getAtIndex on null CxxStdStringConstPtrPtr";
    return this.ptr->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrPtr] EDK[CxxStdStringConstPtrMutablePtr] LIB[std::string const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxChar value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrPtr.cxx_setAtIndex on null CxxStdStringConstPtrPtr";
    this.ptr->{ CxxStdString }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrConstRef] EDK[CxxStdStringConstPtrConstRef] LIB[std::string const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrConstRef] EDK[CxxStdStringConstPtrConstRef] LIB[std::string const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstPtrConstRef(String string) {
    this.values.push(CxxStdStringConstPtr(CxxCharConstPtr(string)));
    this.ptr = this.values[0].data();
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrConstRef] EDK[CxxStdStringConstPtrConstRef] LIB[std::string const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtrConstRef.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrConstRef.cxx_c_str on null CxxStdStringConstPtrConstRef";
    return
    this.ptr->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtrConstRef.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrConstRef.cxx_cxxData on null CxxStdStringConstPtrConstRef";
    return
    this.ptr->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrConstRef.cxx_size on null CxxStdStringConstPtrConstRef";
    return
    this.ptr->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtrConstRef.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtrConstRef.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrConstRef] EDK[CxxStdStringConstPtrConstRef] LIB[std::string const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrConstRef.cxx_getAtIndex on null CxxStdStringConstPtrConstRef";
    return this.ptr->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrRef] EDK[CxxStdStringConstPtrMutableRef] LIB[std::string const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrRef] EDK[CxxStdStringConstPtrMutableRef] LIB[std::string const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtrRef.cxx_c_str?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrRef.cxx_c_str on null CxxStdStringConstPtrRef";
    return
    this.ptr->{ CxxStdString }.cxx_c_str(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtr
CxxStdStringConstPtrRef.cxx_cxxData?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrRef.cxx_cxxData on null CxxStdStringConstPtrRef";
    return
    this.ptr->{ CxxStdString }.cxx_cxxData(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrRef.cxx_size on null CxxStdStringConstPtrRef";
    return
    this.ptr->{ CxxStdString }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrRef.cxx_clear!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrRef.cxx_clear on null CxxStdStringConstPtrRef";
    
    this.ptr->{ CxxStdString }.cxx_clear(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrRef.cxx_append!(
    CxxCharConstPtr _arg0,
    CxxCharConstPtr _arg1
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrRef.cxx_append on null CxxStdStringConstPtrRef";
    
    this.ptr->{ CxxStdString }.cxx_append(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrRef.cxx_push_back!(
    CxxChar _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrRef.cxx_push_back on null CxxStdStringConstPtrRef";
    
    this.ptr->{ CxxStdString }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrRef.clear!(
    )
{   
    
    this.cxx_clear(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrRef.append!(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    
    this.cxx_append(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringConstPtrRef.push_back!(
    in
    CxxChar
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtrRef.c_str?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_c_str(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal
String
CxxStdStringConstPtrRef.cxxData?(
    )
{   
    CxxCharConstPtr __res = 
    this.cxx_cxxData(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrRef] EDK[CxxStdStringConstPtrMutableRef] LIB[std::string const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxChar
CxxStdStringConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrRef.cxx_getAtIndex on null CxxStdStringConstPtrRef";
    return this.ptr->{ CxxStdString }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringConstPtrRef] EDK[CxxStdStringConstPtrMutableRef] LIB[std::string const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxChar value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringConstPtrRef.cxx_setAtIndex on null CxxStdStringConstPtrRef";
    this.ptr->{ CxxStdString }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxStdStringConstPtrConstPtr
// CxxStdStringConstPtrPtr
// CxxStdStringConstPtrConstRef
// CxxStdStringConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstPtr(CxxStdStringConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstPtr(CxxStdStringConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstPtr(CxxStdStringConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstPtr Make_CxxStdStringConstPtrConstPtr(CxxStdStringConstPtr value) {
  return CxxStdStringConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrPtr(CxxStdStringConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrPtr(CxxStdStringConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrPtr(CxxStdStringConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrPtr Make_CxxStdStringConstPtrPtr(CxxStdStringConstPtr value) {
  return CxxStdStringConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef(CxxStdStringConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef(CxxStdStringConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef(CxxStdStringConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef Make_CxxStdStringConstPtrConstRef(CxxStdStringConstPtr value) {
  return CxxStdStringConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef(CxxStdStringConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef(CxxStdStringConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef(CxxStdStringConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef Make_CxxStdStringConstPtrRef(CxxStdStringConstPtr value) {
  return CxxStdStringConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxStdStringConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxStdStringConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxStdStringConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef CxxStdStringConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringConstPtrConstPtr.cxx_getAt on null CxxStdStringConstPtrConstPtr";
  return CxxStdStringConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxStdStringConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef CxxStdStringConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxStdStringConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef CxxStdStringConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringConstPtrPtr.cxx_getAt on null CxxStdStringConstPtrPtr";
  return CxxStdStringConstPtrRef(this.ptr.offset(index * __CxxSize_CxxStdStringConstPtr()));
}

/// Same as for CxxStdStringConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef CxxStdStringConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrPtr.cxx_setAt(Index i, CxxStdStringConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringConstPtrPtr.cxx_setAt on null CxxStdStringConstPtrPtr";
  this.ptr.offset(i)->{ CxxStdStringConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef(CxxStdStringConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef.=(CxxStdStringConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxStdStringConstPtr value
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtr CxxStdStringConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringConstPtrConstRef.cxx_get on null CxxStdStringConstPtrConstRef";
  return this.ptr->{ CxxStdStringConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef.cxx_set(CxxStdStringConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringConstPtrRef.cxx_set on null CxxStdStringConstPtrRef";
  this.ptr->{ CxxStdStringConstPtr } = value;
}

/// Assignment of CxxStdStringConstPtr
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef.=(CxxStdStringConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector(
    CxxStdStringStdVector that
    ) = "Kludge__CxxStdStringStdVector__MU__copy_ctor__f2abb9fa8e68217147654febb8866634";

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector.__ctor(
    ) = "Kludge__CxxStdStringStdVector__MU__ctor__61293ab8d6ac5da6ef509505580335ca";

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxStdStringStdVector__MU__ctor__c311e170b850b01bba7eb7fdc3e9fe41";

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector.__ctor(
    CxxStdStringConstPtr _arg0,
    CxxStdStringConstPtr _arg1
    ) = "Kludge__CxxStdStringStdVector__MU__ctor__2d193f67e4690285d9769deb9385a81d";

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector(
    CxxStdStringConstPtr _arg0,
    CxxStdStringConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    ) {
    CxxStdString _arg0__cxx(_arg0);
    CxxStdStringConstPtr _arg0__cxx__cxx = Make_CxxStdStringConstPtr(_arg0__cxx);
    CxxStdString _arg1__cxx(_arg1);
    CxxStdStringConstPtr _arg1__cxx__cxx = Make_CxxStdStringConstPtr(_arg1__cxx);
    this.__ctor(
        _arg0__cxx__cxx,
        _arg1__cxx__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxStdStringStdVector() = "Kludge__CxxStdStringStdVector__MU__dtor__7a2b6c72ef3d620f68be216b3a45a623";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVector.cxx_size?(
    )
 = "Kludge__CxxStdStringStdVector__CO__meth_size__9a0b124f6c7f1b51e7e13549bc701fad";

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxStdStringStdVector__MU__meth_reserve__f18956511257eabf8f6a79d84dd96581";

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVector.cxx_push_back!(
    CxxStdString _arg0
    )
 = "Kludge__CxxStdStringStdVector__MU__meth_push_back__5f7595abf8b2faa37baeab28890da8fe";

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVector.cxx_pop_back!(
    )
 = "Kludge__CxxStdStringStdVector__MU__meth_pop_back__aa8f7e9d4a25fed1eb1e49154172b716";

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVector.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxStdString _arg0__cxx(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxStdStringStdVector.=(
    CxxStdStringStdVector that
    ) = "Kludge__CxxStdStringStdVector__MU__simple_ass_op__90efed6e9b19011c19090ba8ca1ab3f2";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxStdStringStdVector__CO__get_ind_op__11bd15ae06c424612c03048330c54f25";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringStdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxStdStringConstRef value
    )
  = "Kludge__CxxStdStringStdVector__MU__set_ind_op__630a606bde1ed814fb4969aa062c504e";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector(CxxStdString array<>) {
  this = CxxStdStringStdVector(
    CxxStdStringConstPtr(array, 0),
    CxxStdStringConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector Make_CxxStdStringStdVector(CxxStdString array<>) {
  return CxxStdStringStdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline CxxStdString[] Make_CxxStdStringVariableArray(CxxStdStringStdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  CxxStdString result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxStdStringConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector.appendDesc(io String string) {
  string += "CxxStdStringStdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVector] EDK[Fabric_EDK_KL_CxxStdStringStdVector] LIB[std::vector< std::string >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtr] EDK[CxxStdStringStdVectorConstPtr] LIB[std::vector< std::string > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtr] EDK[CxxStdStringStdVectorConstPtr] LIB[std::vector< std::string > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtr.cxx_size on null CxxStdStringStdVectorConstPtr";
    return
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtr] EDK[CxxStdStringStdVectorConstPtr] LIB[std::vector< std::string > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtr.cxx_getAtIndex on null CxxStdStringStdVectorConstPtr";
    return this.ptr.data()->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtr] EDK[CxxStdStringStdVectorMutablePtr] LIB[std::vector< std::string > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtr] EDK[CxxStdStringStdVectorMutablePtr] LIB[std::vector< std::string > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtr.cxx_size on null CxxStdStringStdVectorPtr";
    return
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtr.cxx_reserve on null CxxStdStringStdVectorPtr";
    
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtr.cxx_push_back!(
    CxxStdString _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtr.cxx_push_back on null CxxStdStringStdVectorPtr";
    
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtr.cxx_pop_back on null CxxStdStringStdVectorPtr";
    
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtr.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxStdString _arg0__cxx(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtr] EDK[CxxStdStringStdVectorMutablePtr] LIB[std::vector< std::string > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtr.cxx_getAtIndex on null CxxStdStringStdVectorPtr";
    return this.ptr.data()->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtr] EDK[CxxStdStringStdVectorMutablePtr] LIB[std::vector< std::string > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringStdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxStdStringConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtr.cxx_setAtIndex on null CxxStdStringStdVectorPtr";
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstRef] EDK[CxxStdStringStdVectorConstRef] LIB[std::vector< std::string > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstRef] EDK[CxxStdStringStdVectorConstRef] LIB[std::vector< std::string > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstRef] EDK[CxxStdStringStdVectorConstRef] LIB[std::vector< std::string > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstRef.cxx_size on null CxxStdStringStdVectorConstRef";
    return
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstRef] EDK[CxxStdStringStdVectorConstRef] LIB[std::vector< std::string > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstRef.cxx_getAtIndex on null CxxStdStringStdVectorConstRef";
    return this.ptr.data()->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorRef] EDK[CxxStdStringStdVectorMutableRef] LIB[std::vector< std::string > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorRef] EDK[CxxStdStringStdVectorMutableRef] LIB[std::vector< std::string > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorRef.cxx_size on null CxxStdStringStdVectorRef";
    return
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorRef.cxx_reserve on null CxxStdStringStdVectorRef";
    
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorRef.cxx_push_back!(
    CxxStdString _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorRef.cxx_push_back on null CxxStdStringStdVectorRef";
    
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorRef.cxx_pop_back on null CxxStdStringStdVectorRef";
    
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorRef.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxStdString _arg0__cxx(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorRef] EDK[CxxStdStringStdVectorMutableRef] LIB[std::vector< std::string > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorRef.cxx_getAtIndex on null CxxStdStringStdVectorRef";
    return this.ptr.data()->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorRef] EDK[CxxStdStringStdVectorMutableRef] LIB[std::vector< std::string > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringStdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxStdStringConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorRef.cxx_setAtIndex on null CxxStdStringStdVectorRef";
    this.ptr.data()->{ CxxStdStringStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxStdStringStdVectorConstPtr
// CxxStdStringStdVectorPtr
// CxxStdStringStdVectorConstRef
// CxxStdStringStdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtr(CxxStdStringStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtr(CxxStdStringStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxStdStringStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtr(CxxStdStringStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtr Make_CxxStdStringStdVectorConstPtr(CxxStdStringStdVector value) {
  return CxxStdStringStdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtr(CxxStdStringStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtr(CxxStdStringStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxStdStringStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtr(CxxStdStringStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtr Make_CxxStdStringStdVectorPtr(CxxStdStringStdVector value) {
  return CxxStdStringStdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef(CxxStdStringStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef(CxxStdStringStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxStdStringStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef(CxxStdStringStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef Make_CxxStdStringStdVectorConstRef(CxxStdStringStdVector value) {
  return CxxStdStringStdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef(CxxStdStringStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef(CxxStdStringStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxStdStringStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef(CxxStdStringStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef Make_CxxStdStringStdVectorRef(CxxStdStringStdVector value) {
  return CxxStdStringStdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxStdStringStdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxStdStringStdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxStdStringStdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef CxxStdStringStdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorConstPtr.cxx_getAt on null CxxStdStringStdVectorConstPtr";
  return CxxStdStringStdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxStdStringStdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef CxxStdStringStdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxStdStringStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef CxxStdStringStdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorPtr.cxx_getAt on null CxxStdStringStdVectorPtr";
  return CxxStdStringStdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxStdStringStdVector()));
}

/// Same as for CxxStdStringStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef CxxStdStringStdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtr.cxx_setAt(Index i, CxxStdStringStdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorPtr.cxx_setAt on null CxxStdStringStdVectorPtr";
  this.ptr.offset(i)->{ CxxStdStringStdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef(CxxStdStringStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef.=(CxxStdStringStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxStdStringStdVector value
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVector CxxStdStringStdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorConstRef.cxx_get on null CxxStdStringStdVectorConstRef";
  return this.ptr.data()->{ CxxStdStringStdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef.cxx_set(CxxStdStringStdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorRef.cxx_set on null CxxStdStringStdVectorRef";
  this.ptr.data()->{ CxxStdStringStdVector } = value;
}

/// Assignment of CxxStdStringStdVector
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef.=(CxxStdStringStdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVectorPtr] EDK[CxxStdStringStdVectorMutablePtr] LIB[std::vector< std::string > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrConstPtr] EDK[CxxStdStringStdVectorPtrConstPtr] LIB[std::vector< std::string > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrConstPtr] EDK[CxxStdStringStdVectorPtrConstPtr] LIB[std::vector< std::string > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrConstPtr.cxx_size on null CxxStdStringStdVectorPtrConstPtr";
    return
    this.ptr->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrConstPtr] EDK[CxxStdStringStdVectorPtrConstPtr] LIB[std::vector< std::string > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrConstPtr.cxx_getAtIndex on null CxxStdStringStdVectorPtrConstPtr";
    return this.ptr->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrPtr] EDK[CxxStdStringStdVectorPtrMutablePtr] LIB[std::vector< std::string > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrPtr] EDK[CxxStdStringStdVectorPtrMutablePtr] LIB[std::vector< std::string > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrPtr.cxx_size on null CxxStdStringStdVectorPtrPtr";
    return
    this.ptr->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrPtr.cxx_reserve on null CxxStdStringStdVectorPtrPtr";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrPtr.cxx_push_back!(
    CxxStdString _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrPtr.cxx_push_back on null CxxStdStringStdVectorPtrPtr";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrPtr.cxx_pop_back on null CxxStdStringStdVectorPtrPtr";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrPtr.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxStdString _arg0__cxx(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrPtr] EDK[CxxStdStringStdVectorPtrMutablePtr] LIB[std::vector< std::string > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrPtr.cxx_getAtIndex on null CxxStdStringStdVectorPtrPtr";
    return this.ptr->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrPtr] EDK[CxxStdStringStdVectorPtrMutablePtr] LIB[std::vector< std::string > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringStdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxStdStringConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrPtr.cxx_setAtIndex on null CxxStdStringStdVectorPtrPtr";
    this.ptr->{ CxxStdStringStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrConstRef] EDK[CxxStdStringStdVectorPtrConstRef] LIB[std::vector< std::string > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrConstRef] EDK[CxxStdStringStdVectorPtrConstRef] LIB[std::vector< std::string > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrConstRef] EDK[CxxStdStringStdVectorPtrConstRef] LIB[std::vector< std::string > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrConstRef.cxx_size on null CxxStdStringStdVectorPtrConstRef";
    return
    this.ptr->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrConstRef] EDK[CxxStdStringStdVectorPtrConstRef] LIB[std::vector< std::string > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrConstRef.cxx_getAtIndex on null CxxStdStringStdVectorPtrConstRef";
    return this.ptr->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrRef] EDK[CxxStdStringStdVectorPtrMutableRef] LIB[std::vector< std::string > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrRef] EDK[CxxStdStringStdVectorPtrMutableRef] LIB[std::vector< std::string > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrRef.cxx_size on null CxxStdStringStdVectorPtrRef";
    return
    this.ptr->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrRef.cxx_reserve on null CxxStdStringStdVectorPtrRef";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrRef.cxx_push_back!(
    CxxStdString _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrRef.cxx_push_back on null CxxStdStringStdVectorPtrRef";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrRef.cxx_pop_back on null CxxStdStringStdVectorPtrRef";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrRef.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxStdString _arg0__cxx(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrRef] EDK[CxxStdStringStdVectorPtrMutableRef] LIB[std::vector< std::string > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrRef.cxx_getAtIndex on null CxxStdStringStdVectorPtrRef";
    return this.ptr->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorPtrRef] EDK[CxxStdStringStdVectorPtrMutableRef] LIB[std::vector< std::string > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringStdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxStdStringConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorPtrRef.cxx_setAtIndex on null CxxStdStringStdVectorPtrRef";
    this.ptr->{ CxxStdStringStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxStdStringStdVectorPtrConstPtr
// CxxStdStringStdVectorPtrPtr
// CxxStdStringStdVectorPtrConstRef
// CxxStdStringStdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstPtr(CxxStdStringStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstPtr(CxxStdStringStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstPtr(CxxStdStringStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstPtr Make_CxxStdStringStdVectorPtrConstPtr(CxxStdStringStdVectorPtr value) {
  return CxxStdStringStdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrPtr(CxxStdStringStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrPtr(CxxStdStringStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrPtr(CxxStdStringStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrPtr Make_CxxStdStringStdVectorPtrPtr(CxxStdStringStdVectorPtr value) {
  return CxxStdStringStdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef(CxxStdStringStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef(CxxStdStringStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef(CxxStdStringStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef Make_CxxStdStringStdVectorPtrConstRef(CxxStdStringStdVectorPtr value) {
  return CxxStdStringStdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef(CxxStdStringStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef(CxxStdStringStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef(CxxStdStringStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef Make_CxxStdStringStdVectorPtrRef(CxxStdStringStdVectorPtr value) {
  return CxxStdStringStdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxStdStringStdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxStdStringStdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxStdStringStdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef CxxStdStringStdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorPtrConstPtr.cxx_getAt on null CxxStdStringStdVectorPtrConstPtr";
  return CxxStdStringStdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxStdStringStdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef CxxStdStringStdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxStdStringStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef CxxStdStringStdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorPtrPtr.cxx_getAt on null CxxStdStringStdVectorPtrPtr";
  return CxxStdStringStdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxStdStringStdVectorMutablePtr()));
}

/// Same as for CxxStdStringStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef CxxStdStringStdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrPtr.cxx_setAt(Index i, CxxStdStringStdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorPtrPtr.cxx_setAt on null CxxStdStringStdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxStdStringStdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef(CxxStdStringStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef.=(CxxStdStringStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxStdStringStdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtr CxxStdStringStdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorPtrConstRef.cxx_get on null CxxStdStringStdVectorPtrConstRef";
  return this.ptr->{ CxxStdStringStdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef.cxx_set(CxxStdStringStdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorPtrRef.cxx_set on null CxxStdStringStdVectorPtrRef";
  this.ptr->{ CxxStdStringStdVectorPtr } = value;
}

/// Assignment of CxxStdStringStdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef.=(CxxStdStringStdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxStdStringStdVectorConstPtr] EDK[CxxStdStringStdVectorConstPtr] LIB[std::vector< std::string > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrConstPtr] EDK[CxxStdStringStdVectorConstPtrConstPtr] LIB[std::vector< std::string > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrConstPtr] EDK[CxxStdStringStdVectorConstPtrConstPtr] LIB[std::vector< std::string > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrConstPtr.cxx_size on null CxxStdStringStdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrConstPtr] EDK[CxxStdStringStdVectorConstPtrConstPtr] LIB[std::vector< std::string > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxStdStringStdVectorConstPtrConstPtr";
    return this.ptr->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrPtr] EDK[CxxStdStringStdVectorConstPtrMutablePtr] LIB[std::vector< std::string > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrPtr] EDK[CxxStdStringStdVectorConstPtrMutablePtr] LIB[std::vector< std::string > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrPtr.cxx_size on null CxxStdStringStdVectorConstPtrPtr";
    return
    this.ptr->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrPtr.cxx_reserve on null CxxStdStringStdVectorConstPtrPtr";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrPtr.cxx_push_back!(
    CxxStdString _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrPtr.cxx_push_back on null CxxStdStringStdVectorConstPtrPtr";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrPtr.cxx_pop_back on null CxxStdStringStdVectorConstPtrPtr";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrPtr.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxStdString _arg0__cxx(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrPtr] EDK[CxxStdStringStdVectorConstPtrMutablePtr] LIB[std::vector< std::string > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrPtr.cxx_getAtIndex on null CxxStdStringStdVectorConstPtrPtr";
    return this.ptr->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrPtr] EDK[CxxStdStringStdVectorConstPtrMutablePtr] LIB[std::vector< std::string > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringStdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxStdStringConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrPtr.cxx_setAtIndex on null CxxStdStringStdVectorConstPtrPtr";
    this.ptr->{ CxxStdStringStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrConstRef] EDK[CxxStdStringStdVectorConstPtrConstRef] LIB[std::vector< std::string > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrConstRef] EDK[CxxStdStringStdVectorConstPtrConstRef] LIB[std::vector< std::string > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrConstRef] EDK[CxxStdStringStdVectorConstPtrConstRef] LIB[std::vector< std::string > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrConstRef.cxx_size on null CxxStdStringStdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrConstRef] EDK[CxxStdStringStdVectorConstPtrConstRef] LIB[std::vector< std::string > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrConstRef.cxx_getAtIndex on null CxxStdStringStdVectorConstPtrConstRef";
    return this.ptr->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrRef] EDK[CxxStdStringStdVectorConstPtrMutableRef] LIB[std::vector< std::string > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrRef] EDK[CxxStdStringStdVectorConstPtrMutableRef] LIB[std::vector< std::string > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrRef.cxx_size on null CxxStdStringStdVectorConstPtrRef";
    return
    this.ptr->{ CxxStdStringStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrRef.cxx_reserve on null CxxStdStringStdVectorConstPtrRef";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrRef.cxx_push_back!(
    CxxStdString _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrRef.cxx_push_back on null CxxStdStringStdVectorConstPtrRef";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrRef.cxx_pop_back on null CxxStdStringStdVectorConstPtrRef";
    
    this.ptr->{ CxxStdStringStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxStdStringStdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxStdStringStdVectorConstPtrRef.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxStdString _arg0__cxx(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrRef] EDK[CxxStdStringStdVectorConstPtrMutableRef] LIB[std::vector< std::string > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringConstRef
CxxStdStringStdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrRef.cxx_getAtIndex on null CxxStdStringStdVectorConstPtrRef";
    return this.ptr->{ CxxStdStringStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxStdStringStdVectorConstPtrRef] EDK[CxxStdStringStdVectorConstPtrMutableRef] LIB[std::vector< std::string > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxStdStringStdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxStdStringConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxStdStringStdVectorConstPtrRef.cxx_setAtIndex on null CxxStdStringStdVectorConstPtrRef";
    this.ptr->{ CxxStdStringStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxStdStringStdVectorConstPtrConstPtr
// CxxStdStringStdVectorConstPtrPtr
// CxxStdStringStdVectorConstPtrConstRef
// CxxStdStringStdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstPtr(CxxStdStringStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstPtr(CxxStdStringStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstPtr(CxxStdStringStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstPtr Make_CxxStdStringStdVectorConstPtrConstPtr(CxxStdStringStdVectorConstPtr value) {
  return CxxStdStringStdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrPtr(CxxStdStringStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrPtr(CxxStdStringStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrPtr(CxxStdStringStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrPtr Make_CxxStdStringStdVectorConstPtrPtr(CxxStdStringStdVectorConstPtr value) {
  return CxxStdStringStdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef(CxxStdStringStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef(CxxStdStringStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef(CxxStdStringStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef Make_CxxStdStringStdVectorConstPtrConstRef(CxxStdStringStdVectorConstPtr value) {
  return CxxStdStringStdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef(CxxStdStringStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef(CxxStdStringStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxStdStringStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef(CxxStdStringStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef Make_CxxStdStringStdVectorConstPtrRef(CxxStdStringStdVectorConstPtr value) {
  return CxxStdStringStdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxStdStringStdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxStdStringStdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxStdStringStdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef CxxStdStringStdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorConstPtrConstPtr.cxx_getAt on null CxxStdStringStdVectorConstPtrConstPtr";
  return CxxStdStringStdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxStdStringStdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef CxxStdStringStdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxStdStringStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef CxxStdStringStdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorConstPtrPtr.cxx_getAt on null CxxStdStringStdVectorConstPtrPtr";
  return CxxStdStringStdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxStdStringStdVectorConstPtr()));
}

/// Same as for CxxStdStringStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef CxxStdStringStdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrPtr.cxx_setAt(Index i, CxxStdStringStdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorConstPtrPtr.cxx_setAt on null CxxStdStringStdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxStdStringStdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef(CxxStdStringStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef.=(CxxStdStringStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxStdStringStdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtr CxxStdStringStdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorConstPtrConstRef.cxx_get on null CxxStdStringStdVectorConstPtrConstRef";
  return this.ptr->{ CxxStdStringStdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef.cxx_set(CxxStdStringStdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxStdStringStdVectorConstPtrRef.cxx_set on null CxxStdStringStdVectorConstPtrRef";
  this.ptr->{ CxxStdStringStdVectorConstPtr } = value;
}

/// Assignment of CxxStdStringStdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef.=(CxxStdStringStdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxStdStringStdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrPtr] EDK[CxxCharConstPtrMutablePtr] LIB[char const * *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxCharConstPtrPtrConstPtr
// CxxCharConstPtrPtrPtr
// CxxCharConstPtrPtrConstRef
// CxxCharConstPtrPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstPtr(CxxCharConstPtrPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstPtr(CxxCharConstPtrPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrPtrConstPtr permits CxxCharConstPtrPtrConstPtr {
  private Data ptr;
  private CxxCharConstPtrPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtrConstPtr(CxxCharConstPtrPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtrConstPtr(io CxxCharConstPtrPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstPtr(Make_CxxCharConstPtrPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrPtr(CxxCharConstPtrPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrPtr(CxxCharConstPtrPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrPtrPtr permits CxxCharConstPtrPtrPtr {
  private Data ptr;
  private CxxCharConstPtrPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtrPtr(CxxCharConstPtrPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtrPtr(io CxxCharConstPtrPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrPtr(Make_CxxCharConstPtrPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef(CxxCharConstPtrPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef(CxxCharConstPtrPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrPtrConstRef permits CxxCharConstPtrPtrConstRef {
  private Data ptr;
  private CxxCharConstPtrPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtrConstRef(CxxCharConstPtrPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtrConstRef(io CxxCharConstPtrPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef(Make_CxxCharConstPtrPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef(CxxCharConstPtrPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef(CxxCharConstPtrPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrPtrRef permits CxxCharConstPtrPtrRef {
  private Data ptr;
  private CxxCharConstPtrPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtrRef(CxxCharConstPtrPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrPtrRef(io CxxCharConstPtrPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef(Make_CxxCharConstPtrPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharConstPtrPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharConstPtrPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef CxxCharConstPtrPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrPtrConstPtr.cxx_getAt on null CxxCharConstPtrPtrConstPtr";
  return CxxCharConstPtrPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtrMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef CxxCharConstPtrPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharConstPtrPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef CxxCharConstPtrPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrPtrPtr.cxx_getAt on null CxxCharConstPtrPtrPtr";
  return CxxCharConstPtrPtrRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtrMutablePtr()));
}

/// Same as for CxxCharConstPtrPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef CxxCharConstPtrPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrPtr.cxx_setAt(Index i, CxxCharConstPtrPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrPtrPtr.cxx_setAt on null CxxCharConstPtrPtrPtr";
  this.ptr.offset(i)->{ CxxCharConstPtrPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef(CxxCharConstPtrPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef.=(CxxCharConstPtrPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharConstPtrPtr value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtr CxxCharConstPtrPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrPtrConstRef.cxx_get on null CxxCharConstPtrPtrConstRef";
  return this.ptr->{ CxxCharConstPtrPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef.cxx_set(CxxCharConstPtrPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrPtrRef.cxx_set on null CxxCharConstPtrPtrRef";
  this.ptr->{ CxxCharConstPtrPtr } = value;
}

/// Assignment of CxxCharConstPtrPtr
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef.=(CxxCharConstPtrPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrConstPtr] EDK[CxxCharConstPtrConstPtr] LIB[char const * const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxCharConstPtrConstPtrConstPtr
// CxxCharConstPtrConstPtrPtr
// CxxCharConstPtrConstPtrConstRef
// CxxCharConstPtrConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstPtr(CxxCharConstPtrConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstPtr(CxxCharConstPtrConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrConstPtrConstPtr permits CxxCharConstPtrConstPtrConstPtr {
  private Data ptr;
  private CxxCharConstPtrConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtrConstPtr(CxxCharConstPtrConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtrConstPtr(io CxxCharConstPtrConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstPtr(Make_CxxCharConstPtrConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrPtr(CxxCharConstPtrConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrPtr(CxxCharConstPtrConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrConstPtrPtr permits CxxCharConstPtrConstPtrPtr {
  private Data ptr;
  private CxxCharConstPtrConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtrPtr(CxxCharConstPtrConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtrPtr(io CxxCharConstPtrConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrPtr(Make_CxxCharConstPtrConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef(CxxCharConstPtrConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef(CxxCharConstPtrConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrConstPtrConstRef permits CxxCharConstPtrConstPtrConstRef {
  private Data ptr;
  private CxxCharConstPtrConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtrConstRef(CxxCharConstPtrConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtrConstRef(io CxxCharConstPtrConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef(Make_CxxCharConstPtrConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef(CxxCharConstPtrConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef(CxxCharConstPtrConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharConstPtrConstPtrRef permits CxxCharConstPtrConstPtrRef {
  private Data ptr;
  private CxxCharConstPtrConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtrRef(CxxCharConstPtrConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharConstPtrConstPtrRef(io CxxCharConstPtrConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef(Make_CxxCharConstPtrConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharConstPtrConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharConstPtrConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef CxxCharConstPtrConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrConstPtrConstPtr.cxx_getAt on null CxxCharConstPtrConstPtrConstPtr";
  return CxxCharConstPtrConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtrConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef CxxCharConstPtrConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharConstPtrConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef CxxCharConstPtrConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrConstPtrPtr.cxx_getAt on null CxxCharConstPtrConstPtrPtr";
  return CxxCharConstPtrConstPtrRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtrConstPtr()));
}

/// Same as for CxxCharConstPtrConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef CxxCharConstPtrConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrPtr.cxx_setAt(Index i, CxxCharConstPtrConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrConstPtrPtr.cxx_setAt on null CxxCharConstPtrConstPtrPtr";
  this.ptr.offset(i)->{ CxxCharConstPtrConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef(CxxCharConstPtrConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef.=(CxxCharConstPtrConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharConstPtrConstPtr value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtr CxxCharConstPtrConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrConstPtrConstRef.cxx_get on null CxxCharConstPtrConstPtrConstRef";
  return this.ptr->{ CxxCharConstPtrConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef.cxx_set(CxxCharConstPtrConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrConstPtrRef.cxx_set on null CxxCharConstPtrConstPtrRef";
  this.ptr->{ CxxCharConstPtrConstPtr } = value;
}

/// Assignment of CxxCharConstPtrConstPtr
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef.=(CxxCharConstPtrConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector(
    CxxCharConstPtrStdVector that
    ) = "Kludge__CxxCharConstPtrStdVector__MU__copy_ctor__426e4c11ea135682547138d7af0fd336";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector.__ctor(
    ) = "Kludge__CxxCharConstPtrStdVector__MU__ctor__0dbee393f0f55d8577a239137da72cd4";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxCharConstPtrStdVector__MU__ctor__b166cd97167466464a5af3b1f02d29b3";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector.__ctor(
    CxxCharConstPtrConstPtr _arg0,
    CxxCharConstPtrConstPtr _arg1
    ) = "Kludge__CxxCharConstPtrStdVector__MU__ctor__c4d9578c2a06f1e5c892b192af25569a";

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector(
    CxxCharConstPtrConstPtr _arg0,
    CxxCharConstPtrConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector(
    in
    String
    _arg0
    
    ,
    in
    String
    _arg1
    
    
    ) {
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    CxxCharConstPtrConstPtr _arg0__cxx__cxx = Make_CxxCharConstPtrConstPtr(_arg0__cxx);
    CxxCharConstPtr _arg1__cxx = CxxCharConstPtr(_arg1);
    CxxCharConstPtrConstPtr _arg1__cxx__cxx = Make_CxxCharConstPtrConstPtr(_arg1__cxx);
    this.__ctor(
        _arg0__cxx__cxx,
        _arg1__cxx__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxCharConstPtrStdVector() = "Kludge__CxxCharConstPtrStdVector__MU__dtor__bf6a54c0de698723e51cc7bd9d5d8ce8";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVector.cxx_size?(
    )
 = "Kludge__CxxCharConstPtrStdVector__CO__meth_size__3bc9e0f65b25ff29a48774c4f248a7ff";

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxCharConstPtrStdVector__MU__meth_reserve__d4903faade66c931273272bbda764ff9";

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVector.cxx_push_back!(
    CxxCharConstPtr _arg0
    )
 = "Kludge__CxxCharConstPtrStdVector__MU__meth_push_back__20516cb61b0b9158b74bd50dfdd623d7";

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVector.cxx_pop_back!(
    )
 = "Kludge__CxxCharConstPtrStdVector__MU__meth_pop_back__1b93545f4ba0026ba98092054d88a68d";

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVector.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxCharConstPtrStdVector.=(
    CxxCharConstPtrStdVector that
    ) = "Kludge__CxxCharConstPtrStdVector__MU__simple_ass_op__3d9db4c2a32c7db56a5bbd71c6144c37";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxCharConstPtrStdVector__CO__get_ind_op__7cf5562c01ec8580c5b1fb62788ff22e";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrStdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstPtrConstRef value
    )
  = "Kludge__CxxCharConstPtrStdVector__MU__set_ind_op__ab3c3d42374307fce55a4b515037a8a8";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector(CxxCharConstPtr array<>) {
  this = CxxCharConstPtrStdVector(
    CxxCharConstPtrConstPtr(array, 0),
    CxxCharConstPtrConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector Make_CxxCharConstPtrStdVector(CxxCharConstPtr array<>) {
  return CxxCharConstPtrStdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline CxxCharConstPtr[] Make_CxxCharConstPtrVariableArray(CxxCharConstPtrStdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  CxxCharConstPtr result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxCharConstPtrConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector.appendDesc(io String string) {
  string += "CxxCharConstPtrStdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVector] EDK[Fabric_EDK_KL_CxxCharConstPtrStdVector] LIB[std::vector< char const * >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtr] EDK[CxxCharConstPtrStdVectorConstPtr] LIB[std::vector< char const * > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtr] EDK[CxxCharConstPtrStdVectorConstPtr] LIB[std::vector< char const * > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtr.cxx_size on null CxxCharConstPtrStdVectorConstPtr";
    return
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtr] EDK[CxxCharConstPtrStdVectorConstPtr] LIB[std::vector< char const * > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtr.cxx_getAtIndex on null CxxCharConstPtrStdVectorConstPtr";
    return this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtr] EDK[CxxCharConstPtrStdVectorMutablePtr] LIB[std::vector< char const * > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtr] EDK[CxxCharConstPtrStdVectorMutablePtr] LIB[std::vector< char const * > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtr.cxx_size on null CxxCharConstPtrStdVectorPtr";
    return
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtr.cxx_reserve on null CxxCharConstPtrStdVectorPtr";
    
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtr.cxx_push_back!(
    CxxCharConstPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtr.cxx_push_back on null CxxCharConstPtrStdVectorPtr";
    
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtr.cxx_pop_back on null CxxCharConstPtrStdVectorPtr";
    
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtr.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtr] EDK[CxxCharConstPtrStdVectorMutablePtr] LIB[std::vector< char const * > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtr.cxx_getAtIndex on null CxxCharConstPtrStdVectorPtr";
    return this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtr] EDK[CxxCharConstPtrStdVectorMutablePtr] LIB[std::vector< char const * > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrStdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtr.cxx_setAtIndex on null CxxCharConstPtrStdVectorPtr";
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstRef] EDK[CxxCharConstPtrStdVectorConstRef] LIB[std::vector< char const * > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstRef] EDK[CxxCharConstPtrStdVectorConstRef] LIB[std::vector< char const * > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstRef] EDK[CxxCharConstPtrStdVectorConstRef] LIB[std::vector< char const * > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstRef.cxx_size on null CxxCharConstPtrStdVectorConstRef";
    return
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstRef] EDK[CxxCharConstPtrStdVectorConstRef] LIB[std::vector< char const * > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstRef.cxx_getAtIndex on null CxxCharConstPtrStdVectorConstRef";
    return this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorRef] EDK[CxxCharConstPtrStdVectorMutableRef] LIB[std::vector< char const * > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorRef] EDK[CxxCharConstPtrStdVectorMutableRef] LIB[std::vector< char const * > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorRef.cxx_size on null CxxCharConstPtrStdVectorRef";
    return
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorRef.cxx_reserve on null CxxCharConstPtrStdVectorRef";
    
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorRef.cxx_push_back!(
    CxxCharConstPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorRef.cxx_push_back on null CxxCharConstPtrStdVectorRef";
    
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorRef.cxx_pop_back on null CxxCharConstPtrStdVectorRef";
    
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorRef.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorRef] EDK[CxxCharConstPtrStdVectorMutableRef] LIB[std::vector< char const * > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorRef.cxx_getAtIndex on null CxxCharConstPtrStdVectorRef";
    return this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorRef] EDK[CxxCharConstPtrStdVectorMutableRef] LIB[std::vector< char const * > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrStdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorRef.cxx_setAtIndex on null CxxCharConstPtrStdVectorRef";
    this.ptr.data()->{ CxxCharConstPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharConstPtrStdVectorConstPtr
// CxxCharConstPtrStdVectorPtr
// CxxCharConstPtrStdVectorConstRef
// CxxCharConstPtrStdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtr(CxxCharConstPtrStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtr(CxxCharConstPtrStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharConstPtrStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtr(CxxCharConstPtrStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtr Make_CxxCharConstPtrStdVectorConstPtr(CxxCharConstPtrStdVector value) {
  return CxxCharConstPtrStdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtr(CxxCharConstPtrStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtr(CxxCharConstPtrStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharConstPtrStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtr(CxxCharConstPtrStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtr Make_CxxCharConstPtrStdVectorPtr(CxxCharConstPtrStdVector value) {
  return CxxCharConstPtrStdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef(CxxCharConstPtrStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef(CxxCharConstPtrStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharConstPtrStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef(CxxCharConstPtrStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef Make_CxxCharConstPtrStdVectorConstRef(CxxCharConstPtrStdVector value) {
  return CxxCharConstPtrStdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef(CxxCharConstPtrStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef(CxxCharConstPtrStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharConstPtrStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef(CxxCharConstPtrStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef Make_CxxCharConstPtrStdVectorRef(CxxCharConstPtrStdVector value) {
  return CxxCharConstPtrStdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharConstPtrStdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharConstPtrStdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrStdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef CxxCharConstPtrStdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorConstPtr.cxx_getAt on null CxxCharConstPtrStdVectorConstPtr";
  return CxxCharConstPtrStdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxCharConstPtrStdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef CxxCharConstPtrStdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharConstPtrStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef CxxCharConstPtrStdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorPtr.cxx_getAt on null CxxCharConstPtrStdVectorPtr";
  return CxxCharConstPtrStdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxCharConstPtrStdVector()));
}

/// Same as for CxxCharConstPtrStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef CxxCharConstPtrStdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtr.cxx_setAt(Index i, CxxCharConstPtrStdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorPtr.cxx_setAt on null CxxCharConstPtrStdVectorPtr";
  this.ptr.offset(i)->{ CxxCharConstPtrStdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef(CxxCharConstPtrStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef.=(CxxCharConstPtrStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharConstPtrStdVector value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVector CxxCharConstPtrStdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorConstRef.cxx_get on null CxxCharConstPtrStdVectorConstRef";
  return this.ptr.data()->{ CxxCharConstPtrStdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef.cxx_set(CxxCharConstPtrStdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorRef.cxx_set on null CxxCharConstPtrStdVectorRef";
  this.ptr.data()->{ CxxCharConstPtrStdVector } = value;
}

/// Assignment of CxxCharConstPtrStdVector
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef.=(CxxCharConstPtrStdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVectorPtr] EDK[CxxCharConstPtrStdVectorMutablePtr] LIB[std::vector< char const * > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrConstPtr] EDK[CxxCharConstPtrStdVectorPtrConstPtr] LIB[std::vector< char const * > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrConstPtr] EDK[CxxCharConstPtrStdVectorPtrConstPtr] LIB[std::vector< char const * > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrConstPtr.cxx_size on null CxxCharConstPtrStdVectorPtrConstPtr";
    return
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrConstPtr] EDK[CxxCharConstPtrStdVectorPtrConstPtr] LIB[std::vector< char const * > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrConstPtr.cxx_getAtIndex on null CxxCharConstPtrStdVectorPtrConstPtr";
    return this.ptr->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrPtr] EDK[CxxCharConstPtrStdVectorPtrMutablePtr] LIB[std::vector< char const * > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrPtr] EDK[CxxCharConstPtrStdVectorPtrMutablePtr] LIB[std::vector< char const * > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrPtr.cxx_size on null CxxCharConstPtrStdVectorPtrPtr";
    return
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrPtr.cxx_reserve on null CxxCharConstPtrStdVectorPtrPtr";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrPtr.cxx_push_back!(
    CxxCharConstPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrPtr.cxx_push_back on null CxxCharConstPtrStdVectorPtrPtr";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrPtr.cxx_pop_back on null CxxCharConstPtrStdVectorPtrPtr";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrPtr.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrPtr] EDK[CxxCharConstPtrStdVectorPtrMutablePtr] LIB[std::vector< char const * > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrPtr.cxx_getAtIndex on null CxxCharConstPtrStdVectorPtrPtr";
    return this.ptr->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrPtr] EDK[CxxCharConstPtrStdVectorPtrMutablePtr] LIB[std::vector< char const * > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrStdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrPtr.cxx_setAtIndex on null CxxCharConstPtrStdVectorPtrPtr";
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrConstRef] EDK[CxxCharConstPtrStdVectorPtrConstRef] LIB[std::vector< char const * > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrConstRef] EDK[CxxCharConstPtrStdVectorPtrConstRef] LIB[std::vector< char const * > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrConstRef] EDK[CxxCharConstPtrStdVectorPtrConstRef] LIB[std::vector< char const * > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrConstRef.cxx_size on null CxxCharConstPtrStdVectorPtrConstRef";
    return
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrConstRef] EDK[CxxCharConstPtrStdVectorPtrConstRef] LIB[std::vector< char const * > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrConstRef.cxx_getAtIndex on null CxxCharConstPtrStdVectorPtrConstRef";
    return this.ptr->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrRef] EDK[CxxCharConstPtrStdVectorPtrMutableRef] LIB[std::vector< char const * > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrRef] EDK[CxxCharConstPtrStdVectorPtrMutableRef] LIB[std::vector< char const * > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrRef.cxx_size on null CxxCharConstPtrStdVectorPtrRef";
    return
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrRef.cxx_reserve on null CxxCharConstPtrStdVectorPtrRef";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrRef.cxx_push_back!(
    CxxCharConstPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrRef.cxx_push_back on null CxxCharConstPtrStdVectorPtrRef";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrRef.cxx_pop_back on null CxxCharConstPtrStdVectorPtrRef";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrRef.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrRef] EDK[CxxCharConstPtrStdVectorPtrMutableRef] LIB[std::vector< char const * > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrRef.cxx_getAtIndex on null CxxCharConstPtrStdVectorPtrRef";
    return this.ptr->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorPtrRef] EDK[CxxCharConstPtrStdVectorPtrMutableRef] LIB[std::vector< char const * > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrStdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorPtrRef.cxx_setAtIndex on null CxxCharConstPtrStdVectorPtrRef";
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharConstPtrStdVectorPtrConstPtr
// CxxCharConstPtrStdVectorPtrPtr
// CxxCharConstPtrStdVectorPtrConstRef
// CxxCharConstPtrStdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstPtr(CxxCharConstPtrStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstPtr(CxxCharConstPtrStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstPtr(CxxCharConstPtrStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstPtr Make_CxxCharConstPtrStdVectorPtrConstPtr(CxxCharConstPtrStdVectorPtr value) {
  return CxxCharConstPtrStdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrPtr(CxxCharConstPtrStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrPtr(CxxCharConstPtrStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrPtr(CxxCharConstPtrStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrPtr Make_CxxCharConstPtrStdVectorPtrPtr(CxxCharConstPtrStdVectorPtr value) {
  return CxxCharConstPtrStdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef(CxxCharConstPtrStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef(CxxCharConstPtrStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef(CxxCharConstPtrStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef Make_CxxCharConstPtrStdVectorPtrConstRef(CxxCharConstPtrStdVectorPtr value) {
  return CxxCharConstPtrStdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef(CxxCharConstPtrStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef(CxxCharConstPtrStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef(CxxCharConstPtrStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef Make_CxxCharConstPtrStdVectorPtrRef(CxxCharConstPtrStdVectorPtr value) {
  return CxxCharConstPtrStdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharConstPtrStdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharConstPtrStdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrStdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef CxxCharConstPtrStdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorPtrConstPtr.cxx_getAt on null CxxCharConstPtrStdVectorPtrConstPtr";
  return CxxCharConstPtrStdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtrStdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef CxxCharConstPtrStdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharConstPtrStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef CxxCharConstPtrStdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorPtrPtr.cxx_getAt on null CxxCharConstPtrStdVectorPtrPtr";
  return CxxCharConstPtrStdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtrStdVectorMutablePtr()));
}

/// Same as for CxxCharConstPtrStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef CxxCharConstPtrStdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrPtr.cxx_setAt(Index i, CxxCharConstPtrStdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorPtrPtr.cxx_setAt on null CxxCharConstPtrStdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxCharConstPtrStdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef(CxxCharConstPtrStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef.=(CxxCharConstPtrStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharConstPtrStdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtr CxxCharConstPtrStdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorPtrConstRef.cxx_get on null CxxCharConstPtrStdVectorPtrConstRef";
  return this.ptr->{ CxxCharConstPtrStdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef.cxx_set(CxxCharConstPtrStdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorPtrRef.cxx_set on null CxxCharConstPtrStdVectorPtrRef";
  this.ptr->{ CxxCharConstPtrStdVectorPtr } = value;
}

/// Assignment of CxxCharConstPtrStdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef.=(CxxCharConstPtrStdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharConstPtrStdVectorConstPtr] EDK[CxxCharConstPtrStdVectorConstPtr] LIB[std::vector< char const * > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrConstPtr] EDK[CxxCharConstPtrStdVectorConstPtrConstPtr] LIB[std::vector< char const * > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrConstPtr] EDK[CxxCharConstPtrStdVectorConstPtrConstPtr] LIB[std::vector< char const * > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrConstPtr.cxx_size on null CxxCharConstPtrStdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrConstPtr] EDK[CxxCharConstPtrStdVectorConstPtrConstPtr] LIB[std::vector< char const * > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxCharConstPtrStdVectorConstPtrConstPtr";
    return this.ptr->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrPtr] EDK[CxxCharConstPtrStdVectorConstPtrMutablePtr] LIB[std::vector< char const * > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrPtr] EDK[CxxCharConstPtrStdVectorConstPtrMutablePtr] LIB[std::vector< char const * > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrPtr.cxx_size on null CxxCharConstPtrStdVectorConstPtrPtr";
    return
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrPtr.cxx_reserve on null CxxCharConstPtrStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrPtr.cxx_push_back!(
    CxxCharConstPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrPtr.cxx_push_back on null CxxCharConstPtrStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrPtr.cxx_pop_back on null CxxCharConstPtrStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrPtr.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrPtr] EDK[CxxCharConstPtrStdVectorConstPtrMutablePtr] LIB[std::vector< char const * > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrPtr.cxx_getAtIndex on null CxxCharConstPtrStdVectorConstPtrPtr";
    return this.ptr->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrPtr] EDK[CxxCharConstPtrStdVectorConstPtrMutablePtr] LIB[std::vector< char const * > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrStdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrPtr.cxx_setAtIndex on null CxxCharConstPtrStdVectorConstPtrPtr";
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrConstRef] EDK[CxxCharConstPtrStdVectorConstPtrConstRef] LIB[std::vector< char const * > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrConstRef] EDK[CxxCharConstPtrStdVectorConstPtrConstRef] LIB[std::vector< char const * > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrConstRef] EDK[CxxCharConstPtrStdVectorConstPtrConstRef] LIB[std::vector< char const * > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrConstRef.cxx_size on null CxxCharConstPtrStdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrConstRef] EDK[CxxCharConstPtrStdVectorConstPtrConstRef] LIB[std::vector< char const * > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrConstRef.cxx_getAtIndex on null CxxCharConstPtrStdVectorConstPtrConstRef";
    return this.ptr->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrRef] EDK[CxxCharConstPtrStdVectorConstPtrMutableRef] LIB[std::vector< char const * > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrRef] EDK[CxxCharConstPtrStdVectorConstPtrMutableRef] LIB[std::vector< char const * > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrRef.cxx_size on null CxxCharConstPtrStdVectorConstPtrRef";
    return
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrRef.cxx_reserve on null CxxCharConstPtrStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrRef.cxx_push_back!(
    CxxCharConstPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrRef.cxx_push_back on null CxxCharConstPtrStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrRef.cxx_pop_back on null CxxCharConstPtrStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrRef.push_back!(
    in
    String
    _arg0
    
    
    )
{   
    CxxCharConstPtr _arg0__cxx = CxxCharConstPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharConstPtrStdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharConstPtrStdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrRef] EDK[CxxCharConstPtrStdVectorConstPtrMutableRef] LIB[std::vector< char const * > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrConstRef
CxxCharConstPtrStdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrRef.cxx_getAtIndex on null CxxCharConstPtrStdVectorConstPtrRef";
    return this.ptr->{ CxxCharConstPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharConstPtrStdVectorConstPtrRef] EDK[CxxCharConstPtrStdVectorConstPtrMutableRef] LIB[std::vector< char const * > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharConstPtrStdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharConstPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharConstPtrStdVectorConstPtrRef.cxx_setAtIndex on null CxxCharConstPtrStdVectorConstPtrRef";
    this.ptr->{ CxxCharConstPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharConstPtrStdVectorConstPtrConstPtr
// CxxCharConstPtrStdVectorConstPtrPtr
// CxxCharConstPtrStdVectorConstPtrConstRef
// CxxCharConstPtrStdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstPtr(CxxCharConstPtrStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstPtr(CxxCharConstPtrStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstPtr(CxxCharConstPtrStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstPtr Make_CxxCharConstPtrStdVectorConstPtrConstPtr(CxxCharConstPtrStdVectorConstPtr value) {
  return CxxCharConstPtrStdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrPtr(CxxCharConstPtrStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrPtr(CxxCharConstPtrStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrPtr(CxxCharConstPtrStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrPtr Make_CxxCharConstPtrStdVectorConstPtrPtr(CxxCharConstPtrStdVectorConstPtr value) {
  return CxxCharConstPtrStdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef(CxxCharConstPtrStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef(CxxCharConstPtrStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef(CxxCharConstPtrStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef Make_CxxCharConstPtrStdVectorConstPtrConstRef(CxxCharConstPtrStdVectorConstPtr value) {
  return CxxCharConstPtrStdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef(CxxCharConstPtrStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef(CxxCharConstPtrStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharConstPtrStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef(CxxCharConstPtrStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef Make_CxxCharConstPtrStdVectorConstPtrRef(CxxCharConstPtrStdVectorConstPtr value) {
  return CxxCharConstPtrStdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharConstPtrStdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharConstPtrStdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharConstPtrStdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef CxxCharConstPtrStdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorConstPtrConstPtr.cxx_getAt on null CxxCharConstPtrStdVectorConstPtrConstPtr";
  return CxxCharConstPtrStdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtrStdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef CxxCharConstPtrStdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharConstPtrStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef CxxCharConstPtrStdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorConstPtrPtr.cxx_getAt on null CxxCharConstPtrStdVectorConstPtrPtr";
  return CxxCharConstPtrStdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxCharConstPtrStdVectorConstPtr()));
}

/// Same as for CxxCharConstPtrStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef CxxCharConstPtrStdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrPtr.cxx_setAt(Index i, CxxCharConstPtrStdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorConstPtrPtr.cxx_setAt on null CxxCharConstPtrStdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxCharConstPtrStdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef(CxxCharConstPtrStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef.=(CxxCharConstPtrStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharConstPtrStdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtr CxxCharConstPtrStdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorConstPtrConstRef.cxx_get on null CxxCharConstPtrStdVectorConstPtrConstRef";
  return this.ptr->{ CxxCharConstPtrStdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef.cxx_set(CxxCharConstPtrStdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharConstPtrStdVectorConstPtrRef.cxx_set on null CxxCharConstPtrStdVectorConstPtrRef";
  this.ptr->{ CxxCharConstPtrStdVectorConstPtr } = value;
}

/// Assignment of CxxCharConstPtrStdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef.=(CxxCharConstPtrStdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharConstPtrStdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrPtr] EDK[CxxCharPtrMutablePtr] LIB[char * *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxCharPtrPtrConstPtr
// CxxCharPtrPtrPtr
// CxxCharPtrPtrConstRef
// CxxCharPtrPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstPtr(CxxCharPtrPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstPtr(CxxCharPtrPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrPtrConstPtr permits CxxCharPtrPtrConstPtr {
  private Data ptr;
  private CxxCharPtrPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtrConstPtr(CxxCharPtrPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtrConstPtr(io CxxCharPtrPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstPtr(Make_CxxCharPtrPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrPtr(CxxCharPtrPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrPtr(CxxCharPtrPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrPtrPtr permits CxxCharPtrPtrPtr {
  private Data ptr;
  private CxxCharPtrPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtrPtr(CxxCharPtrPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtrPtr(io CxxCharPtrPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrPtr(Make_CxxCharPtrPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef(CxxCharPtrPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef(CxxCharPtrPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrPtrConstRef permits CxxCharPtrPtrConstRef {
  private Data ptr;
  private CxxCharPtrPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtrConstRef(CxxCharPtrPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtrConstRef(io CxxCharPtrPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef(Make_CxxCharPtrPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef(CxxCharPtrPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef(CxxCharPtrPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrMutablePtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrPtrRef permits CxxCharPtrPtrRef {
  private Data ptr;
  private CxxCharPtrPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtrRef(CxxCharPtrPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrPtrRef(io CxxCharPtrPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef(Make_CxxCharPtrPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharPtrPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharPtrPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef CxxCharPtrPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrPtrConstPtr.cxx_getAt on null CxxCharPtrPtrConstPtr";
  return CxxCharPtrPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharPtrMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef CxxCharPtrPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharPtrPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef CxxCharPtrPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrPtrPtr.cxx_getAt on null CxxCharPtrPtrPtr";
  return CxxCharPtrPtrRef(this.ptr.offset(index * __CxxSize_CxxCharPtrMutablePtr()));
}

/// Same as for CxxCharPtrPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef CxxCharPtrPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrPtr.cxx_setAt(Index i, CxxCharPtrPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrPtrPtr.cxx_setAt on null CxxCharPtrPtrPtr";
  this.ptr.offset(i)->{ CxxCharPtrPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef(CxxCharPtrPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef.=(CxxCharPtrPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharPtrPtr value
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtr CxxCharPtrPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrPtrConstRef.cxx_get on null CxxCharPtrPtrConstRef";
  return this.ptr->{ CxxCharPtrPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef.cxx_set(CxxCharPtrPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrPtrRef.cxx_set on null CxxCharPtrPtrRef";
  this.ptr->{ CxxCharPtrPtr } = value;
}

/// Assignment of CxxCharPtrPtr
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef.=(CxxCharPtrPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrConstPtr] EDK[CxxCharPtrConstPtr] LIB[char * const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxCharPtrConstPtrConstPtr
// CxxCharPtrConstPtrPtr
// CxxCharPtrConstPtrConstRef
// CxxCharPtrConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstPtr(CxxCharPtrConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstPtr(CxxCharPtrConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrConstPtrConstPtr permits CxxCharPtrConstPtrConstPtr {
  private Data ptr;
  private CxxCharPtrConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtrConstPtr(CxxCharPtrConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtrConstPtr(io CxxCharPtrConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstPtr(Make_CxxCharPtrConstPtrConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrPtr(CxxCharPtrConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrPtr(CxxCharPtrConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrConstPtrPtr permits CxxCharPtrConstPtrPtr {
  private Data ptr;
  private CxxCharPtrConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtrPtr(CxxCharPtrConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtrPtr(io CxxCharPtrConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrPtr(Make_CxxCharPtrConstPtrPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef(CxxCharPtrConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef(CxxCharPtrConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrConstPtrConstRef permits CxxCharPtrConstPtrConstRef {
  private Data ptr;
  private CxxCharPtrConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtrConstRef(CxxCharPtrConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtrConstRef(io CxxCharPtrConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef(Make_CxxCharPtrConstPtrConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef(CxxCharPtrConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef(CxxCharPtrConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrConstPtr());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxCharPtrConstPtrRef permits CxxCharPtrConstPtrRef {
  private Data ptr;
  private CxxCharPtrConstPtr value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtrRef(CxxCharPtrConstPtr value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxCharPtrConstPtrRef(io CxxCharPtrConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef(Make_CxxCharPtrConstPtrRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharPtrConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharPtrConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef CxxCharPtrConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrConstPtrConstPtr.cxx_getAt on null CxxCharPtrConstPtrConstPtr";
  return CxxCharPtrConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharPtrConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef CxxCharPtrConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharPtrConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef CxxCharPtrConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrConstPtrPtr.cxx_getAt on null CxxCharPtrConstPtrPtr";
  return CxxCharPtrConstPtrRef(this.ptr.offset(index * __CxxSize_CxxCharPtrConstPtr()));
}

/// Same as for CxxCharPtrConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef CxxCharPtrConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrPtr.cxx_setAt(Index i, CxxCharPtrConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrConstPtrPtr.cxx_setAt on null CxxCharPtrConstPtrPtr";
  this.ptr.offset(i)->{ CxxCharPtrConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef(CxxCharPtrConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef.=(CxxCharPtrConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharPtrConstPtr value
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtr CxxCharPtrConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrConstPtrConstRef.cxx_get on null CxxCharPtrConstPtrConstRef";
  return this.ptr->{ CxxCharPtrConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Convert to Boolean
/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrConstPtrConstRef ref) {
  this = Boolean(ref.cxx_get());
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef.cxx_set(CxxCharPtrConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrConstPtrRef.cxx_set on null CxxCharPtrConstPtrRef";
  this.ptr->{ CxxCharPtrConstPtr } = value;
}

/// Assignment of CxxCharPtrConstPtr
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef.=(CxxCharPtrConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector(
    CxxCharPtrStdVector that
    ) = "Kludge__CxxCharPtrStdVector__MU__copy_ctor__cdd53b72e2eda41e1adcc82f0f8805bf";

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector.__ctor(
    ) = "Kludge__CxxCharPtrStdVector__MU__ctor__5d577be1b0f596294092e792e0126d55";

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxCharPtrStdVector__MU__ctor__db650d905d5c72d13b93a221f90d2c74";

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector.__ctor(
    CxxCharPtrConstPtr _arg0,
    CxxCharPtrConstPtr _arg1
    ) = "Kludge__CxxCharPtrStdVector__MU__ctor__d32fa85bac4fccf11012fbcee28e9dad";

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector(
    CxxCharPtrConstPtr _arg0,
    CxxCharPtrConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector(
    in
    CxxChar
    _arg0
    
    ,
    in
    CxxChar
    _arg1
    
    
    ) {
    
    CxxCharPtr _arg0__cxx = Make_CxxCharPtr(_arg0);
    CxxCharPtrConstPtr _arg0__cxx__cxx = Make_CxxCharPtrConstPtr(_arg0__cxx);
    
    CxxCharPtr _arg1__cxx = Make_CxxCharPtr(_arg1);
    CxxCharPtrConstPtr _arg1__cxx__cxx = Make_CxxCharPtrConstPtr(_arg1__cxx);
    this.__ctor(
        _arg0__cxx__cxx,
        _arg1__cxx__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxCharPtrStdVector() = "Kludge__CxxCharPtrStdVector__MU__dtor__bb01626b4fa094607b72f01ff84b20fa";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVector.cxx_size?(
    )
 = "Kludge__CxxCharPtrStdVector__CO__meth_size__95a16a2d38e353ef59ddfbf8b30873cd";

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxCharPtrStdVector__MU__meth_reserve__4bca6c7d6accd60aae0bc588ec56f6f8";

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVector.cxx_push_back!(
    CxxCharPtr _arg0
    )
 = "Kludge__CxxCharPtrStdVector__MU__meth_push_back__bb2023358d9996ee7a52cbc98c9730f0";

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVector.cxx_pop_back!(
    )
 = "Kludge__CxxCharPtrStdVector__MU__meth_pop_back__ac3e2c55aca9e062a8a5d7f62b864aff";

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVector.push_back!(
    io
    CxxChar
    _arg0
    
    
    )
{   
    
    CxxCharPtr _arg0__cxx = Make_CxxCharPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxCharPtrStdVector.=(
    CxxCharPtrStdVector that
    ) = "Kludge__CxxCharPtrStdVector__MU__simple_ass_op__b3d8affb02f48a69e18f1900fd6f3849";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxCharPtrStdVector__CO__get_ind_op__d300b3398e449bf794c9336cc9adc3f9";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrStdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxCharPtrConstRef value
    )
  = "Kludge__CxxCharPtrStdVector__MU__set_ind_op__ed8fd4e8803ce8291b12b5af59521f13";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector(CxxCharPtr array<>) {
  this = CxxCharPtrStdVector(
    CxxCharPtrConstPtr(array, 0),
    CxxCharPtrConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector Make_CxxCharPtrStdVector(CxxCharPtr array<>) {
  return CxxCharPtrStdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline CxxCharPtr[] Make_CxxCharPtrVariableArray(CxxCharPtrStdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  CxxCharPtr result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxCharPtrConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector.appendDesc(io String string) {
  string += "CxxCharPtrStdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVector] EDK[Fabric_EDK_KL_CxxCharPtrStdVector] LIB[std::vector< char * >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtr] EDK[CxxCharPtrStdVectorConstPtr] LIB[std::vector< char * > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtr] EDK[CxxCharPtrStdVectorConstPtr] LIB[std::vector< char * > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtr.cxx_size on null CxxCharPtrStdVectorConstPtr";
    return
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtr] EDK[CxxCharPtrStdVectorConstPtr] LIB[std::vector< char * > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtr.cxx_getAtIndex on null CxxCharPtrStdVectorConstPtr";
    return this.ptr.data()->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtr] EDK[CxxCharPtrStdVectorMutablePtr] LIB[std::vector< char * > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtr] EDK[CxxCharPtrStdVectorMutablePtr] LIB[std::vector< char * > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtr.cxx_size on null CxxCharPtrStdVectorPtr";
    return
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtr.cxx_reserve on null CxxCharPtrStdVectorPtr";
    
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtr.cxx_push_back!(
    CxxCharPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtr.cxx_push_back on null CxxCharPtrStdVectorPtr";
    
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtr.cxx_pop_back on null CxxCharPtrStdVectorPtr";
    
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtr.push_back!(
    io
    CxxChar
    _arg0
    
    
    )
{   
    
    CxxCharPtr _arg0__cxx = Make_CxxCharPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtr] EDK[CxxCharPtrStdVectorMutablePtr] LIB[std::vector< char * > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtr.cxx_getAtIndex on null CxxCharPtrStdVectorPtr";
    return this.ptr.data()->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtr] EDK[CxxCharPtrStdVectorMutablePtr] LIB[std::vector< char * > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrStdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtr.cxx_setAtIndex on null CxxCharPtrStdVectorPtr";
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstRef] EDK[CxxCharPtrStdVectorConstRef] LIB[std::vector< char * > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstRef] EDK[CxxCharPtrStdVectorConstRef] LIB[std::vector< char * > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstRef] EDK[CxxCharPtrStdVectorConstRef] LIB[std::vector< char * > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstRef.cxx_size on null CxxCharPtrStdVectorConstRef";
    return
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstRef] EDK[CxxCharPtrStdVectorConstRef] LIB[std::vector< char * > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstRef.cxx_getAtIndex on null CxxCharPtrStdVectorConstRef";
    return this.ptr.data()->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorRef] EDK[CxxCharPtrStdVectorMutableRef] LIB[std::vector< char * > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorRef] EDK[CxxCharPtrStdVectorMutableRef] LIB[std::vector< char * > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorRef.cxx_size on null CxxCharPtrStdVectorRef";
    return
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorRef.cxx_reserve on null CxxCharPtrStdVectorRef";
    
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorRef.cxx_push_back!(
    CxxCharPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorRef.cxx_push_back on null CxxCharPtrStdVectorRef";
    
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorRef.cxx_pop_back on null CxxCharPtrStdVectorRef";
    
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorRef.push_back!(
    io
    CxxChar
    _arg0
    
    
    )
{   
    
    CxxCharPtr _arg0__cxx = Make_CxxCharPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorRef] EDK[CxxCharPtrStdVectorMutableRef] LIB[std::vector< char * > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorRef.cxx_getAtIndex on null CxxCharPtrStdVectorRef";
    return this.ptr.data()->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorRef] EDK[CxxCharPtrStdVectorMutableRef] LIB[std::vector< char * > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrStdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorRef.cxx_setAtIndex on null CxxCharPtrStdVectorRef";
    this.ptr.data()->{ CxxCharPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharPtrStdVectorConstPtr
// CxxCharPtrStdVectorPtr
// CxxCharPtrStdVectorConstRef
// CxxCharPtrStdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtr(CxxCharPtrStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtr(CxxCharPtrStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharPtrStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtr(CxxCharPtrStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtr Make_CxxCharPtrStdVectorConstPtr(CxxCharPtrStdVector value) {
  return CxxCharPtrStdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtr(CxxCharPtrStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtr(CxxCharPtrStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharPtrStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtr(CxxCharPtrStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtr Make_CxxCharPtrStdVectorPtr(CxxCharPtrStdVector value) {
  return CxxCharPtrStdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef(CxxCharPtrStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef(CxxCharPtrStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharPtrStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef(CxxCharPtrStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef Make_CxxCharPtrStdVectorConstRef(CxxCharPtrStdVector value) {
  return CxxCharPtrStdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef(CxxCharPtrStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef(CxxCharPtrStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxCharPtrStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef(CxxCharPtrStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef Make_CxxCharPtrStdVectorRef(CxxCharPtrStdVector value) {
  return CxxCharPtrStdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharPtrStdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharPtrStdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrStdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef CxxCharPtrStdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorConstPtr.cxx_getAt on null CxxCharPtrStdVectorConstPtr";
  return CxxCharPtrStdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxCharPtrStdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef CxxCharPtrStdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharPtrStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef CxxCharPtrStdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorPtr.cxx_getAt on null CxxCharPtrStdVectorPtr";
  return CxxCharPtrStdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxCharPtrStdVector()));
}

/// Same as for CxxCharPtrStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef CxxCharPtrStdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtr.cxx_setAt(Index i, CxxCharPtrStdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorPtr.cxx_setAt on null CxxCharPtrStdVectorPtr";
  this.ptr.offset(i)->{ CxxCharPtrStdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef(CxxCharPtrStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef.=(CxxCharPtrStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharPtrStdVector value
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVector CxxCharPtrStdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorConstRef.cxx_get on null CxxCharPtrStdVectorConstRef";
  return this.ptr.data()->{ CxxCharPtrStdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef.cxx_set(CxxCharPtrStdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorRef.cxx_set on null CxxCharPtrStdVectorRef";
  this.ptr.data()->{ CxxCharPtrStdVector } = value;
}

/// Assignment of CxxCharPtrStdVector
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef.=(CxxCharPtrStdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVectorPtr] EDK[CxxCharPtrStdVectorMutablePtr] LIB[std::vector< char * > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrConstPtr] EDK[CxxCharPtrStdVectorPtrConstPtr] LIB[std::vector< char * > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrConstPtr] EDK[CxxCharPtrStdVectorPtrConstPtr] LIB[std::vector< char * > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrConstPtr.cxx_size on null CxxCharPtrStdVectorPtrConstPtr";
    return
    this.ptr->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrConstPtr] EDK[CxxCharPtrStdVectorPtrConstPtr] LIB[std::vector< char * > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrConstPtr.cxx_getAtIndex on null CxxCharPtrStdVectorPtrConstPtr";
    return this.ptr->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrPtr] EDK[CxxCharPtrStdVectorPtrMutablePtr] LIB[std::vector< char * > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrPtr] EDK[CxxCharPtrStdVectorPtrMutablePtr] LIB[std::vector< char * > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrPtr.cxx_size on null CxxCharPtrStdVectorPtrPtr";
    return
    this.ptr->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrPtr.cxx_reserve on null CxxCharPtrStdVectorPtrPtr";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrPtr.cxx_push_back!(
    CxxCharPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrPtr.cxx_push_back on null CxxCharPtrStdVectorPtrPtr";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrPtr.cxx_pop_back on null CxxCharPtrStdVectorPtrPtr";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrPtr.push_back!(
    io
    CxxChar
    _arg0
    
    
    )
{   
    
    CxxCharPtr _arg0__cxx = Make_CxxCharPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrPtr] EDK[CxxCharPtrStdVectorPtrMutablePtr] LIB[std::vector< char * > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrPtr.cxx_getAtIndex on null CxxCharPtrStdVectorPtrPtr";
    return this.ptr->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrPtr] EDK[CxxCharPtrStdVectorPtrMutablePtr] LIB[std::vector< char * > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrStdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrPtr.cxx_setAtIndex on null CxxCharPtrStdVectorPtrPtr";
    this.ptr->{ CxxCharPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrConstRef] EDK[CxxCharPtrStdVectorPtrConstRef] LIB[std::vector< char * > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrConstRef] EDK[CxxCharPtrStdVectorPtrConstRef] LIB[std::vector< char * > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrConstRef] EDK[CxxCharPtrStdVectorPtrConstRef] LIB[std::vector< char * > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrConstRef.cxx_size on null CxxCharPtrStdVectorPtrConstRef";
    return
    this.ptr->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrConstRef] EDK[CxxCharPtrStdVectorPtrConstRef] LIB[std::vector< char * > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrConstRef.cxx_getAtIndex on null CxxCharPtrStdVectorPtrConstRef";
    return this.ptr->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrRef] EDK[CxxCharPtrStdVectorPtrMutableRef] LIB[std::vector< char * > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrRef] EDK[CxxCharPtrStdVectorPtrMutableRef] LIB[std::vector< char * > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrRef.cxx_size on null CxxCharPtrStdVectorPtrRef";
    return
    this.ptr->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrRef.cxx_reserve on null CxxCharPtrStdVectorPtrRef";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrRef.cxx_push_back!(
    CxxCharPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrRef.cxx_push_back on null CxxCharPtrStdVectorPtrRef";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrRef.cxx_pop_back on null CxxCharPtrStdVectorPtrRef";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorPtrRef.push_back!(
    io
    CxxChar
    _arg0
    
    
    )
{   
    
    CxxCharPtr _arg0__cxx = Make_CxxCharPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrRef] EDK[CxxCharPtrStdVectorPtrMutableRef] LIB[std::vector< char * > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrRef.cxx_getAtIndex on null CxxCharPtrStdVectorPtrRef";
    return this.ptr->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorPtrRef] EDK[CxxCharPtrStdVectorPtrMutableRef] LIB[std::vector< char * > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrStdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorPtrRef.cxx_setAtIndex on null CxxCharPtrStdVectorPtrRef";
    this.ptr->{ CxxCharPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharPtrStdVectorPtrConstPtr
// CxxCharPtrStdVectorPtrPtr
// CxxCharPtrStdVectorPtrConstRef
// CxxCharPtrStdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstPtr(CxxCharPtrStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstPtr(CxxCharPtrStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstPtr(CxxCharPtrStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstPtr Make_CxxCharPtrStdVectorPtrConstPtr(CxxCharPtrStdVectorPtr value) {
  return CxxCharPtrStdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrPtr(CxxCharPtrStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrPtr(CxxCharPtrStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrPtr(CxxCharPtrStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrPtr Make_CxxCharPtrStdVectorPtrPtr(CxxCharPtrStdVectorPtr value) {
  return CxxCharPtrStdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef(CxxCharPtrStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef(CxxCharPtrStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef(CxxCharPtrStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef Make_CxxCharPtrStdVectorPtrConstRef(CxxCharPtrStdVectorPtr value) {
  return CxxCharPtrStdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef(CxxCharPtrStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef(CxxCharPtrStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef(CxxCharPtrStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef Make_CxxCharPtrStdVectorPtrRef(CxxCharPtrStdVectorPtr value) {
  return CxxCharPtrStdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharPtrStdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharPtrStdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrStdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef CxxCharPtrStdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorPtrConstPtr.cxx_getAt on null CxxCharPtrStdVectorPtrConstPtr";
  return CxxCharPtrStdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharPtrStdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef CxxCharPtrStdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharPtrStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef CxxCharPtrStdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorPtrPtr.cxx_getAt on null CxxCharPtrStdVectorPtrPtr";
  return CxxCharPtrStdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxCharPtrStdVectorMutablePtr()));
}

/// Same as for CxxCharPtrStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef CxxCharPtrStdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrPtr.cxx_setAt(Index i, CxxCharPtrStdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorPtrPtr.cxx_setAt on null CxxCharPtrStdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxCharPtrStdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef(CxxCharPtrStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef.=(CxxCharPtrStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharPtrStdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtr CxxCharPtrStdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorPtrConstRef.cxx_get on null CxxCharPtrStdVectorPtrConstRef";
  return this.ptr->{ CxxCharPtrStdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef.cxx_set(CxxCharPtrStdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorPtrRef.cxx_set on null CxxCharPtrStdVectorPtrRef";
  this.ptr->{ CxxCharPtrStdVectorPtr } = value;
}

/// Assignment of CxxCharPtrStdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef.=(CxxCharPtrStdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxCharPtrStdVectorConstPtr] EDK[CxxCharPtrStdVectorConstPtr] LIB[std::vector< char * > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrConstPtr] EDK[CxxCharPtrStdVectorConstPtrConstPtr] LIB[std::vector< char * > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrConstPtr] EDK[CxxCharPtrStdVectorConstPtrConstPtr] LIB[std::vector< char * > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrConstPtr.cxx_size on null CxxCharPtrStdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrConstPtr] EDK[CxxCharPtrStdVectorConstPtrConstPtr] LIB[std::vector< char * > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxCharPtrStdVectorConstPtrConstPtr";
    return this.ptr->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrPtr] EDK[CxxCharPtrStdVectorConstPtrMutablePtr] LIB[std::vector< char * > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrPtr] EDK[CxxCharPtrStdVectorConstPtrMutablePtr] LIB[std::vector< char * > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrPtr.cxx_size on null CxxCharPtrStdVectorConstPtrPtr";
    return
    this.ptr->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrPtr.cxx_reserve on null CxxCharPtrStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrPtr.cxx_push_back!(
    CxxCharPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrPtr.cxx_push_back on null CxxCharPtrStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrPtr.cxx_pop_back on null CxxCharPtrStdVectorConstPtrPtr";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrPtr.push_back!(
    io
    CxxChar
    _arg0
    
    
    )
{   
    
    CxxCharPtr _arg0__cxx = Make_CxxCharPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrPtr] EDK[CxxCharPtrStdVectorConstPtrMutablePtr] LIB[std::vector< char * > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrPtr.cxx_getAtIndex on null CxxCharPtrStdVectorConstPtrPtr";
    return this.ptr->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrPtr] EDK[CxxCharPtrStdVectorConstPtrMutablePtr] LIB[std::vector< char * > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrStdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxCharPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrPtr.cxx_setAtIndex on null CxxCharPtrStdVectorConstPtrPtr";
    this.ptr->{ CxxCharPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrConstRef] EDK[CxxCharPtrStdVectorConstPtrConstRef] LIB[std::vector< char * > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrConstRef] EDK[CxxCharPtrStdVectorConstPtrConstRef] LIB[std::vector< char * > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrConstRef] EDK[CxxCharPtrStdVectorConstPtrConstRef] LIB[std::vector< char * > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrConstRef.cxx_size on null CxxCharPtrStdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrConstRef] EDK[CxxCharPtrStdVectorConstPtrConstRef] LIB[std::vector< char * > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrConstRef.cxx_getAtIndex on null CxxCharPtrStdVectorConstPtrConstRef";
    return this.ptr->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrRef] EDK[CxxCharPtrStdVectorConstPtrMutableRef] LIB[std::vector< char * > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrRef] EDK[CxxCharPtrStdVectorConstPtrMutableRef] LIB[std::vector< char * > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrRef.cxx_size on null CxxCharPtrStdVectorConstPtrRef";
    return
    this.ptr->{ CxxCharPtrStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrRef.cxx_reserve on null CxxCharPtrStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrRef.cxx_push_back!(
    CxxCharPtr _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrRef.cxx_push_back on null CxxCharPtrStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrRef.cxx_pop_back on null CxxCharPtrStdVectorConstPtrRef";
    
    this.ptr->{ CxxCharPtrStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrRef.push_back!(
    io
    CxxChar
    _arg0
    
    
    )
{   
    
    CxxCharPtr _arg0__cxx = Make_CxxCharPtr(_arg0);
    
    this.cxx_push_back(
        _arg0__cxx
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxCharPtrStdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxCharPtrStdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrRef] EDK[CxxCharPtrStdVectorConstPtrMutableRef] LIB[std::vector< char * > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrConstRef
CxxCharPtrStdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrRef.cxx_getAtIndex on null CxxCharPtrStdVectorConstPtrRef";
    return this.ptr->{ CxxCharPtrStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxCharPtrStdVectorConstPtrRef] EDK[CxxCharPtrStdVectorConstPtrMutableRef] LIB[std::vector< char * > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxCharPtrStdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxCharPtrConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxCharPtrStdVectorConstPtrRef.cxx_setAtIndex on null CxxCharPtrStdVectorConstPtrRef";
    this.ptr->{ CxxCharPtrStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxCharPtrStdVectorConstPtrConstPtr
// CxxCharPtrStdVectorConstPtrPtr
// CxxCharPtrStdVectorConstPtrConstRef
// CxxCharPtrStdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstPtr(CxxCharPtrStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstPtr(CxxCharPtrStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstPtr(CxxCharPtrStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstPtr Make_CxxCharPtrStdVectorConstPtrConstPtr(CxxCharPtrStdVectorConstPtr value) {
  return CxxCharPtrStdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrPtr(CxxCharPtrStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrPtr(CxxCharPtrStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrPtr(CxxCharPtrStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrPtr Make_CxxCharPtrStdVectorConstPtrPtr(CxxCharPtrStdVectorConstPtr value) {
  return CxxCharPtrStdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef(CxxCharPtrStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef(CxxCharPtrStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef(CxxCharPtrStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef Make_CxxCharPtrStdVectorConstPtrConstRef(CxxCharPtrStdVectorConstPtr value) {
  return CxxCharPtrStdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef(CxxCharPtrStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef(CxxCharPtrStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxCharPtrStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef(CxxCharPtrStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef Make_CxxCharPtrStdVectorConstPtrRef(CxxCharPtrStdVectorConstPtr value) {
  return CxxCharPtrStdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxCharPtrStdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxCharPtrStdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxCharPtrStdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef CxxCharPtrStdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorConstPtrConstPtr.cxx_getAt on null CxxCharPtrStdVectorConstPtrConstPtr";
  return CxxCharPtrStdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxCharPtrStdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef CxxCharPtrStdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxCharPtrStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef CxxCharPtrStdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorConstPtrPtr.cxx_getAt on null CxxCharPtrStdVectorConstPtrPtr";
  return CxxCharPtrStdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxCharPtrStdVectorConstPtr()));
}

/// Same as for CxxCharPtrStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef CxxCharPtrStdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrPtr.cxx_setAt(Index i, CxxCharPtrStdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorConstPtrPtr.cxx_setAt on null CxxCharPtrStdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxCharPtrStdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef(CxxCharPtrStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef.=(CxxCharPtrStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxCharPtrStdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtr CxxCharPtrStdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorConstPtrConstRef.cxx_get on null CxxCharPtrStdVectorConstPtrConstRef";
  return this.ptr->{ CxxCharPtrStdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef.cxx_set(CxxCharPtrStdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxCharPtrStdVectorConstPtrRef.cxx_set on null CxxCharPtrStdVectorConstPtrRef";
  this.ptr->{ CxxCharPtrStdVectorConstPtr } = value;
}

/// Assignment of CxxCharPtrStdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef.=(CxxCharPtrStdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxCharPtrStdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// VoidPtr
// Forwards
//
//////////////////////////////////////////////////////////////////////////////

/// \internal
inline UInt64 __CxxSize_Fabric_EDK_KL_Data() {
  return Data().dataSize();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[Data] EDK[Fabric::EDK::KL::Data] LIB[void *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxDataConstPtr
// CxxDataPtr
// CxxDataConstRef
// CxxDataRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxDataConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtr(Data array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtr(Data array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Data());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxDataConstPtr permits CxxDataConstPtr {
  private Data ptr;
  private Data value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxDataConstPtr(Data value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxDataConstPtr(io Data value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtr(Make_CxxDataConstPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxDataPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataPtr(Data array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtr(Data array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Data());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxDataPtr permits CxxDataPtr {
  private Data ptr;
  private Data value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxDataPtr(Data value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxDataPtr(io Data value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtr(Make_CxxDataPtr maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxDataConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataConstRef(Data array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstRef(Data array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Data());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxDataConstRef permits CxxDataConstRef {
  private Data ptr;
  private Data value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxDataConstRef(Data value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxDataConstRef(io Data value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstRef(Make_CxxDataConstRef maker) {
  this.ptr = maker.ptr;
}

/// \dfgPresetOmit
/// \internal
CxxDataRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataRef(Data array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataRef(Data array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_Data());
}

/// \dfgPresetOmit
/// \internal
struct Make_CxxDataRef permits CxxDataRef {
  private Data ptr;
  private Data value;
};

/// \dfgPresetOmit
/// \internal
Make_CxxDataRef(Data value) {
  this.ptr = this.value.data();
  this.value = value;
}

/// \dfgPresetOmit
/// \internal
Make_CxxDataRef(io Data value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataRef(Make_CxxDataRef maker) {
  this.ptr = maker.ptr;
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxDataConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxDataConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxDataConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxDataConstRef CxxDataConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataConstPtr.cxx_getAt on null CxxDataConstPtr";
  return CxxDataConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Data()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxDataConstRef CxxDataConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxDataConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxDataConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataRef CxxDataPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataPtr.cxx_getAt on null CxxDataPtr";
  return CxxDataRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_Data()));
}

/// Same as for CxxDataConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataRef CxxDataPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxDataPtr.cxx_setAt(Index i, Data v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataPtr.cxx_setAt on null CxxDataPtr";
  this.ptr.offset(i)->{ Data } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxDataConstRef(CxxDataConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxDataConstRef.=(CxxDataConstRef that) {
  this.ptr = that.ptr;
}

/// Get the Data value
/// \dfgPresetOmit
/// \internal
Data CxxDataConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataConstRef.cxx_get on null CxxDataConstRef";
  return this.ptr->{ Data };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxDataRef.cxx_set(Data value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataRef.cxx_set on null CxxDataRef";
  this.ptr->{ Data } = value;
}

/// Assignment of Data
/// \dfgPresetOmit
/// \internal
CxxDataRef.=(Data value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataPtr] EDK[CxxDataMutablePtr] LIB[void * *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxDataPtrConstPtr
// CxxDataPtrPtr
// CxxDataPtrConstRef
// CxxDataPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstPtr(CxxDataPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstPtr(CxxDataPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstPtr(CxxDataPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstPtr Make_CxxDataPtrConstPtr(CxxDataPtr value) {
  return CxxDataPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrPtr(CxxDataPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrPtr(CxxDataPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrPtr(CxxDataPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrPtr Make_CxxDataPtrPtr(CxxDataPtr value) {
  return CxxDataPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef(CxxDataPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef(CxxDataPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef(CxxDataPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef Make_CxxDataPtrConstRef(CxxDataPtr value) {
  return CxxDataPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrRef(CxxDataPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrRef(CxxDataPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrRef(CxxDataPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataPtrRef Make_CxxDataPtrRef(CxxDataPtr value) {
  return CxxDataPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxDataPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxDataPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxDataPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef CxxDataPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataPtrConstPtr.cxx_getAt on null CxxDataPtrConstPtr";
  return CxxDataPtrConstRef(this.ptr.offset(index * __CxxSize_CxxDataMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef CxxDataPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxDataPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxDataPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataPtrRef CxxDataPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataPtrPtr.cxx_getAt on null CxxDataPtrPtr";
  return CxxDataPtrRef(this.ptr.offset(index * __CxxSize_CxxDataMutablePtr()));
}

/// Same as for CxxDataPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataPtrRef CxxDataPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxDataPtrPtr.cxx_setAt(Index i, CxxDataPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataPtrPtr.cxx_setAt on null CxxDataPtrPtr";
  this.ptr.offset(i)->{ CxxDataPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef(CxxDataPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef.=(CxxDataPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxDataPtr value
/// \dfgPresetOmit
/// \internal
CxxDataPtr CxxDataPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataPtrConstRef.cxx_get on null CxxDataPtrConstRef";
  return this.ptr->{ CxxDataPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxDataPtrRef.cxx_set(CxxDataPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataPtrRef.cxx_set on null CxxDataPtrRef";
  this.ptr->{ CxxDataPtr } = value;
}

/// Assignment of CxxDataPtr
/// \dfgPresetOmit
/// \internal
CxxDataPtrRef.=(CxxDataPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataConstPtr] EDK[CxxDataConstPtr] LIB[void * const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////
// CxxDataConstPtrConstPtr
// CxxDataConstPtrPtr
// CxxDataConstPtrConstRef
// CxxDataConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstPtr(CxxDataConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstPtr(CxxDataConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstPtr(CxxDataConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstPtr Make_CxxDataConstPtrConstPtr(CxxDataConstPtr value) {
  return CxxDataConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrPtr(CxxDataConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrPtr(CxxDataConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrPtr(CxxDataConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrPtr Make_CxxDataConstPtrPtr(CxxDataConstPtr value) {
  return CxxDataConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef(CxxDataConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef(CxxDataConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef(CxxDataConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef Make_CxxDataConstPtrConstRef(CxxDataConstPtr value) {
  return CxxDataConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef(CxxDataConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef(CxxDataConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef(CxxDataConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef Make_CxxDataConstPtrRef(CxxDataConstPtr value) {
  return CxxDataConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxDataConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxDataConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxDataConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef CxxDataConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataConstPtrConstPtr.cxx_getAt on null CxxDataConstPtrConstPtr";
  return CxxDataConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxDataConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef CxxDataConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxDataConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef CxxDataConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataConstPtrPtr.cxx_getAt on null CxxDataConstPtrPtr";
  return CxxDataConstPtrRef(this.ptr.offset(index * __CxxSize_CxxDataConstPtr()));
}

/// Same as for CxxDataConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef CxxDataConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrPtr.cxx_setAt(Index i, CxxDataConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataConstPtrPtr.cxx_setAt on null CxxDataConstPtrPtr";
  this.ptr.offset(i)->{ CxxDataConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef(CxxDataConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef.=(CxxDataConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxDataConstPtr value
/// \dfgPresetOmit
/// \internal
CxxDataConstPtr CxxDataConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataConstPtrConstRef.cxx_get on null CxxDataConstPtrConstRef";
  return this.ptr->{ CxxDataConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef.cxx_set(CxxDataConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataConstPtrRef.cxx_set on null CxxDataConstPtrRef";
  this.ptr->{ CxxDataConstPtr } = value;
}

/// Assignment of CxxDataConstPtr
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef.=(CxxDataConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Owned KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxDataStdVector(
    CxxDataStdVector that
    ) = "Kludge__CxxDataStdVector__MU__copy_ctor__684ebde999fa601a15bfa971fff7403f";

/// \dfgPresetOmit
/// \internal
CxxDataStdVector.__ctor(
    ) = "Kludge__CxxDataStdVector__MU__ctor__fe5e6bd76a2e4e20a7eed6b51a0f9e85";

/// \dfgPresetOmit
/// \internal
CxxDataStdVector(
    ) {
    this.__ctor(
        );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVector.__ctor(
    UInt64 _arg0
    ) = "Kludge__CxxDataStdVector__MU__ctor__41abff1ffaf4cb1d735b1804aefbcaf6";

/// \dfgPresetOmit
/// \internal
CxxDataStdVector(
    UInt64 _arg0
    ) {
    this.__ctor(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVector.__ctor(
    CxxDataConstPtr _arg0,
    CxxDataConstPtr _arg1
    ) = "Kludge__CxxDataStdVector__MU__ctor__7e5b2eaef20bf69daaa9cf212e35ed57";

/// \dfgPresetOmit
/// \internal
CxxDataStdVector(
    CxxDataConstPtr _arg0,
    CxxDataConstPtr _arg1
    ) {
    this.__ctor(
        _arg0,
        _arg1
        );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVector(
    in
    Data
    _arg0
    
    ,
    in
    Data
    _arg1
    
    
    ) {
    
    CxxDataConstPtr _arg0__cxx = Make_CxxDataConstPtr(_arg0);
    
    CxxDataConstPtr _arg1__cxx = Make_CxxDataConstPtr(_arg1);
    this.__ctor(
        _arg0__cxx,
        _arg1__cxx
        );
    
    
}

/// \dfgPresetOmit
/// \internal
~CxxDataStdVector() = "Kludge__CxxDataStdVector__MU__dtor__ca980656276a29b3ae731b4fa82460f1";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVector.cxx_size?(
    )
 = "Kludge__CxxDataStdVector__CO__meth_size__d23742e13956f7aba9949703e8f3eba9";

/// \dfgPresetOmit
/// \internal

CxxDataStdVector.cxx_reserve!(
    UInt64 _arg0
    )
 = "Kludge__CxxDataStdVector__MU__meth_reserve__58c10aa92caa59d6209b7445c3990761";

/// \dfgPresetOmit
/// \internal

CxxDataStdVector.cxx_push_back!(
    Data _arg0
    )
 = "Kludge__CxxDataStdVector__MU__meth_push_back__d88792b8734a0e7fcae2c48c4925e510";

/// \dfgPresetOmit
/// \internal

CxxDataStdVector.cxx_pop_back!(
    )
 = "Kludge__CxxDataStdVector__MU__meth_pop_back__3f890508f8359611c9f696e820e92768";

/// \dfgPresetOmit
/// \internal

CxxDataStdVector.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVector.push_back!(
    in
    Data
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVector.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVector.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Unary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Binary Operators
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Assignment Operators
//////////////////////////////////////////////////////////////////////////////

CxxDataStdVector.=(
    CxxDataStdVector that
    ) = "Kludge__CxxDataStdVector__MU__simple_ass_op__1adfe0d3303766b0306054613b8277c4";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVector.cxx_getAtIndex(
    UInt64 index
    )
  = "Kludge__CxxDataStdVector__CO__get_ind_op__27519368c15639623efd4222743ad412";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataStdVector.cxx_setAtIndex!(
    UInt64 index,
    CxxDataConstRef value
    )
  = "Kludge__CxxDataStdVector__MU__set_ind_op__92ac823ee039f7e4ac5c33f2593176ee";

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Additional KL code
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxDataStdVector(Data array<>) {
  this = CxxDataStdVector(
    CxxDataConstPtr(array, 0),
    CxxDataConstPtr(array, array.size())
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVector Make_CxxDataStdVector(Data array<>) {
  return CxxDataStdVector(array);
}

/// \dfgPresetOmit
/// \internal
inline Data[] Make_DataVariableArray(CxxDataStdVector vec) {
  UInt32 size = UInt32(vec.cxx_size());
  Data result[];
  result.reserve(size);
  for (Index i = 0; i < size; ++i)  {
    CxxDataConstRef ref = vec.cxx_getAtIndex(i);
    result.push(ref.cxx_get());
  }
  return result;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVector.appendDesc(io String string) {
  string += "CxxDataStdVector:[";
  UInt64 count = this.cxx_size();
  for (UInt64 index = 0; index < count; ++index) {
    if (index > 0 )
      string += ",";
    if (index == 32) {
      string += "...";
      break;
    }
    string += this.cxx_getAtIndex(index);
  }
  string += "]";
}




//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVector] EDK[Fabric_EDK_KL_CxxDataStdVector] LIB[std::vector< void * >]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtr] EDK[CxxDataStdVectorConstPtr] LIB[std::vector< void * > const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtr] EDK[CxxDataStdVectorConstPtr] LIB[std::vector< void * > const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtr.cxx_size on null CxxDataStdVectorConstPtr";
    return
    this.ptr.data()->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtr] EDK[CxxDataStdVectorConstPtr] LIB[std::vector< void * > const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtr.cxx_getAtIndex on null CxxDataStdVectorConstPtr";
    return this.ptr.data()->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtr] EDK[CxxDataStdVectorMutablePtr] LIB[std::vector< void * > *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtr] EDK[CxxDataStdVectorMutablePtr] LIB[std::vector< void * > *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtr.cxx_size on null CxxDataStdVectorPtr";
    return
    this.ptr.data()->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtr.cxx_reserve on null CxxDataStdVectorPtr";
    
    this.ptr.data()->{ CxxDataStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtr.cxx_push_back!(
    Data _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtr.cxx_push_back on null CxxDataStdVectorPtr";
    
    this.ptr.data()->{ CxxDataStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtr.cxx_pop_back on null CxxDataStdVectorPtr";
    
    this.ptr.data()->{ CxxDataStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtr.push_back!(
    in
    Data
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtr] EDK[CxxDataStdVectorMutablePtr] LIB[std::vector< void * > *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtr.cxx_getAtIndex on null CxxDataStdVectorPtr";
    return this.ptr.data()->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtr] EDK[CxxDataStdVectorMutablePtr] LIB[std::vector< void * > *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataStdVectorPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxDataConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtr.cxx_setAtIndex on null CxxDataStdVectorPtr";
    this.ptr.data()->{ CxxDataStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstRef] EDK[CxxDataStdVectorConstRef] LIB[std::vector< void * > const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstRef] EDK[CxxDataStdVectorConstRef] LIB[std::vector< void * > const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstRef] EDK[CxxDataStdVectorConstRef] LIB[std::vector< void * > const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstRef.cxx_size on null CxxDataStdVectorConstRef";
    return
    this.ptr.data()->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstRef] EDK[CxxDataStdVectorConstRef] LIB[std::vector< void * > const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstRef.cxx_getAtIndex on null CxxDataStdVectorConstRef";
    return this.ptr.data()->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorRef] EDK[CxxDataStdVectorMutableRef] LIB[std::vector< void * > &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorRef] EDK[CxxDataStdVectorMutableRef] LIB[std::vector< void * > &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorRef.cxx_size on null CxxDataStdVectorRef";
    return
    this.ptr.data()->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorRef.cxx_reserve on null CxxDataStdVectorRef";
    
    this.ptr.data()->{ CxxDataStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorRef.cxx_push_back!(
    Data _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorRef.cxx_push_back on null CxxDataStdVectorRef";
    
    this.ptr.data()->{ CxxDataStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorRef.cxx_pop_back on null CxxDataStdVectorRef";
    
    this.ptr.data()->{ CxxDataStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorRef.push_back!(
    in
    Data
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorRef] EDK[CxxDataStdVectorMutableRef] LIB[std::vector< void * > &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorRef.cxx_getAtIndex on null CxxDataStdVectorRef";
    return this.ptr.data()->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorRef] EDK[CxxDataStdVectorMutableRef] LIB[std::vector< void * > &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataStdVectorRef.cxx_setAtIndex!(
    UInt64 index,
    CxxDataConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorRef.cxx_setAtIndex on null CxxDataStdVectorRef";
    this.ptr.data()->{ CxxDataStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxDataStdVectorConstPtr
// CxxDataStdVectorPtr
// CxxDataStdVectorConstRef
// CxxDataStdVectorRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtr(CxxDataStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtr(CxxDataStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxDataStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtr(CxxDataStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtr Make_CxxDataStdVectorConstPtr(CxxDataStdVector value) {
  return CxxDataStdVectorConstPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtr(CxxDataStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtr(CxxDataStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxDataStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtr(CxxDataStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtr Make_CxxDataStdVectorPtr(CxxDataStdVector value) {
  return CxxDataStdVectorPtr(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef(CxxDataStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef(CxxDataStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxDataStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef(CxxDataStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef Make_CxxDataStdVectorConstRef(CxxDataStdVector value) {
  return CxxDataStdVectorConstRef(
    value.__getUnderlyingPtr()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef(CxxDataStdVector array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef(CxxDataStdVector array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_Fabric_EDK_KL_CxxDataStdVector());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef(CxxDataStdVector value) {
  this.ptr = value.__getUnderlyingPtr();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef Make_CxxDataStdVectorRef(CxxDataStdVector value) {
  return CxxDataStdVectorRef(
    value.__getUnderlyingPtr()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxDataStdVectorConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxDataStdVectorConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxDataStdVectorConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef CxxDataStdVectorConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorConstPtr.cxx_getAt on null CxxDataStdVectorConstPtr";
  return CxxDataStdVectorConstRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxDataStdVector()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef CxxDataStdVectorConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxDataStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef CxxDataStdVectorPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorPtr.cxx_getAt on null CxxDataStdVectorPtr";
  return CxxDataStdVectorRef(this.ptr.offset(index * __CxxSize_Fabric_EDK_KL_CxxDataStdVector()));
}

/// Same as for CxxDataStdVectorConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef CxxDataStdVectorPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtr.cxx_setAt(Index i, CxxDataStdVector v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorPtr.cxx_setAt on null CxxDataStdVectorPtr";
  this.ptr.offset(i)->{ CxxDataStdVector } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef(CxxDataStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef.=(CxxDataStdVectorConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxDataStdVector value
/// \dfgPresetOmit
/// \internal
CxxDataStdVector CxxDataStdVectorConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorConstRef.cxx_get on null CxxDataStdVectorConstRef";
  return this.ptr.data()->{ CxxDataStdVector };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef.cxx_set(CxxDataStdVector value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorRef.cxx_set on null CxxDataStdVectorRef";
  this.ptr.data()->{ CxxDataStdVector } = value;
}

/// Assignment of CxxDataStdVector
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef.=(CxxDataStdVector value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVectorPtr] EDK[CxxDataStdVectorMutablePtr] LIB[std::vector< void * > *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrConstPtr] EDK[CxxDataStdVectorPtrConstPtr] LIB[std::vector< void * > * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrConstPtr] EDK[CxxDataStdVectorPtrConstPtr] LIB[std::vector< void * > * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrConstPtr.cxx_size on null CxxDataStdVectorPtrConstPtr";
    return
    this.ptr->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrConstPtr] EDK[CxxDataStdVectorPtrConstPtr] LIB[std::vector< void * > * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrConstPtr.cxx_getAtIndex on null CxxDataStdVectorPtrConstPtr";
    return this.ptr->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrPtr] EDK[CxxDataStdVectorPtrMutablePtr] LIB[std::vector< void * > * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrPtr] EDK[CxxDataStdVectorPtrMutablePtr] LIB[std::vector< void * > * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrPtr.cxx_size on null CxxDataStdVectorPtrPtr";
    return
    this.ptr->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrPtr.cxx_reserve on null CxxDataStdVectorPtrPtr";
    
    this.ptr->{ CxxDataStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrPtr.cxx_push_back!(
    Data _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrPtr.cxx_push_back on null CxxDataStdVectorPtrPtr";
    
    this.ptr->{ CxxDataStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrPtr.cxx_pop_back on null CxxDataStdVectorPtrPtr";
    
    this.ptr->{ CxxDataStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrPtr.push_back!(
    in
    Data
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrPtr] EDK[CxxDataStdVectorPtrMutablePtr] LIB[std::vector< void * > * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrPtr.cxx_getAtIndex on null CxxDataStdVectorPtrPtr";
    return this.ptr->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrPtr] EDK[CxxDataStdVectorPtrMutablePtr] LIB[std::vector< void * > * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataStdVectorPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxDataConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrPtr.cxx_setAtIndex on null CxxDataStdVectorPtrPtr";
    this.ptr->{ CxxDataStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrConstRef] EDK[CxxDataStdVectorPtrConstRef] LIB[std::vector< void * > * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrConstRef] EDK[CxxDataStdVectorPtrConstRef] LIB[std::vector< void * > * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrConstRef] EDK[CxxDataStdVectorPtrConstRef] LIB[std::vector< void * > * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrConstRef.cxx_size on null CxxDataStdVectorPtrConstRef";
    return
    this.ptr->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrConstRef] EDK[CxxDataStdVectorPtrConstRef] LIB[std::vector< void * > * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrConstRef.cxx_getAtIndex on null CxxDataStdVectorPtrConstRef";
    return this.ptr->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrRef] EDK[CxxDataStdVectorPtrMutableRef] LIB[std::vector< void * > * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrRef] EDK[CxxDataStdVectorPtrMutableRef] LIB[std::vector< void * > * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrRef.cxx_size on null CxxDataStdVectorPtrRef";
    return
    this.ptr->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrRef.cxx_reserve on null CxxDataStdVectorPtrRef";
    
    this.ptr->{ CxxDataStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrRef.cxx_push_back!(
    Data _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrRef.cxx_push_back on null CxxDataStdVectorPtrRef";
    
    this.ptr->{ CxxDataStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrRef.cxx_pop_back on null CxxDataStdVectorPtrRef";
    
    this.ptr->{ CxxDataStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorPtrRef.push_back!(
    in
    Data
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrRef] EDK[CxxDataStdVectorPtrMutableRef] LIB[std::vector< void * > * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrRef.cxx_getAtIndex on null CxxDataStdVectorPtrRef";
    return this.ptr->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorPtrRef] EDK[CxxDataStdVectorPtrMutableRef] LIB[std::vector< void * > * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataStdVectorPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxDataConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorPtrRef.cxx_setAtIndex on null CxxDataStdVectorPtrRef";
    this.ptr->{ CxxDataStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxDataStdVectorPtrConstPtr
// CxxDataStdVectorPtrPtr
// CxxDataStdVectorPtrConstRef
// CxxDataStdVectorPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstPtr(CxxDataStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstPtr(CxxDataStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstPtr(CxxDataStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstPtr Make_CxxDataStdVectorPtrConstPtr(CxxDataStdVectorPtr value) {
  return CxxDataStdVectorPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrPtr(CxxDataStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrPtr(CxxDataStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrPtr(CxxDataStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrPtr Make_CxxDataStdVectorPtrPtr(CxxDataStdVectorPtr value) {
  return CxxDataStdVectorPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef(CxxDataStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef(CxxDataStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef(CxxDataStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef Make_CxxDataStdVectorPtrConstRef(CxxDataStdVectorPtr value) {
  return CxxDataStdVectorPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef(CxxDataStdVectorPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef(CxxDataStdVectorPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataStdVectorMutablePtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef(CxxDataStdVectorPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef Make_CxxDataStdVectorPtrRef(CxxDataStdVectorPtr value) {
  return CxxDataStdVectorPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxDataStdVectorPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxDataStdVectorPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxDataStdVectorPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef CxxDataStdVectorPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorPtrConstPtr.cxx_getAt on null CxxDataStdVectorPtrConstPtr";
  return CxxDataStdVectorPtrConstRef(this.ptr.offset(index * __CxxSize_CxxDataStdVectorMutablePtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef CxxDataStdVectorPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxDataStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef CxxDataStdVectorPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorPtrPtr.cxx_getAt on null CxxDataStdVectorPtrPtr";
  return CxxDataStdVectorPtrRef(this.ptr.offset(index * __CxxSize_CxxDataStdVectorMutablePtr()));
}

/// Same as for CxxDataStdVectorPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef CxxDataStdVectorPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrPtr.cxx_setAt(Index i, CxxDataStdVectorPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorPtrPtr.cxx_setAt on null CxxDataStdVectorPtrPtr";
  this.ptr.offset(i)->{ CxxDataStdVectorPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef(CxxDataStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef.=(CxxDataStdVectorPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxDataStdVectorPtr value
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtr CxxDataStdVectorPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorPtrConstRef.cxx_get on null CxxDataStdVectorPtrConstRef";
  return this.ptr->{ CxxDataStdVectorPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef.cxx_set(CxxDataStdVectorPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorPtrRef.cxx_set on null CxxDataStdVectorPtrRef";
  this.ptr->{ CxxDataStdVectorPtr } = value;
}

/// Assignment of CxxDataStdVectorPtr
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef.=(CxxDataStdVectorPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// PtrRef KL[CxxDataStdVectorConstPtr] EDK[CxxDataStdVectorConstPtr] LIB[std::vector< void * > const *]
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrConstPtr] EDK[CxxDataStdVectorConstPtrConstPtr] LIB[std::vector< void * > const * const *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrConstPtr] EDK[CxxDataStdVectorConstPtrConstPtr] LIB[std::vector< void * > const * const *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtrConstPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrConstPtr.cxx_size on null CxxDataStdVectorConstPtrConstPtr";
    return
    this.ptr->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtrConstPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrConstPtr] EDK[CxxDataStdVectorConstPtrConstPtr] LIB[std::vector< void * > const * const *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorConstPtrConstPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrConstPtr.cxx_getAtIndex on null CxxDataStdVectorConstPtrConstPtr";
    return this.ptr->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrPtr] EDK[CxxDataStdVectorConstPtrMutablePtr] LIB[std::vector< void * > const * *]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrPtr] EDK[CxxDataStdVectorConstPtrMutablePtr] LIB[std::vector< void * > const * *]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtrPtr.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrPtr.cxx_size on null CxxDataStdVectorConstPtrPtr";
    return
    this.ptr->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrPtr.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrPtr.cxx_reserve on null CxxDataStdVectorConstPtrPtr";
    
    this.ptr->{ CxxDataStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrPtr.cxx_push_back!(
    Data _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrPtr.cxx_push_back on null CxxDataStdVectorConstPtrPtr";
    
    this.ptr->{ CxxDataStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrPtr.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrPtr.cxx_pop_back on null CxxDataStdVectorConstPtrPtr";
    
    this.ptr->{ CxxDataStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtrPtr.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrPtr.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrPtr.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrPtr.push_back!(
    in
    Data
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrPtr] EDK[CxxDataStdVectorConstPtrMutablePtr] LIB[std::vector< void * > const * *]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorConstPtrPtr.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrPtr.cxx_getAtIndex on null CxxDataStdVectorConstPtrPtr";
    return this.ptr->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrPtr] EDK[CxxDataStdVectorConstPtrMutablePtr] LIB[std::vector< void * > const * *]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataStdVectorConstPtrPtr.cxx_setAtIndex!(
    UInt64 index,
    CxxDataConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrPtr.cxx_setAtIndex on null CxxDataStdVectorConstPtrPtr";
    this.ptr->{ CxxDataStdVector }.cxx_setAtIndex(
        index,
        value
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrConstRef] EDK[CxxDataStdVectorConstPtrConstRef] LIB[std::vector< void * > const * const &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrConstRef] EDK[CxxDataStdVectorConstPtrConstRef] LIB[std::vector< void * > const * const &]
// Constructors and Destructor
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrConstRef] EDK[CxxDataStdVectorConstPtrConstRef] LIB[std::vector< void * > const * const &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtrConstRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrConstRef.cxx_size on null CxxDataStdVectorConstPtrConstRef";
    return
    this.ptr->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtrConstRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrConstRef] EDK[CxxDataStdVectorConstPtrConstRef] LIB[std::vector< void * > const * const &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorConstPtrConstRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrConstRef.cxx_getAtIndex on null CxxDataStdVectorConstPtrConstRef";
    return this.ptr->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}


//////////////////////////////////////////////////////////////////////////////
//
// Record
// Implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrRef] EDK[CxxDataStdVectorConstPtrMutableRef] LIB[std::vector< void * > const * &]
// Getters and Setters
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrRef] EDK[CxxDataStdVectorConstPtrMutableRef] LIB[std::vector< void * > const * &]
// Methods
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtrRef.cxx_size?(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrRef.cxx_size on null CxxDataStdVectorConstPtrRef";
    return
    this.ptr->{ CxxDataStdVector }.cxx_size(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrRef.cxx_reserve!(
    UInt64 _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrRef.cxx_reserve on null CxxDataStdVectorConstPtrRef";
    
    this.ptr->{ CxxDataStdVector }.cxx_reserve(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrRef.cxx_push_back!(
    Data _arg0
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrRef.cxx_push_back on null CxxDataStdVectorConstPtrRef";
    
    this.ptr->{ CxxDataStdVector }.cxx_push_back(
        _arg0
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrRef.cxx_pop_back!(
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrRef.cxx_pop_back on null CxxDataStdVectorConstPtrRef";
    
    this.ptr->{ CxxDataStdVector }.cxx_pop_back(
        );
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrRef.reserve!(
    in
    UInt64
    _arg0
    
    
    )
{   
    
    
    this.cxx_reserve(
        _arg0
        );
    
    
    
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrRef.pop_back!(
    )
{   
    
    this.cxx_pop_back(
        );
    
    
}

/// \dfgPresetOmit
/// \internal
UInt64
CxxDataStdVectorConstPtrRef.size?(
    )
{   
    UInt64 __res = 
    this.cxx_size(
        );
    
    return __res;
}

/// \dfgPresetOmit
/// \internal

CxxDataStdVectorConstPtrRef.push_back!(
    in
    Data
    _arg0
    
    
    )
{   
    
    
    this.cxx_push_back(
        _arg0
        );
    
    
    
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrRef] EDK[CxxDataStdVectorConstPtrMutableRef] LIB[std::vector< void * > const * &]
// GetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataConstRef
CxxDataStdVectorConstPtrRef.cxx_getAtIndex(
    UInt64 index
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrRef.cxx_getAtIndex on null CxxDataStdVectorConstPtrRef";
    return this.ptr->{ CxxDataStdVector }.cxx_getAtIndex(
        index
        );
}

//////////////////////////////////////////////////////////////////////////////
// KL[CxxDataStdVectorConstPtrRef] EDK[CxxDataStdVectorConstPtrMutableRef] LIB[std::vector< void * > const * &]
// SetAtIndex Operator
//////////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
CxxDataStdVectorConstPtrRef.cxx_setAtIndex!(
    UInt64 index,
    CxxDataConstRef value
    )
{
    if (Fabric_Guarded && !this.ptr)
        throw "Call of CxxDataStdVectorConstPtrRef.cxx_setAtIndex on null CxxDataStdVectorConstPtrRef";
    this.ptr->{ CxxDataStdVector }.cxx_setAtIndex(
        index,
        value
        );
}



////////////////////////////////////////////////////////////////////////
// CxxDataStdVectorConstPtrConstPtr
// CxxDataStdVectorConstPtrPtr
// CxxDataStdVectorConstPtrConstRef
// CxxDataStdVectorConstPtrRef
// Wrapper methods
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
// Construction
////////////////////////////////////////////////////////////////////////

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstPtr(CxxDataStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstPtr(CxxDataStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstPtr(CxxDataStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstPtr Make_CxxDataStdVectorConstPtrConstPtr(CxxDataStdVectorConstPtr value) {
  return CxxDataStdVectorConstPtrConstPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrPtr(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrPtr(CxxDataStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrPtr(CxxDataStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrPtr(CxxDataStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrPtr Make_CxxDataStdVectorConstPtrPtr(CxxDataStdVectorConstPtr value) {
  return CxxDataStdVectorConstPtrPtr(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef(CxxDataStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef(CxxDataStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef(CxxDataStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef Make_CxxDataStdVectorConstPtrConstRef(CxxDataStdVectorConstPtr value) {
  return CxxDataStdVectorConstPtrConstRef(
    value.data()
    );
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef(Data data) {
  this.ptr = data;
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef(CxxDataStdVectorConstPtr array<>) {
  this.ptr = array.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef(CxxDataStdVectorConstPtr array<>, Index index) {
  this.ptr = array.data().offset(index * __CxxSize_CxxDataStdVectorConstPtr());
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef(CxxDataStdVectorConstPtr value) {
  this.ptr = value.data();
}

/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef Make_CxxDataStdVectorConstPtrRef(CxxDataStdVectorConstPtr value) {
  return CxxDataStdVectorConstPtrRef(
    value.data()
    );
}

////////////////////////////////////////////////////////////////////////
// Others
////////////////////////////////////////////////////////////////////////

/// Is valid.  Check for null pointer
/// \dfgPresetOmit
/// \internal
Boolean CxxDataStdVectorConstPtrConstPtr.cxx_isValid() {
  return !!this.ptr;
}

/// Access to the underlying pointer
/// \dfgPresetOmit
/// \internal
Data CxxDataStdVectorConstPtrConstPtr.__getUnderlyingPtr() {
  return this.ptr;
}

/// \dfgPresetOmit
/// \internal
Boolean(CxxDataStdVectorConstPtrConstPtr ptr) {
  this = ptr.cxx_isValid();
}

/// Indexing operation
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef CxxDataStdVectorConstPtrConstPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorConstPtrConstPtr.cxx_getAt on null CxxDataStdVectorConstPtrConstPtr";
  return CxxDataStdVectorConstPtrConstRef(this.ptr.offset(index * __CxxSize_CxxDataStdVectorConstPtr()));
}

/// Deref the pointer
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef CxxDataStdVectorConstPtrConstPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Convert to a string
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstPtr.appendDesc(io String s) {
  s += this.ptr;
}

/// Same as for CxxDataStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef CxxDataStdVectorConstPtrPtr.cxx_getAt(Index index) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorConstPtrPtr.cxx_getAt on null CxxDataStdVectorConstPtrPtr";
  return CxxDataStdVectorConstPtrRef(this.ptr.offset(index * __CxxSize_CxxDataStdVectorConstPtr()));
}

/// Same as for CxxDataStdVectorConstPtrConstPtr, but returning a non-const ref
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef CxxDataStdVectorConstPtrPtr.cxx_deref() {
  return this.cxx_getAt(0);
}

/// Set the value at an offset into the array
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrPtr.cxx_setAt(Index i, CxxDataStdVectorConstPtr v) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorConstPtrPtr.cxx_setAt on null CxxDataStdVectorConstPtrPtr";
  this.ptr.offset(i)->{ CxxDataStdVectorConstPtr } = v;
}

/// Copy ctor
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef(CxxDataStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Assigment
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef.=(CxxDataStdVectorConstPtrConstRef that) {
  this.ptr = that.ptr;
}

/// Get the CxxDataStdVectorConstPtr value
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtr CxxDataStdVectorConstPtrConstRef.cxx_get() {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorConstPtrConstRef.cxx_get on null CxxDataStdVectorConstPtrConstRef";
  return this.ptr->{ CxxDataStdVectorConstPtr };
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrConstRef.appendDesc(io String s) {
  s += this.cxx_get();
}

/// Set the value
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef.cxx_set(CxxDataStdVectorConstPtr value) {
  if (Fabric_Guarded && !this.ptr)
    throw "Call of CxxDataStdVectorConstPtrRef.cxx_set on null CxxDataStdVectorConstPtrRef";
  this.ptr->{ CxxDataStdVectorConstPtr } = value;
}

/// Assignment of CxxDataStdVectorConstPtr
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef.=(CxxDataStdVectorConstPtr value) {
  this.cxx_set(value);
}

/// Convert to String
/// \dfgPresetOmit
/// \internal
CxxDataStdVectorConstPtrRef.appendDesc(io String s) {
  s += this.cxx_get();
}


//////////////////////////////////////////////////////////////////////////////
//
// Epilogs
//
// To add epilog code, add eg. to gen_script.kludge.py:
//
//   ext.add_kl_epilog("""
//   MyGlobalFunc() {
//     report("MyGlobalFunc");
//   }
//
//////////////////////////////////////////////////////////////////////////////

// No epilogs specified
